// This script has been auto-generated by TheRealSolly | Solomon Blount.
// The following contents is all directly imported from DAZ's Documentation Website and inherits the license set, which is the following...
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Attribution 3.0 Unported (CC BY 3.0) | https://creativecommons.org/licenses/by/3.0/ | (C) Daz Productions, Inc 224 S 200 W, Salt Lake City, UT 84101
// I DO NOT WORK FOR DAZ PRODUCTIONS INC AND THIS SCRIPT WAS NOT SUPPORTED BY OR ENDORSED BY ANYONE AT DAZ PRODUCTIONS INC.
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// If I made your life wonderful, if you're feeling generious enough to donate to make me feel wonderful, you can do so by going here:
//                                                         https://www.buymeacoffee.com/therealsoll
// Anyway, here are some things you need to know.
//                                                THIS VERSION DOES NOT INCLUDE ENUMERATORS NOR SIGNALS AS OF YET.
//                                      THIS VERSION ALSO DOES NOT INCLUDE GLOBAL, STRING, NUMBER, BOOLEAN, ETC FUNCTIONS
//                                     THIS FILE PURPOSEFULLY HAS ERRORS SO THE INTELLISENSE CAN ASSIST YOU WITH YOUR CODE.
//                                             THIS HAS ONLY BEEN TESTED ON VISUAL STUDIO CODE VERSION 1.55.0.
// ok enough yelling. 
// To make .dsa scripts use the JS/TS interpreter, create a new file with the .dsa extension, on the lower-right of VSCode click on the file type and select "Configure file assocations for .dsa" and then select in JavaScript.
// Do not select TS as the interpreted language. Use JS. 
// There will be more adjustments to this script but i'm in school...so yeah: https://github.com/siblount/JzSense
// Happy Coding!
/**
 * @classdesc See Also:


 DzViewport.get3DViewport()
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/3dviewport_dz}*/
class Dz3DViewport extends QWidget {
	/**
 * @description Holds whether or not the aspect frame is drawn in the viewport.
	*/
	aspectOn:Boolean;
	/**
 * @description Holds whether or not the origin axes are drawn in the viewport.
	*/
	axesOn:Boolean;
	/**
 * @description Holds the background color of the viewport
	*/
	background:Color;
	/**
 * @description Holds the style of the floor that is drawn in the viewport.
	*/
	floorStyle:FloorStyle;
	/**
 * @description Holds the shading style of the viewport.
	*/
	shadeStyle:ShadeStyle;
	/**
 * @description Holds whether or not the Pose Tool is shown.
	*/
	showPoseTool:Boolean;
	/**
 * @description Holds whether or not the thirds guide is drawn in the viewport.
	*/
	thirdsGuideOn:Boolean;
	/**
 * @description Holds the mode for the viewport display of toolbars/camera cube
	*/
	toolBarMode:ToolBarMode;
	/**
 * @description ENUMERATOR: No floor is drawn.
*/
	
	static NoFloor;
	/**
 * @description ENUMERATOR: A grid floor is drawn.
*/
	
	static WireFloor;
	/**
 * @description ENUMERATOR: A solid floor is drawn. (not currently implemented)
*/
	
	static SolidFloor;
	/**
 * @description ENUMERATOR: Draws unlit wire-frame bounding boxes.
*/
	
	static WireBox;
	/**
 * @description ENUMERATOR: Draws smooth-shaded bounding boxes.
*/
	
	static SolidBox;
	/**
 * @description ENUMERATOR: Draws unlit wire-frames.
*/
	
	static Wireframe;
	/**
 * @description ENUMERATOR: Draws lit wire-frames.
*/
	
	static LitWireframe;
	/**
 * @description ENUMERATOR: Draws unlit wire-frames, front geometry facing only.
*/
	
	static HiddenLine;
	/**
 * @description ENUMERATOR: Draws lit smooth shaded objects with wireframes imposed.
*/
	
	static WireShaded;
	/**
 * @description ENUMERATOR: Draws lit smooth shaded objects.
*/
	
	static SmoothShaded;
	/**
 * @description ENUMERATOR: Draws lit smooth shaded objects with any texture/transparency maps applied and wireframes imposed.
*/
	
	static WireTextured;
	/**
 * @description ENUMERATOR: Draws lit smooth shaded objects with any texture/transparency maps applied.
*/
	
	static Textured;
	/**
 * @description ENUMERATOR: A mode that docks the toolbar along the top edge of the viewport.
*/
	
	static DockedToolBar;
	/**
 * @description ENUMERATOR: A mode that uses a Camera Cube HUD in the top right corner of the viewport.
*/
	
	static CameraCubeHUD;
	/**
 * @description Aim the viewport's camera at the selected nodes in the scene. If the scene does not have any select nodes, all nodes in the scene are aimed. Note that the viewport's camera is excluded, as are any nodes that are parented to the viewport's camera.
*/
	aimCamera():void {
	
	}
	/**
 * @description Aim the viewport's camera at the given box. If the box is invalid this function does nothing.
*/
	aimCameraAtBox(box:DzBox3):DzBox3 {
	
	}
	/**
 * @description Aim the viewport's camera at the selected nodes in the scene. If the scene does not have any select nodes, all nodes in the scene are aimed. Note that the viewport's camera is excluded, as are any nodes that are parented to the viewport's camera.
*/
	aimCameraAtPrimaryNode():void {
	
	}
	/**
 * @description Captures the current contents from the OpenGL frame buffer as an image.
*/
	captureImage():Image {
	
	}
	/**
 * @description Return Value:
*/
	currentDimensions():DzInt2 {
	
	}
	/**
 * @description Frame the viewport's camera at the selected nodes in the scene. If the scene does not have any select nodes, all nodes in the scene are framed. Note that the viewport's camera is excluded, as are any nodes that are parented to the viewport's camera.
*/
	frameCamera():void {
	
	}
	/**
 * @description Frame the viewport's camera at the given box. If the box is invalid this function does nothing.
*/
	frameCameraOnBox(box:DzBox3):DzBox3 {
	
	}
	/**
 * @description Frame the viewport's camera at the selected nodes in the scene. If the scene does not have any select nodes, all nodes in the scene are framed. Note that the viewport's camera is excluded, as are any nodes that are parented to the viewport's camera.
*/
	frameCameraOnSelectedNodes():void {
	
	}
	/**
 * @description Return Value:
*/
	getAspectFrameRect():Rect {
	
	}
	/**
 * @description Return Value:
*/
	getCamera():DzCamera {
	
	}
	/**
 * @description Return Value:
*/
	getCameraCube():void {
	
	}
	/**
 * @description Return Value:
*/
	getUserDrawStyle():String {
	
	}
	/**
 * @description Return Value:
*/
	getViewport():DzViewport {
	
	}
	/**
 * @description Performs a hardware assisted OpenGL render in this viewport with the given settings.
*/
	hardwareRender(handler:DzRenderHandler):Boolean {
	
	}
	/**
 * @description Performs a hardware assisted OpenGL render in this viewport with the given settings.
*/
	hardwareRenderWithOptions(handler:DzRenderHandler, options:DzRenderOptions, camera:DzCamera, style:DzDrawStyle):Boolean {
	
	}
	/**
 * @description Return Value:
*/
	isHardwareRenderable():Boolean {
	
	}
	/**
 * @description Return Value:
*/
	mouseIsDown():Boolean {
	
	}
	/**
 * @description Performs a facet picking operation on the scene through this viewport.
*/
	pickOnFacet(pnt:Point):Number {
	
	}
	/**
 * @description Performs a gizmo picking operation through this viewport. View tools (see DzViewTool) can draw a 'gizmo' in the viewport for the user to interact with. The tool can assign different parts of the gizmo to specific indices, so as to tell what part of the gizmo was clicked by the user.
*/
	pickOnGizmo(pnt:Point):Number {
	
	}
	/**
 * @description Performs a material picking operation on the scene through this viewport. This example shows the mousePress() implementation from a view tool (see DzViewTool) that sets the color of any material that the user clicks in the viewport.
*/
	pickOnMaterial(pnt:Point):DzMaterial {
	
	}
	/**
 * @description Performs a node picking operation on the scene through this viewport. View tools (see DzViewTool) will commonly use this function to determine what node (if any) that the user clicks on. This example shows the mousePress() implementation from a view tool that selects the node that the user clicks in the viewport.
*/
	pickOnNode(pnt:Point, useSelectionMaps:Boolean):DzNode {
	
	}
	/**
 * @description Performs a quick render of the scene suitable for a thumbnail image.
*/
	renderThumbnail(handler:DzRenderHandler):Boolean {
	
	}
	/**
 * @description Reset the viewport's camera to its default state.
*/
	resetCamera():void {
	
	}
	/**
 * @description Set the camera for the view. If a matching camera is not found, this function does nothing.
*/
	setCamera(cam:String):String {
	
	}
	/**
 * @description Set the camera for the view. The pointer passed in must be a camera in the scene, or one of the view cameras from DzViewportMgr.
*/
	setCamera(cam:DzCamera):DzCamera {
	
	}
	/**
 * @description Set the draw style for the viewport. DzDrawStyle objects are ref counted, so the viewport refs the style when it is set, and unrefs it when it is no longer using the style. The draw style will then delete itself when its ref count reaches zero.
*/
	setDrawStyle(style:DzDrawStyle):DzDrawStyle {
	
	}
	/**
 * @description Attempts to set the DrawStyle for the viewport.
*/
	setUserDrawStyle(description:String):Boolean {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when a new active camera has been changed for this viewport.
 * @signature "activeCameraChanged(DzCamera*)"
 * @event
*/
	activeCameraChanged(cam:DzCamera):void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when the projection of the active camera of this viewport has changed.
 * @signature "activeCameraProjectionChanged()"
 * @event
*/
	activeCameraProjectionChanged():void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when the transform of the active camera of this viewport has changed.
 * @signature "activeCameraTransformChanged()"
 * @event
*/
	activeCameraTransformChanged():void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when the draw state for the aspect frame changes.
 * @signature "aspectOnChanged(bool)"
 * @event
*/
	aspectOnChanged(onOff:Boolean):void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when the draw state for the origin axes changes.
 * @signature "axesOnChanged(bool)"
 * @event
*/
	axesOnChanged(onOff:Boolean):void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when the background color of the viewport changes.
 * @signature "backgroundColorChanged(const QColor&)"
 * @event
*/
	backgroundColorChanged(color:Color):void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when the viewport is about to display a context menu. Other objects can connect to this signal to add custom items to the menu that is displayed to the user. Only connect to this signal if you only want to affect this particular viewport - otherwise connect to DzViewportMgr.contextMenuAboutToShow().
 * @signature "contextMenuAboutToShow(DzMenu*,QPoint)"
 * @event
*/
	contextMenuAboutToShow(menu:DzMenu, pos:Point):void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when the current dimensions of this viewport has changed.
 * @signature "currentDimensionsChanged()"
 * @event
*/
	currentDimensionsChanged():void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when the dimensions of this viewport has changed.
 * @signature "dimnesionsChanged()"
 * @event
*/
	dimensionsChanged():void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when the draw style of the viewport has changed.
 * @signature "drawStyleChanged(DzDrawStyle*)"
 * @event
*/
	drawStyleChanged(style:DzDrawStyle):void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when the floor style of the viewport changes.
 * @signature "floorStyleChanged(FloorStyle)"
 * @event
*/
	floorStyleChanged(style:FloorStyle):void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when the draw state for the thirds guide changes.
 * @signature "thirdsGuideOnChanged(bool)"
 * @event
*/
	thirdsGuideOnChanged(onOff:Boolean):void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when the view tool bar is docked or undocked.
 * @signature "toolBarDocked(bool)"
 * @event
*/
	toolBarDocked(onOff:Boolean):void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when the toolbar mode has been changed for this viewport.
 * @signature "toolModeChanged(ToolBarMode)"
 * @event
*/
	toolModeChanged(mode:ToolBarMode):void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when the area this viewport displays has changed.
 * @signature "viewChanged()"
 * @event
*/
	viewChanged():void {
	
	}

}
/**
 * @classdesc This render handler is a DzImageRenderHandler that is the size of the aspect frame for the given viewport, and paints all data passed to it over the current view.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/3dviewrenderhandler_dz}*/
class Dz3DViewRenderHandler extends DzImageRenderHandler {
	/**
 * @description Constructor. Creates a render handler that will render to the given viewport.
 * @constructor
*/
	constructor(view:DzViewport, startTime:DzTime, filename:String) {
	
	}
	/**
 * @description Return Value:
*/
	getLeftOffset():Number {
	
	}
	/**
 * @description Return Value:
*/
	getTopOffset():Number {
	
	}
	/**
 * @description Return Value:
*/
	getView():void {
	
	}
	/**
 * @description Return Value:
*/
	getViewport():DzViewport {
	
	}

}
/**
 * @classdesc TODO:
Add detailed description.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/abstractassetcontainer_dz}*/
class DzAbstractAssetContainer extends QObject, DzRefCountedItem {
	/**
 * @description Holds whether or not sub-containers can be copied. (Read Only)
	*/
	canCopyContainers:Boolean;
	/**
 * @description Holds whether or not this container can be deleted. (Read Only)
	*/
	canDeleteContainer:Boolean;
	/**
 * @description Holds whether or not sub-containers can be added to this container. (Read Only)
	*/
	canInsertSubContainer:Boolean;
	/**
 * @description Holds whether or not the assets in this container can be modified. (Read Only)
	*/
	canModifyAssets:Boolean;
	/**
 * @description Holds whether or not this container can be renamed. (Read Only)
	*/
	canRenameContainer:Boolean;
	/**
 * @description Holds the id for this container. (Read Only)
	*/
	id:Object;
	/**
 * @description Holds whether or not removing an asset from this container will result in that asset's file being deleted. (Read Only)
	*/
	removeAssetCausesDelete:Boolean;
	/**
 * @description Holds the tooltip for this container. (Read Only)
	*/
	tooltip:String;
	/**
 * @description Holds the use count for this container.
	*/
	useCount:Number;
	/**
 * @description Attempts to clear out the assets that can be rebuilt.
*/
	clearRebuildableAssets():Boolean {
	
	}
	/**
 * @description Attempts to create a new child container.
*/
	createNewChildContainer(containerName:String):Boolean {
	
	}
	/**
 * @description Parameter(s):
*/
	getAsset(index:Number):DzAsset {
	
	}
	/**
 * @description Return Value:
*/
	getAssets():Array {
	
	}
	/**
 * @description Parameter(s):
*/
	getChildContainer(index:Number):Number {
	
	}
	/**
 * @description Return Value:
*/
	getChildContainers():Array {
	
	}
	/**
 * @description Return Value:
*/
	getChildIconSize():Size {
	
	}
	/**
 * @description Return Value:
*/
	getContainerName():String {
	
	}
	/**
 * @description Return Value:
*/
	getIDPath():Array {
	
	}
	/**
 * @description Return Value:
*/
	getNumAssets():Number {
	
	}
	/**
 * @description Return Value:
*/
	getNumChildContainers():Number {
	
	}
	/**
 * @description Return Value:
*/
	getOwner():void {
	
	}
	/**
 * @description Return Value:
*/
	getSmallChildIconSize():Size {
	
	}
	/**
 * @description Return Value:
*/
	getSupportFile():String {
	
	}
	/**
 * @description Parameter(s):
*/
	hasAsset(asset:DzAsset):Boolean {
	
	}
	/**
 * @description Return Value:
*/
	hasChildContainers():Boolean {
	
	}
	/**
 * @description Boolean DzAbstractAssetContainer.ingoreAssetConflicts()
*/
	ignoreAssetConflicts():Boolean {
	
	}
	/**
 * @description Initializes this containers child containers.
*/
	initChildren():Boolean {
	
	}
	/**
 * @description Attempts to insert the given asset into this container.
*/
	insertAsset(asset:DzAsset):Boolean {
	
	}
	/**
 * @description Attempts to insert container as a child of this container.
*/
	insertChildContainer(container:DzAbstractAssetContainer):Boolean {
	
	}
	/**
 * @description Return Value:
*/
	isFileSystemBased():Boolean {
	
	}
	/**
 * @description Attempts to move the given container from its parent.
*/
	moveFromParent(child:DzAbstractAssetContainer):Boolean {
	
	}
	/**
 * @description Attempts to remove the given asset from this container.
*/
	removeAsset(asset:DzAsset):Boolean {
	
	}
	/**
 * @description Parameter(s):
*/
	removeAssetOnCut(toContainer:DzAbstractAssetContainer):Boolean {
	
	}
	/**
 * @description Attempts to remove the given container.
*/
	removeChildContainer(container:DzAbstractAssetContainer):Boolean {
	
	}
	/**
 * @description Attempts to rename this container.
*/
	rename(name:String):Boolean {
	
	}
	/**
 * @description Attempts to rename the given asset.
*/
	renameAsset(asset:DzAsset, newAssetName:String):Boolean {
	
	}
	/**
 * @description Attempts to rename the given child container.
*/
	renameChildContainer(container:DzAbstractAssetContainer, name:String):Boolean {
	
	}
	/**
 * @description Sets the name for this container.
*/
	setContainerName(name:String):String {
	
	}
	/**
 * @description Attemps to update this container.
*/
	update():Boolean {
	
	}
	/**
 * @description Attempts to update the assets associated with this container.
*/
	updateAssets():Boolean {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted the icon for an asset has changed.
 * @signature "assetIconChanged(DzAsset*)"
 * @event
*/
	assetIconChanged(asset:DzAsset):void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when an asset has been renamed.
 * @signature "assetRenamed(DzAsset*,int)"
 * @event
*/
	assetRenamed(asset:DzAsset, index:Number):void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted before assets are added.
 * @signature "beginAssetAdd(int,int)"
 * @event
*/
	beginAssetAdd(start:Number, end:Number):void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted before assets are removed.
 * @signature "beginAssetRemove(int,int)"
 * @event
*/
	beginAssetRemove(start:Number, end:Number):void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted before a child container is added.
 * @signature "beginChildContainerAdd(DzAbstractAssetContainer*,int,int)"
 * @event
*/
	beginChildContainerAdd(container:DzAbstractAssetContainer, start:Number, end:Number):void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted before a child container is removed.
 * @signature "beginChildContainerRemove(DzAbstractAssetContainer*,int,int)"
 * @event
*/
	beginChildContainerRemove(container:DzAbstractAssetContainer, start:Number, end:Number):void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted just before a child container is removed.
 * @signature "childContainerAboutToBeRemoved(DzAbstractAssetContainerPtr)"
 * @event
*/
	childContainerAboutToBeRemoved(childContainer:DzAbstractAssetContainer):void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted after a child container has been removed.
 * @signature "childContainerRemoved(DzAbstractAssetContainerPtr)"
 * @event
*/
	childContainerRemoved(childContainer:DzAbstractAssetContainer):void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted after assets have been added.
 * @signature "endAssetAdd()"
 * @event
*/
	endAssetAdd():void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted after assets have been removed.
 * @signature "endAssetRemove()"
 * @event
*/
	endAssetRemove():void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted after a child container has been added.
 * @signature "endChildContainerAdd()"
 * @event
*/
	endChildContainerAdd():void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted after a child container has been removed.
 * @signature "endChildContainerRemove()"
 * @event
*/
	endChildContainerRemove():void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted after the icon for the container has changed.
 * @signature "iconChanged(DzAbstractAssetContainer*)"
 * @event
*/
	iconChanged(container:DzAbstractAssetContainer):void {
	
	}

}
/**
 * @classdesc TODO:
Add detailed description.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/abstractnodeeditorpane_dz}*/
class DzAbstractNodeEditorPane extends DzPane {
	/**
 * @description Return Value:
*/
	displaySeparate():Boolean {
	
	}
	/**
 * @description Return Value:
*/
	getContentTab():void {
	
	}
	/**
 * @description Return Value:
*/
	getEditorGuidePage():DzGuidePage {
	
	}
	/**
 * @description Return Value:
*/
	getInfoDivider():DzInfoDivider {
	
	}
	/**
 * @description Return Value:
*/
	getNodeEditor():void {
	
	}
	/**
 * @description Return Value:
*/
	getPresetGuidePage():DzGuidePage {
	
	}
	/**
 * @description Sets the current page to the index specified by which; 0 based.
*/
	setCurrentTab(which:Number):Number {
	
	}
	/**
 * @description Sets whether or not hidden properties are displayed in the pane.
*/
	showHidden(onOff:Boolean):Boolean {
	
	}
	/**
 * @description Return Value:
*/
	showingHidden():Boolean {
	
	}
	/**
 * @description Toggle between whether each selected node is displayed separately in the navigation list or not.
*/
	toggleDisplaySeparate():void {
	
	}
	/**
 * @description Toggle between whether hidden properties are shown in the list or not.
*/
	toggleShowHidden():void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when the user hovers the cursor over an asset on the Presets page
 * @signature "assetHoverChanged(const DzAssetPtr&)"
 * @event
*/
	assetHoverChanged(asset:DzAsset):void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when the current page changes
 * @signature "currentTabChanged(int)"
 * @event
*/
	currentTabChanged(which:Number):void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when the option to show hidden properties changes
 * @signature "showingHiddenChanged(bool)"
 * @event
*/
	showingHiddenChanged(onOff:Boolean):void {
	
	}

}
/**
 * @classdesc This class represents an action that the user can perform in the interface via pressing a hot key or clicking on a menu/toolbar item.



All action items are added to a list of interface actions which the user can customize. The user can specify their own keyboard shortcut or 'Hot Key' for the action, and any action item can be moved into a custom toolbar, as well as appear in the DAZ Studio main menu.



See Also:


 DzActionMgr.getAction()

 DzActionMgr.findAction()
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/action_dz}*/
class DzAction extends QObject {
	/**
 * @description The action group that this action belongs to (Read Only)
	*/
	actionGroup:String;
	/**
 * @description TODO:
Add description.
	*/
	autoRepeat:Boolean;
	/**
 * @description TODO:
Add description.
	*/
	checkable:Boolean;
	/**
 * @description TODO:
Add description.
	*/
	checked:Boolean;
	/**
 * @description The primary menu that this action is added to by default, if the user has not chosen a custom location (Read Only)
	*/
	defaultMenu:String;
	/**
 * @description The menus that this action is added to by default, if the user has not chosen a custom location (Read Only).
	*/
	defaultMenus:Array;
	/**
 * @description The default keyboard shortcut (hotkey) that is associated with this action (Read Only before 4.6.4.48)
	*/
	defaultShortcut:String;
	/**
 * @description The primary toolBar that this action is added to by default, if the user has not chosen a custom location (Read Only)
	*/
	defaultToolBar:String;
	/**
 * @description The toolBars that this action is added to by default, if the user has not chosen a custom location (Read Only).
	*/
	defaultToolBars:Array;
	/**
 * @description The user-readable description of the action.
	*/
	description:String;
	/**
 * @description Emitted when an action is enabled or disabled. onOff is true if the action was enabled, false if it was disabled.
	*/
	enabled:Boolean;
	/**
 * @description The image file that is used as the icon for this action (if any).
	*/
	iconFile:String;
	/**
 * @description TODO:
Add description.
	*/
	iconText:String;
	/**
 * @description TODO:
Add description.
	*/
	iconVisibleInMenu:Boolean;
	/**
 * @description TODO:
Add description.
	*/
	shortcut:String;
	/**
 * @description TODO:
Add description.
	*/
	statusTip:String;
	/**
 * @description The standard pixmap that is used as the icon for this action (if any).
	*/
	styleIcon:Number;
	/**
 * @description TODO:
Add description.
	*/
	text:String;
	/**
 * @description TODO:
Add description.
	*/
	toolTip:String;
	/**
 * @description TODO:
Add description.
	*/
	visible:Boolean;
	/**
 * @description TODO:
Add description.
	*/
	whatsThis:String;
	/**
 * @description Activates the action in the 'Hover' state programatically.
*/
	hover():void {
	
	}
	/**
 * @description Sets the action's toggle state.
*/
	setChecked(onOff:Boolean):Boolean {
	
	}
	/**
 * @description Disables/Enables the action in the interface.
*/
	setDisabled(onOff:Boolean):Boolean {
	
	}
	/**
 * @description Enables/Disables the action in the interface.
*/
	setEnabled(onOff:Boolean):Boolean {
	
	}
	/**
 * @description The same as calling setChecked( !onOff ). This method is provided for convenience when connecting this slot to a signal that emits a value that is the inverse of the desired onOff state.
*/
	setOff(onOff:Boolean):Boolean {
	
	}
	/**
 * @description Sets whether the action is visible in the interface.
*/
	setVisible(onOff:Boolean):Boolean {
	
	}
	/**
 * @description Toggles the action programatically.
*/
	toggle():void {
	
	}
	/**
 * @description Activates the action programatically.
*/
	trigger():void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when an action has changed.
 * @signature "changed()"
 * @event
*/
	changed():void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description TODO: Add Description
 * @signature TODO: Add Description
 * @event
*/
	enabled(onOff:Boolean):void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when an action is highlighted by the user; for example, when the user pauses with the cursor over a menu option, toolbar button, or presses an action's shortcut key combination.
 * @signature "hovered()"
 * @event
*/
	hovered():void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted immediately before executeAction() is called.
 * @signature "preExecute()"
 * @event
*/
	preExecute():void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when a toggle action changes state. checked is the new action state, true for on, false for off.
 * @signature "toggled(bool)"
 * @event
*/
	toggled(checked:Boolean):void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when an action is activated by the user; for example, when the user clicks a menu option, toolbar button, or presses an action's shortcut key combination, or when trigger() was called. Notably, it is not emitted when setChecked() or toggle() is called. checked is true if the action is checked, or false if the action is unchecked.
 * @signature "triggered(bool)"
 * @event
*/
	triggered(checked:Boolean):void {
	
	}

}
/**
 * @classdesc See Also:


 DzActionMgr.getMenu(), DzPane.getOptionsMenu(), DzViewTool.getOptionsMenu(), DzPersistentMenu.getActionMenu()
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/actionmenu_dz}*/
class DzActionMenu extends QObject {
	/**
 * @description The type of the menu (Read Only until 4.6.0.74)
	*/
	menuType:Number;
	/**
 * @description ENUMERATOR: A menu where each DzActionMenuItem is explicitly defined
*/
	
	static CustomMenu;
	/**
 * @description ENUMERATOR: A menu where each DzActionMenuItem is implicitly defined; built dynamically from paneaction_dz subclasses
*/
	
	static PaneMenu;
	/**
 * @description ENUMERATOR: A menu where each DzActionMenuItem is implicitly defined; built dynamically from viewtoolaction_dz subclasses
*/
	
	static ViewToolMenu;
	/**
 * @description ENUMERATOR: A menu where each DzActionMenuItem is implicitly defined; built dynamically from assetiofilteraction_dz and savefilteraction_dz subclasses
*/
	
	static SaveAsMenu;
	/**
 * @description ENUMERATOR: A menu where each DzActionMenuItem is implicitly defined; built dynamically from the return value of DzContentMgr.getRecentFileList() Since: 4.6.0.44
*/
	
	static OpenRecentMenu;
	/**
 * @description Removes all items from the menu.
*/
	clear():void {
	
	}
	/**
 * @description Displays the menu to the user
*/
	exec():void {
	
	}
	/**
 * @description Displays the menu to the user at the given position.
*/
	exec(pos:Point):Point {
	
	}
	/**
 * @description Parameter(s):
*/
	findSubMenu(label:String):String {
	
	}
	/**
 * @description Parameter(s):
*/
	getItem(which:Number):DzActionMenuItem {
	
	}
	/**
 * @description Return Value:
*/
	getItemList():Array {
	
	}
	/**
 * @description Return Value:
*/
	getNumItems():Number {
	
	}
	/**
 * @description Parameter(s):
*/
	getSubMenu(label:String):String {
	
	}
	/**
 * @description Return Value:
*/
	hasItems():Boolean {
	
	}
	/**
 * @description Inserts the given action into the menu at the given location.
*/
	insertAction(className:String, at:Number):String {
	
	}
	/**
 * @description Inserts the given custom action into the menu at the given location.
*/
	insertCustomAction(guid:String, at:Number):String {
	
	}
	/**
 * @description Inserts the given file merge action into the menu at the given location.
*/
	insertFileMergeAction(fileName:String, label:String, at:Number):String {
	
	}
	/**
 * @description Inserts the given file open action into the menu at the given location.
*/
	insertFileOpenAction(fileName:String, label:String, at:Number):String {
	
	}
	/**
 * @description Inserts the given item into the menu at the given location.
*/
	insertItem(item:DzActionMenuItem, at:Number):DzActionMenuItem {
	
	}
	/**
 * @description Inserts the given menu into the menu at the given location as a submenu.
*/
	insertMenu(label:String, menu:DzActionMenu, at:Number):String {
	
	}
	/**
 * @description Inserts a separator into the menu at the given location.
*/
	insertSeparator(where:Number):Number {
	
	}
	/**
 * @description Remove the given item from the menu.
*/
	removeItem(item:DzActionMenuItem):DzActionMenuItem {
	
	}
	/**
 * @description Removes any duplicate separators from the menu by replacing two or more adjacent separators with a single separator.
*/
	simplifySeparators():void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when items are added to or removed from this menu
 * @signature "itemListChanged()"
 * @event
*/
	itemListChanged():void {
	
	}

}
/**
 * @classdesc Action Menu Items are registered with a DzActionMenu and are available to access via methods on that class.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/actionmenuitem_dz}*/
class DzActionMenuItem extends QObject {
	/**
 * @description The action to perform for an item of the Action, CustomAction, FileOpenAction or FileMergeAction type
	*/
	action:String;
	/**
 * @description Whether the menu item is considered to be in a default location.
	*/
	isDefault:Boolean;
	/**
 * @description The label to display within the interface for an item of the SubMenu, FileOpenAction or FileMergeAction type.
	*/
	label:String;
	/**
 * @description Deprecated
	*/
	subMenuLabel:String;
	/**
 * @description The type of the menu item (Read Only)
	*/
	type:Type;
	/**
 * @description ENUMERATOR: A menu separator (i.e. horizontal divider)
*/
	
	static Separator;
	/**
 * @description ENUMERATOR: A menu entry that activates a DzAction object
*/
	
	static Action;
	/**
 * @description ENUMERATOR: A menu entry that activates a custom action.  See Also: DzActionMgr - for more about custom actions.
*/
	
	static CustomAction;
	/**
 * @description ENUMERATOR: A menu entry that opens a submenu
*/
	
	static SubMenu;
	/**
 * @description ENUMERATOR: A menu entry that opens a file, replacing the contents of the current scene  See Also: DzContentMgr.openFile() - for more about opening a file.
*/
	
	static FileOpenAction;
	/**
 * @description ENUMERATOR: A menu entry that merges a file with the current scene  See Also: DzContentMgr.openFile() - for more about merging a file.
*/
	
	static FileMergeAction;
	/**
 * @description Return Value:
*/
	getSubMenu():DzActionMenu {
	
	}
	/**
 * @description Causes the file for a FileOpenAction or FileMergeAction item to load
*/
	loadFile():void {
	
	}
	/**
 * @description Sets the menu that is displayed as the submenu when this menu item is activated. This call has no effect unless the type of this item is SubMenu.
*/
	setSubMenu(menu:DzActionMenu):DzActionMenu {
	
	}

}
/**
 * @classdesc This class manages actions that the user can perform in the interface by pressing the key combination specified by its shortcut or by clicking on a menu/toolbar item. There is only one instance of this manager in an application. This instance is created and owned by DzMainWindow. Don't create an instance of this class, rather request a pointer to it from DzMainWindow via DzMainWindow.getActionMgr().



See Also:


 DzAction
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/actionmgr_dz}*/
class DzActionMgr extends QWidget {
	/**
 * @description Uses the regular expression "([A-z]+[A-z0-9]*)" to strip characters/symbols/etc from a string in order to 'legalize' it.
 * @constructor
*/
	constructor(name:String) {
	
	}
	/**
 * @description Adds a custom action to the action manager.
*/
	addCustomAction(text:String, desc:String, script:String, isFile:Boolean, shortcut:String, iconFile:String):String {
	
	}
	/**
 * @description Clears the active menu.
*/
	clearActiveMenu():void {
	
	}
	/**
 * @description Parameter(s):
*/
	findAction(className:String):DzAction {
	
	}
	/**
 * @description Parameter(s):
*/
	findCustomAction(guid:String):Number {
	
	}
	/**
 * @description Parameter(s):
*/
	findPaneAction(className:String):DzAction {
	
	}
	/**
 * @description Parameter(s):
*/
	findPersistentMenu(className:String):DzPersistentMenu {
	
	}
	/**
 * @description Parameter(s):
*/
	findViewToolAction(className:String):DzAction {
	
	}
	/**
 * @description Parameter(s):
*/
	getAction(which:Number):DzAction {
	
	}
	/**
 * @description Return Value:
*/
	getActiveMenu():DzActionMenu {
	
	}
	/**
 * @description Parameter(s):
*/
	getCustomAction(guid:String):Number {
	
	}
	/**
 * @description Parameter(s):
*/
	getCustomActionDesc(which:Number):String {
	
	}
	/**
 * @description Parameter(s):
*/
	getCustomActionFile(which:Number):String {
	
	}
	/**
 * @description Parameter(s):
*/
	getCustomActionIcon(which:Number):String {
	
	}
	/**
 * @description Parameter(s):
*/
	getCustomActionName(which:Number):String {
	
	}
	/**
 * @description Parameter(s):
*/
	getCustomActionScript(which:Number):String {
	
	}
	/**
 * @description Parameter(s):
*/
	getCustomActionShortcut(which:Number):String {
	
	}
	/**
 * @description Parameter(s):
*/
	getCustomActionText(which:Number):String {
	
	}
	/**
 * @description Return Value:
*/
	getMenu():DzActionMenu {
	
	}
	/**
 * @description Return Value:
*/
	getNumActions():Number {
	
	}
	/**
 * @description Return Value:
*/
	getNumCustomActions():Number {
	
	}
	/**
 * @description Return Value:
*/
	getNumPersistentMenus():Number {
	
	}
	/**
 * @description Parameter(s):
*/
	getPersistentMenu(which:Number):DzPersistentMenu {
	
	}
	/**
 * @description Builds the main menu, pane menus and tool bars from the given file.
*/
	loadInterfaceFile(filename:String, overrideDefaults:Boolean):Boolean {
	
	}
	/**
 * @description Deprecated
*/
	loadInterfaceFile(filename:String):Boolean {
	
	}
	/**
 * @description Removes all custom actions from the application.
*/
	removeAllCustomActions():void {
	
	}
	/**
 * @description Removes the custom action at the given index.
*/
	removeCustomAction(which:Number):Number {
	
	}
	/**
 * @description Saves the actions to the given file.
*/
	saveActionsFile(filename:String):Boolean {
	
	}
	/**
 * @description Saves the actions to the given file.
*/
	saveCustomActionsFile(filename:String):Boolean {
	
	}
	/**
 * @description Saves the actions, menus and toolbars to their respective files in the default location.
*/
	saveInterfaceFiles():Boolean {
	
	}
	/**
 * @description Saves the main menu, pane menus to the given file.
*/
	saveMenusFile(filename:String):Boolean {
	
	}
	/**
 * @description Saves the tool bars to the given file.
*/
	saveToolBarsFile(filename:String):Boolean {
	
	}
	/**
 * @description Parameter(s):
*/
	setAccel(className:String, key:String):String {
	
	}
	/**
 * @description Sets the active menu, so that actions relying on the active menu can get it. This may be called before the menu exec() call to allow context for script actions.
*/
	setActiveMenu(menu:DzActionMenu):DzActionMenu {
	
	}
	/**
 * @description Deprecated
*/
	setCustomActionAccel(which:Number, shortcut:String):Number {
	
	}
	/**
 * @description Sets the description for the custom action at the given index.
*/
	setCustomActionDesc(which:Number, desc:String):Number {
	
	}
	/**
 * @description Sets the icon for the custom action at the given index.
*/
	setCustomActionIcon(which:Number, iconFile:String):Number {
	
	}
	/**
 * @description Sets the script for the custom action at the given index.
*/
	setCustomActionScript(which:Number, script:String, isFile:Boolean):Number {
	
	}
	/**
 * @description Sets the keyboard shortcut for the custom action at the given index.
*/
	setCustomActionShortcut(which:Number, shortcut:String):Number {
	
	}
	/**
 * @description Sets whether or not the text of the action is displayed with the icon for the custom action at the given index.
*/
	setCustomActionShowTextWithIcon(which:Number, onOff:Boolean):Number {
	
	}
	/**
 * @description Sets the text for the custom action at the given index.
*/
	setCustomActionText(which:Number, text:String):Number {
	
	}
	/**
 * @description Parameter(s):
*/
	unsetAccel(key:String):String {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when a custom action is added to the action manager.
 * @signature "customActionAdded(const QString&)"
 * @event
*/
	customActionAdded(name:String):void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when custom actions are added to or removed from the action manager.
 * @signature "customActionListChanged()"
 * @event
*/
	customActionListChanged():void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when a custom action is removed from the action manager.
 * @signature "customActionRemoved(const QString&)"
 * @event
*/
	customActionRemoved(name:String):void {
	
	}

}
/**
 * @classdesc Defines the layout of Toolbars, Pane Groups, Panes, Viewports and the active View Tool within an Activity of the interface.



See Also:


 DzPaneMgr, DzPaneGroup, DzPane, DzToolBar, DzDockBar, DzActionMgr and DzViewportMgr
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/activitylayout_dz}*/
class DzActivityLayout extends QObject, DzRefCountedItem {
	/**
 * @description The description of the activity
	*/
	description:String;
	/**
 * @description The label of the activity
	*/
	label:String;
	/**
 * @description Default Constructor. Creates a new activity layout with the given name and description.
 * @constructor
*/
	constructor(label:String, desc:String) {
	
	}
	/**
 * @description Clears the memorized state of the activity.
*/
	clearMemorizedState():void {
	
	}
	/**
 * @description Return Value:
*/
	isToolBarEnabled(toolbar:String):Boolean {
	
	}
	/**
 * @description Sets whether or not the toolbar with the given name is enabled.
*/
	setToolbarEnabled(toolbar:String, onOff:Boolean):String {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when the layout's label has changed.
 * @signature "labelChanged(const QString&)"
 * @event
*/
	labelChanged(label:String):void {
	
	}

}
/**
 * @classdesc TODO:
Add detailed description.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/addblend_dz}*/
class DzAddBlend extends DzImageBlend {
	/**
 * @description Default Constructor.
 * @constructor
*/
	constructor() {
	
	}

}
/**
 * @classdesc See Also:


 DzExportMgr.findExporterByClassName()

 DzExportMgr.findExporter()




Attention:


 This class is provided by the Alembic Exporter for DAZ Studio plugin.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/alembicexporter_dz}*/
class DzAlembicExporter extends DzExporter {
	/**
 * @description Default Constructor.
 * @constructor
*/
	constructor() {
	
	}

}
/**
 * @classdesc TODO:
Add detailed description.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/alphablend_dz}*/
class DzAlphaBlend extends DzImageBlend {
	/**
 * @description Default Constructor
 * @constructor
*/
	constructor() {
	
	}

}
/**
 * @classdesc Derived from QApplication, this class embodies the main event loop, and owns application-wide settings and objects not directly related to the user interface.



Can be directly accessed using the global variable App.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/app_dz}*/
class DzApp extends QObject {
	/**
 * @description Holds the name of the application; i.e., "DAZ Studio". (Read Only)
	*/
	appName:String;
	/**
 * @description Holds the name of the cloud service; i.e., "Daz Connect". (Read Only)
	*/
	cloudName:String;
	/**
 * @description Holds the exit code returned by the application. (Read Only)
	*/
	exitCode:Number;
	/**
 * @description Holds the size, in bytes, of the log file.
	*/
	logSize:Number;
	/**
 * @description Holds a string representation of the full product version number; i.e., major.minor.revision.build. (Read Only)
	*/
	longVersionString:String;
	/**
 * @description Holds the name of the organization; i.e., "DAZ 3D". (Read Only)
	*/
	orgName:String;
	/**
 * @description Holds the arguments passed to the application on launch. (Read Only)
	*/
	scriptArgs:Array;
	/**
 * @description Holds the full product version number as an encoded 32-bit integer. (Read Only)
Deprecated
	*/
	version:Number;
	/**
 * @description Holds the full product version number as an encoded 64-bit integer. (Read Only)
	*/
	version64:Number;
	/**
 * @description Holds a string representation of the product version number; i.e., major.minor. (Read Only)
	*/
	versionString:String;
	/**
 * @description ENUMERATOR: No interface or graphical subsystem is initialized.
*/
	
	static NoInterface;
	/**
 * @description ENUMERATOR: The OpenGL subsystem is initialized without a user interface.
*/
	
	static NoInterfaceWithOpenGL;
	/**
 * @description ENUMERATOR: The user interface and all graphical subsystems are initialized.
*/
	
	static FullInterface;
	/**
 * @description ENUMERATOR: An unknown operating system.
*/
	
	static Unknown;
	/**
 * @description ENUMERATOR: An unknown version of Windows.
*/
	
	static WindowsUnknown;
	/**
 * @description ENUMERATOR: The Windows 95 operating system.
*/
	
	static Windows95;
	/**
 * @description ENUMERATOR: The Windows 98 operating system.
*/
	
	static Windows98;
	/**
 * @description ENUMERATOR: The Windows Me operating system.
*/
	
	static WindowsMe;
	/**
 * @description ENUMERATOR: The Windows 2000 operating system.
*/
	
	static Windows2000;
	/**
 * @description ENUMERATOR: The Windows XP operating system.
*/
	
	static WindowsXP;
	/**
 * @description ENUMERATOR: The Windows 2003 operating system.
*/
	
	static Windows2003;
	/**
 * @description ENUMERATOR: The Windows Vista operating system.
*/
	
	static WindowsVista;
	/**
 * @description ENUMERATOR: The Windows 7 operating system.
*/
	
	static Windows7;
	/**
 * @description ENUMERATOR: The Windows 8 operating system.
*/
	
	static Windows8;
	/**
 * @description ENUMERATOR: The Windows 8.1 operating system.
*/
	
	static Windows8_1;
	/**
 * @description ENUMERATOR: The Windows 10 operating system.
*/
	
	static Windows10;
	/**
 * @description ENUMERATOR: An unknown version of the Macintosh operating system.
*/
	
	static MacUnknown;
	/**
 * @description ENUMERATOR: The OS X 10.0 (Cheetah) operating system.
*/
	
	static Mac10_0;
	/**
 * @description ENUMERATOR: The OS X 10.1 (Puma) operating system.
*/
	
	static Mac10_1;
	/**
 * @description ENUMERATOR: The OS X 10.2 (Jaguar) operating system.
*/
	
	static Mac10_2;
	/**
 * @description ENUMERATOR: The OS X 10.3 (Panther) operating system.
*/
	
	static Mac10_3;
	/**
 * @description ENUMERATOR: The OS X 10.4 (Tiger) operating system.
*/
	
	static Mac10_4;
	/**
 * @description ENUMERATOR: The OS X 10.5 (Leopard) operating system.
*/
	
	static Mac10_5;
	/**
 * @description ENUMERATOR: The OS X 10.6 (Snow Leopard) operating system.
*/
	
	static Mac10_6;
	/**
 * @description ENUMERATOR: The OS X 10.7 (Lion) operating system.
*/
	
	static Mac10_7;
	/**
 * @description ENUMERATOR: The OS X 10.8 (Mountain Lion) operating system.
*/
	
	static Mac10_8;
	/**
 * @description ENUMERATOR: The OS X 10.9 (Mavericks) operating system.
*/
	
	static Mac10_9;
	/**
 * @description ENUMERATOR: The OS X 10.10 (Yosemite) operating system.
*/
	
	static Mac10_10;
	/**
 * @description ENUMERATOR: The OSX 10.11 (El Capitan) operating system.
*/
	
	static Mac10_11;
	/**
 * @description ENUMERATOR: The OSX 10.12 (Sierra) operating system.
*/
	
	static Mac10_12;
	/**
 * @description ENUMERATOR: Supported Microsoft Windows Operating Systems.
*/
	
	static Windows;
	/**
 * @description ENUMERATOR: Supported Apple Macintosh OS X Operating Systems.
*/
	
	static MacOSX;
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static GeneralRelease;
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static PublicBuild;
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static PublishingBuild;
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static PrivateBuild;
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static DevBuild;
	/**
 * @description ENUMERATOR: The free edition of the application.
*/
	
	static Free;
	/**
 * @description ENUMERATOR: The standard edition of the application.
*/
	
	static Standard;
	/**
 * @description ENUMERATOR: The advanced edition of the application.
*/
	
	static Advanced;
	/**
 * @description ENUMERATOR: The pro edition of the application.
*/
	
	static Pro;
	/**
 * @description ENUMERATOR: The alpha edition of the application.
*/
	
	static Alpha;
	/**
 * @description ENUMERATOR: The beta edition of the application.
*/
	
	static Beta;
	/**
 * @description TODO:
Add description.
*/
	addSessionFileLoad(name:String):String {
	
	}
	/**
 * @description Return Value:
*/
	bitArchitecture():Number {
	
	}
	/**
 * @description Return Value:
*/
	bitArchitectureString():String {
	
	}
	/**
 * @description Parameter(s):
*/
	byteSizeToString(bytes:Number):String {
	
	}
	/**
 * @description Parameter(s):
*/
	canShowSceneBuilder(definition:Object):Boolean {
	
	}
	/**
 * @description Forces a deletion of all objects currently waiting to be deleted to free up more memory. If you are using this to clear memory you will generally want to clear the Undo Stack first.
*/
	clearDelayedDeleteStack(doProgress:Boolean):Boolean {
	
	}
	/**
 * @description Return Value:
*/
	createDigest(tokens:Array):String {
	
	}
	/**
 * @description Return Value:
*/
	createDigest(data:ByteArray):String {
	
	}
	/**
 * @description Return Value:
*/
	createUuid():String {
	
	}
	/**
 * @description Write a debug message to the application log file.
*/
	debug(msg:String):String {
	
	}
	/**
 * @description Posts an event that causes the application to exit.
*/
	delayedExit(exitCode:Number):Number {
	
	}
	/**
 * @description Parameter(s):
*/
	enableMultiThreading(onOff:Boolean):Boolean {
	
	}
	/**
 * @description Writes any currently buffered log messages to the log file. This is automatically called whenever the log buffer has more than 512 characters of data, but can be called at any time to force all messages to be written out.
*/
	flushLogBuffer():Boolean {
	
	}
	/**
 * @description Searches in default locations for a script file of the given name.
*/
	getAbsoluteScriptPath(scriptName:String):String {
	
	}
	/**
 * @description Return Value:
*/
	getAppDataPath():String {
	
	}
	/**
 * @description Return Value:
*/
	getApplicationBaseName():String {
	
	}
	/**
 * @description Deprecated
*/
	getAppSettingsMgr():void {
	
	}
	/**
 * @description Return Value:
*/
	getAssetIOMgr():DzAssetIOMgr {
	
	}
	/**
 * @description Return Value:
*/
	getAssetMgr():DzAssetMgr {
	
	}
	/**
 * @description Return Value:
*/
	getAuthenticationMgr():DzAuthenticationMgr {
	
	}
	/**
 * @description Return Value:
*/
	getCallBackMgr():DzCallBackMgr {
	
	}
	/**
 * @description Return Value:
*/
	getCommonUserDocumentPath():String {
	
	}
	/**
 * @description Return Value:
*/
	getContentMgr():DzContentMgr {
	
	}
	/**
 * @description Return Value:
*/
	getCurrentAuthor():DzAuthor {
	
	}
	/**
 * @description Return Value:
*/
	getDataFolderName():String {
	
	}
	/**
 * @description Return Value:
*/
	getDataFolderPath():String {
	
	}
	/**
 * @description Return Value:
*/
	getDataFolderPathBase():String {
	
	}
	/**
 * @description Return Value:
*/
	getDAZDataPath():String {
	
	}
	/**
 * @description Return Value:
*/
	getDeviceMgr():DzDeviceMgr {
	
	}
	/**
 * @description Return Value:
*/
	getDialogParent():QWidget {
	
	}
	/**
 * @description Return Value:
*/
	getDocumentationPath():String {
	
	}
	/**
 * @description Return Value:
*/
	getDocumentsPath():String {
	
	}
	/**
 * @description Return Value:
*/
	getExportMgr():DzExportMgr {
	
	}
	/**
 * @description Return Value:
*/
	getFileIOPresetMgr():DzFileIOPresetMgr {
	
	}
	/**
 * @description Return Value:
*/
	getGeneratedScriptsPath():String {
	
	}
	/**
 * @description Return Value:
*/
	getGeneratedShadersPath():String {
	
	}
	/**
 * @description Return Value:
*/
	getGraphicsMode():GraphicsMode {
	
	}
	/**
 * @description Return Value:
*/
	getHelpMgr():DzHelpMgr {
	
	}
	/**
 * @description Return Value:
*/
	getHomePath():String {
	
	}
	/**
 * @description Return Value:
*/
	getImageMgr():DzImageMgr {
	
	}
	/**
 * @description Return Value:
*/
	getImportMgr():DzImportMgr {
	
	}
	/**
 * @description Return Value:
*/
	getInterface():DzMainWindow {
	
	}
	/**
 * @description Last directory that files were loaded or saved to/from.
*/
	getLoadSavePath():String {
	
	}
	/**
 * @description Return Value:
*/
	getMultiMediaMgr():DzMultiMediaMgr {
	
	}
	/**
 * @description Return Value:
*/
	getPluginMgr():DzPluginMgr {
	
	}
	/**
 * @description Return Value:
*/
	getPluginsPath():String {
	
	}
	/**
 * @description Return Value:
*/
	getProgramDataPath():String {
	
	}
	/**
 * @description Return Value:
*/
	getRenderMgr():DzRenderMgr {
	
	}
	/**
 * @description Return Value:
*/
	getResourcesPath():String {
	
	}
	/**
 * @description Return Value:
*/
	getSaveFilterMgr():DzSaveFilterMgr {
	
	}
	/**
 * @description Return Value:
*/
	getScriptsPath():String {
	
	}
	/**
 * @description Return Value:
*/
	getShadersPath():String {
	
	}
	/**
 * @description Get the application wide style.
*/
	getStyle():DzStyle {
	
	}
	/**
 * @description Return Value:
*/
	getStyleDefinition():String {
	
	}
	/**
 * @description Return Value:
*/
	getStyleDefinitionList():Array {
	
	}
	/**
 * @description Get a filename for temporary storage.
*/
	getTempFilename():String {
	
	}
	/**
 * @description Return Value:
*/
	getTempPath():String {
	
	}
	/**
 * @description Get a filename for temporary storage of rendered images.
*/
	getTempRenderFilename():String {
	
	}
	/**
 * @description Return Value:
*/
	getUtilitiesPath():String {
	
	}
	/**
 * @description Return Value:
*/
	isClosing():Boolean {
	
	}
	/**
 * @description Parameter(s):
*/
	isKeyDown(key:Number):Boolean {
	
	}
	/**
 * @description Parameter(s):
*/
	isKeySequenceDown(sequence:String):Boolean {
	
	}
	/**
 * @description Return Value:
*/
	isMultiThreadingEnabled():Boolean {
	
	}
	/**
 * @description Return Value:
*/
	isRegistered():Boolean {
	
	}
	/**
 * @description Return Value:
*/
	isRunning():Boolean {
	
	}
	/**
 * @description Return Value:
*/
	isSlave():Boolean {
	
	}
	/**
 * @description Return Value:
*/
	isStarting():Boolean {
	
	}
	/**
 * @description Write a message to the application log file.
*/
	log(buffer:String):String {
	
	}
	/**
 * @description Return Value:
*/
	modifierKeyState():Number {
	
	}
	/**
 * @description Return Value:
*/
	operatingSystem():OperatingSystem {
	
	}
	/**
 * @description Return Value:
*/
	operatingSystemString():String {
	
	}
	/**
 * @description The application is intended to be as platform independent as possible, but there are cases where something needs to be done differently on one platform or another. This function provides a simple way to check which platform the application is running under.
*/
	platform():Platform {
	
	}
	/**
 * @description Posts an event that causes execution of a script as it is encountered in the event stack.
*/
	postScriptEvent(evaluate:Boolean, script:String, args:Array):Boolean {
	
	}
	/**
 * @description Return Value:
*/
	releaseCycle():void {
	
	}
	/**
 * @description Return Value:
*/
	releaseCycleString():String {
	
	}
	/**
 * @description Return Value:
*/
	releaseEdition():ReleaseEdition {
	
	}
	/**
 * @description Return Value:
*/
	releaseEditionString():String {
	
	}
	/**
 * @description Restores the temporary files directory to the default location.
*/
	restoreDefaultTempPath():void {
	
	}
	/**
 * @description Set the default directory for loading or saving files.
*/
	setLoadSavePath(dir:String):String {
	
	}
	/**
 * @description Sets the current style for the application.
*/
	setStyleDefinition(name:String):Boolean {
	
	}
	/**
 * @description Sets the directory path where temporary files are stored. The path provided needs to be an absolute path. A directory will be created at the new location if it does not already exist.
*/
	setTempPath(tempPath:String):Boolean {
	
	}
	/**
 * @description A convenience method for opening a showing a file/directory in the OS file browser.
*/
	showInNativeBrowser(absFilePath:String):Boolean {
	
	}
	/**
 * @description Return Value:
*/
	showPrompts():Boolean {
	
	}
	/**
 * @description Displays the Scene Builder dialog.
*/
	showSceneBuilder(definition:Object, asEvent:Boolean):Array {
	
	}
	/**
 * @description A convenience method for browsing to a given URL.
*/
	showURL(url:String):String {
	
	}
	/**
 * @description Display a message in the current status interface.
*/
	statusLine(msg:String, writeToLog:Boolean):String {
	
	}
	/**
 * @description Return Value:
*/
	usingInterface():Boolean {
	
	}
	/**
 * @description Write a warning message to the application log file.
*/
	warning(msg:String):String {
	
	}
	/**
 * @description Saves out a user configuration script to the given filename. If no filename is given, the script is saved to the same file read from in startup(). The run() function calls this at the end of each execution.
*/
	writeConfigScript(configScriptFilename:String):Boolean {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted immediately after the main event loop exits.
 * @signature "closing()"
 * @event
*/
	closing():void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when a debug message is sent to the application.
 * @signature "debugMsg(const QString&)"
 * @event
*/
	debugMsg(msg:String):void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when the event loop is started on the application.
 * @signature "eventLoopStarted()"
 * @event
*/
	eventLoopStarted():void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when a MouseButtonDblClick or MouseButtonRelease event occurs on the application.
 * @signature "mouseEvent()"
 * @event
*/
	mouseEvent():void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when multi-threading has changed on the application.
 * @signature "multiThreadingChanged(bool)"
 * @event
*/
	multiThreadingChanged(onOff:Boolean):void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when the Scene Builder dialog has been rejected by the user, or when none of the files specified in the Scene Builder definition can be found.
 * @signature "sceneBuilderAccepted(const QStringList&)"
 * @event
*/
	sceneBuilderAccepted(selections:Array):void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when the Scene Builder dialog has been rejected by the user, or when none of the files specified in the Scene Builder definition can be found.
 * @signature "sceneBuilderRejected()"
 * @event
*/
	sceneBuilderRejected():void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted after the application has finished its startup just before the main event loop begins.
 * @signature "starting()"
 * @event
*/
	starting():void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when a the style is about to change on the application.
 * @signature "styleAboutToChange()"
 * @event
*/
	styleAboutToChange():void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when the application wide style has changed.
 * @signature "styleChanged(DzStyle*)"
 * @event
*/
	styleChanged(newStyle:DzStyle):void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when a warning message is sent to the application.
 * @signature "warningMsg(const QString&)"
 * @event
*/
	warningMsg(msg:String):void {
	
	}

}
/**
 * @classdesc Application Settings are used to store and retrieve settings that persist from one execution of the appliction to the next. On Windows, the settings are saved in the registry. On Mac, these settings are saved via Mac preference plist files.



You can create an instance of this class any time you need to read or write persistent settings. This class is a replacement for DzAppSettingsMgr as it is easier and safer to use. Since each instance is separate, the current path of one instance will not affect the rest of the application. It is also not necessary to call popPath() to put this class back into its previous state.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/appsettings_dz}*/
class DzAppSettings extends DzBase {
	/**
 * @description Default Constructor - creates a new settings object that starts out at the default application path.
 * @constructor
*/
	constructor() {
	
	}
	/**
 * @description Constructor - creates a new settings object that pushes the given path onto the default application path. This is the same as using the default constructor and then calling pushPath() with the given path.
 * @constructor
*/
	constructor(startPath:String) {
	
	}
	/**
 * @description Parameter(s):
*/
	containsValue(key:String):Boolean {
	
	}
	/**
 * @description Read a boolean value from the given key.
*/
	getBoolValue(key:String, def:Boolean):Boolean {
	
	}
	/**
 * @description Read a color value from the given key.
*/
	getColorValue(key:String, def:Color):Color {
	
	}
	/**
 * @description Read a float color value from the given key.
*/
	getFloatColorValue(key:String, def:DzFloatColor):DzFloatColor {
	
	}
	/**
 * @description Read a floating point value from the given key.
*/
	getFloatValue(key:String, def:Number):Number {
	
	}
	/**
 * @description Read a integer value from the given key.
*/
	getIntValue(key:String, def:Number):Number {
	
	}
	/**
 * @description Read a string value from the given key.
*/
	getStringValue(key:String, def:String):String {
	
	}
	/**
 * @description Pops a temporary key path off the top of the stack.
*/
	popPath():void {
	
	}
	/**
 * @description Sets the current key path temporarily to the given path; popPath() can be called to remove this path.
*/
	pushPath(path:String):String {
	
	}
	/**
 * @description Removes a setting by name.
*/
	removeValue(key:String):Boolean {
	
	}
	/**
 * @description Sets a key with a boolean value.
*/
	setBoolValue(key:String, setting:Boolean):Boolean {
	
	}
	/**
 * @description Sets a key with a color value.
*/
	setColorValue(key:String, setting:Color):Boolean {
	
	}
	/**
 * @description Sets a key with a float color value.
*/
	setFloatColorValue(key:String, setting:DzFloatColor):Boolean {
	
	}
	/**
 * @description Sets a key with a floating point value.
*/
	setFloatValue(key:String, setting:Number):Boolean {
	
	}
	/**
 * @description Sets a key with a integer value.
*/
	setIntValue(key:String, setting:Number):Boolean {
	
	}
	/**
 * @description Sets a key with a string value.
*/
	setStringValue(key:String, setting:String):Boolean {
	
	}

}
/**
 * @classdesc TODO:
Add detailed description.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/arrayhelper_dz}*/
class DzArrayHelper extends QObject {
	/**
 * @description Default Constructor
 * @constructor
*/
	constructor() {
	
	}
	/**
 * @description Parameter(s):
*/
	addToArray(list:Array, value:Object):Array {
	
	}
	/**
 * @description Parameter(s):
*/
	isInArray(list:Array, value:Object):Number {
	
	}
	/**
 * @description Parameter(s):
*/
	isInArrayByName(list:Array, obj:Object):Number {
	
	}

}
/**
 * @classdesc An "Asset" serves as an abstraction between the presentation of a content file and the actual file that resides on disk; it is a "container" for information about a content file.



At a minimum, an asset contains a reference to the relative path and filename of a file.



Metadata



When the Content Management System (CMS) is active, an asset provides an interface to its metadata within the content database. This metadata includes information such as what type of asset it is, what it is used for, what it is compatible with, which category(ies) it is presented to the user in, etc.



Conceptually, each asset belongs to exactly one "Product". By default, and until/unless modified, all newly created assets are assigned to the "LOCAL USER" product. An asset is uniquely identified within a product by the combination of its relative path and filename. While any number of products can reference a file with the same relative path and filename combination, each product's concept of that combination is unique (even if their metadata is identical).



The metadata for a given asset is divided into 2 distinct types; that which is owned and/or maintained by the vendor (the originating source), and that which is owned and/or maintained by the end-user. Unless the metadata component (e.g., userKeywords, userNotes, etc), the product (e.g., "LOCAL USER"), or the store (e.g., "LOCAL USER") indicate "user" in their name, any assumption (if there is to be one) about which type the data is should be that which is owned and/or maintained by the vendor.



The metadata for an asset that is "installed" and which belongs to a product associated with a "Store" (source) other than the "LOCAL USER" store is owned by the vendor. Conversely, the metadata for an asset that is created by the user and/or belongs to a product associated with the "LOCAL USER" store is owned by the user. The exceptions to this are those attributes which integrate "user" into their name; which in fact always belong to the user.



The significance of the distinction between the 2 types of metadata comes down to how the data is handled during an update and whether or not an effort is made to preserve it. Metadata that is owned and/or maintained by the vendor can be summarily purged during an update. This provides a vendor with the means to clean up all potential prior versions of the metadata witout being faced with complex bookkeeping tasks.



See Also:


 DzAssetMgr

 DzProductAssetContainer

 DzContentMgr
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/asset_dz}*/
class DzAsset extends QObject, DzRefCountedItem {
	/**
 * @description Holds the asset identifier for this asset. (Read Only)
	*/
	assetID:Object;
	/**
 * @description Holds the name for this asset. (Read Only)
	*/
	assetName:String;
	/**
 * @description Holds the vendor intended audience for this asset.
	*/
	audience:Number;
	/**
 * @description Holds a list of all categories that this asset is in. (Read Only)
	*/
	categories:Array;
	/**
 * @description Holds whether the companion file (if any) is a DAZ Script. (Read Only)
	*/
	companionIsScript:Boolean;
	/**
 * @description Holds the full path to the folder the companion file is in. (Read Only)
	*/
	companionPath:String;
	/**
 * @description Holds a list of all compatibility bases that this asset is compatible with. (Read Only)
	*/
	compatibilities:Array;
	/**
 * @description Holds the [vendor] compatibility base for this asset.
	*/
	compatibilityBase:String;
	/**
 * @description Holds the [vendor] content type for this asset.
	*/
	contentType:String;
	/**
 * @description Holds the date this asset was created. (Read Only)
	*/
	dateCreated:Date;
	/**
 * @description Holds the date this asset was last modified. (Read Only)
	*/
	dateLastModified:Date;
	/**
 * @description Holds the vendor description for this asset.
	*/
	description:String;
	/**
 * @description Holds the name displayed to the user for this asset. (Read Only)
	*/
	displayName:String;
	/**
 * @description Holds the group identifier for the asset. 0 = default, < 0 = app defined, > 0 = user defined.
	*/
	groupId:Number;
	/**
 * @description Holds whether this asset has metadata provided by the cloud. (Read Only)
	*/
	hasCloudMetadata:Boolean;
	/**
 * @description Holds whether this asset is a non-native file and a DAZ Script or native file with the same basename exists in the same directory. (Read Only)
	*/
	hasCompanion:Boolean;
	/**
 * @description Holds whether this asset is a non-native file and a DAZ Script with the same basename exists in the same directory. (Read Only)
	*/
	hasCompanionScript:Boolean;
	/**
 * @description Holds whether this asset should be hidden in asset views.
	*/
	hidden:Boolean;
	/**
 * @description Holds the icon path for this asset. (Read Only)
	*/
	icon:Pixmap;
	/**
 * @description Holds whether this asset can be installed from the cloud. (Read Only)
	*/
	isCloudInstallable:Boolean;
	/**
 * @description Holds whether this asset is installed from the cloud. (Read Only)
	*/
	isCloudInstalled:Boolean;
	/**
 * @description Holds whether this asset is managed by the cloud. (Read Only)
	*/
	isCloudOwned:Boolean;
	/**
 * @description Holds whether this asset is installed in the database. (Read Only)
	*/
	isInstalled:Boolean;
	/**
 * @description Holds whether the metadata for this asset is valid. (Read Only)
	*/
	isMetadataValid:Boolean;
	/**
 * @description Holds whether this asset is a native DAZ Studio file. (Read Only)
	*/
	isNative:Boolean;
	/**
 * @description Holds whether this asset is a native DAZ Studio script file. (Read Only)
	*/
	isScript:Boolean;
	/**
 * @description Holds whether this asset is a symbolic link. (Read Only)
	*/
	isSymLink:Boolean;
	/**
 * @description Holds whether this asset is owned by a vendor or by the user. (Read Only)
	*/
	isVendor:Boolean;
	/**
 * @description Holds whether this asset needs to be installed from the cloud. (Read Only)
	*/
	needsCloudInstall:Boolean;
	/**
 * @description Holds whether this asset needs to be updated from the cloud. (Read Only)
	*/
	needsCloudUpdate:Boolean;
	/**
 * @description Holds the original filename for this asset. (Read Only)
	*/
	orginalFilename:String;
	/**
 * @description Holds the original path for this asset. (Read Only)
	*/
	orginalPath:String;
	/**
 * @description Holds the Globally Unique Identifier (GUID) for the product this asset belongs to. (Read Only)
	*/
	productGUID:String;
	/**
 * @description Holds the product identifier for the product that this asset belongs to. (Read Only)
	*/
	productID:String;
	/**
 * @description Holds the name of the product this asset belongs to. (Read Only)
	*/
	productName:String;
	/**
 * @description Holds the base of the product path in the cloud folder for cloud assets. (Read Only)
	*/
	productPath:String;
	/**
 * @description Holds the icon path for this asset. (Read Only)
	*/
	smallIcon:Pixmap;
	/**
 * @description Holds the store identifier for the product that this asset belongs to. (Read Only)
	*/
	storeID:String;
	/**
 * @description Holds the path that the symbolic link is referencing (if any).
	*/
	symLinkPath:String;
	/**
 * @description Holds the URL for this asset. (Read Only)
	*/
	url:String;
	/**
 * @description Holds the encoded URL for this asset. (Read Only)
	*/
	urlEncoded:String;
	/**
 * @description Holds a list of user owned categories that this asset is in. (Read Only)
	*/
	userCategories:Array;
	/**
 * @description Holds a list of user owned compatibility bases that this asset is compatible with. (Read Only)
	*/
	userCompatibilities:Array;
	/**
 * @description Holds the user keywords for this asset.
	*/
	userKeywords:Array;
	/**
 * @description Holds a list of vendor owned categories that this asset is in. (Read Only)
	*/
	vendorCategories:Array;
	/**
 * @description Holds a list of vendor owned compatibility bases that this asset is compatible with. (Read Only)
	*/
	vendorCompatibilities:Array;
	/**
 * @description Holds the vendor keywords for this asset.
	*/
	vendorKeywords:Array;
	/**
 * @description Sets the compatibility bases that this asset is compatible with.
*/
	addCompatibilities(bases:Array, create:Boolean):Array {
	
	}
	/**
 * @description Sets the categories for this asset.
*/
	addToCategories(categories:Array, create:Boolean):Array {
	
	}
	/**
 * @description Sets the asset as belonging to the default group identifier; 0.
*/
	clearGroup():void {
	
	}
	/**
 * @description Forces the icon to reload.
*/
	forceImageReload():void {
	
	}
	/**
 * @description Return Value:
*/
	getAsLocalFile():String {
	
	}
	/**
 * @description Return Value:
*/
	getBaseExtension():String {
	
	}
	/**
 * @description Return Value:
*/
	getDSLinkExtension():String {
	
	}
	/**
 * @description Return Value:
*/
	getDSLinkText():String {
	
	}
	/**
 * @description Return Value:
*/
	getOwner():DzAbstractAssetContainer {
	
	}
	/**
 * @description Return Value:
*/
	getProduct():DzProductAssetContainer {
	
	}
	/**
 * @description Return Value:
*/
	getRelativeFilePath():String {
	
	}
	/**
 * @description Return Value:
*/
	isGroup(id:Number):Boolean {
	
	}
	/**
 * @description Loads the default icon for the asset.
*/
	loadDefaultIcon(delayLoad:Boolean):Boolean {
	
	}
	/**
 * @description Parameter(s):
*/
	readLinkData(linkPath:String):Object {
	
	}
	/**
 * @description Removes the compatibility bases that this asset is compatible with.
*/
	removeCompatibilities(bases:Array, isVender:Boolean):Array {
	
	}
	/**
 * @description Removes the asset from the categories.
*/
	removeFromCategories(categories:Array, isVender:Boolean):Array {
	
	}
	/**
 * @description Changes the name of this asset.
*/
	rename(name:String):Boolean {
	
	}
	/**
 * @description Parameter(s):
*/
	saveDSLink(linkSavePath:String):Boolean {
	
	}
	/**
 * @description Sets whether existence of the asset should be ignored.
*/
	setIgnoreExists(onOff:Boolean):Boolean {
	
	}
	/**
 * @description Return Value:
*/
	toUri():DzUri {
	
	}
	/**
 * @description Parameter(s):
*/
	updateFromMetadata(guid:String):Boolean {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when the image for the asset has changed.
 * @signature "assetImageChanged(DzAsset*)"
 * @event
*/
	assetImageChanged(asset:DzAsset):void {
	
	}

}
/**
 * @classdesc An asset save filter for saving a file in the DSON format.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/assetfileoutfilter_dz}*/
class DzAssetFileOutFilter extends DzAssetIOFilter {

}
/**
 * @classdesc Save filter classes save out a subset of scene settings in a DSON format such as poses, light sets, camera sets, etc.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/assetiofilter_dz}*/
class DzAssetIOFilter extends DzFileIO {
	/**
 * @description Saves to a file.
*/
	doSave(filename:String, startingDir:String):DzError {
	
	}
	/**
 * @description Saves to a file.
*/
	doSave(options:DzFileIOSettings, filename:String, startingDir:String):DzError {
	
	}
	/**
 * @description Return Value:
*/
	getAssetDefinitionUri(base:DzBase):DzUri {
	
	}
	/**
 * @description Return Value:
*/
	getAssetInstanceUri(base:DzBase):DzUri {
	
	}
	/**
 * @description Return Value:
*/
	getCompatiblityBase():String {
	
	}
	/**
 * @description Return Value:
*/
	getContentType():String {
	
	}
	/**
 * @description Return Value:
*/
	getDescription():String {
	
	}
	/**
 * @description Return Value:
*/
	getDoSavePath():String {
	
	}
	/**
 * @description Return Value:
*/
	getLoadSavePath():String {
	
	}
	/**
 * @description Return Value:
*/
	getStandardSaveRelativePath():String {
	
	}
	/**
 * @description Return Value:
*/
	isSupportAssetFilter():Boolean {
	
	}
	/**
 * @description Sets the path to use for loading/saving files with this filter.
*/
	setLoadSavePath(path:String):String {
	
	}

}
/**
 * @classdesc There is only one instance of this manager in an application. This instance is created and owned by DzApp. Don't create an instance of this class, but rather request a pointer to it from DzApp via DzApp.getAssetIOMgr().



See Also:


 Sample: Save Filter Settings
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/assetiomgr_dz}*/
class DzAssetIOMgr extends QObject {
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static DefaultMethod;
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static OpenNew;
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static MergeFile;
	/**
 * @description Parameter(s):
*/
	static findFilter(className:String):Number {
	
	}
	/**
 * @description Return Value:
*/
	static findObjectInstance(uri:DzUri):QObject {
	
	}
	/**
 * @description Parameter(s):
*/
	static getFilter(i:Number):DzAssetIOFilter {
	
	}
	/**
 * @description Parameter(s):
*/
	static getFilterName(i:Number):String {
	
	}
	/**
 * @description Return Value:
*/
	getNumFilters():Number {
	
	}
	/**
 * @description Loads an asset file.
*/
	doLoad(filePath:String, open:DzOpenMethod, filter:DzFileLoadFilter):DzError {
	
	}
	/**
 * @description Save the scene contents to a file with the given save filter. Prompts the user for a file to save to.
*/
	doSave(filterIndex:Number):DzError {
	
	}
	/**
 * @description Save the scene contents to a file with the given save filter. Prompts the user for a file to save to.
*/
	doSaveWithOptions(filter:DzAssetIOFilter, options:DzFileIOSettings, saveOnly:Boolean, filePath:String, startingDir:String, category:String):DzError {
	
	}
	/**
 * @description Save the scene contents to a file. Prompts the user for a file to save to.
*/
	doSceneSaveAs():DzError {
	
	}
	/**
 * @description Return Value:
*/
	getDefaultDSONAssetCachePath():String {
	
	}
	/**
 * @description Return Value:
*/
	getDSONAssetCachePath():String {
	
	}
	/**
 * @description Return Value:
*/
	getLoadPath():String {
	
	}
	/**
 * @description Return Value:
*/
	getSavePath():String {
	
	}
	/**
 * @description Loads an asset from URI.
*/
	loadFromUri(fileUri:DzUri, open:DzOpenMethod, filter:DzFileLoadFilter):DzError {
	
	}
	/**
 * @description Parameter(s):
*/
	setDSONAssetCachePath(cacheFullPath:String):String {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description TODO: Add Description
 * @signature TODO: Add Description
 * @event
*/
	assetImported():void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description TODO: Add Description
 * @signature TODO: Add Description
 * @event
*/
	assetImportStarting():void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description TODO: Add Description
 * @signature TODO: Add Description
 * @event
*/
	assetSaved():void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description TODO: Add Description
 * @signature TODO: Add Description
 * @event
*/
	missingNodeParent(node:DzNode, uri:DzUri):void {
	
	}

}
/**
 * @classdesc The manager that is responsible for all content assets.



There is only one instance of this manager in an application. This instance is created and owned by DzApp. Do not create an instance of this class, rather request the instance from DzApp via DzApp.getAssetMgr().
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/assetmgr_dz}*/
class DzAssetMgr extends DzBase {
	/**
 * @description ENUMERATOR: No options
*/
	
	static None;
	/**
 * @description ENUMERATOR: A whole word search. Only works with file system based searches.
*/
	
	static WholeWord;
	/**
 * @description ENUMERATOR: A Regular Expression search. Only works with file system based searches.
*/
	
	static RegExp;
	/**
 * @description ENUMERATOR: Include native scene files (*.duf, *.dsf, *.daz) in the search.
*/
	
	static NativeScenes;
	/**
 * @description ENUMERATOR: Include native script files (*.ds, *.dsa, *.dsb, *.dse) in the search.
*/
	
	static NativeScripts;
	/**
 * @description ENUMERATOR: Include Poser Character files (*.cr2, *.crz) in the search.
*/
	
	static PoserFigures;
	/**
 * @description ENUMERATOR: Include Poser Pose files (*.pz2, *.p2z) in the search.
*/
	
	static PoserPoses;
	/**
 * @description ENUMERATOR: Include Poser Prop files (*.pp2, *.ppz) in the search.
*/
	
	static PoserProps;
	/**
 * @description ENUMERATOR: Include Poser Hair files (*.hr2, *.hrz) in the search.
*/
	
	static PoserHair;
	/**
 * @description ENUMERATOR: Include Poser Face (Expression) files (*.fc2,*.fcz) in the search.
*/
	
	static PoserFaces;
	/**
 * @description ENUMERATOR: Include Poser Light files (*.lt2, *.ltz) in the search.
*/
	
	static PoserLights;
	/**
 * @description ENUMERATOR: Include Poser Camera files (*.cm2, *.cmz) in the search.
*/
	
	static PoserCameras;
	/**
 * @description ENUMERATOR: Include Poser Hand files (*.hd2, *.hdz) in the search.
*/
	
	static PoserHands;
	/**
 * @description ENUMERATOR: Include Poser Material Collection files (*.mc6, *.mcz) in the search.
*/
	
	static PoserMaterials;
	/**
 * @description ENUMERATOR: Include Poser Scene files (*.pz3, *.pzz) in the search.
*/
	
	static PoserScenes;
	/**
 * @description ENUMERATOR: Include general import files in the search.
*/
	
	static ImportFiles;
	/**
 * @description ENUMERATOR: Include all native files (*.duf, *.dsf, *.daz, *.ds, *.dsa, *.dsb, *.dse) in the search.
*/
	
	static AllNativeFiles;
	/**
 * @description ENUMERATOR: Mask for no native files in the search.
*/
	
	static NoNativeFilesMask;
	/**
 * @description ENUMERATOR: Include all Poser files in the search.
*/
	
	static AllPoserFiles;
	/**
 * @description ENUMERATOR: Mask for no Poser files in the search.
*/
	
	static NoPoserFilesMask;
	/**
 * @description ENUMERATOR: Search through all files.
*/
	
	static AllFiles;
	/**
 * @description ENUMERATOR: Same as AllFiles.
*/
	
	static DefaultOptions;
	/**
 * @description Parameter(s):
*/
	static escapeSearchTerm(searchTerm:String):String {
	
	}
	/**
 * @description Parameter(s):
*/
	static findCommonBaseCategoryPath(categoryPaths:Array, flatten:Boolean):String {
	
	}
	/**
 * @description Parameter(s):
*/
	static getAssetUriForNode(node:DzNode):String {
	
	}
	/**
 * @description Return Value:
*/
	getCategoriesID():String {
	
	}
	/**
 * @description Parameter(s):
*/
	static getCompatibilityBasePathForNode(node:DzNode):String {
	
	}
	/**
 * @description Return Value:
*/
	getImportDirID():String {
	
	}
	/**
 * @description Return Value:
*/
	getPoserDirID():String {
	
	}
	/**
 * @description Return Value:
*/
	getPoserVirtualDirID():Array {
	
	}
	/**
 * @description Return Value:
*/
	getProductsID():String {
	
	}
	/**
 * @description Parameter(s):
*/
	static getRealPathCasing(path:String, search:String):String {
	
	}
	/**
 * @description Parameter(s):
*/
	static getRelativeProductMetafilePath(store:String, token:String, title:String, extension:String):String {
	
	}
	/**
 * @description Return Value:
*/
	getSpecialPoserFolders():Array {
	
	}
	/**
 * @description Return Value:
*/
	getStudioDirID():String {
	
	}
	/**
 * @description Return Value:
*/
	getStudioExcludes():Array {
	
	}
	/**
 * @description Return Value:
*/
	getStudioVirtualDirID():Array {
	
	}
	/**
 * @description Parameter(s):
*/
	static normalizePath(type:String, relative:Boolean):String {
	
	}
	/**
 * @description Saves user owned metadata to an XML file (or a series of XML files).
*/
	static saveUserDBData(dirPath:String, filePrefix:String):DzError {
	
	}
	/**
 * @description Sets the metadata associated with a file.
*/
	static setFileMetadata(filepath:String, contentType:String, compatibleWith:String, category:String, assetNode:DzNode, compatiblityBase:String):String {
	
	}
	/**
 * @description Return Value:
*/
	canStartAndStopCMS():Boolean {
	
	}
	/**
 * @description Checks for new metadata scripts within the RunOnce directories.
*/
	checkforNewMetadataScripts():void {
	
	}
	/**
 * @description Removes all groups from all assets.
*/
	clearAllGroupIDs(notify:Boolean):Boolean {
	
	}
	/**
 * @description Clears the metadata queue.
*/
	clearDBMetaFileQueue():void {
	
	}
	/**
 * @description Creates a compatibility base.
*/
	createCompatibilityBase(base:String):Number {
	
	}
	/**
 * @description Creates a new product.
*/
	createProduct(name:String, storeID:String, token:String):DzProductAssetContainer {
	
	}
	/**
 * @description Creates a new product from a list of assets.
*/
	createProductFromAssets(assets:Array, name:String):DzProductAssetContainer {
	
	}
	/**
 * @description Creates a new product from container and its children.
*/
	createProductFromContainer(container:DzAbstractAssetContainer, name:String):DzProductAssetContainer {
	
	}
	/**
 * @description Attempts to create a store in the database.
*/
	createStore(storeID:String, token:String, url:String):Boolean {
	
	}
	/**
 * @description Creates a content type.
*/
	createType(type:String, defaultLoad:Boolean):Number {
	
	}
	/**
 * @description Causes the category identified by idPath to update.
*/
	emitCategoryChanged(idPath:Array):Array {
	
	}
	/**
 * @description Parameter(s):
*/
	findAssetPathFromShortFilename(fileName:String):String {
	
	}
	/**
 * @description Parameter(s):
*/
	findAssetsForFile(relativePath:String, userFacing:Boolean, installed:Boolean):Array {
	
	}
	/**
 * @description Return Value:
*/
	findAudienceID(audience:String):Number {
	
	}
	/**
 * @description Attempts to find a compatibility base, and potentially create it if it doesn't already exist.
*/
	findCompatibilityBaseID(base:String, create:Boolean):Number {
	
	}
	/**
 * @description Parameter(s):
*/
	findProductByGuid(guid:String):DzProductAssetContainer {
	
	}
	/**
 * @description Parameter(s):
*/
	findProductByStoreToken(storeID:String, token:String):DzProductAssetContainer {
	
	}
	/**
 * @description Parameter(s):
*/
	findProductsByName(name:String):Array {
	
	}
	/**
 * @description Parameter(s):
*/
	findProductsForFile(relativePath:String):Array {
	
	}
	/**
 * @description Attempts to find the identifier used to identify a content type.
*/
	findTypeID(type:String, create:Boolean, defaultLoad:Boolean):Number {
	
	}
	/**
 * @description Parameter(s):
*/
	getAudience(id:Number):String {
	
	}
	/**
 * @description Return Value:
*/
	getAudiences():Array {
	
	}
	/**
 * @description Return Value:
*/
	getCategories():DzCategoryAssetContainer {
	
	}
	/**
 * @description Parameter(s):
*/
	getCategoryPath(id:Number):String {
	
	}
	/**
 * @description Return Value:
*/
	getCMSOptions():Object {
	
	}
	/**
 * @description Parameter(s):
*/
	getCompatibilityBase(id:Number):String {
	
	}
	/**
 * @description Return Value:
*/
	getContentDirs():DzTopLevelAssetContainer {
	
	}
	/**
 * @description Return Value:
*/
	getDatabaseDsn():String {
	
	}
	/**
 * @description Return Value:
*/
	getDatabaseFilePath():String {
	
	}
	/**
 * @description Return Value:
*/
	getDBMetaFileQueue():Array {
	
	}
	/**
 * @description Parameter(s):
*/
	getFirstCategory(assetPath:String, preferredCategory:String):String {
	
	}
	/**
 * @description Return Value:
*/
	getGroupNewProductsAsNew():Boolean {
	
	}
	/**
 * @description Return Value:
*/
	getImportDirs():DzTopLevelAssetContainer {
	
	}
	/**
 * @description Return Value:
*/
	getMaxFileSearchResultSize():Number {
	
	}
	/**
 * @description Return Value:
*/
	getNumMaxItemsPerPage():Number {
	
	}
	/**
 * @description Return Value:
*/
	getPoserDirs():DzTopLevelAssetContainer {
	
	}
	/**
 * @description Return Value:
*/
	getProducts():DzTopLevelAssetContainer {
	
	}
	/**
 * @description Attempts to shorten absolutePath to a list of paths that are relative to one of the mapped content directories.
*/
	getRelativePaths(absolutePath:String, useImportFolders:Boolean):Array {
	
	}
	/**
 * @description Return Value:
*/
	getRootCategoryStrings():Array {
	
	}
	/**
 * @description Return Value:
*/
	getShowHiddenVendorCategorization():Boolean {
	
	}
	/**
 * @description Return Value:
*/
	getStoresIDs():Array {
	
	}
	/**
 * @description Return Value:
*/
	getStoreToken(storeID:String):String {
	
	}
	/**
 * @description Return Value:
*/
	getStoreUrl(storeID:String):String {
	
	}
	/**
 * @description Parameter(s):
*/
	getType(id:Number):String {
	
	}
	/**
 * @description Performs a database lookup on a user-facing content file to get its content type.
*/
	getTypeForContentFile(fullPath:String):String {
	
	}
	/**
 * @description Checks the given node for content type in its presentation (if any), falls back to a source file data item and performs a content database lookup on the path it specifies (if any), and finally falls back to the content file path of the node (if any) to find its content type.
*/
	getTypeForNode(node:DzNode):String {
	
	}
	/**
 * @description Return Value:
*/
	getTypes():Array {
	
	}
	/**
 * @description Return Value:
*/
	haveDatabase():Boolean {
	
	}
	/**
 * @description Causes metadata files at absoluteProductPaths to be imported.
*/
	importMetadataFiles(productRelativePaths:Array, runSilent:Boolean, markAsVendor:Boolean):Array {
	
	}
	/**
 * @description Parameter(s):
*/
	isClothingType(type:String):Boolean {
	
	}
	/**
 * @description Return Value:
*/
	isConnectedToCMS():Boolean {
	
	}
	/**
 * @description Parameter(s):
*/
	isFigureType(type:String):Boolean {
	
	}
	/**
 * @description Parameter(s):
*/
	isFollowingType(type:String):Boolean {
	
	}
	/**
 * @description Parameter(s):
*/
	isHairType(type:String):Boolean {
	
	}
	/**
 * @description Parameter(s):
*/
	isNeedsBaseFigureType(type:String):Boolean {
	
	}
	/**
 * @description Parameter(s):
*/
	isPresetForFigureType(type:String):Boolean {
	
	}
	/**
 * @description Parameter(s):
*/
	isPresetType(type:String):Boolean {
	
	}
	/**
 * @description Parameter(s):
*/
	isPropType(type:String):Boolean {
	
	}
	/**
 * @description Parameter(s):
*/
	isReplaceableType(type:String):Boolean {
	
	}
	/**
 * @description Return Value:
*/
	isResettingDatabase():Boolean {
	
	}
	/**
 * @description Return Value:
*/
	isSynchronizing():Boolean {
	
	}
	/**
 * @description Signals that categories need to be updated.
*/
	markCategoriesChanged():void {
	
	}
	/**
 * @description Signals that products need to be updated.
*/
	markProductsChanged():void {
	
	}
	/**
 * @description Causes the metadata file at productRelativePath to be processed and category containers to update.
*/
	processDBMetaFile(productRelativePath:String, runSilent:Boolean, markAsVendor:Boolean, groupAsNew:Boolean):Array {
	
	}
	/**
 * @description Causes the metadata file at productRelativePath to be processed, without causing category containers to update.
*/
	processDBMetaFileNoEmit(productRelativePath:String, runSilent:Boolean, markAsVendor:Boolean, groupAsNew:Boolean):Array {
	
	}
	/**
 * @description If metadata files are queued, causes the metadata import dialog to be displayed and allows the user to select which products to process metadata for, then starts the import process on the selected products.
*/
	processDBMetaFileQueue():void {
	
	}
	/**
 * @description Adds the file at productRelativePath to the metadata queue.
*/
	queueDBMetaFile(productRelativePath:String):String {
	
	}
	/**
 * @description Causes the internal list of root categories to be rebuilt.
*/
	refreshCategoryRoots():void {
	
	}
	/**
 * @description Causes the internal list of stores to be rebuilt.
*/
	refreshStores():void {
	
	}
	/**
 * @description Causes the internal list of content types to be rebuilt
*/
	refreshTypes():void {
	
	}
	/**
 * @description Causes all *.dsx metadata files in the "./Runtime/Support" folder of each mapped native and Poser content directory to be queued, and then imported.
*/
	reimportDBMetaFiles():void {
	
	}
	/**
 * @description Removes assets in list that have been orphaned (no longer exist) from the database.
*/
	removeOrphanedAssetReferences(list:Array):Array {
	
	}
	/**
 * @description Attempts to remove a store from the database.
*/
	removeStore(storeID:String):Boolean {
	
	}
	/**
 * @description Triggers the connected PostgreSQL server to reset (delete) the current database and re-establish the default content types, compatibility bases, and categories.
*/
	resetDatabase():void {
	
	}
	/**
 * @description Performs a user-facing file scan, ultimately mapping any directories found to contain compatible content.
*/
	scanFiles(options:SearchOption, assignToGroup:Boolean, addToCategory:Boolean, onlyNewToCategory:Boolean):SearchOption {
	
	}
	/**
 * @description Performs a user-facing file search on the mapped content directories.
*/
	searchFiles(filename:String, options:SearchOption):DzSearchContainer {
	
	}
	/**
 * @description Performs a user-facing asset search on the content database, where the results are confined to those that indicate they are compatible with the compatibility base of the specified asset.
*/
	searchForAssetAddOns(asset:DzAsset, filterText:String, categories:Array, sorting:Number):DzSearchContainer {
	
	}
	/**
 * @description Performs a user-facing asset search on the content database.
*/
	searchForAssets(filterText:String, categories:Array, compatibilityBases:Array, contentTypes:Array, sorting:Number):DzSearchContainer {
	
	}
	/**
 * @description Performs a user-facing asset search on the content database.
*/
	searchForAssetsByKeywords(keywords:String, options:SearchOption, sorting:Number):DzSearchContainer {
	
	}
	/**
 * @description Parameter(s):
*/
	searchForAssetsInCategory(categoryPath:String, userFacing:Boolean, installed:Boolean):DzSearchContainer {
	
	}
	/**
 * @description Performs a user-facing asset search on the content database, where the results are confined to those that indicate they are the compatibility base of the specified asset.
*/
	searchForAssetTargets(asset:DzAsset, filterText:String, categories:Array, sorting:Number):DzSearchContainer {
	
	}
	/**
 * @description Performs a user-facing asset search on the content database, where the results are confined to a specified product.
*/
	searchForProductAssets(product:DzProductAssetContainer, filterText:String, categories:Array, compatibilityBases:Array, contentTypes:Array, sorting:Number):DzSearchContainer {
	
	}
	/**
 * @description Parameter(s):
*/
	searchForProducts(filterText:String, categories:Array, compatibilityBases:Array, contentTypes:Array, installStateFlags:Number, sorting:Number):DzProductHolderContainer {
	
	}
	/**
 * @description Sets the options for the Content Management Service (CMS), if it is of the type that can accept options.
*/
	setCMSOptions(clusterDirectory:String, port:Number):String {
	
	}
	/**
 * @description Parameter(s):
*/
	setGroupNewProductsAsNew(onOff:Boolean):Boolean {
	
	}
	/**
 * @description Parameter(s):
*/
	setMaxFileSearchResultSize(maxNum:Number):Number {
	
	}
	/**
 * @description Parameter(s):
*/
	setMaxItemsPerPage(maxNum:Number):Number {
	
	}
	/**
 * @description Sets the group identifier on products and/or files, for a list of products.
*/
	setProductGroupIDs(guids:Array, groupId:Number, groupProduct:Boolean, groupFiles:Boolean):Array {
	
	}
	/**
 * @description Parameter(s):
*/
	setShowAssetToolTip(onOff:Boolean):Boolean {
	
	}
	/**
 * @description Parameter(s):
*/
	setShowExtensions(onOff:Boolean):Boolean {
	
	}
	/**
 * @description Sets whether or not hidden vendor categorizations are shown.
*/
	setShowHiddenVendorCategorization(shown:Boolean):Boolean {
	
	}
	/**
 * @description Parameter(s):
*/
	setShowLargeIcons(onOff:Boolean):Boolean {
	
	}
	/**
 * @description Return Value:
*/
	showAssetToolTip():Boolean {
	
	}
	/**
 * @description Causes the Content DB Editor to be displayed, allowing the user to view/edit metadata for products and/or assets all within a centralized dialog.
*/
	showDatabaseEditor(assetContainer:DzAbstractAssetContainer):Boolean {
	
	}
	/**
 * @description Return Value:
*/
	showExtensions():Boolean {
	
	}
	/**
 * @description Return Value:
*/
	showLargeIcons():Boolean {
	
	}
	/**
 * @description Executes a script named after the store associated with product, in the ./resources/stores directory. A single anonymous JSON object is passed to the script, which can be retrieved using the global "getArguments()" function. The properties on the Object consist of values stored in the content database.
*/
	showMoreProductInfo(product:DzProductAssetContainer):DzProductAssetContainer {
	
	}
	/**
 * @description Starts the Content Management Service (CMS), if it is not already running.
*/
	startCMS():void {
	
	}
	/**
 * @description Stops all searches that were started by any of the search* methods on DzAssetMgr.
*/
	stopAllSearches():void {
	
	}
	/**
 * @description Stops the Content Management Service (CMS), if it is running and is of the type that can be stopped.
*/
	stopCMS(mode:Number, wait:Boolean, timeout:Number):Number {
	
	}
	/**
 * @description Stops any searches that were started by DzAssetMgr.scanFiles().
*/
	stopFileScan():void {
	
	}
	/**
 * @description Stops any searches that were started by DzAssetMgr.searchFiles().
*/
	stopFileSearch():void {
	
	}
	/**
 * @description Stops any searches that were started by DzAssetMgr.searchForAssetAddOns().
*/
	stopSearchForAssetAddOns():void {
	
	}
	/**
 * @description Stops any searches that were started by DzAssetMgr.searchForAssets(), DzAssetMgr.searchForAssetsByKeywords() or DzAssetMgr.searchForProductAssets().
*/
	stopSearchForAssets():void {
	
	}
	/**
 * @description Stops any searches that were started by DzAssetMgr.searchForAssetTargets().
*/
	stopSearchForAssetTargets():void {
	
	}
	/**
 * @description Stops any searches that were started by DzAssetMgr.searchForProducts().
*/
	stopSearchForProducts():void {
	
	}
	/**
 * @description Triggers an update to asset containers within the Categories top-level container.
*/
	updateCategoryContainers():void {
	
	}
	/**
 * @description Triggers an update to asset containers within the native formats top-level container.
*/
	updateContentContainers():void {
	
	}
	/**
 * @description Triggers an update to asset containers within the folder based top-level containers.
*/
	updateFolderBasedContainers():void {
	
	}
	/**
 * @description Triggers an update to asset containers within the other import formats top-level container.
*/
	updateImportContainers():void {
	
	}
	/**
 * @description Triggers an update to asset containers within the Poser formats top-level container.
*/
	updatePoserContainers():void {
	
	}
	/**
 * @description Triggers an update to asset containers within the Products top-level container.
*/
	updateProductContainers():void {
	
	}
	/**
 * @description Reclaims space in the database previously occupied by deleted or updated data.
*/
	vacuumDatabase():Boolean {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when the base paths list has changed.
 * @signature "basePathsChanged()"
 * @event
*/
	basePathsChanged():void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when a category has been changed.
 * @signature "categoryUpdate(QVariantList)"
 * @event
*/
	categoryUpdate(idPath:Array):void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when the Data Source Name (DSN) for the Content Management Service (CMS) has changed.
 * @signature "cmsDSNChanged()"
 * @event
*/
	cmsDSNChanged():void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when the Content Management Service (CMS) has started.
 * @signature "cmsStarted()"
 * @event
*/
	cmsStarted():void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when the Content Management Service (CMS) has stopped.
 * @signature "cmsStopped()"
 * @event
*/
	cmsStopped():void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when the compatibility base list has changed.
 * @signature "compatibilityBaseListChanged()"
 * @event
*/
	compatibilityBaseListChanged():void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when a container has been changed.
 * @signature "containerUpdate(QVariantList)"
 * @event
*/
	containerUpdate(idPath:Array):void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when itemsPerPage() will return a new value.
 * @signature "itemsPerPageChanged(int)"
 * @event
*/
	itemsPerPageChanged(newPerPage:Number):void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when the maximum file search result size has changed.
 * @signature "maxFileSearchResultSizeChanged(int)"
 * @event
*/
	maxFileSearchResultSizeChanged(maxFileSearchResultSize:Number):void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when a product has been created.
 * @signature "productCreated(const QString &)"
 * @event
*/
	productCreated(guid:String):void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when showAssetToolTipChanged() will return a new value.
 * @signature "showAssetToolTipChanged()"
 * @event
*/
	showAssetToolTipChanged():void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when showExtensions() will return a new value.
 * @signature "showExtensionsChanged()"
 * @event
*/
	showExtensionsChanged():void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when showLargeIcons() will return a new value.
 * @signature "showLargeIconsChanged()"
 * @event
*/
	showLargeIconsChanged():void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when the store list has changed.
 * @signature "storeListChanged()"
 * @event
*/
	storeListChanged():void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when the type list has changed.
 * @signature "typeListChanged()"
 * @event
*/
	typeListChanged():void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when the user interface is about to perform a database query.
 * @signature "uiAboutToSearch(int)"
 * @event
*/
	uiAboutToSearch(sender:QObject, text:String, categories:Array, compatibilityBases:Array, contentTypes:Array):void {
	
	}

}
/**
 * @classdesc This class is implemented by platform specific audioclip classes, winaudioclip_dz and macaudioclip_dz.



See Also:


 DzScene.getAudio(), DzScene.setAudio(), DzAudioImporter, DzMultiMediaMgr.importAudioClip()
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/audioclip_dz}*/
class DzAudioClip extends DzBase, DzRefCountedItem {
	/**
 * @description The current position of the audio clip from the start.
	*/
	currentPosition:DzTime;
	/**
 * @description The name of the file the audio clip was loaded from (Read Only)
	*/
	filename:String;
	/**
 * @description The length of the audio clip (Read Only)
	*/
	length:DzTime;
	/**
 * @description The current rate multiplier for the audio clip
	*/
	rate:Number;
	/**
 * @description Opens the file specified by filename and sets up the audio clip.
*/
	openFile(filename:String):DzError {
	
	}
	/**
 * @description Pauses the audio clip without resetting current position.
*/
	pause():void {
	
	}
	/**
 * @description Plays the audio clip from current position.
*/
	play():void {
	
	}
	/**
 * @description Resets the current position of the audio clip to the beginning.
*/
	reset():void {
	
	}

}
/**
 * @classdesc See Also:


 DzMultiMediaMgr
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/audioimporter_dz}*/
class DzAudioImporter extends DzFileIO {
	/**
 * @description Return Value:
*/
	getDescription():String {
	
	}
	/**
 * @description Return Value:
*/
	getExtension():String {
	
	}
	/**
 * @description TODO:
Add description.
*/
	loadAudio(filename:String, clip:DzAudioClip, options:DzFileIOSettings):DzError {
	
	}
	/**
 * @description Reads the file.
*/
	loadAudio(filename:String, clip:DzAudioClip):DzError {
	
	}
	/**
 * @description Test the given filename and file contents to see if this importer can read it.
*/
	recognize(filename:String):Boolean {
	
	}

}
/**
 * @classdesc This class does not provide access to any Daz 3D user account information which could be considered an invasion of the user's the privacy. This class does provide plugins and scripts with an ability to check if a user has authenticated (logged in to) a Daz 3D account, to prompt a user to authenticate (login to) their Daz 3D account, to obtain a token that uniquely and anonymously identifies the current/last account authenticated, and to logout of an account that is currently logged in.



There is only one instance of this manager in an application. This instance is created and owned by DzApp. Do not create an instance of this class, rather request the instance from DzApp via DzApp.getAuthenticationMgr().



See Also:


 Sample: Retrieve User Token
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/authenticationmgr_dz}*/
class DzAuthenticationMgr extends QObject {
	/**
 * @description This function will attempt to authenticate a Daz 3D user account. If no account information has been entered by the user, a dialog will be displayed to securely acquire the username and password to be authenticated.
*/
	authenticateUser():Boolean {
	
	}
	/**
 * @description Return Value:
*/
	getUserToken():String {
	
	}
	/**
 * @description Return Value:
*/
	isAuthenticated():Boolean {
	
	}
	/**
 * @description Return Value:
*/
	isLoggingIn():Boolean {
	
	}
	/**
 * @description Invalidates any existing authentication.
*/
	logout():void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when the user begins to login to a Daz 3D account.
 * @signature "beginLogin()"
 * @event
*/
	beginLogin():void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when the user begins to log out of a Daz 3D account.
 * @signature "beginLogout()"
 * @event
*/
	beginLogout():void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when the current Daz 3D account in use changes.
 * @signature "currentAccountChanged()"
 * @event
*/
	currentAccountChanged():void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted after the user has successfully logged in to a Daz 3D account.
 * @signature "loggedIn()"
 * @event
*/
	loggedIn():void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted after the user has successfully logged out of a Daz 3D account.
 * @signature "loggedOut()"
 * @event
*/
	loggedOut():void {
	
	}

}
/**
 * @classdesc DzAuthor is used to access authorship data for native files, and the current instance of the application.



See Also:


 DzApp.getCurrentAuthor(), DzScript.getAuthor(), DzScriptContext.getScriptAuthor(), Global.getScriptAuthor()
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/author_dz}*/
class DzAuthor extends Object {
	/**
 * @description Deprecated
	*/
	email:String;
	/**
 * @description The author's name. (Read Only)
	*/
	name:String;
	/**
 * @description The author's url. (Read Only)
	*/
	url:String;
	/**
 * @description true if name contains valid information, otherwise false. (Read Only)
	*/
	valid:String;
	/**
 * @description Default constructor. Creates an empty author.
 * @constructor
*/
	constructor() {
	
	}
	/**
 * @description Copy Constructor.
 * @constructor
*/
	constructor(author:DzAuthor) {
	
	}
	/**
 * @description Create a DzAuthor with the given name, email, and url.
 * @constructor
*/
	constructor(name:String, email:String, url="":String) {
	
	}

}
/**
 * @classdesc This class encapsulates a 2D image and the parameters for drawing the image as a backdrop for the scene. An instance of this class only contributes to the scene if it is set as the current backdrop for the scene.



See Also:


 DzScene.setBackdrop(), DzScene.getBackdrop()
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/backdrop_dz}*/
class DzBackdrop extends DzElement {
	/**
 * @description This property holds the background color of the backdrop
	*/
	backgroundColor:Color;
	/**
 * @description This property holds whether or not the backdrop is flipped horizontally
	*/
	flipHorizontal:Boolean;
	/**
 * @description This property holds whether or not the backdrop is flipped vertically
	*/
	flipVertical:Boolean;
	/**
 * @description This property holds the rotation applied to the backdrop
	*/
	rotation:Rotation;
	/**
 * @description This property holds whether or not the backdrop is visible in the viewport
	*/
	visible:Boolean;
	/**
 * @description This property holds whether or not the backdrop is visible in a render
	*/
	visibleInRender:Boolean;
	/**
 * @description ENUMERATOR: No rotation
*/
	
	static NO_ROTATION;
	/**
 * @description ENUMERATOR: 90 degree rotation Counter-Clockwise
*/
	
	static ROTATE_LEFT_90;
	/**
 * @description ENUMERATOR: 90 degree rotation Clockwise
*/
	
	static ROTATE_RIGHT_90;
	/**
 * @description ENUMERATOR: 180 degree rotation
*/
	
	static ROTATE_180;
	/**
 * @description Default Constructor.
 * @constructor
*/
	constructor() {
	
	}
	/**
 * @description Changes the render aspect ratio to match the backdrop image, and the image dimensions
*/
	adjustRenderAspectRatioToMatchTexture():void {
	
	}
	/**
 * @description Changes the render image dimensions and aspect ratio to match the backdrop image
*/
	adjustRenderDimensionsToMatchTexture():void {
	
	}
	/**
 * @description Clears the current back drop image, and resets all parameters.
*/
	clear():void {
	
	}
	/**
 * @description Return Value:
*/
	getBackgroundColorControl():DzColorProperty {
	
	}
	/**
 * @description Return Value:
*/
	getHorizontalFlipControl():DzBoolProperty {
	
	}
	/**
 * @description Return Value:
*/
	getMaterial():DzMaterial {
	
	}
	/**
 * @description Return Value:
*/
	getRotationControl():DzEnumProperty {
	
	}
	/**
 * @description Return Value:
*/
	getTexture():DzTexture {
	
	}
	/**
 * @description Return Value:
*/
	getVerticalFlipControl():DzBoolProperty {
	
	}
	/**
 * @description Return Value:
*/
	getVisibleControl():DzBoolProperty {
	
	}
	/**
 * @description Return Value:
*/
	getVisibleInRenderControl():DzBoolProperty {
	
	}
	/**
 * @description Sets the backdrop image.
*/
	setTexture(img:DzTexture):DzTexture {
	
	}
	/**
 * @description Deprecated
*/
	showOptions(parent:QWidget):QWidget {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when the background color of this backdrop changes.
 * @signature "backgroundColorChanged()"
 * @event
*/
	backgroundColorChanged():void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when the information in this backdrop changes.
 * @signature "drawnDataChanged()"
 * @event
*/
	drawnDataChanged():void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when the visibility of this backdrop changes.
 * @signature "visiblityChanged()"
 * @event
*/
	visiblityChanged():void {
	
	}

}
/**
 * @classdesc Derived from QObject, this base class allows for the use of the signals-slots architecture provided by the Qt framework, within the Daz Studio API. A considerable portion of classes in the Daz Studio API derive from this class.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/base_dz}*/
class DzBase extends QObject {
	/**
 * @description Provides scripts a way to make objects persistent; i.e., so that Qt will not delete them when they are no longer referenced by the script. This allows object instances to be created in script, then passed into the core and remain after the script has finished execution.
*/
	makePersistent():void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when the internal name of the object has changed.
 * @signature "nameChanged(const QString&)"
 * @event
*/
	nameChanged(name:String):void {
	
	}

}
/**
 * @classdesc This is the basic camera implementation for DAZ Studio. It supplies commonly-used features like focal length adjustment and depth of field alteration.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/basiccamera_dz}*/
class DzBasicCamera extends DzCamera {
	/**
 * @description Holds the current height of the view. (Read Only)
	*/
	currentViewHeight:Number;
	/**
 * @description Holds the current width of the view. (Read Only)
	*/
	currentViewWidth:Number;
	/**
 * @description Holds whether or not the camera performs depth of field calculations.
	*/
	depthOfField:Boolean;
	/**
 * @description Holds the f/stop of the camera.
	*/
	fStop:Number;
	/**
 * @description Holds whether or the camera is a perspective or orthographic view.
	*/
	isPerspective:Boolean;
	/**
 * @description Holds whether or not the local dimensions will use the active viewport when enabled. (since 4.9.3.108)
	*/
	useActiveViewport:Boolean;
	/**
 * @description Create a camera of the given type.
 * @constructor
*/
	constructor(type=DzCamera.PERSPECTIVE_CAMERA:DzCamera::CameraType, isViewCamera=false:Boolean) {
	
	}
	/**
 * @description Applies the settings in a dimensions preset.
*/
	applyDimensionsPreset(preset:String):Boolean {
	
	}
	/**
 * @description A ray through the scene for a perspective view.
*/
	cursorToRay(x:Number, y:Number):DzVec3 {
	
	}
	/**
 * @description Calculates a location in the scene based on an x, y position in the viewport and distance from the camera.
*/
	cursorToScene(x:Number, y:Number, z:Number):DzVec3 {
	
	}
	/**
 * @description Return Value:
*/
	getApertureBladeRotationAngleControl():DzFloatProperty {
	
	}
	/**
 * @description Return Value:
*/
	getApertureNumBladesControl():DzIntProperty {
	
	}
	/**
 * @description Return Value:
*/
	getDepthOfFieldChannel():DzBoolProperty {
	
	}
	/**
 * @description Retrieves the settings of a dimensions preset.
*/
	getDimensionsPreset(preset:String, settings:DzSettings):Boolean {
	
	}
	/**
 * @description Return Value:
*/
	getDisplayPersistenceChannel():DzBoolProperty {
	
	}
	/**
 * @description Return Value:
*/
	getDofColorChannel():DzColorProperty {
	
	}
	/**
 * @description Return Value:
*/
	getDofOverlayColorChannel():DzColorProperty {
	
	}
	/**
 * @description Return Value:
*/
	getDofOverlayOpacityChannel():DzFloatProperty {
	
	}
	/**
 * @description Return Value:
*/
	getDofVisibilityChannel():DzBoolProperty {
	
	}
	/**
 * @description Return Value:
*/
	getFarDofVisibilityChannel():DzBoolProperty {
	
	}
	/**
 * @description Return Value:
*/
	getFocalDistChannel():DzFloatProperty {
	
	}
	/**
 * @description Return Value:
*/
	getFocalLengthChannel():DzFloatProperty {
	
	}
	/**
 * @description Return Value:
*/
	getFocalPointScaleChannel():DzFloatProperty {
	
	}
	/**
 * @description Return Value:
*/
	getFovColorChannel():DzColorProperty {
	
	}
	/**
 * @description Return Value:
*/
	getFovLengthChannel():DzFloatProperty {
	
	}
	/**
 * @description Return Value:
*/
	getFovOpacityChannel():DzFloatProperty {
	
	}
	/**
 * @description Return Value:
*/
	getFrameWidthChannel():DzFloatProperty {
	
	}
	/**
 * @description Return Value:
*/
	getFStopChannel():DzFloatProperty {
	
	}
	/**
 * @description Return Value:
*/
	getHeadlampIntensityControl():DzFloatProperty {
	
	}
	/**
 * @description Return Value:
*/
	getLensDistortionK1Control():DzFloatProperty {
	
	}
	/**
 * @description Return Value:
*/
	getLensDistortionK2Control():DzFloatProperty {
	
	}
	/**
 * @description Return Value:
*/
	getLensDistortionK3Control():DzFloatProperty {
	
	}
	/**
 * @description Return Value:
*/
	getLensDistortionScaleControl():DzFloatProperty {
	
	}
	/**
 * @description Return Value:
*/
	getLensDistortionTypeControl():DzEnumProperty {
	
	}
	/**
 * @description Return Value:
*/
	getLensRadialBiasControl():DzFloatProperty {
	
	}
	/**
 * @description Return Value:
*/
	getLensShiftXControl():DzFloatProperty {
	
	}
	/**
 * @description TODO:
Add description.
*/
	getLensShiftYControl():DzFloatProperty {
	
	}
	/**
 * @description TODO:
Add description.
*/
	getLensStereoOffsetControl():DzFloatProperty {
	
	}
	/**
 * @description Return Value:
*/
	getLensThicknessControl():DzFloatProperty {
	
	}
	/**
 * @description Return Value:
*/
	getNearDofVisibilityChannel():DzBoolProperty {
	
	}
	/**
 * @description Return Value:
*/
	getSightLineOpacityChannel():DzFloatProperty {
	
	}
	/**
 * @description Return Value:
*/
	isAtDefaultSceneCameraValues():Boolean {
	
	}
	/**
 * @description Return Value:
*/
	isDefaultSceneCamera():Boolean {
	
	}
	/**
 * @description Parameter(s):
*/
	setIsDefaultSceneCamera(yesNo:Boolean):Boolean {
	
	}
	/**
 * @description Changes the type of the camera.
*/
	setType(type:DzCamera.CameraType):DzCamera {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when the camera's depth of field setting has changed.
 * @signature "projectionChanged()"
 * @event
*/
	depthOfFieldChanged():void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when the camera's f-Stop setting has changed.
 * @signature "fStopChanged(const DzTimeRange&)"
 * @event
*/
	fStopChanged(range:DzTimeRange):void {
	
	}

}
/**
 * @classdesc The buttons provided by the dialog are: 'What's This', 'Apply', 'Accept', and 'Cancel'. Custom buttons can also be added to the set of default buttons by calling addButton(). All buttons but the 'Accept' button can be hidden or shown. By default, the 'Apply' button is the only hidden button. The text on the default buttons can be customized.



The dialog has a vertical box layout above the horizontal set of buttons. Widgets and sub-layouts can be added to this layout using addWidget() and addLayout().



See Also:


 Sample: Simple Input Dialog

 Sample: Simple Image Dialog

 Sample: Action Accelerators

 Sample: Version Conversion
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/basicdialog_dz}*/
class DzBasicDialog extends DzDialog {
	/**
 * @description Default Constructor. Creates a typical DAZ Studio dialog with 'What's This', 'Apply', 'Accept', and 'Cancel' buttons. By default, the 'Apply' button is hidden, call showApplyButton() to make it visible.
 * @constructor
*/
	constructor() {
	
	}
	/**
 * @description Adds a button into the horizontal layout of the dialog's button bar.
*/
	addButton(btn:DzButton, index:Number):DzButton {
	
	}
	/**
 * @description Adds a layout into the main vertical layout of the dialog.
*/
	addLayout(layout:DzLayout, stretch:Number):DzLayout {
	
	}
	/**
 * @description Adds spacing into the main vertical layout of the dialog.
*/
	addSpacing(spacing:Number):Number {
	
	}
	/**
 * @description Adds stretch into the main vertical layout of the dialog.
*/
	addStretch(stretch:Number):Number {
	
	}
	/**
 * @description Adds a widget into the main vertical layout of the dialog.
*/
	addWidget(child:DzWidget, stretch:Number, alignment:DzWidget.AlignmentFlags):DzWidget {
	
	}
	/**
 * @description Inserts a widget into the main vertical layout of the dialog.
*/
	insertWidget(index:Number, child:DzWidget, stretch:Number, alignment:DzWidget.AlignmentFlags):Number {
	
	}
	/**
 * @description Enables or disables the Accept button. By default, the button is enabled.
*/
	setAcceptButtonEnabled(onOff:Boolean):Boolean {
	
	}
	/**
 * @description Sets the text for the dialog's accept button. By default, the button is labelled 'Accept'.
*/
	setAcceptButtonText(text:String):String {
	
	}
	/**
 * @description Enables or disables the Apply button. By default, the button is disabled.
*/
	setApplyButtonEnabled(onOff:Boolean):Boolean {
	
	}
	/**
 * @description Sets the text for the dialog's apply button. By default, the button is labelled 'Apply'.
*/
	setApplyButtonText(text:String):String {
	
	}
	/**
 * @description Enables or disables the Cancel button. By default, the button is enabled.
*/
	setCancelButtonEnabled(onOff:Boolean):Boolean {
	
	}
	/**
 * @description Sets the text for the dialog's cancel button. By default, the button is labelled 'Cancel'.
*/
	setCancelButtonText(text:String):String {
	
	}
	/**
 * @description Enables or disables the Help button. By default, the button is enabled.
*/
	setHelpButtonEnabled(onOff:Boolean):Boolean {
	
	}
	/**
 * @description Shows or hides the 'Accept' button. By default, the button is shown.
*/
	showAcceptButton(onOff:Boolean):Boolean {
	
	}
	/**
 * @description Shows or hides the 'Apply' button. By default, the button is hidden.
*/
	showApplyButton(onOff:Boolean):Boolean {
	
	}
	/**
 * @description Shows or hides the 'Cancel' button. By default, the button is shown.
*/
	showCancelButton(onOff:Boolean):Boolean {
	
	}
	/**
 * @description Shows or hides the 'What's This' button. By default, the button is shown.
*/
	showHelpButton(onOff:Boolean):Boolean {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when the 'Apply' button is clicked by the user.
 * @signature "applyClicked()"
 * @event
*/
	applyClicked():void {
	
	}

}
/**
 * @classdesc This specialized DzNode subclass adds follow bone, and mesh-binding functionality to a node. All bones are assumed to be in the hierarchy of a DzSkeleton, and will not function properly if their parent is not a skeleton or another bone.



The concept of a follow bone allows the bones of one skeleton (figure) to follow another skeleton (figure). This following does not reproduce transforms from one bone to another, but tries to align center (origin) and end points so that the following bone points in the same direction as the bone it is following. Typically, this is controlled at the skeleton level.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/bone_dz}*/
class DzBone extends DzNode {
	/**
 * @description Default Constructor. Creates a new Bone node.
 * @constructor
*/
	constructor() {
	
	}
	/**
 * @description Parameter(s):
*/
	getBoneLocalScale(tm:DzTime):DzMatrix3 {
	
	}
	/**
 * @description Get the node that this node is following.
*/
	getFollowBone():void {
	
	}
	/**
 * @description Return Value:
*/
	getFollowMode():Number {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when the follow bone has changed.
 * @signature "followBoneChanged(DzBone*)"
 * @event
*/
	followBoneChanged(newFollowBone:DzBone):void {
	
	}

}
/**
 * @classdesc This class provides an animatable boolean property that is stored and can be accessed as an integer property. The integer value 0 is false, any other integer value is true.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/boolproperty_dz}*/
class DzBoolProperty extends DzIntProperty {
	/**
 * @description Default Constructor. Creates a non-animatable, non-user property.
 * @constructor
*/
	constructor() {
	
	}
	/**
 * @description Overloaded constructor.
 * @constructor
*/
	constructor(name:String, canAnimate:Boolean, isUserProperty:Boolean, initVal=true:Boolean) {
	
	}
	/**
 * @description Return Value:
*/
	getBoolValue():Boolean {
	
	}
	/**
 * @description Return Value:
*/
	getDefaultBoolValue():Boolean {
	
	}
	/**
 * @description Sets the boolean value for this property at the current time - or the default value if this property is not animatable.
*/
	setBoolValue(value:Boolean):Boolean {
	
	}
	/**
 * @description Sets the default boolean value for this property.
*/
	setDefaultBoolValue(val:Boolean):Boolean {
	
	}

}
/**
 * @classdesc Represents a three dimensional box by storing two three dimensional floating point vectors; an upper and lower corner for the box.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/box3_dz}*/
class DzBox3 extends Object {
	/**
 * @description Holds the maximum corner of the box.
	*/
	max:DzVec3;
	/**
 * @description Holds the maximum value of the box on the x axis.
	*/
	maxX:Number;
	/**
 * @description Holds the maximum value of the box on the y axis.
	*/
	maxY:Number;
	/**
 * @description Holds the maximum value of the box on the z axis.
	*/
	maxZ:Number;
	/**
 * @description Holds the minimum corner of the box.
	*/
	min:DzVec3;
	/**
 * @description Holds the minimum value of the box on the x axis.
	*/
	minX:Number;
	/**
 * @description Holds the minimum value of the box on the y axis.
	*/
	minY:Number;
	/**
 * @description Holds the minimum value of the box on the z axis.
	*/
	minZ:Number;
	/**
 * @description Creates an uninitialized box - the first point included in an uninitialized box will become the min and max for the box.
 * @constructor
*/
	constructor() {
	
	}
	/**
 * @description Creates an initialized box with the given min and max values.
 * @constructor
*/
	constructor(xMin:Number, yMin:Number, zMin:Number, xMax:Number, yMax:Number, zMax:Number) {
	
	}
	/**
 * @description Creates an initialized box with the given min and max values.
 * @constructor
*/
	constructor(min:DzVec3, max:DzVec3) {
	
	}
	/**
 * @description Copy Constructor.
 * @constructor
*/
	constructor(box:DzBox3) {
	
	}
	/**
 * @description Parameter(s):
*/
	closestPoint(point:DzVec3):DzVec3 {
	
	}
	/**
 * @description Parameter(s):
*/
	containsPoint(point:DzVec3):Boolean {
	
	}
	/**
 * @description Return Value:
*/
	getCenter():DzVec3 {
	
	}
	/**
 * @description Tests the box for intersection with the ray, and determines the two points on the box intersected by the line.
*/
	getIntersection(ray:DzLine3, firstIntersection:DzVec3, lastIntersection:DzVec3):Boolean {
	
	}
	/**
 * @description Return Value:
*/
	getSize():Number {
	
	}
	/**
 * @description Creates a new box by transforming the corners of this box through the given matrix and then including them.
*/
	getTransformedBox(matrix:DzMatrix3):DzMatrix3 {
	
	}
	/**
 * @description Parameter(s):
*/
	include(vec:DzVec3):DzVec3 {
	
	}
	/**
 * @description Grows the box, if necessary, to include the given box.
*/
	include(box:DzBox3):void {
	
	}
	/**
 * @description Return Value:
*/
	isValid():Boolean {
	
	}
	/**
 * @description Provides a fast intersection test without returning the intersection locations. This function is much faster than getIntersection().
*/
	testIntersection(ray:DzLine3, tolerance:Number):Boolean {
	
	}
	/**
 * @description Translates the corners of the box by adding the given vector.
*/
	translate(vec:DzVec3):DzVec3 {
	
	}

}
/**
 * @classdesc TODO:
Add detailed description.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/boxlayout_dz}*/
class DzBoxLayout extends DzLayout {
	/**
 * @description The direction of the layout
	*/
	direction:Direction;
	/**
 * @description ENUMERATOR: Horizontal from left to right.
*/
	
	static LeftToRight;
	/**
 * @description ENUMERATOR: Horizontal from right to left.
*/
	
	static RightToLeft;
	/**
 * @description ENUMERATOR: Vertical from top to bottom.
*/
	
	static TopToBottom;
	/**
 * @description ENUMERATOR: Vertical from bottom to top.
*/
	
	static BottomToTop;
	/**
 * @description Creates a box layout that manages the children widgets of the given parent widget
 * @constructor
*/
	constructor(parent:DzWidget, direction=LeftToRight:Direction) {
	
	}
	/**
 * @description Creates a vertical box layout as a sub-layout of the given layout
 * @constructor
*/
	constructor(parent:DzLayout, direction=LeftToRight:Direction) {
	
	}
	/**
 * @description Adds the given layout to the items managed by this layout
*/
	addLayout(layout:DzLayout, stretch:Number):DzLayout {
	
	}
	/**
 * @description Adds a non-stretchable space with size size to the end of this layout
*/
	addSpacing(size:Number):Number {
	
	}
	/**
 * @description Adds a stretchable space with stretch factor stretch to the end of this layout
*/
	addStretch(stretch:Number):Number {
	
	}
	/**
 * @description Limits the minimum dimension perpendicular to the direction the box, to size
*/
	addStrut(size:Number):Number {
	
	}
	/**
 * @description Adds the given widget to the items managed by this layout
*/
	addWidget(widget:DzWidget, stretch:Number):DzWidget {
	
	}

}
/**
 * @classdesc TODO:
Add detailed description.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/brickmaterial_dz}*/
class DzBrickMaterial extends DzMaterial, DzRefCountedItem {
	/**
 * @description Creates a new brick material.
 * @constructor
*/
	constructor() {
	
	}
	/**
 * @description Converts the given default material to a brick material.
*/
	static convertDefaultMaterial(mat:DzDefaultMaterial):DzDefaultMaterial {
	
	}
	/**
 * @description Converts the given Uber Iray material to a brick material.
*/
	static convertUberIrayMaterial(mat:DzMaterial):DzMaterial {
	
	}
	/**
 * @description Adds the given brick to this brick material.
*/
	addBrick(brick:shaderbrick_dz):Number {
	
	}
	/**
 * @description Return Value:
*/
	allowsAutoBake():Boolean {
	
	}
	/**
 * @description Apply a copy of this material to all selected materials in the scene.
*/
	applyToScene():void {
	
	}
	/**
 * @description Deletes all bricks in this material.
*/
	deleteAllBricks():void {
	
	}
	/**
 * @description Deletes the brick with the given id from the material.
*/
	deleteBrick(id:Number):Number {
	
	}
	/**
 * @description Deletes the given brick from the material.
*/
	deleteBrick(brick:shaderbrick_dz):void {
	
	}
	/**
 * @description Takes this brick material out of edit mode.
*/
	endEditMode():void {
	
	}
	/**
 * @description Parameter(s):
*/
	getBrick(id:Number):Number {
	
	}
	/**
 * @description Return Value:
*/
	getBrickIDs():Array {
	
	}
	/**
 * @description Parameter(s):
*/
	getBrickSet(i:Number):Number {
	
	}
	/**
 * @description Return Value:
*/
	getBrickUserName():String {
	
	}
	/**
 * @description Return Value:
*/
	getExtension():String {
	
	}
	/**
 * @description Return Value:
*/
	getNumBrickSets():Number {
	
	}
	/**
 * @description Invalidates the brick sets, causing them to be rebuilt.
*/
	invalidateSets():void {
	
	}
	/**
 * @description Return Value:
*/
	isInEditMode():Boolean {
	
	}
	/**
 * @description Sets the user name of this brick material.
*/
	setBrickUserName(name:String):String {
	
	}
	/**
 * @description Sets the name for this brick material.
*/
	setMaterialName(name:String):String {
	
	}
	/**
 * @description Sets whether or not this brick material needs Ptex parameters.
*/
	setNeedsPtexParams(onoff:Boolean):Boolean {
	
	}
	/**
 * @description Sets whether this brick material needs tangent space parameters.
*/
	setNeedsTangentSpaceParams(onoff:Boolean):Boolean {
	
	}
	/**
 * @description Puts this brick material in edit mode.
*/
	startEditMode():void {
	
	}
	/**
 * @description Sets whether the identifier is updated when this brick material is invalidated.
*/
	updateIdentifierOnSetInvalidate(onOff:Boolean):Boolean {
	
	}
	/**
 * @description Return Value:
*/
	usesLocalShaderSpace():Boolean {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when a brick is added to this brick material.
 * @signature "brickAdded(DzShaderBrick*)"
 * @event
*/
	brickAdded(brick:shaderbrick_dz):void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when a brick is removed from this brick material.
 * @signature "brickRemoved(DzShaderBrick*)"
 * @event
*/
	brickRemoved(brick:shaderbrick_dz):void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description TODO: Add Description
 * @signature generateFilesFinished()
 * @event
*/
	generateFilesFinished():void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description TODO: Add Description
 * @signature generateFilesStarted()
 * @event
*/
	generateFilesStarted():void {
	
	}

}
/**
 * @classdesc DzButton implements an abstract button base. Subclasses specify how to respond to user interaction, and how to present the button to the user. If you want to create a button, create a DzPushButton.



DzPushButton provides both push and toggle buttons. The DzRadioButton and DzCheckBox classes provide only toggle buttons.



The difference between down and on is, when a user clicks a [toggle] button to toggle it on, the button is first pressed and then released into the On state (on is true, down is false). When the user clicks it again (to toggle it off), the button is first pressed and then released to the Off state (on and down are false).
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/button_dz}*/
class DzButton extends DzWidget {
	/**
 * @description Whether autoRepeat is enabled. false by default. If enabled, the clicked() signal is emitted at regular intervals if down is true. This property has no effect on toggle buttons.
	*/
	autoRepeat:Boolean;
	/**
 * @description The initial delay, in milliseconds, before auto-repetition begins
	*/
	autoRepeatDelay:Number;
	/**
 * @description The length of the auto-repetition interval, in milliseconds
	*/
	autoRepeatInterval:Number;
	/**
 * @description Whether or not the button is checkable. false by default.
	*/
	checkable:Boolean;
	/**
 * @description Whether or not the button is checked. Only applies to checkable buttons.
	*/
	checked:Boolean;
	/**
 * @description Whether the button is pressed. true if the button is pressed down. false by default. The signals pressed() and clicked() are not emitted when this property set to true.
	*/
	down:Boolean;
	/**
 * @description The Pixmap shown on the button. If the Pixmap is monochrome (e.g. its depth is 1) and it does not have a mask, the Pixmap will be its own mask. This allows transparent bitmaps to be drawn, which are important for toggle buttons. 0 if no pixmap is set.
	*/
	pixmap:Pixmap;
	/**
 * @description The text displayed on the button. undefined by default. An ampersand (&) in the String automatically creates an accelerator for it using the character that follows the ampersand, as the accelerator key. Any previous accelerator will be overwritten, or cleared if no accelerator is defined by the text.
	*/
	text:String;
	/**
 * @description Whether the button is a toggle (Read Only). false by default.
	*/
	toggleButton:Boolean;
	/**
 * @description Toggles the state of a toggle button.
*/
	toggle():void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when the button is pressed and then released.
 * @signature "clicked()"
 * @event
*/
	clicked():void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when the button is pressed.
 * @signature "pressed()"
 * @event
*/
	pressed():void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when the button is released.
 * @signature "released()"
 * @event
*/
	released():void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when toggleState on this button has changed.
 * @signature "stateChanged(int)"
 * @event
*/
	stateChanged(state:Number):void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when the button is toggled.
 * @signature "toggled(bool)"
 * @event
*/
	toggled(onOff:Boolean):void {
	
	}

}
/**
 * @classdesc TODO:
Add detailed description.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/buttongroup_dz}*/
class DzButtonGroup extends DzGroupBox {
	/**
 * @description The number of buttons in the group (Read Only)
	*/
	count:Number;
	/**
 * @description Whether the group is exclusive for all toggle buttons (the default is false)
	*/
	exclusive:Boolean;
	/**
 * @description Whether the group is exclusive for radio buttons (the default is true)
	*/
	radioButtonExclusive:Boolean;
	/**
 * @description The checked button in an exclusive group
	*/
	selected:Number;
	/**
 * @description Creates a button group as a child of the given parent widget
 * @constructor
*/
	constructor(parent:DzWidget) {
	
	}
	/**
 * @description Add the button to the group. This is only necessary if the button was not created as a child of the group.
*/
	addButton(button:DzButton):DzButton {
	
	}
	/**
 * @description Add the button to the group. This is only necessary if the button was not created as a child of the group.
*/
	addButton(button:DzButton, id:Number):DzButton {
	
	}
	/**
 * @description TODO:
Add description.
*/
	button(id:Number):DzButton {
	
	}
	/**
 * @description TODO:
Add description.
*/
	buttons():Array {
	
	}
	/**
 * @description TODO:
Add description.
*/
	checkedButton():DzButton {
	
	}
	/**
 * @description Return Value:
*/
	id(button:DzButton):Number {
	
	}
	/**
 * @description Add the button to the group. This is only necessary if the button was not created as a child of the group.
*/
	insert(button:DzButton, id:Number):Number {
	
	}
	/**
 * @description Remove button from the group
*/
	removeButton(button:DzButton):DzButton {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when a button in the group is pressed and released
 * @signature "clicked(int)"
 * @event
*/
	clicked(id:Number):void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when a button in the group is pressed
 * @signature "pressed(int)"
 * @event
*/
	pressed(id:Number):void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when a button in the group is released
 * @signature "released(int)"
 * @event
*/
	released(id:Number):void {
	
	}

}
/**
 * @classdesc This is the DAZScript counterpart to the QByteArray type used in the DAZ Studio SDK.



Attention:


 Inheritance will change to Object in a pending update.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/bytearray}*/
class ByteArray extends QObject {
	/**
 * @description The number of bytes in the array
	*/
	length:Number;
	/**
 * @description The number of bytes in the array
	*/
	size:Number;
	/**
 * @description Default Constructor.
 * @constructor
*/
	constructor() {
	
	}
	/**
 * @description Copy Constructor.
 * @constructor
*/
	constructor(byteArray:ByteArray) {
	
	}
	/**
 * @description Creates a byte array containing the ascii representation of the string.
 * @constructor
*/
	constructor(str:String) {
	
	}
	/**
 * @description Parameter(s):
*/
	byteAt(index:Number):Number {
	
	}
	/**
 * @description Parameter(s):
*/
	charAt(index:Number):String {
	
	}
	/**
 * @description Return Value:
*/
	convertToString():String {
	
	}
	/**
 * @description Return Value:
*/
	convertToStringFromUtf16():String {
	
	}
	/**
 * @description Return Value:
*/
	convertToStringFromUtf8():String {
	
	}
	/**
 * @description Return Value:
*/
	fromBase64(base64:ByteArray):void {
	
	}
	/**
 * @description Return Value:
*/
	fromHex(hexEncoded:ByteArray):void {
	
	}
	/**
 * @description Return Value:
*/
	fromPercentEncoding(pctEncoded:ByteArray):void {
	
	}
	/**
 * @description Return Value:
*/
	toBase64():void {
	
	}
	/**
 * @description Return Value:
*/
	toHex():void {
	
	}
	/**
 * @description Parameter(s):
*/
	toPercentEncoding(exclude:ByteArray, include:ByteArray):void {
	
	}

}
/**
 * @classdesc Encapsulates an object that is used to execute a script when a signal that it is connected to is triggered.



See Also:


 DzCallBackMgr.createCallBack(), DzCallBackMgr.getCallBack()
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/callback_dz}*/
class DzCallBack extends QObject {
	/**
 * @description Adds the callback to the given callback group.
*/
	addToGroup(group:String):String {
	
	}
	/**
 * @description Disconnects from the signal that triggers this callback.
*/
	clearConnection():void {
	
	}
	/**
 * @description Return Value:
*/
	getArg(i:Number):Object {
	
	}
	/**
 * @description Return Value:
*/
	getArgCount():Number {
	
	}
	/**
 * @description Return Value:
*/
	getBlockedDuringSceneLoad():Boolean {
	
	}
	/**
 * @description Return Value:
*/
	getDeleteAfterExecution():Boolean {
	
	}
	/**
 * @description Return Value:
*/
	getDynamicProperty(name:String):String {
	
	}
	/**
 * @description Return Value:
*/
	getGroups():Array {
	
	}
	/**
 * @description Return Value:
*/
	getProcessAsEvent():Boolean {
	
	}
	/**
 * @description Return Value:
*/
	getScript():String {
	
	}
	/**
 * @description Return Value:
*/
	getSender():QObject {
	
	}
	/**
 * @description Return Value:
*/
	isEvaluated():Boolean {
	
	}
	/**
 * @description Removes this callback from the group callback group.
*/
	removeFromGroup(group:String):String {
	
	}
	/**
 * @description Parameter(s):
*/
	setBlockedDuringSceneLoad(onOff:Boolean):Boolean {
	
	}
	/**
 * @description Makes the connection that triggers this callback.
*/
	setConnection(sender:QObject, signal:String, garbageCollect:Boolean):Boolean {
	
	}
	/**
 * @description Makes the connection that triggers this callback.
*/
	setConnection(sender:QObject, signal:String):Boolean {
	
	}
	/**
 * @description Makes the connection that triggers this callback.
*/
	setConnections(sender:QObject, signalList:Array, garbageCollect:Boolean):Number {
	
	}
	/**
 * @description Parameter(s):
*/
	setDeleteAfterExecution(onOff:Boolean):Boolean {
	
	}
	/**
 * @description Set QObject dynamic property on this callback
*/
	setDynamicProperty(name:String, value:QVariant):String {
	
	}
	/**
 * @description Parameter(s):
*/
	setProcessAsEvent(onOff:Boolean):Boolean {
	
	}
	/**
 * @description Sets the script that will be executed by this callback.
*/
	setScript(script:String, evaluate:Boolean):String {
	
	}

}
/**
 * @classdesc This class manages objects that are used to execute a scripts when a signal that the object is connected to is emitted. There is only one instance of this manager in an application. This instance is created and owned by DzApp. Don't create an instance of this class, but rather request a pointer to it from DzApp via DzApp.getCallBackMgr().



Example:



Dynamically load a script.

var sScript = "support/CallBackExample/HelloWorld.dsa";
var oCallBackMgr = App.getCallBackMgr();
var oCallBack = oCallBackMgr.createCallBack( "Hello World", sScript, false );
 
oCallBack.setConnection( Scene, "nodeAdded(DzNode*)" );


Example:



Embed a script.

var sPath = String( "%1/support/CallBackExample/HelloWorld.dsa" ).arg( App.getScriptsPath() );
var oScript = new DzScript;
oScript.loadFromFile( sPath );
var sScript = oScript.getCode();
 
var oCallBackMgr = App.getCallBackMgr();
var oCallBack = oCallBackMgr.createCallBack( "Hello World", sScript, true );
 
oCallBack.setConnection( Scene, "nodeAdded(DzNode*)" );


Example:



CallBack script (./support/CallBackExample/HelloWorld.dsa).



"CallBack" is a global transient variable referring to the DzCallBack that executes the script.

var oSender = CallBack.getSender();
var sMessage = String( "Sender Class: %1\n" +
		"Sender Name: %2\n\n" +
		"CallBack Args: %3" )
		.arg( oSender.className() )
		.arg( oSender.name )
		.arg( CallBack.getArgCount() );
 
var nArgs = CallBack.getArgCount();
if( nArgs > 0 ){
	for( var i = 0; i < nArgs; i += 1 ){
		sMessage += String( "\nArg %1 : %2" ).arg( i ).arg( CallBack.getArg( i ) );
	}
}
 
MessageBox.information( sMessage, CallBack.className(), "&OK" );


See Also:


 DzApp.getCallBackMgr()
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/callbackmgr_dz}*/
class DzCallBackMgr extends QObject {
	/**
 * @description Deletes all callbacks.
*/
	clearAllCallBacks():void {
	
	}
	/**
 * @description Creates a DzCallBack object.
*/
	createCallBack(name:String, script:String, evaluate:Boolean):DzCallBack {
	
	}
	/**
 * @description Creates a DzCallBack object.
*/
	createCallBack(name:String):DzCallBack {
	
	}
	/**
 * @description Deletes the callback at the given index.
*/
	deleteCallBack(index:Number):Number {
	
	}
	/**
 * @description Deletes all callbacks with the given name.
*/
	deleteCallBack(name:String):String {
	
	}
	/**
 * @description Deletes the specified callback.
*/
	deleteCallBack(callBack:DzCallBack):DzCallBack {
	
	}
	/**
 * @description Deletes all callbacks in a given group.
*/
	deleteCallBackGroup(name:String):String {
	
	}
	/**
 * @description Return Value:
*/
	getCallBack(index:Number):DzCallBack {
	
	}
	/**
 * @description Return Value:
*/
	getCallBack(name:String):DzCallBack {
	
	}
	/**
 * @description Return Value:
*/
	getCallBackIndex(name:String):Number {
	
	}
	/**
 * @description Return Value:
*/
	getCallBackList():Array {
	
	}
	/**
 * @description Return Value:
*/
	getGroup(name:String):Array {
	
	}
	/**
 * @description Return Value:
*/
	getNumCallBacks():Number {
	
	}
	/**
 * @description Return Value:
*/
	getSignalSignature(obj:QObject, signalName:String):Array {
	
	}

}
/**
 * @classdesc TODO:
Add detailed description.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/camera_dz}*/
class DzCamera extends DzNode {
	/**
 * @description The aspect height of the camera.
	*/
	aspectHeight:Number;
	/**
 * @description The aspect ratio of the camera (w / h).
	*/
	aspectRatio:Number;
	/**
 * @description The aspect width of the camera.
	*/
	aspectWidth:Number;
	/**
 * @description The distance of the far clipping plane from the camera. (Read Only)
	*/
	farClippingPlane:Number;
	/**
 * @description The focal distance of the camera.
	*/
	focalDistance:Number;
	/**
 * @description The focal length of the camera.
	*/
	focalLength:Number;
	/**
 * @description The width of the frame (film/sensor) of the camera (in mm). (Read Only)
	*/
	frameWidth:Number;
	/**
 * @description The mode of the headlight.
	*/
	headlightMode:HeadlightMode;
	/**
 * @description The relative offset of the headlight from the camera.
	*/
	headlightOffset:DzVec3;
	/**
 * @description The distance of the near clipping plane from the camera. (Read Only)
	*/
	nearClippingPlane:Number;
	/**
 * @description The pixels height of the camera.
	*/
	pixelsHeight:Number;
	/**
 * @description The pixels width of the camera.
	*/
	pixelsWidth:Number;
	/**
 * @description Whether or not the proportions of the camera is constrained.
	*/
	proportionsConstrained:Boolean;
	/**
 * @description The type of the camera. (Read Only)
	*/
	type:Number;
	/**
 * @description Whether or not to use the local dimensions of the camera.
	*/
	useLocalDimensions:Boolean;
	/**
 * @description ENUMERATOR: The width in pixels. Since: 4.6.4.70
*/
	
	static LOCAL_PIXEL_WIDTH;
	/**
 * @description ENUMERATOR: The height in pixels. Since: 4.6.4.70
*/
	
	static LOCAL_PIXEL_HEIGHT;
	/**
 * @description ENUMERATOR: The relative width of the aspect frame. Since: 4.6.4.70
*/
	
	static LOCAL_ASPECT_WIDTH;
	/**
 * @description ENUMERATOR: The relative height of the aspect frame. Since: 4.6.4.70
*/
	
	static LOCAL_ASPECT_HEIGHT;
	/**
 * @description ENUMERATOR: Orthogonal camera positioned to view the front of a figure
*/
	
	static FRONT_CAMERA;
	/**
 * @description ENUMERATOR: Orthogonal camera positioned to view the back of a figure
*/
	
	static BACK_CAMERA;
	/**
 * @description ENUMERATOR: Orthogonal camera positioned to view the left side of a figure.
*/
	
	static LEFT_CAMERA;
	/**
 * @description ENUMERATOR: Orthogonal camera positioned to view the right side of a figure.
*/
	
	static RIGHT_CAMERA;
	/**
 * @description ENUMERATOR: Orthogonal camera positioned to view a figure from the top.
*/
	
	static TOP_CAMERA;
	/**
 * @description ENUMERATOR: Orthogonal camera positioned to view a figure from the bottom.
*/
	
	static BOTTOM_CAMERA;
	/**
 * @description ENUMERATOR: Default perspective camera - defaults to a front view of a figure.
*/
	
	static PERSPECTIVE_CAMERA;
	/**
 * @description ENUMERATOR: General Orthogonal camera.
*/
	
	static ORTHO_CAMERA;
	/**
 * @description ENUMERATOR: General Perspective camera.
*/
	
	static GENERAL_CAMERA;
	/**
 * @description ENUMERATOR: The headlight is automatically on or off depending on whether or not lights are in the scene. Since: 4.7.1.94
*/
	
	static hmAuto;
	/**
 * @description ENUMERATOR: The headlight is on. Since: 4.7.1.94
*/
	
	static hmOn;
	/**
 * @description ENUMERATOR: The headlight is off. Since: 4.7.1.94
*/
	
	static hmOff;
	/**
 * @description Rotates the camera and adjusts its focal distance so that its focal point is at the given point.
*/
	aimAt(pos:DzVec3):DzVec3 {
	
	}
	/**
 * @description Translates the camera so that its view frames the given box, and sets the camera's focal point to the center of the box, given the aspect ratio of the current view (w / h)
*/
	frame(box:DzBox3, aspect:Number):DzBox3 {
	
	}
	/**
 * @description Return Value:
*/
	getFieldOfView():Number {
	
	}
	/**
 * @description Return Value:
*/
	getFocalPoint():DzVec3 {
	
	}
	/**
 * @description Return Value:
*/
	getHeadlight():DzLight {
	
	}
	/**
 * @description Return Value:
*/
	isViewCamera():Boolean {
	
	}
	/**
 * @description Resets the camera viewing parameters to defaults.
*/
	reset():void {
	
	}
	/**
 * @description TODO:
Add description.
*/
	shouldDoHeadLight(hasLights:Boolean, isRender:Boolean):Boolean {
	
	}
	/**
 * @description Return Value:
*/
	shouldSortOnLoad():Boolean {
	
	}
	/**
 * @description TODO:
Add description.
*/
	updateDimensions(anchor:CameraDimension):CameraDimension {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when the aspect height dimension of the camera changes.
 * @signature "aspectHeightChanged(float)"
 * @event
*/
	aspectHeightChanged(height:Number):void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when the camera's aspect ratio changes.
 * @signature "aspectRatioChanged()"
 * @event
*/
	aspectRatioChanged():void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when the aspect width dimension of the camera changes.
 * @signature "aspectWidthChanged(float)"
 * @event
*/
	aspectWidthChanged(width:Number):void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when any of the local dimensions of the camera change.
 * @signature "dimensionsChanged()"
 * @event
*/
	dimensionsChanged():void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when the focal distance channel changes.
 * @signature "focalDistanceChanged(const DzTimeRange&)"
 * @event
*/
	focalDistanceChanged(range:DzTimeRange):void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when the focal length channel changes.
 * @signature "focalLengthChanged(const DzTimeRange&)"
 * @event
*/
	focalLengthChanged(range:DzTimeRange):void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when the frame width of the camera changes.
 * @signature "frameWidthChanged(float)"
 * @event
*/
	frameWidthChanged(size:Number):void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when headlight mode of the camera changes.
 * @signature "headlightModeChanged()"
 * @event
*/
	headlightModeChanged():void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when headlight offset of the camera changes.
 * @signature "headlightOffsetChanged()"
 * @event
*/
	headlightOffsetChanged():void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when the local pixel dimensions of the camera change.
 * @signature "pixelDimensionsChanged()"
 * @event
*/
	pixelDimensionsChanged():void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when the pixel height dimension of the camera changes.
 * @signature "pixelsHeightChanged(int)"
 * @event
*/
	pixelsHeightChanged(height:Number):void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when the pixel width dimension of the camera changes.
 * @signature "pixelsWidthChanged(int)"
 * @event
*/
	pixelsWidthChanged(width:Number):void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when projection of the camera changes and its view must be redrawn.
 * @signature "projectionChanged()"
 * @event
*/
	projectionChanged():void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when the option for whether or not to constrain proportions of the local dimensions of the camera changes.
 * @signature "proportionsConstrainedChanged(bool)"
 * @event
*/
	proportionsConstrainedChanged(yesNo:Boolean):void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when the option for whether or not to use the local dimensions of the camera changes.
 * @signature "aspectRatioChanged(bool)"
 * @event
*/
	useLocalDimensionsChanged(yesNo:Boolean):void {
	
	}

}
/**
 * @classdesc An asset save filter for saving a Camera(s) Preset in the DSON format.



See Also:


 Sample: Save a Camera(s) Preset
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/cameraassetfilter_dz}*/
class DzCameraAssetFilter extends DzAssetFileOutFilter {
	/**
 * @description TODO:
Add description.
 * @constructor
*/
	constructor() {
	
	}

}
/**
 * @classdesc The "Category" container type serves to provide a means of working with assets that share qualities or characteristics without moving the actual files on disk; moving or renaming files on disk breaks the correlation between the file and the asset that represents it.



See Also:


 DzAssetMgr.getCategories()

 DzAsset
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/categoryassetcontainer_dz}*/
class DzCategoryAssetContainer extends DzAbstractAssetContainer, DzRefCountedItem {
	/**
 * @description Holds whether this category is owned by a vendor or by the user. (Read Only)
	*/
	isVendor:Boolean;
	/**
 * @description Parameter(s):
*/
	getAssetsInCategory(userFacing:Boolean, installed:Boolean):Array {
	
	}
	/**
 * @description Return Value:
*/
	getPath():String {
	
	}
	/**
 * @description Updates the container using the data that is currently stored in the database.
*/
	updateRow():void {
	
	}

}
/**
 * @classdesc An asset save filter for saving a Character Preset in DSON format.



See Also:


 Save a Character Preset
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/characterassetfilter_dz}*/
class DzCharacterAssetFilter extends DzAssetFileOutFilter {
	/**
 * @description TODO:
Add description.
 * @constructor
*/
	constructor() {
	
	}

}
/**
 * @classdesc DzRadioButton and DzCheckBox are both option buttons (e.g. they can be checked or unchecked). They differ in how the available choices are restricted. A DzCheckBox is used to define several choices that can all co-exist at the same time (e.g. "many of many"). While a DzRadioButton is used to provide several choices, where only one can be ultimately chosen (e.g. "one of many").



Example:

// Create a new dialog
var wDlg = new DzDialog;
wDlg.caption = "DzCheckBox Example";
 
// Create a layout for the dialog
var wLyt = new DzVBoxLayout( wDlg );
wLyt.autoAdd = true;
 
// Create a group box for the options
var wOptGB = new DzVGroupBox( wDlg );
wOptGB.columns = 1;
 
// Create the options
var wOpt1Btn = new DzCheckBox( wOptGB );
wOpt1Btn.text = "Option 1";
wOpt1Btn.checked = true;
var wOpt2Btn = new DzCheckBox( wOptGB );
wOpt2Btn.text = "Option 2";
var wOpt3Btn = new DzCheckBox( wOptGB );
wOpt3Btn.text = "Option 3";
wOpt3Btn.checked = true;
 
// Launch the dialog
wDlg.exec();
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/checkbox_dz}*/
class DzCheckBox extends DzButton {
	/**
 * @description Whether the button is checked. true if the button is checked. false by default.
	*/
	checked:Boolean;
	/**
 * @description Whether the the checkbox is a tri-state checkbox. The default is two-state (e.g. tri-state is false).
	*/
	tristate:Boolean;
	/**
 * @description Creates a check box as a child of the given parent widget
 * @constructor
*/
	constructor(parent:DzWidget) {
	
	}

}
/**
 * @classdesc This class is not a widget, but a helper class for working with DzListView. Each DzCheckListItem represents a single item in a list view - add items to a list view by creating a new DzCheckListItem that is a child of the list view, or a child of another list view item in the list view.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/checklistitem_dz}*/
class DzCheckListItem extends DzListViewItem {
	/**
 * @description Holds the height of the item.
	*/
	height:Number;
	/**
 * @description Holds whether the item toggled on.
	*/
	on:Boolean;
	/**
 * @description Holds the state of the item.
	*/
	state:ToggleState;
	/**
 * @description Holds whether the item is tristate.
	*/
	triState:Boolean;
	/**
 * @description Holds the type of the item. (Read Only)
	*/
	type:Type;
	/**
 * @description ENUMERATOR: The item is off
*/
	
	static Off;
	/**
 * @description ENUMERATOR: The item has not changed - i.e. it is in the third state and the user has not clicked it.
*/
	
	static NoChange;
	/**
 * @description ENUMERATOR: The item is on
*/
	
	static On;
	/**
 * @description ENUMERATOR: Radio Button item. Must be the child of a RadioButtonController
*/
	
	static RadioButton;
	/**
 * @description ENUMERATOR: Check Box item.
*/
	
	static CheckBox;
	/**
 * @description ENUMERATOR: Radio Button parent item.
*/
	
	static RadioButtonController;
	/**
 * @description ENUMERATOR: Check Box parent item.
*/
	
	static CheckBoxController;
	/**
 * @description Creates a checklist item at the root level of the given list view
 * @constructor
*/
	constructor(parent:DzListView, type=RadioButtonController:Type, id=-1:Number) {
	
	}
	/**
 * @description Creates a checklist item as a child of the given list item
 * @constructor
*/
	constructor(parent:DzCheckListItem, type=RadioButtonController:Type, id=-1:Number) {
	
	}
	/**
 * @description Creates a checklist item as a child of the given list item
 * @constructor
*/
	constructor(parent:DzListViewItem, type=RadioButtonController:Type, id=-1:Number) {
	
	}

}
/**
 * @classdesc TODO:
Add detailed description.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/circle3_dz}*/
class DzCircle3 extends Object {
	/**
 * @description Holds the center of the circle in three dimensional space.
	*/
	center:DzVec3;
	/**
 * @description Holds the normal of the plane that the circle lies on.
	*/
	normal:DzVec3;
	/**
 * @description Holds the radius of the circle.
	*/
	radius:Number;
	/**
 * @description Default Constructor.
 * @constructor
*/
	constructor() {
	
	}
	/**
 * @description Copy Constructor.
 * @constructor
*/
	constructor(circle:DzCircle3) {
	
	}
	/**
 * @description Parameter(s):
 * @constructor
*/
	constructor(center:DzVec3, normal:DzVec3, radius:Number) {
	
	}

}
/**
 * @classdesc This is the DAZScript counterpart to the QColor type used in the DAZ Studio SDK.



Attention:


 Inheritance will change to Object in a pending update.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/color}*/
class Color extends QObject {
	/**
 * @description The alpha component of the color. In the range 0 to 255.
	*/
	alpha:Number;
	/**
 * @description The blue component of the color. In the range 0 to 255.
	*/
	blue:Number;
	/**
 * @description The green component of the color. In the range 0 to 255.
	*/
	green:Number;
	/**
 * @description The hue of the color as defined in the HSV color model.
	*/
	hue:Number;
	/**
 * @description The name of the color if it matches a named color, otherwise an empty string.
	*/
	name:String;
	/**
 * @description The red component of the color. In the range 0 to 255.
	*/
	red:Number;
	/**
 * @description The color code of the color.
	*/
	rgb:Number;
	/**
 * @description The saturation of the color as defined in the HSV color model.
	*/
	saturation:Number;
	/**
 * @description The value of the color as defined in the HSV color model.
	*/
	value:Number;
	/**
 * @description Default Constructor.
 * @constructor
*/
	constructor() {
	
	}
	/**
 * @description Sets the RGB value from colorName, which may be in one of these formats (each of R, G and B is a single hex digit):
 * @constructor
*/
	constructor(colorName:String) {
	
	}
	/**
 * @description Component-wise constructor. Each value (i.e., r, g, b, a ) should be in the [0, 255] range.
 * @constructor
*/
	constructor(r:Number, g:Number, b:Number, a=255:Number) {
	
	}
	/**
 * @description Copy Constructor.
 * @constructor
*/
	constructor(color:Color) {
	
	}
	/**
 * @description Return Value:
*/
	dark():void {
	
	}
	/**
 * @description Return Value:
*/
	isValid():Boolean {
	
	}
	/**
 * @description Return Value:
*/
	light():void {
	
	}
	/**
 * @description Sets the red, green, blue and alpha values of this color to r, g, b and a, respectively.
*/
	setRgb(r:Number, g:Number, b:Number, a:Number):Number {
	
	}
	/**
 * @description Sets the red, green and blue values of this color to r, g and b, respectively.
*/
	setRgb(r:Number, g:Number, b:Number):Number {
	
	}
	/**
 * @description Sets the color code of the color. The value is a bitmask on the form 0xRRGGBB, where RR=red, GG=green, and BB=blue, all as hexadecimal digits.
*/
	setRgb(colorCode:Number):Number {
	
	}

}
/**
 * @classdesc The DzColorDialog class is available in DAZScript via Global.ColorDialog.



It provides a function to display an OS native color picker to the user - simply call the function as shown in the following example:



Example - Have the user select a color : 

var color = ColorDialog.getColor();


Other functions are provided for getting and setting the pre-set colors listed in the picker - see the rest of the documentation for details.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/colordialog_dz}*/
class DzColorDialog extends QObject {
	/**
 * @description Return Value:
*/
	customColor(i:Number):Color {
	
	}
	/**
 * @description Return Value:
*/
	customCount():Number {
	
	}
	/**
 * @description Shows a color picker dialog to the user.
*/
	getColor(initial:Color):Color {
	
	}
	/**
 * @description Set the i'th custom color in the color picker.
*/
	setCustomColor(i:Number, c:Color):Number {
	
	}
	/**
 * @description Set the i'th standard color in the color picker.
*/
	setStandardColor(i:Number, c:Color):Number {
	
	}

}
/**
 * @classdesc This class provides an animatable color property that is stored and can be accessed as an integer property. The integer value represents a color as a 32 bit rgba value with each byte representing a component with the range [0, 255].
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/colorproperty_dz}*/
class DzColorProperty extends DzIntProperty {
	/**
 * @description ENUMERATOR: Hue, Saturation, and Value.
*/
	
	static HSV;
	/**
 * @description ENUMERATOR: Hue, Saturation, and Lightness (or Luminosity).
*/
	
	static HSL;
	/**
 * @description ENUMERATOR: Red, Green, Blue.
*/
	
	static RGB;
	/**
 * @description Default Constructor. Creates a non-animatable, non-user property.
 * @constructor
*/
	constructor() {
	
	}
	/**
 * @description Parameter(s):
 * @constructor
*/
	constructor(name:String, canAnimate:Boolean, isUserProperty:Boolean, initVal:Color) {
	
	}
	/**
 * @description Parameter(s):
 * @constructor
*/
	constructor(name:String, canAnimate:Boolean, isUserProperty:Boolean) {
	
	}
	/**
 * @description Converts a string to an enumerated animation blend mode value.
*/
	static animationBlendModeFromStr(str:String):AnimationBlendMode {
	
	}
	/**
 * @description Converts an enumerated animation blend mode value to a string.
*/
	static animationBlendModeToStr(type:AnimationBlendMode):String {
	
	}
	/**
 * @description Return Value:
*/
	getAnimationBlendMode():AnimationBlendMode {
	
	}
	/**
 * @description Return Value:
*/
	getColorValue():Color {
	
	}
	/**
 * @description Parameter(s):
*/
	getColorValue(tm:DzTime):Color {
	
	}
	/**
 * @description Return Value:
*/
	getDefaultColorValue():Color {
	
	}
	/**
 * @description Parameter(s):
*/
	getKeyColorValue(i:Number):Color {
	
	}
	/**
 * @description Parameter(s):
*/
	getRawColorValue(tm:DzTime):Color {
	
	}
	/**
 * @description Return Value:
*/
	getRawColorValue():Color {
	
	}
	/**
 * @description Sets the animation blend mode for the property.
*/
	setAnimationBlendMode(mode:AnimationBlendMode):AnimationBlendMode {
	
	}
	/**
 * @description Sets the color value for this property at the given time; or the default value if this property is not animatable.
*/
	setColorValue(tm:DzTime, val:Color):DzTime {
	
	}
	/**
 * @description Sets the color value for this property at the current time; or the default value if this property is not animatable.
*/
	setColorValue(val:Color):Color {
	
	}
	/**
 * @description Sets the default color value for this property.
*/
	setDefaultColorValue(val:Color):Color {
	
	}
	/**
 * @description Sets the color value of this property for the given key.
*/
	setKeyColorValue(i:Number, val:Color):Number {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when the animation blend mode for this property has changed.
 * @signature "animationBlendModeChanged()"
 * @event
*/
	animationBlendModeChanged():void {
	
	}

}
/**
 * @classdesc A DzColorWgt provides a control for displaying/selecting a color.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/colorwgt_dz}*/
class DzColorWgt extends DzWidget {
	/**
 * @description If true, the widget is considered to have an 'indeterminate' or 'Multiple' value. False by default.
	*/
	indeterminate:Boolean;
	/**
 * @description Holds the current value of the widget.
	*/
	value:Color;
	/**
 * @description Creates a color widget as a child of the given parent widget.
 * @constructor
*/
	constructor(parent:DzWidget) {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when the color is changed.
 * @signature "colorChanged(const QColor&)"
 * @event
*/
	colorChanged(color:Color):void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when an editing operation on the slider ends - e.g. the user finishes spinning a color field.
 * @signature "editEnd()"
 * @event
*/
	editEnd():void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when an editing operation on the widget begins - e.g. the user starts spinning a color field.
 * @signature "editStart()"
 * @event
*/
	editStart():void {
	
	}

}
/**
 * @classdesc DzComboBox provides a means of presenting a list of options to the user in a way that takes up the minimum amount of screen space.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/combobox_dz}*/
class DzComboBox extends DzWidget {
	/**
 * @description Holds the number of items in the combobox. (Read Only)
	*/
	count:Number;
	/**
 * @description Holds the index of the currently selected item in the combobox.
	*/
	currentItem:Number;
	/**
 * @description Holds the text of the currently selected item in the combobox.
	*/
	currentText:String;
	/**
 * @description Holds the policy used to determine where user-inserted items should appear in the combobox.
	*/
	insertPolicy:insertPolicy;
	/**
 * @description Holds the maximum number of items allowed on screen; 10 by default.
	*/
	maxVisibleItems:Number;
	/**
 * @description Holds the minimum number of characters that should fit in the combobox.
	*/
	minimumContentsLength:Number;
	/**
 * @description Holds the policy describing how the size of the combobox changes when the content changes.
	*/
	sizeAdjustPolicy:sizeAdjustPolicy;
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static NoInsert;
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static InsertAtTop;
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static InsertAtCurrent;
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static InsertAtBottom;
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static InsertAfterCurrent;
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static InsertBeforeCurrent;
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static InsertAlphabetically;
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static AdjustToContents;
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static AdjustToContentsOnFirstShow;
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static AdjustToMinimumContentsLength;
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static AdjustToMinimumContentsLengthWithIcon;
	/**
 * @description Creates a combobox as a child of the given parent widget.
 * @constructor
*/
	constructor(parent:DzWidget) {
	
	}
	/**
 * @description Adds text to the list of items in the combobox.
*/
	addItem(text:String, userData:String):String {
	
	}
	/**
 * @description Adds each of the strings in texts to the combobox
*/
	addItems(texts:Array):Array {
	
	}
	/**
 * @description Removes all items from the combobox.
*/
	clear():void {
	
	}
	/**
 * @description Return Value:
*/
	findData(data:String):Number {
	
	}
	/**
 * @description Return Value:
*/
	findText(text:String):Number {
	
	}
	/**
 * @description Inserts the text and userData into the combobox at index. If index is equal to or higher than the total number of items, the new item is appended to the list of existing items. If index is zero or negative, the new item is prepended to the list of existing items.
*/
	insertItem(index:Number, text:String, userData:String):Number {
	
	}
	/**
 * @description Inserts the strings in list into the combobox as separate items, starting at index.
*/
	insertItems(index:Number, list:Array):Number {
	
	}
	/**
 * @description Inserts a separator into the combobox at index.
*/
	insertSeparator(index:Number):Number {
	
	}
	/**
 * @description Return Value:
*/
	itemData(index:Number):String {
	
	}
	/**
 * @description Return Value:
*/
	itemText(index:Number):String {
	
	}
	/**
 * @description Removes the item at index from the list of items.
*/
	removeItem(index:Number):Number {
	
	}
	/**
 * @description Sets the data for the item at index.
*/
	setItemData(index:Number, value:String):Number {
	
	}
	/**
 * @description Sets the text for the item at index.
*/
	setItemText(index:Number, text:String):Number {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when an item is selected, passes the index of the item that was activated.
 * @signature "activated(int)"
 * @event
*/
	activated(index:Number):void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when an item is selected, passes the text of the item that was activated.
 * @signature "activated(const QString&)"
 * @event
*/
	activated(text:String):void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when the current index changes, passes the text of the item that changed.
 * @signature "currentIndexChanged(const QString&)"
 * @event
*/
	currentIndexChanged(text:String):void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when the current index changes, passes the index of the item that changed.
 * @signature "currentIndexChanged(int)"
 * @event
*/
	currentIndexChanged(index:Number):void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when the highlighted item changes, passes the text of the item that is highlighted.
 * @signature "highlighted(const QString&)"
 * @event
*/
	highlighted(text:String):void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when the highlighted item changes, passes the index of the item that is highlighted.
 * @signature "highlighted(int)"
 * @event
*/
	highlighted(index:Number):void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when the text of the box changes, passes the new text of the box.
 * @signature "textChanged(const QString&)"
 * @event
*/
	textChanged(text:String):void {
	
	}

}
/**
 * @classdesc A DzComboEdit provides a compound widget comprised of a line edit and a button that, when clicked, causes a menu to be displayed. Selecting one of the items in the popup menu causes the value of the editor to update with the text of the selected item by default. A separator can be created in a menu by using a single hyphen ("-") character. Sub-menus can be created by using two consecutive greater than ("»") characters as a delimiter between the entries of a given hierarchy.



Example:

var oNode = Scene.getPrimarySelection();
if( oNode ){
	if( oNode.inherits( "DzBone" ) ){
		oNode = oNode.getSkeleton();
	}
 
	var aNodes = oNode.getAllBones();
	aNodes.unshift( oNode );
 
	var oDlg = new DzBasicDialog();
	var sHelpTitle = qsTr("Select a Node");
	var sHelpBody = qsTr("This is a basic dialog for requesting user input.");
	oDlg.caption = sHelpTitle;
	oDlg.toolTip = sHelpBody;
	oDlg.whatsThis = String("<b>%1</b><br/><br/>%2").arg( sHelpTitle ).arg( sHelpBody );
 
	var sEmpty = qsTr("None");
 
	var oNodeCmbEdt = new DzComboEdit( oDlg );
	oNodeCmbEdt.text = sEmpty;
	oNodeCmbEdt.readOnly = true;
	oNodeCmbEdt.addItems( [sEmpty, "-"] );
	for( var i = 0; i < aNodes.length; i += 1 ){
			oNodeCmbEdt.addItem( aNodes[i].getLabel() );
	}
	sHelpTitle = qsTr("Node Selector");
	sHelpBody = qsTr("Click the arrow for options. Right click the field for additional options.");
	oNodeCmbEdt.toolTip = sHelpBody;
	oNodeCmbEdt.whatsThis = String("<b>%1</b><br/><br/>%2").arg( sHelpTitle ).arg( sHelpBody );
	oDlg.addWidget( oNodeCmbEdt );
 
	var oWidget = oDlg.getWidget();
	oWidget.objectName = "DzComboEditExampleDlg";
 
	var sizeHint = oWidget.minimumSizeHint;
	var nHeight = sizeHint.height;
 
	oDlg.setFixedHeight( nHeight );
 
	if( oDlg.exec() ){
		print( qsTr("Dialog accted.") );
		if( oNodeCmbEdt.text == sEmpty ){
			print( qsTr("None selected.") );
		} else {
			print( qsTr("Node selected:"), oNodeCmbEdt.text );
		}
	} else {
		print( qsTr("Dialog rejected.") );
	}
}
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/comboedit_dz}*/
class DzComboEdit extends DzWidget {
	/**
 * @description TODO:
Add description.
	*/
	placeholderText:String;
	/**
 * @description TODO:
Add description.
	*/
	readOnly:Boolean;
	/**
 * @description TODO:
Add description.
	*/
	text:String;
	/**
 * @description TODO:
Add description.
	*/
	usePathPopUp:Boolean;
	/**
 * @description Creates a combo edit as a child of the given parent widget.
 * @constructor
*/
	constructor(parent:DzWidget, updateOnSelect=true:Boolean) {
	
	}
	/**
 * @description TODO:
Add description.
*/
	addItem(item:String):String {
	
	}
	/**
 * @description TODO:
Add description.
*/
	addItems(items:Array):Array {
	
	}
	/**
 * @description TODO:
Add description.
*/
	clear():void {
	
	}
	/**
 * @description TODO:
Add description.
*/
	findItem(text:String):Number {
	
	}
	/**
 * @description TODO:
Add description.
*/
	insertItem(index:Number, item:String):Number {
	
	}
	/**
 * @description TODO:
Add description.
*/
	insertItems(index:Number, items:Array):Number {
	
	}
	/**
 * @description TODO:
Add description.
*/
	items():Array {
	
	}
	/**
 * @description TODO:
Add description.
*/
	removeItem(item:String):String {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description TODO: Add Description
 * @signature TODO: Add Description
 * @event
*/
	itemChanged(item:String):void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description TODO: Add Description
 * @signature TODO: Add Description
 * @event
*/
	textChanged(text:String):void {
	
	}

}
/**
 * @classdesc The "Compatibility Base" container type serves to provide a means of working with assets that are defined to be compatible with a particular Compatibility Base.



See Also:


 DzAssetMgr.getCompatibilityBases()
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/compatibilitybaseassetcontainer_dz}*/
class DzCompatibilityBaseAssetContainer extends DzAbstractAssetContainer, DzRefCountedItem {
	/**
 * @description Holds whether or not this compatibility base is a filter. (Read Only)
	*/
	isFilter:Boolean;
	/**
 * @description Holds whether this compatibility base is owned by a vendor or by the user. (Read Only)
	*/
	isVendor:Boolean;
	/**
 * @description Return Value:
*/
	getPath():String {
	
	}
	/**
 * @description Attempts to update the child containers of this container.
*/
	updateChildren():Boolean {
	
	}

}
/**
 * @classdesc Represents a file in the content library that can be loaded/imported. Also provides functionality for moving the file to a new location, renaming the file, and deleting the file from the library.



See Also:


 DzContentFolder
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/contentfile_dz}*/
class DzContentFile extends QObject, DzRefCountedItem {
	/**
 * @description Holds whether or not the file can be deleted. (Read Only)
	*/
	canDelete:Boolean;
	/**
 * @description Holds whether or not the file can be renamed. (Read Only)
	*/
	canRename:Boolean;
	/**
 * @description Holds whether or not a companion file is a script file. (Read Only)
	*/
	companionIsScript:Boolean;
	/**
 * @description Holds the path of the companion script for non-native files. (Read Only)
	*/
	companionPath:String;
	/**
 * @description Holds the full path of the file. (Read Only)
	*/
	fullPath:String;
	/**
 * @description Holds whether or not a non-native file has a native companion file. (Read Only)
	*/
	hasCompanion:Boolean;
	/**
 * @description Holds whether or not a non-native file has a companion script file. (Read Only)
	*/
	hasCompanionScript:Boolean;
	/**
 * @description Holds the icon for the file. (Read Only)
	*/
	icon:Pixmap;
	/**
 * @description Holds whether or not the file is a native content file . (Read Only)
	*/
	isNative:Boolean;
	/**
 * @description Holds whether or not the file is a script file . (Read Only)
	*/
	isScript:Boolean;
	/**
 * @description Holds the label of the file, as displayed to the user. (Read Only)
	*/
	label:String;
	/**
 * @description Holds the name of the file. (Read Only)
	*/
	name:String;
	/**
 * @description Holds the small icon for the file. (Read Only)
	*/
	smallIcon:Pixmap;
	/**
 * @description Removes this file from its content folder. The default implementation of this function deletes the content file and any associated thumbnail image from the disk, so use with care!
*/
	deleteFile():Boolean {
	
	}
	/**
 * @description Return Value:
*/
	getFolder():DzContentFolder {
	
	}
	/**
 * @description Return Value:
*/
	getNext():void {
	
	}
	/**
 * @description Force the file to reload its icon.
*/
	reloadIcon():void {
	
	}
	/**
 * @description Rename the file to the given name.
*/
	rename(newName:String):Boolean {
	
	}

}
/**
 * @classdesc Represents a folder in the content library that holds DzContentFile objects as well as other DzContentFolder objects.



See Also:


 DzContentMgr.getContentDirectory(), DzContentMgr.getImportDirectory(), DzContentMgr.getPoserDirectory(), DzContentMgr.findBaseDirectory()
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/contentfolder_dz}*/
class DzContentFolder extends DzBase, DzRefCountedItem {
	/**
 * @description Holds whether or not a sub folder can be added in this folder. (Read Only)
	*/
	canAddSubFolder:Boolean;
	/**
 * @description Holds whether or not this folder can be deleted. (Read Only)
	*/
	canDelete:Boolean;
	/**
 * @description Holds whether or not this folder can be renamed. (Read Only)
	*/
	canRename:Boolean;
	/**
 * @description Holds whether or not the files of this folder are loaded. (Read Only)
	*/
	filesAreLoaded:Boolean;
	/**
 * @description Holds the name of the folder on disk. (Read Only)
	*/
	folderName:String;
	/**
 * @description Holds whether or not the subfolders of this folder are loaded. (Read Only)
	*/
	foldersAreLoaded:Boolean;
	/**
 * @description Holds the type of this folder. (Read Only)
	*/
	folderType:FolderType;
	/**
 * @description Holds the full path of the folder on disk. (Read Only)
	*/
	fullPath:String;
	/**
 * @description Holds the icon of the folder. (Read Only)
	*/
	icon:Pixmap;
	/**
 * @description Holds whether or not this folder is a built-in content folder. (Read Only)
	*/
	isBuiltInContentFolder:Boolean;
	/**
 * @description Holds the label of the folder as it is displayed to the user. (Read Only)
	*/
	label:String;
	/**
 * @description ENUMERATOR: Folder containing native content.
*/
	
	static NATIVE_TYPE;
	/**
 * @description ENUMERATOR: Folder containing Poser content.
*/
	
	static POSER_TYPE;
	/**
 * @description ENUMERATOR: Folder containing other importable content.
*/
	
	static IMPORT_TYPE;
	/**
 * @description Adds a new subfolder with the given name to this folder.
*/
	addSubFolder(folderName:String):Boolean {
	
	}
	/**
 * @description Parameter(s):
*/
	canMoveFile(file:DzContentFile):Boolean {
	
	}
	/**
 * @description Copies the given content file to this folder.
*/
	copyFile(file:DzContentFile):Boolean {
	
	}
	/**
 * @description Removes this content folder. The default implementation of this function deletes all files and subfolders in this directory from the disk, so use with care!
*/
	deleteFolder():Boolean {
	
	}
	/**
 * @description Return Value:
*/
	getFirstFile():DzContentFile {
	
	}
	/**
 * @description Return Value:
*/
	getFirstFolder():void {
	
	}
	/**
 * @description Return Value:
*/
	getFirstHiddenFile():DzContentFile {
	
	}
	/**
 * @description Return Value:
*/
	getFirstHiddenFolder():void {
	
	}
	/**
 * @description Return Value:
*/
	getNext():void {
	
	}
	/**
 * @description Return Value:
*/
	getParent():void {
	
	}
	/**
 * @description Return Value:
*/
	hasSubFolders():Boolean {
	
	}
	/**
 * @description Return Value:
*/
	isModifiable():Boolean {
	
	}
	/**
 * @description Moves the given content file to this folder.
*/
	moveFile(file:DzContentFile):Boolean {
	
	}
	/**
 * @description Checks for changes in sub folders and files (if loaded).
*/
	refresh(reloadIcons:Boolean):Boolean {
	
	}
	/**
 * @description Rename the folder to the given name.
*/
	rename(newName:String):Boolean {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when a new folder is added.
 * @signature "addedFolder(DzContentFolder*)"
 * @event
*/
	addedFolder(newFolder:DzContentFolder):void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when the file list has changed.
 * @signature "fileListChanged()"
 * @event
*/
	fileListChanged():void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when a folder is added or removed.
 * @signature "folderListChanged()"
 * @event
*/
	folderListChanged():void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when a folder is removed.
 * @signature "removedFolder(DzContentFolder*)"
 * @event
*/
	removedFolder(folder:DzContentFolder):void {
	
	}

}
/**
 * @classdesc The manager that is responsible for all the content folder & file trees that are accessible from the content library.



There is only one instance of this manager in an application. This instance is created and owned by DzApp. Do not create an instance of this class, rather request the instance from DzApp via DzApp.getContentMgr().
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/contentmgr_dz}*/
class DzContentMgr extends DzBase {
	/**
 * @description Holds whether or not the content manager automatically refreshes itself.
	*/
	autoRefresh:Boolean;
	/**
 * @description Holds the maximum length of the File > Open Recent submenu, in the main menu bar.
	*/
	maxRecentFiles:Number;
	/**
 * @description Holds the path of the scene that will load when the scene is cleared (if any).
	*/
	newScene:String;
	/**
 * @description Holds whether or not the built-in content is shown in the content panes.
	*/
	showBuiltInContent:Boolean;
	/**
 * @description Holds the path of the scene that will load on startup (if any).
	*/
	startupScene:String;
	/**
 * @description ENUMERATOR: Represents the directories that are mapped and expected to contain files in the DAZ Studio native file format.
*/
	
	static NativeDirs;
	/**
 * @description ENUMERATOR: Represents the directories that are mapped and expected to contain files in the Poser file formats.
*/
	
	static PoserDirs;
	/**
 * @description ENUMERATOR: Represents the directories that are mapped and expected to contain files in formats supported by the various importers a user has installed (with the exception of the Poser format importer - see PoserDirs).
*/
	
	static ImportDirs;
	/**
 * @description ENUMERATOR: Represents the built-in directories that are expected to contain files in compatible formats.
*/
	
	static BuiltInDirs;
	/**
 * @description ENUMERATOR: Represents the built-in MDL directories and the directories that are expected to contain files in the MDL format. Since: 4.8.1.50
*/
	
	static MDLDirs;
	/**
 * @description ENUMERATOR: Represents the directories managed by the database, a given storeId_productId subdirectory, within a CloudDir directory. Since: 4.9.0.46
*/
	
	static CloudDB;
	/**
 * @description ENUMERATOR: Represents the mapped cloud directory and any ./data/cloud subdirectory located within NativeDirs and PoserDirs. Since: 4.9.0.46
*/
	
	static CloudDir;
	/**
 * @description ENUMERATOR: Represents the directory types defined by NativeDirs and BuiltInDirs (typically used to provide legacy support for methods that now use this enum).
*/
	
	static NativeAndBuiltInDirs;
	/**
 * @description ENUMERATOR: Represents the directory types defined by NativeDirs and BuiltInDirs, CloudDir, and CloudDB.
*/
	
	static CloudNativeAndBuiltInDirs;
	/**
 * @description ENUMERATOR: Represents the directory types defined by NativeDirs and BuiltInDirs, PoserDirs, ImportDirs, and MDLDirs. Since: 4.9.0.51
*/
	
	static AllLocalNonCloudDirs;
	/**
 * @description ENUMERATOR: Represents the directory types defined by NativeDirs and BuiltInDirs, PoserDirs, ImportDirs, MDLDirs, and CloudDir. Since: 4.9.0.51
*/
	
	static AllLocalDirs;
	/**
 * @description ENUMERATOR: Represents all directory types except those defined by MDLDirs, CloudDir and CloudDB. The "all" prior to 4.8.
*/
	
	static AllDirs;
	/**
 * @description ENUMERATOR: Represents all directory types. Since: 4.9.0.51
*/
	
	static AllDirsAndCloud;
	/**
 * @description Return Value:
*/
	getCloudPathPrefix():String {
	
	}
	/**
 * @description Checks the given node for a source file data item, and returns the path of the source file if one is found.
*/
	static getContentPath(node:DzNode):String {
	
	}
	/**
 * @description Adds a native content directory to the list.
*/
	addContentDirectory(directory:String, saveSetting:Boolean):String {
	
	}
	/**
 * @description Adds an import directory to the list.
*/
	addImportDirectory(directory:String, saveSetting:Boolean):String {
	
	}
	/**
 * @description Adds a directory where MDL files can reside to the list.
*/
	addMDLDirectory(directory:String, saveSetting:Boolean):String {
	
	}
	/**
 * @description Adds a Poser import content directory to the list.
*/
	addPoserDirectory(directory:String, saveSetting:Boolean):String {
	
	}
	/**
 * @description Adds a file to the list of recent files.
*/
	addRecentFile(filename:String):String {
	
	}
	/**
 * @description Clears the list of recent files.
*/
	clearRecentFileList():void {
	
	}
	/**
 * @description Attempts to locate dirPath among the mapped native content directories.
*/
	contentDirectoryIsMapped(dirPath:String):Boolean {
	
	}
	/**
 * @description Displays a dialog to the user to perform a Poser content search on the local machine.
*/
	doContentSearch():Boolean {
	
	}
	/**
 * @description Causes the content manager to check the number of mapped content directories, and display a warning to the user if it is excessive.
*/
	doDirNumCheck():void {
	
	}
	/**
 * @description Notifies the content manager that a new content file has been saved.
*/
	fileCreated(filename:String):String {
	
	}
	/**
 * @description Given an absolute path, this method traverses the content directories and attempts to find the base (mapped) folder.
*/
	findBaseDirectory(dirTypes:DirectoryTypes, path:String):DzContentFolder {
	
	}
	/**
 * @description Given an absolute path, this method traverses the content directories and attempts to find the base (mapped) folder.
*/
	findBaseDirectory(path:String, useImportFolders:Boolean):DzContentFolder {
	
	}
	/**
 * @description Given a partial path (a file path that is relative to a content directory) this function traverses all folders of the specified mapped directory types in the following order (NativeDirs, PoserDirs, ImportDirs, BuiltInDirs)
*/
	findFile(partialPath:String, dirTypes:DirectoryTypes):String {
	
	}
	/**
 * @description Finds the source path for a node in the scene.
*/
	findSourcePathForNode(sceneNode:DzNode):String {
	
	}
	/**
 * @description Attempts to locate relativePath by pre-pending the path information for each mapped content directory.
*/
	getAbsolutePath(dirTypes:DirectoryTypes, relativePath:String, preferredPath:String):String {
	
	}
	/**
 * @description Attempts to locate relativePath by pre-pending the path information for each mapped content directory.
*/
	getAbsolutePath(relativePath:String, useImportFolders:Boolean, preferredPath:String):String {
	
	}
	/**
 * @description Attempts to locate relativePath by pre-pending the path information for each mapped content directory.
*/
	getAbsolutePaths(dirTypes:DirectoryTypes, relativePath:String):Array {
	
	}
	/**
 * @description Attempts to locate relativePath by pre-pending the path information for each mapped directory.
*/
	getAbsolutePaths(relativePath:String, useImportFolders:Boolean):Array {
	
	}
	/**
 * @description Attempts to locate relativePath by pre-pending the path information for each mapped content directory.
*/
	getAbsoluteUri(dirTypes:DirectoryTypes, relativePath:String, preferredPath:String):DzUri {
	
	}
	/**
 * @description Return Value:
*/
	getBuiltInContentDirectory():DzContentFolder {
	
	}
	/**
 * @description Return Value:
*/
	getBuiltInContentDirectoryPath():String {
	
	}
	/**
 * @description Parameter(s):
*/
	getBuiltInMDLDirectory(which:Number):DzContentFolder {
	
	}
	/**
 * @description Parameter(s):
*/
	getBuiltInMDLDirectoryPath(which:Number):String {
	
	}
	/**
 * @description Attempts to locate relativePath by pre-pending the path information for the mapped cloud directory.
*/
	getCloudAbsolutePath(relativePath:String):String {
	
	}
	/**
 * @description Return Value:
*/
	getCloudContentDirectory():DzContentFolder {
	
	}
	/**
 * @description Return Value:
*/
	getCloudContentDirectoryPath():String {
	
	}
	/**
 * @description Attempts to shorten absolutePath to a path that is relative to the cloud directory. If the path cannot be shortened, the original string is returned.
*/
	getCloudRelativePath(absolutePath:String):String {
	
	}
	/**
 * @description Parameter(s):
*/
	getContentDirectory(which:Number):DzContentFolder {
	
	}
	/**
 * @description Parameter(s):
*/
	getContentDirectoryPath(which:Number):String {
	
	}
	/**
 * @description Return Value:
*/
	getContentReplaceMgr():DzContentReplaceMgr {
	
	}
	/**
 * @description Return Value:
*/
	getDefaultContentDir():String {
	
	}
	/**
 * @description Parameter(s):
*/
	getDirectoryContentsUrisList(dirTypes:DirectoryTypes, relativeDirPaths:Array, fileSuffixes:Array):Array {
	
	}
	/**
 * @description Attempts to locate a file with the given relative path by pre-pending the path information for each mapped import directory, finally falling back to the Built-In content directory.
*/
	getImportAbsolutePath(relativePath:String):String {
	
	}
	/**
 * @description Parameter(s):
*/
	getImportDirectory(which:Number):DzContentFolder {
	
	}
	/**
 * @description Parameter(s):
*/
	getImportDirectoryPath(which:Number):String {
	
	}
	/**
 * @description Return Value:
*/
	getImportFileExtensions():Array {
	
	}
	/**
 * @description Attempts to extract the mapped directory portion of path.
*/
	getMappedPath(path:String, useImportFolders:Boolean, isRelative:Boolean):String {
	
	}
	/**
 * @description Attempts to extract the mapped directory portion of path.
*/
	getMappedPath(dirTypes:DirectoryTypes, path:String, isRelative:Boolean):String {
	
	}
	/**
 * @description Attempts to locate a file with the given relative path by pre-pending the path information for each mapped MDL directory, as well as the built-in MDL directories, finally falling back to the built-in content directory.
*/
	getMDLAbsolutePath(relativePath:String):String {
	
	}
	/**
 * @description Parameter(s):
*/
	getMDLDirectory(which:Number):DzContentFolder {
	
	}
	/**
 * @description Parameter(s):
*/
	getMDLDirectoryPath(which:Number):String {
	
	}
	/**
 * @description Attempts to shorten absolutePath to a path that is relative to one of the mapped MDL directories. If the path cannot be shortened, the original string is returned.
*/
	getMDLRelativePath(absolutePath:String):String {
	
	}
	/**
 * @description Attempts to locate relativePath by pre-pending the path information for each mapped native directory, finally falling back to the Built-In content directory.
*/
	getNativeAbsolutePath(relativePath:String):String {
	
	}
	/**
 * @description Return Value:
*/
	getNativeBaseUserFacingExcludedDirs():Array {
	
	}
	/**
 * @description Return Value:
*/
	getNativeFileExtensions():Array {
	
	}
	/**
 * @description Return Value:
*/
	getNumBuiltInMDLDirectories():Number {
	
	}
	/**
 * @description Return Value:
*/
	getNumContentDirectories():Number {
	
	}
	/**
 * @description Return Value:
*/
	getNumImportDirectories():Number {
	
	}
	/**
 * @description Return Value:
*/
	getNumMDLDirectories():Number {
	
	}
	/**
 * @description Return Value:
*/
	getNumPoserDirectories():Number {
	
	}
	/**
 * @description Attempts to locate a file with the given relative path by pre-pending the path information for each mapped Poser directory, finally falling back to the Built-In content directory.
*/
	getPoserAbsolutePath(relativePath:String):String {
	
	}
	/**
 * @description Return Value:
*/
	getPoserBaseUserFacingDirs():Array {
	
	}
	/**
 * @description Parameter(s):
*/
	getPoserDirectory(which:Number):DzContentFolder {
	
	}
	/**
 * @description Parameter(s):
*/
	getPoserDirectoryPath(which:Number):String {
	
	}
	/**
 * @description Return Value:
*/
	getPoserFileExtensions():Array {
	
	}
	/**
 * @description Return Value:
*/
	getRecentFileList():Array {
	
	}
	/**
 * @description Attempts to shorten absolutePath to a path that is relative to one of the mapped content directories. If the path cannot be shortened, the original path is returned.
*/
	getRelativePath(dirTypes:DirectoryTypes, absolutePath:String):String {
	
	}
	/**
 * @description Attempts to shorten absolutePath to a path that is relative to one of the mapped content directories. If the path cannot be shortened, the original string is returned.
*/
	getRelativePath(absolutePath:String, useImportFolders:Boolean):String {
	
	}
	/**
 * @description Attempts to shorten absolutePath to a list of paths that are relative to one of the mapped content directories.
*/
	getRelativePaths(dirTypes:DirectoryTypes, absolutePath:String):Array {
	
	}
	/**
 * @description Attempts to shorten absolutePath to a list of paths that are relative to one of the mapped content directories.
*/
	getRelativePaths(absolutePath:String, useImportFolders:Boolean):Array {
	
	}
	/**
 * @description Attempts to locate dirPath among the mapped import directories.
*/
	importDirectoryIsMapped(dirPath:String):Boolean {
	
	}
	/**
 * @description Imports the file at the given path. A companion file (a DAZ Script file with the same name as the file being imported, or a DUF file if a DAZ Script does not exist) will be executed if one exists. This function should only be used in special circumstances. Use openFile() instead.
*/
	importFile(path:String):Boolean {
	
	}
	/**
 * @description Parameter(s):
*/
	isDirectoryMapped(directory:String):Boolean {
	
	}
	/**
 * @description Parameter(s):
*/
	isUserFacingDirectoryPath(dirTypes:DirectoryTypes, relativePath:String):Boolean {
	
	}
	/**
 * @description Parameter(s):
*/
	isUserFacingFilePath(dirTypes:DirectoryTypes, relativePath:String):Boolean {
	
	}
	/**
 * @description Loads an asset as a new scene.
*/
	loadAsset(asset:DzAsset):Boolean {
	
	}
	/**
 * @description Loads an asset into the scene.
*/
	loadAsset(asset:DzAsset, merge:Boolean):Boolean {
	
	}
	/**
 * @description Attempts to locate dirPath among the mapped MDL directories.
*/
	mdlDirectoryIsMapped(dirPath:String):Boolean {
	
	}
	/**
 * @description Merges a list of files, either as native files or imported files, by calling openNativeFile() or importFile() based on the file extension. For file imports, a companion file (a DAZ Script file with the same name as the file being imported, or a DUF file if a DAZ Script does not exist) will be executed if one exists.
*/
	mergeFiles(filenames:Array):Boolean {
	
	}
	/**
 * @description Loads the file, either as a native file or an imported file, by calling openNativeFile() or importFile() based on the file extension. For file imports, a companion file (a DAZ Script file with the same name as the file being imported, or a DUF file if a DAZ Script does not exist) will be executed if one exists.
*/
	openFile(filename:String, merge:Boolean):Boolean {
	
	}
	/**
 * @description Loads a native file into the scene. This function should only be used in special circumstances. Use openFile() instead.
*/
	openNativeFile(filename:String, isMerge:Boolean):Boolean {
	
	}
	/**
 * @description Loads a native file into the scene. This function should only be used in special circumstances. Use openFile() instead.
*/
	openNativeUri(uri:DzUri, filename:String, isMerge:Boolean):Boolean {
	
	}
	/**
 * @description Loads the file, either as a native file or an imported file, by calling openNativeFile() or importFile() based on the file extension. For file imports, a companion file (a DAZ Script file with the same name as the file being imported, or a DUF file if a DAZ Script does not exist) will be executed if one exists.
*/
	openUri(uri:DzUri, filename:String, merge:Boolean):Boolean {
	
	}
	/**
 * @description Attempts to locate dirPath path among the mapped Poser content directories.
*/
	poserDirectoryIsMapped(dirPath:String):Boolean {
	
	}
	/**
 * @description Refreshes any currently loaded content directories. Call this after any operation that makes changes to the file system, e.g. saving or deleting files, etc.
*/
	refresh(reloadIcons:Boolean):Boolean {
	
	}
	/**
 * @description Causes assets for a given node in the scene to be reloaded, using the given settings, from source files at the given path.
*/
	reloadAssetsFromSource(sceneNode:DzNode, settings:DzSettings, srcFilePath:String):DzError {
	
	}
	/**
 * @description Causes the assets for all nodes in the scene to be reloaded from their respective source files.
*/
	reloadSceneAssetsFromSource(settings:DzSettings):Boolean {
	
	}
	/**
 * @description Removes all native content mapped directories.
*/
	removeAllContentDirectories():void {
	
	}
	/**
 * @description Removes all import content directory mappings from the list.
*/
	removeAllImportDirectories():void {
	
	}
	/**
 * @description Removes all MDL directory mappings from the list.
*/
	removeAllMDLDirectories():void {
	
	}
	/**
 * @description Removes all Poser import content directory mappings from the list.
*/
	removeAllPoserDirectories():void {
	
	}
	/**
 * @description Removes a navtive content directory mapping from the list.
*/
	removeContentDirectory(directory:String):Boolean {
	
	}
	/**
 * @description Removes an import content directory mapping from the list.
*/
	removeImportDirectory(directory:String):Boolean {
	
	}
	/**
 * @description Removes a MDL directory mapping from the list.
*/
	removeMDLDirectory(directory:String):Boolean {
	
	}
	/**
 * @description Removes a Poser import content directory mapping from the list.
*/
	removePoserDirectory(directory:String):Boolean {
	
	}
	/**
 * @description Saves all currently mapped directories to the registry.
*/
	saveAllMappedDirectories():void {
	
	}
	/**
 * @description Deprecated
*/
	setCheckCompatibilityOn(useCheckCompatibility:Boolean):Boolean {
	
	}
	/**
 * @description Sets the directory for content and utilities downloaded and installed through the application.
*/
	setCloudContentDirectory(directory:String, saveSetting:Boolean):String {
	
	}
	/**
 * @description Sets the list of directories for native format files.
*/
	setContentDirectories(directories:Array, saveSettings:Boolean):Array {
	
	}
	/**
 * @description Sets the list of directories for other import format files.
*/
	setImportDirectories(directories:Array, saveSettings:Boolean):Array {
	
	}
	/**
 * @description Sets the list of directories for Poser format files.
*/
	setPoserDirectories(directories:Array, saveSettings:Boolean):Array {
	
	}
	/**
 * @description Sets whether or not to use the database.
*/
	setUseDatabaseSearch(useDatabase:Boolean):Boolean {
	
	}
	/**
 * @description Given the filename, determines if the file should be treated as a merge or an open when loaded. This is determined first by content type. If that does not exist and the file is a .duf it will attempt to retrieve the type from inside the file.
*/
	shouldMerge(filename:String):Boolean {
	
	}
	/**
 * @description Deprecated
*/
	usingCheckCompatibility():Boolean {
	
	}
	/**
 * @description Return Value:
*/
	usingDatabaseSearch():Boolean {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when the enabled state of the auto refresh has changed
 * @signature "autoRefreshChanged(bool)"
 * @event
*/
	autoRefreshChanged(onOff:Boolean):void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when the cloud content directory has changed.
 * @signature "cloudContentDirectoryChanged()"
 * @event
*/
	cloudContentDirectoryChanged():void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when a content directory is added or removed.
 * @signature "contentDirectoryListChanged()"
 * @event
*/
	contentDirectoryListChanged():void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when the currently loaded tree of folders has changed and needs to be rebuilt. Usually a result of a call to refresh(), or when one of the content directory lists has changed.
 * @signature "folderTreeChanged()"
 * @event
*/
	folderTreeChanged():void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when an import directory is added or removed.
 * @signature "importDirectoryListChanged()"
 * @event
*/
	importDirectoryListChanged():void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when the loading of a script has failed, or when the execution of a script has finished or failed.
 * @signature "loadScriptFinished()"
 * @event
*/
	loadScriptFinished():void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when the loading of a script is starting.
 * @signature "loadScriptStarting()"
 * @event
*/
	loadScriptStarting():void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when a MDL directory is added or removed.
 * @signature "mdlDirectoryListChanged()"
 * @event
*/
	mdlDirectoryListChanged():void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when a new content file has been created.
 * @signature "newFileCreated(const QString&)"
 * @event
*/
	newFileCreated(filename:String):void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when the file that is loaded on 'new' has been changed.
 * @signature "onNewSceneChanged(const QString&)"
 * @event
*/
	onNewSceneChanged(filename:String):void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when a poser import directory is added or removed.
 * @signature "poserDirectoryListChanged()"
 * @event
*/
	poserDirectoryListChanged():void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when a recent file is added or removed.
 * @signature "recentFileListChanged()"
 * @event
*/
	recentFileListChanged():void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when the execution of a script fails.
 * @signature "scriptFailed(const QString&)"
 * @event
*/
	scriptFailed(filename:String):void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when the execution of a script has finished.
 * @signature "scriptFinished(const QString&)"
 * @event
*/
	scriptFinished(filename:String):void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when the loading of a script fails.
 * @signature "scriptLoadFailed(const QString&)"
 * @event
*/
	scriptLoadFailed(filename:String):void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when the loading of a script is starting.
 * @signature "scriptLoadStarting(const QString&)"
 * @event
*/
	scriptLoadStarting(filename:String):void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when the execution of a script is starting.
 * @signature "scriptStarting(const QString&)"
 * @event
*/
	scriptStarting(filename:String):void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when the startup scene file has changed
 * @signature "startupSceneChanged(const QString&)"
 * @event
*/
	startupSceneChanged(filename:String):void {
	
	}

}
/**
 * @classdesc See Also:


 DzContentMgr.getContentReplaceMgr()
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/contentreplacemgr_dz}*/
class DzContentReplaceMgr extends QObject {
	/**
 * @description ENUMERATOR: When a piece of content of a specific type is loaded, any content already in the scene of the same type is removed, so the new item replaces the old one.
*/
	
	static ALWAYS_REPLACE;
	/**
 * @description ENUMERATOR: When a piece of content is loaded, a dialog prompts the user to choose which (if any) items already in the scene should be removed.
*/
	
	static ASK_TO_REPLACE;
	/**
 * @description ENUMERATOR: Items already in the scene are never removed when loading a piece of content.
*/
	
	static NEVER_REPLACE;
	/**
 * @description ENUMERATOR: When a piece of content is loaded, a dialog prompts the user to choose which (if any) items already in the scene should be removed if there is an item of matching content type.
*/
	
	static ASK_WHEN_MATCHING;
	/**
 * @description Resets all replace data to default values, excluding replace mode.
*/
	clearReplaceData():void {
	
	}
	/**
 * @description Performs all the necessary steps to remove content marked for replacement.
*/
	doReplace():void {
	
	}
	/**
 * @description Return Value:
*/
	getNewContentPath():String {
	
	}
	/**
 * @description Return Value:
*/
	getNewContentType():String {
	
	}
	/**
 * @description Return Value:
*/
	getReplaceMode():ContentReplaceMode {
	
	}
	/**
 * @description Performs all the necessary initialization for doing content replacement when the given file will be loaded, using items attached to baseNode as potential items to replace.
*/
	initReplaceForContentLoad(path:String, baseNode:DzNode):String {
	
	}
	/**
 * @description Removes all nodes in the replace list from the scene.
*/
	removeReplaceNodes():void {
	
	}
	/**
 * @description Parameter(s):
*/
	setNewContentPath(contentPath:String):String {
	
	}
	/**
 * @description Parameter(s):
*/
	setNewContentType(contentType:String):String {
	
	}
	/**
 * @description Sets the content replace mode.
*/
	setReplaceMode(mode:ContentReplaceMode):ContentReplaceMode {
	
	}
	/**
 * @description Updates the replace list to contain all items that should be removed during content load. If the replace mode is ALWAYS_REPLACE, the list will contain all nodes attached (following, parented, etc.) to baseNode whose type matches the current "New Content Type" (as set through setNewContentType()). If the replace mode is ASK_TO_REPLACE, a dialog will allow the user to select what nodes should be replaced.
*/
	updateReplaceNodes(baseNode:DzNode):DzNode {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when the content replace mode has changed.
 * @signature "contentReplaceModeChanged(DzContentReplaceMgr.ContentReplaceMode)"
 * @event
*/
	contentReplaceModeChanged(mode:DzContentReplaceMgr.ContentReplaceMode):void {
	
	}

}
/**
 * @classdesc The controller class is like a modifier for DzProperty types. Controllers allow implementation of custom modulation of properties without changing the properties actual value. Common implementations of controllers include: controllers that adjust one property based on the value of another property, controllers that replace the value of one property with the value of another property, controllers that use a script expression to drive a property, etc.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/controller_dz}*/
class DzController extends DzBase {
	/**
 * @description The description of the controller (Read Only)
	*/
	description:String;
	/**
 * @description The effect of the controller (Read Only)
	*/
	effect:ControllerEffect;
	/**
 * @description The description of the controller when slave (Read Only)
	*/
	slaveDescription:String;
	/**
 * @description ENUMERATOR: Has no effect on the property
*/
	
	static None;
	/**
 * @description ENUMERATOR: Uses the current value of the property to calculate the result
*/
	
	static Additive;
	/**
 * @description ENUMERATOR: Ignores the current value of the property, and calculates the result from unrelated factors.
*/
	
	static Replace;
	/**
 * @description TODO:
Add description.
*/
	getOwner():DzProperty {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description TODO: Add Description
 * @signature TODO: Add Description
 * @event
*/
	attributeChanged():void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when the value of this controller has changed.
 * @signature "currentValueChanged()"
 * @event
*/
	currentValueChanged():void {
	
	}

}
/**
 * @classdesc See Also:


 DzExportMgr.findExporterByClassName()

 DzExportMgr.findExporter()

 Export TriAx to Poser
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/cr2exporter_dz}*/
class DzCr2Exporter extends DzExporter {
	/**
 * @description Default Constructor.
 * @constructor
*/
	constructor() {
	
	}

}
/**
 * @classdesc TODO:
Add detailed description.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/customdata_dz}*/
class DzCustomData extends DzBase {
	/**
 * @description Return Value:
*/
	isPersistent():Boolean {
	
	}

}
/**
 * @classdesc A DzDateEdit provides a date editor.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/dateedit_dz}*/
class DzDateEdit extends DzDateTimeEdit {
	/**
 * @description Holds the maximum value for the widget.
	*/
	max:Date;
	/**
 * @description Holds the minimum value for the widget.
	*/
	min:Date;
	/**
 * @description Holds the separator used by the widget.
	*/
	separator:String;
	/**
 * @description Creates a date edit widget as a child of the given parent widget.
 * @constructor
*/
	constructor(parent:DzWidget) {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when the date in the widget has changed, passes the new date.
 * @signature "valueChanged(const QDate&)"
 * @event
*/
	valueChanged(date:Date):void {
	
	}

}
/**
 * @classdesc A DzDateTimeEdit provides a combination date and time editor.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/datetimeedit_dz}*/
class DzDateTimeEdit extends DzWidget {
	/**
 * @description Holds the date represented by the widget.
	*/
	date:Date;
	/**
 * @description Holds the maximum date value for the widget.
	*/
	dateMax:Date;
	/**
 * @description Holds the minimum date value for the widget.
	*/
	dateMin:Date;
	/**
 * @description Holds the date separator used by the widget.
	*/
	dateSeparator:String;
	/**
 * @description Holds the date and time represented by the widget.
	*/
	dateTime:dateTime;
	/**
 * @description TODO:
Add description.
	*/
	displayFormat:String;
	/**
 * @description Holds the time represented by the widget.
	*/
	time:Date;
	/**
 * @description Holds the maximum time value for the widget.
	*/
	timeMax:Date;
	/**
 * @description Holds the minimum time value for the widget.
	*/
	timeMin:Date;
	/**
 * @description Holds the time separator used by the widget.
	*/
	timeSeparator:String;
	/**
 * @description Creates a date time edit widget as a child of the given parent widget.
 * @constructor
*/
	constructor(parent:DzWidget) {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when the date/time in the widget has changed, passes the new date/time.
 * @signature "valueChanged(const QDateTime&)"
 * @event
*/
	valueChanged(dateTime:DateTime):void {
	
	}

}
/**
 * @classdesc TODO:
Add detailed description.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/defaultmaterial_dz}*/
class DzDefaultMaterial extends DzMaterial, DzRefCountedItem {
	/**
 * @description Default Constructor.
 * @constructor
*/
	constructor() {
	
	}
	/**
 * @description Return Value:
*/
	getAmbientColor():Color {
	
	}
	/**
 * @description Return Value:
*/
	getAmbientColorControl():DzColorProperty {
	
	}
	/**
 * @description Return Value:
*/
	getAmbientColorMap():DzTexture {
	
	}
	/**
 * @description Return Value:
*/
	getAmbientStrength():Number {
	
	}
	/**
 * @description Return Value:
*/
	getAmbientStrengthControl():DzFloatProperty {
	
	}
	/**
 * @description Return Value:
*/
	getAmbientValueMap():DzTexture {
	
	}
	/**
 * @description Return Value:
*/
	getBumpControl():DzFloatProperty {
	
	}
	/**
 * @description Return Value:
*/
	getBumpMap():DzTexture {
	
	}
	/**
 * @description Return Value:
*/
	getBumpMax():Number {
	
	}
	/**
 * @description Return Value:
*/
	getBumpMaxControl():DzFloatProperty {
	
	}
	/**
 * @description Return Value:
*/
	getBumpMin():Number {
	
	}
	/**
 * @description Return Value:
*/
	getBumpMinControl():DzFloatProperty {
	
	}
	/**
 * @description Return Value:
*/
	getBumpStrength():Number {
	
	}
	/**
 * @description Return Value:
*/
	getDiffuseColorControl():DzColorProperty {
	
	}
	/**
 * @description Return Value:
*/
	getDiffuseStrength():Number {
	
	}
	/**
 * @description Return Value:
*/
	getDiffuseStrengthControl():DzFloatProperty {
	
	}
	/**
 * @description Return Value:
*/
	getDiffuseValueMap():DzTexture {
	
	}
	/**
 * @description Return Value:
*/
	getDisplacementControl():DzFloatProperty {
	
	}
	/**
 * @description Return Value:
*/
	getDisplacementMap():DzTexture {
	
	}
	/**
 * @description Return Value:
*/
	getDisplacementMax():Number {
	
	}
	/**
 * @description Return Value:
*/
	getDisplacementMaxControl():DzFloatProperty {
	
	}
	/**
 * @description Return Value:
*/
	getDisplacementMin():Number {
	
	}
	/**
 * @description Return Value:
*/
	getDisplacementMinControl():DzFloatProperty {
	
	}
	/**
 * @description Return Value:
*/
	getDisplacementStrength():Number {
	
	}
	/**
 * @description Return Value:
*/
	getGlossinessControl():DzFloatProperty {
	
	}
	/**
 * @description Return Value:
*/
	getGlossinessStrength():Number {
	
	}
	/**
 * @description Return Value:
*/
	getGlossinessValueMap():DzTexture {
	
	}
	/**
 * @description Return Value:
*/
	getHorizontalOffset():Number {
	
	}
	/**
 * @description Return Value:
*/
	getHorizontalOffsetControl():DzFloatProperty {
	
	}
	/**
 * @description Return Value:
*/
	getHorizontalTiles():Number {
	
	}
	/**
 * @description Return Value:
*/
	getHorizontalTilesControl():DzFloatProperty {
	
	}
	/**
 * @description Return Value:
*/
	getIndexOfRefraction():Number {
	
	}
	/**
 * @description Return Value:
*/
	getIndexOfRefractionControl():DzFloatProperty {
	
	}
	/**
 * @description Return Value:
*/
	getMultThroughOpacityControl():DzBoolProperty {
	
	}
	/**
 * @description Return Value:
*/
	getNormalValueMap():DzTexture {
	
	}
	/**
 * @description Return Value:
*/
	getNormalValueMapControl():DzImageProperty {
	
	}
	/**
 * @description Return Value:
*/
	getOpacityControl():DzFloatProperty {
	
	}
	/**
 * @description Return Value:
*/
	getReflectionColor():Color {
	
	}
	/**
 * @description Return Value:
*/
	getReflectionColorControl():DzColorProperty {
	
	}
	/**
 * @description Return Value:
*/
	getReflectionMap():DzTexture {
	
	}
	/**
 * @description Return Value:
*/
	getReflectionStrength():Number {
	
	}
	/**
 * @description Return Value:
*/
	getReflectionStrengthControl():DzFloatProperty {
	
	}
	/**
 * @description Return Value:
*/
	getReflectionValueMap():DzTexture {
	
	}
	/**
 * @description Return Value:
*/
	getRefractionColor():Color {
	
	}
	/**
 * @description Return Value:
*/
	getRefractionColorControl():DzColorProperty {
	
	}
	/**
 * @description Return Value:
*/
	getRefractionColorMap():DzTexture {
	
	}
	/**
 * @description Return Value:
*/
	getRefractionStrength():Number {
	
	}
	/**
 * @description Return Value:
*/
	getRefractionStrengthControl():DzFloatProperty {
	
	}
	/**
 * @description Return Value:
*/
	getRefractionValueMap():DzTexture {
	
	}
	/**
 * @description Return Value:
*/
	getScatterColor():Color {
	
	}
	/**
 * @description Return Value:
*/
	getScatterColorControl():DzColorProperty {
	
	}
	/**
 * @description Return Value:
*/
	getScatterColorMap():DzTexture {
	
	}
	/**
 * @description Return Value:
*/
	getSheenColor():Color {
	
	}
	/**
 * @description Return Value:
*/
	getSheenColorControl():DzColorProperty {
	
	}
	/**
 * @description Return Value:
*/
	getSheenColorMap():DzTexture {
	
	}
	/**
 * @description Return Value:
*/
	getSpecularColor():Color {
	
	}
	/**
 * @description Return Value:
*/
	getSpecularColorControl():DzColorProperty {
	
	}
	/**
 * @description Return Value:
*/
	getSpecularColorMap():DzTexture {
	
	}
	/**
 * @description Return Value:
*/
	getSpecularStrength():Number {
	
	}
	/**
 * @description Return Value:
*/
	getSpecularStrengthControl():DzFloatProperty {
	
	}
	/**
 * @description Return Value:
*/
	getSpecularValueMap():DzTexture {
	
	}
	/**
 * @description Return Value:
*/
	getSurfaceType():Number {
	
	}
	/**
 * @description Return Value:
*/
	getSurfaceTypeControl():DzEnumProperty {
	
	}
	/**
 * @description Return Value:
*/
	getThickness():Number {
	
	}
	/**
 * @description Return Value:
*/
	getThicknessControl():DzFloatProperty {
	
	}
	/**
 * @description Return Value:
*/
	getThicknessValueMap():DzTexture {
	
	}
	/**
 * @description Return Value:
*/
	getVerticalOffset():Number {
	
	}
	/**
 * @description Return Value:
*/
	getVerticalOffsetControl():DzFloatProperty {
	
	}
	/**
 * @description Return Value:
*/
	getVerticalTiles():Number {
	
	}
	/**
 * @description Return Value:
*/
	getVerticalTilesControl():DzFloatProperty {
	
	}
	/**
 * @description Return Value:
*/
	isMultThroughOpacity():Boolean {
	
	}
	/**
 * @description Return Value:
*/
	needsTangentSpaceParams():Boolean {
	
	}
	/**
 * @description Set the ambient color for this material.
*/
	setAmbientColor(color:Color):Color {
	
	}
	/**
 * @description Set the ambient color map for this material.
*/
	setAmbientColorMap(img:DzTexture):DzTexture {
	
	}
	/**
 * @description Set the ambient strength for this material.
*/
	setAmbientStrength(val:Number):Number {
	
	}
	/**
 * @description Set the ambient strength map for this material.
*/
	setAmbientValueMap(img:DzTexture):DzTexture {
	
	}
	/**
 * @description Set the map for the bump strength channel.
*/
	setBumpMap(img:DzTexture):DzTexture {
	
	}
	/**
 * @description Set the maximum bump for this material.
*/
	setBumpMax(val:Number):Number {
	
	}
	/**
 * @description Set the minimum bump for this material.
*/
	setBumpMin(val:Number):Number {
	
	}
	/**
 * @description Set the bump strength for this material.
*/
	setBumpStrength(val:Number):Number {
	
	}
	/**
 * @description Set the diffuse strength for this material.
*/
	setDiffuseStrength(val:Number):Number {
	
	}
	/**
 * @description Set the diffuse strength map for this material.
*/
	setDiffuseValueMap(img:DzTexture):DzTexture {
	
	}
	/**
 * @description Set the displacement map for this material.
*/
	setDisplacementMap(img:DzTexture):DzTexture {
	
	}
	/**
 * @description Set the maximum displacement for this material.
*/
	setDisplacementMax(val:Number):Number {
	
	}
	/**
 * @description Set the minimum displacement for this material.
*/
	setDisplacementMin(val:Number):Number {
	
	}
	/**
 * @description Set the displacement strength for this material.
*/
	setDisplacementStrength(val:Number):Number {
	
	}
	/**
 * @description Set glossiness for this material.
*/
	setGlossinessStrength(size:Number):Number {
	
	}
	/**
 * @description Set glossiness value map for this material.
*/
	setGlossinessValueMap(img:DzTexture):DzTexture {
	
	}
	/**
 * @description Set the horizontal offset for the material
*/
	setHorizontalOffset(offset:Number):Number {
	
	}
	/**
 * @description Set the horizontal tiling for the material
*/
	setHorizontalTiles(tiles:Number):Number {
	
	}
	/**
 * @description Set the index of refraction for this material.
*/
	setIndexOfRefraction(val:Number):Number {
	
	}
	/**
 * @description Set the multiply through opacity parameter. If true, Specular highlights are multiplied through the opacity of the material (i.e. a transparent material will not show specular highlights). If false, specular highlights can contribute to the local opacity of the material (i.e. transparent objects show highlights)
*/
	setMultThroughOpacity(onOff:Boolean):Boolean {
	
	}
	/**
 * @description Set the normal map for this material.
*/
	setNormalValueMap(img:DzTexture):DzTexture {
	
	}
	/**
 * @description Set the reflection color for this material.
*/
	setReflectionColor(color:Color):Color {
	
	}
	/**
 * @description Set the reflection map for this material.
*/
	setReflectionMap(img:DzTexture):DzTexture {
	
	}
	/**
 * @description Set the reflection strength for this material.
*/
	setReflectionStrength(val:Number):Number {
	
	}
	/**
 * @description Set reflection strength map for this material.
*/
	setReflectionValueMap(img:DzTexture):DzTexture {
	
	}
	/**
 * @description Set the refraction color for this material.
*/
	setRefractionColor(color:Color):Color {
	
	}
	/**
 * @description Set the refraction color map for this material.
*/
	setRefractionColorMap(img:DzTexture):DzTexture {
	
	}
	/**
 * @description Set the refraction strength for this material.
*/
	setRefractionStrength(val:Number):Number {
	
	}
	/**
 * @description Set the refraction strength map for this material.
*/
	setRefractionValueMap(img:DzTexture):DzTexture {
	
	}
	/**
 * @description Set the scatter color for this material.
*/
	setScatterColor(color:Color):Color {
	
	}
	/**
 * @description Set the scatter color map for this material.
*/
	setScatterColorMap(DzTexture):DzTexture {
	
	}
	/**
 * @description Set the sheen color for this material.
*/
	setSheenColor(color:Color):Color {
	
	}
	/**
 * @description Set the sheen color map for this material.
*/
	setSheenColorMap(DzTexture):DzTexture {
	
	}
	/**
 * @description Set base specular color for this material.
*/
	setSpecularColor(color:Color):Color {
	
	}
	/**
 * @description Set the specular color map for this material.
*/
	setSpecularColorMap(img:DzTexture):DzTexture {
	
	}
	/**
 * @description Set base specular strength for this material.
*/
	setSpecularStrength(size:Number):Number {
	
	}
	/**
 * @description Set specular strength map for this material.
*/
	setSpecularValueMap(img:DzTexture):DzTexture {
	
	}
	/**
 * @description Set the surface type for this material.
*/
	setSurfaceType(val:Number):Number {
	
	}
	/**
 * @description Set the refraction strength for this material.
*/
	setThickness(Number):Number {
	
	}
	/**
 * @description Set the thickness map for this material.
*/
	setThicknessValueMap(DzTexture):DzTexture {
	
	}
	/**
 * @description Set the vertical offset for the material
*/
	setVerticalOffset(offset:Number):Number {
	
	}
	/**
 * @description Set the vertical tiling for the material
*/
	setVerticalTiles(tiles:Number):Number {
	
	}

}
/**
 * @classdesc Implements a RenderMan interface for the scene to render itself through the 3Delight renderer.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/delightrenderer_dz}*/
class DzDelightRenderer extends DzRenderer {
	/**
 * @description Default Constructor.
 * @constructor
*/
	constructor() {
	
	}
	/**
 * @description TODO:
Add description.
*/
	resetIPRHandler():void {
	
	}

}
/**
 * @classdesc This pages exists in order to indicate the DAZScript accessible properties and signals of the Qt native QDesktopWidget class.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/desktopwidget_q}*/
class QDesktopWidget extends QWidget {
	/**
 * @description Holds the index of the screen that is configured to be the primary screen on the system.
	*/
	primaryScreen:Number;
	/**
 * @description Holds the number of screens currently available on the system.
	*/
	screenCount:Number;
	/**
 * @description Holds if the system manages the available screens in a virtual desktop.
	*/
	virtualDesktop:Boolean;
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when the size of screen changes.
 * @signature "resized(int)"
 * @event
*/
	resized(screen:Number):void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when the number of screens changes to newCount.
 * @signature "screenCountChanged(int)"
 * @event
*/
	screenCountChanged(newCount:Number):void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when the work area available on screen changes.
 * @signature "workAreaResized(int)"
 * @event
*/
	workAreaResized(screen:Number):void {
	
	}

}
/**
 * @classdesc TODO:
Add detailed description.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/device_dz}*/
class DzDevice extends QObject {
	/**
 * @description Parameter(s):
*/
	getDefaultSettings(settings:DzSettings):DzSettings {
	
	}
	/**
 * @description Return Value:
*/
	getDescription():String {
	
	}
	/**
 * @description Return Value:
*/
	getDeviceName():String {
	
	}
	/**
 * @description Parameter(s):
*/
	getSettings(settings:DzSettings):DzSettings {
	
	}
	/**
 * @description Changes the current settings for the device.
*/
	setSettings(settings:DzSettings):DzSettings {
	
	}

}
/**
 * @classdesc TODO:
Add detailed description.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/devicemgr_dz}*/
class DzDeviceMgr extends QObject {
	/**
 * @description Parameter(s):
*/
	getDevice(which:Number):DzDevice {
	
	}
	/**
 * @description Return Value:
*/
	getNumDevices():Number {
	
	}

}
/**
 * @classdesc The DForm is the primary component of a DForm deformer. The others are the DzDFormBase, DzDFormZone and dformmodifier_dz.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/dform_dz}*/
class DzDForm extends DzNode {
	/**
 * @description Default Constructor.
 * @constructor
*/
	constructor() {
	
	}
	/**
 * @description Adds the effect of this DForm to the given node
*/
	applyToNode(node:DzNode):DzNode {
	
	}
	/**
 * @description Return Value:
*/
	getAvatarScale():Number {
	
	}
	/**
 * @description Return Value:
*/
	getBase():DzDFormBase {
	
	}
	/**
 * @description Return Value:
*/
	getGradientMax():Color {
	
	}
	/**
 * @description Return Value:
*/
	getGradientMin():Color {
	
	}
	/**
 * @description Gets the ith Modifier of the DForm. The index is zero based. Can be used with getNumTargets to iterate over all the DForm Modifiers.
*/
	getModifier(index:Number):Number {
	
	}
	/**
 * @description Return Value:
*/
	getNumModifiers():Number {
	
	}
	/**
 * @description Return Value:
*/
	getOpacity():Number {
	
	}
	/**
 * @description Return Value:
*/
	getZone():DzDFormZone {
	
	}
	/**
 * @description Sets the avatar scale factor of the DForm representation
*/
	setAvatarScale(val:Number):Number {
	
	}
	/**
 * @description Sets the Base for this DForm.
*/
	setBase(base:DzDFormBase):DzDFormBase {
	
	}
	/**
 * @description Sets the Color used in the gradient for weights at the maximum end of the scale
*/
	setGradientMax(color:Color):Color {
	
	}
	/**
 * @description Sets the Color used in the gradient for weights at the minimum end of the scale
*/
	setGradientMin(color:Color):Color {
	
	}
	/**
 * @description Sets the opacity of the DForm representation
*/
	setOpacity(val:Number):Number {
	
	}
	/**
 * @description Sets the Zone for this DForm.
*/
	setZone(zone:DzDFormZone):DzDFormZone {
	
	}

}
/**
 * @classdesc An asset save filter for saving a D-Former(s) Preset in the DSON format.



See Also:


 Sample: Save a D-Former(s) Preset
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/dformassetfilter_dz}*/
class DzDFormAssetFilter extends DzAssetFileOutFilter {
	/**
 * @description TODO:
Add description.
 * @constructor
*/
	constructor() {
	
	}

}
/**
 * @classdesc The Base is one component of a DForm deformer. The others are the DzDForm, DzDFormZone and dformmodifier_dz.



The DForm Base functions as the origin for the DForm deformation effect, as detailed in the DForm class.



The DForm Base and Zone can be created separately from the DForm and then joined together with the addDForm(), addZone(), etc functions.



The DForm Base is a skeleton and the DForm itself is a bone of the Base. This prevents the two components from being reparented away from each other and retains the parent-child relationship for the relative transform calculations.



The DForm Base draws itself in the scene using the DForm_base_ColorMax and DForm_base_ColorMin embedded geometry. The DForm_base_ColorMax is drawn with the maximum color of the vertex weight color gradient and the DForm_base_ColorMin is drawn with the minimum color.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/dformbase_dz}*/
class DzDFormBase extends DzNode {
	/**
 * @description Default Constructor.
 * @constructor
*/
	constructor() {
	
	}
	/**
 * @description Returns the Bases's DForm
*/
	getDForm():DzDForm {
	
	}

}
/**
 * @classdesc The Zone is one component of a DForm deformer. The others are the DzDForm, DzDFormBase and dformmodifier_dz.



The Zone is an independent DzNode derived object that is used to set the area of influence of the DForm's effect.



It is spherical in shape but can be scaled into any form of ellipsoid.



The Zone has an effect falloff zone based on a naturalspline_dz object. The falloff is the same along the x,y and z axis.



The Zone has draws itself as a wireframe sphere. The base size of this sphere is controlled by the DzFloatProperty "Radius". This sphere can be made transparent and is controlled by the DzFloatProperty "Opacity". The Zone is drawn with the maximum gradient color of the DForm.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/dformzone_dz}*/
class DzDFormZone extends DzNode {
	/**
 * @description Default Constructor.
 * @constructor
*/
	constructor() {
	
	}
	/**
 * @description Returns the DForm for the Zone.
*/
	getDForm():DzDForm {
	
	}
	/**
 * @description Returns the spline used to compute the falloff for the Zone.
*/
	getSpline():void {
	
	}

}
/**
 * @classdesc A DzDial provides a rounded range control like a speedometer.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/dial_dz}*/
class DzDial extends DzWidget {
	/**
 * @description The current line step
	*/
	lineStep:Number;
	/**
 * @description Holds the maximum value for the widget.
	*/
	max:Number;
	/**
 * @description Holds the minimum value for the widget.
	*/
	min:Number;
	/**
 * @description Holds whether or not to show notches.
	*/
	notchesVisible:Boolean;
	/**
 * @description Holds the current notch size. (Read Only)
	*/
	notchSize:Number;
	/**
 * @description Holds the target number of pixels between notches.
	*/
	notchTarget:Number;
	/**
 * @description The current page step
	*/
	pageStep:Number;
	/**
 * @description Holds whether or not to track the cursor, true by default.
	*/
	tracking:Boolean;
	/**
 * @description Holds the value represented by the widget.
	*/
	value:Number;
	/**
 * @description Holds whether or not the arrow can be rotated 360?, or if some space is left at the bottom.
	*/
	wrapping:Boolean;
	/**
 * @description Creates a dial widget as a child of the given parent widget.
 * @constructor
*/
	constructor(parent:DzWidget) {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when dial moves, passes the new value of the dial.
 * @signature "dialMoved(int)"
 * @event
*/
	dialMoved(value:Number):void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when the dial is pressed by the user.
 * @signature "dialPressed()"
 * @event
*/
	dialPressed():void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when the dial is released by the user.
 * @signature "dialReleased()"
 * @event
*/
	dialReleased():void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when the value of the dial changes, passes the new value.
 * @signature "valueChanged(int)"
 * @event
*/
	valueChanged(value:Number):void {
	
	}

}
/**
 * @classdesc This is the basic building block for DAZScript interfaces. DzDialog provides an independent window widget that in turn can act as the parent for other DAZScript widgets. Most custom DAZScript interfaces will be built starting with a DzDialog customized with Layout and DzWidget components.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/dialog_dz}*/
class DzDialog extends DzWidget {
	/**
 * @description Holds the title of the dialog.
	*/
	caption:String;
	/**
 * @description Holds the orientation of the dialog extension.
	*/
	orientation:DzWidget;
	/**
 * @description Holds whether or not the size grip is enabled.
	*/
	sizeGripEnabled:Boolean;
	/**
 * @description Default Constructor.
 * @constructor
*/
	constructor(parent=undefined:QWidget) {
	
	}
	/**
 * @description Closes the dialog.
*/
	close():Boolean {
	
	}
	/**
 * @description Displays the dialog to the user.
*/
	exec():Boolean {
	
	}
	/**
 * @description Return Value:
*/
	extension():DzWidget {
	
	}
	/**
 * @description Causes the extension widget for the dialog to be hidden.
*/
	hideExtension():void {
	
	}
	/**
 * @description Sets the button that will cause the dialog to close and return true.
*/
	setAcceptButton(btn:DzButton):DzButton {
	
	}
	/**
 * @description Sets the extension widget for the dialog.
*/
	setExtension(extension:DzWidget):DzWidget {
	
	}
	/**
 * @description Sets the button that will cause the dialog to close and return false.
*/
	setRejectButton(btn:DzButton):DzButton {
	
	}
	/**
 * @description Sets the extension widget visibility to onOff.
*/
	showExtension(onOff:Boolean):Boolean {
	
	}
	/**
 * @description Causes the extension widget for the dialog to be shown.
*/
	showExtension():void {
	
	}

}
/**
 * @classdesc Provides access to the file system directory structure. It provides functions for creating, removing, traversing, and searching directories.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/dir_dz}*/
class DzDir extends QObject {
	/**
 * @description ENUMERATOR: List directories that match the filters.
*/
	
	static Dirs;
	/**
 * @description ENUMERATOR: List files that match the filters.
*/
	
	static Files;
	/**
 * @description ENUMERATOR: List drives that match the filters.
*/
	
	static Drives;
	/**
 * @description ENUMERATOR: Do not list symbolic links.
*/
	
	static NoSymLinks;
	/**
 * @description ENUMERATOR: List directories, files, drives and symbolic links.
*/
	
	static AllEntries;
	/**
 * @description ENUMERATOR: List directories, files, drives and symbolic links.
*/
	
	static All;
	/**
 * @description ENUMERATOR: Type Mask
*/
	
	static TypeMask;
	/**
 * @description ENUMERATOR: List entries for which the application has read access. Needs to be combined with Dirs or Files.
*/
	
	static Readable;
	/**
 * @description ENUMERATOR: List entries for which the application has write access. Needs to be combined with Dirs or Files.
*/
	
	static Writable;
	/**
 * @description ENUMERATOR: List entries for which the application has execute access. Needs to be combined with Dirs or Files.
*/
	
	static Executable;
	/**
 * @description ENUMERATOR: Include Readable, Writable, and Executable entries
*/
	
	static PermissionMask;
	/**
 * @description ENUMERATOR: Include Readable, Writable, and Executable entries
*/
	
	static RWEMask;
	/**
 * @description ENUMERATOR: Only list entries that have been modified.
*/
	
	static Modified;
	/**
 * @description ENUMERATOR: List hidden entries.
*/
	
	static Hidden;
	/**
 * @description ENUMERATOR: List system entries.
*/
	
	static System;
	/**
 * @description ENUMERATOR: Access mask
*/
	
	static AccessMask;
	/**
 * @description ENUMERATOR: List all directories; don't apply filters to directory names.
*/
	
	static AllDirs;
	/**
 * @description ENUMERATOR: The filter should be treated as case sensitive.
*/
	
	static CaseSensitive;
	/**
 * @description ENUMERATOR: Do not list the special entries '.' and '..'.
*/
	
	static NoDotAndDotDot;
	/**
 * @description ENUMERATOR: Do not list the special entry '.'.
*/
	
	static NoDot;
	/**
 * @description ENUMERATOR: Do not list the special entry '..'.
*/
	
	static NoDotDot;
	/**
 * @description ENUMERATOR: Do not filter.
*/
	
	static NoFilter;
	/**
 * @description ENUMERATOR: Sort by name.
*/
	
	static Name;
	/**
 * @description ENUMERATOR: Sort by time (modification time).
*/
	
	static Time;
	/**
 * @description ENUMERATOR: Sort by size.
*/
	
	static Size;
	/**
 * @description ENUMERATOR: Do not sort.
*/
	
	static Unsorted;
	/**
 * @description ENUMERATOR: Mask for Sort by
*/
	
	static SortByMask;
	/**
 * @description ENUMERATOR: Put the directories first, then the files.
*/
	
	static DirsFirst;
	/**
 * @description ENUMERATOR: Reverse the sort order.
*/
	
	static Reversed;
	/**
 * @description ENUMERATOR: Sort case-insensitively.
*/
	
	static IgnoreCase;
	/**
 * @description ENUMERATOR: Put the files first, then the directories.
*/
	
	static DirsLast;
	/**
 * @description ENUMERATOR: Sort items appropriately using the current locale settings.
*/
	
	static LocaleAware;
	/**
 * @description ENUMERATOR: Sort by file type (extension).
*/
	
	static Type;
	/**
 * @description ENUMERATOR: Not sorted by default.
*/
	
	static NoSort;
	/**
 * @description Creates a directory object with the given path.
 * @constructor
*/
	constructor(path:String) {
	
	}
	/**
 * @description Return Value:
*/
	static cleanPath(path:String):String {
	
	}
	/**
 * @description Return Value:
*/
	current():void {
	
	}
	/**
 * @description Return Value:
*/
	currentPath():String {
	
	}
	/**
 * @description Return Value:
*/
	static fromNativeSeparators(pathName:String):String {
	
	}
	/**
 * @description Return Value:
*/
	home():void {
	
	}
	/**
 * @description Return Value:
*/
	homePath():String {
	
	}
	/**
 * @description Return Value:
*/
	static isAbsolutePath(path:String):Boolean {
	
	}
	/**
 * @description Return Value:
*/
	static isRelativePath(path:String):Boolean {
	
	}
	/**
 * @description Return Value:
*/
	static match(filter:String, fileName:String):Boolean {
	
	}
	/**
 * @description Return Value:
*/
	static match(filters:Array, fileName:String):Boolean {
	
	}
	/**
 * @description Return Value:
*/
	root():void {
	
	}
	/**
 * @description Return Value:
*/
	rootPath():String {
	
	}
	/**
 * @description Return Value:
*/
	separator():String {
	
	}
	/**
 * @description Sets the application's current working directory to path.
*/
	static setCurrent(path:String):Boolean {
	
	}
	/**
 * @description Return Value:
*/
	temp():void {
	
	}
	/**
 * @description Return Value:
*/
	tempPath():String {
	
	}
	/**
 * @description Return Value:
*/
	static toNativeSeparators(pathName:String):String {
	
	}
	/**
 * @description Deprecated
*/
	absFilePath(file:String):String {
	
	}
	/**
 * @description Parameter(s):
*/
	absoluteFilePath(fileName:String):String {
	
	}
	/**
 * @description Return Value:
*/
	absolutePath():String {
	
	}
	/**
 * @description Deprecated
*/
	absPath():String {
	
	}
	/**
 * @description Return Value:
*/
	canonicalPath():String {
	
	}
	/**
 * @description Changes the current directory to dirName.
*/
	cd(dirName:String):Boolean {
	
	}
	/**
 * @description Changes the directory by moving one directory up from the current directory.
*/
	cdUp():Boolean {
	
	}
	/**
 * @description Makes a copy of a file.
*/
	copy(srcFile:String, destFile:String):Boolean {
	
	}
	/**
 * @description Return Value:
*/
	count():Number {
	
	}
	/**
 * @description Return Value:
*/
	dirName():String {
	
	}
	/**
 * @description TODO:
Add description.
*/
	entryList(nameFilters:Array, filters:Filter, sort:SortFlag):Array {
	
	}
	/**
 * @description TODO:
Add description.
*/
	entryList(filters:Filter, sort:SortFlag):Array {
	
	}
	/**
 * @description TODO:
Add description.
*/
	entryList(nameFilter:String, filters:Filter, sort:SortFlag):Array {
	
	}
	/**
 * @description Parameter(s):
*/
	exists(name:String):Boolean {
	
	}
	/**
 * @description Return Value:
*/
	exists():Boolean {
	
	}
	/**
 * @description Deprecated
*/
	fileExists(fileName:String):Boolean {
	
	}
	/**
 * @description Return Value:
*/
	filePath(fileName:String):String {
	
	}
	/**
 * @description Return Value:
*/
	filter():Filter {
	
	}
	/**
 * @description Parameter(s):
*/
	getFilesFromDir(extentions:Array, recursive:Boolean):Array {
	
	}
	/**
 * @description Return Value:
*/
	isAbsolute():Boolean {
	
	}
	/**
 * @description Return Value:
*/
	isReadable():Boolean {
	
	}
	/**
 * @description Return Value:
*/
	isRelative():Boolean {
	
	}
	/**
 * @description Return Value:
*/
	isRoot():Boolean {
	
	}
	/**
 * @description Converts the directory path to an absolute path. If it is already absolute nothing happens.
*/
	makeAbsolute():Boolean {
	
	}
	/**
 * @description Creates a new directory.
*/
	mkdir(dirName:String):Boolean {
	
	}
	/**
 * @description Deprecated
*/
	mkdirs(dirName:String):Boolean {
	
	}
	/**
 * @description Creates all directories that do not already exist in dirpath.
*/
	mkpath(dirpath:String):Boolean {
	
	}
	/**
 * @description Moves a file to a new location.
*/
	move(srcFile:String, destFile:String):Boolean {
	
	}
	/**
 * @description Return Value:
*/
	nameFilters():Array {
	
	}
	/**
 * @description Return Value:
*/
	path():String {
	
	}
	/**
 * @description Refreshes the directory information.
*/
	refresh():void {
	
	}
	/**
 * @description Return Value:
*/
	relativeFilePath(fileName:String):String {
	
	}
	/**
 * @description Removes fileName from this directory.
*/
	remove(fileName:String):Boolean {
	
	}
	/**
 * @description Renames a file or directory from oldName to newName.
*/
	rename(oldName:String, newName:String):Boolean {
	
	}
	/**
 * @description Removes a directory.
*/
	rmdir(dirName:String):Boolean {
	
	}
	/**
 * @description Deprecated
*/
	rmdirs(dirName:String):Boolean {
	
	}
	/**
 * @description Removes all directories that exist in dirpath, provided that they are empty. This is the opposite of mkpath().
*/
	rmpath(dirPath:String):Boolean {
	
	}
	/**
 * @description Sets the current working directory of the application to be this directory.
*/
	setCurrent():Boolean {
	
	}
	/**
 * @description TODO:
Add description.
*/
	setFilter(filters:Filter):Filter {
	
	}
	/**
 * @description Sets the name filters used by entryList() to the list of filters specified by nameFilters. Each name filter is a wildcard (globbing) filter that understands * and ? wildcards.
*/
	setNameFilters(nameFilters:Array):Array {
	
	}
	/**
 * @description Sets the path of this directory to newPath.
*/
	setPath(path:String):String {
	
	}
	/**
 * @description Sets the sort order used by entryList(). The sort is specified by OR-ing values from the enum SortFlag.
*/
	setSorting(sort:SortFlag):SortFlag {
	
	}
	/**
 * @description Return Value:
*/
	sorting():SortFlag {
	
	}

}
/**
 * @classdesc TODO:
Add detailed description.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/distantlight_dz}*/
class DzDistantLight extends DzLight {
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static Point;
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static Rectangle;
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static Disc;
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static Sphere;
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static Cylinder;
	/**
 * @description Default Constructor. Creates a new distant light.
 * @constructor
*/
	constructor() {
	
	}
	/**
 * @description Return Value:
*/
	getDiffuseColor():Color {
	
	}
	/**
 * @description Return Value:
*/
	getDiffuseColorControl():DzColorProperty {
	
	}
	/**
 * @description Return Value:
*/
	getFarClippingPlane():Number {
	
	}
	/**
 * @description Return Value:
*/
	getFlux():Number {
	
	}
	/**
 * @description Return Value:
*/
	getIlluminationControl():DzEnumProperty {
	
	}
	/**
 * @description Return Value:
*/
	getIntensity():Number {
	
	}
	/**
 * @description Return Value:
*/
	getIntensityControl():DzFloatProperty {
	
	}
	/**
 * @description Return Value:
*/
	getIntensityScale():Number {
	
	}
	/**
 * @description Return Value:
*/
	getIntensityScaleControl():DzFloatProperty {
	
	}
	/**
 * @description Return Value:
*/
	getLightFluxControl():DzFloatProperty {
	
	}
	/**
 * @description Return Value:
*/
	getLightGeometry():void {
	
	}
	/**
 * @description Return Value:
*/
	getLightGeometryControl():DzEnumProperty {
	
	}
	/**
 * @description Return Value:
*/
	getLightHeight():Number {
	
	}
	/**
 * @description Return Value:
*/
	getLightHeightControl():DzFloatProperty {
	
	}
	/**
 * @description Return Value:
*/
	getLightPortalControl():DzBoolProperty {
	
	}
	/**
 * @description Return Value:
*/
	getLightTempature():Number {
	
	}
	/**
 * @description Return Value:
*/
	getLightTemperatureControl():DzFloatProperty {
	
	}
	/**
 * @description Return Value:
*/
	getLightTwoSided():Boolean {
	
	}
	/**
 * @description Return Value:
*/
	getLightTwoSidedControl():DzBoolProperty {
	
	}
	/**
 * @description Return Value:
*/
	getLightWidth():Number {
	
	}
	/**
 * @description Return Value:
*/
	getLightWidthControl():DzFloatProperty {
	
	}
	/**
 * @description Return Value:
*/
	getNearClippingPlane():Number {
	
	}
	/**
 * @description Return Value:
*/
	getPhotometricModeControl():DzBoolProperty {
	
	}
	/**
 * @description Return Value:
*/
	getRenderEmitterControl():DzBoolProperty {
	
	}
	/**
 * @description Return Value:
*/
	getShadowBiasControl():DzFloatProperty {
	
	}
	/**
 * @description Return Value:
*/
	getShadowColorControl():DzColorProperty {
	
	}
	/**
 * @description Return Value:
*/
	getShadowIntensityControl():DzFloatProperty {
	
	}
	/**
 * @description Return Value:
*/
	getShadowSoftnessControl():DzFloatProperty {
	
	}
	/**
 * @description Return Value:
*/
	getWSDirection():DzVec3 {
	
	}
	/**
 * @description Return Value:
*/
	isLightPortal():Boolean {
	
	}
	/**
 * @description Return Value:
*/
	isOn():Boolean {
	
	}
	/**
 * @description Return Value:
*/
	photometricMode():Boolean {
	
	}
	/**
 * @description Return Value:
*/
	renderEmitter():Boolean {
	
	}

}
/**
 * @classdesc TODO:
Add detailed description.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/dockarea_dz}*/
class DzDockArea extends QWidget {
	/**
 * @description Parameter(s):
*/
	getColumn(which:Number):DzDockAreaColumn {
	
	}
	/**
 * @description Return Value:
*/
	getNumColumns():Number {
	
	}

}
/**
 * @classdesc TODO:
Add detailed description.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/dockareacolumn_dz}*/
class DzDockAreaColumn extends QWidget {
	/**
 * @description Return Value:
*/
	depth():Number {
	
	}
	/**
 * @description Return Value:
*/
	getNumWindows():Number {
	
	}
	/**
 * @description Return Value:
*/
	getPreferredDepth():Number {
	
	}
	/**
 * @description Parameter(s):
*/
	getWindow(which:Number):DzDockWindow {
	
	}
	/**
 * @description Return Value:
*/
	isMinimized():Boolean {
	
	}
	/**
 * @description Minimizes the column, if it is not already. The column shrinks so that only its resizing handle is visible.
*/
	minimize():void {
	
	}
	/**
 * @description Return Value:
*/
	minimumDepth():Number {
	
	}
	/**
 * @description Restores the column to its previous depth if the column is currently minimized.
*/
	restore():void {
	
	}
	/**
 * @description Sets the 'depth' of the column.
*/
	setPreferredDepth(depth:Number):Number {
	
	}
	/**
 * @description Toggles whether this column is minimized - if minimized, the column restores itself, if full size the column becomes minimized.
*/
	toggleMinimized():void {
	
	}

}
/**
 * @classdesc This class provides access to a custom bar in the interface that can be docked with a DzToolBar. This class is not intended to be constructed directly, rather it serves as a base class for other custom dockable bars. 



See Also:


 DzPaneMgr.findDockBar(), DzPaneMgr.findDockBarByName() and DzPaneMgr.getDockBar()
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/dockbar_dz}*/
class DzDockBar {
	/**
 * @description ENUMERATOR: The dock area at the top of a DzActivityLayout.
*/
	
	static ToolBarTop;
	/**
 * @description ENUMERATOR: The dock area at the bottom of a DzActivityLayout.
*/
	
	static ToolBarBottom;
	/**
 * @description ENUMERATOR: The dock area on the left side of a DzActivityLayout.
*/
	
	static ToolBarLeft;
	/**
 * @description ENUMERATOR: The dock area on the right side of a DzActivityLayout.
*/
	
	static ToolBarRight;
	/**
 * @description ENUMERATOR: No dock area. The bar cannot be docked.
*/
	
	static NoToolBarArea;
	/**
 * @description Docks the bar in the specified area on the DzActivityLayout, and shows the bar if it is hidden.
*/
	dock(area:DzDockBar.DockArea, beforeBar:String):DockArea {
	
	}
	/**
 * @description Return Value:
*/
	dockedArea():DockArea {
	
	}
	/**
 * @description Return Value:
*/
	isClosed():Boolean {
	
	}
	/**
 * @description Sets whether the bar is closed (not displayed), or open (displayed).
*/
	setClosed(onOff:Boolean):Boolean {
	
	}
	/**
 * @description Undocks the bar, moves it to the given global coordinates, and shows the bar if it is hidden.
*/
	undock(pos:Point):Point {
	
	}

}
/**
 * @classdesc TODO:
Add detailed description.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/dockwindow_dz}*/
class DzDockWindow {
	/**
 * @description Re-Docks this window in the last area it was docked in.
*/
	dock():void {
	
	}
	/**
 * @description Docks this window in the given area.
*/
	dock(area:DzDockArea, newColumn:Boolean):DzDockArea {
	
	}
	/**
 * @description Docks this window in the given area in the given column number.
*/
	dock(area:DzDockArea, columnNum:Number):DzDockArea {
	
	}
	/**
 * @description Return Value:
*/
	getArea():DzDockArea {
	
	}
	/**
 * @description Return Value:
*/
	getColumnDimension():Number {
	
	}
	/**
 * @description Return Value:
*/
	getColumnNum():Number {
	
	}
	/**
 * @description Return Value:
*/
	getLastSize():Size {
	
	}
	/**
 * @description Return Value:
*/
	getLength():Number {
	
	}
	/**
 * @description Return Value:
*/
	getMinimumLength():Number {
	
	}
	/**
 * @description Return Value:
*/
	getPreferredLength():Number {
	
	}
	/**
 * @description Return Value:
*/
	isDocked():Boolean {
	
	}
	/**
 * @description Return Value:
*/
	isLengthFixed():Boolean {
	
	}
	/**
 * @description Return Value:
*/
	isMinimized():Boolean {
	
	}
	/**
 * @description Sets this window to a minimized state.
*/
	minimize():void {
	
	}
	/**
 * @description Returns this window to its former length if it is minimized.
*/
	restore():void {
	
	}
	/**
 * @description Store the width (or height) of the column (or row) that the window is docked in.
*/
	setColumnDimension(dimension:Number):Number {
	
	}
	/**
 * @description Sets the column of the dock area that this window was last docked in.
*/
	setColumnNum(columnNum:Number):Number {
	
	}
	/**
 * @description Sets the length for this window while docked.
*/
	setLength(length:Number):Number {
	
	}
	/**
 * @description Sets the preferred length for this window while docked.
*/
	setPreferredLength(length:Number):Number {
	
	}
	/**
 * @description Sets the visibility of the resizing handles.
*/
	setResizeHandlesVisible(yesNo:Boolean):Boolean {
	
	}
	/**
 * @description Sets the visibility of the title bar.
*/
	setTitleBarVisible(yesNo:Boolean):Boolean {
	
	}
	/**
 * @description Toggles this window between its docked and undocked state. Calls dock() if this window is undocked, or undock() if it is docked.
*/
	toggleDock():void {
	
	}
	/**
 * @description Toggles this window between the minimized and restored state.
*/
	toggleMinimized():void {
	
	}
	/**
 * @description Undocks this window.
*/
	undock():void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when this window is docked.
 * @signature "docked()"
 * @event
*/
	docked():void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when the value returned by length() has changed.
 * @signature "lengthChanged()"
 * @event
*/
	lengthChanged():void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when this window becomes minimized.
 * @signature "minimized(DzDockWindow*)"
 * @event
*/
	minimized(window:DzDockWindow):void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description TODO: Add Description
 * @signature TODO: Add Description
 * @event
*/
	outlineDrawFinished():void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description TODO: Add Description
 * @signature TODO: Add Description
 * @event
*/
	outlineDrawStarting():void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when this window is restored.
 * @signature "restored(DzDockWindow*)"
 * @event
*/
	restored(window:DzDockWindow):void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when this window is undocked.
 * @signature "undocked()"
 * @event
*/
	undocked():void {
	
	}

}
/**
 * @classdesc Represents an attribute node in a DOM document.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/domattr_dz}*/
class DzDomAttr extends DzDomNode {
	/**
 * @description [Read Only] The name of the attribute.
	*/
	name:String;
	/**
 * @description The value of the attribute.
	*/
	value:String;
	/**
 * @description Default constructor. Typically, you will not construct these directly, but will call DzDomElement.setAttribute() or DzDomDocument.createAttribute() to create a new attribute node as a member of an existing element or document.
 * @constructor
*/
	constructor() {
	
	}
	/**
 * @description Return Value:
*/
	ownerElement():DzDomNode {
	
	}
	/**
 * @description Return Value:
*/
	specified():Boolean {
	
	}

}
/**
 * @classdesc Represents a basic (empty) node.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/dombasicnode_dz}*/
class DzDomBasicNode extends DzDomNode {
	/**
 * @description Default constructor
 * @constructor
*/
	constructor() {
	
	}

}
/**
 * @classdesc Represents a CDATA Section node in a DOM document. CDATA Sections can contain special characters that would otherwise be interpreted as part of the markup language. This provides a way for embedding text that contains special characters without the need for escaping all those characters.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/domcdatasection_dz}*/
class DzDomCDATASection extends DzDomText {
	/**
 * @description Default constructor. Typically, you will not construct these directly, but will call DzDomDocument.createCDATASection() to create a new CDATA node as a member of a document.
 * @constructor
*/
	constructor() {
	
	}

}
/**
 * @classdesc Represents a character data node in a DOM document.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/domcharacterdata_dz}*/
class DzDomCharacterData extends DzDomNode {
	/**
 * @description The text data for the node
	*/
	data:String;
	/**
 * @description [Read Only] The length of the data
	*/
	length:Number;
	/**
 * @description Default constructor. Typically, you will not construct these directly, but will call DzDomDocument.createText() or DzDomDocument.createCDATASection() to create a new character data node as a member of a document.
 * @constructor
*/
	constructor() {
	
	}
	/**
 * @description Appends arg to the end of the current text for this node.
*/
	appendData(arg:String):String {
	
	}
	/**
 * @description Removes count characters from this node's data beginning at offset.
*/
	deleteData(offset:Number, count:Number):Number {
	
	}
	/**
 * @description Inserts arg into the current text for this node at position offset.
*/
	insertData(offset:Number, arg:String):Number {
	
	}
	/**
 * @description Replaces count characters in this node's data beginning at offset with the string arg
*/
	replaceData(offset:Number, count:Number, arg:String):Number {
	
	}
	/**
 * @description Return Value:
*/
	substringData(offset:Number, count:Number):String {
	
	}

}
/**
 * @classdesc Represents a comment node in a DOM document.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/domcomment_dz}*/
class DzDomComment extends DzDomCharacterData {
	/**
 * @description Default constructor. Typically, you will not construct these directly, but will call DzDomDocument.createComment() to create a new comment node as a member of a document.
 * @constructor
*/
	constructor() {
	
	}

}
/**
 * @classdesc Represents a DOM document. This is typically the only DOM node that you will construct directly, all other nodes should be created as a member of a document by calling one of the following functions:  * createElement( String tagName )


 createDocumentFragment()

 createTextNode( String value )

 createComment( String value )

 createCDATASection( String value )

 createProcessingInstruction( String target, String data )

 createAttribute( String name )

 createEntityReference( String name )

 createElementNS( String nsURI, String qName )

 createAttributeNS( String nsURI, String qName )
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/domdocument_dz}*/
class DzDomDocument extends DzDomNode {
	/**
 * @description Default constructor
 * @constructor
*/
	constructor() {
	
	}
	/**
 * @description Overloaded constructor. Loads the given file name as the content for this document.
 * @constructor
*/
	constructor(filename:String) {
	
	}
	/**
 * @description Return Value:
*/
	createAttribute(name:String):DzDomNode {
	
	}
	/**
 * @description Return Value:
*/
	createAttributeNS(nsURI:String, qName:String):DzDomNode {
	
	}
	/**
 * @description Return Value:
*/
	createCDATASection(value:String):DzDomNode {
	
	}
	/**
 * @description Return Value:
*/
	createComment(value:String):DzDomNode {
	
	}
	/**
 * @description Return Value:
*/
	createDocumentFragment():DzDomNode {
	
	}
	/**
 * @description Return Value:
*/
	createElement(tagName:String):DzDomNode {
	
	}
	/**
 * @description Return Value:
*/
	createElementNS(nsURI:String, qName:String):DzDomNode {
	
	}
	/**
 * @description Return Value:
*/
	createEntityReference(name:String):DzDomNode {
	
	}
	/**
 * @description Return Value:
*/
	createProcessingInstruction(target:String, data:String):DzDomNode {
	
	}
	/**
 * @description Return Value:
*/
	createTextNode(value:String):DzDomNode {
	
	}
	/**
 * @description Return Value:
*/
	doctype():DzDomNode {
	
	}
	/**
 * @description Return Value:
*/
	elementById(id:String):DzDomNode {
	
	}
	/**
 * @description Return Value:
*/
	importNode(node:DzDomNode, deep:Boolean):DzDomNode {
	
	}
	/**
 * @description Sets the content of the document by reading the file with the given string.
*/
	loadContent(filename:String):Boolean {
	
	}
	/**
 * @description Saves the contents of the document to the file with the given name.
*/
	saveContent(filename:String):Boolean {
	
	}
	/**
 * @description Sets the content of the document from the given string.
*/
	setContent(text:String):Boolean {
	
	}
	/**
 * @description Return Value:
*/
	toString():String {
	
	}

}
/**
 * @classdesc Represents a document fragment node in a DOM document.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/domdocumentfragment_dz}*/
class DzDomDocumentFragment extends DzDomNode {
	/**
 * @description Default constructor. Typically, you will not construct these directly, but will call DzDomDocument.createDocumentFragment() to create a new fragment as a member of a document.
 * @constructor
*/
	constructor() {
	
	}

}
/**
 * @classdesc Represents a document type node in a DOM document. You usually will not construct these, but will get them from an existing document by calling DzDomDocument.doctype().
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/domdocumenttype_dz}*/
class DzDomDocumentType extends DzDomNode {
	/**
 * @description [Read Only] The internal subset of the document type
	*/
	internalSubset:String;
	/**
 * @description [Read Only] The name of the node
	*/
	name:String;
	/**
 * @description [Read Only] The public identifier of the external DTD subset
	*/
	publicId:String;
	/**
 * @description [Read Only] The system identifier of the external DTD subset
	*/
	systemId:String;
	/**
 * @description Default constructor
 * @constructor
*/
	constructor() {
	
	}

}
/**
 * @classdesc Represents an element node in a DOM document.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/domelement_dz}*/
class DzDomElement extends DzDomNode {
	/**
 * @description The tag name of the element.
	*/
	tagName:String;
	/**
 * @description Default constructor. Typically, you will not construct these directly, but will call DzDomDocument.createElement() to create a new element node as a member of a document.
 * @constructor
*/
	constructor() {
	
	}
	/**
 * @description Return Value:
*/
	attribute(name:String):String {
	
	}
	/**
 * @description Return Value:
*/
	attribute(name:String, defValue:String):String {
	
	}
	/**
 * @description Return Value:
*/
	attributeNode(name:String):DzDomNode {
	
	}
	/**
 * @description Return Value:
*/
	attributeNodeNS(nsURI:String, localName:String):DzDomNode {
	
	}
	/**
 * @description Return Value:
*/
	attributeNS(nsURI:String, localName:String, defValue:String):String {
	
	}
	/**
 * @description Return Value:
*/
	hasAttribute(name:String):Boolean {
	
	}
	/**
 * @description Return Value:
*/
	hasAttributeNS(nsURI:String, localName:String):Boolean {
	
	}
	/**
 * @description Removes the attribute called name.
*/
	removeAttribute(name:String):String {
	
	}
	/**
 * @description Removes oldAttr from the element.
*/
	removeAttributeNode(oldAttr:DzDomNode):DzDomNode {
	
	}
	/**
 * @description Removes the attribute called name in the  namespace.
*/
	removeAttributeNS(nsURI:String, localName:String):String {
	
	}
	/**
 * @description Adds an attribute called name with value. If an attribute with the given name already exists, it value is set to value.
*/
	setAttribute(name:String, value:String):String {
	
	}
	/**
 * @description Adds newAttr to this element. If an attribute with the same name already exists, it is replaced with the new one.
*/
	setAttributeNode(newAttr:DzDomNode):DzDomNode {
	
	}
	/**
 * @description Adds newAttr to this element. If an attribute with the same name already exists, it is replaced with the new one.
*/
	setAttributeNodeNS(newAttr:DzDomNode):DzDomNode {
	
	}
	/**
 * @description Adds an attribute called qName in the nsURI namespace with value. If an attribute with the given name already exists, it value is set to value.
*/
	setAttributeNS(nsURI:String, qName:String, value:String):String {
	
	}

}
/**
 * @classdesc Represents an entity node in a DOM document.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/domentity_dz}*/
class DzDomEntity extends DzDomNode {
	/**
 * @description [Read Only] The name of the notation for the entity.
	*/
	notationName:String;
	/**
 * @description [Read Only] The public identifier of the entity.
	*/
	publicId:String;
	/**
 * @description [Read Only] The system identifier of the entity.
	*/
	systemId:String;
	/**
 * @description Default constructor
 * @constructor
*/
	constructor() {
	
	}

}
/**
 * @classdesc Represents an entity node in a DOM document.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/domentityreference_dz}*/
class DzDomEntityReference extends DzDomNode {
	/**
 * @description Default constructor. Typically, you will not construct these directly, but will call DzDomDocument.createEntityReference() to create a new entity reference node as a member of a document.
 * @constructor
*/
	constructor() {
	
	}

}
/**
 * @classdesc This is an abstract base class that provides general functionality for DAZ Script DOM components.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/domnode_dz}*/
class DzDomNode extends QObject {
	/**
 * @description The local name of the node. (Read Only)
	*/
	localName:String;
	/**
 * @description The namespace of the node. (Read Only)
	*/
	namespaceURI:String;
	/**
 * @description The name of the node. (Read Only)
	*/
	nodeName:String;
	/**
 * @description The type of the node. (Read Only)
	*/
	nodeType:NodeType;
	/**
 * @description The node value.
	*/
	nodeValue:String;
	/**
 * @description The node prefix.
	*/
	prefix:String;
	/**
 * @description ENUMERATOR: A DOM Element.  See Also: DzDomElement
*/
	
	static ElementNode;
	/**
 * @description ENUMERATOR: A DOM Attribute.  See Also: DzDomAttr
*/
	
	static AttributeNode;
	/**
 * @description ENUMERATOR: Plain Text in the DOM.  See Also: DzDomText
*/
	
	static TextNode;
	/**
 * @description ENUMERATOR: Character DATA node in the DOM.  See Also: DzDomCDATASection
*/
	
	static CDATASectionNode;
	/**
 * @description ENUMERATOR: A Reference to a DOM Entity.  See Also: DzDomEntityReference
*/
	
	static EntityReferenceNode;
	/**
 * @description ENUMERATOR: A DOM Entity.  See Also: DzDomEntity
*/
	
	static EntityNode;
	/**
 * @description ENUMERATOR: A DOM Processing Instruction.  See Also: DzDomProcessingInstruction
*/
	
	static ProcessingInstructionNode;
	/**
 * @description ENUMERATOR: A DOM Comment.  See Also: DzDomComment
*/
	
	static CommentNode;
	/**
 * @description ENUMERATOR: A DOM Document.  See Also: DzDomDocument
*/
	
	static DocumentNode;
	/**
 * @description ENUMERATOR: A DOM Document Type.  See Also: DzDomDocumentType
*/
	
	static DocumentTypeNode;
	/**
 * @description ENUMERATOR: A DOM Document Fragment.  See Also: DzDomDocumentFragment
*/
	
	static DocumentFragmentNode;
	/**
 * @description ENUMERATOR: A DOM Notation.  See Also: DzDomNotation
*/
	
	static NotationNode;
	/**
 * @description ENUMERATOR: A basic node.  See Also: DzDomBasicNode
*/
	
	static BaseNode;
	/**
 * @description ENUMERATOR: A Character Data node.  See Also: DzDomCharacterData
*/
	
	static CharacterDataNode;
	/**
 * @description Appends child to the end of this node's child list.
*/
	appendChild(child:DzDomNode):void {
	
	}
	/**
 * @description Converts the node into an invalid (Null) node. Its type and contents are cleared.
*/
	clear():Boolean {
	
	}
	/**
 * @description Return Value:
*/
	cloneNode(deep:Boolean):Boolean {
	
	}
	/**
 * @description Return Value:
*/
	firstChild():void {
	
	}
	/**
 * @description Return Value:
*/
	hasAttributes():Boolean {
	
	}
	/**
 * @description Return Value:
*/
	hasChildNodes():Boolean {
	
	}
	/**
 * @description Inserts newChild into this node's child list following refChild.
*/
	insertAfter(newChild:DzDomNode, refChild:DzDomNode):void {
	
	}
	/**
 * @description Inserts newChild into this node's child list in front of refChild.
*/
	insertBefore(newChild:DzDomNode, refChild:DzDomNode):void {
	
	}
	/**
 * @description Return Value:
*/
	isAttr():Boolean {
	
	}
	/**
 * @description Return Value:
*/
	isCDATASection():Boolean {
	
	}
	/**
 * @description Return Value:
*/
	isCharacterData():Boolean {
	
	}
	/**
 * @description Return Value:
*/
	isComment():Boolean {
	
	}
	/**
 * @description Return Value:
*/
	isDocument():Boolean {
	
	}
	/**
 * @description Return Value:
*/
	isDocumentFragment():Boolean {
	
	}
	/**
 * @description Return Value:
*/
	isDocumentType():Boolean {
	
	}
	/**
 * @description Return Value:
*/
	isElement():Boolean {
	
	}
	/**
 * @description Return Value:
*/
	isEntity():Boolean {
	
	}
	/**
 * @description Return Value:
*/
	isEntityReference():Boolean {
	
	}
	/**
 * @description Return Value:
*/
	isNotation():Boolean {
	
	}
	/**
 * @description Return Value:
*/
	isNull():Boolean {
	
	}
	/**
 * @description Return Value:
*/
	isProcessingInstruction():Boolean {
	
	}
	/**
 * @description Return Value:
*/
	isSupported(feature:String, version:String):Boolean {
	
	}
	/**
 * @description Return Value:
*/
	isText():Boolean {
	
	}
	/**
 * @description Return Value:
*/
	lastChild():void {
	
	}
	/**
 * @description Return Value:
*/
	namedItem(name:String):String {
	
	}
	/**
 * @description Return Value:
*/
	nextSibling():void {
	
	}
	/**
 * @description Converts all the node's children into standard form (e.g. adjacent text nodes will be merged )
*/
	normalize():void {
	
	}
	/**
 * @description Return Value:
*/
	ownerDocument():void {
	
	}
	/**
 * @description Return Value:
*/
	parentNode():void {
	
	}
	/**
 * @description Return Value:
*/
	previousSibling():void {
	
	}
	/**
 * @description Removes oldChild from this node's child list.
*/
	removeChild(oldChild:DzDomNode):void {
	
	}
	/**
 * @description Inserts newChild into this node's child list in place of refChild.
*/
	replaceChild(newChild:DzDomNode, oldChild:DzDomNode):void {
	
	}

}
/**
 * @classdesc Represents a notation node in a DOM document.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/domnotation_dz}*/
class DzDomNotation extends DzDomNode {
	/**
 * @description [Read Only] The public identifier of the notation.
	*/
	publicId:String;
	/**
 * @description [Read Only] The system identifier of the notation.
	*/
	systemId:String;
	/**
 * @description Default constructor.
 * @constructor
*/
	constructor() {
	
	}

}
/**
 * @classdesc Represents an entity node in a DOM document.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/domprocessinginstruction_dz}*/
class DzDomProcessingInstruction extends DzDomNode {
	/**
 * @description The data of the processing instruction.
	*/
	data:String;
	/**
 * @description [Read Only] The target of the processing instruction.
	*/
	target:String;
	/**
 * @description Default constructor. Typically, you will not construct these directly, but will call DzDomDocument.createProcessingInstruction() to create a new processing instruction node as a member of a document.
 * @constructor
*/
	constructor() {
	
	}

}
/**
 * @classdesc Represents a text node in a DOM document.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/domtext_dz}*/
class DzDomText extends DzDomCharacterData {
	/**
 * @description Default constructor. Typically, you will not construct these directly, but will call DzDomDocument.createText() to create a new text node as a member of a document.
 * @constructor
*/
	constructor() {
	
	}
	/**
 * @description Splits the text node into two text nodes with offset characters in the first node.
*/
	splitText(offset:Number):DzDomNode {
	
	}

}
/**
 * @classdesc TODO:
Add detailed description.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/drawstyle_dz}*/
class DzDrawStyle extends DzBase {
	/**
 * @description Whether or not visual cues (such as bounding boxes for selected nodes) should be drawn when appropriate.
	*/
	drawCuesDefault:Boolean;
	/**
 * @description Whether or not only objects should be drawn
	*/
	drawObjectsOnly:Boolean;
	/**
 * @description Whether or not only shadow casters should be drawn
	*/
	drawShadowCastersOnly:Boolean;
	/**
 * @description Read-Only - Whether or not the style is a user style
	*/
	isUserStyle:Boolean;
	/**
 * @description Whether or not the draw is render quality.
	*/
	renderQuality:Boolean;
	/**
 * @description ENUMERATOR: Draws unlit wire-frame bounding boxes
*/
	
	static WireBox;
	/**
 * @description ENUMERATOR: Draws smooth-shaded bounding boxes
*/
	
	static SolidBox;
	/**
 * @description ENUMERATOR: Draws unlit wire-frames
*/
	
	static Wireframe;
	/**
 * @description ENUMERATOR: Draws lit wire-frames
*/
	
	static LitWireframe;
	/**
 * @description ENUMERATOR: Draws unlit wire-frames, front geometry facing only
*/
	
	static HiddenLine;
	/**
 * @description ENUMERATOR: Draws lit smooth shaded objects with wireframes imposed
*/
	
	static WireShaded;
	/**
 * @description ENUMERATOR: Draws lit smooth shaded objects
*/
	
	static SmoothShaded;
	/**
 * @description ENUMERATOR: Draws lit smooth shaded objects with any texture/transparency maps applied and wireframes imposed
*/
	
	static WireTextured;
	/**
 * @description ENUMERATOR: Draws lit smooth shaded objects with any texture/transparency maps applied
*/
	
	static Textured;
	/**
 * @description ENUMERATOR: Draws lit smooth shaded objects with a GLSL shader applied
*/
	
	static GLSLShader;
	/**
 * @description ENUMERATOR: Draws unlit smooth shaded objects
*/
	
	static Unshaded;
	/**
 * @description ENUMERATOR: Special mode for using OpenGL to determine a selected object when the user clicks in the view
*/
	
	static Picking;
	/**
 * @description Return Value:
*/
	drawCues():Boolean {
	
	}
	/**
 * @description If the current shade style is not using lighting, this method will set the shade style to the nearest match that uses single-pass drawing and lighting.
*/
	forceUseLighting():void {
	
	}
	/**
 * @description Return Value:
*/
	pass():Number {
	
	}
	/**
 * @description Return Value:
*/
	selectionMapsEnabled():Boolean {
	
	}
	/**
 * @description Return Value:
*/
	shader():void {
	
	}
	/**
 * @description Return Value:
*/
	shadeStyle():ShadeStyle {
	
	}

}
/**
 * @classdesc A Dynamic Divider takes two DzWidget objects and places a divider bar between them. It handles resize events, as well as toggling of the divider bar if toggling is enabled.



For complex arrangements you can nest instances of this class by specifying them as one of the widgets via setFirstWidget( DzWidget ) or setSecondWidget( DzWidget )
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/dynamicdividerwgt_dz}*/
class DzDynamicDividerWgt extends DzWidget {
	/**
 * @description Holds the actual position of the divider bar as a percentage in decimal format (0.5 = 50%).
	*/
	actualDividerPercent:Number;
	/**
 * @description Holds the orientation of the divider bar.
	*/
	dividerOrientation:DividerOrientation;
	/**
 * @description Holds the type of divider bar used.
	*/
	dividerType:BarStyle;
	/**
 * @description Holds the margin surrounding this object.
	*/
	margin:Number;
	/**
 * @description Holds whether the divider bar is currently minimized.
	*/
	minimized:Boolean;
	/**
 * @description Holds whether the divider bar can be moved by dragging.
	*/
	moveDisabled:Boolean;
	/**
 * @description Holds the preferred position of the divider bar as a percentage in decimal format (0.5 = 50%).
	*/
	preferredDividerPercent:Number;
	/**
 * @description Holds the preferred widget type.
	*/
	preferredWidget:WidgetType;
	/**
 * @description Holds the preferred extent of the widget. This value is only used if the value of DzDynamicDividerWgt.preferredWidget is not DzDividerBar.WTNone.
	*/
	preferredWidgetExtent:Number;
	/**
 * @description Holds the spacing between the widgets and the divider bar.
	*/
	spacing:Number;
	/**
 * @description Holds the direction the toggle bar will be minimized when clicked.
	*/
	toggleDirection:WidgetType;
	/**
 * @description Holds whether the divider bar can be minimized when clicked.
	*/
	toggleEnabled:Boolean;
	/**
 * @description ENUMERATOR: Use the thick divider bar.
*/
	
	static BSFull;
	/**
 * @description ENUMERATOR: Use the medium sized divider bar.
*/
	
	static BSSemi;
	/**
 * @description ENUMERATOR: Use the thin divider bar.
*/
	
	static BSThin;
	/**
 * @description ENUMERATOR: Represents a horizontal divider bar (widgets are top and bottom).
*/
	
	static DOHorizontal;
	/**
 * @description ENUMERATOR: Represents a vertical divider bar (widgets are left and right).
*/
	
	static DOVertical;
	/**
 * @description ENUMERATOR: Stretch the left (or top) widget when resizing.
*/
	
	static RTStretchFirst;
	/**
 * @description ENUMERATOR: Stretch the right (or bottom) widget when resizing.
*/
	
	static RTStretchSecond;
	/**
 * @description ENUMERATOR: Stretch both widgets equally when resizing.
*/
	
	static RTStretchBoth;
	/**
 * @description ENUMERATOR: References the widget to the left of the divider if the orientation is vertical or the widget to the top of the divider if the orientation is horizontal.
*/
	
	static WTLeftOrTop;
	/**
 * @description ENUMERATOR: References the widget to the right of the divider if the orientation is vertical or the widget to the bottom of the divider if the orientation is horizontal.
*/
	
	static WTRightOrBottom;
	/**
 * @description ENUMERATOR: References both widgets of the divider bar.
*/
	
	static WTBoth;
	/**
 * @description ENUMERATOR: References neither widget of the divider bar.
*/
	
	static WTNone;
	/**
 * @description Instantiates DzDynamicDividerWgt.
 * @constructor
*/
	constructor(parent:DzWidget) {
	
	}
	/**
 * @description Instantiates DzDynamicDividerWgt.
 * @constructor
*/
	constructor(parent:DzWidget, firstChild:DzWidget, secondChild:DzWidget) {
	
	}
	/**
 * @description Moves the divider distance pixels from the current location. If the new location will cause the divider to be displayed in an invalid location (based on minimum size requirements of the widgets), it will be moved and displayed as close as possible to the desired location.
*/
	moveDivider(distance:Number):Number {
	
	}
	/**
 * @description Sets the divider bar to be used for this object
*/
	setDividerBar(orientation:DividerOrientation, barStyle:BarStyle):DividerOrientation {
	
	}
	/**
 * @description Sets the left (or top) widget, depending on the orientation.
*/
	setFirstWidget(first:DzWidget):DzWidget {
	
	}
	/**
 * @description Sets the preferred extent (width or height depending on orientation) for the specified widget. If this extent cannot be used (usually due to minimum size constraints) then the divider will be positioned as close as possible to the preferred extent.
*/
	setPreferredWidgetExtent(widget:WidgetType, extent:Number):WidgetType {
	
	}
	/**
 * @description Sets the right (or bottom) widget, depending on the orientation.
*/
	setSecondWidget(second:DzWidget):DzWidget {
	
	}
	/**
 * @description Toggles the widget to the specified minimized state, if needed.
*/
	setToggleState(minimized:Boolean):Boolean {
	
	}
	/**
 * @description Swaps the left (or top) and right (or bottom) widget.
*/
	swapFirstAndSecondWidgets():void {
	
	}
	/**
 * @description Toggles the widget in the direction specified by toggleDirection. If toggling is disabled, this method has no effect. If either the first or second widget is undefined, this method will also have no effect.
*/
	toggleWidget():void {
	
	}

}
/**
 * @classdesc Represents an edge between two vertices.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/edge_dz}*/
class DzEdge extends Object {
	/**
 * @description The offset from the cage
	*/
	cageOffsetA:Number;
	/**
 * @description The index of a DzFacet this edge belongs to
	*/
	facetA:Number;
	/**
 * @description The index of the other DzFacet this edge belongs to (if any), otherwise this is an open edge
	*/
	facetB:Number;
	/**
 * @description The index of this edge
	*/
	index:Number;
	/**
 * @description The offset …
	*/
	offsetA:Number;
	/**
 * @description The offset …
	*/
	offsetB:Number;
	/**
 * @description The index of the vertex this edge originates at
	*/
	vertIdx1:Number;
	/**
 * @description The index of the vertex this edge ends at
	*/
	vertIdx2:Number;
	/**
 * @description Default Constructor.
 * @constructor
*/
	constructor() {
	
	}
	/**
 * @description TODO:
Add description.
 * @constructor
*/
	constructor(vertex1:Number, vertex2:Number) {
	
	}
	/**
 * @description TODO:
Add description.
 * @constructor
*/
	constructor(edge:DzEdge) {
	
	}
	/**
 * @description Return Value:
*/
	isOpenEdge():Boolean {
	
	}

}
/**
 * @classdesc Classes derived from DzElement may have any number of properties (objects derived from DzProperty). Those properties may be added and removed at runtime and may be specified as animatable or not. There are several types of properties that have been supplied with the Studio SDK. Property names must be unique within an element. A variety of methods are provided to allow easy traversal and/or searching of the properties list for an object.



Methods are provided to clear animation data on all properties of an object either over a range or over all time.



DzElement takes ownership of all properties added via addProperty(). Subclasses should not attempt to delete properties that have been added to the element.



DzElement also handles saving and loading of all properties. When DzElement loads a property from a file, it will delete any existing property of the same name and replace it with the new property read in - subclasses are responsible for updating any local references to properties whenever a file is loaded. The easiest and most reliable way to do this is for the subclass to write out and read back in any local pointers it maintains to properties. Another approach would be for the subclass to reimplement the postLoadFile() function and update its references by calling findProperty() to lookup the properties by name.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/element_dz}*/
class DzElement extends DzBase {
	/**
 * @description Holds the number used to uniquely identify this element in the scene. (Read Only)
	*/
	elementID:Number;
	/**
 * @description Hang a new custom data item off of this element. Data items will be deleted when this element is deleted, so ownership of the data item is transferred to the element after this call. Do not attempt to delete the data item yourself unless you call removeDataItem() first.
*/
	addDataItem(item:DzElementData):DzError {
	
	}
	/**
 * @description Add a new private property that will be available for connections or direct editing.
*/
	addPrivateProperty(prop:DzProperty):DzError {
	
	}
	/**
 * @description Add a new property. Adds a new property that will be available for connections or direct editing.
*/
	addProperty(prop:DzProperty):DzError {
	
	}
	/**
 * @description Begins an editing operation for this element - DzProperty.beginEdit() will be called for all properties belonging to this element.
*/
	beginEdit():void {
	
	}
	/**
 * @description Cancels an editing operation for this element - DzProperty.cancelEdit() will be called for all properties belonging to this element.
*/
	cancelEdit():void {
	
	}
	/**
 * @description Removes all animation keys on this object.
*/
	clearAllAnimData():void {
	
	}
	/**
 * @description Clear animation keys in the currently active animation layer. Removes animation data on all animatible properties owned by this element over the given range.
*/
	clearAnimData(range:DzTimeRange):DzTimeRange {
	
	}
	/**
 * @description Matches the properties on this element to properties on the given element by name, and then copies the values of matching properties on source to the properties on this element.
*/
	copyFrom(source:DzElement):void {
	
	}
	/**
 * @description Copies the property values of the element to a 'clipboard' so that they may be saved and applied (copied) to another element - or to the same element.
*/
	copyToClipboard(contentTypes:Array):Array {
	
	}
	/**
 * @description Remove the the data item from this element and deletes it. Pointer is invalid after this call if DZ_NO_ERROR is returned.
*/
	deleteDataItem(item:DzElementData):DzError {
	
	}
	/**
 * @description Retrieve the user data item with the given ID, if one with that ID is attached to this element.
*/
	findDataItem(dataName:String):DzElementData {
	
	}
	/**
 * @description Searches for the first data item index.
*/
	findDataItemIndex(item:DzElementData):Number {
	
	}
	/**
 * @description Locate a matching property.
*/
	findMatchingProperty(srcProp:DzProperty):DzProperty {
	
	}
	/**
 * @description Locate a property by name.
*/
	findPrivateProperty(name:String):DzProperty {
	
	}
	/**
 * @description Locate a property by name.
*/
	findPrivateProperty(name:String, caseSensitive:Boolean):DzProperty {
	
	}
	/**
 * @description Locate a property by label.
*/
	findPrivatePropertyByLabel(label:String):DzProperty {
	
	}
	/**
 * @description Locate a property by label.
*/
	findPrivatePropertyByLabel(label:String, caseSensitive:Boolean):DzProperty {
	
	}
	/**
 * @description Locate a property by name.
*/
	findProperty(name:String):DzProperty {
	
	}
	/**
 * @description Locate a property by name.
*/
	findProperty(name:String, caseSensitive:Boolean):DzProperty {
	
	}
	/**
 * @description Locate a property by label.
*/
	findPropertyByLabel(label:String):DzProperty {
	
	}
	/**
 * @description Locate a property by label.
*/
	findPropertyByLabel(label:String, caseSensitive:Boolean):DzProperty {
	
	}
	/**
 * @description finishes an editing operation for this element - DzProperty.finishEdit() will be called for all properties belonging to this element.
*/
	finishEdit():void {
	
	}
	/**
 * @description Populates the given settings object with the attributes of this element. If this settings object is not empty the save filters will save out this settings information in the preset.
*/
	getAttributes(settings:DzSettings):DzSettings {
	
	}
	/**
 * @description Parameter(s):
*/
	getDataItem(index:Number):DzElementData {
	
	}
	/**
 * @description Return Value:
*/
	getDataItemList():Array {
	
	}
	/**
 * @description Parameter(s):
*/
	getElementChild(which:Number):Number {
	
	}
	/**
 * @description Return Value:
*/
	getElementParent():void {
	
	}
	/**
 * @description Return Value:
*/
	getLabel():String {
	
	}
	/**
 * @description Return Value:
*/
	getLoadScript():DzScript {
	
	}
	/**
 * @description Return Value:
*/
	getNumDataItems():Number {
	
	}
	/**
 * @description Return Value:
*/
	getNumElementChildren():Number {
	
	}
	/**
 * @description Return Value:
*/
	getNumPrivateProperties():Number {
	
	}
	/**
 * @description Return Value:
*/
	getNumProperties():Number {
	
	}
	/**
 * @description Get a property from this element's property list.
*/
	getPrivateProperty(index:Number):DzProperty {
	
	}
	/**
 * @description Return Value:
*/
	getPrivatePropertyGroups():DzPropertyGroupTree {
	
	}
	/**
 * @description Return Value:
*/
	getPrivatePropertyList():Array {
	
	}
	/**
 * @description Get a property from this element's property list.
*/
	getProperty(index:Number):DzProperty {
	
	}
	/**
 * @description Return Value:
*/
	getPropertyGroups():DzPropertyGroupTree {
	
	}
	/**
 * @description Return Value:
*/
	getPropertyList():Array {
	
	}
	/**
 * @description Parameter(s):
*/
	getUniqueDataItemName(dataName:String):String {
	
	}
	/**
 * @description Parameter(s):
*/
	getUniquePrivatePropertyName(name:String):String {
	
	}
	/**
 * @description Parameter(s):
*/
	getUniquePropertyName(name:String):String {
	
	}
	/**
 * @description Return Value:
*/
	inEdit():Boolean {
	
	}
	/**
 * @description Adds a new property that will be available for connections or direct editing.
*/
	insertPrivateProperty(index:Number, prop:DzProperty):DzError {
	
	}
	/**
 * @description Add a new property. Adds a new property that will be available for connections or direct editing.
*/
	insertProperty(index:Number, prop:DzProperty):DzError {
	
	}
	/**
 * @description Moves a data item to a new index.
*/
	moveDataItemToIndex(item:DzElementData, index:Number):DzError {
	
	}
	/**
 * @description Moves the given property from this element to newElement, if it can be removed. Properties can be specified as non-removable (e.g. the rotation channels of the DzNode class). Doing so makes it impossible to move that property to another element.
*/
	movePrivateProperty(prop:DzProperty, element:DzElement):DzError {
	
	}
	/**
 * @description Moves the given property from this element to newElement, if it can be removed. Properties can be specified as non-removable (e.g. the rotation channels of the DzNode class). Doing so makes it impossible to move that property to another element.
*/
	moveProperty(prop:DzProperty, element:DzElement):DzError {
	
	}
	/**
 * @description Remove the data item from this element.
*/
	removeDataItem(item:DzElementData):DzError {
	
	}
	/**
 * @description Removes the given property, if it can be removed. Properties can be specified as non-removable (e.g. the rotation channels of the DzNode class). Doing so makes it impossible to remove that property from the object.
*/
	removePrivateProperty(prop:DzProperty):DzError {
	
	}
	/**
 * @description Attempts to remove the named property. Fails if the property could not be found or could not be removed.
*/
	removePrivateProperty(name:String):DzError {
	
	}
	/**
 * @description Removes the given property, if it can be removed. Properties can be specified as non-removable (e.g. the rotation channels of the DzNode class). Doing so makes it impossible to remove that property from the object.
*/
	removeProperty(prop:DzProperty):DzError {
	
	}
	/**
 * @description Attempts to remove the named property. Fails if the property could not be found or could not be removed.
*/
	removeProperty(name:String):DzError {
	
	}
	/**
 * @description Sets attributes in the handed in settings and returns a pointer to an element set by these settings. The element returned may not be a new element or null if the settings are not correct. Default implementation returns this with no changes.
*/
	setAttributes(settings:DzSettings):DzSettings {
	
	}
	/**
 * @description Set the user-defined label that is displayed in the interface for this object.
*/
	setLabel(name:String):DzError {
	
	}
	/**
 * @description Sets the script that will be executed when this element is loaded from a file.
*/
	setLoadScript(script:DzScript):DzScript {
	
	}
	/**
 * @description Set the internal name of this object.
*/
	setName(name:String):String {
	
	}
	/**
 * @description Return Value:
*/
	shouldSortOnLoad():Boolean {
	
	}
	/**
 * @description Called to update any cached or display data for this object.
*/
	update():void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when this object's label is changed.
 * @signature "labelChanged(const QString&)"
 * @event
*/
	labelChanged(newLabel:String):void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when this element's parent is changed.
 * @signature "parentChanged()"
 * @event
*/
	parentChanged():void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when a private property is added to this element.
 * @signature "privatePropertyAdded(DzProperty*)"
 * @event
*/
	privatePropertyAdded(prop:DzProperty):void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when a private property is added to or removed from this element.
 * @signature "privatePropertyListChanged()"
 * @event
*/
	privatePropertyListChanged():void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description TODO: Add Description
 * @signature TODO: Add Description
 * @event
*/
	privatePropertyListInTreeChanged():void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when a private property is removed from this element.
 * @signature "privatePropertyRemoved(DzProperty*)"
 * @event
*/
	privatePropertyRemoved(prop:DzProperty):void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when the private property tree has changed.
 * @signature "privatePropertyTreeChanged()"
 * @event
*/
	privatePropertyTreeChanged():void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when a property is added to this element.
 * @signature "propertyAdded(DzProperty*)"
 * @event
*/
	propertyAdded(prop:DzProperty):void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when a property is added to or removed from this element.
 * @signature "propertyListChanged()"
 * @event
*/
	propertyListChanged():void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description TODO: Add Description
 * @signature TODO: Add Description
 * @event
*/
	propertyListInTreeChanged():void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when a property is removed from this element.
 * @signature "propertyRemoved(DzProperty*)"
 * @event
*/
	propertyRemoved(prop:DzProperty):void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when the property tree has changed.
 * @signature "propertyTreeChanged()"
 * @event
*/
	propertyTreeChanged():void {
	
	}

}
/**
 * @classdesc See Also:


 DzElement.addDataItem()

 DzElement.removeDataItem()

 DzElement.deleteDataItem()

 DzElement.getNumDataItems()

 DzElement.getDataItem()

 DzElement.getDataItemList()

 DzElement.isDataItemNameUnique() 

 DzElement.getUniqueDataItemName()

 DzElement.findDataItem()

 DzElement.moveDataItemToIndex()

 DzElement.findDataItemIndex()
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/elementdata_dz}*/
class DzElementData extends DzCustomData {
	/**
 * @description Parameter(s):
*/
	duplicate(owner:DzElement):DzElement {
	
	}
	/**
 * @description Return Value:
*/
	getOwner():DzElement {
	
	}

}
/**
 * @classdesc If the file to post-load is a script:



A global transient variable named DataItem, which refers to the DzElementPostLoadFileData that invoked the execution of the script, is provided to the script in the global context at runtime. Attempts to use this global variable outside of the associated script will result in a ReferenceError.



A global transient variable named FileIOSettings, which refers to the DzFileIOSettings that was used when the element that owns the data item was loaded, is provided to the script in the global context at runtime. Attempts to use this global variable outside of the associated script will result in a ReferenceError. (since 4.9.4.109)



Attention:


 The differences between this implementation and DzSimpleElementScriptData are that this implementation can reference the file path of a file that is not a script and it does not have an associated DzSettings that can be used to configure said script.




If the file to post-load is not a script, the path is stored but the file is not loaded.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/elementpostloadfiledata_dz}*/
class DzElementPostLoadFileData extends DzElementData {
	/**
 * @description Default constructor.
 * @constructor
*/
	constructor(name:String, persistent=true:Boolean) {
	
	}
	/**
 * @description Return Value:
*/
	getPostLoadFilePath():String {
	
	}
	/**
 * @description Sets the file path of the file for this data item.
*/
	setPostLoadFilePath(script:String):String {
	
	}

}
/**
 * @classdesc This class provides an animatable enumerated property that is stored and can be accessed as an integer property. It maintains a list of strings that correspond to the integer value of the property.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/enumproperty_dz}*/
class DzEnumProperty extends DzIntProperty {
	/**
 * @description Default Constructor. Creates a non-animatable, non-user property.
 * @constructor
*/
	constructor() {
	
	}
	/**
 * @description Parameter(s):
 * @constructor
*/
	constructor(name:String, canAnimate:Boolean, isUserProperty:Boolean) {
	
	}
	/**
 * @description Adds a string to the available choices for this property. Duplicates are not allowed.
*/
	addItem(item:String, index:Number):Number {
	
	}
	/**
 * @description Searches the property for an item that matches the given string.
*/
	findItemString(str:String):Number {
	
	}
	/**
 * @description Return Value:
*/
	getDefaultStringValue():String {
	
	}
	/**
 * @description Parameter(s):
*/
	getItem(i:Number):String {
	
	}
	/**
 * @description Parameter(s):
*/
	getKeyStringValue(i:Number):String {
	
	}
	/**
 * @description Return Value:
*/
	getNumItems():Number {
	
	}
	/**
 * @description Return Value:
*/
	getRawStringValue():String {
	
	}
	/**
 * @description Parameter(s):
*/
	getRawStringValue(tm:DzTime):String {
	
	}
	/**
 * @description Parameter(s):
*/
	getStringValue(tm:DzTime):String {
	
	}
	/**
 * @description Return Value:
*/
	getStringValue():String {
	
	}
	/**
 * @description Return Value:
*/
	getUniqueItemString(item:String):String {
	
	}
	/**
 * @description Removes all items and makes this property essentially invalid.
*/
	removeAllItems():void {
	
	}
	/**
 * @description Removes the item at the given index.
*/
	removeItem(index:Number):Boolean {
	
	}
	/**
 * @description Replaces the item at the given index with the given string.
*/
	replaceItem(index:Number, item:String):Boolean {
	
	}
	/**
 * @description Sets the items for this property.
*/
	setItems(items:Array):Array {
	
	}
	/**
 * @description Sets the current value of the property to the index of the item that matches the given string.
*/
	setValueFromString(str:String):Boolean {
	
	}
	/**
 * @description Sets the value of the property at the given time to the index of the item that matches the given string.
*/
	setValueFromString(tm:DzTime, str:String):Boolean {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when the item list (list of legal values for this property) changes.
 * @signature "itemListChanged()"
 * @event
*/
	itemListChanged():void {
	
	}

}
/**
 * @classdesc A DzEnumSlider provides a control that allows a user to adjust a bounded, enumerated, integer value. The slider is clamped by default, and automatically sets its min and max range according to the number of string values it contains.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/enumslider_dz}*/
class DzEnumSlider extends DzWidget {
	/**
 * @description Holds the number of items on the slider. (Read Only)
	*/
	count:Number;
	/**
 * @description Holds the text of the slider. (Read Only)
	*/
	text:String;
	/**
 * @description Holds the current value of the slider.
	*/
	value:Number;
	/**
 * @description Creates a new enumerated slider widget.
 * @constructor
*/
	constructor(parent:DzWidget) {
	
	}
	/**
 * @description Adds a string to the list of items, and adjusts the maximum value for the slider.
*/
	addItem(label:String):Number {
	
	}
	/**
 * @description Clears the list of string values for this slider.
*/
	clear():void {
	
	}
	/**
 * @description Return Value:
*/
	getItem(which:Number):String {
	
	}
	/**
 * @description Moves the item at index which to idx.
*/
	moveItem(which:Number, idx:Number):Number {
	
	}
	/**
 * @description Removes the item at which from the list.
*/
	removeItem(which:Number):Number {
	
	}
	/**
 * @description Renames the item at index which.
*/
	renameItem(which:Number, label:String):Number {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when the user releases the slider.
 * @signature "editEnd()"
 * @event
*/
	editEnd():void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when the user starts dragging the slider.
 * @signature "editStart()"
 * @event
*/
	editStart():void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when the value of the slider changes, passes the new value.
 * @signature "valueChanged(int)"
 * @event
*/
	valueChanged(value:Number):void {
	
	}

}
/**
 * @classdesc This utility class implements the logic of 'baking' (unlinking) the current state of a controller property on a node to the numeric properties it controls, such that the controlled properties remain at the respective values they were at in that moment of time. The DzERCLink between the 'baked' properties and the controller is removed.



The controller property (the DzNumericProperty that does the controlling) must be set before calling doBake(); see setControllerProperty().



See Also:


 Sample: ERC Bake




Attention:


 This object is provided by the Property Hierarchy plugin. It is only available when the Property Hierarchy plugin is activated and enabled.




Since:


 4.9.3.101
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/ercbake_dz}*/
class DzERCBake extends QObject {
	/**
 * @description Default constructor.
 * @constructor
*/
	constructor() {
	
	}
	/**
 * @description Performs the ERC bake based on the current settings.
*/
	doBake():Boolean {
	
	}
	/**
 * @description Performs the ERC bake based on the current settings.
*/
	doBakeKeyed(warn:Boolean):Boolean {
	
	}
	/**
 * @description Return Value:
*/
	getControllerProperty():DzNumericProperty {
	
	}
	/**
 * @description Sets the property that controls the properties that will be baked when doBake() is called.
*/
	setControllerProperty(prop:DzNumericProperty):DzNumericProperty {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description TODO: Add Description
 * @signature TODO: Add Description
 * @event
*/
	ERCChanged():void {
	
	}

}
/**
 * @classdesc This utility class implements the logic of 'freezing' (linking) the current state of numeric properties on a node (or multiple nodes) to a controller property, such that adjusting the controller property adjusts the linked properties in kind. The DzERCLink between the 'frozen' properties and the controller are created such that when the controller is set to the value it is at when the 'freeze' operation is performed, the 'frozen' properties will be at the respective values they were at in that moment of time.



The controller node (the DzNode that the controlling property is located on) and the controller property (the DzNumericProperty that ultimately does the controlling) must be set before calling doFreeze(); see setControllerNode() and setControllerProperty().



An additional property can be set and used to attentuate the effect of the controller property on the 'frozen' properties, or have its value attenuated as the controller property is applied, depending on the AttenuateMode set.



The addPropertiesToFreeze() method is used to inspect the current state of the numeric properties on a a given node that are not currently set to their respective raw values and add them to the list of those properties to be linked to the controller property. This list of properties can be inspected and/or modified using the getPropertiesToFreeze() and setPropertiesToFreeze() methods.



See Also:


 Sample: ERC Freeze




Attention:


 This object is provided by the Property Hierarchy plugin. It is only available when the Property Hierarchy plugin is activated and enabled.




Since:


 4.9.3.95
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/ercfreeze_dz}*/
class DzERCFreeze extends QObject {
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static SubComponents;
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static Controller;
	/**
 * @description Default constructor.
 * @constructor
*/
	constructor() {
	
	}
	/**
 * @description Adds all numeric properties on node whose values differ from their raw values to the list of properties to 'freeze' (link) to the controller property.
*/
	addPropertiesToFreeze(node:DzNode):Boolean {
	
	}
	/**
 * @description Performs the ERC freeze based on the current settings.
*/
	doFreeze():Boolean {
	
	}
	/**
 * @description Return Value:
*/
	getApplyController():Boolean {
	
	}
	/**
 * @description Return Value:
*/
	getAttenuateMode():void {
	
	}
	/**
 * @description Return Value:
*/
	getAttenuateProperty():DzNumericProperty {
	
	}
	/**
 * @description Return Value:
*/
	getControllerNode():DzNode {
	
	}
	/**
 * @description Return Value:
*/
	getControllerProperty():DzNumericProperty {
	
	}
	/**
 * @description Return Value:
*/
	getKeyed():Boolean {
	
	}
	/**
 * @description Return Value:
*/
	getPropertiesToFreeze():Array {
	
	}
	/**
 * @description Return Value:
*/
	getRestoreFigure():Boolean {
	
	}
	/**
 * @description Return Value:
*/
	getRestoreRigging():Boolean {
	
	}
	/**
 * @description Sets whether or not the controller property will be set to the value that causes the 'frozen' properties to be at their current value once the 'freeze' operation is complete.
*/
	setApplyController(yesNo:Boolean):Boolean {
	
	}
	/**
 * @description Sets the mode that determines how the attenuate property will be used.
*/
	setAttenuateMode(mode:AttenuateMode):void {
	
	}
	/**
 * @description Sets the property that will be used to attenuate either the controller property, or the affect of the controller property on the properties returned by getPropertiesToFreeze(), depending on the AttenuateMode set.
*/
	setAttenuateProperty(prop:DzNumericProperty):DzNumericProperty {
	
	}
	/**
 * @description Sets the node that the controller property is on.
*/
	setControllerNode(node:DzNode):DzNode {
	
	}
	/**
 * @description Sets the property that the properties returned by getPropertiesToFreeze() will be linked to when doFreeze() is called.
*/
	setControllerProperty(prop:DzNumericProperty):DzNumericProperty {
	
	}
	/**
 * @description Sets whether or not the DzERCLink created between the controller property and the 'frozen' properties will be a DzERCLink.ERCKeyed (using the keys in timeline) or a DzERCLink.ERCDeltaAdd.
*/
	setKeyed(yesNo:Boolean):Boolean {
	
	}
	/**
 * @description Sets the list of properties that will be linked to the property returned by getControllerProperty() when doFreeze() is called.
*/
	setPropertiesToFreeze(propList:Array):Array {
	
	}
	/**
 * @description Sets whether or not the Restore Figure action will be executed once the 'freeze' operation is complete.
*/
	setRestoreFigure(yesNo:Boolean):Boolean {
	
	}
	/**
 * @description Sets whether or not the Restore Figure Rigging action will be executed once the 'freeze' operation is complete.
*/
	setRestoreRigging(yesNo:Boolean):Boolean {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description TODO: Add Description
 * @signature TODO: Add Description
 * @event
*/
	ERCChanged():void {
	
	}

}
/**
 * @classdesc This numeric controller implements an algorithm that is based on the value of another property. There are six formulas which correspond to the ERCType of the object - the default ERCType is ERCDeltaAdd. The formulas are:


 ERCDeltaAdd: f(v) = v + (c * m) + a

 ERCDivideInto: f(v) = (c / v) + a

 ERCDivideBy: f(v) = (v / c) + a

 ERCMultiply: f(v) = (c * v) + a

 ERCSubtract: f(v) = v - c + a

 ERCAdd: f(v) = v + c + a

 ERCKeyed: f(v) = v + P©




Where:


 v is the current (keyed) value of the property with the link

 c is the current (final) value of the property that the link is driven by

 m is an optional scalar multiplier

 a is an optional offset (additive) value.




As an example of ERC in action, lets say that there are 3 properties A, B, and C. B is linked to A with a 'ERCDeltaAdd' DzERCLink with a multiplier of 1.0 and an additive value of 0.0. C is linked to B with a 'ERCDeltaAdd' DzERCLink with a multiplier of 2.0 and an additive value of 1.0. So, if the keyed value of A is 10.0, B is 0.0, and C is 0.0, the final values of the properties would be calculated as:



A = 10.0 B = 0.0 + (10.0 * 1.0) + 0.0 = 10.0 C = 0.0 + (10.0 * 2.0) + 1.0 = 21.0



If B and C have keyed values - for example B is 5.0 and C is 2.0 - the final property values would be calculated as:



A = 10.0 B = 5.0 + (10.0 * 1.0) + 0.0 = 15.0 C = 2.0 + (15.0 * 2.0) + 1.0 = 33.0
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/erclink_dz}*/
class DzERCLink extends DzNumericController {
	/**
 * @description Holds whether or not the controller is evaluated and applied.
	*/
	active:Boolean;
	/**
 * @description Holds the addend value for the link.
	*/
	addend:Number;
	/**
 * @description Holds whether or not the link will be automatically redirected when its owner is 'Fit To' another figure.
	*/
	autoOverride:Boolean;
	/**
 * @description Holds whether or not the link is a user-link.
	*/
	isUserLink:Boolean;
	/**
 * @description Holds the interpolation mode for links of the ERCKeyed type.
	*/
	keyInterpolation:ERCKeyInterpolation;
	/**
 * @description Holds whether the controller will be saved with the output property (the property that owns the link), or the input property (the linked property).
	*/
	saveWithOutput:Boolean;
	/**
 * @description Holds the scalar (multiplier) value for links of the ERCDeltaAdd type.
	*/
	scalar:Number;
	/**
 * @description Holds the type of operation the link will perform when evaluated and applied.
	*/
	type:ERCType;
	/**
 * @description ENUMERATOR: Linear interpolation between key values.
*/
	
	static LINEAR_INTERP;
	/**
 * @description ENUMERATOR: Constant interpolation between key values.
*/
	
	static CONSTANT_INTERP;
	/**
 * @description ENUMERATOR: TCB (Kochanek-Bartels) Spline interpolation between key values.
*/
	
	static TCB_INTERP;
	/**
 * @description ENUMERATOR: This type of ERC is the most common, and implements the formula f(v) = v + (c * m) + a where:
*/
	
	static ERCDeltaAdd;
	/**
 * @description ENUMERATOR: This type of ERC implements the formula f(v) = (c / v) + a where:
*/
	
	static ERCDivideInto;
	/**
 * @description ENUMERATOR: This type of ERC implements the formula f(v) = (v / c) + a where:
*/
	
	static ERCDivideBy;
	/**
 * @description ENUMERATOR: This type of implements the formula f(v) = (c * v) + a where:
*/
	
	static ERCMultiply;
	/**
 * @description ENUMERATOR: This type of ERC implements the formula f(v) = v - c + a where:
*/
	
	static ERCSubtract;
	/**
 * @description ENUMERATOR: This type of ERC implements the formula f(v) = v + c + a where:
*/
	
	static ERCAdd;
	/**
 * @description ENUMERATOR: This type of ERC is used to define value by a parametric function f(v) = v + P(c) where:
*/
	
	static ERCKeyed;
	/**
 * @description Default constructor.
 * @constructor
*/
	constructor() {
	
	}
	/**
 * @description TODO:
Add description.
 * @constructor
*/
	constructor(copyFrom:DzERCLink, property=undefined:DzNumericProperty) {
	
	}
	/**
 * @description Creates a controller that is driven by property.
 * @constructor
*/
	constructor(type:ERCType, property:DzNumericProperty, scalar=1.0:Number, addend=0.0:Number) {
	
	}
	/**
 * @description Creates a controller that is driven by property.
 * @constructor
*/
	constructor(property:DzNumericProperty, scalar=1.0:Number, addend=0.0:Number) {
	
	}
	/**
 * @description Adds a keyed value to the link if the type is ERCKeyed and the interpolation mode is LINEAR_INTERP or CONSTANT_INTERP.
*/
	addKeyValue(key:Number, value:Number):Number {
	
	}
	/**
 * @description Adds a keyed value to the link if the type is ERCKeyed and the interpolation mode is TCB_INTERP.
*/
	addKeyValue(key:Number, value:Number, t:Number, c:Number, b:Number):Number {
	
	}
	/**
 * @description Clears all keyed values for links of the ERCKeyed type.
*/
	clearKeys():void {
	
	}
	/**
 * @description Makes a deep copy of this link.
*/
	duplicate(newProperty:DzNumericProperty):DzNumericProperty {
	
	}
	/**
 * @description Parameter(s):
*/
	findKeyIndex(key:Number):Number {
	
	}
	/**
 * @description Return Value:
*/
	getCurrentProperty():DzNumericProperty {
	
	}
	/**
 * @description Parameter(s):
*/
	getKey(which:Number):Number {
	
	}
	/**
 * @description Parameter(s):
*/
	getKeyOpValue(val:Number):Number {
	
	}
	/**
 * @description Parameter(s):
*/
	getKeyParamB(which:Number):Number {
	
	}
	/**
 * @description Parameter(s):
*/
	getKeyParamC(which:Number):Number {
	
	}
	/**
 * @description Parameter(s):
*/
	getKeyParamT(which:Number):Number {
	
	}
	/**
 * @description Parameter(s):
*/
	getKeyValue(which:Number):Number {
	
	}
	/**
 * @description Return Value:
*/
	getNumKeyValues():Number {
	
	}
	/**
 * @description Return Value:
*/
	getProperty():DzNumericProperty {
	
	}
	/**
 * @description Presizes the array of keyed values in order to improve the performance of adding keyed values.
*/
	presizeKeys(count:Number):Number {
	
	}
	/**
 * @description Removes a keyed value from the link if the link type is ERCKeyed.
*/
	removeKeyValue(which:Number):Boolean {
	
	}
	/**
 * @description Sets the property that drives this link.
*/
	setProperty(prop:DzNumericProperty):DzNumericProperty {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description TODO: Add Description
 * @signature TODO: Add Description
 * @event
*/
	ercSourcePropertyRemoved(prop:DzProperty):void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description TODO: Add Description
 * @signature TODO: Add Description
 * @event
*/
	keyChanged(which:Number):void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description TODO: Add Description
 * @signature TODO: Add Description
 * @event
*/
	keyInterpolationChanged():void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description TODO: Add Description
 * @signature TODO: Add Description
 * @event
*/
	keysListChanged():void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when the source property or current property is deleted.
 * @signature "propertyDeleted(DzProperty*)"
 * @event
*/
	propertyDeleted(prop:DzProperty):void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description TODO: Add Description
 * @signature TODO: Add Description
 * @event
*/
	saveWithOutputChanged():void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description TODO: Add Description
 * @signature TODO: Add Description
 * @event
*/
	scalarChanged():void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description TODO: Add Description
 * @signature TODO: Add Description
 * @event
*/
	stageChanged():void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description TODO: Add Description
 * @signature TODO: Add Description
 * @event
*/
	typeChanged():void {
	
	}

}
/**
 * @classdesc 0x00000000 = DZ_NO_ERROR

 0x00000050 = DZ_ALREADY_EXISTS_ERROR

 0x00000051 = DZ_DOES_NOT_EXIST_ERROR

 0x00000052 = DZ_NON_UNIQUE_NAME_ERROR

 0x00000053 = DZ_ILLEGAL_HIERARCHY_ERROR

 0x00000060 = DZ_ILLEGAL_ARGUMENT_ERROR

 0x00000061 = DZ_ILLEGAL_OPERATION_ERROR

 0x00000062 = DZ_OPERATION_FAILED_ERROR

 0x00000063 = DZ_NO_MATCH_ERROR

 0x00000064 = DZ_USER_CANCELLED_OPERATION

 0x00000065 = DZ_UNHANDLED_EXCEPTION_ERROR

 0x00000070 = DZ_TYPE_MISMATCH_ERROR

 0x00000080 = DZ_SCRIPT_PARSE_ERROR

 0x00000090 = DZ_MEMORY_ALLOCATION_ERROR

 0x00000100 = DZ_PROFILE_NOT_SUPPORTED_ERROR

 0x00000101 = DZ_ALREADY_BOUND_ERROR

 0x00000102 = DZ_NOT_BOUND_ERROR

 0x00000200 = DZ_UNABLE_TO_OPEN_FILE_ERROR

 0x00000201 = DZ_SECTION_NOT_OPEN_ERROR

 0x00000202 = DZ_SECTION_LENGTH_EXCEEDED_ERROR

 0x00000203 = DZ_FORMAT_NOT_SUPPORTED_ERROR

 0x00000204 = DZ_FILE_FORMAT_ERROR




Note:


 You can use Global.getErrorMessage() to convert an error code into a user-readable string.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/error_dz}*/
class DzError {
	/**
 * @description Return Value:
*/
	valueOf():Number {
	
	}

}
/**
 * @classdesc TODO:
Add detailed description.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/exporter_dz}*/
class DzExporter extends DzFileIO {
	/**
 * @description Return Value:
*/
	getDescription():String {
	
	}
	/**
 * @description Return Value:
*/
	getExtension():String {
	
	}
	/**
 * @description Return Value:
*/
	isFileExporter():Boolean {
	
	}
	/**
 * @description Exports to a file.
*/
	writeFile(filename:String):DzError {
	
	}
	/**
 * @description Exports to a file.
*/
	writeFile(filename:String, options:DzFileIOSettings):DzError {
	
	}

}
/**
 * @classdesc There is only one instance of this manager in an application. This instance is created and owned by DzApp. Don't create an instance of this class, but rather request a pointer to it from DzApp via DzApp.getExportMgr().



See Also:


 Exporter Settings
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/exportmgr_dz}*/
class DzExportMgr extends QObject {
	/**
 * @description Uses the extension from each of the exporters and attempts to match an exporter with the extension of the filename.
*/
	canExport(filename:String):Boolean {
	
	}
	/**
 * @description Export the scene contents to a file.
*/
	exportFile(fileName:String, exporterIndex:Number, options:DzFileIOSettings):DzError {
	
	}
	/**
 * @description Export the scene contents to a file.
*/
	exportFile(fileName:String, exporterIndex:Number):DzError {
	
	}
	/**
 * @description Uses the extension from each of the exporters and attempts to match an exporter with the extension of the filename.
*/
	findExporter(filename:String):DzExporter {
	
	}
	/**
 * @description Uses the class name of each of the exporters and attempts to find an exporter with the given class name.
*/
	findExporterByClassName(className:String):DzExporter {
	
	}
	/**
 * @description Uses the extension from each of the exporters and attempts to match an exporter with the extension of the filename.
*/
	findExporterIndex(filename:String):Number {
	
	}
	/**
 * @description Parameter(s):
*/
	getExporter(i:Number):DzExporter {
	
	}
	/**
 * @description Return Value:
*/
	getExportPath():String {
	
	}
	/**
 * @description Return Value:
*/
	getNumExporters():Number {
	
	}
	/**
 * @description Populates the given filter with all the types recognized by the export manager.
*/
	makeExportFileFilter(filter:DzFileFilter, defaultFilter:String):DzFileFilter {
	
	}
	/**
 * @description Sets the default directory that files are exported to.
*/
	setExportPath(path:String):String {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when a file export operation is finished
 * @signature "fileExported()"
 * @event
*/
	fileExported():void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when a file export operation is started
 * @signature "fileExportStarting()"
 * @event
*/
	fileExportStarting():void {
	
	}

}
/**
 * @classdesc A 3 or 4 sided polygonal face within a polygon mesh. 



See Also:


 facetmesh_dz
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/facet_dz}*/
class DzFacet extends Object {
	/**
 * @description The index of this face in the cage mesh
	*/
	cageIndex:Number;
	/**
 * @description The index of the first edge, otherwise -1
	*/
	edgeIdx1:Number;
	/**
 * @description The index of the second edge, otherwise -1
	*/
	edgeIdx2:Number;
	/**
 * @description The index of the third edge, otherwise -1
	*/
	edgeIdx3:Number;
	/**
 * @description The index of the fourth edge normal (if any), otherwise -1
	*/
	edgeIdx4:Number;
	/**
 * @description The index of the face group this face belongs to
	*/
	faceGroupIndex:Number;
	/**
 * @description The index of the material group this face belongs to
	*/
	materialIndex:Number;
	/**
 * @description The index of the first vertex normal
	*/
	normIdx1:Number;
	/**
 * @description The index of the second vertex normal
	*/
	normIdx2:Number;
	/**
 * @description The index of the third vertex normal
	*/
	normIdx3:Number;
	/**
 * @description The index of the fourth vertex normal (if any), otherwise -1
	*/
	normIdx4:Number;
	/**
 * @description The index of the first texture vertex
	*/
	uvwIdx1:Number;
	/**
 * @description The index of the second texture vertex
	*/
	uvwIdx2:Number;
	/**
 * @description The index of the third texture vertex
	*/
	uvwIdx3:Number;
	/**
 * @description The index of the fourth texture vertex (if any), otherwise -1
	*/
	uvwIdx4:Number;
	/**
 * @description The index of the first vertex
	*/
	vertIdx1:Number;
	/**
 * @description The index of the second vertex
	*/
	vertIdx2:Number;
	/**
 * @description The index of the third vertex
	*/
	vertIdx3:Number;
	/**
 * @description The index of the fourth vertex (if any), otherwise -1
	*/
	vertIdx4:Number;
	/**
 * @description Default Constructor.
 * @constructor
*/
	constructor() {
	
	}
	/**
 * @description TODO:
Add description.
 * @constructor
*/
	constructor(facet:DzFacet) {
	
	}
	/**
 * @description Set the facet to a default state.
*/
	clear():void {
	
	}
	/**
 * @description TODO:
Add description.
*/
	clearTriFanCount():void {
	
	}
	/**
 * @description TODO:
Add description.
*/
	clearTriFanRoot():void {
	
	}
	/**
 * @description TODO:
Add description.
*/
	getTriFanCount():Number {
	
	}
	/**
 * @description TODO:
Add description.
*/
	getTriFanEdgeCount():Number {
	
	}
	/**
 * @description TODO:
Add description.
*/
	getTriFanMaxEdgeIdx():Number {
	
	}
	/**
 * @description TODO:
Add description.
*/
	getTriFanOffset():Number {
	
	}
	/**
 * @description TODO:
Add description.
*/
	getTriFanRoot():Number {
	
	}
	/**
 * @description return true if this is a 4 sided polygon, otherwise false
*/
	isQuad():Boolean {
	
	}
	/**
 * @description return true if this is a 3 sided polygon, otherwise false
*/
	isTri():Boolean {
	
	}
	/**
 * @description TODO:
Add description.
*/
	isTriFan():Boolean {
	
	}
	/**
 * @description TODO:
Add description.
*/
	isTriFanChild():Boolean {
	
	}
	/**
 * @description TODO:
Add description.
*/
	isTriFanRoot():Boolean {
	
	}
	/**
 * @description TODO:
Add description.
*/
	setTriFanCount(count:Number):Number {
	
	}
	/**
 * @description TODO:
Add description.
*/
	setTriFanRoot(rootIdx:Number):Number {
	
	}

}
/**
 * @classdesc See Also:


 DzExportMgr.findExporterByClassName()

 DzExportMgr.findExporter()

 Silent FBX Export
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/fbxexporter_dz}*/
class DzFbxExporter extends DzExporter {
	/**
 * @description Default Constructor.
 * @constructor
*/
	constructor() {
	
	}

}
/**
 * @classdesc See Also:


 DzImportMgr.findImporterByClassName()

 DzImportMgr.findImporter()

 Silent FBX Import
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/fbximporter_dz}*/
class DzFbxImporter extends DzImporter {
	/**
 * @description Default Constructor.
 * @constructor
*/
	constructor() {
	
	}

}
/**
 * @classdesc Provides access for reading and writing files.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/file_dz}*/
class DzFile extends DzFileInfo {
	/**
 * @description ENUMERATOR: No error occurred.
*/
	
	static NoError;
	/**
 * @description ENUMERATOR: An error occurred when reading from the file.
*/
	
	static ReadError;
	/**
 * @description ENUMERATOR: An error occurred when writing to the file.
*/
	
	static WriteError;
	/**
 * @description ENUMERATOR: A fatal error occurred.
*/
	
	static FatalError;
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static ResourceError;
	/**
 * @description ENUMERATOR: The file could not be opened.
*/
	
	static OpenError;
	/**
 * @description ENUMERATOR: The operation was aborted.
*/
	
	static AbortError;
	/**
 * @description ENUMERATOR: A timeout occurred.
*/
	
	static TimeOutError;
	/**
 * @description ENUMERATOR: An unspecified error occurred.
*/
	
	static UnspecifiedError;
	/**
 * @description ENUMERATOR: The file could not be removed.
*/
	
	static RemoveError;
	/**
 * @description ENUMERATOR: The file could not be renamed.
*/
	
	static RenameError;
	/**
 * @description ENUMERATOR: The position in the file could not be changed.
*/
	
	static PositionError;
	/**
 * @description ENUMERATOR: The file could not be resized.
*/
	
	static ResizeError;
	/**
 * @description ENUMERATOR: The file could not be accessed.
*/
	
	static PermissionsError;
	/**
 * @description ENUMERATOR: The file could not be copied.
*/
	
	static CopyError;
	/**
 * @description ENUMERATOR: The file is not open.
*/
	
	static NotOpen;
	/**
 * @description ENUMERATOR: The file is open the for reading.
*/
	
	static ReadOnly;
	/**
 * @description ENUMERATOR: The file is open the for writing.
*/
	
	static WriteOnly;
	/**
 * @description ENUMERATOR: The file is open the for reading and writing.
*/
	
	static ReadWrite;
	/**
 * @description ENUMERATOR: The file is opened in append mode, so that all data is written to the end of the file.
*/
	
	static Append;
	/**
 * @description ENUMERATOR: If possible, the file is truncated before it is opened. All earlier contents of the file are lost.
*/
	
	static Truncate;
	/**
 * @description ENUMERATOR: When reading, the end-of-line terminators are translated to '
*/
	
	static Text;
	/**
 * @description ENUMERATOR: Alias for Text.
*/
	
	static Translate;
	/**
 * @description Creates a file object with the given file name.
 * @constructor
*/
	constructor(file:String) {
	
	}
	/**
 * @description Closes the file, sets its openMode() to NotOpen, and resets the error string.
*/
	close():void {
	
	}
	/**
 * @description Parameter(s):
*/
	copy(newName:String):Boolean {
	
	}
	/**
 * @description Return Value:
*/
	eof():Boolean {
	
	}
	/**
 * @description Return Value:
*/
	error():FileError {
	
	}
	/**
 * @description Return Value:
*/
	errorString():String {
	
	}
	/**
 * @description Return Value:
*/
	isOpen():Boolean {
	
	}
	/**
 * @description Return Value:
*/
	isTextModeEnabled():Boolean {
	
	}
	/**
 * @description Creates a link named linkName that points to the file currently specified by fileName(). What a link is depends on the underlying filesystem (be it a shortcut on Windows or a symbolic link on Mac OS X).
*/
	link(linkName:String):Boolean {
	
	}
	/**
 * @description Opens the file and sets its openMode() to mode.
*/
	open(mode:OpenMode):Boolean {
	
	}
	/**
 * @description Return Value:
*/
	openMode():void {
	
	}
	/**
 * @description Peeks at most maxSize bytes from the file, without side effects (i.e., if you read after you peek, you will get the same data).
*/
	peek(maxSize:Number):ByteArray {
	
	}
	/**
 * @description Return Value:
*/
	pos():Number {
	
	}
	/**
 * @description Read the entire file.
*/
	read():String {
	
	}
	/**
 * @description Reads at most maxSize bytes from the file.
*/
	read(maxSize:Number):ByteArray {
	
	}
	/**
 * @description Read the entire file.
*/
	readAll():ByteArray {
	
	}
	/**
 * @description Read one character from the file.
*/
	readByte():Number {
	
	}
	/**
 * @description Reads a line from the file, but no more than maxSize characters.
*/
	readByteLine(maxSize:Number):ByteArray {
	
	}
	/**
 * @description Read a line of text from the file.
*/
	readLine():String {
	
	}
	/**
 * @description Read the entire file and split it into lines of text.
*/
	readLines():Array {
	
	}
	/**
 * @description TODO:
Add description.
*/
	rename(newName:String):Boolean {
	
	}
	/**
 * @description Seeks to the start of input.
*/
	reset():Boolean {
	
	}
	/**
 * @description Sets the current position to pos.
*/
	seek(pos:Number):Boolean {
	
	}
	/**
 * @description Sets the name of the file to name. The name can have no path, a relative path, or an absolute path.
*/
	setFileName(name:String):String {
	
	}
	/**
 * @description Sets the permissions for the file to permissions.
*/
	setPermissions(permissions:Permissions):Boolean {
	
	}
	/**
 * @description If enabled is true, sets the Text flag on the file, otherwise the Text flag is removed.
*/
	setTextModeEnabled(enabled:Boolean):Boolean {
	
	}
	/**
 * @description Write a string to the file.
*/
	write(data:String, maxSize:Number):Number {
	
	}
	/**
 * @description Writes the content of byteArray to the file.
*/
	write(byteArray:ByteArray):Number {
	
	}
	/**
 * @description Write a single byte (character) to the file.
*/
	writeByte(byte:Number):Number {
	
	}
	/**
 * @description Write a line to the file.
*/
	writeLine(data:String):String {
	
	}

}
/**
 * @classdesc The DzFileDialog class is available in DAZScript via Global.FileDialog.



It provides functions that display OS native file dialogs to the user.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/filedialog_dz}*/
class DzFileDialog extends QObject {
	/**
 * @description A convenience file dialog that automatically creates a filter list for all audio formats the application can import and displays a file open dialog.
*/
	doAudioClipOpenDialog(startWith:String, parent:DzWidget):String {
	
	}
	/**
 * @description Display a dialog for the user to choose a directory.
*/
	doDirectoryDialog(title:String, desc:String, parent:DzWidget):String {
	
	}
	/**
 * @description Display a dialog for the user to choose a directory.
*/
	doDirectoryDialog(title:String, desc:String, startWith:String, parent:DzWidget):String {
	
	}
	/**
 * @description Display a dialog for the user to choose a file.
*/
	doFileDialog(open:Boolean, title:String, startWith:String, filter:String, selectedFilter:Number, parent:DzWidget):String {
	
	}
	/**
 * @description A convenience file dialog that automatically creates a filter list for all image formats the application can import/export and displays a file open/save dialog.
*/
	doImageDialog(open:Boolean, startWith:String, parent:DzWidget):String {
	
	}
	/**
 * @description A convenience file dialog that automatically creates a filter list for all video formats the application can export and displays a file save dialog.
*/
	doVideoClipSaveDialog(startWith:String, parent:DzWidget):String {
	
	}
	/**
 * @description Shows an open file dialog to the user that allows selection of multiple files.
*/
	getOpenFileNames(dir:String, filter:String, title:String, parent:DzWidget):Array {
	
	}

}
/**
 * @classdesc For each group of files that you want to make available to the user, create a new filter with the newFilter() call, then add one or more file extensions to be accepted by the filter.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/filefilter_dz}*/
class DzFileFilter extends QObject {
	/**
 * @description Default Constructor.
 * @constructor
*/
	constructor() {
	
	}
	/**
 * @description Creates a new file filter and adds a filter with the given description and extensions.
 * @constructor
*/
	constructor(description:String, extensions:Array) {
	
	}
	/**
 * @description Creates a new file filter and adds a filter with the given description and extension.
 * @constructor
*/
	constructor(description:String, extension:String) {
	
	}
	/**
 * @description Adds a file extension to the current filter.
*/
	addExtension(extension:String):String {
	
	}
	/**
 * @description Adds file extensions to the current filter.
*/
	addExtensions(extensions:Array):Array {
	
	}
	/**
 * @description Return Value:
*/
	getDefaultFilter():Number {
	
	}
	/**
 * @description Parameter(s):
*/
	getExtension(filterIdx:Number, extensionIdx:Number):String {
	
	}
	/**
 * @description Parameter(s):
*/
	getFilterDescription(filterIdx:Number):String {
	
	}
	/**
 * @description Parameter(s):
*/
	getNumExtensions(filterIdx:Number):Number {
	
	}
	/**
 * @description Return Value:
*/
	getNumFilters():Number {
	
	}
	/**
 * @description Starts a new filter with the given description.
*/
	newFilter(description:String):String {
	
	}
	/**
 * @description Sets the default filter index - by default this is 0.
*/
	setDefaultFilter(filterIdx:Number):Number {
	
	}

}
/**
 * @classdesc Provides access to getting information about files. It also serves as the base class for the other DAZ Script File I/O types.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/fileinfo_dz}*/
class DzFileInfo extends QObject {
	/**
 * @description ENUMERATOR: The file is readable by the owner of the file.
*/
	
	static ReadOwner;
	/**
 * @description ENUMERATOR: The file is writable by the owner of the file.
*/
	
	static WriteOwner;
	/**
 * @description ENUMERATOR: The file is executable by the owner of the file.
*/
	
	static ExeOwner;
	/**
 * @description ENUMERATOR: The file is readable by the user.
*/
	
	static ReadUser;
	/**
 * @description ENUMERATOR: The file is writable by the user.
*/
	
	static WriteUser;
	/**
 * @description ENUMERATOR: The file is executable by the user.
*/
	
	static ExeUser;
	/**
 * @description ENUMERATOR: The file is readable by the group.
*/
	
	static ReadGroup;
	/**
 * @description ENUMERATOR: The file is writable by the group.
*/
	
	static WriteGroup;
	/**
 * @description ENUMERATOR: The file is executable by the group.
*/
	
	static ExeGroup;
	/**
 * @description ENUMERATOR: The file is readable by anyone.
*/
	
	static ReadOther;
	/**
 * @description ENUMERATOR: The file is writable by anyone.
*/
	
	static WriteOther;
	/**
 * @description ENUMERATOR: The file is executable by anyone.
*/
	
	static ExeOther;
	/**
 * @description Creates a file info object to retrieve information about the given file.
 * @constructor
*/
	constructor(file:String) {
	
	}
	/**
 * @description Deprecated
*/
	absFileName():String {
	
	}
	/**
 * @description Return Value:
*/
	absoluteDir():DzDir {
	
	}
	/**
 * @description TODO:
Add description.
*/
	absoluteFilePath():String {
	
	}
	/**
 * @description Return Value:
*/
	absolutePath():String {
	
	}
	/**
 * @description Deprecated
*/
	baseName():String {
	
	}
	/**
 * @description Return Value:
*/
	bundleName():String {
	
	}
	/**
 * @description Return Value:
*/
	caching():Boolean {
	
	}
	/**
 * @description Return Value:
*/
	canonicalFilePath():String {
	
	}
	/**
 * @description Return Value:
*/
	canonicalPath():String {
	
	}
	/**
 * @description Return Value:
*/
	completeBaseName():String {
	
	}
	/**
 * @description Return Value:
*/
	completeSuffix():String {
	
	}
	/**
 * @description Return Value:
*/
	created():Date {
	
	}
	/**
 * @description Return Value:
*/
	dir():DzDir {
	
	}
	/**
 * @description Return Value:
*/
	exists():Boolean {
	
	}
	/**
 * @description Deprecated
*/
	extension():String {
	
	}
	/**
 * @description Return Value:
*/
	fileName():String {
	
	}
	/**
 * @description Return Value:
*/
	filePath():String {
	
	}
	/**
 * @description Return Value:
*/
	isAbsolute():Boolean {
	
	}
	/**
 * @description Return Value:
*/
	isBundle():Boolean {
	
	}
	/**
 * @description Return Value:
*/
	isDir():Boolean {
	
	}
	/**
 * @description Return Value:
*/
	isExecutable():Boolean {
	
	}
	/**
 * @description Return Value:
*/
	isFile():Boolean {
	
	}
	/**
 * @description Return Value:
*/
	isHidden():Boolean {
	
	}
	/**
 * @description Return Value:
*/
	isReadable():Boolean {
	
	}
	/**
 * @description Return Value:
*/
	isRelative():Boolean {
	
	}
	/**
 * @description Return Value:
*/
	isRoot():Boolean {
	
	}
	/**
 * @description Return Value:
*/
	isSymLink():Boolean {
	
	}
	/**
 * @description Return Value:
*/
	isWritable():Boolean {
	
	}
	/**
 * @description Return Value:
*/
	lastModified():Date {
	
	}
	/**
 * @description Return Value:
*/
	lastRead():Date {
	
	}
	/**
 * @description Converts the file's path to an absolute path if it is not already in that form.
*/
	makeAbsolute():Boolean {
	
	}
	/**
 * @description Return Value:
*/
	path():String {
	
	}
	/**
 * @description TODO:
Add description.
*/
	permission(permissions:Permissions):Boolean {
	
	}
	/**
 * @description Return Value:
*/
	permissions():void {
	
	}
	/**
 * @description Refreshes information about the file, i.e. reads in information from the file system the next time a cached property is fetched.
*/
	refresh():void {
	
	}
	/**
 * @description Delete the file from the disk.
*/
	remove():Boolean {
	
	}
	/**
 * @description Sets whether or not caching of file information caching is enabled. When caching is enabled, file information is read from the file system the first time it's needed, but generally not later.
*/
	setCaching(enable:Boolean):Boolean {
	
	}
	/**
 * @description Sets the file to provide information about to file in dir.
*/
	setFile(dir:DzDir, file:String):DzDir {
	
	}
	/**
 * @description Sets the file to provide information about to file.
*/
	setFile(file:DzFile):DzFile {
	
	}
	/**
 * @description Sets the file to provide information about to file.
*/
	setFile(file:String):String {
	
	}
	/**
 * @description Return Value:
*/
	size():Number {
	
	}
	/**
 * @description Return Value:
*/
	sizeStr():String {
	
	}
	/**
 * @description Return Value:
*/
	suffix():String {
	
	}
	/**
 * @description Return Value:
*/
	symLinkTarget():String {
	
	}

}
/**
 * @classdesc This class provides functionality common to all file importers and exporters such as the ability to edit options before file import/export. Also, this class provides functions for importers/exporters to report errors to the user/log file, and provides static convenience functions for dissecting file paths into their parts.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/fileio_dz}*/
class DzFileIO extends DzBase {
	/**
 * @description Holds whether or not the options for the importer/exporter has been shown.
	*/
	optionsShown:Boolean;
	/**
 * @description TODO:
Add description.
*/
	getDefaultOptions(options:DzFileIOSettings):DzFileIOSettings {
	
	}
	/**
 * @description Gets the options for an import operation.
*/
	getOptions(options:DzFileIOSettings, useInterface:Boolean, filename:String):Boolean {
	
	}
	/**
 * @description Return Value:
*/
	showOptions():Boolean {
	
	}

}
/**
 * @classdesc This class manages presets in the form of DzFileIOSettings objects for various importers, exporters, and other forms of File I/O.



There is only one instance of this manager in an application. This instance is created and owned by DzApp. Don't create an instance of this class, but rather request it from DzApp via DzApp.getFileIOPresetMgr().



File I/O presets are defined by a unique name. They have two types of settings: Specific Settings and Common Settings.



Specific Settings

 Specific settings are tied to a class name. This class name is typically, but not always, the name of an importer or exporter, such as "DzObjImporter" or "DzObjExporter." The key values for specific settings will vary based on the class.



Common Settings

 Common settings for a preset are common to all class names. These include settings that define scale values and axis settings. Common keys can be accessed via the following methods:  * getLateralAxisKey()


 getVerticalAxisKey()

 getDepthAxisKey()

 getInvertLateralAxisKey()

 getInvertVerticalAxisKey()

 getInvertDepthAxisKey()

 getScaleKey()




The scale value used by the presets is for importers. If you are working with an exporter then the scale value needs to be converted to 1/scale. As an example, if the scale value for a preset is 2.54 then the scale value for an exporter would be 1/2.54 = 0.3937
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/fileiopresetmgr_dz}*/
class DzFileIOPresetMgr extends QObject {
	/**
 * @description TODO:
Add description.
*/
	getAllCurrentSettings(className:String, settings:DzFileIOSettings):Boolean {
	
	}
	/**
 * @description TODO:
Add description.
*/
	getAllDefaults(className:String, settings:DzFileIOSettings):Boolean {
	
	}
	/**
 * @description TODO:
Add description.
*/
	getAllSettings(presetName:String, className:String, settings:DzFileIOSettings):Boolean {
	
	}
	/**
 * @description Parameter(s):
*/
	getAvailableClasses(presetName:String):Array {
	
	}
	/**
 * @description Parameter(s):
*/
	getAvailablePresets(className:String):Array {
	
	}
	/**
 * @description TODO:
Add description.
*/
	getCommonApplicationDefaults(settings:DzFileIOSettings):DzFileIOSettings {
	
	}
	/**
 * @description TODO:
Add description.
*/
	getCommonDefaults(className:String, settings:DzFileIOSettings):Boolean {
	
	}
	/**
 * @description Populates settings with the values for common to all presets named presetName
*/
	getCommonSettings(presetName:String, className:String, settings:DzFileIOSettings):Boolean {
	
	}
	/**
 * @description TODO:
Add description.
*/
	getCurrentCommonSettings(className:String, settings:DzFileIOSettings):Boolean {
	
	}
	/**
 * @description TODO:
Add description.
*/
	getCurrentSpecificSettings(className:String, settings:DzFileIOSettings):Boolean {
	
	}
	/**
 * @description Return Value:
*/
	getCustomPresetLabel():String {
	
	}
	/**
 * @description Return Value:
*/
	getDepthAxisKey():String {
	
	}
	/**
 * @description Return Value:
*/
	getInvertDepthAxisKey():String {
	
	}
	/**
 * @description Return Value:
*/
	getInvertLateralAxisKey():String {
	
	}
	/**
 * @description Return Value:
*/
	getInvertVerticalAxisKey():String {
	
	}
	/**
 * @description Return Value:
*/
	getLateralAxisKey():String {
	
	}
	/**
 * @description Parameter(s):
*/
	getPresetID(presetName:String, className:String):Number {
	
	}
	/**
 * @description Parameter(s):
*/
	getPresetName(id:Number, className:String):String {
	
	}
	/**
 * @description Note:
*/
	getScaleKey():String {
	
	}
	/**
 * @description TODO:
Add description.
*/
	getSpecificDefaults(className:String, settings:DzFileIOSettings):Boolean {
	
	}
	/**
 * @description TODO:
Add description.
*/
	getSpecificSettings(presetName:String, className:String, settings:DzFileIOSettings):Boolean {
	
	}
	/**
 * @description Parameter(s):
*/
	getSystemPresets(className:String):Array {
	
	}
	/**
 * @description Parameter(s):
*/
	getUserPresets(className:String):Array {
	
	}
	/**
 * @description Return Value:
*/
	getVerticalAxisKey():String {
	
	}
	/**
 * @description Parameter(s):
*/
	isSystemPreset(presetName:String):Boolean {
	
	}
	/**
 * @description Parameter(s):
*/
	isUserPreset(presetName:String):Boolean {
	
	}
	/**
 * @description Parameter(s):
*/
	presetExists(id:Number, className:String):Boolean {
	
	}
	/**
 * @description Parameter(s):
*/
	presetExists(presetName:String, className:String):Boolean {
	
	}
	/**
 * @description Attempts to remove the preset with the given preset name and class name.
*/
	removeUserPreset(presetName:String, className:String):Boolean {
	
	}
	/**
 * @description Attempts to save a user preset with the given preset name and class name
*/
	saveUserPreset(presetName:String, className:String, keepCommonSettings:Boolean, settings:DzFileIOSettings):Boolean {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when a preset is added
 * @signature presetRemoved(const QString&, const QSring&)
 * @event
*/
	presetAdded(presetName:String, className:String):void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description TODO: Add Description
 * @signature presetLoadFinished()
 * @event
*/
	presetLoadFinished():void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when a preset is removed
 * @signature presetRemoved(const QString&, const QSring&)
 * @event
*/
	presetRemoved(presetName:String, className:String):void {
	
	}

}
/**
 * @classdesc TODO:
Add detailed description.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/fileiosettings_dz}*/
class DzFileIOSettings extends DzSettings {
	/**
 * @description Default Constructor - creates an empty set of options
 * @constructor
*/
	constructor() {
	
	}
	/**
 * @description Copy constructor.
 * @constructor
*/
	constructor(settings:DzFileIOSettings) {
	
	}

}
/**
 * @classdesc TODO:
Add detailed description.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/fileproperty_dz}*/
class DzFileProperty extends DzStringProperty {
	/**
 * @description ENUMERATOR: The user will be prompted with a 'Save As' type dialog when browsing for a file.
*/
	
	static FileSave;
	/**
 * @description ENUMERATOR: The user will be prompted with an 'Open' type dialog when browsing for a file.
*/
	
	static FileOpen;
	/**
 * @description ENUMERATOR: The user will be prompted with a 'Select Folder' type dialog when browsing for a directory.
*/
	
	static Dir;
	/**
 * @description Default Constructor. Creates a non-user property.
 * @constructor
*/
	constructor() {
	
	}
	/**
 * @description Parameter(s):
 * @constructor
*/
	constructor(name:String, isUserProperty:Boolean) {
	
	}
	/**
 * @description Parameter(s):
*/
	getAbsolutePath(path:String):String {
	
	}
	/**
 * @description Gets the filter value.
*/
	getFilter():String {
	
	}
	/**
 * @description Gets the file type.
*/
	getType():FileType {
	
	}
	/**
 * @description Sets the value to use as a file extension filter.
*/
	setFilter(filter:String):String {
	
	}
	/**
 * @description Sets the file type for the property.
*/
	setType(type:FileType):FileType {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when the filter for the property changes.
 * @signature "filterChanged()"
 * @event
*/
	filterChanged():void {
	
	}

}
/**
 * @classdesc TODO:
Add detailed description.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/flipmanip_dz}*/
class DzFlipManip extends DzImageManip {
	/**
 * @description Return Value:
*/
	flipHorizontal():Boolean {
	
	}
	/**
 * @description Return Value:
*/
	flipVertical():Boolean {
	
	}
	/**
 * @description Sets whether or not the image is flipped horizontally.
*/
	setFlipHorizontal(onOff:Boolean):Boolean {
	
	}
	/**
 * @description Sets whether or not the image is flipped vertically.
*/
	setFlipVertical(onOff:Boolean):Boolean {
	
	}

}
/**
 * @classdesc This class provides an animatable floating-point property with 2 values that is stored and can be accessed as a DzVec2.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/float2property_dz}*/
class DzFloat2Property extends DzFloatProperty {
	/**
 * @description Default Constructor. Creates a non-animatable, non-user property.
 * @constructor
*/
	constructor() {
	
	}
	/**
 * @description Parameter(s):
 * @constructor
*/
	constructor(name:String, canAnimate:Boolean, isUserProperty:Boolean, initVal:DzVec2) {
	
	}
	/**
 * @description Parameter(s):
 * @constructor
*/
	constructor(name:String, canAnimate:Boolean, isUserProperty:Boolean) {
	
	}
	/**
 * @description Adjust the value of the property based on the contribution of property controllers.
*/
	adjustFloat2Value(val:DzVec2):DzVec2 {
	
	}
	/**
 * @description Adjust the value of the property at the given time based on the contribution of property controllers.
*/
	adjustFloat2Value(tm:DzTime, val:DzVec2):DzVec2 {
	
	}
	/**
 * @description Return Value:
*/
	getDefaultFloat2Value():DzVec2 {
	
	}
	/**
 * @description TODO:
Add description.
*/
	getFloat2FollowValue():DzVec2 {
	
	}
	/**
 * @description TODO:
Add description.
*/
	getFloat2FollowValue(tm:DzTime):DzVec2 {
	
	}
	/**
 * @description Return Value:
*/
	getFloat2Value():DzVec2 {
	
	}
	/**
 * @description Parameter(s):
*/
	getFloat2Value(tm:DzTime):DzVec2 {
	
	}
	/**
 * @description Parameter(s):
*/
	getKeyFloat2Value(i:Number):DzVec2 {
	
	}
	/**
 * @description This function is provided for the special case of ERC link redirection; sometimes called 'cross-talk'. For example, if Figure A (a piece of clothing, for example) is 'Fit To' Figure B, the ERC links on Figure A are redirected to follow channels on Figure B; this is how morphs on an item of clothing will follow morphs on the figure, etc. This function will provide the value of the property ignoring any redirection of ERC links. So, for a figure that is not 'Fit To' another figure, this will return the same value as getValue(). For a figure that is 'Fit To' another figure, this will return the value that the property would have if the ERC link had not been redirected.
*/
	getLocalFloat2Value():DzVec2 {
	
	}
	/**
 * @description This function is provided for the special case of ERC link redirection; sometimes called 'cross-talk'. For example, if Figure A (a piece of clothing, for example) is 'Fit To' Figure B, the ERC links on Figure A are redirected to follow channels on Figure B; this is how morphs on an item of clothing will follow morphs on the figure, etc. This function will provide the value of the property ignoring any redirection of ERC links. So, for a figure that is not 'Fit To' another figure, this will return the same value as getValue(). For a figure that is 'Fit To' another figure, this will return the value that the property would have if the ERC link had not been redirected.
*/
	getLocalFloat2Value(tm:DzTime):DzVec2 {
	
	}
	/**
 * @description This function is provided to make it easy to get the 'keyed' value of the property without any modifications. When the value of a property is evaluated, first the value based on key interpolation is calculated, that value is then passed to each of the controllers on the property (ERC links for example) which can modify that value. This modified value is then returned as the value of the property by getFloat2Value(). This function returns the value of the property before the application of the controllers; strictly the result of key interpolation.
*/
	getRawFloat2Value(tm:DzTime):DzVec2 {
	
	}
	/**
 * @description This function is provided to make it easy to get the 'keyed' value of the property without any modifications. When the value of a property is evaluated, first the value based on key interpolation is calculated, that value is then passed to each of the controllers on the property (ERC links for example) which can modify that value. This modified value is then returned as the value of the property by getFloat2Value(). This function returns the value of the property before the application of the controllers; strictly the result of key interpolation.
*/
	getRawFloat2Value():DzVec2 {
	
	}
	/**
 * @description Sets the default value for this property.
*/
	setDefaultFloat2Value(val:DzVec2):DzVec2 {
	
	}
	/**
 * @description Sets the value for this property at the given time; or the default value if this property is not animatable.
*/
	setFloat2Value(tm:DzTime, val:DzVec2):DzTime {
	
	}
	/**
 * @description Sets the value for this property at the current time; or the default value if this property is not animatable.
*/
	setFloat2Value(val:DzVec2):DzVec2 {
	
	}
	/**
 * @description Sets the value for this property at the given time; or the default value if this property is not animatable.
*/
	setFloat2Value(tm:DzTime, val:DzVec2, interp:InterpolationType):DzTime {
	
	}
	/**
 * @description Sets the value for this property at the given time; or the default value if this property is not animatable.
*/
	setFloat2Value(tm:DzTime, val:DzVec2, interp:InterpolationType, param0:Number, param1:Number, param2:Number):DzTime {
	
	}
	/**
 * @description Sets the value of the i'th key.
*/
	setKeyFloat2Value(i:Number, val:DzVec2):Number {
	
	}

}
/**
 * @classdesc This class provides an animatable floating-point property with 3 values that is stored and can be accessed as a DzVec3.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/float3property_dz}*/
class DzFloat3Property extends DzFloatProperty {
	/**
 * @description Default Constructor. Creates a non-animatable, non-user property.
 * @constructor
*/
	constructor() {
	
	}
	/**
 * @description Parameter(s):
 * @constructor
*/
	constructor(name:String, canAnimate:Boolean, isUserProperty:Boolean, initVal:DzVec3) {
	
	}
	/**
 * @description Parameter(s):
 * @constructor
*/
	constructor(name:String, canAnimate:Boolean, isUserProperty:Boolean) {
	
	}
	/**
 * @description Adjust the value of the property based on the contribution of property controllers.
*/
	adjustFloat3Value(val:DzVec3):DzVec3 {
	
	}
	/**
 * @description Adjust the value of the property at the given time based on the contribution of property controllers.
*/
	adjustFloat3Value(tm:DzTime, val:DzVec3):DzVec3 {
	
	}
	/**
 * @description Return Value:
*/
	getDefaultFloat3Value():DzVec3 {
	
	}
	/**
 * @description TODO:
Add description.
*/
	getFloat3FollowValue():DzVec3 {
	
	}
	/**
 * @description TODO:
Add description.
*/
	getFloat3FollowValue(tm:DzTime):DzVec3 {
	
	}
	/**
 * @description Return Value:
*/
	getFloat3Value():DzVec3 {
	
	}
	/**
 * @description Parameter(s):
*/
	getFloat3Value(tm:DzTime):DzVec3 {
	
	}
	/**
 * @description Parameter(s):
*/
	getKeyFloat3Value(i:Number):DzVec3 {
	
	}
	/**
 * @description This function is provided for the special case of ERC link redirection; sometimes called 'cross-talk'. For example, if Figure A (a piece of clothing, for example) is 'Fit To' Figure B, the ERC links on Figure A are redirected to follow channels on Figure B; this is how morphs on an item of clothing will follow morphs on the figure, etc. This function will provide the value of the property ignoring any redirection of ERC links. So, for a figure that is not 'Fit To' another figure, this will return the same value as getValue(). For a figure that is 'Fit To' another figure, this will return the value that the property would have if the ERC link had not been redirected.
*/
	getLocalFloat3Value():DzVec3 {
	
	}
	/**
 * @description This function is provided for the special case of ERC link redirection; sometimes called 'cross-talk'. For example, if Figure A (a piece of clothing, for example) is 'Fit To' Figure B, the ERC links on Figure A are redirected to follow channels on Figure B; this is how morphs on an item of clothing will follow morphs on the figure, etc. This function will provide the value of the property ignoring any redirection of ERC links. So, for a figure that is not 'Fit To' another figure, this will return the same value as getValue(). For a figure that is 'Fit To' another figure, this will return the value that the property would have if the ERC link had not been redirected.
*/
	getLocalFloat3Value(tm:DzTime):DzVec3 {
	
	}
	/**
 * @description This function is provided to make it easy to get the 'keyed' value of the property without any modifications. When the value of a property is evaluated, first the value based on key interpolation is calculated, that value is then passed to each of the controllers on the property (ERC links for example) which can modify that value. This modified value is then returned as the value of the property by getFloat3Value(). This function returns the value of the property before the application of the controllers; strictly the result of key interpolation.
*/
	getRawFloat3Value(tm:DzTime):DzVec3 {
	
	}
	/**
 * @description This function is provided to make it easy to get the 'keyed' value of the property without any modifications. When the value of a property is evaluated, first the value based on key interpolation is calculated, that value is then passed to each of the controllers on the property (ERC links for example) which can modify that value. This modified value is then returned as the value of the property by getFloat3Value(). This function returns the value of the property before the application of the controllers; strictly the result of key interpolation.
*/
	getRawFloat3Value():DzVec3 {
	
	}
	/**
 * @description Sets the default value for this property.
*/
	setDefaultFloat3Value(val:DzVec3):DzVec3 {
	
	}
	/**
 * @description Sets the value for this property at the given time; or the default value if this property is not animatable.
*/
	setFloat3Value(tm:DzTime, val:DzVec3):DzTime {
	
	}
	/**
 * @description Sets the value for this property at the current time; or the default value if this property is not animatable.
*/
	setFloat3Value(val:DzVec3):DzVec3 {
	
	}
	/**
 * @description Sets the value for this property at the given time; or the default value if this property is not animatable.
*/
	setFloat3Value(tm:DzTime, val:DzVec3, interp:InterpolationType):DzTime {
	
	}
	/**
 * @description Sets the value for this property at the given time; or the default value if this property is not animatable.
*/
	setFloat3Value(tm:DzTime, val:DzVec3, interp:InterpolationType, param0:Number, param1:Number, param2:Number):DzTime {
	
	}
	/**
 * @description Sets the value of the i'th key.
*/
	setKeyFloat3Value(i:Number, val:DzVec3):Number {
	
	}

}
/**
 * @classdesc This class manages 4-component colors (colors that can include an alpha value).
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/floatcolor_dz}*/
class DzFloatColor extends Object {
	/**
 * @description Holds the blue value for the color. Should be in the [0,1] range.
	*/
	blue:String;
	/**
 * @description Holds the green value for the color. Should be in the [0,1] range.
	*/
	green:String;
	/**
 * @description Holds the red value for the color. Should be in the [0,1] range.
	*/
	red:String;
	/**
 * @description Default constructor. Initializes a new color to opaque black.
 * @constructor
*/
	constructor() {
	
	}
	/**
 * @description Constructor that takes individual floating-point RGBA components. Initializes the color to the given values. Values should be in the [0,1] range.
 * @constructor
*/
	constructor(r:Number, g:Number, b:Number, a=1.0:Number) {
	
	}
	/**
 * @description Constructor that creates an achromatic color.
 * @constructor
*/
	constructor(val:Number, alpha=1.0:Number) {
	
	}
	/**
 * @description Constructor that takes a floating-point array to define RGBA colors. Initializes the color to the given values.
 * @constructor
*/
	constructor(color:Array) {
	
	}
	/**
 * @description Constructor that takes a QColor. Initializes the color to the given color. The color is assumed to be completely opaque.
 * @constructor
*/
	constructor(color:Color) {
	
	}
	/**
 * @description Copy Constructor.
 * @constructor
*/
	constructor(color:DzFloatColor) {
	
	}
	/**
 * @description Modifies the color such that the value of no component is less than min and no more than max.
*/
	clamp(min:Number, max:Number, includeAlpha:Boolean):Number {
	
	}
	/**
 * @description Parameter(s):
*/
	clamped(min:Number, max:Number, includeAlpha:Boolean):Number {
	
	}
	/**
 * @description Parameter(s):
*/
	clampedMax(max:Number, includeAlpha:Boolean):Number {
	
	}
	/**
 * @description Parameter(s):
*/
	clampedMin(min:Number, includeAlpha:Boolean):Number {
	
	}
	/**
 * @description Modifies the color such that the value of no component is more than max.
*/
	clampMax(max:Number, includeAlpha:Boolean):Number {
	
	}
	/**
 * @description Modifies the color such that the value of no component is less than min.
*/
	clampMin(min:Number, includeAlpha:Boolean):Number {
	
	}
	/**
 * @description Parameter(s):
*/
	equals(color:DzFloatColor, tolerance:Number):Boolean {
	
	}
	/**
 * @description Applies a gamma value to the color.
*/
	gammaColor(gamma:Number, doAlpha:Boolean):Number {
	
	}
	/**
 * @description Holds the alpha value for the color. Should be in the [0,1] range.
*/
	getColor():Color {
	
	}
	/**
 * @description Return Value:
*/
	getGrayscale():Number {
	
	}
	/**
 * @description Return Value:
*/
	getHsl():Array {
	
	}
	/**
 * @description Return Value:
*/
	getHsv():Array {
	
	}
	/**
 * @description Return Value:
*/
	getMaxRGBValue():Number {
	
	}
	/**
 * @description Return Value:
*/
	getRelativeLuminance():Number {
	
	}
	/**
 * @description Return Value:
*/
	getRgba():Array {
	
	}
	/**
 * @description Linerizes the color based on a gamma value.
*/
	linearizeColor(gamma:Number, doAlpha:Boolean):Number {
	
	}
	/**
 * @description Parameter(s):
*/
	modulate(min:Number, max:Number, includeAlpha:Boolean):Number {
	
	}
	/**
 * @description Modifies the color such that the value of each component is modulated between min and max.
*/
	modulo(min:Number, max:Number, includeAlpha:Boolean):Number {
	
	}
	/**
 * @description Sets the color according to an array of the hue, saturation, lightness and (optionally) alpha component values.
*/
	setHsl(list:Array):Array {
	
	}
	/**
 * @description Sets a HSL value on the color.
*/
	setHsl(h:Number, s:Number, l:Number, a:Number):Number {
	
	}
	/**
 * @description Sets a HSV value on the color.
*/
	setHsv(h:Number, s:Number, v:Number, a:Number):Number {
	
	}
	/**
 * @description Sets the color according to an array of the hue, saturation, value and alpha component values.
*/
	setHsv(list:Array):Array {
	
	}
	/**
 * @description Sets the color according to an array of the red, green, blue and alpha component values.
*/
	setRgba(list:Array):Array {
	
	}
	/**
 * @description Sets the color values. Values should be in the [0,1] range.
*/
	setValue(r:Number, g:Number, b:Number, a:Number):Number {
	
	}
	/**
 * @description TODO:
Add description.
*/
	setValue(color:Color):Color {
	
	}

}
/**
 * @classdesc This class provides an animatable color property that is stored and can be accessed as an integer property. The integer value represents a color as a 32 bit rgba value with each byte representing a component with the range [0, 255].
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/floatcolorproperty_dz}*/
class DzFloatColorProperty extends DzColorProperty {
	/**
 * @description Default Constructor. Creates a non-animatable, non-user property.
 * @constructor
*/
	constructor() {
	
	}
	/**
 * @description Parameter(s):
 * @constructor
*/
	constructor(name:String, canAnimate:Boolean, isUserProperty:Boolean, initVal:Color) {
	
	}
	/**
 * @description Parameter(s):
 * @constructor
*/
	constructor(name:String, canAnimate:Boolean, isUserProperty:Boolean) {
	
	}
	/**
 * @description TODO:
Add description.
*/
	adjustFloatColorValue(val:DzFloatColor):DzFloatColor {
	
	}
	/**
 * @description TODO:
Add description.
*/
	adjustFloatColorValue(tm:DzTime, val:DzFloatColor):DzFloatColor {
	
	}
	/**
 * @description TODO:
Add description.
*/
	getDefaultFloatColorValue():DzFloatColor {
	
	}
	/**
 * @description TODO:
Add description.
*/
	getFloatColorFollowValue():DzFloatColor {
	
	}
	/**
 * @description TODO:
Add description.
*/
	getFloatColorFollowValue(tm:DzTime):DzFloatColor {
	
	}
	/**
 * @description TODO:
Add description.
*/
	getFloatColorValue():DzFloatColor {
	
	}
	/**
 * @description TODO:
Add description.
*/
	getFloatColorValue(tm:DzTime):DzFloatColor {
	
	}
	/**
 * @description TODO:
Add description.
*/
	getFloatMax():Number {
	
	}
	/**
 * @description TODO:
Add description.
*/
	getFloatMin():Number {
	
	}
	/**
 * @description TODO:
Add description.
*/
	getFloatSensitivity():Number {
	
	}
	/**
 * @description TODO:
Add description.
*/
	getKeyFloatColorValue(i:Number):DzFloatColor {
	
	}
	/**
 * @description TODO:
Add description.
*/
	getKeyInterpolationTypeValues(i:Number):Array {
	
	}
	/**
 * @description TODO:
Add description.
*/
	getLocalFloatColorValue():DzFloatColor {
	
	}
	/**
 * @description TODO:
Add description.
*/
	getLocalFloatColorValue(tm:DzTime):DzFloatColor {
	
	}
	/**
 * @description TODO:
Add description.
*/
	getRawFloatColorValue():DzFloatColor {
	
	}
	/**
 * @description TODO:
Add description.
*/
	getRawFloatColorValue(tm:DzTime):DzFloatColor {
	
	}
	/**
 * @description TODO:
Add description.
*/
	setDefaultFloatColorValue(val:DzFloatColor):DzFloatColor {
	
	}
	/**
 * @description TODO:
Add description.
*/
	setFloatColorValue(val:DzFloatColor):DzFloatColor {
	
	}
	/**
 * @description TODO:
Add description.
*/
	setFloatColorValue(tm:DzTime, val:DzFloatColor, interp:InterpolationType):DzTime {
	
	}
	/**
 * @description TODO:
Add description.
*/
	setFloatColorValue(tm:DzTime, val:DzFloatColor):DzTime {
	
	}
	/**
 * @description TODO:
Add description.
*/
	setFloatColorValue(tm:DzTime, val:DzFloatColor, interp:InterpolationType, param0:Number, param1:Number, param2:Number):DzTime {
	
	}
	/**
 * @description TODO:
Add description.
*/
	setFloatMax(max:Number):Number {
	
	}
	/**
 * @description TODO:
Add description.
*/
	setFloatMin(min:Number):Number {
	
	}
	/**
 * @description TODO:
Add description.
*/
	setFloatMinMax(min:Number, max:Number):Number {
	
	}
	/**
 * @description TODO:
Add description.
*/
	setFloatSensitivity(sens:Number):Number {
	
	}
	/**
 * @description TODO:
Add description.
*/
	setKeyFloatColorValue(i:Number, val:DzFloatColor):Number {
	
	}
	/**
 * @description TODO:
Add description.
*/
	setKeyInterpolation(i:Number, interp:InterpolationType, param0:Number, param1:Number, param2:Number):Number {
	
	}
	/**
 * @description TODO:
Add description.
*/
	setKeyInterpolation(i:Number, interp:InterpolationType):Number {
	
	}
	/**
 * @description TODO:
Add description.
*/
	setRawFloatColorValue(val:DzFloatColor):DzFloatColor {
	
	}
	/**
 * @description TODO:
Add description.
*/
	setRawFloatColorValue(tm:DzTime, val:DzFloatColor):DzTime {
	
	}

}
/**
 * @classdesc TODO:
Add detailed description.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/floatproperty_dz}*/
class DzFloatProperty extends DzNumericProperty {
	/**
 * @description ENUMERATOR: Linear interpolation between key values.
*/
	
	static LINEAR_INTERP;
	/**
 * @description ENUMERATOR: Constant interpolation between key values.
*/
	
	static CONSTANT_INTERP;
	/**
 * @description ENUMERATOR: TCB (Kochanek-Bartels) Spline interpolation between key values.
*/
	
	static TCB_INTERP;
	/**
 * @description ENUMERATOR: Hermite Spline interpolation between key values.
*/
	
	static HERMITE_INTERP;
	/**
 * @description ENUMERATOR: This property is not a transform property.
*/
	
	static NON_TRANSFORM;
	/**
 * @description ENUMERATOR: This property is a scale transform.
*/
	
	static SCALE;
	/**
 * @description ENUMERATOR: This property is a translation transform property.
*/
	
	static TRANSLATE;
	/**
 * @description ENUMERATOR: This property is a rotation on the first axis of the rotation order.
*/
	
	static ROT_FIRST_AXIS;
	/**
 * @description ENUMERATOR: This property is a rotation on the second axis of the rotation order.
*/
	
	static ROT_SECOND_AXIS;
	/**
 * @description ENUMERATOR: This property is a rotation on the third axis of the rotation order.
*/
	
	static ROT_THIRD_AXIS;
	/**
 * @description Default Constructor. Creates a non-animatable, non-user property.
 * @constructor
*/
	constructor() {
	
	}
	/**
 * @description Parameter(s):
 * @constructor
*/
	constructor(name:String, canAnimate:Boolean, isUserProperty:Boolean, defaultVal=0.0:Number) {
	
	}
	/**
 * @description Adds the given value to all the key values.
*/
	add(val:Number, applyToDefault:Boolean):Number {
	
	}
	/**
 * @description Adjust the value of the property based on the contribution of property controllers.
*/
	adjustValue(val:Number):Number {
	
	}
	/**
 * @description Adjust the value of the property at the given time based on the contribution of property controllers.
*/
	adjustValue(tm:DzTime, val:Number):Number {
	
	}
	/**
 * @description Divides all key values by the given amount.
*/
	divide(val:Number, applyToDefault:Boolean):Number {
	
	}
	/**
 * @description Return Value:
*/
	getDefaultValue():Number {
	
	}
	/**
 * @description Return Value:
*/
	getDisplayAsPercent():Boolean {
	
	}
	/**
 * @description Return Value:
*/
	getDoubleDefaultValue():Number {
	
	}
	/**
 * @description Parameter(s):
*/
	getDoubleValue(tm:DzTime):Number {
	
	}
	/**
 * @description Parameter(s):
*/
	getKeyInterpolationType(i:Number):InterpolationType {
	
	}
	/**
 * @description Parameter(s):
*/
	getKeyInterpolationTypeValues(i:Number):Array {
	
	}
	/**
 * @description Parameter(s):
*/
	getKeyValue(i:Number):Number {
	
	}
	/**
 * @description This function is provided for the special case of ERC link redirection; sometimes called 'cross-talk'. For example, if Figure A (a piece of clothing, for example) is 'Fit To' Figure B, the ERC links on Figure A are redirected to follow channels on Figure B; this is how morphs on an item of clothing will follow morphs on the figure, etc. This function will provide the value of the property ignoring any redirection of ERC links. So, for a figure that is not 'Fit To' another figure, this will return the same value as getValue(). For a figure that is 'Fit To' another figure, this will return the value that the property would have if the ERC link had not been redirected.
*/
	getLocalValue():Number {
	
	}
	/**
 * @description This function is provided for the special case of ERC link redirection; sometimes called 'cross-talk'. For example, if Figure A (a piece of clothing, for example) is 'Fit To' Figure B, the ERC links on Figure A are redirected to follow channels on Figure B; this is how morphs on an item of clothing will follow morphs on the figure, etc. This function will provide the value of the property ignoring any redirection of ERC links. So, for a figure that is not 'Fit To' another figure, this will return the same value as getValue(). For a figure that is 'Fit To' another figure, this will return the value that the property would have if the ERC link had not been redirected.
*/
	getLocalValue(tm:DzTime):Number {
	
	}
	/**
 * @description Return Value:
*/
	getMax():Number {
	
	}
	/**
 * @description Return Value:
*/
	getMin():Number {
	
	}
	/**
 * @description This function is provided to make it easy to get the 'keyed' value of the property without any modifications. When the value of a property is evaluated, first the value based on key interpolation is calculated, that value is then passed to each of the controllers on the property (ERC links for example) which can modify that value. This modified value is then returned as the value of the property by getValue(). This function returns the value of the property before the application of the controllers; strictly the result of key interpolation.
*/
	getRawValue():Number {
	
	}
	/**
 * @description This function is provided to make it easy to get the 'keyed' value of the property without any modifications. When the value of a property is evaluated, first the value based on key interpolation is calculated, that value is then passed to each of the controllers on the property (ERC links for example) which can modify that value. This modified value is then returned as the value of the property by getValue(). This function returns the value of the property before the application of the controllers; strictly the result of key interpolation.
*/
	getRawValue(tm:DzTime):Number {
	
	}
	/**
 * @description TODO:
Add description.
*/
	getScaledFollowValue(tm:DzTime):Number {
	
	}
	/**
 * @description Return Value:
*/
	getSensitivity():Number {
	
	}
	/**
 * @description Return Value:
*/
	getTransformType():TransformType {
	
	}
	/**
 * @description Return Value:
*/
	getValue():Number {
	
	}
	/**
 * @description Parameter(s):
*/
	getValue(tm:DzTime):Number {
	
	}
	/**
 * @description Multiplies all key values by the given amount.
*/
	multiply(val:Number, applyToDefault:Boolean):Number {
	
	}
	/**
 * @description Sets the default value for this property.
*/
	setDefaultValue(val:Number):Number {
	
	}
	/**
 * @description Sets whether this property should have its value displayed as a percentage; the default is false (value is displayed as a decimal).
*/
	setDisplayAsPercent(onOff:Boolean):Boolean {
	
	}
	/**
 * @description Sets the default value for this property.
*/
	setDoubleDefaultValue(val:Number):Number {
	
	}
	/**
 * @description Sets the value for this property at the given time; or the default value if this property is not animatable.
*/
	setDoubleValue(tm:DzTime, val:Number):DzTime {
	
	}
	/**
 * @description Sets the interpolation method for the i'th key.
*/
	setKeyInterpolation(i:Number, interp:InterpolationType):Number {
	
	}
	/**
 * @description Sets the interpolation method for the i'th key.
*/
	setKeyInterpolation(i:Number, interp:InterpolationType, param0:Number, param1:Number, param2:Number):Number {
	
	}
	/**
 * @description Sets the value of the i'th key.
*/
	setKeyValue(i:Number, val:Number):Number {
	
	}
	/**
 * @description Set the maximum allowable value.
*/
	setMax(max:Number):Number {
	
	}
	/**
 * @description Set the mininimum allowable value.
*/
	setMin(min:Number):Number {
	
	}
	/**
 * @description Set the mininimum and maximum allowable values.
*/
	setMinMax(min:Number, max:Number):Number {
	
	}
	/**
 * @description Set the sensitivity for this property. This value describes the amount of change in the value of this property caused by adjustment in the interface, especially if limits are off.
*/
	setSensitivity(sens:Number):Number {
	
	}
	/**
 * @description Sets the transform type for this property.
*/
	setTransformType(type:TransformType):TransformType {
	
	}
	/**
 * @description Sets the value for this property at the given time; or the default value if this property is not animatable.
*/
	setValue(tm:DzTime, val:Number, interp:InterpolationType, param0:Number, param1:Number, param2:Number):DzTime {
	
	}
	/**
 * @description Sets the value for this property at the given time; or the default value if this property is not animatable. This function differs from setRawValue() in that it takes into account any controllers on the property such that calling setValue( getValue() ) should not change the value of the property.
*/
	setValue(tm:DzTime, val:Number):DzTime {
	
	}
	/**
 * @description Sets the value for this property at the given time; or the default value if this property is not animatable. This function differs from setRawValue() in that it takes into account any controllers on the property such that calling setValue( getValue() ) should not change the value of the property.
*/
	setValue(tm:DzTime, val:Number, interp:InterpolationType):DzTime {
	
	}
	/**
 * @description Sets the value for this property at the current time; or the default value if this property is not animatable. This function differs from setRawValue() in that it takes into account any controllers on the property such that calling setValue( getValue() ) should not change the value of the property.
*/
	setValue(val:Number):Number {
	
	}
	/**
 * @description Subtracts the given value to all the key values.
*/
	subtract(val:Number, applyToDefault:Boolean):Number {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted if the way this property is displayed changed.
 * @signature "displayAsPercentChanged()"
 * @event
*/
	displayAsPercentChanged():void {
	
	}

}
/**
 * @classdesc A DzFloatSlider provides a control that allows a user to adjust a bounded floating point value.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/floatslider_dz}*/
class DzFloatSlider extends DzWidget {
	/**
 * @description Holds whether or not the slider obeys its limits. false by default.
	*/
	clamped:Boolean;
	/**
 * @description Holds whether or not the slider text is displayed as a percentage value. false by default.
	*/
	displayAsPercent:Boolean;
	/**
 * @description If true, the slider is considered to have an 'indeterminate' or '<?>' value. false by default.
	*/
	indeterminate:Boolean;
	/**
 * @description Holds the label text for the slider.
	*/
	label:String;
	/**
 * @description Holds whether or not the slider's label is visible.
	*/
	labelVisible:Boolean;
	/**
 * @description Holds the maximum value of the slider. Any attempt to set this to a value that is less than the current min will fail.
	*/
	max:Number;
	/**
 * @description Holds the minimum value of the slider. Any attempt to set this to a value that is greater than the current max will fail.
	*/
	min:Number;
	/**
 * @description Holds the sensitivity of the slider.
	*/
	sensitivity:Number;
	/**
 * @description Holds the text of the slider. (Read Only)
	*/
	text:String;
	/**
 * @description Holds whether or not the slider text is editable by the user. false by default.
	*/
	textEditable:Boolean;
	/**
 * @description Holds whether or not the slider text is visible to the user. true by default.
	*/
	textVisible:Boolean;
	/**
 * @description Holds the current value of the slider.
	*/
	value:Number;
	/**
 * @description Creates a slider as a child of the given parent widget.
 * @constructor
*/
	constructor(parent:DzWidget) {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when the user releases the slider.
 * @signature "editEnd()"
 * @event
*/
	editEnd():void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when the user starts dragging the slider.
 * @signature "editStart()"
 * @event
*/
	editStart():void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when the value of the slider changes, passes the new value.
 * @signature "valueChanged(float)"
 * @event
*/
	valueChanged(value:Number):void {
	
	}

}
/**
 * @classdesc The "Folder" container type serves to present assets as the files they represent exist in the folder structure on disk.



See Also:


 DzAssetMgr.getContentDirs()

 DzAssetMgr.getPoserDirs()

 DzAssetMgr.getImportDirs()

 DzAsset
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/folderassetcontainer_dz}*/
class DzFolderAssetContainer extends DzAbstractAssetContainer, DzRefCountedItem {
	/**
 * @description Holds the list of folder names to exclude as children of this container.
	*/
	excludeFolders:Array;
	/**
 * @description Holds the list of file filters for this container.
	*/
	fileFilters:Array;
	/**
 * @description Holds whether or not this container represents an Import folder. (Read Only)
	*/
	isImport:Boolean;
	/**
 * @description Holds whether or not this container is at the top level of the Import folder hierarchy. (Read Only)
	*/
	isImportTopLevel:Boolean;
	/**
 * @description Holds whether or not this container represents a native folder. (Read Only)
	*/
	isNative:Boolean;
	/**
 * @description Holds whether or not this container is at the top level of the native folder hierarchy. (Read Only)
	*/
	isNativeTopLevel:Boolean;
	/**
 * @description Holds whether or not this container represents a Poser folder. (Read Only)
	*/
	isPoser:Boolean;
	/**
 * @description Holds whether or not this container is an immediate child of the top level folder in a Poser folder hierarchy. (Read Only)
	*/
	isPoserIntermediate:Boolean;
	/**
 * @description Holds whether or not this container is at the top level of the Poser folder hierarchy. (Read Only)
	*/
	isPoserTopLevel:Boolean;
	/**
 * @description Holds the list of folder names to allow as children of this container.
	*/
	onlyIncludeFolders:Array;
	/**
 * @description Return Value:
*/
	fileMatchesFilter(shortFileName:String):Boolean {
	
	}
	/**
 * @description Return Value:
*/
	getFullPath():String {
	
	}
	/**
 * @description Return Value:
*/
	hasDirectoryChildren():Boolean {
	
	}
	/**
 * @description Return Value:
*/
	insertsAsLink(asset:DzAsset):Boolean {
	
	}
	/**
 * @description Attempts to update the child containers of this container.
*/
	updateChildren():Boolean {
	
	}

}
/**
 * @classdesc This is the DAZScript counterpart to the QFont type used in the DAZ Studio SDK.



Attention:


 Inheritance will change to Object in a pending update.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/font}*/
class Font extends QObject {
	/**
 * @description Holds whether or not the Font is bolded.
	*/
	bold:Boolean;
	/**
 * @description Holds the family name of the Font.
	*/
	family:String;
	/**
 * @description Holds whether or not the Font is italicized.
	*/
	italic:Boolean;
	/**
 * @description The pixel size of the font (the device dependent size of the font)
	*/
	pixelSize:Number;
	/**
 * @description The point size of the font (the device independent size of the font)
	*/
	pointSize:Number;
	/**
 * @description Holds whether or not the Font is striked.
	*/
	strikeout:Boolean;
	/**
 * @description Holds whether or not the Font is underlined.
	*/
	underline:Boolean;
	/**
 * @description Default Constructor.
 * @constructor
*/
	constructor() {
	
	}
	/**
 * @description Copy Constructor.
 * @constructor
*/
	constructor(font:Font) {
	
	}
	/**
 * @description Constructs a new font of the given family.
 * @constructor
*/
	constructor(familyName:String) {
	
	}
	/**
 * @description Parameter(s):
*/
	boundingRect(maxRect:Rect, text:String, flags:Number):Rect {
	
	}
	/**
 * @description Parameter(s):
*/
	elidedText(text:String, mode:DzWidget.TextElideMode, width:Number, flags:Number):String {
	
	}
	/**
 * @description Return Value:
*/
	families():Array {
	
	}
	/**
 * @description Parameter(s):
*/
	pointSizes(family:String, style:String):Array {
	
	}
	/**
 * @description Parameter(s):
*/
	size(text:String, flags:Number):Size {
	
	}
	/**
 * @description Parameter(s):
*/
	styles(family:String):Array {
	
	}

}
/**
 * @classdesc TODO:
Add detailed description.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/geometryimporter_dz}*/
class DzGeometryImporter extends DzImporter {

}
/**
 * @classdesc A geometry shell is a heavy instance of another scene node. It is a deep copy of the world space geometry with its own unique materials.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/geometryshellnode_dz}*/
class DzGeometryShellNode extends DzNode {
	/**
 * @description Default Constructor. Creates a shell with DzObject, pushmodifier_dz, and DzGeometryShellShape. This is the preferred way to create a shell node.
 * @constructor
*/
	constructor() {
	
	}
	/**
 * @description TODO:
Add description.
*/
	getShellNodeControl():DzNodeProperty {
	
	}

}
/**
 * @classdesc 
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/geometryutil_dz}*/
class DzGeometryUtil {
	/**
 * @description Converts a scene item with polygon mesh geometry to a SubD object. If the node passed in is a DzBone or DzSkeleton, the entire figure will be converted to SubD.
*/
	convertToSubD(node:DzNode, defaultLevel:Number):DzError {
	
	}
	/**
 * @description Converts a scene item with polygon mesh geometry to a SubD object. If the node passed in is a DzBone or DzSkeleton, the entire figure will be converted to SubD.
*/
	convertToSubD(node:DzNode, defaultViewLevel:Number, defaultRenderLevel:Number):DzError {
	
	}
	/**
 * @description Creates a primitive based on the settings supplied.
*/
	createPrimitive(settings:DzSettings):DzNode {
	
	}

}
/**
 * @classdesc TODO:
Add detailed description.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/geomsourcefiledata_dz}*/
class DzGeomSourceFileData extends DzSourceFileData {
	/**
 * @description The name of the group that the geometry came from.
	*/
	groupName:String;
	/**
 * @description Creates a new Geometry Source File Data object that stores the given file path and group name.
 * @constructor
*/
	constructor(filePath="":String, groupName="":String) {
	
	}

}

////////////////////////////////////////GLOBALS/////////////////////////////////////////////
var false:Boolean;
var Infinity:Number;
var JSON:JSON;
var Math:Math;
var NaN:Number;
var null:Object;
var true:Boolean;
var undefined:undefined;
var App:DzApp;
var ColorDialog:DzColorDialog;
var FileDialog:DzFileDialog;
var Geometry:DzGeometryUtil;
var MainWindow:DzMainWindow;
var MessageBox:DzMessageBox;
var OpenGL:DzOpenGL;
var Scene:DzScene;
var System:DzSystem;
var UndoStack:DzUndoStack;
/**
 * @description Parameter(s):
*/
function decodeURI(encodedURI:String):String {
	
	}
/**
 * @description Return Value:
*/
function decodeURIComponent(encodedURIComponent:String):String {
	
	}
/**
 * @description Parameter(s):
*/
function encodeURI(uri:String):String {
	
	}
/**
 * @description Return Value:
*/
function encodeURIComponent(uriComponent:String):String {
	
	}
/**
 * @description Deprecated
*/
function escape(text:String):String {
	
	}
/**
 * @description Parses and executes str, and returns the result.
*/
function eval(str:String):Object {
	
	}
/**
 * @description Parameter(s):
*/
function isFinite(expression:Object):Boolean {
	
	}
/**
 * @description Parameter(s):
*/
function isNaN(expression:Object):Boolean {
	
	}
/**
 * @description Parses str and returns the floating point number that it represents or NaN if the parse fails. Leading and trailing whitespace is ignored, and if the string contains a number followed by non-numeric characters, the value of the number is returned and the remainder of the string is ignored.
*/
function parseFloat(str:String):Number {
	
	}
/**
 * @description Parses the string and returns the integer that it represents or NaN if the parse fails. Leading and trailing whitespace is ignored, and if the string contains a number followed by non-numeric characters, the value of the number is returned and the remainder of the string is ignored.
*/
function parseInt(str:String, radix:Number):Number {
	
	}
/**
 * @description Deprecated
*/
function unescape(text:String):String {
	
	}
/**
 * @description While the garbage collector is automatically run for script objects that are no longer referenced, there is no guarantee on when it will take place. This function can be used to explicitly request garbage collection.
*/
function gc() {
	
	}
/**
 * @description Prints the expression to the console (if executed from within the Script Editor) or to the log.
*/
function print(expression:String):String {
	
	}
/**
 * @description Return Value:
*/
function qsTr(sourceText:String):String {
	
	}
/**
 * @description Return Value:
*/
function qsTranslate(sourceText:String):String {
	
	}
/**
 * @description Return Value:
*/
function qsTrId(id:String):String {
	
	}
/**
 * @description Scripts can call this function to accept and finish a hold on the undo stack started by calling beginUndo().
*/
function acceptUndo(caption:String):String {
	
	}
/**
 * @description Return Value:
*/
function backgroundProgressIsActive() {
	
	}
/**
 * @description Return Value:
*/
function backgroundProgressIsCancelled() {
	
	}
/**
 * @description Captures a view of scene seletion.
*/
function beginNodeSelectionHold() {
	
	}
/**
 * @description Starts a hold on the undo stack. It is recommended that scripts use this function rather than accessing DzUndoStack directly, since if the script crashes or a logic error results in leaving the undo stack open, calling this function insures that the undo stack will be closed at the end of script execution.
*/
function beginUndo() {
	
	}
/**
 * @description Scripts can call this function to cancel a hold on the undo stack started by calling beginUndo().
*/
function cancelUndo() {
	
	}
/**
 * @description Clears the application-standard busy cursor and returns the mouse cursor to the previous cursor. Match every call to setBusyCursor() with a call to this function.
*/
function clearBusyCursor() {
	
	}
/**
 * @description Clears all selection holds without restoring the selection.
*/
function clearNodeSelectionHolds() {
	
	}
/**
 * @description Scripts can call this function to clear the undo stack.
*/
function clearUndoStack() {
	
	}
/**
 * @description Connects a signal from one object to a function (slot) on another object.
*/
function connect(sender:Object, signal:String, receiver:Object, slot:String):Object {
	
	}
/**
 * @description Connects a signal from an object to a Daz Script function (slot).
*/
function connect(sender:Object, signal:String, functionRef:Function):Object {
	
	}
/**
 * @description Deprecated
*/
function ctrlPressed() {
	
	}
/**
 * @description Prints expression to the output console (stderr), followed by a newline.
*/
function debug(expression):void {
	
	}
/**
 * @description Disconnects a signal from one object to a function (slot).
*/
function disconnect(sender:Object, signal:String, functionRef:Function):Object {
	
	}
/**
 * @description Disconnects a signal from one object to a function (slot) on another object.
*/
function disconnect(sender:Object, signal:String, receiver:Object, slot:String):Object {
	
	}
/**
 * @description Removes a scene node selection hold on scene selection without restoring the selection.
*/
function dropNodeSelectionHold() {
	
	}
/**
 * @description Scripts can call this function to drop a hold on the undo stack started by calling beginUndo().
*/
function dropUndo() {
	
	}
/**
 * @description Ends the current background progress tracking operation, and closes the background progress if no other background progress tracking operations are active.
*/
function finishBackgroundProgress() {
	
	}
/**
 * @description Ends the current progress tracking operation, and closes the progress dialog if no other progress tracking operations are active.
*/
function finishProgress() {
	
	}
/**
 * @description Return Value:
*/
function getArguments() {
	
	}
/**
 * @description This function provides access to the desktop widget. This can be useful to get the size of the machine's desktop.
*/
function getDesktop() {
	
	}
/**
 * @description This function converts an error code into a string message.
*/
function getErrorMessage(errCode:DzError):String {
	
	}
/**
 * @description This function allows a script to get the object-parent of a QObject.
*/
function getObjectParent(obj:QObject):QObject {
	
	}
/**
 * @description Return Value:
*/
function getScriptAuthor() {
	
	}
/**
 * @description Return Value:
*/
function getScriptFileName() {
	
	}
/**
 * @description Return Value:
*/
function getScriptType() {
	
	}
/**
 * @description Return Value:
*/
function getScriptVersionString() {
	
	}
/**
 * @description Includes the contents of scriptPath in the same context as the calling script. This function should only be called within the global scope of the script; it should not be called within a nested scope and it should not be called inline. As a safeguard against circular references, the script engine keeps an internal list of unique paths for included scripts; per script context, per execution. Each time the function is called, scriptPath is checked against the list to ensure that the path has only been included once within the context of the script.
*/
function include(scriptPath:String):String {
	
	}
/**
 * @description This function allows a script to test if two QObject derived variables point to the same instance.
*/
function pointersAreEqual(ptr1:QObject, ptr2:QObject):Boolean {
	
	}
/**
 * @description Pauses execution of the script and allows the GUI thread time to process events.
*/
function processEvents() {
	
	}
/**
 * @description Return Value:
*/
function progressIsActive() {
	
	}
/**
 * @description Return Value:
*/
function progressIsCancelled() {
	
	}
/**
 * @description Restores the scene selection to the view at last call to beginNodeSelectionHold().
*/
function restoreNodeSelectionHold() {
	
	}
/**
 * @description Sets the application-standard busy cursor. Match every call to this function with a call to clearBusyCursor() to restore the previous cursor.
*/
function setBusyCursor() {
	
	}
/**
 * @description Deprecated
*/
function shiftPressed() {
	
	}
/**
 * @description Pauses the script for the specified number of milliseconds without blocking the application event loop.
*/
function sleep(milliseconds:Number):Number {
	
	}
/**
 * @description Displays a background progress bar to the user if one is not already being displayed and starts a progress tracking operation.
*/
function startBackgroundProgress(info:String, totalSteps:Number, isCancellable:Boolean):String {
	
	}
/**
 * @description Displays a progress dialog to the user if one is not already being displayed and starts a progress tracking operation.
*/
function startProgress(info:String, totalSteps:Number, isCancellable:Boolean, showTimeElapsed:Boolean):String {
	
	}
/**
 * @description Steps the current background progress forward the given number of steps.
*/
function stepBackgroundProgress(numSteps:Number):Number {
	
	}
/**
 * @description Steps the current progress dialog forward the given number of steps.
*/
function stepProgress(numSteps:Number):Number {
	
	}
/**
 * @description Sets the current background progress to the given number of steps.
*/
function updateBackgroundProgress(position:Number):Number {
	
	}
/**
 * @description Sets the current progress dialog to the given number of steps.
*/
function updateProgress(position:Number):Number {
	
	}

/**
 * @classdesc TODO:
Add detailed description.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/gridlayout_dz}*/
class DzGridLayout extends DzLayout {
	/**
 * @description Creates a grid layout that manages the children widgets of the given parent widget
 * @constructor
*/
	constructor(parent:DzWidget) {
	
	}
	/**
 * @description Creates a grid layout as a sub-layout of the given layout
 * @constructor
*/
	constructor(parent:DzLayout) {
	
	}
	/**
 * @description Adds the given layout to the items managed by this layout
*/
	addLayout(layout:DzLayout, row:Number, col:Number, rowSpan:Number, colSpan:Number):DzLayout {
	
	}
	/**
 * @description Deprecated
*/
	addMultiCellLayout(layout:DzLayout, fromRow:Number, toRow:Number, fromCol:Number, toCol:Number):DzLayout {
	
	}
	/**
 * @description Deprecated
*/
	addMultiCellWidget(widget:DzWidget, fromRow:Number, toRow:Number, fromCol:Number, toCol:Number):DzWidget {
	
	}
	/**
 * @description Adds the given widget to the items managed by this layout
*/
	addWidget(widget:DzWidget, row:Number, col:Number, rowSpan:Number, colSpan:Number):DzWidget {
	
	}
	/**
 * @description Return Value:
*/
	colCount():Number {
	
	}
	/**
 * @description Return Value:
*/
	colSpacing(col:Number):Number {
	
	}
	/**
 * @description Return Value:
*/
	colStretch(col:Number):Number {
	
	}
	/**
 * @description Return Value:
*/
	rowCount():Number {
	
	}
	/**
 * @description Return Value:
*/
	rowSpacing(row:Number):Number {
	
	}
	/**
 * @description Return Value:
*/
	rowStretch(row:Number):Number {
	
	}
	/**
 * @description Sets the minimum width for the given column
*/
	setColSpacing(col:Number, minSize:Number):Number {
	
	}
	/**
 * @description Sets the relative amount of stretch for the given column
*/
	setColStretch(col:Number, stretch:Number):Number {
	
	}
	/**
 * @description Sets the minimum height for the given row
*/
	setRowSpacing(row:Number, minSize:Number):Number {
	
	}
	/**
 * @description Sets the relative amount of stretch for the given row
*/
	setRowStretch(row:Number, stretch:Number):Number {
	
	}

}
/**
 * @classdesc A DzGroupBox provides a group box frame, with an optional title and an ability to be checked like a DzCheckBox.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/groupbox_dz}*/
class DzGroupBox extends DzWidget {
	/**
 * @description Holds the alignment of the group box title.
	*/
	alignment:DzWidget;
	/**
 * @description Holds whether or not the group box is checkable.
	*/
	checkable:Boolean;
	/**
 * @description Holds whether or not the group box is checked.
	*/
	checked:Boolean;
	/**
 * @description Holds the number of columns in the group box.
	*/
	columns:Number;
	/**
 * @description Holds whether or not the group box is painted flat (without a frame).
	*/
	flat:Boolean;
	/**
 * @description Holds the margin between items inside the group box and the frame.
	*/
	insideMargin:Number;
	/**
 * @description Holds the spacing between items inside the group box.
	*/
	insideSpacing:Number;
	/**
 * @description Holds the orientation of the group box.
	*/
	orientation:DzWidget;
	/**
 * @description Holds the title of the group box.
	*/
	title:String;
	/**
 * @description Creates a group box as a child of the given parent widget.
 * @constructor
*/
	constructor(parent:DzWidget) {
	
	}
	/**
 * @description Adds an empty cell at the next free position. If space is greater than 0, the empty cell uses space as its fixed width (if Orientation is Horizontal) or height (if Orientation is Vertical).
*/
	addSpace(space:Number):Number {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when the DzGroupBox's check box is clicked. Passes the new state of the check box.
 * @signature "clicked(bool)"
 * @event
*/
	clicked(checked:Boolean):void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when the DzGroupBox's check box is toggled. Passes the new state of the check box.
 * @signature "toggled(bool)"
 * @event
*/
	toggled(onOff:Boolean):void {
	
	}

}
/**
 * @classdesc This specialized DzNode is intended for grouping multiple nodes in the scene under one parent node. This allows easy transformation, visibility and/or selectability of the whole group.



The bounding box of the group is calculated by getting the world space bounding box of the immediate children of the group node. This allows better use of framing the group to see the whole of the contents of the group.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/groupnode_dz}*/
class DzGroupNode extends DzNode {
	/**
 * @description TODO:
Add description.
 * @constructor
*/
	constructor() {
	
	}

}
/**
 * @classdesc Guide Pages are intended as a dynamic means of providing users with instructions on how to use a portion of the User Interface (UI), and/or provide widgets that simplify the process of getting started where an otherwise non-descript area of the UI would be displayed.



These pages are typically found within a DzPane via instances of filecontenttab_dz or productcontenttab_dz, or within an embedded instance of productassetsview_dz or associatedassetsview_dz.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/guidepage_dz}*/
class DzGuidePage extends QWidget {
	/**
 * @description Return Value:
*/
	defaultScriptPath():String {
	
	}
	/**
 * @description Return Value:
*/
	isCurrentPage():Boolean {
	
	}
	/**
 * @description Sets whether the guide page is the current widget in the stack.
*/
	makeCurrentPage(onOff:Boolean):Boolean {
	
	}
	/**
 * @description Loads the contents of the page by calling the current script. A special script context is provided to this script which exposes a global "getWidget()" function that returns a DzWidget wrapper. This DzWidget can be used by the script to create, populate, and connect the UI components inside the widget.
*/
	reload():DzError {
	
	}
	/**
 * @description Return Value:
*/
	scriptFilename():String {
	
	}
	/**
 * @description Loads the contents of the page by calling the script at scriptPath. A special script context is provided to this script which exposes a global "getWidget()" function that returns a DzWidget wrapper. This DzWidget can be used by the script to create, populate, and connect the UI components inside the widget.
*/
	setUiScript(scriptPath:String):DzError {
	
	}

}
/**
 * @classdesc This class provides DAZ Script functionality for reading and writing *.gz ('gzipped') files. A high-level interface for zipping/unzipping files is provided with the functions zip() and unzip(). Also, a low-level interface is provided, allowing scripts to read and write compressed files directly.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/gzfile_dz}*/
class DzGZFile extends DzFileInfo {
	/**
 * @description ENUMERATOR: Open the file for reading only.
*/
	
	static ReadOnly;
	/**
 * @description ENUMERATOR: Open the file for writing only.
*/
	
	static WriteOnly;
	/**
 * @description ENUMERATOR: Open the file for reading and writing.
*/
	
	static ReadWrite;
	/**
 * @description ENUMERATOR: The file is opened in append mode, so that all data is written to the end of the file.
*/
	
	static Append;
	/**
 * @description ENUMERATOR: If possible, the file is truncated before it is opened. All earlier contents of the file are lost.
*/
	
	static Truncate;
	/**
 * @description ENUMERATOR: When reading, the end-of-line terminators are translated to '
*/
	
	static Text;
	/**
 * @description ENUMERATOR: Alias for Text.
*/
	
	static Translate;
	/**
 * @description Creates a gzip file with the given file name.
 * @constructor
*/
	constructor(file:String) {
	
	}
	/**
 * @description Closes the file.
*/
	close():void {
	
	}
	/**
 * @description Return Value:
*/
	eof():Boolean {
	
	}
	/**
 * @description Open the file with the given mode.
*/
	open(accessMode:AccessMode):Boolean {
	
	}
	/**
 * @description Reads the entire file.
*/
	read():String {
	
	}
	/**
 * @description Read one uncompressed character from the file buffer.
*/
	readByte():Number {
	
	}
	/**
 * @description Read an uncompressed line of text from the file.
*/
	readLine():String {
	
	}
	/**
 * @description Uncompresses the entire file and splits it into lines of text.
*/
	readLines():Array {
	
	}
	/**
 * @description Unzips this file into the given filename.
*/
	unzip(filename:String):Boolean {
	
	}
	/**
 * @description Write a string to the file compression buffer.
*/
	write(data:String, length:Number):String {
	
	}
	/**
 * @description Write a single byte (character) to the file compression buffer.
*/
	writeByte(byte:Number):Number {
	
	}
	/**
 * @description Write a line of text to the file compression buffer.
*/
	writeLine(data:String):String {
	
	}
	/**
 * @description Replaces this file's contents with the gzipped contents of the given file. If this file does not exist, it will be created.
*/
	zip(filename:String):Boolean {
	
	}

}
/**
 * @classdesc Provided as a convenience for creating a DzBoxLayout where the direction is automatically initially set to DzBoxLayout.LeftToRight.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/hboxlayout_dz}*/
class DzHBoxLayout extends DzBoxLayout {
	/**
 * @description Creates a horizontal box layout that manages the children widgets of the given parent widget
 * @constructor
*/
	constructor(parent:DzWidget) {
	
	}
	/**
 * @description Creates a horizontal box layout as a sub-layout of the given layout
 * @constructor
*/
	constructor(parent:DzLayout) {
	
	}

}
/**
 * @classdesc DzButtonGroup with a horizontal layout.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/hbuttongroup_dz}*/
class DzHButtonGroup extends DzButtonGroup {
	/**
 * @description Creates a button group as a child of the given parent widget
 * @constructor
*/
	constructor(parent:DzWidget) {
	
	}

}
/**
 * @classdesc See Also:


 DzListView.header()
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/header_dz}*/
class DzHeader extends DzWidget {
	/**
 * @description Holds whether the header sections respond to mouse clicks.
	*/
	clickEnabled:Boolean;
	/**
 * @description Holds whether the header sections can be moved.
	*/
	movingEnabled:Boolean;
	/**
 * @description Holds whether the header sections can be resized.
	*/
	resizeEnabled:Boolean;
	/**
 * @description Holds whether the header sections can be stretched.
	*/
	stretchEnabled:Boolean;
	/**
 * @description Return Value:
*/
	isClickEnabled(section:Number):Number {
	
	}
	/**
 * @description Return Value:
*/
	isResizeEnabled(section:Number):Number {
	
	}
	/**
 * @description Return Value:
*/
	isStretchEnabled(section:Number):Number {
	
	}
	/**
 * @description Sets whether or not the header for a given section responds to mouse clicks
*/
	setClickEnabled(enable:Boolean, section:Number):Boolean {
	
	}
	/**
 * @description Sets whether or not resizing for a given section is enabled
*/
	setResizeEnabled(enable:Boolean, section:Number):Boolean {
	
	}
	/**
 * @description Sets whether or not stretch for a given section is enabled
*/
	setStretchEnabled(enable:Boolean, section:Number):Boolean {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when an item in the header is clicked
 * @signature "clicked(int)"
 * @event
*/
	clicked(section:Number):void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when an item in the header changes index
 * @signature "indexChange(int,int,int)"
 * @event
*/
	indexChange(section:Number, fromIndex:Number, toIndex:Number):void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when an item in the header is pressed
 * @signature "pressed(int)"
 * @event
*/
	pressed(section:Number):void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when an item in the header is released
 * @signature "released(int)"
 * @event
*/
	released(section:Number):void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when an item in the header is double clicked
 * @signature "sectionHandleDoubleClicked(int)"
 * @event
*/
	sectionHandleDoubleClicked(section:Number):void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when an item in the header changes size
 * @signature "sizeChange(int,int,int)"
 * @event
*/
	sizeChange(section:Number, oldSize:Number, newSize:Number):void {
	
	}

}
/**
 * @classdesc Use DzApp.getHelpMgr() to access.



See daz_studio_help_generator for information on how to populate the Help Manager.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/helpmgr_dz}*/
class DzHelpMgr extends QObject {
	/**
 * @description Opens the help browser at the given identifier.
*/
	browseToIdentifier(identifier:String):String {
	
	}
	/**
 * @description Opens the help browser at the given keyword.
*/
	browseToKeyword(keyword:String):String {
	
	}
	/**
 * @description Opens the given page in the help browser.
*/
	browseToPage(page:String):String {
	
	}
	/**
 * @description Opens the help browser at the given url.
*/
	browseToUrl(urlString:String):String {
	
	}
	/**
 * @description Parameter(s):
*/
	findFilterAttributes(name:String):Array {
	
	}
	/**
 * @description TODO:
Add description.
*/
	findIdentifierUrl(id:String):String {
	
	}
	/**
 * @description Parameter(s):
*/
	findKeywordUrl(keyword:String):String {
	
	}
	/**
 * @description Parameter(s):
*/
	getDescription(label:String):String {
	
	}
	/**
 * @description Parameter(s):
*/
	getFilterAttributes(which:Number):Array {
	
	}
	/**
 * @description Parameter(s):
*/
	getFilterName(which:Number):String {
	
	}
	/**
 * @description Parameter(s):
*/
	getGroup(label:String):String {
	
	}
	/**
 * @description Return Value:
*/
	getHelpContents():void {
	
	}
	/**
 * @description Parameter(s):
*/
	getHelpString(label:String):String {
	
	}
	/**
 * @description Parameter(s):
*/
	getIdentifier(which:Number):String {
	
	}
	/**
 * @description Parameter(s):
*/
	getIdentifierUrl(which:Number):String {
	
	}
	/**
 * @description Parameter(s):
*/
	getKeyword(which:Number):String {
	
	}
	/**
 * @description Parameter(s):
*/
	getKeywordUrl(which:Number):String {
	
	}
	/**
 * @description Return Value:
*/
	getNumFilters():Number {
	
	}
	/**
 * @description Return Value:
*/
	getNumIdentifiers():Number {
	
	}
	/**
 * @description Return Value:
*/
	getNumKeywords():Number {
	
	}
	/**
 * @description Parameter(s):
*/
	getStatusTip(label:String):String {
	
	}
	/**
 * @description Parameter(s):
*/
	getToolTip(label:String):String {
	
	}

}
/**
 * @classdesc A DzHGroupBox provides a DzGroupBox with a horizontal layout.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/hgroupbox_dz}*/
class DzHGroupBox extends DzGroupBox {
	/**
 * @description Creates a group box as a child of the given parent widget.
 * @constructor
*/
	constructor(parent:DzWidget) {
	
	}

}
/**
 * @classdesc An asset save filter for saving a Hierarchical Material(s) Preset in the DSON format.



See Also:


 Sample: Save a Hierarchical Material(s) Preset
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/hierarchicalmaterialassetfilter_dz}*/
class DzHierarchicalMaterialAssetFilter extends DzAssetFileOutFilter {
	/**
 * @description TODO:
Add description.
 * @constructor
*/
	constructor() {
	
	}

}
/**
 * @classdesc An asset save filter for saving a Hierarchical Pose Preset in the DSON format.



See Also:


 Sample: Save a Hierarchical Pose Preset
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/hierarchicalposeassetfilter_dz}*/
class DzHierarchicalPoseAssetFilter extends DzAssetFileOutFilter {
	/**
 * @description TODO:
Add description.
 * @constructor
*/
	constructor() {
	
	}

}
/**
 * @classdesc This is the DAZScript counterpart to the QImage type used in the DAZ Studio SDK.



Attention:


 Inheritance will change to Object in a pending update.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/image}*/
class Image extends QObject {
	/**
 * @description Holds whether or not the image has an alpha channel.
	*/
	alphaBuffer:Boolean;
	/**
 * @description Holds the color depth of the image. (Read-Only)
	*/
	depth:Number;
	/**
 * @description Holds the X resolution of the image.
	*/
	dotsPerMeterX:Number;
	/**
 * @description Holds the Y resolution of the image.
	*/
	dotsPerMeterY:Number;
	/**
 * @description Holds the format of the image.
	*/
	format:Format;
	/**
 * @description Holds the height of the image. (Read-Only)
	*/
	height:Number;
	/**
 * @description Holds the number of colors in the image.
	*/
	numColors:Number;
	/**
 * @description Holds the number of pixels to offset the image when positioning it.
	*/
	offset:Point;
	/**
 * @description Holds the number of pixels to offset the image when positioning it.
	*/
	size:Size;
	/**
 * @description Holds the width of the image. (Read-Only)
	*/
	width:Number;
	/**
 * @description ENUMERATOR: The image is invalid.
*/
	
	static Format_Invalid;
	/**
 * @description ENUMERATOR: The image is stored using 1-bit per pixel. Bytes are packed with the most significant bit (MSB) first.
*/
	
	static Format_Mono;
	/**
 * @description ENUMERATOR: The image is stored using 1-bit per pixel. Bytes are packed with the less significant bit (LSB) first.
*/
	
	static Format_MonoLSB;
	/**
 * @description ENUMERATOR: The image is stored using 8-bit indexes into a colormap.
*/
	
	static Format_Indexed8;
	/**
 * @description ENUMERATOR: The image is stored using a 32-bit RGB format (0xffRRGGBB).
*/
	
	static Format_RGB32;
	/**
 * @description ENUMERATOR: The image is stored using a 32-bit ARGB format (0xAARRGGBB).
*/
	
	static Format_ARGB32;
	/**
 * @description ENUMERATOR: The image is stored using a premultiplied 32-bit ARGB format (0xAARRGGBB), i.e. the red, green, and blue channels are multiplied by the alpha component divided by 255. (If RR, GG, or BB has a higher value than the alpha channel, the results are undefined.) Certain operations (such as image composition using alpha blending) are faster using premultiplied ARGB32 than with plain ARGB32.
*/
	
	static Format_ARGB32_Premultiplied;
	/**
 * @description ENUMERATOR: The image is stored using a 16-bit RGB format (5-6-5).
*/
	
	static Format_RGB16;
	/**
 * @description ENUMERATOR: The image is stored using a premultiplied 24-bit ARGB format (8-5-6-5).
*/
	
	static Format_ARGB8565_Premultiplied;
	/**
 * @description ENUMERATOR: The image is stored using a 24-bit RGB format (6-6-6). The unused most significant bits is always zero.
*/
	
	static Format_RGB666;
	/**
 * @description ENUMERATOR: The image is stored using a premultiplied 24-bit ARGB format (6-6-6-6).
*/
	
	static Format_ARGB6666_Premultiplied;
	/**
 * @description ENUMERATOR: The image is stored using a 16-bit RGB format (5-5-5). The unused most significant bit is always zero.
*/
	
	static Format_RGB555;
	/**
 * @description ENUMERATOR: The image is stored using a premultiplied 24-bit ARGB format (8-5-5-5).
*/
	
	static Format_ARGB8555_Premultiplied;
	/**
 * @description ENUMERATOR: The image is stored using a 24-bit RGB format (8-8-8).
*/
	
	static Format_RGB888;
	/**
 * @description ENUMERATOR: The image is stored using a 16-bit RGB format (4-4-4). The unused bits are always zero.
*/
	
	static Format_RGB444;
	/**
 * @description ENUMERATOR: The image is stored using a premultiplied 16-bit ARGB format (4-4-4-4).
*/
	
	static Format_ARGB4444_Premultiplied;
	/**
 * @description Default Constructor.
 * @constructor
*/
	constructor() {
	
	}
	/**
 * @description Parameter(s):
 * @constructor
*/
	constructor(width:Number, height:Number, format:Format) {
	
	}
	/**
 * @description Copy Constructor.
 * @constructor
*/
	constructor(image:Image) {
	
	}
	/**
 * @description Parameter(s):
 * @constructor
*/
	constructor(filename:String) {
	
	}
	/**
 * @description Gets a color value from the color table for the image only valid for.
*/
	color(index:Number):Color {
	
	}
	/**
 * @description Parameter(s):
*/
	compositeAtop(other:Image, x:int, y:int):void {
	
	}
	/**
 * @description Parameter(s):
*/
	compositeColorBurn(other:Image, x:int, y:int):void {
	
	}
	/**
 * @description Parameter(s):
*/
	compositeColorDodge(other:Image, x:int, y:int):void {
	
	}
	/**
 * @description Parameter(s):
*/
	compositeDarken(other:Image, x:int, y:int):void {
	
	}
	/**
 * @description Parameter(s):
*/
	compositeDifference(other:Image, x:int, y:int):void {
	
	}
	/**
 * @description Parameter(s):
*/
	compositeExclusion(other:Image, x:int, y:int):void {
	
	}
	/**
 * @description Parameter(s):
*/
	compositeHardLight(other:Image, x:int, y:int):void {
	
	}
	/**
 * @description Parameter(s):
*/
	compositeIn(other:Image, x:int, y:int):void {
	
	}
	/**
 * @description Parameter(s):
*/
	compositeLighten(other:Image, x:int, y:int):void {
	
	}
	/**
 * @description Parameter(s):
*/
	compositeMultiply(other:Image, x:int, y:int):void {
	
	}
	/**
 * @description Parameter(s):
*/
	compositeOut(other:Image, x:int, y:int):void {
	
	}
	/**
 * @description Parameter(s):
*/
	compositeOver(other:Image, x:Number, y:Number):Number {
	
	}
	/**
 * @description Parameter(s):
*/
	compositeOverlay(other:Image, x:int, y:int):void {
	
	}
	/**
 * @description Parameter(s):
*/
	compositePlus(other:Image, x:int, y:int):void {
	
	}
	/**
 * @description Parameter(s):
*/
	compositeScreen(other:Image, x:int, y:int):void {
	
	}
	/**
 * @description Parameter(s):
*/
	compositeSoftLight(other:Image, x:int, y:int):void {
	
	}
	/**
 * @description Parameter(s):
*/
	compositeXor(other:Image, x:int, y:int):void {
	
	}
	/**
 * @description Creates a copy of the image with the given color depth.
*/
	convertDepth(depth:Number):Number {
	
	}
	/**
 * @description Creates a copy of a portion of the image.
*/
	copy(x:Number, y:Number, w:Number, h:Number):Number {
	
	}
	/**
 * @description Creates a copy of the image.
*/
	copy():void {
	
	}
	/**
 * @description Creates a copy of a portion of the image.
*/
	copy(rect:Rect):Rect {
	
	}
	/**
 * @description Clears the image data and creates a new image with the given settings.
*/
	create(size:Size, depth:Number, numColors:Number):Size {
	
	}
	/**
 * @description Clears the image data and creates a new image with the given settings.
*/
	create(w:Number, h:Number, depth:Number, numColors:Number):Number {
	
	}
	/**
 * @description Parameter(s):
*/
	drawText(x:Number, y:Number, text:String, font:Font, color:Color, flags:Number):Rect {
	
	}
	/**
 * @description Fills the image with color.
*/
	fill(color:Color):Color {
	
	}
	/**
 * @description Parameter(s):
*/
	getColorMask(maskColor:Color, invert:Boolean, tolerance:Number):Color {
	
	}
	/**
 * @description Inverts all pixels in the image.
*/
	invertPixels(invertAlpha:Boolean):Boolean {
	
	}
	/**
 * @description Gets whether or not the image is Null.
*/
	isNull():Boolean {
	
	}
	/**
 * @description Loads data for the image from a file.
*/
	load(filename:String):String {
	
	}
	/**
 * @description Loads data into the image from a byte array using the specified format.
*/
	loadFromData(data:ByteArray, format:String):Boolean {
	
	}
	/**
 * @description Creates a copy of this image that has been mirrored vertically.
*/
	mirror():void {
	
	}
	/**
 * @description Creates a copy of this image that has been mirrored.
*/
	mirror(horizontal:bool, vertical:bool):void {
	
	}
	/**
 * @description Gets the color value of an individual pixel.
*/
	pixel(x:Number, y:Number):Color {
	
	}
	/**
 * @description Saves the image to a file.
*/
	save(filename:String):String {
	
	}
	/**
 * @description Creates a new image that is a scaled version of this image.
*/
	scale(width:Number, height:Number):Number {
	
	}
	/**
 * @description Creates a new image that is a scaled version of this image.
*/
	scale(size:Size):Size {
	
	}
	/**
 * @description Parameter(s):
*/
	setAlphaFromImage(img:Image):Boolean {
	
	}
	/**
 * @description Sets the color value of a color in the color table.
*/
	setColor(index:Number, color:Color):Number {
	
	}
	/**
 * @description Sets the color value of the given pixel.
*/
	setPixel(x:Number, y:Number, color:Color):Number {
	
	}
	/**
 * @description Sets the image text to text and associates it with key.
*/
	setText(key:String, text:String):String {
	
	}
	/**
 * @description Creates a new image that is a scaled version of this image.
*/
	smoothScale(size:Size):Size {
	
	}
	/**
 * @description Creates a new image that is a scaled version of this image.
*/
	smoothScale(width:Number, height:Number):Number {
	
	}
	/**
 * @description Creates a copy of the image in which the Red and Blue values have been swapped.
*/
	swapRGB():void {
	
	}
	/**
 * @description Parameter(s):
*/
	text(key:String):String {
	
	}
	/**
 * @description Return Value:
*/
	textKeys():Array {
	
	}

}
/**
 * @classdesc TODO:
Add detailed description.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/imageblend_dz}*/
class DzImageBlend extends QObject {
	/**
 * @description Used to blend src into dest.
*/
	blendImage(dest:Image, src:Image):Image {
	
	}
	/**
 * @description Return Value:
*/
	getDescription():String {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when the blend method has changed.
 * @signature "blendMethodChanged()"
 * @event
*/
	blendMethodChanged():void {
	
	}

}
/**
 * @classdesc TODO:
Add detailed description.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/imagecolorlayer_dz}*/
class DzImageColorLayer extends DzImageLayer {
	/**
 * @description The color for this layer.
	*/
	color:Color;
	/**
 * @description Sets the size for this color layer.
*/
	setSize(size:Size):Size {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when the layer color changes
 * @signature "colorChanged(const QColor&)"
 * @event
*/
	colorChanged(color:Color):void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when the layer size changes
 * @signature "sizeChanged(const QSize&)"
 * @event
*/
	sizeChanged(size:Size):void {
	
	}

}
/**
 * @classdesc TODO:
Add detailed description.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/imagecomponent_dz}*/
class DzImageComponent extends QObject {
	/**
 * @description The label for the layer.
	*/
	label:String;
	/**
 * @description Holds whether or not the layer contributes to the final image.
	*/
	visible:Boolean;
	/**
 * @description TODO:
Add description.
*/
	addManipulator(manip:DzImageManip):DzImageManip {
	
	}
	/**
 * @description TODO:
Add description.
*/
	freeImageData():void {
	
	}
	/**
 * @description Return Value:
*/
	getImageData():Image {
	
	}
	/**
 * @description TODO:
Add description.
*/
	getManipulator(idx:Number):DzImageManip {
	
	}
	/**
 * @description TODO:
Add description.
*/
	getNumManipulators():Number {
	
	}
	/**
 * @description Return Value:
*/
	getSize():Size {
	
	}
	/**
 * @description TODO:
Add description.
*/
	insertManipulator(idx:Number, manip:DzImageManip):Number {
	
	}
	/**
 * @description TODO:
Add description.
*/
	removeManipulator(idx:Number):Boolean {
	
	}
	/**
 * @description TODO:
Add description.
*/
	removeManipulator(manip:DzImageManip):Boolean {
	
	}
	/**
 * @description TODO:
Add description.
*/
	toTextureLayer(layer:DzTextureLayer, imageSize:Size):Boolean {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when the image data for the component has been changed.
 * @signature "imageDataChanged()"
 * @event
*/
	imageDataChanged():void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when the label of the component has been changed.
 * @signature "labelChanged(const QString&)"
 * @event
*/
	labelChanged(label:String):void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when the list of manipulators for the component has been changed.
 * @signature "manipulatorListChanged()"
 * @event
*/
	manipulatorListChanged():void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when the visibility of the component has been changed.
 * @signature "visibilityChanged(bool)"
 * @event
*/
	visibilityChanged(onOff:Boolean):void {
	
	}

}
/**
 * @classdesc TODO:
Add detailed description.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/imagefilelayer_dz}*/
class DzImageFileLayer extends DzImageLayer {
	/**
 * @description The filename of the image that this layer references.
	*/
	filename:String;
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when the file name associated with this layer changes
 * @signature "sizeChanged(const QString&)"
 * @event
*/
	filenameChanged(filename:String):void {
	
	}

}
/**
 * @classdesc TODO:
Add detailed description.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/imagelayer_dz}*/
class DzImageLayer extends DzImageComponent {
	/**
 * @description Return Value:
*/
	getBlendMode():DzImageBlend {
	
	}
	/**
 * @description Return Value:
*/
	getDescription():String {
	
	}
	/**
 * @description Return Value:
*/
	getMask():DzImageMask {
	
	}
	/**
 * @description Sets the blending mode for this image layer.
*/
	setBlendMode(mode:DzImageBlend):DzImageBlend {
	
	}
	/**
 * @description Sets the mask for this image layer.
*/
	setMask(mask:DzImageMask):DzImageMask {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description TODO: Add Description
 * @signature TODO: Add Description
 * @event
*/
	blendModeChanged(mode:DzImageBlend):void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description TODO: Add Description
 * @signature TODO: Add Description
 * @event
*/
	maskChanged(mask:DzImageMask):void {
	
	}

}
/**
 * @classdesc Image manipulators are applied to an image layer before it is blended into the final image.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/imagemanip_dz}*/
class DzImageManip extends QObject {
	/**
 * @description Return Value:
*/
	getDescription():String {
	
	}
	/**
 * @description Applies the manipulator to img.
*/
	manipulate(img:Image):Image {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when the value of the manipulator has changed and it needs to be reapplied.
 * @signature "manipulationChanged()"
 * @event
*/
	manipulationChanged():void {
	
	}

}
/**
 * @classdesc TODO:
Add detailed description.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/imagemask_dz}*/
class DzImageMask extends DzImageComponent {
	/**
 * @description The filename of the image that this mask references.
	*/
	filename:String;
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when the file name associated with this mask changes
 * @signature "sizeChanged(const QString&)"
 * @event
*/
	filenameChanged(filename:String):void {
	
	}

}
/**
 * @classdesc There is only one instance of this manager in an application. This instance is created and owned by DzApp. Don't create an instance of this class, but rather request a pointer to it from DzApp via DzApp.getImageMgr().
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/imagemgr_dz}*/
class DzImageMgr extends QObject {
	/**
 * @description Parameter(s):
*/
	static getImageSize(imagePath:String):Size {
	
	}
	/**
 * @description Called prior to editing an image; pauses image preparation.
*/
	beginEditingImage():void {
	
	}
	/**
 * @description Parameter(s):
*/
	createLayeredTexture(name:String):DzLayeredTexture {
	
	}
	/**
 * @description This method is called from the 3D viewports to clear out any texture objects that are no longer being used. It has to be called only when a Studio OGL context is current.
*/
	deleteUnusedTextureObjects():void {
	
	}
	/**
 * @description Parameter(s):
*/
	findImage(fullPath:String):DzTexture {
	
	}
	/**
 * @description Parameter(s):
*/
	findImageByName(name:String):DzTexture {
	
	}
	/**
 * @description Parameter(s):
*/
	findLayeredTexture(uri:DzUri):DzLayeredTexture {
	
	}
	/**
 * @description Parameter(s):
*/
	findTexture(uri:DzUri):DzTexture {
	
	}
	/**
 * @description Called after editing an image; restarts image preparation.
*/
	finishedEditingImage(img:DzTexture):DzTexture {
	
	}
	/**
 * @description Parameter(s):
*/
	getImage(which:Number):DzTexture {
	
	}
	/**
 * @description Parameter(s):
*/
	getImage(fullPath:String, creationGamma:Number):DzTexture {
	
	}
	/**
 * @description Parameter(s):
*/
	getImage(fullPath:String):DzTexture {
	
	}
	/**
 * @description Parameter(s):
*/
	getImage(fullPath:String, creationGamma:Number, creationType:Number):DzTexture {
	
	}
	/**
 * @description Return Value:
*/
	getImageOpenPath():String {
	
	}
	/**
 * @description Return Value:
*/
	getImageSavePath():String {
	
	}
	/**
 * @description Return Value:
*/
	getNumImages():Number {
	
	}
	/**
 * @description Creates a modified version of the given name if necessary to make it unique.
*/
	getUniqueImageName(name:String):String {
	
	}
	/**
 * @description Called by the framework to notify the manager that the image has been prepared for the off-line renderer.
*/
	imagePrepared(img:DzTexture, tempName:String):DzTexture {
	
	}
	/**
 * @description Reads an image from a file.
*/
	loadImage(filename:String):Image {
	
	}
	/**
 * @description Reads an image from a file.
*/
	loadImage(filename:String, img:Image, importerIdx:Number):DzError {
	
	}
	/**
 * @description Forces a flush of the background image processing buffer.
*/
	prepareAllImages(r:DzRenderer):DzRenderer {
	
	}
	/**
 * @description Reloads any images whose source files have changed.
*/
	refresh():void {
	
	}
	/**
 * @description Writes an image to a file.
*/
	saveImage(filename:String, image:Image, exporterIdx:Number):DzError {
	
	}
	/**
 * @description Sets the file path that a file open dialog will point to for images.
*/
	setImageOpenPath(path:String):String {
	
	}
	/**
 * @description Sets the file path that a file save dialog will point to for images.
*/
	setImageSavePath(path:String):String {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when the auto refresh state changes.
 * @signature "autoRefreshChanged(bool)"
 * @event
*/
	autoRefreshChanged(onOff:Boolean):void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when an image is added to or removed from the list.
 * @signature "imageListChanged()"
 * @event
*/
	imageListChanged():void {
	
	}

}
/**
 * @classdesc TODO:
Add detailed description.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/imageproperty_dz}*/
class DzImageProperty extends DzProperty {
	/**
 * @description Default Constructor. Creates a non-user property.
 * @constructor
*/
	constructor() {
	
	}
	/**
 * @description Parameter(s):
 * @constructor
*/
	constructor(name:String, isUserProperty:Boolean) {
	
	}
	/**
 * @description Return Value:
*/
	getDefaultMapGamma():Number {
	
	}
	/**
 * @description Return Value:
*/
	getDefaultMapTextureType():Number {
	
	}
	/**
 * @description Return Value:
*/
	getTextureModifier():void {
	
	}
	/**
 * @description Return Value:
*/
	getTextureModifierFlags():Number {
	
	}
	/**
 * @description Return Value:
*/
	getValue():DzTexture {
	
	}
	/**
 * @description Sets the default map gamma.
*/
	setDefaultMapGamma(gamma:Number):Number {
	
	}
	/**
 * @description Sets the default map texture type.
*/
	setDefaultMapTextureType(type:Number):Number {
	
	}
	/**
 * @description Sets the texture modifier.
*/
	setTextureModifier(txtMod:DzTextureModifier):void {
	
	}
	/**
 * @description Sets texture modifier flags for this property.
*/
	setTextureModifierFlags(flags:Number):Number {
	
	}
	/**
 * @description Sets the texture value on this property.
*/
	setValue(val:DzTexture):Boolean {
	
	}
	/**
 * @description Sets the image value.
*/
	setValue(imgFile:String):Boolean {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description TODO: Add Description
 * @signature TODO: Add Description
 * @event
*/
	defaultMapGammaChanged():void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description TODO: Add Description
 * @signature TODO: Add Description
 * @event
*/
	defaultMapTextureTypeChanged():void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description TODO: Add Description
 * @signature TODO: Add Description
 * @event
*/
	textureModifierChanged():void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description TODO: Add Description
 * @signature TODO: Add Description
 * @event
*/
	textureModifierFlagsChanged():void {
	
	}

}
/**
 * @classdesc Has an array of QImage objects for capturing data from a renderer - one image will be created for each frame rendered.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/imagerenderhandler_dz}*/
class DzImageRenderHandler extends DzRenderHandler {
	/**
 * @description Holds whether each frame is written to file when finishFrame is called. The internal images is reset on each new frame.
	*/
	writeToFile:Boolean;
	/**
 * @description Create a new image render handler for rendering a single frame.
 * @constructor
*/
	constructor(size:Size, renderTime:DzTime, filename:String) {
	
	}
	/**
 * @description Create a new image render handler for rendering a multiple frames.
 * @constructor
*/
	constructor(size:Size, startingTime:DzTime, numFrames:Number, filename:String, isMovie:Boolean) {
	
	}
	/**
 * @description Begins rendering the given frame
*/
	beginFrame(frame:Number):Number {
	
	}
	/**
 * @description Starts a render
*/
	beginRender():void {
	
	}
	/**
 * @description Finishes rendering the current frame
*/
	finishFrame():void {
	
	}
	/**
 * @description Finishes the render and saves it out to file
*/
	finishRender():void {
	
	}
	/**
 * @description Return Value:
*/
	getCreateThumbnail():Boolean {
	
	}
	/**
 * @description Return Value:
*/
	getCurrentFrameImage():Image {
	
	}
	/**
 * @description Return Value:
*/
	getNumFrames():Number {
	
	}
	/**
 * @description Return Value:
*/
	getSize():Size {
	
	}
	/**
 * @description Return Value:
*/
	getStartingTime():DzTime {
	
	}
	/**
 * @description Sets whether a thumbnail is created
*/
	setCreateThumbnail(createThumb:Boolean):Boolean {
	
	}

}
/**
 * @classdesc TODO:
Add detailed description.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/imagetexture_dz}*/
class DzImageTexture extends DzTexture, DzRefCountedItem {
	/**
 * @description The author of the file for this texture. (Read Only)
	*/
	assetAuthor:DzAuthor;
	/**
 * @description The revision version of the asset file for this texture. (Read Only)
	*/
	assetFileRevision:DzVersion;
	/**
 * @description The asset id for this texture.
	*/
	assetId:String;
	/**
 * @description The modified date of the asset file for this texture. (Read Only)
	*/
	assetModifiedDate:Date;
	/**
 * @description The URI of the asset source for this texture; only valid when the asset is in an embedded state - i.e. modified. (Read Only)
	*/
	assetSource:DzUri;
	/**
 * @description The asset URI for this texture. (Read Only)
	*/
	assetUri:DzUri;
	/**
 * @description TODO:
Add description.
 * @constructor
*/
	constructor(filename:String, gamma:Number) {
	
	}
	/**
 * @description TODO:
Add description.
 * @constructor
*/
	constructor(filename:String, gamma:Number, textureType:Number) {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description TODO: Add Description
 * @signature TODO: Add Description
 * @event
*/
	assetModified():void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description TODO: Add Description
 * @signature TODO: Add Description
 * @event
*/
	assetWasSaved():void {
	
	}

}
/**
 * @classdesc TODO:
Add detailed description.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/importer_dz}*/
class DzImporter extends DzFileIO {
	/**
 * @description Return Value:
*/
	getDescription():String {
	
	}
	/**
 * @description Return Value:
*/
	getExtension(i:Number):String {
	
	}
	/**
 * @description Return Value:
*/
	getNumExtensions():Number {
	
	}
	/**
 * @description Imports from a file.
*/
	readFile(filename:String, options:DzFileIOSettings):DzError {
	
	}
	/**
 * @description Imports from a file.
*/
	readFile(filename:String):DzError {
	
	}
	/**
 * @description Test the given filename and file contents to see if this importer can read it.
*/
	recognize(filename:String):Boolean {
	
	}

}
/**
 * @classdesc There is only one instance of this manager in an application. This instance is created and owned by DzApp. Don't create an instance of this class, but rather request a pointer to it from DzApp via DzApp.getImportMgr().



See Also:


 Importer Settings
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/importmgr_dz}*/
class DzImportMgr extends QObject {
	/**
 * @description Calls recognize() on each of the importers and attempts to match an importer with the filename.
*/
	canImport(filename:String):Boolean {
	
	}
	/**
 * @description Calls recognize() on each of the importers and attempts to match an importer with the filename.
*/
	findImporter(filename:String):DzImporter {
	
	}
	/**
 * @description Attempts to locate an importer class type by name.
*/
	findImporterByClassName(className:String):DzImporter {
	
	}
	/**
 * @description Calls recognize() on each of the importers and attempts to match an importer with the filename.
*/
	findImporterIndex(filename:String):Number {
	
	}
	/**
 * @description Gets the full import file name.
*/
	getImportFileName():String {
	
	}
	/**
 * @description Gets the default import directory - this is typically the last directory that the user imported a file from, and will be the directory that user will be taken to next time the file import dialog is displayed.
*/
	getImportPath():String {
	
	}
	/**
 * @description Return Value:
*/
	getNumImporters():Number {
	
	}
	/**
 * @description Return Value:
*/
	isImporting():Boolean {
	
	}
	/**
 * @description Populates the given filter with all the geometry types recognized by the import manager.
*/
	makeGeometryFileFilter(filter:DzFileFilter, defaultFilter:String, makeAllFilesEntry:Boolean):DzFileFilter {
	
	}
	/**
 * @description Populates the given filter with all the types recognized by the import manager.
*/
	makeImportFileFilter(filter:DzFileFilter, defaultFilter:String, makeAllFilesEntry:Boolean):DzFileFilter {
	
	}
	/**
 * @description Import the contents of a file into the scene.
*/
	readFile(filename:String, importerIdx:Number):DzError {
	
	}
	/**
 * @description Import the contents of a file into the scene.
*/
	readFile(filename:String, importerIdx:Number, options:DzFileIOSettings):DzError {
	
	}
	/**
 * @description Reads the geometry file into a new shape.
*/
	readGeometry(filename:String, importerIdx:Number, options:DzFileIOSettings):String {
	
	}
	/**
 * @description Reads the geometry file into a new shape.
*/
	readGeometry(filename:String, importerIdx:Number):String {
	
	}
	/**
 * @description Sets the import file name - this is the full file name that file was import
*/
	setImportFileName(fileName:String):String {
	
	}
	/**
 * @description Sets the default import directory - this is the directory that user will be taken to next time the file import dialog is displayed.
*/
	setImportPath(path:String):String {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted after importing a file. This may not always be emitted after every fileImportStarting() signal if there were errors during file loading.
 * @signature "fileImported()"
 * @event
*/
	fileImported():void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted just before importing a file.
 * @signature "fileImportStarting()"
 * @event
*/
	fileImportStarting():void {
	
	}

}
/**
 * @classdesc DzInfoDivider places a divider bar between your widget and a tab bar of info tabs. This class is very similar (but not exactly like) DzDynamicDividerWgt. For situations where you want to control both sides of the divider bar it is recommended to use DzDynamicDividerWgt.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/infodivider_dz}*/
class DzInfoDivider extends QWidget {
	/**
 * @description Return Value:
*/
	getActualDividerPercent():Number {
	
	}
	/**
 * @description Return Value:
*/
	getInfoTabs():DzInfoTabs {
	
	}
	/**
 * @description Return Value:
*/
	getPreferredDividerPercent():Number {
	
	}
	/**
 * @description Return Value:
*/
	getToggleState():Number {
	
	}
	/**
 * @description Return Value:
*/
	isMinimized():Boolean {
	
	}
	/**
 * @description Return Value:
*/
	isToggled():Boolean {
	
	}
	/**
 * @description Moves the divider distance pixels from the current location.
*/
	moveDivider(distance:Number):Number {
	
	}
	/**
 * @description Sets the location of the divider bar.
*/
	setPreferredDividerPercent(distance:Number):Number {
	
	}
	/**
 * @description Sets the toggled state of this divider bar.
*/
	setToggleState(state:Number):Number {
	
	}
	/**
 * @description Toggles the second widget between fully closed and fully open.
*/
	toggleClosed():void {
	
	}
	/**
 * @description Return Value:
*/
	toggleEnabled():Boolean {
	
	}
	/**
 * @description Toggles the minimized state of the second widget. If toggling is disabled, this method has no effect. If either the first or second widget is null, toggling this method will also have no effect.
*/
	toggleMinimized():void {
	
	}

}
/**
 * @classdesc Tab bar that provides Tips, MetaData, and Info tabs that can be used to provide various information about products.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/infotabs_dz}*/
class DzInfoTabs extends QWidget {
	/**
 * @description Return Value:
*/
	currentTab():Number {
	
	}
	/**
 * @description Hides the widget responsible for displaying tab contents
*/
	hideStack():void {
	
	}
	/**
 * @description Return Value:
*/
	isStackHidden():Boolean {
	
	}
	/**
 * @description Sets the current tab to which
*/
	setCurrentTab(which:Number):Number {
	
	}
	/**
 * @description Sets the file info for the given asset
*/
	setFileInfo(asset:DzAsset):DzAsset {
	
	}
	/**
 * @description Sets file and meta data info for the given asset
*/
	setInfo(asset:DzAsset):DzAsset {
	
	}
	/**
 * @description Sets metadata info for the given asset
*/
	setMetaInfo(asset:DzAsset):DzAsset {
	
	}
	/**
 * @description Sets info for the given node
*/
	setNodeInfo(node:DzNode):DzNode {
	
	}
	/**
 * @description Sets file info from the given asset container
*/
	setProductInfo(product:DzProductAssetContainer):DzProductAssetContainer {
	
	}
	/**
 * @description Sets the UI script responsible for displaying the contents of the Tips tab
*/
	setTipUIScript(path:String):DzError {
	
	}
	/**
 * @description Specifies whether the file tab is shown or not
*/
	showFileTab(onOff:Boolean):Boolean {
	
	}
	/**
 * @description Specifies whether the metadata tab is shown or not
*/
	showMetaTab(onOff:Boolean):Boolean {
	
	}
	/**
 * @description Specifies whether the node tab is shown or not
*/
	showNodeTab(onOff:Boolean):Boolean {
	
	}
	/**
 * @description Specifies whether the render tab is shown or not
*/
	showRenderTab(onOff:Boolean):Boolean {
	
	}
	/**
 * @description Shows the widget responsible for displaying the contents of the tabs
*/
	showStack():void {
	
	}
	/**
 * @description Specifies whether the store tab is shown or not
*/
	showStoreTab(onOff:Boolean):Boolean {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when a keyword is clicked and the CTRL modifier key is pressed.
 * @signature "keywordAddUniqueClicked(const QString&)"
 * @event
*/
	keywordAddUniqueClicked(keyword:String):void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when a keyword is clicked.
 * @signature "keywordSetClicked(const QString&)"
 * @event
*/
	keywordSetClicked(keyword:String):void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when the apply button on the render tab is clicked.
 * @signature "renderApplyClicked()"
 * @event
*/
	renderApplyClicked():void {
	
	}

}
/**
 * @classdesc This class can be used to create a single instance of another DzNode (subclass) that also has a DzOobject for inclusion in a group of like nodes. These instances are drawn the same as the target node except for transforms.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/instancegroupitem_dz}*/
class DzInstanceGroupItem extends DzBase {
	/**
 * @description TODO:
Add description.
 * @constructor
*/
	constructor() {
	
	}
	/**
 * @description Copies the transform values of the given nodes transform properties. Also copies rotation order.
*/
	copyTransformFromNode(node:DzNode):DzNode {
	
	}
	/**
 * @description Copies the transform values to the given nodes transform properties. Also copies rotation order
*/
	copyTransformToNode(node:DzNode):DzNode {
	
	}
	/**
 * @description Return Value:
*/
	getEndPointValues():DzVec3 {
	
	}
	/**
 * @description Return Value:
*/
	getGeneralScaleValue():Number {
	
	}
	/**
 * @description Return Value:
*/
	getLabel():String {
	
	}
	/**
 * @description Return Value:
*/
	getLocalPos():DzVec3 {
	
	}
	/**
 * @description Return Value:
*/
	getLocalRot():DzQuat {
	
	}
	/**
 * @description Return Value:
*/
	getLocalScale():DzMatrix3 {
	
	}
	/**
 * @description Return Value:
*/
	getLocalTransform():DzMatrix3 {
	
	}
	/**
 * @description Return Value:
*/
	getOrientation():DzQuat {
	
	}
	/**
 * @description Return Value:
*/
	getOrientationValues():DzVec3 {
	
	}
	/**
 * @description Return Value:
*/
	getOriginValues():DzVec3 {
	
	}
	/**
 * @description Return Value:
*/
	getPositionValues():DzVec3 {
	
	}
	/**
 * @description Return Value:
*/
	getRotationOrder():DzRotationOrder {
	
	}
	/**
 * @description Return Value:
*/
	getRotationValues():DzVec3 {
	
	}
	/**
 * @description Parameter(s):
*/
	getWSPos(tm:DzTime, defaultVal:Boolean):DzVec3 {
	
	}
	/**
 * @description Return Value:
*/
	getWSPos():DzVec3 {
	
	}
	/**
 * @description Parameter(s):
*/
	getWSRot(tm:DzTime, defaultVal:Boolean):DzQuat {
	
	}
	/**
 * @description Return Value:
*/
	getWSRot():DzQuat {
	
	}
	/**
 * @description Parameter(s):
*/
	getWSScale(tm:DzTime, defaultVal:Boolean):DzMatrix3 {
	
	}
	/**
 * @description Return Value:
*/
	getWSScale():DzMatrix3 {
	
	}
	/**
 * @description Return Value:
*/
	getWSTransform():DzMatrix3 {
	
	}
	/**
 * @description Parameter(s):
*/
	getWSTransform(tm:DzTime, defaultVal:Boolean):DzMatrix3 {
	
	}
	/**
 * @description Return Value:
*/
	getXYZScaleValues():DzVec3 {
	
	}
	/**
 * @description Return Value:
*/
	inheritsScale():Boolean {
	
	}
	/**
 * @description Sets the endpoint for this item.
*/
	setEndPoint(x:Number, y:Number, z:Number):Number {
	
	}
	/**
 * @description Sets whether or not this node inherits the scale of its parent.
*/
	setInheritScale(onOff:Boolean):Boolean {
	
	}
	/**
 * @description Sets the label for this item.
*/
	setLabel(label:String):String {
	
	}
	/**
 * @description Sets the orientation for this item.
*/
	setOrientation(x:Number, y:Number, z:Number):Number {
	
	}
	/**
 * @description Sets the origin for this item.
*/
	setOrigin(x:Number, y:Number, z:Number):Number {
	
	}
	/**
 * @description Sets the position for this item.
*/
	setPosition(x:Number, y:Number, z:Number):Number {
	
	}
	/**
 * @description Sets the rotation for this item.
*/
	setRotation(x:Number, y:Number, z:Number):Number {
	
	}
	/**
 * @description Sets the rotation order for this item.
*/
	setRotationOrder(order:DzRotationOrder):DzRotationOrder {
	
	}
	/**
 * @description Sets the scale for this item.
*/
	setScale(x:Number, y:Number, z:Number, genScale:Number):Number {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when the local transform for this item has changed.
 * @signature "localTransformChanged()"
 * @event
*/
	localTransformChanged():void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when the transform for this item has changed.
 * @signature "transformChanged()"
 * @event
*/
	transformChanged():void {
	
	}

}
/**
 * @classdesc This class can be used to create a multiple instances of another DzNode (subclass) that also has a DzOobject. These instances are drawn the same as the target node except for transforms.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/instancegroupnode_dz}*/
class DzInstanceGroupNode extends DzInstanceNode {
	/**
 * @description Default Constructor.
 * @constructor
*/
	constructor() {
	
	}
	/**
 * @description Begin edit of this node.
*/
	beginItemEdit():void {
	
	}
	/**
 * @description Return Value:
*/
	clearItems():void {
	
	}
	/**
 * @description Return Value:
*/
	createItem():DzInstanceGroupItem {
	
	}
	/**
 * @description Parameter(s):
*/
	findIndexForItem(item:DzInstanceGroupItem):Number {
	
	}
	/**
 * @description Finish edit of this node.
*/
	finishItemEdit():void {
	
	}
	/**
 * @description Parameter(s):
*/
	getGroupItem(index:Number):DzInstanceGroupItem {
	
	}
	/**
 * @description Return Value:
*/
	getNumberOfGroupItems():Number {
	
	}
	/**
 * @description Return Value:
*/
	isEditingItems():Boolean {
	
	}
	/**
 * @description Parameter(s):
*/
	removeItem(index:Number):Number {
	
	}

}
/**
 * @classdesc This class can be used to create a single instance of another DzNode (subclass) that also has a DzOobject. The instance is drawn the same as the target node except for transforms.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/instancenode_dz}*/
class DzInstanceNode extends DzNode {
	/**
 * @description Default Constructor.
 * @constructor
*/
	constructor() {
	
	}
	/**
 * @description Return Value:
*/
	getCopyModeControl():DzEnumProperty {
	
	}
	/**
 * @description Return Value:
*/
	getTarget():DzNode {
	
	}
	/**
 * @description Return Value:
*/
	getTargetControl():DzNodeProperty {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when the target for this instance has changed.
 * @signature "targetChanged()"
 * @event
*/
	targetChanged():void {
	
	}

}
/**
 * @classdesc See Also:


 DzVec2




Since:


 4.6.4.88
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/int2_dz}*/
class DzInt2 extends Object {
	/**
 * @description Holds the height of this vector; an alias to the y value.
	*/
	height:Number;
	/**
 * @description Holds the width of this vector; an alias for the x value.
	*/
	width:Number;
	/**
 * @description Holds the x value of this vector.
	*/
	x:Number;
	/**
 * @description Holds the y value of this vector.
	*/
	y:Number;
	/**
 * @description Default Constructor. Creates an uninitialized vector.
 * @constructor
*/
	constructor() {
	
	}
	/**
 * @description Copy Constructor.
 * @constructor
*/
	constructor(vec:DzVec2) {
	
	}
	/**
 * @description Copy Constructor.
 * @constructor
*/
	constructor(vec:DzInt2) {
	
	}
	/**
 * @description Creates and inititializes this vector with an array of 2 integer values.
 * @constructor
*/
	constructor(vals:Array) {
	
	}
	/**
 * @description Creates and inititializes this vector with 2 integers.
 * @constructor
*/
	constructor(x:Number, y:Number) {
	
	}
	/**
 * @description Sets the value of each component to its respective absolute value.
*/
	abs():void {
	
	}
	/**
 * @description Return Value:
*/
	add(vec:DzInt2):void {
	
	}
	/**
 * @description Return Value:
*/
	average():Number {
	
	}
	/**
 * @description Clamps each component of this vector.
*/
	clamp(min:Number, max:Number):Number {
	
	}
	/**
 * @description Parameter(s):
*/
	clamped(min:Number, max:Number):Number {
	
	}
	/**
 * @description Parameter(s):
*/
	clampedMax(max:Number):Number {
	
	}
	/**
 * @description Parameter(s):
*/
	clampedMin(min:Number):Number {
	
	}
	/**
 * @description Clamps the maximum value for each component of this vector.
*/
	clampMax(max:Number):Number {
	
	}
	/**
 * @description Clamps the minimum value for each component of this vector.
*/
	clampMin(min:Number):Number {
	
	}
	/**
 * @description Return Value:
*/
	divide(vec:DzInt2):void {
	
	}
	/**
 * @description Return Value:
*/
	isNull():Boolean {
	
	}
	/**
 * @description Return Value:
*/
	length():Number {
	
	}
	/**
 * @description Return Value:
*/
	lengthSquared():Number {
	
	}
	/**
 * @description Performs a linear interpolation between v1 and v2 based on the value of t.
*/
	linearInterp(t:Number, v1:DzInt2, v2:DzInt2):Number {
	
	}
	/**
 * @description Sets this vector to (1, 1).
*/
	makeIdentity():void {
	
	}
	/**
 * @description Sets this vector to (0, 0).
*/
	makeZero():void {
	
	}
	/**
 * @description Return Value:
*/
	manhattanLength():Number {
	
	}
	/**
 * @description Parameter(s):
*/
	modulate(min:Number, max:Number):Number {
	
	}
	/**
 * @description Modulates each component of this vector.
*/
	modulo(min:Number, max:Number):Number {
	
	}
	/**
 * @description Return Value:
*/
	multiply(vec:DzInt2):void {
	
	}
	/**
 * @description Negates each component of this vector.
*/
	negate():void {
	
	}
	/**
 * @description Sets this vector to have a specific length in the current direction.
*/
	setLength(length:Number):Number {
	
	}
	/**
 * @description Sets the value of each component to its respective squared value.
*/
	square():void {
	
	}
	/**
 * @description Return Value:
*/
	subtract(vec:DzInt2):void {
	
	}
	/**
 * @description Swaps the values of x and y.
*/
	transpose():void {
	
	}

}
/**
 * @classdesc This class provides an animatable integer property with 2 values that is stored and can be accessed as a DzInt2.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/int2property_dz}*/
class DzInt2Property extends DzIntProperty {
	/**
 * @description Default Constructor. Creates a non-animatable, non-user property.
 * @constructor
*/
	constructor() {
	
	}
	/**
 * @description Parameter(s):
 * @constructor
*/
	constructor(name:String, canAnimate:Boolean, isUserProperty:Boolean, initVal:DzInt2) {
	
	}
	/**
 * @description Parameter(s):
 * @constructor
*/
	constructor(name:String, canAnimate:Boolean, isUserProperty:Boolean) {
	
	}
	/**
 * @description Adjust the value of the property based on the contribution of property controllers.
*/
	adjustInt2Value(val:DzInt2):DzInt2 {
	
	}
	/**
 * @description Adjust the value of the property at the given time based on the contribution of property controllers.
*/
	adjustInt2Value(tm:DzTime, val:DzInt2):DzInt2 {
	
	}
	/**
 * @description Return Value:
*/
	getDefaultInt2Value():DzInt2 {
	
	}
	/**
 * @description TODO:
Add description.
*/
	getInt2FollowValue():DzInt2 {
	
	}
	/**
 * @description TODO:
Add description.
*/
	getInt2FollowValue(tm:DzTime):DzInt2 {
	
	}
	/**
 * @description Return Value:
*/
	getInt2Value():DzInt2 {
	
	}
	/**
 * @description Parameter(s):
*/
	getInt2Value(tm:DzTime):DzInt2 {
	
	}
	/**
 * @description Parameter(s):
*/
	getKeyInt2Value(i:Number):DzInt2 {
	
	}
	/**
 * @description This function is provided for the special case of ERC link redirection; sometimes called 'cross-talk'. For example, if Figure A (a piece of clothing, for example) is 'Fit To' Figure B, the ERC links on Figure A are redirected to follow channels on Figure B; this is how morphs on an item of clothing will follow morphs on the figure, etc. This function will provide the value of the property ignoring any redirection of ERC links. So, for a figure that is not 'Fit To' another figure, this will return the same value as getValue(). For a figure that is 'Fit To' another figure, this will return the value that the property would have if the ERC link had not been redirected.
*/
	getLocalInt2Value():DzInt2 {
	
	}
	/**
 * @description This function is provided for the special case of ERC link redirection; sometimes called 'cross-talk'. For example, if Figure A (a piece of clothing, for example) is 'Fit To' Figure B, the ERC links on Figure A are redirected to follow channels on Figure B; this is how morphs on an item of clothing will follow morphs on the figure, etc. This function will provide the value of the property ignoring any redirection of ERC links. So, for a figure that is not 'Fit To' another figure, this will return the same value as getValue(). For a figure that is 'Fit To' another figure, this will return the value that the property would have if the ERC link had not been redirected.
*/
	getLocalInt2Value(tm:DzTime):DzInt2 {
	
	}
	/**
 * @description This function is provided to make it easy to get the 'keyed' value of the property without any modifications. When the value of a property is evaluated, first the value based on key interpolation is calculated, that value is then passed to each of the controllers on the property (ERC links for example) which can modify that value. This modified value is then returned as the value of the property by getInt2Value(). This function returns the value of the property before the application of the controllers; strictly the result of key interpolation.
*/
	getRawInt2Value(tm:DzTime):DzInt2 {
	
	}
	/**
 * @description This function is provided to make it easy to get the 'keyed' value of the property without any modifications. When the value of a property is evaluated, first the value based on key interpolation is calculated, that value is then passed to each of the controllers on the property (ERC links for example) which can modify that value. This modified value is then returned as the value of the property by getInt2Value(). This function returns the value of the property before the application of the controllers; strictly the result of key interpolation.
*/
	getRawInt2Value():DzInt2 {
	
	}
	/**
 * @description Sets the default value for this property.
*/
	setDefaultInt2Value(val:DzInt2):DzInt2 {
	
	}
	/**
 * @description Sets the value for this property at the current time; or the default value if this property is not animatable.
*/
	setInt2Value(val:DzInt2):DzInt2 {
	
	}
	/**
 * @description Sets the value for this property at the given time; or the default value if this property is not animatable.
*/
	setInt2Value(tm:DzTime, val:DzInt2):DzTime {
	
	}
	/**
 * @description Sets the value of the i'th key.
*/
	setKeyInt2Value(i:Number, val:DzInt2):Number {
	
	}
	/**
 * @description The same as calling setInt2Value( DzInt2 ).
*/
	setRawInt2Value(val:DzInt2):DzInt2 {
	
	}
	/**
 * @description The same as calling setInt2Value( DzTime, DzInt2 ).
*/
	setRawInt2Value(tm:DzTime, val:DzInt2):DzTime {
	
	}

}
/**
 * @classdesc Since:


 4.6.4.24
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/interactiveinstructionobject_dz}*/
class DzInteractiveInstructionObject extends QObject {
	/**
 * @description Return Value:
*/
	getMember(name:String):Object {
	
	}
	/**
 * @description Return Value:
*/
	hasMember(name:String):Boolean {
	
	}
	/**
 * @description Removes the member/value named name from the instruction.
*/
	removeMember(name:String):String {
	
	}
	/**
 * @description Sets the member name of the instruction to value. A valid value depends on the type of instruction and can be one of Boolean, Number, String or Array.
*/
	setMember(name:String, value:Object):String {
	
	}

}
/**
 * @classdesc This class manages interactive lessons that the user can perform in the interface via lessonstripwgt_dz. There is only one instance of this manager in an application. This instance is created and owned by DzMainWindow. Request the instance from DzMainWindow via DzMainWindow.getInteractiveLessonMgr().
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/interactivelessonmgr_dz}*/
class DzInteractiveLessonMgr extends QObject {
	/**
 * @description The width of the progress indicator displayed above the instruction box.
	*/
	progressWidth:Number;
	/**
 * @description Starts the lesson using a list of instructions in a separate file.
*/
	begin(path:String):String {
	
	}
	/**
 * @description Starts the lesson using the instructions list.
*/
	begin(instructions:Array):Array {
	
	}
	/**
 * @description Return Value:
*/
	currentIndex():Number {
	
	}
	/**
 * @description Return Value:
*/
	currentPath():String {
	
	}
	/**
 * @description Return Value:
*/
	currentQuery():Boolean {
	
	}
	/**
 * @description TODO:
Add description.
*/
	currentQuery():Number {
	
	}
	/**
 * @description TODO:
Add description.
*/
	currentQuery():String {
	
	}
	/**
 * @description Return Value:
*/
	currentType():String {
	
	}
	/**
 * @description Return Value:
*/
	getActionInstruction(classname:String, info:String, tag:String, locateOnly:Boolean):String {
	
	}
	/**
 * @description Return Value:
*/
	getActivityInstruction(activity:String, info:String, tag:String, locateOnly:Boolean):String {
	
	}
	/**
 * @description Return Value:
*/
	getDisplayInstruction(info:String, button:String):String {
	
	}
	/**
 * @description Return Value:
*/
	getInstruction(type:String, query:ByteArray, info:String, tag:String, locateOnly:Boolean):String {
	
	}
	/**
 * @description Return Value:
*/
	getInstruction(type:String, query:String, info:String, tag:String, locateOnly:Boolean):String {
	
	}
	/**
 * @description Return Value:
*/
	getInstruction(type:String, query:Boolean, info:String, tag:String, locateOnly:Boolean):String {
	
	}
	/**
 * @description Return Value:
*/
	getInstruction(type:String, query:Number, info:String, tag:String, locateOnly:Boolean):String {
	
	}
	/**
 * @description Return Value:
*/
	getLayoutInstruction(layout:String, info:String, tag:String, locateOnly:Boolean):String {
	
	}
	/**
 * @description Return Value:
*/
	getWidgetInstruction(widgetPath:String, info:String, tag:String, locateOnly:Boolean):String {
	
	}
	/**
 * @description TODO:
Add description.
*/
	instructionTypes():Array {
	
	}
	/**
 * @description Return Value:
*/
	isRunning():Boolean {
	
	}
	/**
 * @description TODO:
Add description.
*/
	iterate():void {
	
	}
	/**
 * @description Skips the next instruction in the lesson.
*/
	skip():void {
	
	}
	/**
 * @description Stops the lesson.
*/
	stop():void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when an instruction in an interactive lesson has been skipped.
 * @signature "skipped()"
 * @event
*/
	skipped():void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when an interactive lesson has started.
 * @signature "started()"
 * @event
*/
	started():void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when an interactive lesson has stepped to the next instruction.
 * @signature "stepped()"
 * @event
*/
	stepped():void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when an interactive lesson is stopped.
 * @signature "stopped(bool)"
 * @event
*/
	stopped(success:Boolean):void {
	
	}

}
/**
 * @classdesc Since:


 4.6.4.24
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/interactivelessonobject_dz}*/
class DzInteractiveLessonObject extends QObject {
	/**
 * @description Return Value:
*/
	appendInstruction():DzInteractiveInstructionObject {
	
	}
	/**
 * @description Return Value:
*/
	count():Number {
	
	}
	/**
 * @description Return Value:
*/
	currentIndex():Number {
	
	}
	/**
 * @description Return Value:
*/
	insertInstruction(index:Number):DzInteractiveInstructionObject {
	
	}
	/**
 * @description Return Value:
*/
	instructionAt(index:Number):DzInteractiveInstructionObject {
	
	}
	/**
 * @description Return Value:
*/
	nextInstruction():DzInteractiveInstructionObject {
	
	}

}
/**
 * @classdesc TODO:
Add detailed description.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/intproperty_dz}*/
class DzIntProperty extends DzNumericProperty {
	/**
 * @description Default Constructor. Creates a non-animatable, non-user property.
 * @constructor
*/
	constructor() {
	
	}
	/**
 * @description Parameter(s):
 * @constructor
*/
	constructor(name:String, canAnimate:Boolean, isUserProperty:Boolean, initVal=0:Number) {
	
	}
	/**
 * @description Adjust the value of the property based on the contribution of property controllers.
*/
	adjustValue(val:Number):Number {
	
	}
	/**
 * @description Adjust the value of the property at the given time based on the contribution of property controllers.
*/
	adjustValue(tm:DzTime, val:Number):Number {
	
	}
	/**
 * @description Return Value:
*/
	getDefaultValue():Number {
	
	}
	/**
 * @description Return Value:
*/
	getDoubleDefaultValue():Number {
	
	}
	/**
 * @description Parameter(s):
*/
	getDoubleValue(tm:DzTime):Number {
	
	}
	/**
 * @description Parameter(s):
*/
	getKeyValue(i:Number):Number {
	
	}
	/**
 * @description This function is provided for the special case of ERC link redirection; sometimes called 'cross-talk'. For example, if Figure A (a piece of clothing, for example) is 'Fit To' Figure B, the ERC links on Figure A are redirected to follow channels on Figure B; this is how morphs on an item of clothing will follow morphs on the figure, etc. This function will provide the value of the property ignoring any redirection of ERC links. So, for a figure that is not 'Fit To' another figure, this will return the same value as getValue(). For a figure that is 'Fit To' another figure, this will return the value that the property would have if the ERC link had not been redirected.
*/
	getLocalValue():Number {
	
	}
	/**
 * @description This function is provided for the special case of ERC link redirection; sometimes called 'cross-talk'. For example, if Figure A (a piece of clothing, for example) is 'Fit To' Figure B, the ERC links on Figure A are redirected to follow channels on Figure B; this is how morphs on an item of clothing will follow morphs on the figure, etc. This function will provide the value of the property ignoring any redirection of ERC links. So, for a figure that is not 'Fit To' another figure, this will return the same value as getValue(). For a figure that is 'Fit To' another figure, this will return the value that the property would have if the ERC link had not been redirected.
*/
	getLocalValue(tm:DzTime):Number {
	
	}
	/**
 * @description Return Value:
*/
	getMax():Number {
	
	}
	/**
 * @description Return Value:
*/
	getMin():Number {
	
	}
	/**
 * @description This function is provided to make it easy to get the 'keyed' value of the property without any modifications. When the value of a property is evaluated, first the value based on key interpolation is calculated, that value is then passed to each of the controllers on the property (ERC links for example) which can modify that value. This modified value is then returned as the value of the property by getValue(). This function returns the value of the property before the application of the controllers; strictly the result of key interpolation.
*/
	getRawValue(tm:DzTime):Number {
	
	}
	/**
 * @description This function is provided to make it easy to get the 'keyed' value of the property without any modifications. When the value of a property is evaluated, first the value based on key interpolation is calculated, that value is then passed to each of the controllers on the property (ERC links for example) which can modify that value. This modified value is then returned as the value of the property by getValue(). This function returns the value of the property before the application of the controllers; strictly the result of key interpolation.
*/
	getRawValue():Number {
	
	}
	/**
 * @description Return Value:
*/
	getSensitivity():Number {
	
	}
	/**
 * @description Parameter(s):
*/
	getValue(tm:DzTime):Number {
	
	}
	/**
 * @description Return Value:
*/
	getValue():Number {
	
	}
	/**
 * @description Sets the default value for this property.
*/
	setDefaultValue(val:Number):Number {
	
	}
	/**
 * @description Truncates a double precision value to an integer and sets the default value.
*/
	setDoubleDefaultValue(val:Number):Number {
	
	}
	/**
 * @description Sets the value for this property at the given time; or the default value if this property is not animatable; truncates a double precision value to an integer.
*/
	setDoubleValue(tm:DzTime, val:Number):DzTime {
	
	}
	/**
 * @description Sets the value of the i'th key.
*/
	setKeyValue(keyIndex:Number, val:Number):Number {
	
	}
	/**
 * @description Set the maximum allowable value.
*/
	setMax(max:Number):Number {
	
	}
	/**
 * @description Set the mininimum allowable value.
*/
	setMin(min:Number):Number {
	
	}
	/**
 * @description Set the mininimum and maximum allowable values.
*/
	setMinMax(min:Number, max:Number):Number {
	
	}
	/**
 * @description Set the sensitivity for this property. This value describes the amount of change in the value of this property caused by adjustment in the interface, especially if limits are off.
*/
	setSensitivity(sens:Number):Number {
	
	}
	/**
 * @description Sets the value for this property at the given time; or the default value if this property is not animatable. This function differs from setRawValue() in that it takes into account any controllers on the property such that calling setValue( getValue() ) should not change the value of the property.
*/
	setValue(tm:DzTime, val:Number):DzTime {
	
	}
	/**
 * @description Sets the value for this property at the current time; or the default value if this property is not animatable. This function differs from setRawValue() in that it takes into account any controllers on the property such that calling setValue( getValue() ) should not change the value of the property.
*/
	setValue(val:Number):Number {
	
	}

}
/**
 * @classdesc A DzIntSlider provides a control that allows a user to adjust a bounded integer value.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/intslider_dz}*/
class DzIntSlider extends DzWidget {
	/**
 * @description Holds whether or not the slider obeys its limits. false by default.
	*/
	clamped:Boolean;
	/**
 * @description Holds whether or not the slider text is displayed as a percentage value. false by default.
	*/
	displayAsPercent:Boolean;
	/**
 * @description If true, the slider is considered to have an 'indeterminate' or '<?>' value. false by default.
	*/
	indeterminate:Boolean;
	/**
 * @description Holds the label text for the slider.
	*/
	label:String;
	/**
 * @description Holds whether or not the slider's label is visible.
	*/
	labelVisible:Boolean;
	/**
 * @description Holds the maximum value of the slider. Any attempt to set this to a value that is less than the current min will fail.
	*/
	max:Number;
	/**
 * @description Holds the minimum value of the slider. Any attempt to set this to a value that is greater than the current max will fail.
	*/
	min:Number;
	/**
 * @description Holds the sensitivity of the slider.
	*/
	sensitivity:Number;
	/**
 * @description Holds the text of the slider. (Read Only)
	*/
	text:String;
	/**
 * @description Holds whether or not the slider text is editable by the user. false by default.
	*/
	textEditable:Boolean;
	/**
 * @description Holds whether or not the slider text is visible to the user. true by default.
	*/
	textVisible:Boolean;
	/**
 * @description Holds the current value of the slider.
	*/
	value:Number;
	/**
 * @description Creates a slider as a child of the given parent widget.
 * @constructor
*/
	constructor(parent:DzWidget) {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when the user releases the slider.
 * @signature "editEnd()"
 * @event
*/
	editEnd():void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when the user starts dragging the slider.
 * @signature "editStart()"
 * @event
*/
	editStart():void {
	
	}
	/**
 * THIS IS A NOT AN ACTUAL FUNCTION, THIS IS A SIGNAL! USE ONLY THE SIGNATURE.
  * @description Emitted when the value of the slider changes, passes the new value.
 * @signature "valueChanged(int)"
 * @event
*/
	valueChanged(value:Number):void {
	
	}

}
/**
 * @classdesc TODO:
Add detailed description.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/invertmanip_dz}*/
class DzInvertManip extends DzImageManip {
	/**
 * @description TODO:
Add description.
	*/
	on:Boolean;
	/**
 * @description Holds whether or not the manipulater is active
 * @constructor
*/
	constructor(onOff=false:Boolean) {
	
	}
	/**
 * @description Return Value:
*/
	isOn():Boolean {
	
	}
	/**
 * @description Sets whether or not the invert manipulator is applied.
*/
	setOn(onOff:Boolean):Boolean {
	
	}

}
/**
 * @classdesc Implements a Physically Based Rendering (PBR) interface for the scene to render itself through the NVIDIA Iray renderer.
 * Go to documentation page at : {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/irayrenderer_dz}*/
class DzIrayRenderer extends DzRenderer {
	/**
 * @description Default Constructor.
 * @constructor
*/
	constructor() {
	
	}
	/**
 * @description Return Value:
*/
	getPropertyHolder():DzElement {
	
	}
	/**
 * @description Return Value:
*/
	isIPRRendering():Boolean {
	
	}

}