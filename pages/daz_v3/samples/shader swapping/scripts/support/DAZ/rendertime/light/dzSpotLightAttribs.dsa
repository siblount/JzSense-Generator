// DAZ Studio version 3.0  filetype DAZ Script
/**********************************************************************
	File: dzSpotLightAttribs.dsa

	Copyright © 2002-2009 DAZ Productions. All Rights Reserved.

	This file is part of the DAZ Script Documentation.

	This file may be used only in accordance with the DAZ Script 
	license provided with the DAZ Script Documentation.

	The contents of this file may not be disclosed to third parties, 
	copied or duplicated in any form, in whole or in part, without the 
	prior written permission of DAZ Productions, except as explicitly
	allowed in the DAZ Script license.

	See http://www.daz3d.com to contact DAZ Productions or for more 
	information about DAZ Script.
**********************************************************************/
/*****************************
   Script globals
*****************************
"Shader" - is a transient global variable provided by the interpreter
when this script is called via DzRSLShader::setDefinitionFile(),
that references the current DzRSLShader.
**********************************************************************/
var oOWNER = Shader.getOwner();
var fDEG2RAD = 0.01745329;
var fSHADOW_SOFTNESS_FACTOR = 75;

var oProperty;

var fValue = 0;
var bHasSpreadAngle = false;

var bNonDiff = true;
var bNonSpec = true;

var sPath = "";
var bAdjustBlur = false;
var fBlur = 0;

/*********************************************************************/
// --- Cone Angles
// Get the Start Angle property
oProperty = oOWNER.findProperty( "Start Angle" );
// If the property was found and its a float property
if( oProperty && oProperty.className() == "DzFloatProperty" )
{
	// Get the value of the property; convert to radians
	fValue = oProperty.getValue() * fDEG2RAD / 2.0;
	// Set the token
	Shader.setFloatToken( "coneinside", fValue );
}

// Get the Spread Angle property
oProperty = oOWNER.findProperty( "Spread Angle" );
// If the property was found and its a float property
if( oProperty && oProperty.className() == "DzFloatProperty" )
{
	// Update the flag to indicate we've found the property
	bHasSpreadAngle = true;
	// Get the value of the property; convert to radians
	fValue = oProperty.getValue() * fDEG2RAD / 2.0;
	// Set the token
	Shader.setFloatToken( "coneoutside", fValue );
}

// --- Illumination
// Get the illumination property
oProperty = oOWNER.findProperty( "Illumination" );
// If the property was found and its a enum property
if( oProperty && oProperty.className() == "DzEnumProperty" )
{
	//
	switch( oProperty.getItem( oProperty.getValue() ) )
	{
		case "Diffuse Only":
			bNonDiff = false;
			break;
		case "Specular Only":
			bNonSpec = false;
			break;
		case "On":
			bNonSpec = false;
			bNonDiff = false;
			break;
		default:
			break;
	}
	// Set the token
	Shader.setIntegerToken( "__nonspecular", bNonSpec ? 1 : 0 );
	Shader.setIntegerToken( "__nondiffuse", bNonDiff ? 1 : 0 );
}

// --- Shadows
// If we're dealing with shadows
if( Shader.isActiveInShadowPass() )
{
	// Get the Shadow Type property
	oProperty = oOWNER.getShadowTypeControl();
	// Set the path depending on the value
	switch( oProperty.getValue() )
	{
		case DzLight.DeepShadowMap:
			sPath = oOWNER.getShadowMapPath();
			bAdjustBlur = true;
			break;
		case DzLight.Raytraced:
			sPath = "raytrace";
			bAdjustBlur = true;
			break;
		default:
			break;
	}
	// Set the token
	Shader.setStringToken( "shadowmap", sPath );
	
	// Get the shadow blur property
	oProperty = oOWNER.findProperty( "Shadow Softness" );
	// If the property was found and its a float property
	if( oProperty && oProperty.className() == "DzFloatProperty" )
	{
		// Get the value
		fBlur = oProperty.getValue();
		// If blur needs to be adjusted
		if( bHasSpreadAngle && bAdjustBlur )
		{
			// Adjust to coincide with DzSpotLight
			fBlur /= Math.tan( fValue ) * fSHADOW_SOFTNESS_FACTOR;
		}
		// Set the token
		Shader.setFloatToken( "blur", fBlur );
	}
}