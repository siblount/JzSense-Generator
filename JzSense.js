// LAST UPDATED: December 13, 2021
// This script has been auto-generated by TheRealSolly | Solomon Blount.
// The following contents is all directly imported from DAZ's Documentation Website and inherits the license set, which is the following...
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Attribution 3.0 Unported (CC BY 3.0) | https://creativecommons.org/licenses/by/3.0/ | (C) Daz Productions, Inc 224 S 200 W, Salt Lake City, UT 84101
// I DO NOT WORK FOR DAZ PRODUCTIONS INC AND THIS SCRIPT WAS NOT SUPPORTED BY OR ENDORSED BY ANYONE AT DAZ PRODUCTIONS INC.
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// If I made your life wonderful, if you're feeling generious enough to donate to make me feel wonderful, you can do so by going here:
//                                                         https://www.buymeacoffee.com/therealsoll
// Anyway, here are some things you need to know.
//                                                   THIS VERSION ALSO DOES NOT INCLUDE ECMASCRIPT CLASSES
//                                     THIS FILE PURPOSEFULLY HAS ERRORS SO THE INTELLISENSE CAN ASSIST YOU WITH YOUR CODE.
//                                             THIS HAS ONLY BEEN TESTED ON VISUAL STUDIO CODE VERSION 1.55.0.
//
// To make .dsa scripts use the JS/TS interpreter, create a new file with the .dsa extension, on the lower-right of VSCode click on the file type and select "Configure file assocations for .dsa" and then select in JavaScript.
// JzSense now includes v3 Documentation to fill in missing classes from v4 documentation.
// Do not select TS as the interpreted language. Use JS.
// There will be more adjustments to this script but i'm in school...so yeah.
// To check and see if there are any updates, please go here: https://github.com/siblount/JzSense
// Happy Coding!
/**
 * @classdesc A Dz3DViewport is a widget for displaying three dimensional objects using OpenGL and interacting with those objects using DzViewTool subclasses.
See Also:
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/3dviewport_dz} */
class Dz3DViewport extends QWidget {
	/**
 * @description Holds whether or not the aspect frame is drawn in the viewport.
	*/
	aspectOn:Boolean;
	/**
 * @description Holds whether or not the origin axes are drawn in the viewport.
	*/
	axesOn:Boolean;
	/**
 * @description Holds the background color of the viewport
	*/
	background:Color;
	/**
 * @description Holds the style of the floor that is drawn in the viewport.
	*/
	floorStyle:FloorStyle;
	/**
 * @description Holds the shading style of the viewport.
	*/
	shadeStyle:ShadeStyle;
	/**
 * @description Holds whether or not the Pose Tool is shown.
	*/
	showPoseTool:Boolean;
	/**
 * @description Holds whether or not the thirds guide is drawn in the viewport.
	*/
	thirdsGuideOn:Boolean;
	/**
 * @description Holds the mode for the viewport display of toolbars/camera cube
	*/
	toolBarMode:ToolBarMode;
	/**
 * @description ENUMERATOR: No floor is drawn.
*/
	
	static NoFloor;
	/**
 * @description ENUMERATOR: A grid floor is drawn.
*/
	
	static WireFloor;
	/**
 * @description ENUMERATOR: A solid floor is drawn. (not currently implemented)
*/
	
	static SolidFloor;
	/**
 * @description ENUMERATOR: Draws unlit wire-frame bounding boxes.
*/
	
	static WireBox;
	/**
 * @description ENUMERATOR: Draws smooth-shaded bounding boxes.
*/
	
	static SolidBox;
	/**
 * @description ENUMERATOR: Draws unlit wire-frames.
*/
	
	static Wireframe;
	/**
 * @description ENUMERATOR: Draws lit wire-frames.
*/
	
	static LitWireframe;
	/**
 * @description ENUMERATOR: Draws unlit wire-frames, front geometry facing only.
*/
	
	static HiddenLine;
	/**
 * @description ENUMERATOR: Draws lit smooth shaded objects with wireframes imposed.
*/
	
	static WireShaded;
	/**
 * @description ENUMERATOR: Draws lit smooth shaded objects.
*/
	
	static SmoothShaded;
	/**
 * @description ENUMERATOR: Draws lit smooth shaded objects with any texture/transparency maps applied and wireframes imposed.
*/
	
	static WireTextured;
	/**
 * @description ENUMERATOR: Draws lit smooth shaded objects with any texture/transparency maps applied.
*/
	
	static Textured;
	/**
 * @description ENUMERATOR: A mode that docks the toolbar along the top edge of the viewport.
*/
	
	static DockedToolBar;
	/**
 * @description ENUMERATOR: A mode that uses a Camera Cube HUD in the top right corner of the viewport.
*/
	
	static CameraCubeHUD;
	/**
 * @description Aim the viewport's active camera at the selected nodes in the scene. If the scene does not have any select nodes, all nodes in the scene are aimed. Note that the viewport's active camera is excluded, as are any nodes that are parented to the viewport's active camera.
*/
	aimCamera():void {
	
	};
	/**
 * @description Aim the viewport's active camera at the given box. If the box is invalid, this function does nothing.
 * @param box - The box to aim the viewport's active camera at.
*/
	aimCameraAtBox(box:DzBox3):void {
	
	};
	/**
 * @description Aim the viewport's active camera at the selected nodes in the scene. If the scene does not have any select nodes, all nodes in the scene are aimed. Note that the viewport's active camera is excluded, as are any nodes that are parented to the viewport's active camera.
*/
	aimCameraAtPrimaryNode():void {
	
	};
	/**
 * @description Captures the current contents from the OpenGL frame buffer as an image.
 * @returns A snap shot of the OpenGL frame buffer.
*/
	captureImage():Image {
	
	};
	/**
 * @returns The current dimensions of the viewport.
 * @since 4.6.4.100
*/
	currentDimensions():DzInt2 {
	
	};
	/**
 * @description Stops any camera operations that are currently active.
 * @since 4.11.0.161
*/
	endNavigation():void {
	
	};
	/**
 * @description Frame the viewport's active camera at the selected nodes in the scene. If the scene does not have any select nodes, all nodes in the scene are framed. Note that the viewport's active camera is excluded, as are any nodes that are parented to the viewport's active camera.
*/
	frameCamera():void {
	
	};
	/**
 * @description Frame the viewport's active camera at the given box. If the box is invalid this function does nothing.
 * @param box - The box to frame the viewport's active camera on.
*/
	frameCameraOnBox(box:DzBox3):void {
	
	};
	/**
 * @description Frame the viewport's active camera at the selected nodes in the scene. If the scene does not have any select nodes, all nodes in the scene are framed. Note that the viewport's active camera is excluded, as are any nodes that are parented to the viewport's active camera.
*/
	frameCameraOnSelectedNodes():void {
	
	};
	/**
 * @returns A rect describing the aspect frame for this viewport.
*/
	getAspectFrameRect():Rect {
	
	};
	/**
 * @returns The currently active camera for this viewport.
*/
	getCamera():DzCamera {
	
	};
	/**
 * @returns The persistent Camera Cube view tool for this viewport; displayed when the toolBarMode is set to CameraCubeHUD.
 * @since 4.9.3.107
*/
	getCameraCube():DzCameracube {
	
	};
	/**
 * @returns The current drawstyle for the viewport.
 * @since 4.14.1.27
*/
	getDrawStyle():DzDrawStyle {
	
	};
	/**
 * @returns The description of the DrawStyle (if the current DrawStyle is a DzUserDrawStyle), otherwise an empty string.
 * @since 4.9.2.22
*/
	getUserDrawStyle():String {
	
	};
	/**
 * @returns This 3D view's parent viewport.
*/
	getViewport():DzViewport {
	
	};
	/**
 * @description Performs a hardware assisted OpenGL render in this viewport with the given settings.
 * @returns true if the scene was rendered successfully, otherwise false.
 * @param handler - The render handler for the rendering operation.
*/
	hardwareRender(handler:DzRenderHandler):Boolean {
	
	};
	/**
 * @description Performs a hardware assisted OpenGL render in this viewport with the given settings.
 * @returns true if the scene was rendered successfully, otherwise false.
 * @since 4.9.3.57
 * @param handler - The render handler for the rendering operation.
 * @param options - The render options to use. (since 4.9.3.61)
 * @param camera - The camera to render through, set to null to render from current view. (since 4.9.3.61)
 * @param style - The draw style to use, null to use standard render draw style. (since 4.9.3.61)
*/
	hardwareRenderWithOptions(handler:DzRenderHandler, options:DzRenderOptions, camera:DzCamera, style:DzDrawStyle):Boolean {
	
	};
	/**
 * @returns true if this viewport supports rendering via OpenGL, otherwise false.
*/
	isHardwareRenderable():Boolean {
	
	};
	/**
 * @returns true if a mouse operation is active, otherwise false.
 * @since 4.11.0.161
*/
	isNavigating():Boolean {
	
	};
	/**
 * @description Performs a facet picking operation on the scene through this viewport.
 * @returns The index of the facet that was hit (if any), otherwise -1.
 * @param pnt - The pixel coordinates of the point in the viewport to pick on.
*/
	pickOnFacet(pnt:Point):Number {
	
	};
	/**
 * @description Performs a gizmo picking operation through this viewport. View tools (see DzViewTool) can draw a 'gizmo' in the viewport for the user to interact with. The tool can assign different parts of the gizmo to specific indices, so as to tell what part of the gizmo was clicked by the user.
 * @returns The gizmo index that was hit (if any), otherwise 0.
 * @param pnt - The point in the viewport to pick on.
*/
	pickOnGizmo(pnt:Point):Number {
	
	};
	/**
 * @description Performs a material picking operation on the scene through this viewport. This example shows the mousePress() implementation from a view tool (see DzViewTool) that sets the color of any material that the user clicks in the viewport.
 * @returns The material that was hit (if any), otherwise null.
 * @param pnt - The pixel coordinates of the point in the viewport to pick on.
*/
	pickOnMaterial(pnt:Point):DzMaterial {
	
	};
	/**
 * @description Performs a node picking operation on the scene through this viewport.
 * @returns The node that was hit (if any), otherwise null.
 * @param pnt - The pixel coordinates of the point in the viewport to pick on.
*/
	pickOnNode(pnt:Point):DzNode {
	
	};
	/**
 * @description Performs a node picking operation on the scene through this viewport.
 * @returns The node that was hit (if any), otherwise null.
 * @param pnt - The pixel coordinates of the point in the viewport to pick on.
 * @param useSelectionMaps - If true, selection maps are used to perform the picking operation.
*/
	pickOnNode(pnt:Point, useSelectionMaps:Boolean):DzNode {
	
	};
	/**
 * @description Performs a quick render of the scene suitable for a thumbnail image.
 * @returns true if the scene was successfully rendered, otherwise false.
 * @param handler - The render handler for the rendering operation.
*/
	renderThumbnail(handler:DzRenderHandler):Boolean {
	
	};
	/**
 * @description Resets the viewport's active camera to its default state.
*/
	resetCamera():void {
	
	};
	/**
 * @description Set the camera for the view. If a matching camera is not found, this function does nothing.
 * @param cam - The name (not label) of a view camera, or a scene camera.
*/
	setCamera(cam:String):void {
	
	};
	/**
 * @description Set the camera for the view. The camera passed in must be a camera in the scene, or one of the view cameras from DzViewportMgr.
 * @param cam - The camera to use for viewing in the viewport.
*/
	setCamera(cam:DzCamera):void {
	
	};
	/**
 * @description Set the draw style for the viewport. DzDrawStyle objects are ref counted, so the viewport refs the style when it is set, and unrefs it when it is no longer using the style. The draw style will then delete itself when its ref count reaches zero.
 * @param style - The new draw style for the viewport.
*/
	setDrawStyle(style:DzDrawStyle):void {
	
	};
	/**
 * @description Attempts to set the DrawStyle for the viewport.
 * @returns true if a DzUserDrawStyle that matches the description could be found, otherwise false.
 * @since 4.9.2.22
 * @param description - The description of the DzUserDrawStyle to set.
*/
	setUserDrawStyle(description:String):Boolean {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when a new active camera has been changed for this viewport.
 * @signature `"activeCameraChanged(DzCamera*)"`
 * @event
*/
	activeCameraChanged(cam:DzCamera):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the projection of the active camera of this viewport has changed.
 * @signature `"activeCameraProjectionChanged()"`
 * @event
*/
	activeCameraProjectionChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the transform of the active camera of this viewport has changed.
 * @signature `"activeCameraTransformChanged()"`
 * @event
*/
	activeCameraTransformChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the draw state for the aspect frame changes.
 * @signature `"aspectOnChanged(bool)"`
 * @event
*/
	aspectOnChanged(onOff:Boolean):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the draw state for the origin axes changes.
 * @signature `"axesOnChanged(bool)"`
 * @event
*/
	axesOnChanged(onOff:Boolean):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the background color of the viewport changes.
 * @signature `"backgroundColorChanged(const QColor&)"`
 * @event
*/
	backgroundColorChanged(color:Color):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the viewport is about to display a context menu. Other objects can connect to this signal to add custom items to the menu that is displayed to the user. Only connect to this signal if you only want to affect this particular viewport - otherwise connect to DzViewportMgr.contextMenuAboutToShow().
 * @signature `"contextMenuAboutToShow(DzMenu*,QPoint)"`
 * @event
*/
	contextMenuAboutToShow(menu:DzMenu, pos:Point):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the current dimensions of this viewport has changed.
 * @signature `"currentDimensionsChanged()"`
 * @event
*/
	currentDimensionsChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the dimensions of this viewport has changed.
 * @signature `"dimensionsChanged()"`
 * @event
*/
	dimensionsChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the draw style of the viewport has changed.
 * @signature `"drawStyleChanged(DzDrawStyle*)"`
 * @event
*/
	drawStyleChanged(style:DzDrawStyle):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the floor style of the viewport changes.
 * @signature `"floorStyleChanged(FloorStyle)"`
 * @event
*/
	floorStyleChanged(style:FloorStyle):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the draw state for the thirds guide changes.
 * @signature `"thirdsGuideOnChanged(bool)"`
 * @event
*/
	thirdsGuideOnChanged(onOff:Boolean):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the view tool bar is docked or undocked.
 * @signature `"toolBarDocked(bool)"`
 * @event
*/
	toolBarDocked(onOff:Boolean):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the toolbar mode has been changed for this viewport.
 * @signature `"toolModeChanged(ToolBarMode)"`
 * @event
*/
	toolModeChanged(mode:ToolBarMode):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the area this viewport displays has changed.
 * @signature `"viewChanged()"`
 * @event
*/
	viewChanged():void {
	
	};

}
/**
 * @classdesc This render handler is a DzImageRenderHandler that is the size of the aspect frame for the given viewport, and paints all data passed to it over the current view.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/3dviewrenderhandler_dz} */
class Dz3DViewRenderHandler extends DzImageRenderHandler {
	/**
 * @description Constructor. Creates a render handler that will render to the given viewport.
 * @param view - The viewport to render in.
 * @param startTime - The starting scene time for the render.
 * @param filename - The name of the file to save the render to.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @returns The offset for this handler, from the left of the view
 * @since 4.6.4.18
*/
	getLeftOffset():Number {
	
	};
	/**
 * @returns The offset for this handler, from the top of the view
 * @since 4.6.4.18
*/
	getTopOffset():Number {
	
	};
	/**
 * @returns The render view for this handler
 * @since 4.6.4.18
*/
	getView():DzRenderview {
	
	};
	/**
 * @returns The viewport for this handler
 * @since 4.6.4.18
*/
	getViewport():DzViewport {
	
	};

}
/**
 * @classdesc TODO:
Add detailed description.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/abstractassetcontainer_dz} */
class DzAbstractAssetContainer extends DzRefCountedItem, QObject {
	/**
 * @description Holds whether or not sub-containers can be copied. (Read Only)
	*/
	canCopyContainers:Boolean;
	/**
 * @description Holds whether or not this container can be deleted. (Read Only)
	*/
	canDeleteContainer:Boolean;
	/**
 * @description Holds whether or not sub-containers can be added to this container. (Read Only)
	*/
	canInsertSubContainer:Boolean;
	/**
 * @description Holds whether or not the assets in this container can be modified. (Read Only)
	*/
	canModifyAssets:Boolean;
	/**
 * @description Holds whether or not this container can be renamed. (Read Only)
	*/
	canRenameContainer:Boolean;
	/**
 * @description Holds the id for this container. (Read Only)
	*/
	id:Object;
	/**
 * @description Holds whether or not removing an asset from this container will result in that asset's file being deleted. (Read Only)
	*/
	removeAssetCausesDelete:Boolean;
	/**
 * @description Holds the tooltip for this container. (Read Only)
	*/
	tooltip:String;
	/**
 * @description Holds the use count for this container.
	*/
	useCount:Number;
	/**
 * @description Attempts to clear out the assets that can be rebuilt.
 * @returns The current implementation does nothing and always returns false
*/
	clearRebuildableAssets():Boolean {
	
	};
	/**
 * @description Attempts to create a new child container.
 * @returns true if the container was successfully created, otherwise false.
 * @param containerName - The name of the new child container.
*/
	createNewChildContainer(containerName:String):Boolean {
	
	};
	/**
 * @returns The asset at the specified index (if valid), otherwise null.
 * @param index - The index of the asset to be returned.
*/
	getAsset(index:Number):DzAsset {
	
	};
	/**
 * @returns A list of assets for this container.
*/
	getAssets():Array {
	
	};
	/**
 * @returns The child container at the given index (if valid), otherwise null.
 * @param index - The index of the child container to get.
*/
	getChildContainer(index:Number):DzAbstractAssetContainer {
	
	};
	/**
 * @returns A list of child containers for this container.
*/
	getChildContainers():Array {
	
	};
	/**
 * @returns The size of the icon associated with child containers.
*/
	getChildIconSize():Size {
	
	};
	/**
 * @returns The name of this container.
*/
	getContainerName():String {
	
	};
	/**
 * @returns The ID path for this container.
*/
	getIDPath():Array {
	
	};
	/**
 * @returns The number of assets associated with this container.
*/
	getNumAssets():Number {
	
	};
	/**
 * @returns The number of child containers this container has.
*/
	getNumChildContainers():Number {
	
	};
	/**
 * @returns The owner of this container.
*/
	getOwner():DzAbstractAssetContainer {
	
	};
	/**
 * @returns The small icon size of the icon associated with child containers.
*/
	getSmallChildIconSize():Size {
	
	};
	/**
 * @returns The support file for this asset container. Base implementation returns an empty string.
*/
	getSupportFile():String {
	
	};
	/**
 * @returns true if this container has the given asset, otherwise false.
 * @param asset - The asset to check for.
*/
	hasAsset(asset:DzAsset):Boolean {
	
	};
	/**
 * @returns true if thic container has child containers, otherwise false.
*/
	hasChildContainers():Boolean {
	
	};
	/**
 * @description Boolean DzAbstractAssetContainer.ingoreAssetConflicts()
 * @returns true if asset conflicts in this container will be ignored, otherwise false.
*/
	ignoreAssetConflicts():Boolean {
	
	};
	/**
 * @description Initializes this containers child containers.
 * @returns true if the containers were successfully initialized, otherwise false.
*/
	initChildren():Boolean {
	
	};
	/**
 * @description Attempts to insert the given asset into this container.
 * @returns true if the asset was successfully inserted, otherwise false.
 * @param asset - The asset to add to this container.
*/
	insertAsset(asset:DzAsset):Boolean {
	
	};
	/**
 * @description Attempts to insert container as a child of this container.
 * @returns true if the container was successfully inserted, otherwise false.
 * @param container - The container to insert.
*/
	insertChildContainer(container:DzAbstractAssetContainer):Boolean {
	
	};
	/**
 * @returns true if this container is based on a filesystem, otherwise false.
*/
	isFileSystemBased():Boolean {
	
	};
	/**
 * @description Attempts to move the given container from its parent.
 * @returns true if the container was successfully moved, otherwise false.
 * @param child - The container to move from its parent.
*/
	moveFromParent(child:DzAbstractAssetContainer):Boolean {
	
	};
	/**
 * @description Attempts to remove the given asset from this container.
 * @returns true if the asset was successfully removed, otherwise false.
 * @param asset - The asset to remove.
*/
	removeAsset(asset:DzAsset):Boolean {
	
	};
	/**
 * @returns true if assets moved to toContainer should be removed from this container, otherwise false.
 * @param toContainer - The container to check.
*/
	removeAssetOnCut(toContainer:DzAbstractAssetContainer):Boolean {
	
	};
	/**
 * @description Attempts to remove the given container.
 * @returns true if the container was successfully removed, otherwise false.
 * @param container - The container to remove.
*/
	removeChildContainer(container:DzAbstractAssetContainer):Boolean {
	
	};
	/**
 * @description Attempts to rename this container.
 * @returns true if the rename was successful, otherwise false.
 * @param name - The new name for this container.
*/
	rename(name:String):Boolean {
	
	};
	/**
 * @description Attempts to rename the given asset.
 * @returns true if the asset was successfully renamed, otherwise false.
 * @param asset - The asset to rename.
 * @param newAssetName - The new name for the asset.
*/
	renameAsset(asset:DzAsset, newAssetName:String):Boolean {
	
	};
	/**
 * @description Attempts to rename the given child container.
 * @returns true if the container was successfully renamed, otherwise false.
 * @param container - The container to rename.
 * @param name - The new name for the container.
*/
	renameChildContainer(container:DzAbstractAssetContainer, name:String):Boolean {
	
	};
	/**
 * @description Sets the name for this container.
 * @param name - The new name for this container.
*/
	setContainerName(name:String):void {
	
	};
	/**
 * @description Attemps to update this container.
 * @returns true if the update was successful, otherwise false.
*/
	update():Boolean {
	
	};
	/**
 * @description Attempts to update the assets associated with this container.
 * @returns true if the update was successful, otherwise false.
*/
	updateAssets():Boolean {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted the icon for an asset has changed.
 * @signature `"assetIconChanged(DzAsset*)"`
 * @event
*/
	assetIconChanged(asset:DzAsset):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when an asset has been renamed.
 * @signature `"assetRenamed(DzAsset*,int)"`
 * @event
*/
	assetRenamed(asset:DzAsset, index:Number):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted before assets are added.
 * @signature `"beginAssetAdd(int,int)"`
 * @event
*/
	beginAssetAdd(start:Number, end:Number):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted before assets are removed.
 * @signature `"beginAssetRemove(int,int)"`
 * @event
*/
	beginAssetRemove(start:Number, end:Number):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted before a child container is added.
 * @signature `"beginChildContainerAdd(DzAbstractAssetContainer*,int,int)"`
 * @event
*/
	beginChildContainerAdd(container:DzAbstractAssetContainer, start:Number, end:Number):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted before a child container is removed.
 * @signature `"beginChildContainerRemove(DzAbstractAssetContainer*,int,int)"`
 * @event
*/
	beginChildContainerRemove(container:DzAbstractAssetContainer, start:Number, end:Number):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted just before a child container is removed.
 * @signature `"childContainerAboutToBeRemoved(DzAbstractAssetContainerPtr)"`
 * @event
*/
	childContainerAboutToBeRemoved(childContainer:DzAbstractAssetContainer):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted after a child container has been removed.
 * @signature `"childContainerRemoved(DzAbstractAssetContainerPtr)"`
 * @event
*/
	childContainerRemoved(childContainer:DzAbstractAssetContainer):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted after assets have been added.
 * @signature `"endAssetAdd()"`
 * @event
*/
	endAssetAdd():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted after assets have been removed.
 * @signature `"endAssetRemove()"`
 * @event
*/
	endAssetRemove():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted after a child container has been added.
 * @signature `"endChildContainerAdd()"`
 * @event
*/
	endChildContainerAdd():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted after a child container has been removed.
 * @signature `"endChildContainerRemove()"`
 * @event
*/
	endChildContainerRemove():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted after the icon for the container has changed.
 * @signature `"iconChanged(DzAbstractAssetContainer*)"`
 * @event
*/
	iconChanged(container:DzAbstractAssetContainer):void {
	
	};

}
/**
 * @classdesc TODO:
Add detailed description.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/abstractnodeeditorpane_dz} */
class DzAbstractNodeEditorPane extends DzPane {
	/**
 * @returns true if each selected node is displayed separately in the navigation list, otherwise false.
*/
	displaySeparate():Boolean {
	
	};
	/**
 * @returns The Presets page widget for this pane.
*/
	getContentTab():DzContenttab {
	
	};
	/**
 * @returns The guide page displayed for the editor page when no property group or property is selected.
*/
	getEditorGuidePage():DzGuidePage {
	
	};
	/**
 * @returns The information divider for this pane.
*/
	getInfoDivider():DzInfoDivider {
	
	};
	/**
 * @returns The Editor page widget for this pane.
*/
	getNodeEditor():DzPropertysidenavhierarchy {
	
	};
	/**
 * @returns The guide page displayed for the presets page when no category is selected.
*/
	getPresetGuidePage():DzGuidePage {
	
	};
	/**
 * @description Sets the current page to the index specified by which; 0 based.
*/
	setCurrentTab(which:Number):void {
	
	};
	/**
 * @description Sets whether or not hidden properties are displayed in the pane.
 * @param onOff - If true, hidden properties will be visible in the parameters list, otherwise hidden properties will not be displayed in the parameters list.
*/
	showHidden(onOff:Boolean):void {
	
	};
	/**
 * @returns true if hidden properties are shown in the parameters list, false if hidden parameters are not being displayed in the parameters list.
*/
	showingHidden():Boolean {
	
	};
	/**
 * @description Toggle between whether each selected node is displayed separately in the navigation list or not.
*/
	toggleDisplaySeparate():void {
	
	};
	/**
 * @description Toggle between whether hidden properties are shown in the list or not.
*/
	toggleShowHidden():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the user hovers the cursor over an asset on the Presets page
 * @signature `"assetHoverChanged(const DzAssetPtr&)"`
 * @event
*/
	assetHoverChanged(asset:DzAsset):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the current page changes
 * @signature `"currentTabChanged(int)"`
 * @event
*/
	currentTabChanged(which:Number):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the option to show hidden properties changes
 * @signature `"showingHiddenChanged(bool)"`
 * @event
*/
	showingHiddenChanged(onOff:Boolean):void {
	
	};

}
/**
 * @classdesc This class represents an action that the user can perform in the interface via pressing a hot key or clicking on a menu/toolbar item.
All action items are added to a list of interface actions which the user can customize. The user can specify their own keyboard shortcut or 'Hot Key' for the action, and any action item can be moved into a custom toolbar, as well as appear in the DAZ Studio main menu.
See Also:
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/action_dz} */
class DzAction extends QObject {
	/**
 * @description The action group that this action belongs to (Read Only)
	*/
	actionGroup:String;
	/**
 * @description TODO:
Add description.
	*/
	autoRepeat:Boolean;
	/**
 * @description TODO:
Add description.
	*/
	checkable:Boolean;
	/**
 * @description TODO:
Add description.
	*/
	checked:Boolean;
	/**
 * @description The primary menu that this action is added to by default, if the user has not chosen a custom location (Read Only)
	*/
	defaultMenu:String;
	/**
 * @description The menus that this action is added to by default, if the user has not chosen a custom location (Read Only).
	*/
	defaultMenus:Array;
	/**
 * @description The default keyboard shortcut (hotkey) that is associated with this action (Read Only before 4.6.4.48)
	*/
	defaultShortcut:String;
	/**
 * @description The primary toolBar that this action is added to by default, if the user has not chosen a custom location (Read Only)
	*/
	defaultToolBar:String;
	/**
 * @description The toolBars that this action is added to by default, if the user has not chosen a custom location (Read Only).
	*/
	defaultToolBars:Array;
	/**
 * @description The user-readable description of the action.
	*/
	description:String;
	/**
 * @description Emitted when an action is enabled or disabled. onOff is true if the action was enabled, false if it was disabled.
	*/
	enabled:Boolean;
	/**
 * @description The image file that is used as the icon for this action (if any).
	*/
	iconFile:String;
	/**
 * @description TODO:
Add description.
	*/
	iconText:String;
	/**
 * @description TODO:
Add description.
	*/
	iconVisibleInMenu:Boolean;
	/**
 * @description TODO:
Add description.
	*/
	shortcut:String;
	/**
 * @description TODO:
Add description.
	*/
	statusTip:String;
	/**
 * @description The standard pixmap that is used as the icon for this action (if any).
	*/
	styleIcon:Number;
	/**
 * @description TODO:
Add description.
	*/
	text:String;
	/**
 * @description TODO:
Add description.
	*/
	toolTip:String;
	/**
 * @description TODO:
Add description.
	*/
	visible:Boolean;
	/**
 * @description TODO:
Add description.
	*/
	whatsThis:String;
	/**
 * @description Activates the action in the 'Hover' state programatically.
*/
	hover():void {
	
	};
	/**
 * @description Sets the action's toggle state.
 * @param onOff - If true, the action's toggle state is set on, otherwise, its toggle state is set off.
*/
	setChecked(onOff:Boolean):void {
	
	};
	/**
 * @description Disables/Enables the action in the interface.
 * @param onOff - If true, the action will be 'grayed out' in menus, and the user will be unable to activate it. If false, the action will be enabled.
*/
	setDisabled(onOff:Boolean):void {
	
	};
	/**
 * @description Enables/Disables the action in the interface.
 * @param onOff - If true, the action will be displayed normally in menus, and the user will be able to activate it. If false, the action will be disabled.
*/
	setEnabled(onOff:Boolean):void {
	
	};
	/**
 * @description The same as calling setChecked( !onOff ). This method is provided for convenience when connecting this slot to a signal that emits a value that is the inverse of the desired onOff state.
 * @param onOff - If true, the action's toggle state is set off, otherwise, its toggle state is set on.
*/
	setOff(onOff:Boolean):void {
	
	};
	/**
 * @description Sets whether the action is visible in the interface.
 * @param onOff - If true, the action will be displayed in menus and toolbars that it has been added to. If false, the action will not be displayed in any menus or toolbars.
*/
	setVisible(onOff:Boolean):void {
	
	};
	/**
 * @description Toggles the action programatically.
*/
	toggle():void {
	
	};
	/**
 * @description Activates the action programatically.
*/
	trigger():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when an action has changed.
 * @signature `"changed()"`
 * @event
*/
	changed():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description TODO: Add Description
 * @signature `TODO: Add Description`
 * @event
*/
	enabled(onOff:Boolean):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when an action is highlighted by the user; for example, when the user pauses with the cursor over a menu option, toolbar button, or presses an action's shortcut key combination.
 * @signature `"hovered()"`
 * @event
*/
	hovered():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted immediately before executeAction() is called.
 * @signature `"preExecute()"`
 * @event
*/
	preExecute():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when a toggle action changes state. checked is the new action state, true for on, false for off.
 * @signature `"toggled(bool)"`
 * @event
*/
	toggled(checked:Boolean):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when an action is activated by the user; for example, when the user clicks a menu option, toolbar button, or presses an action's shortcut key combination, or when trigger() was called. Notably, it is not emitted when setChecked() or toggle() is called. checked is true if the action is checked, or false if the action is unchecked.
 * @signature `"triggered(bool)"`
 * @event
*/
	triggered(checked:Boolean):void {
	
	};

}
/**
 * @classdesc See Also:
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/actionmenu_dz} */
class DzActionMenu extends QObject {
	/**
 * @description Holds whether or not the menu is considered to be created by the application (true) or created by the user (false).
	*/
	isDefault:Boolean;
	/**
 * @description Holds the type of the menu (Read Only until 4.6.0.74)
	*/
	menuType:Number;
	/**
 * @description ENUMERATOR: A menu where each DzActionMenuItem is explicitly defined.
*/
	
	static CustomMenu;
	/**
 * @description ENUMERATOR: A menu where each DzActionMenuItem is implicitly defined; built dynamically from paneaction_dz subclasses.
*/
	
	static PaneMenu;
	/**
 * @description ENUMERATOR: A menu where each DzActionMenuItem is implicitly defined; built dynamically from viewtoolaction_dz subclasses.
*/
	
	static ViewToolMenu;
	/**
 * @description ENUMERATOR: A menu where each DzActionMenuItem is implicitly defined; built dynamically from assetiofilteraction_dz and savefilteraction_dz subclasses.
*/
	
	static SaveAsMenu;
	/**
 * @description ENUMERATOR: A menu where each DzActionMenuItem is implicitly defined; built dynamically from the return value of DzContentMgr.getRecentFileList(). Since: 4.6.0.44
*/
	
	static OpenRecentMenu;
	/**
 * @description Removes all items from the menu.
*/
	clear():void {
	
	};
	/**
 * @description Displays the menu to the user.
*/
	exec():void {
	
	};
	/**
 * @description Displays the menu to the user at the given position.
 * @param pos - The global window coordinates at which to display the popup menu.
*/
	exec(pos:Point):void {
	
	};
	/**
 * @returns The submenu at the given path; if a menu along the path does not already exist, it is created.
 * @since 4.11.0.164
 * @param path - The slash ('/') delimited path of the submenu to find or create.
 * @param asDefault - If true, any menus that are created will be marked as a default menu; created/placed by the application. If false (default), any menus created will be marked as a custom menu; created/placed by the user.
*/
	findOrCreateSubMenu(path:String, asDefault:Boolean):DzActionMenu {
	
	};
	/**
 * @returns The submenu with the given path (if any), otherwise null.
 * @param path - The slash ('/') delimited path of the submenu to find.
*/
	findSubMenu(path:String):DzActionMenu {
	
	};
	/**
 * @returns The menu item at the given index (if valid), otherwise null.
 * @param i - The index of the item to return.
*/
	getItem(i:Number):DzActionMenuItem {
	
	};
	/**
 * @returns A list of DzActionMenuItem in this menu.
*/
	getItemList():Array {
	
	};
	/**
 * @returns The number of items in the menu.
*/
	getNumItems():Number {
	
	};
	/**
 * @returns The item in a parent menu (if any) that causes this menu to be displayed, otherwise null.
 * @since 4.11.0.164
*/
	getParentItem():DzActionMenuItem {
	
	};
	/**
 * @returns The slash ('/') delimited path of this action menu (if any), otherwise an empty string.
 * @since 4.11.0.205
*/
	getPath():String {
	
	};
	/**
 * @returns true if there are items in this menu, otherwise false.
*/
	hasItems():Boolean {
	
	};
	/**
 * @description Inserts the given action into the menu at the given location.
 * @param identifier - The name of the DzAction subclass to insert into the menu.
 * @param i - The index at which to insert the item, if the index is invalid (the default) the item is appended to the end of the menu.
*/
	insertAction(identifier:String, i:Number):void {
	
	};
	/**
 * @description Inserts the given custom action into the menu at the given location.
 * @param guid - The globally unique identifier for the custom action to insert into the menu.
 * @param i - The index at which to insert the item, if the index is invalid (the default) the item is appended to the end of the menu.
*/
	insertCustomAction(guid:String, i:Number):void {
	
	};
	/**
 * @description Inserts the given file merge action into the menu at the given location.
 * @since 4.6.0.76
 * @param fileName - The path of the file to insert into the menu.
 * @param label - The label to display within the interface; defaults to fileName if not specified.
 * @param i - The index at which to insert the item, if the index is invalid (the default) the item is appended to the end of the menu.
*/
	insertFileMergeAction(fileName:String, label:String, i:Number):void {
	
	};
	/**
 * @description Inserts the given file open action into the menu at the given location.
 * @since 4.6.0.76
 * @param fileName - The path of the file to insert into the menu.
 * @param label - The label to display within the interface; defaults to fileName if not specified
 * @param i - The index at which to insert the item, if the index is invalid (the default) the item is appended to the end of the menu.
*/
	insertFileOpenAction(fileName:String, label:String, i:Number):void {
	
	};
	/**
 * @description Inserts the given item into the menu at the given location.
 * @param item - The item to insert into the menu.
 * @param i - The index at which to insert the item, if the index is invalid (the default) the item is appended to the end of the menu.
*/
	insertItem(item:DzActionMenuItem, i:Number):void {
	
	};
	/**
 * @description Deprecated
*/
	insertMenu(label:String, menu:DzActionMenu, i:Number):DzActionMenu {
	
	};
	/**
 * @description Inserts a separator into the menu at the given location.
 * @param i - The index at which to insert the item, if the index is invalid (the default) the item is appended to the end of the menu.
*/
	insertSeparator(i:Number):void {
	
	};
	/**
 * @description Inserts the given menu into the menu at the given location as a submenu.
 * @since 4.11.0.164
 * @param label - The label to display in this menu for the submenu item; the "/" character cannot be used.
 * @param menu - The submenu to insert into this menu; if null, a new menu is created at the given index.
 * @param asDefault - If true, the menu is inserted as a default menu. If false (default) the menu is inserted as a custom menu.
 * @param i - The index at which to insert the item, if the index is invalid (the default) the item is appended to the end of the menu.
*/
	insertSubMenu(label:String, menu:DzActionMenu, asDefault:Boolean, i:Number):DzActionMenu {
	
	};
	/**
 * @description Remove the given item from the menu.
 * @param item - The item to remove from the menu.
*/
	removeItem(item:DzActionMenuItem):void {
	
	};
	/**
 * @description Removes any duplicate separators from the menu by replacing two or more adjacent separators with a single separator.
*/
	simplifySeparators():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the default state of this menu has been changed.
 * @signature `"defaultChanged(bool)"`
 * @event
*/
	defaultChanged(yesNo:Boolean):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when items are added to or removed from this menu.
 * @signature `"itemListChanged()"`
 * @event
*/
	itemListChanged():void {
	
	};

}
/**
 * @classdesc Action Menu Items are registered with a DzActionMenu and are available to access via methods on that class.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/actionmenuitem_dz} */
class DzActionMenuItem extends QObject {
	/**
 * @description Holds the identifier for the Action (classname), CustomAction (GUID), FileOpenAction or FileMergeAction (file path) to perform.
	*/
	action:String;
	/**
 * @description Holds whether or not the menu item is considered to be placed by the application (true) or placed by the user (false).
	*/
	isDefault:Boolean;
	/**
 * @description Holds the label displayed for the item.
	*/
	label:String;
	/**
 * @description Holds the type of the menu item (Read Only)
	*/
	type:Type;
	/**
 * @description ENUMERATOR: A menu separator (i.e., horizontal divider).
*/
	
	static Separator;
	/**
 * @description ENUMERATOR: A menu item that activates a DzAction object.
*/
	
	static Action;
	/**
 * @description ENUMERATOR: A menu item that activates a custom action. See Also: DzActionMgr - for more about custom actions.
*/
	
	static CustomAction;
	/**
 * @description ENUMERATOR: A menu item that opens a submenu.
*/
	
	static SubMenu;
	/**
 * @description ENUMERATOR: A menu item that opens a file, replacing the contents of the current scene. See Also: DzContentMgr.openFile() - for more about opening a file.
*/
	
	static FileOpenAction;
	/**
 * @description ENUMERATOR: A menu item that merges a file with the current scene. See Also: DzContentMgr.openFile() - for more about merging a file.
*/
	
	static FileMergeAction;
	/**
 * @returns The menu that this item is in.
 * @since 4.11.0.164
*/
	getParentMenu():DzActionMenu {
	
	};
	/**
 * @returns The submenu that is displayed by this menu item (if any), otherwise null.
*/
	getSubMenu():DzActionMenu {
	
	};
	/**
 * @description Causes the file for a FileOpenAction or FileMergeAction item to load.
 * @since 4.6.0.44
*/
	loadFile():void {
	
	};
	/**
 * @description Sets the menu that is displayed as the submenu when this menu item is activated. This call has no effect unless the type of this item is SubMenu.
 * @param menu - The menu that is displayed as a submenu when this menu item is activated. The menu item takes ownership of the menu - the menu will be deleted when this item is destroyed.
*/
	setSubMenu(menu:DzActionMenu):void {
	
	};

}
/**
 * @classdesc Responsible for the management of actions that the user can perform in the interface by pressing the key combination specified by its shortcut or by clicking on a menu/toolbar item.
There is only one instance of this manager in an application. This instance is created and owned by DzMainWindow. Request the instance via DzMainWindow.getActionMgr().
See Also:
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/actionmgr_dz} */
class DzActionMgr extends QWidget {
	/**
 * @description Uses the regular expression "([A-z]+[A-z0-9]*)" to strip characters/symbols/etc from a string in order to 'legalize' it.
 * @returns A 'legalized' version of name.
 * @since 4.6.2.102
 * @param name - The name to 'legalize.'
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Adds a custom action to the action manager.
 * @returns The globally unique identifier for the newly created custom action.
 * @param text - The text of the action. This is displayed in menus the action is added to unless a different menu text is specified.
 * @param desc - The description of the action.
 * @param script - The filename of the script to execute, or the actual text of the script to execute.
 * @param isFile - If true, then script is assumed to contain a filename, otherwise script is assumed to be the actual script.
 * @param shortcut - The default keyboard shortcut for the action.
 * @param iconFile - The path of an image file that will be the icon for the action.
*/
	addCustomAction(text:String, desc:String, script:String, isFile:Boolean, shortcut:String, iconFile:String):String {
	
	};
	/**
 * @description Clears the active menu.
*/
	clearActiveMenu():void {
	
	};
	/**
 * @returns A pointer to the action object of the given class type.
 * @param identifier - The classname of the DzAction subclass to find the action for.
*/
	findAction(identifier:String):DzAction {
	
	};
	/**
 * @returns The list of actions whose shortcuts start with the specified sequence (if any), otherwise an empty list.
 * @since 4.12.1.63
 * @param shortcut - The shortcut to find actions for.
*/
	findActionsForShortcut(shortcut:String):Array {
	
	};
	/**
 * @returns The index of the custom action with the given identifier (if any), otherwise -1.
 * @param guid - The globally unique identifier (name) of the custom action to find.
*/
	findCustomAction(guid:String):Number {
	
	};
	/**
 * @returns The action that toggles visibility of the given DzPane (if any), otherwise NULL.
 * @since 4.8.1.18
 * @param identifier - The classname of the DzPane, or in the case of a custom pane the globally unique identifier, to find the action for.
*/
	findPaneAction(identifier:String):DzAction {
	
	};
	/**
 * @returns The persistent menu of the given class type (if any), otherwise NULL.
 * @param className - The class name of the persistent menu to find.
*/
	findPersistentMenu(className:String):DzPersistentMenu {
	
	};
	/**
 * @returns The action that activates the given DzViewTool subclass (if any), otherwise NULL.
 * @since 4.8.1.18
 * @param className - The class name of the DzViewTool to find the action for.
*/
	findViewToolAction(className:String):DzAction {
	
	};
	/**
 * @returns The action at the given index (if any), otherwise NULL.
 * @param i - The index of the action to return.
*/
	getAction(i:Number):DzAction {
	
	};
	/**
 * @returns The currently set active menu (if any), otherwise NULL.
*/
	getActiveMenu():DzActionMenu {
	
	};
	/**
 * @returns The index of the custom action with the given GUID; creates a custom action if one does not already exist.
 * @param guid - The globally unique identifier (name) of the custom action to get.
*/
	getCustomAction(guid:String):Number {
	
	};
	/**
 * @returns The custom action at the given index (if any), otherwise NULL.
 * @since 4.12.1.63
 * @param i - The index of the custom action to return.
 * @attention The return object (if any) will inherit DzCustomAction.
*/
	getCustomActionByIndex(i:Number):DzAction {
	
	};
	/**
 * @returns The description for the custom action at the given index (if any), otherwise an empty string.
 * @since 4.11.0.164
 * @param i - The index of the custom action to get the description of.
*/
	getCustomActionDescription(i:Number):String {
	
	};
	/**
 * @returns The path to the file for the custom action at the given index (if any) if the custom action refers a file, otherwise an empty string.
 * @param i - The index of the custom action to get the filename for.
*/
	getCustomActionFile(i:Number):String {
	
	};
	/**
 * @returns The icon file for the custom action at the given index.
 * @param i - The index of the custom action to get the icon file for.
*/
	getCustomActionIcon(i:Number):String {
	
	};
	/**
 * @returns The globally unique identifier for the custom action at the given index (if any), otherwise an empty string.
 * @param i - The index of the custom action to get the name of.
*/
	getCustomActionName(i:Number):String {
	
	};
	/**
 * @returns The script code executed by the custom action or an empty string if the custom action refers to a file (if any), otherwise an empty string.
 * @param i - The index of the custom action to get information for.
*/
	getCustomActionScript(i:Number):String {
	
	};
	/**
 * @returns The keyboard shortcut for the custom action at the given index (if any), otherwise an empty string.
 * @param i - The index of the custom action to return the shortcut for.
*/
	getCustomActionShortcut(i:Number):String {
	
	};
	/**
 * @returns The text for the custom action at the given index (if any), otherwise an empty string.
 * @param i - The index of the custom action to get the text for.
*/
	getCustomActionText(i:Number):String {
	
	};
	/**
 * @returns The Main Menu for the application.
*/
	getMenu():DzActionMenu {
	
	};
	/**
 * @returns The number of action items in the application.
*/
	getNumActions():Number {
	
	};
	/**
 * @returns The number of custom actions in the action manager.
*/
	getNumCustomActions():Number {
	
	};
	/**
 * @returns The number of persistent menus in the application.
*/
	getNumPersistentMenus():Number {
	
	};
	/**
 * @returns The persistent menu at the specified index (if any), otherwise NULL.
 * @param i - The index of the persistent menu to return.
*/
	getPersistentMenu(i:Number):DzPersistentMenu {
	
	};
	/**
 * @description Builds the main menu, pane menus and tool bars from the given file.
 * @returns true if the file was successfully loaded, otherwise false.
 * @since 4.6.0.78
 * @param filename - The name of the interface file to load.
 * @param overrideDefaults - Whether or not default triggers (i.e. version numbers on menus) cause certain items to be rebuilt using their defaults.
*/
	loadInterfaceFile(filename:String, overrideDefaults:Boolean):Boolean {
	
	};
	/**
 * @description Removes all custom actions from the application.
*/
	removeAllCustomActions():void {
	
	};
	/**
 * @description Removes the custom action at the given index.
 * @param i - The index of the custom action to remove.
*/
	removeCustomAction(i:Number):void {
	
	};
	/**
 * @description Saves the actions to the given file.
 * @returns true if the file was saved successfully, otherwise false.
 * @param filename - The name of the file to save the interface settings to.
*/
	saveActionsFile(filename:String):Boolean {
	
	};
	/**
 * @description Saves the actions to the given file.
 * @returns true if the file was saved successfully, otherwise false.
 * @param filename - The name of the file to save the interface settings to.
*/
	saveCustomActionsFile(filename:String):Boolean {
	
	};
	/**
 * @description Saves the actions, menus and toolbars to their respective files in the default location.
 * @returns true if the files were saved successfully, otherwise false.
*/
	saveInterfaceFiles():Boolean {
	
	};
	/**
 * @description Saves the main menu, pane menus to the given file.
 * @returns true if the file was saved successfully, otherwise false.
 * @param filename - The name of the file to save the interface settings to.
*/
	saveMenusFile(filename:String):Boolean {
	
	};
	/**
 * @description Saves the tool bars to the given file.
 * @returns true if the file was saved successfully, otherwise false.
 * @param filename - The name of the file to save the interface settings to.
*/
	saveToolBarsFile(filename:String):Boolean {
	
	};
	/**
 * @param className - The name of the action class to set the accelerator for.
 * @param key - The string representation of the accelerator.
*/
	setAccel(className:String, key:String):void {
	
	};
	/**
 * @description Sets the active menu, so that actions relying on the active menu can get it. This may be called before the menu exec() call to allow context for script actions.
 * @param menu - The menu to set as the active menu.
*/
	setActiveMenu(menu:DzActionMenu):void {
	
	};
	/**
 * @description Sets the description for the custom action at the given index.
 * @since 4.11.0.164
 * @param i - The index of the custom action to set the description for.
 * @param desc - The description of the custom action.
*/
	setCustomActionDescription(i:Number, desc:String):void {
	
	};
	/**
 * @description Sets the icon for the custom action at the given index.
 * @param i - The index of the custom action to set the icon file for.
 * @param iconFile - The path of the image file that will be loaded for the action's icon. The path can be absolute, or relative to DzApp.getResourcesPath().
*/
	setCustomActionIcon(i:Number, iconFile:String):void {
	
	};
	/**
 * @description Sets the script for the custom action at the given index.
 * @param i - The index of the custom action to set the script for.
 * @param script - The script to set as the Custom action's script.
 * @param isFile - If true, script contains the name of a script file that should be loaded. If false, script contains the code for the action's script.
*/
	setCustomActionScript(i:Number, script:String, isFile:Boolean):void {
	
	};
	/**
 * @description Sets the keyboard shortcut for the custom action at the given index.
 * @since 4.9.4.102
 * @param i - The index of the custom action to set the shortcut for.
 * @param shortcut - The string representation of the shortcut.
*/
	setCustomActionShortcut(i:Number, shortcut:String):void {
	
	};
	/**
 * @description Sets whether or not the text of the action is displayed with the icon for the custom action at the given index.
 * @param i - The index of the custom action to set.
 * @param onOff - If true, the text of the action is always displayed with the icon (e.g., in toolbars).
*/
	setCustomActionShowTextWithIcon(i:Number, onOff:Boolean):void {
	
	};
	/**
 * @description Sets the text for the custom action at the given index.
 * @param i - The index of the custom action to set the text for.
 * @param text - The new text for the action.
*/
	setCustomActionText(i:Number, text:String):void {
	
	};
	/**
 * @param key - The accelerator to remove from actions in the app.
*/
	unsetAccel(key:String):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when a custom action is added to the action manager.
 * @signature `"customActionAdded(const QString&)"`
 * @event
*/
	customActionAdded(name:String):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when custom actions are added to or removed from the action manager.
 * @signature `"customActionListChanged()"`
 * @event
*/
	customActionListChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when a custom action is removed from the action manager.
 * @signature `"customActionRemoved(const QString&)"`
 * @event
*/
	customActionRemoved(name:String):void {
	
	};

}
/**
 * @classdesc Defines the layout of Toolbars, Pane Groups, Panes, Viewports and the active View Tool within an Activity of the interface.
See Also:
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/activitylayout_dz} */
class DzActivityLayout extends DzRefCountedItem, QObject {
	/**
 * @description The description of the activity
	*/
	description:String;
	/**
 * @description The label of the activity
	*/
	label:String;
	/**
 * @description Default Constructor. Creates a new activity layout with the given name and description.
 * @param label - The label that the user will see for this layout in the activity tabs
 * @param description - The description of the layout.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Clears the memorized state of the activity.
*/
	clearMemorizedState():void {
	
	};
	/**
 * @returns Whether or not the toolbar with the given name is enabled for this activity layout.
*/
	isToolBarEnabled(toolbar:String):Boolean {
	
	};
	/**
 * @description Sets whether or not the toolbar with the given name is enabled.
*/
	setToolbarEnabled(toolbar:String, onOff:Boolean):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the layout's label has changed.
 * @signature `"labelChanged(const QString&)"`
 * @event
*/
	labelChanged(label:String):void {
	
	};

}
/**
 * @classdesc Deprecated
Exists only to keep code written prior to 4.6.2.23 working. Do not use in new code. Use DzTextureLayer.BlendAdd instead.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/addblend_dz} */
class DzAddBlend extends  {
	/**
 * @description Default Constructor.
 * @constructor
*/
	constructor() {
	
	};

}
/**
 * @classdesc See Also:
Attention:@attention Attention:
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/alembicexporter_dz} */
class DzAlembicExporter extends DzExporter {
	/**
 * @description Default Constructor.
 * @constructor
*/
	constructor() {
	
	};

}
/**
 * @classdesc Deprecated
Exists only to keep code written prior to 4.6.2.23 working. Do not use in new code. Use DzTextureLayer.BlendAlpha instead.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/alphablend_dz} */
class DzAlphaBlend extends  {
	/**
 * @description Default Constructor
 * @constructor
*/
	constructor() {
	
	};

}
/**
 * @classdesc Derived from QApplication, this class embodies the main event loop, and owns application-wide settings and objects not directly related to the user interface.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/app_dz} */
class DzApp extends QObject {
	/**
 * @description Holds the name of the application; i.e., "DAZ Studio". (Read Only)
	*/
	appName:String;
	/**
 * @description Holds the name of the cloud service; i.e., "Daz Connect". (Read Only)
	*/
	cloudName:String;
	/**
 * @description Holds the exit code returned by the application. (Read Only)
	*/
	exitCode:Number;
	/**
 * @description Holds the size, in bytes, of the log file.
	*/
	logSize:Number;
	/**
 * @description Holds a string representation of the full product version number; i.e., major.minor.revision.build. (Read Only)
	*/
	longVersionString:String;
	/**
 * @description Holds the name of the organization; i.e., "DAZ 3D". (Read Only)
	*/
	orgName:String;
	/**
 * @description Holds the arguments passed to the application on launch. (Read Only)
	*/
	scriptArgs:Array;
	/**
 * @description Holds the full product version number as an encoded 32-bit integer. (Read Only)
Deprecated
	*/
	version:Number;
	/**
 * @description Holds the full product version number as an encoded 64-bit integer. (Read Only)
	*/
	version64:Number;
	/**
 * @description Holds a string representation of the product version number; i.e., major.minor. (Read Only)
	*/
	versionString:String;
	/**
 * @description ENUMERATOR: No interface or graphical subsystem is initialized.
*/
	
	static NoInterface;
	/**
 * @description ENUMERATOR: The OpenGL subsystem is initialized without a user interface.
*/
	
	static NoInterfaceWithOpenGL;
	/**
 * @description ENUMERATOR: The user interface and all graphical subsystems are initialized.
*/
	
	static FullInterface;
	/**
 * @description ENUMERATOR: An unknown operating system. Since: 4.11.0.235
*/
	
	static OS_Unknown;
	/**
 * @description ENUMERATOR: An unknown version of the Windows operating system. Since: 4.11.0.235
*/
	
	static Windows_Unknown;
	/**
 * @description ENUMERATOR: The "Windows 95" (Windows 4.0) operating system. Since: 4.11.0.235
*/
	
	static Windows_95;
	/**
 * @description ENUMERATOR: The "Windows 98" (Windows 4.1) operating system. Since: 4.11.0.235
*/
	
	static Windows_98;
	/**
 * @description ENUMERATOR: The "Windows Millennium Edition" aka "ME" (Windows 4.9) operating system. Since: 4.11.0.235
*/
	
	static Windows_Me;
	/**
 * @description ENUMERATOR: The "Windows 2000" (Windows NT 5.0) operating system. Since: 4.11.0.235
*/
	
	static Windows_2000;
	/**
 * @description ENUMERATOR: The "Windows XP" (Windows NT 5.1) operating system. Since: 4.11.0.235
*/
	
	static Windows_XP;
	/**
 * @description ENUMERATOR: The "Windows 2003" (Windows NT 5.2) operating system. Since: 4.11.0.235
*/
	
	static Windows_2003;
	/**
 * @description ENUMERATOR: The "Windows Vista" (Windows NT 6.0) operating system. Since: 4.11.0.235
*/
	
	static Windows_Vista;
	/**
 * @description ENUMERATOR: The "Windows 7" (Windows NT 6.1) operating system. Since: 4.11.0.235
*/
	
	static Windows_7;
	/**
 * @description ENUMERATOR: The "Windows 8" (Windows NT 6.2) operating system. Since: 4.11.0.235
*/
	
	static Windows_8;
	/**
 * @description ENUMERATOR: The "Windows 8.1" (Windows NT 6.3) operating system. Since: 4.11.0.235
*/
	
	static Windows_8_1;
	/**
 * @description ENUMERATOR: The "Windows 10" (Windows NT 10) operating system. Since: 4.11.0.235
*/
	
	static Windows_10;
	/**
 * @description ENUMERATOR: An unknown version of the Mac OS X/OS X/macOS operating system. Since: 4.11.0.235
*/
	
	static Mac_Unknown;
	/**
 * @description ENUMERATOR: The "Mac OS X 10.0" (aka "Cheetah") operating system. Since: 4.11.0.235
*/
	
	static Mac_10_0;
	/**
 * @description ENUMERATOR: The "Mac OS X 10.1" (aka "Puma") operating system. Since: 4.11.0.235
*/
	
	static Mac_10_1;
	/**
 * @description ENUMERATOR: The "Mac OS X 10.2" (aka "Jaguar") operating system. Since: 4.11.0.235
*/
	
	static Mac_10_2;
	/**
 * @description ENUMERATOR: The "Mac OS X Panther" (version 10.3) operating system. Since: 4.11.0.235
*/
	
	static Mac_10_3;
	/**
 * @description ENUMERATOR: The "Mac OS X Tiger" (version 10.4) operating system. Since: 4.11.0.235
*/
	
	static Mac_10_4;
	/**
 * @description ENUMERATOR: The "Mac OS X Leopard" (version 10.5) operating system. Since: 4.11.0.235
*/
	
	static Mac_10_5;
	/**
 * @description ENUMERATOR: The "Mac OS X Snow Leopard" (version 10.6) operating system. Since: 4.11.0.235
*/
	
	static Mac_10_6;
	/**
 * @description ENUMERATOR: The "Mac OS X Lion" (version 10.7) operating system. Since: 4.11.0.235
*/
	
	static Mac_10_7;
	/**
 * @description ENUMERATOR: The "OS X Mountain Lion" (version 10.8) operating system. Since: 4.11.0.235
*/
	
	static Mac_10_8;
	/**
 * @description ENUMERATOR: The "OS X Mavericks" (version 10.9) operating system. Since: 4.11.0.235
*/
	
	static Mac_10_9;
	/**
 * @description ENUMERATOR: The "OS X Yosemite" (version 10.10) operating system. Since: 4.11.0.235
*/
	
	static Mac_10_10;
	/**
 * @description ENUMERATOR: The "OS X El Capitan" (version 10.11) operating system. Since: 4.11.0.235
*/
	
	static Mac_10_11;
	/**
 * @description ENUMERATOR: The "macOS Sierra" (version 10.12) operating system. Since: 4.11.0.235
*/
	
	static Mac_10_12;
	/**
 * @description ENUMERATOR: The "macOS High Sierra" (version 10.13) operating system. Since: 4.11.0.235
*/
	
	static Mac_10_13;
	/**
 * @description ENUMERATOR: The "macOS Mojave" (version 10.14) operating system. Since: 4.11.0.235
*/
	
	static Mac_10_14;
	/**
 * @description ENUMERATOR: The "macOS Catalina" (version 10.15) operating system. Since: 4.12.1.16
*/
	
	static Mac_10_15;
	/**
 * @description ENUMERATOR: The Windows hardware/software environment.
*/
	
	static Windows;
	/**
 * @description ENUMERATOR: The Mac OS X|OS X|macOS hardware/software environment.
*/
	
	static MacOSX;
	/**
 * @description ENUMERATOR: A build of the application that is considered stable, and has been made available to the general public.
*/
	
	static GeneralRelease;
	/**
 * @description ENUMERATOR: A build of the application that is not considered stable yet, but has been made available to the general public for testing.
*/
	
	static PublicBuild;
	/**
 * @description ENUMERATOR: A build of the application that is not considered ready for the general public, but is considered stable enough to introduce into a production environment by early adopters; typically only made available to our Published Artists.
*/
	
	static PublishingBuild;
	/**
 * @description ENUMERATOR: A build of the application that is not considered stable yet, but has been made available to a select group of individuals that serve as the "front line" or the "canary in a coal mine" for a time before the build is promoted to a channel that is less restricted.
*/
	
	static PrivateBuild;
	/**
 * @description ENUMERATOR: A build that is used by developers of the application during the development process.
*/
	
	static DevBuild;
	/**
 * @description ENUMERATOR: An edition of the application that provides the "Free" set of features.
*/
	
	static Free;
	/**
 * @description ENUMERATOR: An edition of the application that provides the "Standard" set of features.
*/
	
	static Standard;
	/**
 * @description ENUMERATOR: An edition of the application that provides the "Advanced" set of features.
*/
	
	static Advanced;
	/**
 * @description ENUMERATOR: An edition of the application that provides the "Professional" set of features.
*/
	
	static Pro;
	/**
 * @description ENUMERATOR: An edition of the application that provides the "Alpha" set of features.
*/
	
	static Alpha;
	/**
 * @description ENUMERATOR: An edition of the application that provides the "Beta" set of features.
*/
	
	static Beta;
	/**
 * @returns The current version of the application.
 * @since 4.11.0.230
*/
	getVersion():DzVersion {
	
	};
	/**
 * @returns true if a modal widget (i.e., dialog) is currently displayed, otherwise false.
 * @since 4.12.1.116
*/
	hasActiveModalWidget():Boolean {
	
	};
	/**
 * @returns A numeric representation of the bit architecture the application was compiled for.
*/
	bitArchitecture():Number {
	
	};
	/**
 * @returns A user-friendly string representation of the bit architecture the application was compiled for.
*/
	bitArchitectureString():String {
	
	};
	/**
 * @returns A string representation of the byte size.
 * @param bytes - The numeric value to convert into a string.
*/
	byteSizeToString(bytes:Number):String {
	
	};
	/**
 * @returns true if the Scene Builder dialog would be displayed, otherwise false.
 * @since 4.6.2.69
 * @param definition - If empty, the default SceneBuilder.json file (if any) in getResourcesPath() will be checked. If a string, the full path of a Scene Builder configuration file to check is expected. If an object, a map of Scene Builder configuration data is expected. (since 4.6.4.62)
*/
	canShowSceneBuilder(definition:Object):Boolean {
	
	};
	/**
 * @description Forces a deletion of all objects currently waiting to be deleted to free up more memory. If you are using this to clear memory you will generally want to clear the Undo Stack first.
 * @param doProgress - If true, a progress dialog will be shown to the user while the operation is taking place.
*/
	clearDelayedDeleteStack(doProgress:Boolean):void {
	
	};
	/**
 * @description Clears application wide cache of pixmaps.
 * @since 4.11.0.34
*/
	clearPixmapCache():void {
	
	};
	/**
 * @returns A string representing a message digest. The string is formatted as 36 characters, in which 32 are hexadecimal and distributed across five groups of 8-4-4-4-12 separated by a hyphen ('-', i.e. "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx" where each 'x' is a hexadecimal digit).
 * @param data - The byte array to create a digest of.
*/
	createDigest(data:ByteArray):String {
	
	};
	/**
 * @returns A string representing a message digest. The string is formatted as 36 characters, in which 32 are hexadecimal and distributed across five groups of 8-4-4-4-12 separated by a hyphen ('-', i.e. "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx" where each 'x' is a hexadecimal digit).
 * @param tokens - The list of strings to create a digest of.
*/
	createDigest(tokens:Array):String {
	
	};
	/**
 * @returns A string representing a randomly generated Universally Unique Identifier (UUID). The string is formatted as 38 characters, in which 32 are hexadecimal and distributed across five groups of 8-4-4-4-12 separated by a hyphen ('-') and enclosed by a pair of curly braces (i.e. "{xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx}" where each 'x' is a hexadecimal digit).
*/
	createUuid():String {
	
	};
	/**
 * @description Writes a debug message to the application log.
 * @param message - The message to write.
*/
	debug(message:String):void {
	
	};
	/**
 * @description Posts an event that causes the application to exit.
 * @since 4.6.2.55
 * @param exitCode - The exit code to set. (since 4.9.3.51)
*/
	delayedExit(exitCode:Number):void {
	
	};
	/**
 * @param onOff - If true, multi-threaded features are enabled, otherwise multi-threaded features are disabled.
*/
	enableMultiThreading(onOff:Boolean):void {
	
	};
	/**
 * @description Writes any currently buffered log messages to the log file. This is automatically called whenever the log buffer has more than 512 characters of data, but can be called at any time to force all messages to be written out.
*/
	flushLogBuffer():Boolean {
	
	};
	/**
 * @description Searches in default locations for a script file of the given name.
 * @returns The absolute path of the found script file (if any), otherwise an empty string.
 * @param scriptName - The name/path of a script file to find. This can be a file name, a relative file path, or an absolute file path.
*/
	getAbsoluteScriptPath(scriptName:String):String {
	
	};
	/**
 * @returns The absolute path of the application data directory for the current machine user, the current major version, the current release cycle and the current instance of the application.
 * @since 4.12.1.23
 * @attention This path is dynamically constructed using calls to the underlying operating system. If the call to the OS fails, getHomePath() is used as a fallback.
*/
	getAppDataInstancePath():String {
	
	};
	/**
 * @returns The absolute path of the application data directory for the current machine user, the current major version and the current release cycle of the application.
 * @attention This path is dynamically constructed using calls to the underlying operating system. If the call to the OS fails, getHomePath() is used as a fallback.
*/
	getAppDataPath():String {
	
	};
	/**
 * @returns The base name of the application; e.g., "Studio".
 * @since 4.9.2.33
*/
	getApplicationBaseName():String {
	
	};
	/**
 * @returns The name of the application settings; e.g., "Studio4 Public Build [1]".
 * @since 4.12.1.26
*/
	getApplicationDataName():String {
	
	};
	/**
 * @description Deprecated
 * @returns The application-wide persistent Settings Manager - used to set and retrieve application settings.
*/
	getAppSettingsMgr():DzAppSettingsMgr {
	
	};
	/**
 * @returns The application-wide Asset I/O Manager in charge of native format assets.
*/
	getAssetIOMgr():DzAssetIOMgr {
	
	};
	/**
 * @returns The application-wide Asset Manager.
*/
	getAssetMgr():DzAssetMgr {
	
	};
	/**
 * @returns The application-wide Authentication Manager - responsible for tracking user authentication.
*/
	getAuthenticationMgr():DzAuthenticationMgr {
	
	};
	/**
 * @returns The application-wide Call Back Manager - responsible for tracking call back objects.
*/
	getCallBackMgr():DzCallBackMgr {
	
	};
	/**
 * @returns The filename for the file that logs messages from the application that pertains to the cloud service.
 * @since 4.12.1.26
*/
	getCloudLogFilename():String {
	
	};
	/**
 * @returns The absolute path of the public/shared user documents folder.
 * @attention This path is dynamically constructed using calls to the underlying operating system. If the call to the OS fails, getHomePath() is used as a fallback.
*/
	getCommonUserDocumentPath():String {
	
	};
	/**
 * @returns The application-wide Content Manager.
*/
	getContentMgr():DzContentMgr {
	
	};
	/**
 * @returns The current author (user that is currently running the app).
*/
	getCurrentAuthor():DzAuthor {
	
	};
	/**
 * @returns The name of the data folder under the content directory.
*/
	getDataFolderName():String {
	
	};
	/**
 * @returns The full path for the location where data is stored.
*/
	getDataFolderPath():String {
	
	};
	/**
 * @returns The base path for the location where data is stored.
*/
	getDataFolderPathBase():String {
	
	};
	/**
 * @returns The absolute path of the data directory for the organization.
 * @attention This path is dynamically constructed using calls to the underlying operating system. If the call to the OS fails, getHomePath() is used as a fallback.
*/
	getDAZDataPath():String {
	
	};
	/**
 * @returns The application-wide Device Manager - responsible for devices supported by the application.
*/
	getDeviceMgr():DzDeviceMgr {
	
	};
	/**
 * @returns The active modal widget or the application main window if one exists.
*/
	getDialogParent():QWidget {
	
	};
	/**
 * @returns The absolute path of the directory where application documentation files are stored.
*/
	getDocumentationPath():String {
	
	};
	/**
 * @returns The absolute path of the user documents folder for the application.
 * @attention This path is dynamically constructed using calls to the underlying operating system. If the call to the OS fails, getHomePath() is used as a fallback.
*/
	getDocumentsPath():String {
	
	};
	/**
 * @returns The application-wide Export Manager in charge of file exporters.
*/
	getExportMgr():DzExportMgr {
	
	};
	/**
 * @returns The application-wide File I/O Preset Manager.
*/
	getFileIOPresetMgr():DzFileIOPresetMgr {
	
	};
	/**
 * @returns The absolute path of the directory where support script files that are automatically generated are stored.
*/
	getGeneratedScriptsPath():String {
	
	};
	/**
 * @returns The absolute path of the application data directory for automatically generated shaders.
*/
	getGeneratedShadersPath():String {
	
	};
	/**
 * @returns An enumerated value representing the current graphics mode.
*/
	getGraphicsMode():GraphicsMode {
	
	};
	/**
 * @returns The application-wide Help Manager.
*/
	getHelpMgr():DzHelpMgr {
	
	};
	/**
 * @returns The absolute path of the directory that contains the application executable.
*/
	getHomePath():String {
	
	};
	/**
 * @returns The application-wide Image Manager - responsible for image I/O and tracking of currently loaded images.
*/
	getImageMgr():DzImageMgr {
	
	};
	/**
 * @returns The application-wide Import Manager in charge of file importers.
*/
	getImportMgr():DzImportMgr {
	
	};
	/**
 * @returns The main interface widget if the application is running with an interface, otherwise NULL.
*/
	getInterface():DzMainWindow {
	
	};
	/**
 * @description Last directory that files were loaded or saved to/from.
*/
	getLoadSavePath():String {
	
	};
	/**
 * @returns The filename for the file that logs messages from the application that pertains to the core application and any plugins.
 * @since 4.12.1.26
*/
	getLogFilename():String {
	
	};
	/**
 * @returns The application-wide Video and Audio Manager - responsible for video and audio I/O.
*/
	getMultiMediaMgr():DzMultiMediaMgr {
	
	};
	/**
 * @returns The application-wide Plug-in Manager - responsible for tracking plug-ins.
*/
	getPluginMgr():DzPluginMgr {
	
	};
	/**
 * @returns The absolute path of the base directory where plug-ins are loaded from.
*/
	getPluginsPath():String {
	
	};
	/**
 * @returns The absolute path of the machine's global program data directory for the organization, the current major version, the current release cycle, and the current instance of the application.
 * @since 4.12.1.23
 * @attention This path is dynamically constructed using calls to the underlying operating system. If the call to the OS fails, getHomePath() is used as a fallback.
*/
	getProgramDataAppInstancePath():String {
	
	};
	/**
 * @returns The absolute path of the machine's global program data directory for the organization, the current major version, and the current release cycle of the application.
 * @attention This path is dynamically constructed using calls to the underlying operating system. If the call to the OS fails, getHomePath() is used as a fallback.
*/
	getProgramDataAppPath():String {
	
	};
	/**
 * @returns The absolute path of the machine's global program data directory for the organization.
 * @attention This path is dynamically constructed using calls to the underlying operating system. If the call to the OS fails, getHomePath() is used as a fallback.
*/
	getProgramDataPath():String {
	
	};
	/**
 * @returns The application-wide Render Manager.
*/
	getRenderMgr():DzRenderMgr {
	
	};
	/**
 * @returns The absolute path of the directory where application resource files are stored.
*/
	getResourcesPath():String {
	
	};
	/**
 * @returns The application-wide Save Filter Manager in charge of save filters.
*/
	getSaveFilterMgr(deprecated):DzSaveFilterMgr (deprecated) {
	
	};
	/**
 * @returns The absolute path of the directory where support script files are stored.
*/
	getScriptsPath():String {
	
	};
	/**
 * @returns The absolute path of the base directory for all shaders.
*/
	getShadersPath():String {
	
	};
	/**
 * @returns The application-wide Simulation Manager.
 * @since 4.9.3.140
*/
	getSimulationMgr():DzSimulationMgr {
	
	};
	/**
 * @returns The application-wide style object; subject to becoming invalid if the application style changes.
*/
	getStyle():DzStyle {
	
	};
	/**
 * @returns The name of the style definition currently in use.
*/
	getStyleDefinition():String {
	
	};
	/**
 * @returns A list of the available style definitions.
*/
	getStyleDefinitionList():Array {
	
	};
	/**
 * @description Get a filename for temporary storage.
 * @returns A unique filename (with no extension) whose path will be in the current temporary working folder.
 * @attention All files in this folder will be deleted when shutdown() is called.
*/
	getTempFilename():String {
	
	};
	/**
 * @returns The absolute path of the directory where temporary files are stored.
*/
	getTempPath():String {
	
	};
	/**
 * @description Get a filename for temporary storage of rendered images.
 * @returns A filename (with no extension) whose path will be in the current temporary working folder.
 * @attention All files in this folder will be deleted when shutdown() is called.
*/
	getTempRenderFilename():String {
	
	};
	/**
 * @returns The absolute path of the temporary directory for automatically generated shaders.
*/
	getTempShadersPath():String {
	
	};
	/**
 * @returns The absolute path of the base directory for all binary utilities.
*/
	getUtilitiesPath():String {
	
	};
	/**
 * @returns A user-friendly string indicating the name of the application instance (of the release cycle).
 * @since 4.12.1.19
*/
	instanceName():String {
	
	};
	/**
 * @returns A string indicating the name of the application instance (of the release cycle).
 * @since 4.12.1.23
*/
	instanceNameSuffix():String {
	
	};
	/**
 * @returns true if the application is in the process of shutting down, otherwise false.
*/
	isClosing():Boolean {
	
	};
	/**
 * @returns true if key is currently pressed, otherwise false.
 * @param key - The Qt.Key value for the key to check. Since 4.11.0.263, any value < 0 (default) is interpreted as "any key" rather than a specific key.
*/
	isKeyDown(key:Number):Boolean {
	
	};
	/**
 * @returns true if sequence is currently pressed, otherwise false.
 * @param sequence - A string consistent with QKeySequence.fromString(), in the PortableText format. Since 4.11.0.263, "any" is interpreted as "any key" rather than a specific key sequence.
*/
	isKeySequenceDown(sequence:String):Boolean {
	
	};
	/**
 * @returns true if the user has chosen to enable multi-threaded features, otherwise false.
*/
	isMultiThreadingEnabled():Boolean {
	
	};
	/**
 * @returns true if a valid serial number has been provided, otherwise false.
*/
	isRegistered():Boolean {
	
	};
	/**
 * @returns true if the main event loop is running and events that are posted can be expected to be delivered, otherwise false.
*/
	isRunning():Boolean {
	
	};
	/**
 * @returns true if the application is running as a slave to another application, otherwise false.
*/
	isSlave():Boolean {
	
	};
	/**
 * @returns true if the application is in the process of starting up, otherwise false.
*/
	isStarting():Boolean {
	
	};
	/**
 * @returns true if data consists of 32 hexadecimal characters (i.e. "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx" where 'x' represents a hexadecimal value in the range [0-9a-f]), or 36 characters in which 32 are hexadecimal values distributed across five groups of 8-4-4-4-12 separated by a hyphen ('-', i.e. "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"), or 38 characters where the previous description is enclosed by curly braces (i.e. "{xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx}"), otherwise false.
 * @since 4.12.1.63
 * @param data - The string to test whether or not it is a valid GUID.
*/
	isValidGuid(data:String):Boolean {
	
	};
	/**
 * @description Writes a normal operational message to the application log.
 * @param message - The message to write.
*/
	log(message:String):void {
	
	};
	/**
 * @returns The current modifier key state; this value is a bitwise OR of the Qt.KeyboardModifier flags for the active keys (if any).
*/
	modifierKeyState():Number {
	
	};
	/**
 * @returns The enumerated value associated with the OperatingSystem that the application is running under.
*/
	operatingSystem():OperatingSystem {
	
	};
	/**
 * @returns A user-readable string that describes the current Operating System.
*/
	operatingSystemString():String {
	
	};
	/**
 * @description The application is intended to be as platform independent as possible, but there are cases where something needs to be done differently on one platform or another. This function provides a simple way to check which platform the application is running under.
 * @returns The enumerated value associated with the Platform that the application is running under.
*/
	platform():Platform {
	
	};
	/**
 * @description Posts an event that causes execution of a script as it is encountered in the event stack.
 * @since 4.10.0.101
 * @param evaluate - If script is actual code, set this to true, otherwise set this to false.
 * @param script - This can be a file name, a relative file path, an absolute file path or code. If passed a file name or path, getAbsoluteScriptPath() is used to resolve it. If passed actual code, evaluate must also be set to true.
 * @param args - The list of arguments to pass to the script.
*/
	postScriptEvent(evaluate:Boolean, script:String, args:Array):void {
	
	};
	/**
 * @returns The enumerated value associated with the ReleaseCycle of the application.
*/
	releaseCycle():ReleaseCycle {
	
	};
	/**
 * @returns A user-friendly string describing the release cycle (and optionally, the instance) of the application.
 * @since 4.12.1.19
*/
	releaseCycleInstanceString():String {
	
	};
	/**
 * @returns A user-friendly string describing the release cycle (and optionally, the instance) of the application.
 * @since 4.12.1.19
*/
	releaseCycleInstanceSuffix():String {
	
	};
	/**
 * @returns A string describing the release cycle (and optionally, the instance) of the application, without any space characters.
 * @since 4.12.1.19
*/
	releaseCycleInstanceSuffixStripped():String {
	
	};
	/**
 * @returns A user-friendly string describing the release cycle of the application.
*/
	releaseCycleString():String {
	
	};
	/**
 * @returns A user-friendly string describing the release cycle of the application.
*/
	releaseCycleSuffix():String {
	
	};
	/**
 * @returns A string describing the release cycle of the application, without any space characters.
*/
	releaseCycleSuffixStripped():String {
	
	};
	/**
 * @returns The enumerated value associated with the ReleaseEdition of the application.
*/
	releaseEdition():ReleaseEdition {
	
	};
	/**
 * @returns A user-friendly string describing the release edition of the application.
*/
	releaseEditionString():String {
	
	};
	/**
 * @description Restores the temporary files directory to the default location.
*/
	restoreDefaultTempPath():void {
	
	};
	/**
 * @description Sets the default directory for loading or saving files.
 * @param path - The absolute path of the (default) directory to load/save files from/to.
*/
	setLoadSavePath(path:String):void {
	
	};
	/**
 * @description Sets the current style for the application.
 * @returns true if the application switched to the given style, otherwise false.
 * @param name - The name of the style definition to use.
*/
	setStyleDefinition(name:String):Boolean {
	
	};
	/**
 * @description Sets the directory path where temporary files are stored. The path provided needs to be an absolute path. A directory will be created at the new location if it does not already exist.
 * @returns true if the path provided is valid and changing the temporary path succeeded. false if any errors occurred.
 * @param tempPath - The path of the new temporary files directory.
*/
	setTempPath(tempPath:String):Boolean {
	
	};
	/**
 * @description A convenience method for opening a showing a file/directory in the OS file browser.
 * @returns true if the file exists and the OS file browser could be launched, otherwise false.
 * @param absFilePath - The absolute file path to a file or folder to show.
*/
	showInNativeBrowser(absFilePath:String):Boolean {
	
	};
	/**
 * @returns true if the application should prompt the user for input, otherwise false.
*/
	showPrompts():Boolean {
	
	};
	/**
 * @description Displays the Scene Builder dialog.
 * @returns If asEvent is false, a list of the selections made by the user in the Scene Builder dialog, otherwise an empty list. (since 4.6.4.62)
 * @since 4.6.2.69
 * @param definition - If empty, the default SceneBuilder.json file (if any) in getResourcesPath() will be used. If a string, the full path of a Scene Builder configuration file to check is expected. If an object, a map of Scene Builder configuration data is expected. (since 4.6.4.62)
 * @param asEvent - If false (default), the Scene Builder configuration data is processed immediately. If false, the Scene Builder configuration data is posted to an event and processed as it is encountered in the event stack. (since 4.6.4.62)
*/
	showSceneBuilder(definition:Object, asEvent:Boolean):Array {
	
	};
	/**
 * @description A convenience method for browsing to a given URL.
 * @param url - The url to open in the system's default browser. Be sure to specify the scheme of the url (e.g., 'http:' or 'file:').
*/
	showURL(url:String):void {
	
	};
	/**
 * @description Display a message in the current status interface.
 * @param message - The string to be displayed (and logged if logging is enabled)
 * @param addToLog - If true (default), the message will also be added to the log.
*/
	statusLine(message:String, addToLog:Boolean):void {
	
	};
	/**
 * @returns true if the application is using a user interface, otherwise false.
*/
	usingInterface():Boolean {
	
	};
	/**
 * @description Writes a warning message to the application log.
 * @param message - The message to write.
*/
	warning(message:String):void {
	
	};
	/**
 * @description Saves out a user configuration script to the given filename. If no filename is given, the script is saved to the same file read from in startup(). The run() function calls this at the end of each execution.
 * @returns true if the file was written successfully, otherwise false.
 * @param filename - The name of the file to save a configuration script to. If empty (default), the default configuration script for the running application instance is used - i.e., getAppDataInstancePath() + '/' + "StartupScript.dsa" is used.
*/
	writeConfigScript(configScriptFilename:String):Boolean {
	
	};
	/**
 * @description Write a message to the application log.
 * @since 4.14.0.4
 * @param message - The message to write.
 * @param immediate - If true, the message (and any others in the log buffer) will be immediately written to the log file. If false, the message will be written to the log buffer - the log buffer will be automatically flushed (written to file) if it exceeds the maximum defined buffer size.
*/
	writeToLog(message:String, immediate:Boolean):void {
	
	};
	/**
 * @description Writes a message to the application log.
 * @since 4.14.0.4
 * @param message - The message to write.
*/
	writeToLog(message:String):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted immediately after the main event loop exits.
 * @signature `"closing()"`
 * @event
*/
	closing():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when a debug message is sent to the application.
 * @signature `"debugMsg(const QString&)"`
 * @event
*/
	debugMsg(msg:String):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the event loop is started on the application.
 * @signature `"eventLoopStarted()"`
 * @event
*/
	eventLoopStarted():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when a MouseButtonDblClick or MouseButtonRelease event occurs on the application.
 * @signature `"mouseEvent()"`
 * @event
*/
	mouseEvent():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when multi-threading has changed on the application.
 * @signature `"multiThreadingChanged(bool)"`
 * @event
*/
	multiThreadingChanged(onOff:Boolean):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the Scene Builder dialog has been rejected by the user, or when none of the files specified in the Scene Builder definition can be found.
 * @signature `"sceneBuilderAccepted(const QStringList&)"`
 * @event
*/
	sceneBuilderAccepted(selections:Array):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the Scene Builder dialog has been rejected by the user, or when none of the files specified in the Scene Builder definition can be found.
 * @signature `"sceneBuilderRejected()"`
 * @event
*/
	sceneBuilderRejected():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted after the application has finished its startup just before the main event loop begins.
 * @signature `"starting()"`
 * @event
*/
	starting():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when a the style is about to change on the application.
 * @signature `"styleAboutToChange()"`
 * @event
*/
	styleAboutToChange():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the application wide style has changed.
 * @signature `"styleChanged(DzStyle*)"`
 * @event
*/
	styleChanged(newStyle:DzStyle):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when a warning message is sent to the application.
 * @signature `"warningMsg(const QString&)"`
 * @event
*/
	warningMsg(msg:String):void {
	
	};

}
/**
 * @classdesc Application Settings are used to store and retrieve settings that persist from one execution of the appliction to the next. On Windows, the settings are saved in the registry. On Mac, these settings are saved via Mac preference plist files.
You can create an instance of this class any time you need to read or write persistent settings. This class is a replacement for DzAppSettingsMgr as it is easier and safer to use. Since each instance is separate, the current path of one instance will not affect the rest of the application. It is also not necessary to call popPath() to put this class back into its previous state.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/appsettings_dz} */
class DzAppSettings extends DzBase {
	/**
 * @description Default Constructor - creates a new settings object that starts out at the default application path.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Constructor - creates a new settings object that pushes the given path onto the default application path. This is the same as using the default constructor and then calling pushPath() with the given path.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @returns true if this settings contains the named value, otherwise false.
 * @param key - The name of the value to check.
*/
	containsValue(key:String):Boolean {
	
	};
	/**
 * @description Read a boolean value from the given key.
 * @returns The value of the requested key.
 * @param key - The name of the value to read.
 * @param def - Default value - this value is returned if the named value fails to be read.
*/
	getBoolValue(key:String, def:Boolean):Boolean {
	
	};
	/**
 * @description Read a color value from the given key.
 * @returns The value of the requested key.
 * @param key - The name of the value to read.
 * @param def - Default value - this value is returned if the named value fails to be read.
*/
	getColorValue(key:String, def:Color):Color {
	
	};
	/**
 * @description Read a float color value from the given key.
 * @returns The value of the requested key.
 * @param key - The name of the value to read.
 * @param def - Default value - this value is returned if the named value fails to be read.
*/
	getFloatColorValue(key:String, def:DzFloatColor):DzFloatColor {
	
	};
	/**
 * @description Read a floating point value from the given key.
 * @returns The value of the requested key.
 * @param key - The name of the value to read.
 * @param def - Default value - this value is returned if the named value fails to be read.
*/
	getFloatValue(key:String, def:Number):Number {
	
	};
	/**
 * @description Read a integer value from the given key.
 * @returns The value of the requested key.
 * @param key - The name of the value to read.
 * @param def - Default value - this value is returned if the named value fails to be read.
*/
	getIntValue(key:String, def:Number):Number {
	
	};
	/**
 * @description Read a string value from the given key.
 * @returns The value of the requested key.
 * @param key - The name of the value to read.
 * @param def - Default value - this value is returned if the named value fails to be read.
*/
	getStringValue(key:String, def:String):String {
	
	};
	/**
 * @description Pops a temporary key path off the top of the stack.
*/
	popPath():void {
	
	};
	/**
 * @description Sets the current key path temporarily to the given path; popPath() can be called to remove this path.
 * @param path - The sub-path to add to the current key path.
*/
	pushPath(path:String):void {
	
	};
	/**
 * @description Removes a setting by name.
 * @returns true if the key/value existed and was successfully removed, otherwise false.
 * @param key - The name of the key to remove.
*/
	removeValue(key:String):Boolean {
	
	};
	/**
 * @description Sets a key with a boolean value.
 * @returns true if the key/value was successfully set, otherwise false.
 * @param key - The name of the key to write.
 * @param setting - The value to set.
*/
	setBoolValue(key:String, setting:Boolean):Boolean {
	
	};
	/**
 * @description Sets a key with a color value.
 * @returns true if the key/value was successfully set, otherwise false.
 * @param key - The name of the key to write.
 * @param setting - The value to set.
*/
	setColorValue(key:String, setting:Color):Boolean {
	
	};
	/**
 * @description Sets a key with a float color value.
 * @returns true if the key/value was successfully set, otherwise false.
 * @param key - The name of the key to write.
 * @param setting - The value to set.
*/
	setFloatColorValue(key:String, setting:DzFloatColor):Boolean {
	
	};
	/**
 * @description Sets a key with a floating point value.
 * @returns true if the key/value was successfully set, otherwise false.
 * @param key - The name of the key to write.
 * @param setting - The value to set.
*/
	setFloatValue(key:String, setting:Number):Boolean {
	
	};
	/**
 * @description Sets a key with a integer value.
 * @returns true if the key/value was successfully set, otherwise false.
 * @param key - The name of the key to write.
 * @param setting - The value to set.
*/
	setIntValue(key:String, setting:Number):Boolean {
	
	};
	/**
 * @description Sets a key with a string value.
 * @returns true if the key/value was successfully set, otherwise false.
 * @param key - The name of the key to write.
 * @param setting - The value to set.
*/
	setStringValue(key:String, setting:String):Boolean {
	
	};

}
/**
 * @classdesc TODO:
Add detailed description.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/arrayhelper_dz} */
class DzArrayHelper extends QObject {
	/**
 * @description Default Constructor
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @returns A copy of list with object appended if object did not already exist in list
 * @param list - The Array to append object to
 * @param value - The Object to append to list
*/
	addToArray(list:Array, value:Object):Array {
	
	};
	/**
 * @returns The index into list if object was found, otherwise -1
 * @param list - The Array to check for object
 * @param value - The Object to check list for
*/
	isInArray(list:Array, value:Object):Number {
	
	};
	/**
 * @returns The index into list if object was found, otherwise -1
 * @param list - The Array to check for object
 * @param value - The Object to check list for; using the objects .name property
*/
	isInArrayByName(list:Array, obj:Object):Number {
	
	};

}
/**
 * @classdesc An "Asset" serves as an abstraction between the presentation of a content file and the actual file that resides on disk; it is a "container" for information about a content file.
At a minimum, an asset contains a reference to the relative path and filename of a file.
Metadata
When the Content Management System (CMS) is active, an asset provides an interface to its metadata within the content database. This metadata includes information such as what type of asset it is, what it is used for, what it is compatible with, which category(ies) it is presented to the user in, etc.
Conceptually, each asset belongs to exactly one "Product". By default, and until/unless modified, all newly created assets are assigned to the "LOCAL USER" product. An asset is uniquely identified within a product by the combination of its relative path and filename. While any number of products can reference a file with the same relative path and filename combination, each product's concept of that combination is unique (even if their metadata is identical).
The metadata for a given asset is divided into 2 distinct types; that which is owned and/or maintained by the vendor (the originating source), and that which is owned and/or maintained by the end-user. Unless the metadata component (e.g., userKeywords, userNotes, etc), the product (e.g., "LOCAL USER"), or the store (e.g., "LOCAL USER") indicate "user" in their name, any assumption (if there is to be one) about which type the data is should be that which is owned and/or maintained by the vendor.
The metadata for an asset that is "installed" and which belongs to a product associated with a "Store" (source) other than the "LOCAL USER" store is owned by the vendor. Conversely, the metadata for an asset that is created by the user and/or belongs to a product associated with the "LOCAL USER" store is owned by the user. The exceptions to this are those attributes which integrate "user" into their name; which in fact always belong to the user.
The significance of the distinction between the 2 types of metadata comes down to how the data is handled during an update and whether or not an effort is made to preserve it. Metadata that is owned and/or maintained by the vendor can be summarily purged during an update. This provides a vendor with the means to clean up all potential prior versions of the metadata without being faced with complex bookkeeping tasks.
See Also:
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/asset_dz} */
class DzAsset extends DzRefCountedItem, QObject {
	/**
 * @description Holds the asset identifier for this asset. (Read Only)
	*/
	assetID:Object;
	/**
 * @description Holds the name for this asset. (Read Only)
	*/
	assetName:String;
	/**
 * @description Holds the vendor intended audience for this asset.
	*/
	audience:Number;
	/**
 * @description Holds a list of all categories that this asset is in. (Read Only)
	*/
	categories:Array;
	/**
 * @description Holds whether the companion file (if any) is a DAZ Script. (Read Only)
	*/
	companionIsScript:Boolean;
	/**
 * @description Holds the full path to the folder the companion file is in. (Read Only)
	*/
	companionPath:String;
	/**
 * @description Holds a list of all compatibility bases that this asset is compatible with. (Read Only)
	*/
	compatibilities:Array;
	/**
 * @description Holds the [vendor] compatibility base for this asset.
	*/
	compatibilityBase:String;
	/**
 * @description Holds the [vendor] content type for this asset.
	*/
	contentType:String;
	/**
 * @description Holds the date this asset was created. (Read Only)
	*/
	dateCreated:Date;
	/**
 * @description Holds the date this asset was last modified. (Read Only)
	*/
	dateLastModified:Date;
	/**
 * @description Holds the vendor description for this asset.
	*/
	description:String;
	/**
 * @description Holds the name displayed to the user for this asset. (Read Only)
	*/
	displayName:String;
	/**
 * @description Holds the group identifier for this asset. 0 = default, < 0 = app defined, > 0 = user defined.
	*/
	groupId:Number;
	/**
 * @description Holds whether this asset has metadata provided by the cloud. (Read Only)
	*/
	hasCloudMetadata:Boolean;
	/**
 * @description Holds whether this asset is a non-native file and a DAZ Script or native file with the same basename exists in the same directory. (Read Only)
	*/
	hasCompanion:Boolean;
	/**
 * @description Holds whether this asset is a non-native file and a DAZ Script with the same basename exists in the same directory. (Read Only)
	*/
	hasCompanionScript:Boolean;
	/**
 * @description Holds whether this asset should be hidden in asset views.
	*/
	hidden:Boolean;
	/**
 * @description Holds the icon path for this asset. (Read Only)
	*/
	icon:Pixmap;
	/**
 * @description Holds whether this asset can be installed from the cloud. (Read Only)
	*/
	isCloudInstallable:Boolean;
	/**
 * @description Holds whether this asset is installed from the cloud. (Read Only)
	*/
	isCloudInstalled:Boolean;
	/**
 * @description Holds whether this asset is managed by the cloud. (Read Only)
	*/
	isCloudOwned:Boolean;
	/**
 * @description Holds whether this asset is installed in the database. (Read Only)
	*/
	isInstalled:Boolean;
	/**
 * @description Holds whether the metadata for this asset is valid. (Read Only)
	*/
	isMetadataValid:Boolean;
	/**
 * @description Holds whether this asset is a native DAZ Studio file. (Read Only)
	*/
	isNative:Boolean;
	/**
 * @description Holds whether this asset is a native DAZ Studio script file. (Read Only)
	*/
	isScript:Boolean;
	/**
 * @description Holds whether this asset is a symbolic link. (Read Only)
	*/
	isSymLink:Boolean;
	/**
 * @description Holds whether this asset is owned by a vendor or by the user. (Read Only)
	*/
	isVendor:Boolean;
	/**
 * @description Holds whether this asset needs to be installed from the cloud. (Read Only)
	*/
	needsCloudInstall:Boolean;
	/**
 * @description Holds whether this asset needs to be updated from the cloud. (Read Only)
	*/
	needsCloudUpdate:Boolean;
	/**
 * @description Holds the user notes for this asset.
	*/
	notes:String;
	/**
 * @description Holds the original filename for this asset. (Read Only)
	*/
	originalFilename:String;
	/**
 * @description Holds the original path for this asset. (Read Only)
	*/
	originalPath:String;
	/**
 * @description Holds the Globally Unique Identifier (GUID) for the product this asset belongs to. (Read Only)
	*/
	productGUID:String;
	/**
 * @description Holds the product identifier for the product that this asset belongs to. (Read Only)
	*/
	productID:String;
	/**
 * @description Holds the name of the product this asset belongs to. (Read Only)
	*/
	productName:String;
	/**
 * @description Holds the base of the product path in the cloud folder for cloud assets. (Read Only)
	*/
	productPath:String;
	/**
 * @description Holds the icon path for this asset. (Read Only)
	*/
	smallIcon:Pixmap;
	/**
 * @description Holds the store identifier for the product that this asset belongs to. (Read Only)
	*/
	storeID:String;
	/**
 * @description Holds the path that the symbolic link is referencing (if any).
	*/
	symLinkPath:String;
	/**
 * @description Holds the URL for this asset. (Read Only)
	*/
	url:String;
	/**
 * @description Holds the encoded URL for this asset. (Read Only)
	*/
	urlEncoded:String;
	/**
 * @description Holds a list of user owned categories that this asset is in. (Read Only)
	*/
	userCategories:Array;
	/**
 * @description Holds a list of user owned compatibility bases that this asset is compatible with. (Read Only)
	*/
	userCompatibilities:Array;
	/**
 * @description Holds the user keywords for this asset.
	*/
	userKeywords:Array;
	/**
 * @description Holds a list of vendor owned categories that this asset is in. (Read Only)
	*/
	vendorCategories:Array;
	/**
 * @description Holds a list of vendor owned compatibility bases that this asset is compatible with. (Read Only)
	*/
	vendorCompatibilities:Array;
	/**
 * @description Holds the vendor keywords for this asset.
	*/
	vendorKeywords:Array;
	/**
 * @description Sets the compatibility bases that this asset is compatible with.
 * @since 4.9.0.2
 * @param bases - The list of compatibility bases this asset is compatible with.
 * @param create - If true, creates compatibility bases that do not exist. If false, compatibility will only be established for compatibility bases that already exist.
*/
	addCompatibilities(bases:Array, create:Boolean):void {
	
	};
	/**
 * @description Sets the categories for this asset.
 * @since 4.9.0.2
 * @param categories - The list of categories to add this asset to.
 * @param create - If true, creates categories that do not exist. If false, only categories that already exist will be assigned.
*/
	addToCategories(categories:Array, create:Boolean):void {
	
	};
	/**
 * @description Sets this asset as belonging to the default group identifier; 0.
 * @since 4.9.0.11
*/
	clearGroup():void {
	
	};
	/**
 * @description Forces the icon for this asset to reload.
*/
	forceImageReload():void {
	
	};
	/**
 * @returns The url of this asset as a local file path.
*/
	getAsLocalFile():String {
	
	};
	/**
 * @returns The base file extension for this asset; without any encryption extension.
*/
	getBaseExtension():String {
	
	};
	/**
 * @returns The extension to use for DAZ Studio file link.
 * @since 4.9.0.30
*/
	getDSLinkExtension():String {
	
	};
	/**
 * @returns The text that is placed inside a DAZ Studio file link.
 * @since 4.9.0.30
*/
	getDSLinkText():String {
	
	};
	/**
 * @returns The asset container that owns this asset.
*/
	getOwner():DzAbstractAssetContainer {
	
	};
	/**
 * @returns The product that this asset belongs to (if any), otherwise null.
 * @since 4.9.0.2
*/
	getProduct():DzProductAssetContainer {
	
	};
	/**
 * @returns The relative file path for this asset.
*/
	getRelativeFilePath():String {
	
	};
	/**
 * @returns true if this asset is a member of group, otherwise false.
 * @since 4.9.0.11
 * @attention 0 = default, < 0 = app defined, > 0 = user defined
*/
	isGroup(id:Number):Boolean {
	
	};
	/**
 * @description Loads the default icon for this asset.
 * @returns true if the default icon for this asset is successfully loaded, otherwise false.
 * @param delayLoad - If true, loading of the icon is delayed.
*/
	loadDefaultIcon(delayLoad:Boolean):Boolean {
	
	};
	/**
 * @returns A map of the key value pairs in a DAZ Studio link file.
 * @since 4.9.0.30
 * @param linkPath - The path of the file to read from.
*/
	readLinkData(linkPath:String):Object {
	
	};
	/**
 * @description Removes the compatibility bases that this asset is compatible with.
 * @since 4.9.2.53
 * @param bases - The list of compatibilities to remove from this asset.
 * @param isVender - If true, the compatibilities being looked up are owned by the vendor.
*/
	removeCompatibilities(bases:Array, isVender:Boolean):void {
	
	};
	/**
 * @description Removes this asset from the categories.
 * @since 4.9.2.53
 * @param categories - The list of categories to remove this asset from.
 * @param isVender - If true, the categories being looked up are owned by the vendor.
*/
	removeFromCategories(categories:Array, isVender:Boolean):void {
	
	};
	/**
 * @description Changes the name of this asset.
 * @returns true if the operation is successful, otherwise false.
 * @param name - The new name for this asset.
*/
	rename(name:String):Boolean {
	
	};
	/**
 * @returns true if a DAZ Studio file link to this asset is saved, otherwise false.
 * @since 4.9.0.30
 * @param linkSavePath - The path of the file to save to.
 * @attention Will overwrite and add correct extension if possible.
*/
	saveDSLink(linkSavePath:String):Boolean {
	
	};
	/**
 * @description Sets whether existence of this asset should be ignored.
*/
	setIgnoreExists(onOff:Boolean):void {
	
	};
	/**
 * @returns This asset expressed as a DzUri.
 * @since 4.9.0.40
*/
	toUri():DzUri {
	
	};
	/**
 * @returns true if this asset is updated, otherwise false.
 * @since 4.9.2.69
 * @param guid - The Globally Unique Identifier (GUID) for the product to update from. Leave empty to update using the current product if an association is already made.
*/
	updateFromMetadata(guid:String):Boolean {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the image for this asset has changed.
 * @signature `"assetImageChanged(DzAsset*)"`
 * @event
*/
	assetImageChanged(asset:DzAsset):void {
	
	};

}
/**
 * @classdesc An asset save filter for saving a file in the DSON format.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/assetfileoutfilter_dz} */
class DzAssetFileOutFilter extends DzAssetIOFilter {

}
/**
 * @classdesc Save filter classes save out a subset of scene settings such as poses, light sets, camera sets, etc. in the DSON format.
See Also:
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/assetiofilter_dz} */
class DzAssetIOFilter extends DzFileIO {
	/**
 * @description Saves to a file.
 * @returns DZ_NO_ERROR on success, otherwise an error code.
 * @param filePath - The full path of the file to save to.
 * @param startingDir - The initial directory to start the save dialog in.
*/
	doSave(filename:String, startingDir:String):DzError {
	
	};
	/**
 * @description Saves to a file.
 * @returns DZ_NO_ERROR on success, otherwise an error code.
 * @param options - The options for the save.
 * @param filePath - The path of the file to save to.
 * @param startingDir - The initial directory to start the file browse.
*/
	doSave(options:DzFileIOSettings, filename:String, startingDir:String):DzError {
	
	};
	/**
 * @returns The URI to use when referring to the given asset from a definition.
*/
	getAssetDefinitionUri(base:DzBase):DzUri {
	
	};
	/**
 * @returns The URI to use when referring to the given asset from an instance.
*/
	getAssetInstanceUri(base:DzBase):DzUri {
	
	};
	/**
 * @returns The compatibility base of the saved file.
*/
	getCompatiblityBase():String {
	
	};
	/**
 * @returns The content type of the saved file.
*/
	getContentType():String {
	
	};
	/**
 * @returns The name of the filter.
*/
	getDescription():String {
	
	};
	/**
 * @returns The path of the saved file.
*/
	getDoSavePath():String {
	
	};
	/**
 * @returns The last path used to load/save files with the filter.
*/
	getLoadSavePath():String {
	
	};
	/**
 * @returns The default relative path for saving files with this filter.
*/
	getStandardSaveRelativePath():String {
	
	};
	/**
 * @returns true if this filter saves support files, otherwise false.
*/
	isSupportAssetFilter():Boolean {
	
	};
	/**
 * @description Sets the path to use for loading/saving files with this filter.
 * @param path - The path to set.
*/
	setLoadSavePath(path:String):void {
	
	};

}
/**
 * @classdesc Responsible for the management of the filters that load/save assets in the native DAZ Scene Object Notation (DSON) format.
There is only one instance of this manager in an application. This instance is created and owned by DzApp. Request the instance via DzApp.getAssetIOMgr().
See Also:
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/assetiomgr_dz} */
class DzAssetIOMgr extends QObject {
	/**
 * @description ENUMERATOR: If no nodes (or only the default camera) exist, this behaves as OpenNew. Otherwise, this behaves as MergeFile.
*/
	
	static DefaultMethod;
	/**
 * @description ENUMERATOR: Resets the scene to its initial, clean state. All scene data is deleted and the undo stack is cleared.
*/
	
	static OpenNew;
	/**
 * @description ENUMERATOR: Merges the file with any pre-existing elements in the scene.
*/
	
	static MergeFile;
	/**
 * @returns The current save filter (if any), otherwise null.
 * @since 4.15.0.16
*/
	currentSaveFilter():DzAssetIOFilter {
	
	};
	/**
 * @returns The index of the asset filter with the given classname (if any), otherwise -1.
 * @since 4.11.0.225
 * @param className - The classname of the asset filter to find.
*/
	static findAssetFilterIndex(className:String):Number {
	
	};
	/**
 * @description Deprecated
*/
	static findFilter(className:String):Number {
	
	};
	/**
 * @returns The object for the specified URI (if any), otherwise null.
 * @since 4.9.4.111
 * @param uri - The URI of an asset instance to find during file load.
*/
	static findObjectInstance(uri:DzUri):QObject {
	
	};
	/**
 * @returns A new instance of the i'th asset filter in the list (if valid), otherwise null.
 * @since 4.11.0.225
 * @param i - The index of the asset filter to get.
 * @attention You are responsible for deleting the returned instance (if any).
*/
	static getAssetFilter(i:Number):DzAssetIOFilter {
	
	};
	/**
 * @returns The name of the i'th asset filter (if valid), otherwise an empty string.
 * @since 4.11.0.225
 * @param i - The index of the asset filter to get the name of.
*/
	static getAssetFilterName(i:Number):String {
	
	};
	/**
 * @description Deprecated
*/
	static getFilter(i:Number):DzAssetIOFilter {
	
	};
	/**
 * @description Deprecated
*/
	static getFilterName(i:Number):String {
	
	};
	/**
 * @returns The number of save filters currently supported.
 * @since 4.11.0.225
*/
	getNumAssetFilters():Number {
	
	};
	/**
 * @description Deprecated
*/
	getNumFilters():Number {
	
	};
	/**
 * @returns if data is currently being read, otherwise false.
 * @since 4.15.0.16
*/
	isReading():Boolean {
	
	};
	/**
 * @returns if data is currently being read or written, otherwise false.
 * @since 4.15.0.16
*/
	isReadingOrWriting():Boolean {
	
	};
	/**
 * @returns if data is currently being written, otherwise false.
 * @since 4.15.0.16
*/
	isWriting():Boolean {
	
	};
	/**
 * @description Loads an asset file.
 * @returns DZ_NO_ERROR if the file load was successful, otherwise an appropriate error code.
 * @param filename - The full name of the file to load.
 * @param method - The method to use for loading.
 * @param filter - The filter to use.
*/
	doLoad(filename:String, method:DzOpenMethod, filter:DzFileLoadFilter):DzError {
	
	};
	/**
 * @description Save the scene contents to a file with the given asset filter. Prompts the user for a file to save to.
 * @returns DZ_NO_ERROR if the file save was successful, otherwise an appropriate error code.
 * @param filterIndex - The index of the asset filter to use.
*/
	doSave(filterIndex:Number):DzError {
	
	};
	/**
 * @description Save the scene contents to a file with the given asset filter. Prompts the user for a file to save to.
 * @returns DZ_NO_ERROR if the file save was successful, otherwise an appropriate error code.
 * @param filter - The filter to use.
 * @param options - The options to use.
 * @param saveOnly - Whether to only save the file, or to also create an associated icon and assign metadata.
 * @param filename - The full name of the file to save to.
 * @param startingDir - The path of the directory to start the save dialog in.
 * @param category - The category to assign the saved file to.
*/
	doSaveWithOptions(filter:DzAssetIOFilter, options:DzFileIOSettings, saveOnly:Boolean, filename:String, startingDir:String, category:String):DzError {
	
	};
	/**
 * @description Save the scene contents to a file. Prompts the user for a file to save to.
 * @returns DZ_NO_ERROR if the file save was successful, otherwise an appropriate error code.
*/
	doSceneSaveAs():DzError {
	
	};
	/**
 * @returns If isReadingOrWriting() is false, an invalid DzAuthor. If isReading() is true, the contributor for the file being read. If isWriting() is true, the contributor for the file being written.
 * @since 4.15.0.16
*/
	getCurrentAssetContributor():DzAuthor {
	
	};
	/**
 * @returns If isReadingOrWriting() is false, an empty string. If isReading() is true, the asset identifier for the file being read. If isWriting() is true, the asset identifier for the file being written.
 * @since 4.15.0.16
*/
	getCurrentAssetId():String {
	
	};
	/**
 * @returns If isReadingOrWriting() is false, an invalid DzVersion. If isReading() is true, the revision for the file being read. If isWriting() is true, the revision for the file being written.
 * @since 4.15.0.16
*/
	getCurrentAssetRevision():DzVersion {
	
	};
	/**
 * @returns If isReadingOrWriting() is false, an empty string. If isReading() is true, the asset type for the file being read. If isWriting() is true, the asset type for the file being written.
 * @since 4.15.0.16
*/
	getCurrentAssetType():String {
	
	};
	/**
 * @returns If isReadingOrWriting() is false, an empty object. If isReading() is true, an object containing "file_version" and "asset_info" for the file being read. If isWriting() is true, an object containing "file_version" and "asset_info" for the file being written.
 * @since 4.15.0.16
*/
	getCurrentFileInfo():Object {
	
	};
	/**
 * @returns The full name of the file that is currently being read from or written to (if any), otherwise an empty string.
 * @since 4.15.0.16
*/
	getCurrentFilename():String {
	
	};
	/**
 * @returns If isReadingOrWriting() is false, an invalid DzVersion. If isReading() is true, the "file_version" for the file being read. If isWriting() is true, the "file_version" for the file being written.
 * @since 4.15.0.16
*/
	getCurrentFileVersion():DzVersion {
	
	};
	/**
 * @returns The default path for the DSON assets cache.
*/
	getDefaultDSONAssetCachePath():String {
	
	};
	/**
 * @returns The path that the DSON assets cache resides in.
*/
	getDSONAssetCachePath():String {
	
	};
	/**
 * @returns The "asset_info" contributor embedded in an asset file (if any), otherwise an invalid DzAuthor.
 * @since 4.15.0.16
 * @param filename - The full name of the file to retrieve the information from.
*/
	getFileAssetContributor(filename:String):DzAuthor {
	
	};
	/**
 * @returns The "asset_info" type embedded in an asset file (if any), otherwise an empty string.
 * @since 4.15.0.16
 * @param filename - The full name of the file to retrieve the information from.
*/
	getFileAssetType(filename:String):String {
	
	};
	/**
 * @returns An object containing the "file_version" and "asset_info" embedded in the specified asset file (if any), otherwise an empty object. The "asset_info" only contains "type" and "contributor" values - it does not include the "id", "revision", or "modified" values.
 * @since 4.15.0.16
 * @param filename - The full name of the file to retrieve the information from.
*/
	getFileInfo(filename:String):Object {
	
	};
	/**
 * @returns The "file_version" embedded in an asset file (if any), otherwise an invalid DzVersion.
 * @since 4.15.0.16
 * @param filename - The full name of the file to retrieve the information from.
*/
	getFileVersion(filename:String):DzVersion {
	
	};
	/**
 * @returns The path of the last directory that files were loaded from.
*/
	getLoadPath():String {
	
	};
	/**
 * @returns The path of the last directory that files were saved to.
*/
	getSavePath():String {
	
	};
	/**
 * @description Loads an asset from URI.
 * @returns DZ_NO_ERROR if the file load was successful, otherwise an appropriate error code.
 * @param fileUri - The URI of the file to load.
 * @param method - The method to use for loading.
 * @param filter - The filter to use.
*/
	loadFromUri(fileUri:DzUri, method:DzOpenMethod, filter:DzFileLoadFilter):DzError {
	
	};
	/**
 * @description Sets the path for the DSON asset cache.
 * @param cacheFullPath - The path to set.
*/
	setDSONAssetCachePath(cacheFullPath:String):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when an asset has been loaded.
 * @signature `"assetImported()"`
 * @event
*/
	assetImported():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when an asset load is starting.
 * @signature `"assetImportStarting()"`
 * @event
*/
	assetImportStarting():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when an asset load error occures.
 * @signature `"assetLoadError(const QString&)"`
 * @event
*/
	assetLoadError(filename:String):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when an asset load is finished.
 * @signature `"assetLoadFinished(const QString&)"`
 * @event
*/
	assetLoadFinished(filename:String):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when an asset load has started.
 * @signature `"assetLoadStarted(const QString&)"`
 * @event
*/
	assetLoadStarted(filename:String):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when an asset has been saved.
 * @signature `"assetSaved()"`
 * @event
*/
	assetSaved():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when an asset save error occurs.
 * @signature `"assetSaveError(const QString&)"`
 * @event
*/
	assetSaveError(filename:String):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when an asset save is finished.
 * @signature `"assetSaveFinished(const QString&)"`
 * @event
*/
	assetSaveFinished(filename:String):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when an asset save has started.
 * @signature `"assetSaveStarted(const QString&)"`
 * @event
*/
	assetSaveStarted(filename:String):void {
	
	};

}
/**
 * @classdesc Responsible for the management of database records associated with "content" (digital assets).
There is only one instance of this manager in an application. This instance is created and owned by DzApp. Request the instance via DzApp.getAssetMgr().
See Also:
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/assetmgr_dz} */
class DzAssetMgr extends DzBase {
	/**
 * @description ENUMERATOR: No options
*/
	
	static None;
	/**
 * @description ENUMERATOR: A whole word search. Only works with file system based searches.
*/
	
	static WholeWord;
	/**
 * @description ENUMERATOR: A Regular Expression search. Only works with file system based searches.
*/
	
	static RegExp;
	/**
 * @description ENUMERATOR: Include native scene files (*.duf, *.dsf, *.daz) in the search.
*/
	
	static NativeScenes;
	/**
 * @description ENUMERATOR: Include native script files (*.ds, *.dsa, *.dsb, *.dse) in the search.
*/
	
	static NativeScripts;
	/**
 * @description ENUMERATOR: Include Poser Character files (*.cr2, *.crz) in the search.
*/
	
	static PoserFigures;
	/**
 * @description ENUMERATOR: Include Poser Pose files (*.pz2, *.p2z) in the search.
*/
	
	static PoserPoses;
	/**
 * @description ENUMERATOR: Include Poser Prop files (*.pp2, *.ppz) in the search.
*/
	
	static PoserProps;
	/**
 * @description ENUMERATOR: Include Poser Hair files (*.hr2, *.hrz) in the search.
*/
	
	static PoserHair;
	/**
 * @description ENUMERATOR: Include Poser Face (Expression) files (*.fc2,*.fcz) in the search.
*/
	
	static PoserFaces;
	/**
 * @description ENUMERATOR: Include Poser Light files (*.lt2, *.ltz) in the search.
*/
	
	static PoserLights;
	/**
 * @description ENUMERATOR: Include Poser Camera files (*.cm2, *.cmz) in the search.
*/
	
	static PoserCameras;
	/**
 * @description ENUMERATOR: Include Poser Hand files (*.hd2, *.hdz) in the search.
*/
	
	static PoserHands;
	/**
 * @description ENUMERATOR: Include Poser Material Collection files (*.mc6, *.mcz) in the search.
*/
	
	static PoserMaterials;
	/**
 * @description ENUMERATOR: Include Poser Scene files (*.pz3, *.pzz) in the search.
*/
	
	static PoserScenes;
	/**
 * @description ENUMERATOR: Include general import files in the search.
*/
	
	static ImportFiles;
	/**
 * @description ENUMERATOR: Include all native files (*.duf, *.dsf, *.daz, *.ds, *.dsa, *.dsb, *.dse) in the search.
*/
	
	static AllNativeFiles;
	/**
 * @description ENUMERATOR: Mask for no native files in the search.
*/
	
	static NoNativeFilesMask;
	/**
 * @description ENUMERATOR: Include all Poser files in the search.
*/
	
	static AllPoserFiles;
	/**
 * @description ENUMERATOR: Mask for no Poser files in the search.
*/
	
	static NoPoserFilesMask;
	/**
 * @description ENUMERATOR: Search through all files.
*/
	
	static AllFiles;
	/**
 * @description ENUMERATOR: Same as AllFiles.
*/
	
	static DefaultOptions;
	/**
 * @description ENUMERATOR: Waits for all active clients to disconnect and any online backup to finish. If the service is in hot standby, recovery and streaming replication will be terminated once all clients have disconnected.
*/
	
	static SM_Smart;
	/**
 * @description ENUMERATOR: Does not wait for clients to disconnect and terminates an online backup in progress. All active transactions are rolled back and clients are forcibly disconnected, then the service is shut down.
*/
	
	static SM_Fast;
	/**
 * @description ENUMERATOR: Aborts all service processes immediately, without a clean shutdown.
*/
	
	static SM_Immediate;
	/**
 * @returns An escaped version of searchTerm
 * @param searchTerm - The search term to be escaped.
*/
	static escapeSearchTerm(searchTerm:String):String {
	
	};
	/**
 * @returns A string representing the portion of categoryPaths that is common.
 * @since 4.9.2.68
 * @param categoryPaths - The list of category paths to find a common path in. This can be a list of strings, or a list of lists of strings.
 * @param flatten - If true, the categories are processed as if they are a single list. If false (default), the deepest path common to all lists will be chosen. In either case, non-default categorization is preferred over default categorization.
*/
	static findCommonBaseCategoryPath(categoryPaths:Array, flatten:Boolean):String {
	
	};
	/**
 * @returns The asset URI for node, or an empty string if node is null.
 * @param node - The node to get the asset URI for.
*/
	static getAssetUriForNode(node:DzNode):String {
	
	};
	/**
 * @returns An identifier for the top level categories container.
*/
	getCategoriesID():String {
	
	};
	/**
 * @returns A slash ("/") delimited string version of the node's compatibility base path (if any), otherwise an empty string.
 * @param node - The node to get compatibility base for.
*/
	static getCompatibilityBasePathForNode(node:DzNode):String {
	
	};
	/**
 * @returns An identifier for the top level compatibility bases container.
 * @since 4.11.0.93
*/
	getCompatibilityBasesID():String {
	
	};
	/**
 * @returns An identifier for the top level import formats container.
*/
	getImportDirID():String {
	
	};
	/**
 * @returns An identifier for the top level Poser formats container.
*/
	getPoserDirID():String {
	
	};
	/**
 * @returns The identifier for the virtual folder container within the top level Poser formats container.
 * @since 4.9.2.68
*/
	getPoserVirtualDirID():Array {
	
	};
	/**
 * @description Prompts the user for a valid product name.
 * @returns A string that represents a valid product name (if allowEmpty is false - default), otherwise an empty string.
 * @since 4.12.1.100
 * @param name - The product name (if any) to use if a product with the same name does not already exist in the database. An empty string, or a non-unique name, will cause the user to be prompted for a unique name.
 * @param choices - A list of pre-defined choices (if any) to provide the user.
 * @param allowEmpty - If true, an empty value is considered acceptable.
*/
	static getProductName(name:String, choices:Array, allowEmpty:Boolean):String {
	
	};
	/**
 * @returns An identifier for the top level products container.
*/
	getProductsID():String {
	
	};
	/**
 * @returns A string path/search combination or empty string if search is not in path.
 * @param path - The path to the file/folder that real, on disk, casing is desired for.
 * @param search - A file/folder in the path to get the on disk casing for.
*/
	static getRealPathCasing(path:String, search:String):String {
	
	};
	/**
 * @returns The relative metadata file path.
 * @since 4.9.4.31
 * @param store - The store ID for the product.
 * @param token - The token for the product.
 * @param title - The title of the product.
 * @param extension - The extension of the meta file.
*/
	static getRelativeProductMetafilePath(store:String, token:String, title:String, extension:String):String {
	
	};
	/**
 * @returns A list of the folder names that are considered special, and thus handled in specific ways, in a Poser runtime.
*/
	getSpecialPoserFolders():Array {
	
	};
	/**
 * @returns An identifier for the top level DAZ Studio formats container.
*/
	getStudioDirID():String {
	
	};
	/**
 * @returns A list of the folder names excluded when building the native user-facing folder structure.
*/
	getStudioExcludes():Array {
	
	};
	/**
 * @returns The identifier for the virtual folder container within the top level DAZ Studio formats container.
 * @since 4.9.2.68
*/
	getStudioVirtualDirID():Array {
	
	};
	/**
 * @returns A normalized version of type.
 * @param type - The path/type to be normalized.
 * @param relative - Whether or not this is a relative (or absolute) path.
*/
	static normalizePath(type:String, relative:Boolean):String {
	
	};
	/**
 * @description Saves user owned metadata to an XML file (or a series of XML files).
 * @returns DZ_NO_ERROR on success, otherwise an error code.
 * @param dirPath - The path to save user metadata files in.
 * @param filePrefix - The prefix for the filename sequence.
*/
	static saveUserDBData(dirPath:String, filePrefix:String):DzError {
	
	};
	/**
 * @description Sets the compatibility base for a URI.
 * @returns true if the compatibility base is set, otherwise false.
 * @since 4.11.0.183
 * @param uri - The asset URI to set the compatibility base for.
 * @param id - The 64-bit integer used to identify the compatibility base.
 * @param markAsVendor - If true, the compatibility base is marked as being owned by a vendor.
*/
	static setCompatibilityBaseID(uri:String, id:Number, markAsVendor:Boolean):Boolean {
	
	};
	/**
 * @description Sets the compatibility base for a URI.
 * @returns true if the compatibility base is set, otherwise false.
 * @since 4.11.0.183
 * @param uri - The asset URI to set the compatibility base for.
 * @param compatibilityBasePath - The slash ("/") delimited path of the compatibility base to set.
 * @param markAsVendor - If true, the compatibility base is marked as being owned by a vendor.
 * @param create - If true, creates the compatibility base if it does not already exist.
*/
	static setCompatibilityBasePath(uri:String, compatibility:String, markAsVendor:Boolean, create:Boolean):Boolean {
	
	};
	/**
 * @description Sets the metadata associated with a file.
 * @since 4.9.0.17
 * @param filepath - The path of the file to set the metadata on.
 * @param contentType - The content type to set.
 * @param compatibleWith - The compatibility base the asset is an add-on for.
 * @param category - The category to put the asset in.
 * @param assetNode - The node to get the compatibility base from.
 * @param compatibilityBase - The compatibility base to set; for add-ons to target.
*/
	static setFileMetadata(filepath:String, contentType:String, compatibleWith:String, category:String, assetNode:DzNode, compatibilityBase:String):void {
	
	};
	/**
 * @returns true if the currently connected Content Management Service (CMS) is of the type that can be started and stopped, otherwise false.
*/
	canStartAndStopCMS():Boolean {
	
	};
	/**
 * @description Checks for new metadata scripts within the RunOnce directories.
*/
	checkforNewMetadataScripts():void {
	
	};
	/**
 * @description Removes all groups from all assets.
 * @param notify - If true, causes product and category containers to update.
*/
	clearAllGroupIDs(notify:Boolean):void {
	
	};
	/**
 * @description Clears the metadata queue.
*/
	clearDBMetaFileQueue():void {
	
	};
	/**
 * @description Creates a compatibility base.
 * @returns An integer used to identify base.
 * @param base - The compatibility base to create.
*/
	createCompatibilityBase(base:String):Number {
	
	};
	/**
 * @description Creates a new product.
 * @returns The product named name, from store storeID, with the token token. If a product with the storeID and token already exists, a new product will not be created and the existing product will be returned instead.
 * @since 4.9.3.39
 * @param name - The name for the product - used if a product with the storeID and token specified does not already exist in the database to name the product.
 * @param storeID - The ID of the store for the product. If the store does not exist in the database or this argument is an empty string (default), the "LOCAL USER" store will be used.
 * @param token - The token (i.e., SKU) used to identify the product in the storeID store.
*/
	createProduct(name:String, storeID:String, token:String):DzProductAssetContainer {
	
	};
	/**
 * @description Creates a new product from a list of assets.
 * @since 4.9.3.41
 * @param assets - The list of assets to create the product from.
 * @param name - The name for the product. If empty (default), the user will be prompted to provide a name.
*/
	createProductFromAssets(assets:Array, name:String):DzProductAssetContainer {
	
	};
	/**
 * @description Creates a new product from container and its children.
 * @since 4.9.3.39
 * @param container - The asset container to create the product from.
 * @param name - The name for the product. If empty (default), the user will be prompted to provide a name.
*/
	createProductFromContainer(container:DzAbstractAssetContainer, name:String):DzProductAssetContainer {
	
	};
	/**
 * @description Attempts to create a store in the database.
 * @returns true if the store is successfully created, otherwise false.
 * @param storeID - The identifier for the store.
 * @param token - The value used within url to be replaced by a product's token.
 * @param url - The URL for the store.
 * @attention The "DAZ 3D" and "LOCAL USER" storeIDs are reserved. Attempting to create a store with either ID will fail immediately and return a value of false.
*/
	createStore(storeID:String, token:String, url:String):Boolean {
	
	};
	/**
 * @description Creates a content type.
 * @returns An integer used to identify type.
 * @param type - The content type to create.
 * @param defaultOpen - If true, assets that the type is assigned to will be opened by default; the contents of the scene will be cleared prior to loading the asset. If false , assets that the type is assigned to will be merged by default; the asset will be added to the existing scene.
*/
	createType(type:String, defaultLoad:Boolean):Number {
	
	};
	/**
 * @description Causes the category identified by idPath to update.
 * @param idPath - The id path of the category to update.
*/
	emitCategoryChanged(idPath:Array):void {
	
	};
	/**
 * @returns If fileName can be found, the physical path of the asset on disk, otherwise an empty string.
 * @param fileName - The short name of the file to find the asset path for.
*/
	findAssetPathFromShortFilename(fileName:String):String {
	
	};
	/**
 * @returns A list of assets that relativePath refers to.
 * @since 4.9.2.69
 * @param relativePath - The relative path of a file to find assets for.
 * @param userFacing - Whether or not the file is user-facing.
 * @param installed - Whether or not the file is installed.
*/
	findAssetsForFile(relativePath:String, userFacing:Boolean, installed:Boolean):Array {
	
	};
	/**
 * @returns The id used to identify audience.
*/
	findAudienceID(audience:String):Number {
	
	};
	/**
 * @description Attempts to find a compatibility base, and potentially create it if it does not already exist.
 * @returns An integer used to identify base.
 * @param base - The compatibility base to find (or create).
 * @param create - If true, the compatibility base is created if it cannot be found.
*/
	findCompatibilityBaseID(base:String, create:Boolean):Number {
	
	};
	/**
 * @returns The product with the globally unique identifier guid, otherwise NULL.
 * @since 4.9.2.69
 * @param guid - The Globally Unique Identifier (GUID) of the product to find.
*/
	findProductByGuid(guid:String):DzProductAssetContainer {
	
	};
	/**
 * @returns The product from store storeID with the token token, otherwise NULL.
 * @since 4.9.3.39
 * @param storeID - The identifier of the store for the product.
 * @param token - The token (i.e., SKU) used to identify the product in the store storeID.
*/
	findProductByStoreToken(storeID:String, token:String):DzProductAssetContainer {
	
	};
	/**
 * @returns A list of products (if any) that are named name.
 * @since 4.9.3.39
 * @param name - The name of the products to find.
*/
	findProductsByName(name:String):Array {
	
	};
	/**
 * @returns A list of products that contain relativePath in their respective list of assets.
 * @since 4.8.1.73
 * @param relativePath - The relative path of a file to find products that contain it.
*/
	findProductsForFile(relativePath:String):Array {
	
	};
	/**
 * @description Attempts to find the identifier used to identify a content type.
 * @returns An integer used to identify type.
 * @param type - The content type to find.
 * @param create - If true, the content type is created if it cannot be found.
 * @param defaultOpen - If true, assets that the type is assigned to will be opened by default; the contents of the scene will be cleared prior to loading the asset. If false , assets that the type is assigned to will be merged by default; the asset will be added to the existing scene.
*/
	findTypeID(type:String, create:Boolean, defaultLoad:Boolean):Number {
	
	};
	/**
 * @returns The audience identified by id.
 * @param id - The unsigned 32-bit integer used to identify the audience.
*/
	getAudience(id:Number):String {
	
	};
	/**
 * @returns The list of available audiences.
*/
	getAudiences():Array {
	
	};
	/**
 * @returns A top-level container with child containers that match the hierarchy of categories in the content database.
*/
	getCategories():DzCategoryAssetContainer {
	
	};
	/**
 * @returns The full slash ("/") delimited path of the category (if any), otherwise an empty string.
 * @since 4.9.3.11
 * @param id - The 64-bit integer used to identify the category.
*/
	getCategoryPath(id:Number):String {
	
	};
	/**
 * @returns A JSON object consisting of options for the currently connected Content Management Service (CMS).
*/
	getCMSOptions():Object {
	
	};
	/**
 * @returns The compatibility base identified by id.
 * @param id - The integer used to identify the compatibility base.
*/
	getCompatibilityBase(id:Number):String {
	
	};
	/**
 * @returns A top-level container (if the content database is active) with child containers that match the hierarchy of compatibility bases in the content database, otherwise NULL.
 * @since 4.11.0.94
 * @param includeFilters - If true (default), child containers for filters (filter) will be included.
*/
	getCompatibilityBases(includeFilters:Boolean):DzCompatibilityBaseAssetContainer {
	
	};
	/**
 * @returns A top-level container with all of the mapped native content directories.
*/
	getContentDirs():DzTopLevelAssetContainer {
	
	};
	/**
 * @returns The Data Source Name (DSN) -i.e. "connection string"- for the PostgreSQL server if the server version is valid, otherwise an empty string.
 * @since 4.9.0.17
*/
	getDatabaseDsn():String {
	
	};
	/**
 * @returns The path on disk where database files are located; for backup purposes.
*/
	getDatabaseFilePath():String {
	
	};
	/**
 * @returns A list of metadata files queued for processing.
*/
	getDBMetaFileQueue():Array {
	
	};
	/**
 * @returns The full path of the first category that the file at assetPath is assigned to.
 * @param assetPath - The path of the asset to find the first category for.
 * @param preferredCategory - The path of the category preferred if it exists and the asset at assetPath is assigned to it.
 * @param installed - If true, assetPath is only tested against files that are installed. If false , assetPath is only tested against files that are not installed. (since 4.11.0.88)
*/
	getFirstCategory(assetPath:String, preferredCategory:String, installed:Boolean):String {
	
	};
	/**
 * @returns true if new products should be assigned to the "New" group, otherwise false.
 * @since 4.9.0.23
*/
	getGroupNewProductsAsNew():Boolean {
	
	};
	/**
 * @returns A top-level container with all of the mapped import content directories.
*/
	getImportDirs():DzTopLevelAssetContainer {
	
	};
	/**
 * @returns The maximum number of items returned by a file search.
 * @since 4.9.0.15
*/
	getMaxFileSearchResultSize():Number {
	
	};
	/**
 * @returns The maximum number of items to show per page.
*/
	getNumMaxItemsPerPage():Number {
	
	};
	/**
 * @returns A top-level container with all of the mapped Poser directories.
*/
	getPoserDirs():DzTopLevelAssetContainer {
	
	};
	/**
 * @returns A top-level container with child containers for intermediate alpha-numeric organization of products by name. Each intermediate container then has its respective children for the products in the content database.
*/
	getProducts():DzTopLevelAssetContainer {
	
	};
	/**
 * @description Attempts to shorten absolutePath to a list of paths that are relative to one of the mapped content directories.
 * @returns A list of relative paths to the file if one can be made, otherwise and empty list
 * @param absolutePath - The path to make relative.
 * @param useImportFolders - If true, the mapped import folders will also be searched.
*/
	getRelativePaths(absolutePath:String, useImportFolders:Boolean):Array {
	
	};
	/**
 * @returns A list of root category paths.
*/
	getRootCategoryStrings():Array {
	
	};
	/**
 * @returns true if hidden vendor categorizations are shown, otherwise false.
 * @since 4.9.3.4
*/
	getShowHiddenVendorCategorization():Boolean {
	
	};
	/**
 * @returns A list of store identifiers.
*/
	getStoresIDs():Array {
	
	};
	/**
 * @returns The token used in the URL for the store with the given storeID, to be replaced by a product's token.
*/
	getStoreToken(storeID:String):String {
	
	};
	/**
 * @returns The URL for the store with the given storeID.
*/
	getStoreUrl(storeID:String):String {
	
	};
	/**
 * @returns The content type identified by id.
 * @param id - The integer used to identify the content type.
*/
	getType(id:Number):String {
	
	};
	/**
 * @description Performs a database lookup on a user-facing content file to get its content type.
 * @returns The content type of the file if the file is in the content database and is user-facing, otherwise an empty string.
 * @param path - The path of the file to get the content type for.
*/
	getTypeForContentFile(path:String):String {
	
	};
	/**
 * @description Checks the given node for content type in its presentation (if any), falls back to a source file data item and performs a content database lookup on the path it specifies (if any), and finally falls back to the content file path of the node (if any) to find its content type.
 * @returns The content type for the node (if any), otherwise an empty string.
 * @param node - The node in the scene to get the content type of.
*/
	getTypeForNode(node:DzNode):String {
	
	};
	/**
 * @returns A list of hierarchical, slash ("/") delimited, content types
*/
	getTypes():Array {
	
	};
	/**
 * @returns true if the PostgreSQL server version is valid and the DSN is non-empty, otherwise false.
 * @since 4.9.0.17
*/
	haveDatabase():Boolean {
	
	};
	/**
 * @description Causes metadata files at absoluteProductPaths to be imported.
 * @param absoluteProductPaths - The list of absolute paths to import product metadata from.
 * @param runSilent - If true, the progress dialog will not be shown.
 * @param markAsVendor - If true, the data is considered vendor owned.
*/
	importMetadataFiles(absoluteProductPaths:Array, runSilent:Boolean, markAsVendor:Boolean):Array {
	
	};
	/**
 * @description Installs the assets specified if a product they belong to can be found.
 * @returns A JSON object consisting of a list of any products that were found to contain the missing files, a list of the files that were not found in any product, and a list of the products that were selected for installation.
 * @since 4.11.0.116
 * @param filenames - The list of relative file names to install. It is the developer's responsibility to verify that the file names passed in are not already in a mapped content directory.
 * @param noPrompt - If true, installation of any product(s) found begins immediately without prompting the user; this does not prevent progress from being reported. The default is false , which prompts the user and waits for a response.
 * @param productMsg - The message to display above the installable products list. If this is an empty string (default), a default string will be used.
 * @param fileMsg - The message to display above the unknown files list. If this is an empty string (default), a default string will be used.
*/
	installMissingAssets(filenames:Array, noPrompt:Boolean, productMsg:String, fileMsg:String):Boolean {
	
	};
	/**
 * @returns true if type is of the base type of Clothing, otherwise false.
 * @param type - The content type to test.
*/
	isClothingType(type:String):Boolean {
	
	};
	/**
 * @returns true if the Content Management Service (CMS) is currently connected, otherwise false.
*/
	isConnectedToCMS():Boolean {
	
	};
	/**
 * @returns true if type is of the base type of Figure, otherwise false.
 * @param type - The content type to test.
*/
	isFigureType(type:String):Boolean {
	
	};
	/**
 * @returns true if type is of a following type, otherwise false.
 * @param type - The content type to test.
*/
	isFollowingType(type:String):Boolean {
	
	};
	/**
 * @returns true if type is of the base type of Hair, otherwise false.
 * @param type - The content type to test.
*/
	isHairType(type:String):Boolean {
	
	};
	/**
 * @returns true if type is of a type that needs a base figure, otherwise false.
 * @param type - The content type to test.
*/
	isNeedsBaseFigureType(type:String):Boolean {
	
	};
	/**
 * @returns true if type is a Preset for a Figure, otherwise false.
 * @param type - The content type to test.
*/
	isPresetForFigureType(type:String):Boolean {
	
	};
	/**
 * @returns true if type is of the base type of Preset, otherwise false.
 * @param type - The content type to test.
*/
	isPresetType(type:String):Boolean {
	
	};
	/**
 * @returns true if type is of the base type of Prop, otherwise false.
 * @param type - The content type to test.
*/
	isPropType(type:String):Boolean {
	
	};
	/**
 * @returns true if type is of a replaceable type, otherwise false.
 * @param type - The content type to test.
*/
	isReplaceableType(type:String):Boolean {
	
	};
	/**
 * @returns true if the connected PostgreSQL database is currently being reset, otherwise false.
 * @since 4.9.0.17
*/
	isResettingDatabase():Boolean {
	
	};
	/**
 * @returns true if the database is currently synchronizing, otherwise false.
*/
	isSynchronizing():Boolean {
	
	};
	/**
 * @description Signals that categories need to be updated.
*/
	markCategoriesChanged():void {
	
	};
	/**
 * @description Signals that products need to be updated.
*/
	markProductsChanged():void {
	
	};
	/**
 * @description Causes the metadata file at productRelativePath to be processed and category containers to update.
 * @param productRelativePath - The relative product path to import metadata from.
 * @param runSilent - If true, the progress dialog will not be shown.
 * @param markAsVendor - If true, the data is considered vendor owned.
 * @param groupAsNew - If true, the product/assets are grouped as "New".
*/
	processDBMetaFile(productRelativePath:String, runSilent:Boolean, markAsVendor:Boolean, groupAsNew:Boolean):Array {
	
	};
	/**
 * @description Causes the metadata file at productRelativePath to be processed, without causing category containers to update.
 * @param productRelativePath - The relative product path to import metadata from.
 * @param runSilent - If true, the progress dialog will not be shown.
 * @param markAsVendor - If true, the data is considered vendor owned.
 * @param groupAsNew - If true, the assets are grouped as "New".
*/
	processDBMetaFileNoEmit(productRelativePath:String, runSilent:Boolean, markAsVendor:Boolean, groupAsNew:Boolean):Array {
	
	};
	/**
 * @description If metadata files are queued, causes the metadata import dialog to be displayed and allows the user to select which products to process metadata for, then starts the import process on the selected products.
*/
	processDBMetaFileQueue():void {
	
	};
	/**
 * @description Adds the file at productRelativePath to the metadata queue.
*/
	queueDBMetaFile(productRelativePath:String):void {
	
	};
	/**
 * @description Causes the internal list of root categories to be rebuilt.
*/
	refreshCategoryRoots():void {
	
	};
	/**
 * @description Causes the internal list of stores to be rebuilt.
*/
	refreshStores():void {
	
	};
	/**
 * @description Causes the internal list of content types to be rebuilt
*/
	refreshTypes():void {
	
	};
	/**
 * @description Causes all *.dsx metadata files in the "./Runtime/Support" folder of each mapped native and Poser content directory to be queued, and then imported.
*/
	reimportDBMetaFiles():void {
	
	};
	/**
 * @description Removes assets in list that have been orphaned (no longer exist) from the database.
 * @since 4.9.0.17
 * @param list - The list of DzAsset to check whether the files still exist.
*/
	removeOrphanedAssetReferences(list:Array):void {
	
	};
	/**
 * @description Attempts to remove a store from the database.
 * @returns true if the store is successfully removed, otherwise false.
 * @since 4.9.1.24
 * @param storeID - The identifier for the store to remove.
 * @attention The "DAZ 3D" and "LOCAL USER" storeIDs are reserved. Attempting to remove a store with either ID will fail immediately and return a value of false.
*/
	removeStore(storeID:String):Boolean {
	
	};
	/**
 * @description Triggers the connected PostgreSQL server to reset (delete) the current database and re-establish the default content types, compatibility bases, and categories.
 * @since 4.9.0.17
 * @attention Stops all running searches and logs the current user out, if needed.
*/
	resetDatabase():void {
	
	};
	/**
 * @description Performs a user-facing file scan, ultimately mapping any directories found to contain compatible content.
 * @param options - A bitwise OR of the options to use for filtering the file scan.
 * @param assignToGroup - If true, groups any found files as "New".
 * @param addToCategory - If true, found files are assigned to the "Scan Results" category.
 * @param onlyNewToCategory - If true, only "new" files are assigned to the "Scan Results" category.
*/
	scanFiles(options:SearchOptions, assignToGroup:Boolean, addToCategory:Boolean, onlyNewToCategory:Boolean):void {
	
	};
	/**
 * @description Performs a user-facing file search on the mapped content directories.
 * @returns A container consisting of DzAsset instances for any files found during the search.
 * @param filename - The name of the file to search for.
 * @param options - A bitwise OR of the options to use for filtering the results.
*/
	searchFiles(filename:String, options:SearchOptions):DzSearchContainer {
	
	};
	/**
 * @description Performs a user-facing asset search on the content database, where the results are confined to those that indicate they are compatible with the compatibility base of the specified asset.
 * @returns A container consisting of any DzAsset instances found during the search.
 * @since 4.9.0.32
 * @param asset - The context asset; the asset to find addons for.
 * @param filterText - The text to use for filtering the results.
 * @param categories - A list of category paths to use for filtering the results.
 * @param sorting - The sorting filter index to use for ordering the results.

 0 = None,

 1 = Name,

 2 = Date Purchased,

 3 = Date Installed,

 4 = Date Created,

 5 = Release Date,

 6 = Last Update,

 7 = Group ID,

 8 = Product ID (SKU),

 For Descending add 0x80000000 to the value
*/
	searchForAssetAddOns(asset:DzAsset, filterText:String, categories:Array, sorting:Number):DzSearchContainer {
	
	};
	/**
 * @description Performs a user-facing asset search on the content database.
 * @returns A container consisting of any DzAsset instances found during the search.
 * @since 4.9.0.32
 * @param filterText - The text to use for filtering the results.
 * @param categories - A list of category paths to use for filtering the results.
 * @param compatibilityBases - A list of compatibility bases to use for filtering the results.
 * @param contentTypes - A list of content types to use for filtering the results.
 * @param sorting - The sorting filter index to use for ordering the results.

 0 = None,

 1 = Name,

 2 = Date Purchased,

 3 = Date Installed,

 4 = Date Created,

 5 = Release Date,

 6 = Last Update,

 7 = Group ID,

 8 = Product ID (SKU),

 For Descending add 0x80000000 to the value
*/
	searchForAssets(filterText:String, categories:Array, compatibilityBases:Array, contentTypes:Array, sorting:Number):DzSearchContainer {
	
	};
	/**
 * @description Performs a user-facing asset search on the content database.
 * @returns A container consisting of any DzAsset instances found during the search.
 * @since 4.9.0.32
 * @param keywords - The keywords to use for filtering the results.
 * @param options - A bitwise OR of the options to use for filtering the results.
 * @param sorting - The sorting filter index to use for ordering the results.

 0 = None,

 1 = Name,

 2 = Date Purchased,

 3 = Date Installed,

 4 = Date Created,

 5 = Release Date,

 6 = Last Update,

 7 = Group ID,

 8 = Product ID (SKU),

 For Descending add 0x80000000 to the value
*/
	searchForAssetsByKeywords(keywords:String, options:SearchOptions, sorting:Number):DzSearchContainer {
	
	};
	/**
 * @returns A search container containing the assets matching the criteria specified.
 * @since 4.9.1.17
 * @param categoryPath - The full path of the category to search for assets.
 * @param userFacing - Whether or not to limit the search to user-facing assets. (since 4.9.3.56)
 * @param installed - Whether or not to limit the search to installed assets. (since 4.9.3.56)
*/
	searchForAssetsInCategory(categoryPath:String, userFacing:Boolean, installed:Boolean):DzSearchContainer {
	
	};
	/**
 * @description Performs a user-facing asset search on the content database, where the results are confined to those that indicate they are the compatibility base of the specified asset.
 * @returns A container consisting of any DzAsset instances found during the search.
 * @since 4.9.0.32
 * @param asset - The context asset; the asset to find targets for.
 * @param filterText - The text to use for filtering the results.
 * @param categories - A list of category paths to use for filtering the results.
 * @param sorting - The sorting filter index to use for ordering the results.

 0 = None,

 1 = Name,

 2 = Date Purchased,

 3 = Date Installed,

 4 = Date Created,

 5 = Release Date,

 6 = Last Update,

 7 = Group ID,

 8 = Product ID (SKU),

 For Descending add 0x80000000 to the value
*/
	searchForAssetTargets(asset:DzAsset, filterText:String, categories:Array, sorting:Number):DzSearchContainer {
	
	};
	/**
 * @description Performs a user-facing asset search on the content database, where the results are confined to a specified product.
 * @returns A container consisting of any DzAsset instances found during the search.
 * @since 4.9.0.32
 * @param product - The context product; the product to filter results by.
 * @param filterText - The text to use for filtering the results.
 * @param categories - A list of category paths to use for filtering the results.
 * @param compatibilityBases - A list of compatibility bases to use for filtering the results.
 * @param contentTypes - A list of content types to use for filtering the results.
 * @param sorting - The sorting filter index to use for ordering the results.

 0 = None,

 1 = Name,

 2 = Date Purchased,

 3 = Date Installed,

 4 = Date Created,

 5 = Release Date,

 6 = Last Update,

 7 = Group ID,

 8 = Product ID (SKU),

 For Descending add 0x80000000 to the value
*/
	searchForProductAssets(product:DzProductAssetContainer, filterText:String, categories:Array, compatibilityBases:Array, contentTypes:Array, sorting:Number):DzSearchContainer {
	
	};
	/**
 * @returns A container consisting of any DzProductAssetContainer instances found during the search.
 * @since 4.9.0.32
 * @param filterText - The text to use for filtering the results.
 * @param categories - A list of category paths to use for filtering the results.
 * @param compatibilityBases - A list of compatibility bases to use for filtering the results.
 * @param contentTypes - A list of content types to use for filtering the results.
 * @param installStateFlags - The install state flags to use for filtering the results.

 None = 0x0,

 Installed = 0x1,

 NotInstalled = 0x2,

 Damaged = 0x4,

 NeedsUpdate = 0x8,

 Pending = 0x10,

 Any = Installed | NotInstalled | Damaged | NeedsUpdate | Pending
 * @param sorting - The sorting filter index to use for ordering the results.

 0 = None,

 1 = Name,

 2 = Date Purchased,

 3 = Date Installed,

 4 = Date Created,

 5 = Release Date,

 6 = Last Update,

 7 = Group ID,

 8 = Product ID (SKU),

 For Descending add 0x80000000 to the value
*/
	searchForProducts(filterText:String, categories:Array, compatibilityBases:Array, contentTypes:Array, installStateFlags:Number, sorting:Number):DzProductHolderContainer {
	
	};
	/**
 * @description Sets the options for the Content Management Service (CMS), if it is of the type that can accept options.
 * @param clusterDirectory - The path of the directory that contains the database files.
 * @param port - The port number to use for connecting to the database server.
*/
	setCMSOptions(clusterDirectory:String, port:Number):void {
	
	};
	/**
 * @since 4.9.0.23
 * @param onOff - If true, new products will be assigned to the "New" group.
*/
	setGroupNewProductsAsNew(onOff:Boolean):void {
	
	};
	/**
 * @since 4.9.0.15
 * @param maxNum - The maximum number of items to return from a standard file search.
*/
	setMaxFileSearchResultSize(maxNum:Number):void {
	
	};
	/**
 * @param maxNum - The maximum number of items to show on a page in the content view
*/
	setMaxItemsPerPage(maxNum:Number):void {
	
	};
	/**
 * @description Sets the group identifier on products and/or files, for a list of products.
 * @since 4.9.0.25
 * @param guids - A list of guids for the products to set the group identifier on.
 * @param groupId - The group identifier to set.
 * @param groupProduct - If true, sets the group identifier on the product.
 * @param groupFiles - If true, sets the group identifier on the user-facing files in the product.
*/
	setProductGroupIDs(guids:Array, groupId:Number, groupProduct:Boolean, groupFiles:Boolean):void {
	
	};
	/**
 * @param onOff - Whether or not to show tool tips on assets.
*/
	setShowAssetToolTip(onOff:Boolean):void {
	
	};
	/**
 * @param onOff - Whether or not to show extensions on assets.
*/
	setShowExtensions(onOff:Boolean):void {
	
	};
	/**
 * @description Sets whether or not hidden vendor categorizations are shown.
 * @since 4.9.3.4
 * @param shown - If true, hidden vendor categorizations are shown.
*/
	setShowHiddenVendorCategorization(shown:Boolean):void {
	
	};
	/**
 * @param onOff - Whether or not to show large icons.
*/
	setShowLargeIcons(onOff:Boolean):void {
	
	};
	/**
 * @returns true if showing asset tool tips, otherwise false.
*/
	showAssetToolTip():Boolean {
	
	};
	/**
 * @description Causes the Content DB Editor to be displayed, allowing the user to view/edit metadata for products and/or assets all within a centralized dialog.
 * @returns true if the dialog is accepted, otherwise false.
 * @param assetContainer - The asset container to load into the editor. If the asset container is a DzProductAssetContainer, the dialog will display two pages: one for the product specific data, and one for the asset specific data. If the asset container is any other type, only the page for the asset specific data is displayed.
*/
	showDatabaseEditor(assetContainer:DzAbstractAssetContainer):Boolean {
	
	};
	/**
 * @returns true if showing asset file extensions, otherwise false.
*/
	showExtensions():Boolean {
	
	};
	/**
 * @returns true if showing large asset icons, otherwise false.
*/
	showLargeIcons():Boolean {
	
	};
	/**
 * @description Executes a script named after the store associated with product, in the ./resources/stores directory. A single anonymous JSON object is passed to the script, which can be retrieved using the global "getArguments()" function. The properties on the Object consist of values stored in the content database.
 * @since 4.8.1.70
 * @param product - The product to show more information for.
*/
	showMoreProductInfo(product:DzProductAssetContainer):void {
	
	};
	/**
 * @description Starts the Content Management Service (CMS), if it is not already running.
*/
	startCMS():void {
	
	};
	/**
 * @description Stops all searches that were started by any of the search* methods on DzAssetMgr.
*/
	stopAllSearches():void {
	
	};
	/**
 * @description Stops the Content Management Service (CMS), if it is running and is of the type that can be stopped.
 * @param mode - The mode to use to stop the service.
 * @param wait - Whether or not to wait for the CMS to stop before continuing.
 * @param timeout - The number of seconds to wait for the service to stop before continuing.
*/
	stopCMS(mode:StopModeCMS, wait:Boolean, timeout:Number):void {
	
	};
	/**
 * @description Stops any searches that were started by DzAssetMgr.scanFiles().
*/
	stopFileScan():void {
	
	};
	/**
 * @description Stops any searches that were started by DzAssetMgr.searchFiles().
*/
	stopFileSearch():void {
	
	};
	/**
 * @description Stops any searches that were started by DzAssetMgr.searchForAssetAddOns().
*/
	stopSearchForAssetAddOns():void {
	
	};
	/**
 * @description Stops any searches that were started by DzAssetMgr.searchForAssets(), DzAssetMgr.searchForAssetsByKeywords() or DzAssetMgr.searchForProductAssets().
*/
	stopSearchForAssets():void {
	
	};
	/**
 * @description Stops any searches that were started by DzAssetMgr.searchForAssetTargets().
*/
	stopSearchForAssetTargets():void {
	
	};
	/**
 * @description Stops any searches that were started by DzAssetMgr.searchForProducts().
*/
	stopSearchForProducts():void {
	
	};
	/**
 * @description Triggers an update to asset containers within the Categories top-level container.
 * @since 4.8.1.65
*/
	updateCategoryContainers():void {
	
	};
	/**
 * @description Triggers an update to asset containers within the native formats top-level container.
 * @since 4.8.1.65
*/
	updateContentContainers():void {
	
	};
	/**
 * @description Triggers an update to asset containers within the folder based top-level containers.
 * @since 4.8.1.65
*/
	updateFolderBasedContainers():void {
	
	};
	/**
 * @description Triggers an update to asset containers within the other import formats top-level container.
 * @since 4.8.1.65
*/
	updateImportContainers():void {
	
	};
	/**
 * @description Triggers an update to asset containers within the Poser formats top-level container.
 * @since 4.8.1.65
*/
	updatePoserContainers():void {
	
	};
	/**
 * @description Triggers an update to asset containers within the Products top-level container.
*/
	updateProductContainers():void {
	
	};
	/**
 * @description Reclaims space in the database previously occupied by deleted or updated data.
 * @returns true if the operation was successful, otherwise false.
*/
	vacuumDatabase():Boolean {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the base paths list has changed.
 * @signature `"basePathsChanged()"`
 * @event
*/
	basePathsChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when a category has been changed.
 * @signature `"categoryUpdate(QVariantList)"`
 * @event
*/
	categoryUpdate(idPath:Array):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the Data Source Name (DSN) for the Content Management Service (CMS) has changed.
 * @signature `"cmsDSNChanged()"`
 * @event
*/
	cmsDSNChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the Content Management Service (CMS) has started.
 * @signature `"cmsStarted()"`
 * @event
*/
	cmsStarted():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the Content Management Service (CMS) has stopped.
 * @signature `"cmsStopped()"`
 * @event
*/
	cmsStopped():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the compatibility base list has changed.
 * @signature `"compatibilityBaseListChanged()"`
 * @event
*/
	compatibilityBaseListChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when a container has been changed.
 * @signature `"containerUpdate(QVariantList)"`
 * @event
*/
	containerUpdate(idPath:Array):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when itemsPerPage() will return a new value.
 * @signature `"itemsPerPageChanged(int)"`
 * @event
*/
	itemsPerPageChanged(newPerPage:Number):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the maximum file search result size has changed.
 * @signature `"maxFileSearchResultSizeChanged(int)"`
 * @event
*/
	maxFileSearchResultSizeChanged(maxFileSearchResultSize:Number):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when a product has been created.
 * @signature `"productCreated(const QString &)"`
 * @event
*/
	productCreated(guid:String):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when showAssetToolTipChanged() will return a new value.
 * @signature `"showAssetToolTipChanged()"`
 * @event
*/
	showAssetToolTipChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when showExtensions() will return a new value.
 * @signature `"showExtensionsChanged()"`
 * @event
*/
	showExtensionsChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when showLargeIcons() will return a new value.
 * @signature `"showLargeIconsChanged()"`
 * @event
*/
	showLargeIconsChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the store list has changed.
 * @signature `"storeListChanged()"`
 * @event
*/
	storeListChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the type list has changed.
 * @signature `"typeListChanged()"`
 * @event
*/
	typeListChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the user interface is about to perform a database query.
 * @signature `"uiAboutToSearch(int)"`
 * @event
*/
	uiAboutToSearch(sender:QObject, text:String, categories:Array, compatibilityBases:Array, contentTypes:Array):void {
	
	};

}
/**
 * @classdesc This class is implemented by platform specific audioclip classes, winaudioclip_dz and macaudioclip_dz.
See Also:
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/audioclip_dz} */
class DzAudioClip extends DzRefCountedItem, DzBase {
	/**
 * @description The current position of the audio clip from the start.
	*/
	currentPosition:DzTime;
	/**
 * @description The name of the file the audio clip was loaded from (Read Only)
	*/
	filename:String;
	/**
 * @description The length of the audio clip (Read Only)
	*/
	length:DzTime;
	/**
 * @description The current rate multiplier for the audio clip
	*/
	rate:Number;
	/**
 * @description Opens the file specified by filename and sets up the audio clip.
 * @returns true if the file was successfully opened, false otherwise;
 * @param filename - The name of the audio file to load.
*/
	openFile(filename:String):DzError {
	
	};
	/**
 * @description Pauses the audio clip without resetting current position.
*/
	pause():void {
	
	};
	/**
 * @description Plays the audio clip from current position.
*/
	play():void {
	
	};
	/**
 * @description Resets the current position of the audio clip to the beginning.
*/
	reset():void {
	
	};

}
/**
 * @classdesc See Also:
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/audioimporter_dz} */
class DzAudioImporter extends DzFileIO {
	/**
 * @returns A description of the importer that can be placed in a file type selection combo box (e.g. "WAV Format").
*/
	getDescription():String {
	
	};
	/**
 * @returns The file extension (excluding the preceding dot) supported by this importer.
*/
	getExtension():String {
	
	};
	/**
 * @description TODO:
Add description.
*/
	loadAudio(filename:String, clip:DzAudioClip, options:DzFileIOSettings):DzError {
	
	};
	/**
 * @description Reads the file.
 * @returns DZ_NO_ERROR on success, otherwise an error code.
 * @param filename - Name of the file to be read.
 * @param clip - Audio clip to read data into.
*/
	loadAudio(filename:String, clip:DzAudioClip):DzError {
	
	};
	/**
 * @description Test the given filename and file contents to see if this importer can read it.
 * @returns true if the importer can import the file, otherwise false.
 * @param filename - The name of the file to test.
*/
	recognize(filename:String):Boolean {
	
	};

}
/**
 * @classdesc This class does not provide access to any Daz 3D user account information which could be considered an invasion of the user's privacy. This class does provide plugins and scripts with an ability to check if a user has authenticated (logged in to) a Daz 3D account, to prompt a user to authenticate (login to) their Daz 3D account, to obtain a token that uniquely and anonymously identifies the current/last account authenticated, and to logout of an account that is currently logged in.
There is only one instance of this manager in an application. This instance is created and owned by DzApp. Request the instance via DzApp.getAuthenticationMgr().
See Also:
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/authenticationmgr_dz} */
class DzAuthenticationMgr extends QObject {
	/**
 * @description This function will attempt to authenticate a Daz 3D user account. If no account information has been entered by the user, a dialog will be displayed to securely acquire the username and password to be authenticated.
 * @returns true if the user was authenticated, otherwise false.
*/
	authenticateUser():Boolean {
	
	};
	/**
 * @returns If the user has (not necessarily is) logged in to a Daz 3D user account and the application has a valid connection to the database, a token that represents the account that the user last logged into is returned. If the user has not logged into a Daz 3D user account or the application does not have a valid connection to the database, an empty string is returned.
 * @attention This function existed prior to 4.9.3.66 but it was deprecated as part of a much older implementation and it would only return an empty string. As of 4.9.3.66 the function has been revived and the function operates as described above.
*/
	getUserToken():String {
	
	};
	/**
 * @returns true if the user is authenticated (currently logged in), otherwise false.
*/
	isAuthenticated():Boolean {
	
	};
	/**
 * @returns true if in process of logging in, otherwise false. The event queue must execute to finish login.
 * @since 4.9.3.71
*/
	isLoggingIn():Boolean {
	
	};
	/**
 * @description Invalidates any existing authentication.
*/
	logout():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the user begins to login to a Daz 3D account.
 * @signature `"beginLogin()"`
 * @event
*/
	beginLogin():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the user begins to log out of a Daz 3D account.
 * @signature `"beginLogout()"`
 * @event
*/
	beginLogout():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the current Daz 3D account in use changes.
 * @signature `"currentAccountChanged()"`
 * @event
*/
	currentAccountChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted after the user has successfully logged in to a Daz 3D account.
 * @signature `"loggedIn()"`
 * @event
*/
	loggedIn():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted after the user has successfully logged out of a Daz 3D account.
 * @signature `"loggedOut()"`
 * @event
*/
	loggedOut():void {
	
	};

}
/**
 * @classdesc DzAuthor is used to access authorship data for native files, and the current instance of the application.
See Also:
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/author_dz} */
class DzAuthor extends Object {
	/**
 * @description Deprecated
	*/
	email:String;
	/**
 * @description The author's name. (Read Only)
	*/
	name:String;
	/**
 * @description The author's url. (Read Only)
	*/
	url:String;
	/**
 * @description true if name contains valid information, otherwise false. (Read Only)
	*/
	valid:String;
	/**
 * @description Default constructor. Creates an empty author.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Creates an author by parsing a string.
 * @param author - A string representation of the author in the form "[ name, email, url ]"
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Copy Constructor.
 * @param author - The author information to copy.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Create a DzAuthor with the given name, email, and url.
 * @param name - The name of the author.
 * @param email - The author's email address.
 * @param url - The author's home page URL.
 * @constructor
*/
	constructor() {
	
	};

}
/**
 * @classdesc This class encapsulates a 2D image and the parameters for drawing the image as a backdrop for the scene. An instance of this class only contributes to the scene if it is set as the current backdrop for the scene.
See Also:
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/backdrop_dz} */
class DzBackdrop extends DzElement {
	/**
 * @description Holds the background color of the backdrop.
	*/
	backgroundColor:Color;
	/**
 * @description Holds whether or not the backdrop is flipped horizontally.
	*/
	flipHorizontal:Boolean;
	/**
 * @description Holds whether or not the backdrop is flipped vertically.
	*/
	flipVertical:Boolean;
	/**
 * @description Holds the rotation applied to the backdrop.
	*/
	rotation:Rotation;
	/**
 * @description Holds whether or not the backdrop is visible in the viewport.
	*/
	visible:Boolean;
	/**
 * @description Holds whether or not the backdrop is visible in a render.
	*/
	visibleInRender:Boolean;
	/**
 * @description ENUMERATOR: No rotation
*/
	
	static NO_ROTATION;
	/**
 * @description ENUMERATOR: 90 degree rotation Counter-Clockwise
*/
	
	static ROTATE_LEFT_90;
	/**
 * @description ENUMERATOR: 90 degree rotation Clockwise
*/
	
	static ROTATE_RIGHT_90;
	/**
 * @description ENUMERATOR: 180 degree rotation
*/
	
	static ROTATE_180;
	/**
 * @description Default Constructor.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Changes the render aspect ratio to match the backdrop image, and the image dimensions.
 * @since 4.6.4.33
*/
	adjustRenderAspectRatioToMatchTexture():void {
	
	};
	/**
 * @description Changes the render image dimensions and aspect ratio to match the backdrop image.
 * @since 4.6.4.33
*/
	adjustRenderDimensionsToMatchTexture():void {
	
	};
	/**
 * @description Clears the current back drop image, and resets all parameters.
*/
	clear():void {
	
	};
	/**
 * @returns The property that controls the backdrop color or tinting.
 * @since 4.6.4.35
*/
	getBackgroundColorControl():DzColorProperty {
	
	};
	/**
 * @returns The property that controls whether the backdrop is flipped horizontally.
*/
	getHorizontalFlipControl():DzBoolProperty {
	
	};
	/**
 * @returns An editable instance of the material used to shade the backdrop.
*/
	getMaterial():DzMaterial {
	
	};
	/**
 * @returns The property that controls rotation of the backdrop.
*/
	getRotationControl():DzEnumProperty {
	
	};
	/**
 * @returns The current backdrop image.
*/
	getTexture():DzTexture {
	
	};
	/**
 * @returns The property that controls whether the backdrop is flipped vertically.
*/
	getVerticalFlipControl():DzBoolProperty {
	
	};
	/**
 * @returns The property that controls whether the backdrop is visible.
 * @since 4.6.4.32
*/
	getVisibleControl():DzBoolProperty {
	
	};
	/**
 * @returns The property that controls whether the backdrop is visible in a render.
 * @since 4.6.4.32
*/
	getVisibleInRenderControl():DzBoolProperty {
	
	};
	/**
 * @description Sets the backdrop image.
 * @param img - The backdrop image.
*/
	setTexture(img:DzTexture):void {
	
	};
	/**
 * @description Deprecated
*/
	showOptions(parent:QWidget):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the background color of this backdrop changes.
 * @signature `"backgroundColorChanged()"`
 * @event
*/
	backgroundColorChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the information in this backdrop changes.
 * @signature `"drawnDataChanged()"`
 * @event
*/
	drawnDataChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the visibility of this backdrop changes.
 * @signature `"visiblityChanged()"`
 * @event
*/
	visiblityChanged():void {
	
	};

}
/**
 * @classdesc Derived from QObject, this base class allows for the use of the signals-slots architecture provided by the Qt framework, within the Daz Studio API.
A considerable portion of classes in the Daz Studio API derive from this class.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/base_dz} */
class DzBase extends QObject {
	/**
 * @description Provides scripts a way to make objects persistent; i.e., so that Qt will not delete them when they are no longer referenced by the script. This allows object instances to be created in script, then passed into the core and remain after the script has finished execution.
*/
	makePersistent():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the internal name of the object has changed.
 * @signature `"nameChanged(const QString&)"`
 * @event
*/
	nameChanged(name:String):void {
	
	};

}
/**
 * @classdesc This is the basic camera implementation for DAZ Studio. It supplies commonly-used features like focal length adjustment and depth of field alteration.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/basiccamera_dz} */
class DzBasicCamera extends DzCamera {
	/**
 * @description Holds the current height of the view. (Read Only)
	*/
	currentViewHeight:Number;
	/**
 * @description Holds the current width of the view. (Read Only)
	*/
	currentViewWidth:Number;
	/**
 * @description Holds whether or not the camera performs depth of field calculations.
	*/
	depthOfField:Boolean;
	/**
 * @description Holds the f/stop of the camera.
	*/
	fStop:Number;
	/**
 * @description Holds whether or the camera is a perspective or orthographic view.
	*/
	isPerspective:Boolean;
	/**
 * @description Holds whether or not the local dimensions will use the active viewport when enabled. (since 4.9.3.108)
	*/
	useActiveViewport:Boolean;
	/**
 * @description Create a camera.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Applies the settings in a dimensions preset.
 * @returns if preset was found, otherwise false.
 * @since 4.9.3.108
 * @param preset - The name of the preset to retrieve the settings for. An empty string is interpreted to mean "Custom."
*/
	applyDimensionsPreset(preset:String):Boolean {
	
	};
	/**
 * @description A ray through the scene for a perspective view.
 * @returns A directional vector that defines a ray that intersects the camera's center point.
 * @param x - The x position of the cursor in the viewport.
 * @param y - The y position of the cursor in the viewport.
*/
	cursorToRay(x:Number, y:Number):DzVec3 {
	
	};
	/**
 * @description Calculates a location in the scene based on an x, y position in the viewport and distance from the camera.
 * @returns A positional vector that represents the resulting location in the scene.
 * @param x - The x coordinate of the cursor in the viewport.
 * @param y - The y coordinate of the cursor in the viewport.
 * @param z - The distance from the camera in world space at which to calculate the target point.
*/
	cursorToScene(x:Number, y:Number, z:Number):DzVec3 {
	
	};
	/**
 * @returns The angle of the aperture blades for the camera.
 * @since 4.9.3.121
*/
	getApertureBladeRotationAngleControl():DzFloatProperty {
	
	};
	/**
 * @returns The number of aperture blades for the camera.
 * @since 4.9.3.121
*/
	getApertureNumBladesControl():DzIntProperty {
	
	};
	/**
 * @returns The depth of field property for the camera.
*/
	getDepthOfFieldChannel():DzBoolProperty {
	
	};
	/**
 * @description Retrieves the settings of a dimensions preset.
 * @returns if preset was found, otherwise false.
 * @since 4.9.3.108
 * @param preset - The name of the preset to retrieve the settings for. An empty string is interpreted to mean "Custom."
 * @param settings - The settings object that the settings will be assigned to.
*/
	getDimensionsPreset(preset:String, settings:DzSettings):Boolean {
	
	};
	/**
 * @returns The Display Persistence property for the camera.
*/
	getDisplayPersistenceChannel():DzBoolProperty {
	
	};
	/**
 * @returns The DOF Color property for the camera.
*/
	getDofColorChannel():DzColorProperty {
	
	};
	/**
 * @returns The DOF Overlay Color property for the camera.
*/
	getDofOverlayColorChannel():DzColorProperty {
	
	};
	/**
 * @returns The DOF Overlay Opacity property for the camera.
*/
	getDofOverlayOpacityChannel():DzFloatProperty {
	
	};
	/**
 * @returns The DOF Visibility property for the camera.
*/
	getDofVisibilityChannel():DzBoolProperty {
	
	};
	/**
 * @returns The Far DOF Visibility property for the camera.
*/
	getFarDofVisibilityChannel():DzBoolProperty {
	
	};
	/**
 * @returns The depth of field property for this camera.
*/
	getFocalDistChannel():DzFloatProperty {
	
	};
	/**
 * @returns The focal length property for this camera.
*/
	getFocalLengthChannel():DzFloatProperty {
	
	};
	/**
 * @returns The Focal Point Scale property for the camera.
*/
	getFocalPointScaleChannel():DzFloatProperty {
	
	};
	/**
 * @returns The FOV Color property for the camera.
*/
	getFovColorChannel():DzColorProperty {
	
	};
	/**
 * @returns The FOV Length property for the camera.
*/
	getFovLengthChannel():DzFloatProperty {
	
	};
	/**
 * @returns The FOV Opacity property for the camera.
*/
	getFovOpacityChannel():DzFloatProperty {
	
	};
	/**
 * @returns The frame size property for this camera.
 * @since 4.6.4.67
*/
	getFrameWidthChannel():DzFloatProperty {
	
	};
	/**
 * @returns The f/stop property for this camera.
*/
	getFStopChannel():DzFloatProperty {
	
	};
	/**
 * @returns The Headlamp Intensity property for the camera.
 * @since 4.7.1.94
*/
	getHeadlampIntensityControl():DzFloatProperty {
	
	};
	/**
 * @returns The camera lens k1 for the camera.
 * @since 4.9.3.121
*/
	getLensDistortionK1Control():DzFloatProperty {
	
	};
	/**
 * @returns The camera lens k2 for the camera.
 * @since 4.9.3.121
*/
	getLensDistortionK2Control():DzFloatProperty {
	
	};
	/**
 * @returns The camera lens k3 for the camera.
 * @since 4.9.3.121
*/
	getLensDistortionK3Control():DzFloatProperty {
	
	};
	/**
 * @returns The camera distortion scale for the camera.
 * @since 4.9.3.121
*/
	getLensDistortionScaleControl():DzFloatProperty {
	
	};
	/**
 * @returns The camera lens distortion type for the camera.
 * @since 4.9.3.121
*/
	getLensDistortionTypeControl():DzEnumProperty {
	
	};
	/**
 * @returns The camera lens radial bias property for the camera.
 * @since 4.9.3.121
*/
	getLensRadialBiasControl():DzFloatProperty {
	
	};
	/**
 * @returns The camera lens shift x property for the camera in mm.
 * @since 4.9.3.121
*/
	getLensShiftXControl():DzFloatProperty {
	
	};
	/**
 * @returns The camera lens shift y property for the camera in mm.
 * @since 4.9.3.121
*/
	getLensShiftYControl():DzFloatProperty {
	
	};
	/**
 * @returns The camera lens stereo offset for the camera in mm.
 * @since 4.9.3.121
*/
	getLensStereoOffsetControl():DzFloatProperty {
	
	};
	/**
 * @returns The camera lens thickness property for the camera. Thickness is in mm.
 * @since 4.8.0.16
*/
	getLensThicknessControl():DzFloatProperty {
	
	};
	/**
 * @returns The Near DOF Visibility property for the camera.
*/
	getNearDofVisibilityChannel():DzBoolProperty {
	
	};
	/**
 * @returns The Sight Line Opacity property for the camera.
*/
	getSightLineOpacityChannel():DzFloatProperty {
	
	};
	/**
 * @returns true if this camera is at default scene camera values, otherwise false.
*/
	isAtDefaultSceneCameraValues():Boolean {
	
	};
	/**
 * @returns true if this camera is the default scene camera, otherwise false.
*/
	isDefaultSceneCamera():Boolean {
	
	};
	/**
 * @param yesNo - If true, sets this camera as the default scene camera.
 * @attention Assigning more than one camera as the default scene camera will not be preserved across save/load sequences.
*/
	setIsDefaultSceneCamera(yesNo:Boolean):void {
	
	};
	/**
 * @description Changes the type of the camera.
 * @param type - The new type for the camera.
*/
	setType(type:DzCamera.CameraType):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the camera's depth of field setting has changed.
 * @signature `"projectionChanged()"`
 * @event
*/
	depthOfFieldChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the camera's f-Stop setting has changed.
 * @signature `"fStopChanged(const DzTimeRange&)"`
 * @event
*/
	fStopChanged(range:DzTimeRange):void {
	
	};

}
/**
 * @classdesc The buttons provided by the dialog are: 'What's This', 'Apply', 'Accept', and 'Cancel'. Custom buttons can also be added to the set of default buttons by calling addButton(). All buttons but the 'Accept' button can be hidden or shown. By default, the 'Apply' button is the only hidden button. The text on the default buttons can be customized.
The dialog has a vertical box layout above the horizontal set of buttons. Widgets and sub-layouts can be added to this layout using addWidget() and addLayout().
See Also:
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/basicdialog_dz} */
class DzBasicDialog extends DzDialog {
	/**
 * @description Default Constructor. Creates a typical DAZ Studio dialog with 'What's This', 'Apply', 'Accept', and 'Cancel' buttons. By default, the 'Apply' button is hidden, call showApplyButton() to make it visible.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Adds a button into the horizontal layout of the dialog's button bar.
 * @param btn - The button to add to the dialog's button layout.
 * @param index - The position in the button bar to insert the button.
*/
	addButton(btn:DzButton, index:Number):void {
	
	};
	/**
 * @description Adds a layout into the main vertical layout of the dialog.
 * @param child - The layout to add as a child of the dialog's main layout.
 * @param stretch - The stretch factor for the child layout.
*/
	addLayout(layout:DzLayout, stretch:Number):void {
	
	};
	/**
 * @description Adds spacing into the main vertical layout of the dialog.
 * @param spacing - The amount of spacing to add.
*/
	addSpacing(spacing:Number):void {
	
	};
	/**
 * @description Adds stretch into the main vertical layout of the dialog.
 * @param stretch - The stretch factor for the added stretchable space.
*/
	addStretch(stretch:Number):void {
	
	};
	/**
 * @description Adds a widget into the main vertical layout of the dialog.
 * @param child - The widget to add to the dialog's main layout.
 * @param stretch - The stretch factor for the child widget.
 * @param alignment - The alignment for the child widget.(since 4.9.3.93)
*/
	addWidget(child:DzWidget, stretch:Number, alignment:DzWidget.AlignmentFlags):void {
	
	};
	/**
 * @description Inserts a layout into the main vertical layout of the dialog.
 * @since 4.12.1.28
 * @param index - The index to insert the layout at.
 * @param layout - The layout to add to the dialog's main layout.
 * @param stretch - The stretch factor for the child layout.
*/
	insertLayout(index:Number, layout:DzLayout, stretch:Number):void {
	
	};
	/**
 * @description Inserts a widget into the main vertical layout of the dialog.
 * @since 4.9.3.93
 * @param index - The index to insert the widget at.
 * @param child - The widget to add to the dialog's main layout.
 * @param stretch - The stretch factor for the child widget.
 * @param alignment - The alignment for the child widget.
*/
	insertWidget(index:Number, child:DzWidget, stretch:Number, alignment:DzWidget.AlignmentFlags):void {
	
	};
	/**
 * @description Sets the 'Accept' button is set as the default button for the dialog.
 * @since 4.12.0.84
*/
	setAcceptButtonAsDefault():void {
	
	};
	/**
 * @description Enables or disables the Accept button. By default, the button is enabled.
 * @param onOff - If true, the 'Accept' button will be available to the user. If false, the button will not be shown.
*/
	setAcceptButtonEnabled(onOff:Boolean):void {
	
	};
	/**
 * @description Sets the text for the dialog's accept button. By default, the button is labelled 'Accept'.
 * @param text - The new label for the accept button.
*/
	setAcceptButtonText(text:String):void {
	
	};
	/**
 * @description Sets the 'Apply' button is set as the default button for the dialog.
 * @since 4.12.0.84
*/
	setApplyButtonAsDefault():void {
	
	};
	/**
 * @description Enables or disables the Apply button. By default, the button is disabled.
 * @param onOff - If true, the 'Apply' button will be available to the user. If false, the button will not be shown.
*/
	setApplyButtonEnabled(onOff:Boolean):void {
	
	};
	/**
 * @description Sets the text for the dialog's apply button. By default, the button is labelled 'Apply'.
 * @param text - The new label for the apply button.
*/
	setApplyButtonText(text:String):void {
	
	};
	/**
 * @description Sets the 'Cancel' button is set as the default button for the dialog.
 * @since 4.12.0.84
*/
	setCancelButtonAsDefault():void {
	
	};
	/**
 * @description Enables or disables the Cancel button. By default, the button is enabled.
 * @param onOff - If true, the 'Cancel' button will be available to the user. If false, the button will not be shown.
*/
	setCancelButtonEnabled(onOff:Boolean):void {
	
	};
	/**
 * @description Sets the text for the dialog's cancel button. By default, the button is labelled 'Cancel'.
 * @param text - The new label for the cancel button.
*/
	setCancelButtonText(text:String):void {
	
	};
	/**
 * @description Set the default button for the dialog.
 * @since 4.12.0.84
 * @param btn - The button to set as the default for the dialog.
*/
	setDefaultButton(btn:DzButton):void {
	
	};
	/**
 * @description Sets the 'Help' button is set as the default button for the dialog.
 * @since 4.12.0.84
*/
	setHelpButtonAsDefault():void {
	
	};
	/**
 * @description Enables or disables the Help button. By default, the button is enabled.
 * @param onOff - If true, the 'Help' button will be available to the user. If false, the button will not be shown.
*/
	setHelpButtonEnabled(onOff:Boolean):void {
	
	};
	/**
 * @description Shows or hides the 'Accept' button. By default, the button is shown.
 * @param onOff - If true, the 'Accept' button will be available to the user. If false, the button will not be shown.
*/
	showAcceptButton(onOff:Boolean):void {
	
	};
	/**
 * @description Shows or hides the 'Apply' button. By default, the button is hidden.
 * @param onOff - If true, the 'Apply' button will be available to the user. If false, the button will not be shown.
*/
	showApplyButton(onOff:Boolean):void {
	
	};
	/**
 * @description Shows or hides the 'Cancel' button. By default, the button is shown.
 * @param onOff - If true, the 'Cancel' button will be available to the user. If false, the button will not be shown.
*/
	showCancelButton(onOff:Boolean):void {
	
	};
	/**
 * @description Shows or hides the 'What's This' button. By default, the button is shown.
 * @param onOff - If true, the 'What's This' button will be available to the user. If false, the button will not be shown.
*/
	showHelpButton(onOff:Boolean):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the 'Apply' button is clicked by the user.
 * @signature `"applyClicked()"`
 * @event
*/
	applyClicked():void {
	
	};

}
/**
 * @classdesc This specialized DzNode subclass adds follow bone, and mesh-binding functionality to a node. All bones are assumed to be in the hierarchy of a DzSkeleton, and will not function properly if their parent is not a skeleton or another bone.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/bone_dz} */
class DzBone extends DzNode {
	/**
 * @description Default Constructor. Creates a new Bone node.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @returns The local scale of the bone at the given time.
 * @param tm - The time to get the local scale for.
*/
	getBoneLocalScale(tm:DzTime):DzMatrix3 {
	
	};
	/**
 * @description Get the node that this node is following.
 * @returns The bone this bone is following, or NULL if this bone is not following another bone.
*/
	getFollowBone():DzBone {
	
	};
	/**
 * @returns The mode that this node is following by.
 * @since 4.8.0.23
*/
	getFollowMode():Number {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the follow bone has changed.
 * @signature `"followBoneChanged(DzBone*)"`
 * @event
*/
	followBoneChanged(newFollowBone:DzBone):void {
	
	};

}
/**
 * @classdesc 
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/boolproperty_dz} */
class DzBoolProperty extends DzIntProperty {
	/**
 * @description Default Constructor. Creates a non-animatable, non-user property.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Overloaded constructor.
 * @param name - The name of this property.
 * @param canAnimate - If true, creates an animatable property.
 * @param isUserProperty - If true, creates a user property; user properties are properties that can be added/deleted by users.
 * @param initVal - Sets the default value of the property.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @returns The boolean value of the property at the current time.
*/
	getBoolValue():Boolean {
	
	};
	/**
 * @returns The default boolean value of the property.
*/
	getDefaultBoolValue():Boolean {
	
	};
	/**
 * @description Sets the boolean value for this property at the current time - or the default value if this property is not animatable.
 * @param val - The new value for the property.
*/
	setBoolValue(value:Boolean):void {
	
	};
	/**
 * @description Sets the default boolean value for this property.
 * @param val - The new default value for the property.
*/
	setDefaultBoolValue(val:Boolean):void {
	
	};

}
/**
 * @classdesc 
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/box3_dz} */
class DzBox3 extends Object {
	/**
 * @description Holds the maximum corner of this box.
	*/
	max:DzVec3;
	/**
 * @description Holds the maximum value of this box on the x axis.
	*/
	maxX:Number;
	/**
 * @description Holds the maximum value of this box on the y axis.
	*/
	maxY:Number;
	/**
 * @description Holds the maximum value of this box on the z axis.
	*/
	maxZ:Number;
	/**
 * @description Holds the minimum corner of this box.
	*/
	min:DzVec3;
	/**
 * @description Holds the minimum value of this box on the x axis.
	*/
	minX:Number;
	/**
 * @description Holds the minimum value of this box on the y axis.
	*/
	minY:Number;
	/**
 * @description Holds the minimum value of this box on the z axis.
	*/
	minZ:Number;
	/**
 * @description Creates an uninitialized box - the first point included in an uninitialized box will become the min and max for this box.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Creates a box by parsing a string.
 * @param box - A string representation of the box in the form "[[ minX, minY, minZ ],[ maxX, maxY, maxZ ]]"
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Creates an initialized box with the given min and max values.
 * @param xmin - The minimum value for this box on the x axis.
 * @param ymin - The minimum value for this box on the y axis.
 * @param zmin - The minimum value for this box on the z axis.
 * @param xmax - The maximum value for this box on the x axis.
 * @param ymax - The maximum value for this box on the y axis.
 * @param zmax - The maximum value for this box on the z axis.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Creates an initialized box with the given min and max values.
 * @param min - The minimum corner of this box.
 * @param max - The maximum corner of this box.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Copy Constructor.
 * @param box - The box to copy.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @returns The closest point in this box to point. Returns point if point is already in this box.
 * @since 4.9.3.33
 * @param point - The point to find the closest point in this box to.
*/
	closestPoint(point:DzVec3):DzVec3 {
	
	};
	/**
 * @returns true if point is inside this box, otherwise false.
 * @since 4.9.3.48
 * @param point - The point to check whether or not this box contains it.
*/
	containsPoint(point:DzVec3):Boolean {
	
	};
	/**
 * @returns The center point of this box.
*/
	getCenter():DzVec3 {
	
	};
	/**
 * @description Tests this box for intersection with the ray, and determines the two points on this box intersected by the line.
 * @returns An object where the "intersects" property represents whether or not this box intersects with the given line, the "firstIntersection" property represents the first intersection point, and the "lastIntersection" property represents the last intersection point if ray intersects.
 * @since 4.14.1.36
 * @param ray - The line to test for intersection with this box.
*/
	getIntersection(ray:DzLine3):Object {
	
	};
	/**
 * @returns The corner to corner distance of this box.
*/
	getSize():Number {
	
	};
	/**
 * @description Creates a new box by transforming the corners of this box through the given matrix and then including them.
 * @returns A copy of this box that has been transformed by the matrix.
 * @param matrix - The transform to apply.
*/
	getTransformedBox(matrix:DzMatrix3):DzBox3 {
	
	};
	/**
 * @param vec - The point to include in this box.
*/
	include(vec:DzVec3):void {
	
	};
	/**
 * @description Grows this box, if necessary, to include the given box.
 * @param box - The box to include in this box.
*/
	include(box:DzBox3):DzBox3 {
	
	};
	/**
 * @returns true if this box is valid, false if it is uninitialized.
 * @since 4.9.3.33
*/
	isValid():Boolean {
	
	};
	/**
 * @description Provides a fast intersection test without returning the intersection locations. This function is much faster than getIntersection().
 * @returns true if the ray intersects this box, otherwise false.
 * @since 4.9.3.33
 * @param ray - The line to test for intersection with this box.
 * @param tolerance - The amount of deviation allowed and still be considered an intersection.
*/
	testIntersection(ray:DzLine3, tolerance:Number):Boolean {
	
	};
	/**
 * @returns A string representation of this box in the form "[[ minX, minY, minZ ],[ maxX, maxY, maxZ ]]".
*/
	toString():String {
	
	};
	/**
 * @description Translates this box by adding the given vector.
 * @param vec - The vector to translate by.
*/
	translate(vec:DzVec3):void {
	
	};

}
/**
 * @classdesc TODO:
Add detailed description.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/boxlayout_dz} */
class DzBoxLayout extends DzLayout {
	/**
 * @description The direction of the layout
	*/
	direction:Direction;
	/**
 * @description ENUMERATOR: Horizontal from left to right.
*/
	
	static LeftToRight;
	/**
 * @description ENUMERATOR: Horizontal from right to left.
*/
	
	static RightToLeft;
	/**
 * @description ENUMERATOR: Vertical from top to bottom.
*/
	
	static TopToBottom;
	/**
 * @description ENUMERATOR: Vertical from bottom to top.
*/
	
	static BottomToTop;
	/**
 * @description Creates a box layout that manages the children widgets of the given parent widget
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Creates a vertical box layout as a sub-layout of the given layout
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Adds the given layout to the items managed by this layout
 * @param item - The layout to add
 * @param stretch - The stretch factor to set for the layout
*/
	addLayout(layout:DzLayout, stretch:Number):void {
	
	};
	/**
 * @description Adds a non-stretchable space with size size to the end of this layout
*/
	addSpacing(size:Number):void {
	
	};
	/**
 * @description Adds a stretchable space with stretch factor stretch to the end of this layout
*/
	addStretch(stretch:Number):void {
	
	};
	/**
 * @description Limits the minimum dimension perpendicular to the direction the box, to size
*/
	addStrut(size:Number):void {
	
	};
	/**
 * @description Adds the given widget to the items managed by this layout
 * @param item - The widget to add
 * @param stretch - The stretch factor to set for the widget
*/
	addWidget(widget:DzWidget, stretch:Number):void {
	
	};

}
/**
 * @classdesc TODO:
Add detailed description.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/brickmaterial_dz} */
class DzBrickMaterial extends DzRefCountedItem, DzMaterial {
	/**
 * @description Creates a new brick material.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Converts the given default material to a brick material.
 * @param mat - The material to be converted.
*/
	static convertDefaultMaterial(mat:DzDefaultMaterial):void {
	
	};
	/**
 * @description Converts the given Uber Iray material to a brick material.
 * @param mat - The material to be converted.
*/
	static convertUberIrayMaterial(mat:DzMaterial):void {
	
	};
	/**
 * @description Adds the given brick to this brick material.
 * @returns The id of the added brick.
 * @param brick - The brick to add.
*/
	addBrick(brick:shaderbrick_dz):Number {
	
	};
	/**
 * @returns true if this brick material allows auto-baking, otherwise false.
*/
	allowsAutoBake():Boolean {
	
	};
	/**
 * @description Apply a copy of this material to all selected materials in the scene.
*/
	applyToScene():void {
	
	};
	/**
 * @description Deletes all bricks in this material.
*/
	deleteAllBricks():void {
	
	};
	/**
 * @description Deletes the brick with the given id from the material.
 * @param id - The id of the brick to delete.
*/
	deleteBrick(id:Number):void {
	
	};
	/**
 * @description Deletes the given brick from the material.
 * @param brick - The brick to delete.
*/
	deleteBrick(brick:shaderbrick_dz):DzShaderbrick {
	
	};
	/**
 * @description Takes this brick material out of edit mode.
*/
	endEditMode():void {
	
	};
	/**
 * @returns The brick at the given id.
 * @param id - The id of the desired brick.
*/
	getBrick(id:Number):DzShaderbrick {
	
	};
	/**
 * @returns A list of the ids for the bricks associated with this brick material.
*/
	getBrickIDs():Array {
	
	};
	/**
 * @returns The brick set at the specified location.
 * @param i - The index of the desired brick set.
*/
	getBrickSet(i:Number):DzBrickset {
	
	};
	/**
 * @returns The user name of this brick material.
*/
	getBrickUserName():String {
	
	};
	/**
 * @returns The extension for this brick material.
*/
	getExtension():String {
	
	};
	/**
 * @returns The number of brick sets in this brick material.
*/
	getNumBrickSets():Number {
	
	};
	/**
 * @description Invalidates the brick sets, causing them to be rebuilt.
*/
	invalidateSets():void {
	
	};
	/**
 * @returns true if this brick material is currently in edit mode, otherwise false.
*/
	isInEditMode():Boolean {
	
	};
	/**
 * @description Sets the user name of this brick material.
 * @param name - The new name for this brick material.
*/
	setBrickUserName(name:String):void {
	
	};
	/**
 * @description Sets the name for this brick material.
 * @param name - The new name to be used.
*/
	setMaterialName(name:String):void {
	
	};
	/**
 * @description Sets whether or not this brick material needs Ptex parameters.
 * @param onoff - If true, this brick material needs Ptex parameters.
*/
	setNeedsPtexParams(onoff:Boolean):void {
	
	};
	/**
 * @description Sets whether this brick material needs tangent space parameters.
 * @param onoff - If true, this brick material will need tangent space parameters.
*/
	setNeedsTangentSpaceParams(onoff:Boolean):void {
	
	};
	/**
 * @description Puts this brick material in edit mode.
*/
	startEditMode():void {
	
	};
	/**
 * @description Sets whether the identifier is updated when this brick material is invalidated.
 * @param onOff - If true, the identifier will be updated when this brick material is invalidated.
*/
	updateIdentifierOnSetInvalidate(onOff:Boolean):void {
	
	};
	/**
 * @returns true if this brick material uses local shader space.
*/
	usesLocalShaderSpace():Boolean {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when a brick is added to this brick material.
 * @signature `"brickAdded(DzShaderBrick*)"`
 * @event
*/
	brickAdded(brick:shaderbrick_dz):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when a brick is removed from this brick material.
 * @signature `"brickRemoved(DzShaderBrick*)"`
 * @event
*/
	brickRemoved(brick:shaderbrick_dz):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description TODO: Add Description
 * @signature `generateFilesFinished()`
 * @event
*/
	generateFilesFinished():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description TODO: Add Description
 * @signature `generateFilesStarted()`
 * @event
*/
	generateFilesStarted():void {
	
	};

}
/**
 * @classdesc DzButton implements an abstract button base. Subclasses specify how to respond to user interaction, and how to present the button to the user. If you want to create a button, create a DzPushButton.
DzPushButton provides both push and toggle buttons. The DzRadioButton and DzCheckBox classes provide only toggle buttons.
The difference between down and on is, when a user clicks a [toggle] button to toggle it on, the button is first pressed and then released into the On state (on is true, down is false). When the user clicks it again (to toggle it off), the button is first pressed and then released to the Off state (on and down are false).
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/button_dz} */
class DzButton extends DzWidget {
	/**
 * @description Holds whether or not autoRepeat is enabled. false by default. If enabled, the clicked() signal is emitted at regular intervals if down is true. This property has no effect on toggle buttons.
	*/
	autoRepeat:Boolean;
	/**
 * @description Holds the initial delay, in milliseconds, before auto-repetition begins
	*/
	autoRepeatDelay:Number;
	/**
 * @description Holds the length of the auto-repetition interval, in milliseconds
	*/
	autoRepeatInterval:Number;
	/**
 * @description Holds whether or not the button is checkable. false by default.
	*/
	checkable:Boolean;
	/**
 * @description Holds whether or not the button is checked. Only applies to checkable buttons.
	*/
	checked:Boolean;
	/**
 * @description Holds whether or not the button is pressed. true if the button is pressed down. false by default. The signals pressed() and clicked() are not emitted when this property set to true.
	*/
	down:Boolean;
	/**
 * @description Holds the Pixmap shown on the button. If the Pixmap is monochrome (e.g. its depth is 1) and it does not have a mask, the Pixmap will be its own mask. This allows transparent bitmaps to be drawn, which are important for toggle buttons. 0 if no pixmap is set.
	*/
	pixmap:Pixmap;
	/**
 * @description Holds the text displayed on the button. undefined by default. An ampersand (&) in the String automatically creates an accelerator for it using the character that follows the ampersand, as the accelerator key. Any previous accelerator will be overwritten, or cleared if no accelerator is defined by the text.
	*/
	text:String;
	/**
 * @description Holds whether or not the button is a toggle (Read Only). false by default.
	*/
	toggleButton:Boolean;
	/**
 * @description Toggles the state of a toggle button.
*/
	toggle():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the button is pressed and then released.
 * @signature `"clicked()"`
 * @event
*/
	clicked():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the button is pressed.
 * @signature `"pressed()"`
 * @event
*/
	pressed():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the button is released.
 * @signature `"released()"`
 * @event
*/
	released():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when toggleState on this button has changed.
 * @signature `"stateChanged(int)"`
 * @event
*/
	stateChanged(state:Number):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the button is toggled.
 * @signature `"toggled(bool)"`
 * @event
*/
	toggled(onOff:Boolean):void {
	
	};

}
/**
 * @classdesc Provides an abstract container that manages the states of DzButton instances placed within it - it does not provide a visual representation (see DzGroupBox).
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/buttongroup_dz} */
class DzButtonGroup extends DzGroupBox {
	/**
 * @description Holds the number of buttons in this group (Read Only)
	*/
	count:Number;
	/**
 * @description Holds whether or not this group is exclusive for all toggle buttons (the default is false)
	*/
	exclusive:Boolean;
	/**
 * @description Holds whether or not this group is exclusive for radio buttons (the default is true)
	*/
	radioButtonExclusive:Boolean;
	/**
 * @description Holds the checked button in an exclusive group
	*/
	selected:Number;
	/**
 * @description Creates a button group as a child of the given parent widget
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Adds the specified button to this group. This is only necessary if the button was not created as a child of the group.
 * @param button - The button to add.
*/
	addButton(button:DzButton):void {
	
	};
	/**
 * @description Adds the specified button to this group with the specified id. This is only necessary if the button was not created as a child of the group.
 * @param button - The button to add.
 * @param id - The id to assign.
*/
	addButton(button:DzButton, id:Number):void {
	
	};
	/**
 * @returns The button in this group with the specified id (if any), otherwise null.
 * @param id - The id of the button to get.
*/
	button(id:Number):DzButton {
	
	};
	/**
 * @returns A list of the buttons in this group.
*/
	buttons():Array {
	
	};
	/**
 * @returns The button that is currently checked (selected) in this group.
*/
	checkedButton():DzButton {
	
	};
	/**
 * @returns The id of the specified button (if any), otherwise -1.
 * @param button - The button to get the id of.
*/
	id(button:DzButton):Number {
	
	};
	/**
 * @description Inserts the specified button into this group, with the specified id. This is only necessary if the button was not created as a child of the group.
 * @returns The id of button in the group.
 * @param button - The button to insert.
 * @param id - The id to assign.
*/
	insert(button:DzButton, id:Number):Number {
	
	};
	/**
 * @description Removes the specified button from this group.
 * @param button - The button to remove.
*/
	removeButton(button:DzButton):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when a button in the group is pressed and released
 * @signature `"clicked(int)"`
 * @event
*/
	clicked(id:Number):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when a button in the group is pressed
 * @signature `"pressed(int)"`
 * @event
*/
	pressed(id:Number):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when a button in the group is released
 * @signature `"released(int)"`
 * @event
*/
	released(id:Number):void {
	
	};

}
/**
 * @classdesc This is the DAZScript counterpart to the QByteArray type used in the DAZ Studio SDK.
Attention:@attention Attention:
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/bytearray} */
class ByteArray extends QObject {
	/**
 * @description The number of bytes in the array
	*/
	length:Number;
	/**
 * @description The number of bytes in the array
	*/
	size:Number;
	/**
 * @description Default Constructor.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Copy Constructor.
 * @param byteArray - The ByteArray to copy.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Creates a byte array containing the ascii representation of the string.
 * @param str - The string to copy into the byte array.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @returns The byte at the given index in the array of bytes.
 * @param index - The index of the byte to return.
*/
	byteAt(index:Number):Number {
	
	};
	/**
 * @returns The character at the given index in the array of bytes.
 * @param index - The index of the byte to return.
*/
	charAt(index:Number):String {
	
	};
	/**
 * @returns The array of bytes as a string.
*/
	convertToString():String {
	
	};
	/**
 * @returns The array of bytes as a string.
*/
	convertToStringFromUtf16():String {
	
	};
	/**
 * @returns The array of bytes as a string.
*/
	convertToStringFromUtf8():String {
	
	};
	/**
 * @returns A decoded copy of the Base64 encoded array base64.
 * @since 4.10.0.88
 * @attention Input is not checked for validity; invalid characters in the input are skipped, enabling the decoding process to continue with subsequent characters.
*/
	fromBase64(base64:ByteArray):ByteArray {
	
	};
	/**
 * @returns A decoded copy of the hexidecimal encoded array hexEncoded.
 * @since 4.10.0.88
 * @attention Input is not checked for validity; invalid characters in the input are skipped, enabling the decoding process to continue with subsequent characters.
*/
	fromHex(hexEncoded:ByteArray):ByteArray {
	
	};
	/**
 * @returns A decoded copy of the URI/URL-style percent-encoded pctEncoded.
 * @since 4.10.0.88
*/
	fromPercentEncoding(pctEncoded:ByteArray):ByteArray {
	
	};
	/**
 * @returns A copy of the byte array, encoded as Base64.
 * @since 4.10.0.88
 * @attention The algorithm used to encode Base64-encoded data is defined in RFC 2045.
*/
	toBase64():ByteArray {
	
	};
	/**
 * @returns A hexidecimal encoded copy of the byte array.
 * @since 4.10.0.88
 * @attention Hexidecimal encoding uses the numbers 0-9 and the letters a-f.
*/
	toHex():ByteArray {
	
	};
	/**
 * @returns A URI/URL-style percent-encoded copy of this byte arra.
 * @since 4.10.0.88
 * @param exclude - To characters to prevent from being encoded.
 * @param exclude - To characters to force being encoded.
 * @attention By default, this function will encode all characters that are not one of the following: ALPHA ("a" to "z" and "A" to "Z") / DIGIT (0 to 9) / "-" / "." / "_" / "~"
*/
	toPercentEncoding(exclude:ByteArray, include:ByteArray):ByteArray {
	
	};

}
/**
 * @classdesc Encapsulates an object that is used to execute a script when a signal that it is connected to is triggered.
See Also:
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/callback_dz} */
class DzCallBack extends QObject {
	/**
 * @description Adds the callback to the given callback group.
 * @param group - The name of the group to add the callback to.
*/
	addToGroup(group:String):void {
	
	};
	/**
 * @description Disconnects from the signal that triggers this callback.
*/
	clearConnection():void {
	
	};
	/**
 * @returns The i'th argument from the current execution of the callback.
 * @attention Callbacks that are processed as events or blocked during scene load are provided no arguments and getSender() always returns the first QObject connected to, which is not necessarily the one sending the signal.
*/
	getArg(i:Number):Object {
	
	};
	/**
 * @returns The number of arguments for the current execution of the callback.
 * @attention Callbacks that are processed as events or blocked during scene load are provided no arguments and getSender() always returns the first QObject connected to, which is not necessarily the one sending the signal.
*/
	getArgCount():Number {
	
	};
	/**
 * @returns true if this callback is not processed during a scene load but is instead processed at the end of a scene load, otherwise false.
*/
	getBlockedDuringSceneLoad():Boolean {
	
	};
	/**
 * @returns true if this callback is set to be deleted after it has been executed, otherwise false.
 * @since 4.6.4.67
*/
	getDeleteAfterExecution():Boolean {
	
	};
	/**
 * @returns QVariant for QObject property
 * @since 4.9.4.90
*/
	getDynamicProperty(name:String):void {
	
	};
	/**
 * @returns A list of the groups that this callback belongs to.
*/
	getGroups():Array {
	
	};
	/**
 * @returns true if this callback is processed as an event, otherwise false.
*/
	getProcessAsEvent():Boolean {
	
	};
	/**
 * @returns The script that is executed when the signal is emitted.
*/
	getScript():String {
	
	};
	/**
 * @returns The object that sent the signal, or NULL.
*/
	getSender():QObject {
	
	};
	/**
 * @returns true if getScript() for this callback is the actual code that gets executed, false if getScript() contains the filename of the script to execute.
*/
	isEvaluated():Boolean {
	
	};
	/**
 * @description Removes this callback from the group callback group.
 * @param group - The name of the group to remove the callback from.
*/
	removeFromGroup(group:String):void {
	
	};
	/**
 * @param onOff - If true, this callback will not be processed while the scene is loading, it will be processed when the scene is finished loading.
 * @attention Callbacks that are blocked during scene load are provided no arguments and getSender() always returns the first QObject connected to, which is not necessarily the one sending the signal.
*/
	setBlockedDuringSceneLoad(onOff:Boolean):void {
	
	};
	/**
 * @description Makes the connection that triggers this callback.
 * @param sender - The object that the signal belongs to.
 * @param signal - The signature of the signal to connect to.
 * @param garbageCollect - If true, remove this callback from the DzCallBackMgr when sender is deleted.
*/
	setConnection(sender:QObject, signal:String, garbageCollect:Boolean):Boolean {
	
	};
	/**
 * @description Makes the connection that triggers this callback.
 * @param sender - The object that the signal belongs to.
 * @param signal - The signature of the signal to connect to.
*/
	setConnection(sender:QObject, signal:String):Boolean {
	
	};
	/**
 * @description Makes the connection that triggers this callback.
 * @returns The number of connections in signalList that are established, or -1 if sender is null.
 * @param sender - The object that the signal belongs to.
 * @param signalList - List of signal signatures to connect to.
 * @param garbageCollect - If true, remove this callback from the DzCallBackMgr when sender is deleted.
*/
	setConnections(sender:QObject, signalList:Array, garbageCollect:Boolean):Number {
	
	};
	/**
 * @since 4.6.4.67
 * @param onOff - If true, sets this callback to be deleted after it has been executed.
*/
	setDeleteAfterExecution(onOff:Boolean):void {
	
	};
	/**
 * @description Set QObject dynamic property on this callback
 * @since 4.9.4.90
*/
	setDynamicProperty(name:String, value:QVariant):void {
	
	};
	/**
 * @param onOff - If true, sets this callback to trigger as it is encountered in the event stack.
 * @attention Callbacks that are processed as events are provided no arguments and getSender() always returns the first QObject connected to, which is not necessarily the one sending the signal.
*/
	setProcessAsEvent(onOff:Boolean):void {
	
	};
	/**
 * @description Sets the script that will be executed by this callback.
 * @param script - The filename or code of the script to execute.
 * @param evaluate - If script is the actual code and it should be embedded, set this to true, otherwise it is assumed that script is the path of a script file to execute.
*/
	setScript(script:String, evaluate:Boolean):void {
	
	};

}
/**
 * @classdesc Responsible for the management of objects that are used to execute a script when a signal that the object is connected to is emitted.
There is only one instance of this manager in an application. This instance is created and owned by DzApp. Request the instance via DzApp.getCallBackMgr().Dynamically load a script.

### Example:
```
var sScript = "support/CallBackExample/HelloWorld.dsa";
var oCallBackMgr = App.getCallBackMgr();
var oCallBack = oCallBackMgr.createCallBack( "Hello World", sScript, false );
 
oCallBack.setConnection( Scene, "nodeAdded(DzNode*)" );
```
Embed a script.

### Example:
```
var sPath = String( "%1/support/CallBackExample/HelloWorld.dsa" ).arg( App.getScriptsPath() );
var oScript = new DzScript;
oScript.loadFromFile( sPath );
var sScript = oScript.getCode();
 
var oCallBackMgr = App.getCallBackMgr();
var oCallBack = oCallBackMgr.createCallBack( "Hello World", sScript, true );
 
oCallBack.setConnection( Scene, "nodeAdded(DzNode*)" );
```
CallBack script (./support/CallBackExample/HelloWorld.dsa).

### Example:
```
var oSender = CallBack.getSender();
var sMessage = String( "Sender Class: %1\n" +
		"Sender Name: %2\n\n" +
		"CallBack Args: %3" )
		.arg( oSender.className() )
		.arg( oSender.name )
		.arg( CallBack.getArgCount() );
 
var nArgs = CallBack.getArgCount();
if( nArgs > 0 ){
	for( var i = 0; i < nArgs; i += 1 ){
		sMessage += String( "\nArg %1 : %2" ).arg( i ).arg( CallBack.getArg( i ) );
	}
}
 
MessageBox.information( sMessage, CallBack.className(), "&OK" );
```
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/callbackmgr_dz} */
class DzCallBackMgr extends QObject {
	/**
 * @description Deletes all callbacks.
*/
	clearAllCallBacks():void {
	
	};
	/**
 * @description Creates a DzCallBack object.
 * @param name - The name for the callback.
 * @param script - The filename or code of the script to execute.
 * @param evaluate - If script is the actual code and it should be embedded, set this to true, otherwise it is assumed that script is the path of a script file to execute.
*/
	createCallBack(name:String, script:String, evaluate:Boolean):DzCallBack {
	
	};
	/**
 * @description Creates a DzCallBack object.
 * @param name - The name for the callback.
*/
	createCallBack(name:String):DzCallBack {
	
	};
	/**
 * @description Deletes the callback at the given index.
 * @param index - The index of the callback to delete.
*/
	deleteCallBack(index:Number):void {
	
	};
	/**
 * @description Deletes all callbacks with the given name.
 * @param name - The name of the callback to delete.
*/
	deleteCallBack(name:String):void {
	
	};
	/**
 * @description Deletes the specified callback.
 * @param callBack - The callback to delete.
*/
	deleteCallBack(callBack:DzCallBack):void {
	
	};
	/**
 * @description Deletes all callbacks in a given group.
 * @param name - The name of the group with callbacks to delete.
*/
	deleteCallBackGroup(name:String):void {
	
	};
	/**
 * @returns The callback at index if at least one callback exists and index is within the range [0, getNumCallBacks() - 1], otherwise null.
*/
	getCallBack(index:Number):DzCallBack {
	
	};
	/**
 * @returns The first DzCallBack object with the given name.
*/
	getCallBack(name:String):DzCallBack {
	
	};
	/**
 * @returns The index of the first callback named name.
*/
	getCallBackIndex(name:String):Number {
	
	};
	/**
 * @returns The list of all callbacks.
*/
	getCallBackList():Array {
	
	};
	/**
 * @returns The list of callbacks in the group named name.
*/
	getGroup(name:String):Array {
	
	};
	/**
 * @returns The number of callbacks.
*/
	getNumCallBacks():Number {
	
	};
	/**
 * @returns A list of strings that represent the signature(s) of the signal with the specified name.
*/
	getSignalSignature(obj:QObject, signalName:String):Array {
	
	};

}
/**
 * @classdesc TODO:
Add detailed description.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/camera_dz} */
class DzCamera extends DzNode {
	/**
 * @description The aspect height of this camera.
	*/
	aspectHeight:Number;
	/**
 * @description The aspect ratio of this camera (w / h).
	*/
	aspectRatio:Number;
	/**
 * @description The aspect width of this camera.
	*/
	aspectWidth:Number;
	/**
 * @description The distance of the far clipping plane from this camera. (Read Only)
	*/
	farClippingPlane:Number;
	/**
 * @description The focal distance of this camera.
	*/
	focalDistance:Number;
	/**
 * @description The focal length of this camera.
	*/
	focalLength:Number;
	/**
 * @description The width of the frame (film/sensor) of this camera (in mm). (Read Only)
	*/
	frameWidth:Number;
	/**
 * @description The mode of the headlight.
	*/
	headlightMode:HeadlightMode;
	/**
 * @description The relative offset of the headlight from this camera.
	*/
	headlightOffset:DzVec3;
	/**
 * @description The distance of the near clipping plane from this camera. (Read Only)
	*/
	nearClippingPlane:Number;
	/**
 * @description The pixels height of this camera.
	*/
	pixelsHeight:Number;
	/**
 * @description The pixels width of this camera.
	*/
	pixelsWidth:Number;
	/**
 * @description Whether or not the proportions of this camera is constrained.
	*/
	proportionsConstrained:Boolean;
	/**
 * @description The type of this camera. (Read Only)
	*/
	type:Number;
	/**
 * @description Whether or not to use the local dimensions of this camera.
	*/
	useLocalDimensions:Boolean;
	/**
 * @description ENUMERATOR: The width in pixels. Since: 4.6.4.70
*/
	
	static LOCAL_PIXEL_WIDTH;
	/**
 * @description ENUMERATOR: The height in pixels. Since: 4.6.4.70
*/
	
	static LOCAL_PIXEL_HEIGHT;
	/**
 * @description ENUMERATOR: The relative width of the aspect frame. Since: 4.6.4.70
*/
	
	static LOCAL_ASPECT_WIDTH;
	/**
 * @description ENUMERATOR: The relative height of the aspect frame. Since: 4.6.4.70
*/
	
	static LOCAL_ASPECT_HEIGHT;
	/**
 * @description ENUMERATOR: Orthogonal camera positioned to view the front of a figure
*/
	
	static FRONT_CAMERA;
	/**
 * @description ENUMERATOR: Orthogonal camera positioned to view the back of a figure
*/
	
	static BACK_CAMERA;
	/**
 * @description ENUMERATOR: Orthogonal camera positioned to view the left side of a figure.
*/
	
	static LEFT_CAMERA;
	/**
 * @description ENUMERATOR: Orthogonal camera positioned to view the right side of a figure.
*/
	
	static RIGHT_CAMERA;
	/**
 * @description ENUMERATOR: Orthogonal camera positioned to view a figure from the top.
*/
	
	static TOP_CAMERA;
	/**
 * @description ENUMERATOR: Orthogonal camera positioned to view a figure from the bottom.
*/
	
	static BOTTOM_CAMERA;
	/**
 * @description ENUMERATOR: Default perspective camera - defaults to a front view of a figure.
*/
	
	static PERSPECTIVE_CAMERA;
	/**
 * @description ENUMERATOR: General Orthogonal camera.
*/
	
	static ORTHO_CAMERA;
	/**
 * @description ENUMERATOR: General Perspective camera.
*/
	
	static GENERAL_CAMERA;
	/**
 * @description ENUMERATOR: The headlight is automatically on or off depending on whether or not lights are in the scene. Since: 4.7.1.94
*/
	
	static hmAuto;
	/**
 * @description ENUMERATOR: The headlight is on. Since: 4.7.1.94
*/
	
	static hmOn;
	/**
 * @description ENUMERATOR: The headlight is off. Since: 4.7.1.94
*/
	
	static hmOff;
	/**
 * @description Rotates this camera and adjusts its focal distance so that its focal point is at the given point.
 * @param pos - The point to aim this camera at.
*/
	aimAt(pos:DzVec3):void {
	
	};
	/**
 * @description Translates this camera so that its view frames the given box, and sets this camera's focal point to the center of the box, given the aspect ratio of the current view (w / h)
 * @param box - The bounding box to frame in this camera's view
 * @param aspect - The aspect ratio of the current view.
*/
	frame(box:DzBox3, aspect:Number):void {
	
	};
	/**
 * @returns The angle, in radians, of the horizontal field of view (FOV) for this camera (rectilinear lens).
 * @attention The following formula is used to calculate the horizontal FOV:
*/
	getFieldOfView():Number {
	
	};
	/**
 * @returns The focal point of this camera.
*/
	getFocalPoint():DzVec3 {
	
	};
	/**
 * @returns A light that illuminates the scene in front of this camera. Used for rendering by OpenGL and offline renderers when no lights exist in the scene. This headlight is created on demand - i.e. no headlight for this camera exists until this function is called the first time.
*/
	getHeadlight():DzLight {
	
	};
	/**
 * @returns true if this is a non-animatable view camera, otherwise false.
*/
	isViewCamera():Boolean {
	
	};
	/**
 * @description Resets this camera viewing parameters to defaults.
*/
	reset():void {
	
	};
	/**
 * @returns true if the headlight should contribute light to the scene, otherwise false.
 * @since 4.7.1.94
 * @param hasLights - Whether or not the scene has lights.
 * @param isRender - Whether or not the call is for the purpose of a render.
*/
	shouldDoHeadLight(hasLights:Boolean, isRender:Boolean):Boolean {
	
	};
	/**
 * @description Updates the other dimensions given an anchor dimension.
 * @param anchor - The anchor dimension.
*/
	updateDimensions(anchor:CameraDimension):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the aspect height dimension of this camera changes.
 * @signature `"aspectHeightChanged(float)"`
 * @event
*/
	aspectHeightChanged(height:Number):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when this camera's aspect ratio changes.
 * @signature `"aspectRatioChanged()"`
 * @event
*/
	aspectRatioChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the aspect width dimension of this camera changes.
 * @signature `"aspectWidthChanged(float)"`
 * @event
*/
	aspectWidthChanged(width:Number):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when any of the local dimensions of this camera change.
 * @signature `"dimensionsChanged()"`
 * @event
*/
	dimensionsChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the focal distance channel changes.
 * @signature `"focalDistanceChanged(const DzTimeRange&)"`
 * @event
*/
	focalDistanceChanged(range:DzTimeRange):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the focal length channel changes.
 * @signature `"focalLengthChanged(const DzTimeRange&)"`
 * @event
*/
	focalLengthChanged(range:DzTimeRange):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the frame width of this camera changes.
 * @signature `"frameWidthChanged(float)"`
 * @event
*/
	frameWidthChanged(size:Number):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when headlight mode of this camera changes.
 * @signature `"headlightModeChanged()"`
 * @event
*/
	headlightModeChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when headlight offset of this camera changes.
 * @signature `"headlightOffsetChanged()"`
 * @event
*/
	headlightOffsetChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the local pixel dimensions of this camera change.
 * @signature `"pixelDimensionsChanged()"`
 * @event
*/
	pixelDimensionsChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the pixel height dimension of this camera changes.
 * @signature `"pixelsHeightChanged(int)"`
 * @event
*/
	pixelsHeightChanged(height:Number):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the pixel width dimension of this camera changes.
 * @signature `"pixelsWidthChanged(int)"`
 * @event
*/
	pixelsWidthChanged(width:Number):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when projection of this camera changes and its view must be redrawn.
 * @signature `"projectionChanged()"`
 * @event
*/
	projectionChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the option for whether or not to constrain proportions of the local dimensions of this camera changes.
 * @signature `"proportionsConstrainedChanged(bool)"`
 * @event
*/
	proportionsConstrainedChanged(yesNo:Boolean):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the option for whether or not to use the local dimensions of this camera changes.
 * @signature `"aspectRatioChanged(bool)"`
 * @event
*/
	useLocalDimensionsChanged(yesNo:Boolean):void {
	
	};

}
/**
 * @classdesc An asset save filter for saving a Camera(s) Preset in the DSON format.
See Also:
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/cameraassetfilter_dz} */
class DzCameraAssetFilter extends DzAssetFileOutFilter {
	/**
 * @description TODO:
Add description.
 * @constructor
*/
	constructor() {
	
	};

}
/**
 * @classdesc A "Category" is described as a class or collection of entities regarded as having common traits and/or characteristics. Within a given class or collection of entities, certain traits and/or characteristics may be regarded as being shared by a smaller subset - i.e., a "Sub-Category." Thus, categorization naturally supports a hierarchical structure.
The "Category" container type serves to provide a means of working with "Assets" that share characteristics without the encumbrances imposed by moving the actual files they represent on disk - moving or renaming files on disk breaks the correlation between the file and the "Asset" that represents it.
See Also:
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/categoryassetcontainer_dz} */
class DzCategoryAssetContainer extends DzRefCountedItem, DzAbstractAssetContainer {
	/**
 * @description Holds whether this category is owned by a vendor or by the user. (Read Only)
	*/
	isVendor:Boolean;
	/**
 * @returns A list of assets associated with the path of this container, matching the criteria specified.
 * @since 4.9.3.56
 * @param userFacing - Whether or not to limit the list to user-facing assets.
 * @param installed - Whether or not to limit the list to installed assets.
*/
	getAssetsInCategory(userFacing:Boolean, installed:Boolean):Array {
	
	};
	/**
 * @returns The full path of the category that this container represents.
 * @since 4.9.2.48
*/
	getPath():String {
	
	};
	/**
 * @description Updates the container using the data that is currently stored in the database.
*/
	updateRow():void {
	
	};

}
/**
 * @classdesc An asset save filter for saving a Character Preset in DSON format.
See Also:
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/characterassetfilter_dz} */
class DzCharacterAssetFilter extends DzAssetFileOutFilter {
	/**
 * @description TODO:
Add description.
 * @constructor
*/
	constructor() {
	
	};

}
/**
 * @classdesc DzRadioButton and DzCheckBox are both option buttons (e.g. they can be checked or unchecked). They differ in how the available choices are restricted. A DzCheckBox is used to define several choices that can all co-exist at the same time (e.g. "many of many"). While a DzRadioButton is used to provide several choices, where only one can be ultimately chosen (e.g. "one of many").Boolean : checked

### Example:
```
// Create a new dialog
var wDlg = new DzDialog;
wDlg.caption = "DzCheckBox Example";
 
// Create a layout for the dialog
var wLyt = new DzVBoxLayout( wDlg );
wLyt.autoAdd = true;
 
// Create a group box for the options
var wOptGB = new DzVGroupBox( wDlg );
wOptGB.columns = 1;
 
// Create the options
var wOpt1Btn = new DzCheckBox( wOptGB );
wOpt1Btn.text = "Option 1";
wOpt1Btn.checked = true;
var wOpt2Btn = new DzCheckBox( wOptGB );
wOpt2Btn.text = "Option 2";
var wOpt3Btn = new DzCheckBox( wOptGB );
wOpt3Btn.text = "Option 3";
wOpt3Btn.checked = true;
 
// Launch the dialog
wDlg.exec();
```
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/checkbox_dz} */
class DzCheckBox extends DzButton {
	/**
 * @description Holds whether or not the button is checked. true if the button is checked. false by default.
	*/
	checked:Boolean;
	/**
 * @description Holds whether or not the checkbox is a tri-state checkbox. The default is two-state (e.g. tri-state is false).
	*/
	tristate:Boolean;
	/**
 * @description Creates a check box as a child of the given parent widget
 * @constructor
*/
	constructor() {
	
	};

}
/**
 * @classdesc This is not a widget, but a helper for working with DzListView. Each DzCheckListItem represents a single item in a list view - add items to a list view by creating a new DzCheckListItem that is a child of the list view, or a child of another list view item in the list view.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/checklistitem_dz} */
class DzCheckListItem extends DzListViewItem {
	/**
 * @description Holds the height of the item.
	*/
	height:Number;
	/**
 * @description Holds whether or not the item is toggled on (checked).
	*/
	on:Boolean;
	/**
 * @description Holds the state of the item.
	*/
	state:ToggleState;
	/**
 * @description Holds whether or not the item is tristate.
	*/
	triState:Boolean;
	/**
 * @description Holds the type of the item. (Read Only)
	*/
	type:Type;
	/**
 * @description ENUMERATOR: The item is off.
*/
	
	static Off;
	/**
 * @description ENUMERATOR: The item has not changed - i.e. it is in the third state and the user has not clicked it.
*/
	
	static NoChange;
	/**
 * @description ENUMERATOR: The item is on.
*/
	
	static On;
	/**
 * @description ENUMERATOR: Radio Button item. Must be the child of a RadioButtonController
*/
	
	static RadioButton;
	/**
 * @description ENUMERATOR: Check Box item.
*/
	
	static CheckBox;
	/**
 * @description ENUMERATOR: Radio Button parent item.
*/
	
	static RadioButtonController;
	/**
 * @description ENUMERATOR: Check Box parent item.
*/
	
	static CheckBoxController;
	/**
 * @description Creates a checklist item at the root level of the specified list view.
 * @param parent - The listview to create this item as a child of.
 * @param type - The Type of item to create.
 * @param id - The identifier for this item.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Creates a checklist item as a child of the specified list item.
 * @param parent - The item to create this item as a child of.
 * @param type - The Type of item to create.
 * @param id - The identifier for this item.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Creates a checklist item as a child of the specified list item.
 * @param parent - The item to create this item as a child of.
 * @param type - The Type of item to create.
 * @param id - The identifier for this item.
 * @constructor
*/
	constructor() {
	
	};

}
/**
 * @classdesc TODO:
Add detailed description.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/circle3_dz} */
class DzCircle3 extends Object {
	/**
 * @description Holds the center of the circle in three dimensional space.
	*/
	center:DzVec3;
	/**
 * @description Holds the normal of the plane that the circle lies on.
	*/
	normal:DzVec3;
	/**
 * @description Holds the radius of the circle.
	*/
	radius:Number;
	/**
 * @description Default Constructor.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Creates a circle by parsing a string.
 * @param circle - A string representation of the circle in the form "[[ centerX, centerY, centerZ ], [ normalX, normalY, normalZ ], radius ]"
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Copy Constructor.
 * @param circle - The circle to copy.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @param center - The center point of the circle.
 * @param normal - The normal of the circle (i.e. a vector perpendicular to the plane of the circle).
 * @param radius - The radius of the circle.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @returns A string representation of this circle in the form "[[ centerX, centerY, centerZ ], [ normalX, normalY, normalZ ], radius ]".
*/
	toString():String {
	
	};

}
/**
 * @classdesc This is the DAZScript counterpart to the QColor type used in the DAZ Studio SDK.
Attention:@attention Attention:
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/color} */
class Color extends QObject {
	/**
 * @description The alpha component of the color. In the range 0 to 255.
	*/
	alpha:Number;
	/**
 * @description The blue component of the color. In the range 0 to 255.
	*/
	blue:Number;
	/**
 * @description The green component of the color. In the range 0 to 255.
	*/
	green:Number;
	/**
 * @description The hue of the color as defined in the HSV color model.
	*/
	hue:Number;
	/**
 * @description The name of the color if it matches a named color, otherwise an empty string.
	*/
	name:String;
	/**
 * @description The red component of the color. In the range 0 to 255.
	*/
	red:Number;
	/**
 * @description The color code of the color.
	*/
	rgb:Number;
	/**
 * @description The saturation of the color as defined in the HSV color model.
	*/
	saturation:Number;
	/**
 * @description The value of the color as defined in the HSV color model.
	*/
	value:Number;
	/**
 * @description Default Constructor.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Sets the RGB value from colorName, which may be in one of these formats (each of R, G and B is a single hex digit):
 * @param colorName - The named color to set the value of this color to.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Component-wise constructor. Each value (i.e., r, g, b, a ) should be in the [0, 255] range.
 * @param r - The red value for the color.
 * @param g - The green value for the color.
 * @param b - The blue value for the color.
 * @param a - The alpha value for the color (since 4.9.4.4).
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Copy Constructor.
 * @param color - The Color to copy.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @returns A darker version of this color.
*/
	dark():Color {
	
	};
	/**
 * @returns true if the color is valid, otherwise false.
 * @since 4.8.1.93
*/
	isValid():Boolean {
	
	};
	/**
 * @returns A lighter version of this color.
*/
	light():Color {
	
	};
	/**
 * @description Sets the red, green, blue and alpha values of this color to r, g, b and a, respectively.
 * @param r - The new red value for the color.
 * @param g - The new green value for the color.
 * @param b - The new blue value for the color.
 * @param b - The new alpha value for the color.
*/
	setRgb(r:Number, g:Number, b:Number, a:Number):void {
	
	};
	/**
 * @description Sets the red, green and blue values of this color to r, g and b, respectively.
 * @param r - The new red value for the color.
 * @param g - The new green value for the color.
 * @param b - The new blue value for the color.
*/
	setRgb(r:Number, g:Number, b:Number):void {
	
	};
	/**
 * @description Sets the color code of the color. The value is a bitmask on the form 0xRRGGBB, where RR=red, GG=green, and BB=blue, all as hexadecimal digits.
 * @param colorCode - The encoded value for the color.
*/
	setRgb(colorCode:Number):void {
	
	};

}
/**
 * @classdesc A global static object available via the Global.ColorDialog variable.
This object provides functions to display an OS native color picker to the user - simply call the function as shown in the following example:
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/colordialog_dz} */
class DzColorDialog extends QObject {
	/**
 * @returns The i'th custom color in the color picker.
*/
	customColor(i:Number):Color {
	
	};
	/**
 * @returns The number of custom colors in the color picker.
*/
	customCount():Number {
	
	};
	/**
 * @description Shows a color picker dialog to the user.
 * @returns The color selected by the user.
 * @param initial - The color that the dialog will start with.
*/
	getColor(initial:Color):Color {
	
	};
	/**
 * @description Set the i'th custom color in the color picker.
*/
	setCustomColor(i:Number, c:Color):void {
	
	};
	/**
 * @description Set the i'th standard color in the color picker.
*/
	setStandardColor(i:Number, c:Color):void {
	
	};

}
/**
 * @classdesc 
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/colorproperty_dz} */
class DzColorProperty extends DzIntProperty {
	/**
 * @description ENUMERATOR: Hue, Saturation, and Value.
*/
	
	static HSV;
	/**
 * @description ENUMERATOR: Hue, Saturation, and Lightness (or Luminosity).
*/
	
	static HSL;
	/**
 * @description ENUMERATOR: Red, Green, Blue.
*/
	
	static RGB;
	/**
 * @description Default Constructor. Creates a non-animatable, non-user property.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @param name - The name of this property.
 * @param canAnimate - If true, creates an animatable property.
 * @param isUserProperty - If true, creates a user property; user properties are properties that can be added/deleted by users.
 * @param initVal - Sets the default value of this property.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @param name - The name of this property.
 * @param canAnimate - If true, creates an animatable property.
 * @param isUserProperty - If true, creates a user property; user properties are properties that can be added/deleted by users.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Converts a string to an enumerated animation blend mode value.
 * @returns The AnimationBlendMode corresponding to str.
 * @since 4.6.4.84
 * @param str - The string to convert.
*/
	static animationBlendModeFromStr(str:String):AnimationBlendMode {
	
	};
	/**
 * @description Converts an enumerated animation blend mode value to a string.
 * @returns A string representation of the enumerated AnimationBlendMode value.
 * @since 4.6.4.84
 * @param type - The AnimationBlendMode to convert.
*/
	static animationBlendModeToStr(type:AnimationBlendMode):String {
	
	};
	/**
 * @returns The animation blend mode for the property.
 * @since 4.6.4.84
*/
	getAnimationBlendMode():AnimationBlendMode {
	
	};
	/**
 * @returns The color value of the property at the current time.
*/
	getColorValue():Color {
	
	};
	/**
 * @returns The color value of the property at the given time.
 * @param tm - The scene time to get the color value at.
*/
	getColorValue(tm:DzTime):Color {
	
	};
	/**
 * @returns The default color value of the property.
*/
	getDefaultColorValue():Color {
	
	};
	/**
 * @returns The raw color value of the property at the given key.
 * @param i - The index of the key to get the color value of.
*/
	getKeyColorValue(i:Number):Color {
	
	};
	/**
 * @returns The raw color value of the property at the given time.
 * @param tm - The scene time at which to get the raw color value.
*/
	getRawColorValue(tm:DzTime):Color {
	
	};
	/**
 * @returns The raw color value of the property.
*/
	getRawColorValue():Color {
	
	};
	/**
 * @description Sets the animation blend mode for the property.
 * @since 4.6.4.84
 * @param mode - The animation blend mode to set.
*/
	setAnimationBlendMode(mode:AnimationBlendMode):void {
	
	};
	/**
 * @description Sets the color value for this property at the given time; or the default value if this property is not animatable.
 * @param tm - The scene time at which to set the value.
 * @param val - The new value for the property.
*/
	setColorValue(tm:DzTime, val:Color):void {
	
	};
	/**
 * @description Sets the color value for this property at the current time; or the default value if this property is not animatable.
 * @param val - The new value for the property.
*/
	setColorValue(val:Color):void {
	
	};
	/**
 * @description Sets the default color value for this property.
 * @param val - The new default value for the property.
*/
	setDefaultColorValue(val:Color):void {
	
	};
	/**
 * @description Sets the color value of this property for the given key.
 * @param i - The index of the key to set the value of.
 * @param val - The new default value for the property.
*/
	setKeyColorValue(i:Number, val:Color):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the animation blend mode for this property has changed.
 * @signature `"animationBlendModeChanged()"`
 * @event
*/
	animationBlendModeChanged():void {
	
	};

}
/**
 * @classdesc 
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/colorwgt_dz} */
class DzColorWgt extends DzWidget {
	/**
 * @description Holds the default float value of the widget. 4.11.0.371
	*/
	defaultFloatColorValue:DzFloatColor;
	/**
 * @description Holds the deafult value of the widget.
	*/
	defaultValue:Color;
	/**
 * @description Holds whether or not values of each component are displayed as integers in the [0, 255] range, or as floating point values. true by default.
	*/
	displayAsInt:Boolean;
	/**
 * @description Holds whether or not the float color value of this control is clamped.
	*/
	floatClamped:Boolean;
	/**
 * @description Holds the current float value of the widget.
	*/
	floatColorValue:DzFloatColor;
	/**
 * @description Holds the maximum allowable value for any component of a float color.
	*/
	floatMax:Number;
	/**
 * @description Holds the minimum allowable value for any component of a float color.
	*/
	floatMin:Number;
	/**
 * @description Holds whether or not the widget is considered to have an 'indeterminate' or 'Multiple' value. false by default.
	*/
	indeterminate:Boolean;
	/**
 * @description Holds whether or not the value is currently being edited. (Read Only)
	*/
	isEditing:Boolean;
	/**
 * @description Holds whether or not the default value is restorable if the user holds the [Shift+Alt] key when clicked.
	*/
	restorable:Boolean;
	/**
 * @description Holds the current value of the widget.
	*/
	value:Color;
	/**
 * @description Creates a color widget as a child of the given parent widget.
 * @param parent - The widget parent for the color widget.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the color is changed.
 * @signature `"colorChanged(const QColor&)"`
 * @event
*/
	colorChanged(color:Color):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when an editing operation on the slider ends - e.g. the user finishes spinning a color field.
 * @signature `"editEnd()"`
 * @event
*/
	editEnd():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when an editing operation on the widget begins - e.g. the user starts spinning a color field.
 * @signature `"editStart()"`
 * @event
*/
	editStart():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the color is changed.
 * @signature `"floatColorChanged(const DzFloatColor&)"`
 * @event
*/
	floatColorChanged(color:DzFloatColor):void {
	
	};

}
/**
 * @classdesc DzComboBox provides a means of presenting a list of options to the user in a way that takes up the minimum amount of screen space.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/combobox_dz} */
class DzComboBox extends DzWidget {
	/**
 * @description Holds the number of items in the combobox. (Read Only)
	*/
	count:Number;
	/**
 * @description Holds the index of the currently selected item in the combobox.
	*/
	currentItem:Number;
	/**
 * @description Holds the text of the currently selected item in the combobox.
	*/
	currentText:String;
	/**
 * @description Holds the policy used to determine where user-inserted items should appear in the combobox.
	*/
	insertPolicy:insertPolicy;
	/**
 * @description Holds the maximum number of items allowed on screen; 10 by default.
	*/
	maxVisibleItems:Number;
	/**
 * @description Holds the minimum number of characters that should fit in the combobox.
	*/
	minimumContentsLength:Number;
	/**
 * @description Holds the policy describing how the size of the combobox changes when the content changes.
	*/
	sizeAdjustPolicy:sizeAdjustPolicy;
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static NoInsert;
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static InsertAtTop;
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static InsertAtCurrent;
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static InsertAtBottom;
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static InsertAfterCurrent;
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static InsertBeforeCurrent;
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static InsertAlphabetically;
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static AdjustToContents;
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static AdjustToContentsOnFirstShow;
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static AdjustToMinimumContentsLength;
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static AdjustToMinimumContentsLengthWithIcon;
	/**
 * @description Creates a combobox as a child of the given parent widget.
 * @param parent - The widget parent for the combobox.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Adds text to the list of items in the combobox.
*/
	addItem(text:String, userData:String):void {
	
	};
	/**
 * @description Adds each of the strings in texts to the combobox
*/
	addItems(texts:Array):void {
	
	};
	/**
 * @description Removes all items from the combobox.
*/
	clear():void {
	
	};
	/**
 * @returns The index of the item containing data; otherwise returns -1.
*/
	findData(data:String):Number {
	
	};
	/**
 * @returns The index of the item containing text; otherwise returns -1.
*/
	findText(text:String):Number {
	
	};
	/**
 * @description Inserts the text and userData into the combobox at index. If index is equal to or higher than the total number of items, the new item is appended to the list of existing items. If index is zero or negative, the new item is prepended to the list of existing items.
*/
	insertItem(index:Number, text:String, userData:String):void {
	
	};
	/**
 * @description Inserts the strings in list into the combobox as separate items, starting at index.
*/
	insertItems(index:Number, list:Array):void {
	
	};
	/**
 * @description Inserts a separator into the combobox at index.
*/
	insertSeparator(index:Number):void {
	
	};
	/**
 * @returns The data of the item at index.
*/
	itemData(index:Number):String {
	
	};
	/**
 * @returns The text of the item at index.
*/
	itemText(index:Number):String {
	
	};
	/**
 * @description Removes the item at index from the list of items.
*/
	removeItem(index:Number):void {
	
	};
	/**
 * @description Sets the data for the item at index.
*/
	setItemData(index:Number, value:String):void {
	
	};
	/**
 * @description Sets the text for the item at index.
*/
	setItemText(index:Number, text:String):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when an item is selected.
 * @signature `"activated(int)"`
 * @event
*/
	activated(index:Number):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when an item is selected.
 * @signature `"activated(const QString&)"`
 * @event
*/
	activated(text:String):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the current index changes.
 * @signature `"currentIndexChanged(const QString&)"`
 * @event
*/
	currentIndexChanged(text:String):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the current index changes.
 * @signature `"currentIndexChanged(int)"`
 * @event
*/
	currentIndexChanged(index:Number):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the highlighted item changes.
 * @signature `"highlighted(const QString&)"`
 * @event
*/
	highlighted(text:String):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the highlighted item changes.
 * @signature `"highlighted(int)"`
 * @event
*/
	highlighted(index:Number):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the text of the box changes, passes the new text of the box.
 * @signature `"textChanged(const QString&)"`
 * @event
*/
	textChanged(text:String):void {
	
	};

}
/**
 * @classdesc A DzComboEdit provides a compound widget comprised of a line edit and a button that, when clicked, causes a menu to be displayed. Selecting one of the items in the popup menu causes the value of the editor to update with the text of the selected item by default.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/comboedit_dz} */
class DzComboEdit extends DzWidget {
	/**
 * @description Holds whether or not the input satisfies the inputMask and the validator. (Read Only)
	*/
	acceptableInput:Boolean;
	/**
 * @description Holds the alignment of the text displayed in the text field.
	*/
	alignment:DzWidget;
	/**
 * @description Holds the position of the cursor in the text field.
	*/
	cursorPosition:Number;
	/**
 * @description Holds the input mask for the text field. Set this to an empty string to clear the input mask.
	*/
	inputMask:String;
	/**
 * @description Holds the maximum length of the text in the text field.
	*/
	maxLength:Number;
	/**
 * @description Holds whether or not clicking an item in the menu causes only its text (default - false), or the entire path (true), to be inserted into the field.
	*/
	menuSelectionIncludesPath:Boolean;
	/**
 * @description Holds whether or not the text in the text field has been modified.
	*/
	modified:Boolean;
	/**
 * @description Holds the text to display to the user when text is an empty string; e.g., a hint.
	*/
	placeholderText:String;
	/**
 * @description Holds whether or not the text field can be manually written to by the user.
	*/
	readOnly:Boolean;
	/**
 * @description Holds whether or not a redo operation is available. (Read Only)
	*/
	redoAvailable:Boolean;
	/**
 * @description Holds the character(s) to detect in inserted items as the delimiter for constructing submenus.
	*/
	submenuDelimiter:String;
	/**
 * @description Holds the text of the text field.
	*/
	text:String;
	/**
 * @description Holds whether or not an undo operation is available. (Read Only)
	*/
	undoAvailable:Boolean;
	/**
 * @description Holds whether or not clicking the button causes a menu (default - false), or a treeview (true) to be displayed.
	*/
	usePathPopUp:Boolean;
	/**
 * @description Creates a combo edit as a child of the given parent widget.
 * @param parent - The widget parent for this widget.
 * @param updateOnSelect - Whether the editor should automatically update when an item is selected.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Adds an item with the given text to the list of options in the popup. The item is appended to the list of existing items.
 * @param item - The item to add. A separator can be created in a menu by using a single hyphen ("-") character. Sub-menus can be created by using two consecutive greater than ("»") characters as a delimiter between the entries of a given hierarchy.
 * @param validate - If true, causes the item to be checked for validity before being added to the list. (since 4.12.1.29)
*/
	addItem(item:String, validate:Boolean):void {
	
	};
	/**
 * @description Adds each of the strings in the given list to the list of options in the popup. Each item is appended to the list of existing items in turn.
 * @since 4.12.1.29
 * @param items - The list of items to add. Separators can be created in a menu by using a single hyphen ("-") character. Sub-menus can be created by using two consecutive greater than ("»") characters as a delimiter between the entries of a given hierarchy.
 * @param validate - If true, causes each item to be checked for validity before being added to the list. (since 4.12.1.29)
*/
	addItems(items:Array, validate:Boolean):void {
	
	};
	/**
 * @description If text is currently selected, it will be deleted and the cursor moved to the beginning of the selection. If no text is selected, the cursor will be moved one character to the left and the character will be deleted.
 * @since 4.12.0.80
*/
	backspace():void {
	
	};
	/**
 * @description Removes all strings used to build the list of options in the popup.
*/
	clear():void {
	
	};
	/**
 * @description Clears the text in the editor.
 * @since 4.12.0.80
*/
	clearText():void {
	
	};
	/**
 * @description Copies the selected text into the clipboard.
 * @since 4.12.0.80
*/
	copy():void {
	
	};
	/**
 * @description Moves the cursor backward the given number of characters.
 * @since 4.12.0.80
 * @param mark - If true, each character that is stepped over will be added to the current selection.
 * @param steps - The number of characters to move the cursor.
*/
	cursorBackward(mark:Boolean, steps:Number):void {
	
	};
	/**
 * @description Moves the cursor forward the given number of characters.
 * @since 4.12.0.80
 * @param mark - If true, each character that is stepped over will be added to the current selection.
 * @param steps - The number of characters to move the cursor.
*/
	cursorForward(mark:Boolean, steps:Number):void {
	
	};
	/**
 * @description Moves the cursor backward one word.
 * @since 4.12.0.80
 * @param mark - If true, the word will be added to the current selection.
*/
	cursorWordBackward(mark:Boolean):void {
	
	};
	/**
 * @description Moves the cursor forward one word.
 * @since 4.12.0.80
 * @param mark - If true, the word will be added to the current selection.
*/
	cursorWordForward(mark:Boolean):void {
	
	};
	/**
 * @description Copies the selected text into the clipboard and removes it from the editor.
 * @since 4.12.0.80
*/
	cut():void {
	
	};
	/**
 * @description If text is currently selected, it will be deleted and the cursor moved to the beginning of the selection. If no text is selected, the character to the right of the cursor will be deleted.
 * @since 4.12.0.80
*/
	del():void {
	
	};
	/**
 * @description Clears any selection in the editor.
 * @since 4.12.0.80
*/
	deselect():void {
	
	};
	/**
 * @description Moves the cursor to the end of the line.
 * @since 4.12.0.80
 * @param mark - If true, the text from the cursor's previous position to the end of the line will be added to the current selection.
*/
	end(mark:Boolean):void {
	
	};
	/**
 * @description Search the list of items in the popup for the specified text. The search is not case sensitive.
 * @returns The index of the item that represents the given text (if any), otherwise -1.
 * @param text - The item text to find.
*/
	findItem(text:String):Number {
	
	};
	/**
 * @returns The settings for the validator (if any) set on this combo edit, otherwise null.
 * @since 4.12.1.97
*/
	getValidatorSettings():DzSettings {
	
	};
	/**
 * @returns true if the input satisfies the inputMask and the validator, otherwise false.
 * @since 4.12.0.80
*/
	hasAcceptableInput():Boolean {
	
	};
	/**
 * @returns true if some or all of the text in the text field is selected, otherwise false.
 * @since 4.12.0.80
*/
	hasSelectedText():Boolean {
	
	};
	/**
 * @description Moves the cursor to the beginning of the line.
 * @since 4.12.0.80
 * @param mark - If true, the text from the beginning of the line to the cursor's previous position will be added to the current selection.
*/
	home(mark:Boolean):void {
	
	};
	/**
 * @description Inserts an item with the given text to the list of options in the popup at the given index.
 * @param index - The index to insert the item at. If the index is equal to or higher than the total number of items, the new item is appended to the list of existing items. If the index is zero or negative, the new item is prepended to the list of existing items.
 * @param item - The item to insert. A separator can be created in a menu by using a single hyphen ("-") character. Sub-menus can be created by using two consecutive greater than ("»") characters as a delimiter between the entries of a given hierarchy.
 * @param validate - If true, causes the item to be checked for validity before being inserted into the list. (since 4.12.1.29)
*/
	insertItem(index:Number, item:String, validate:Boolean):void {
	
	};
	/**
 * @description Inserts each of the strings in the given list to the list of options in the popup at the given index. Each item is appended to the list of existing items, from the given index, in turn.
 * @param index - The index to insert the items at. If the index is equal to or higher than the total number of items, the new items are appended to the list of existing items. If the index is zero or negative, the new items are prepended to the list of existing items.
 * @param items - The list of items to insert. Separators can be created in a menu by using a single hyphen ("-") character. Sub-menus can be created by using two consecutive greater than ("»") characters as a delimiter between the entries of a given hierarchy.
 * @param validate - If true, causes each item to be checked for validity before being inserted into the list. (since 4.12.1.29)
*/
	insertItems(index:Number, items:Array, validate:Boolean):void {
	
	};
	/**
 * @returns The list of strings used to build the list of options in the popup.
*/
	items():Array {
	
	};
	/**
 * @description Inserts any text on the clipboard into the line at the cursor's current position.
 * @since 4.12.0.80
*/
	paste():void {
	
	};
	/**
 * @description If redoAvailable is true, redoes the next operation in the editor.
 * @since 4.12.0.80
*/
	redo():void {
	
	};
	/**
 * @description Removes the specified item from the list of options in the popup.
 * @param item - The item to remove.
*/
	removeItem(item:String):void {
	
	};
	/**
 * @description Selects all the text in the editor.
 * @since 4.12.0.80
*/
	selectAll():void {
	
	};
	/**
 * @returns The currently selected text (if any) in the text field.
 * @since 4.12.0.80
*/
	selectedText():String {
	
	};
	/**
 * @returns The position in the editor where the current selection begins.
 * @since 4.12.0.80
*/
	selectionStart():Number {
	
	};
	/**
 * @description Causes this combo edit to only accept characters that represent double precision floating point (decimal) numbers.
 * @since 4.11.0.346
 * @param bottom - The minimum acceptable value.
 * @param top - The maximum acceptable value.
 * @param decimals - The maximum number of digits after the decimal point to allow.
 * @param scientific - If true, the text of the editor is expressed in scientific form; i.e., it may have an exponent part; i.e., 1.5E-2. If false (default), the text of the editor is expressed as a standard number; i.e., 0.015.
*/
	setDoubleValidator(bottom:Number, top:Number, decimals:Number, scientific:Boolean):void {
	
	};
	/**
 * @description Causes this combo edit to only accept characters that represent whole numbers (integers).
 * @since 4.11.0.346
 * @param minimum - The minimum acceptable value.
 * @param maximum - The maximum acceptable value.
*/
	setIntValidator(minimum:Number, maximum:Number):void {
	
	};
	/**
 * @description Causes this combo edit to only accept characters that satisfy a Regular Expression.
 * @since 4.11.0.346
 * @param regx - The Regular Expression to use.
 * @param caseSensitive - If true (default), the expression is case sensitive.
*/
	setRegExValidator(rx:String, caseSensitive:Boolean):void {
	
	};
	/**
 * @description Sets the selected portion of the text in the editor.
 * @since 4.12.0.80
 * @param start - The position to start the selection from.
 * @param length - The number of characters from start to select.
*/
	setSelection(start:Number, length:Number):void {
	
	};
	/**
 * @description Causes this combo edit to only accept characters that satisfy a validator configured with a settings object.
 * @since 4.12.1.97
 * @param settings - The settings to use in choosing and configuring the validator. The settings must contain a string value named "validator" that provides the type of validator to set. Valid types are: float, int, regexp, subpath, filename, nodename, nodelabel.
 * @attention Other settings to configure a given validator can be retrieved using getValidatorSettings().
*/
	setValidator(settings:DzSettings):void {
	
	};
	/**
 * @description If undoAvailable is true, undoes the last operation in the editor.
 * @since 4.12.0.80
*/
	undo():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the cursor moves within the field.
 * @signature `"cursorPositionChanged(int,int)"`
 * @event
*/
	cursorPositionChanged(oldPos:Number, newPos:Number):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the Return or Enter key is pressed or the line edit loses focus.
 * @signature `"editingFinished()"`
 * @event
*/
	editingFinished():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the selected item has changed.
 * @signature `"itemChanged(const QString&)"`
 * @event
*/
	itemChanged(item:String):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the Return or Enter key is pressed.
 * @signature `"returnPressed()"`
 * @event
*/
	returnPressed():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the selection within the field changes.
 * @signature `"selectionChanged()"`
 * @event
*/
	selectionChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the text has changed.
 * @signature `"textChanged(const QString&)"`
 * @event
*/
	textChanged(text:String):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the text is edited.
 * @signature `"textEdited(const QString&)"`
 * @event
*/
	textEdited(text:String):void {
	
	};

}
/**
 * @classdesc A "Compatibility Base" is described as an identifier that is used to represent the base concept of an object that can exist in the scene - e.g., a "Figure."
A "Compatibility Filter" is described as an identifier that is used to represent a specific shape of said object in the scene - e.g., a "Character."
Conceptually, compatibility bases support a hierarchical structure in a similar fashion, although not typically to the same depth, as categories.
The "Compatibility Base" container type serves to provide a means of working with assets in order to define/determine which ones provide a particular object and/or which ones are regarded as being compatible with a particular object.
See Also:
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/compatibilitybaseassetcontainer_dz} */
class DzCompatibilityBaseAssetContainer extends DzRefCountedItem, DzAbstractAssetContainer {
	/**
 * @description Holds whether or not this compatibility base is a filter. (Read Only)
	*/
	isFilter:Boolean;
	/**
 * @description Holds whether this compatibility base is owned by a vendor or by the user. (Read Only)
	*/
	isVendor:Boolean;
	/**
 * @returns The full path of the compatibility base that this container represents.
 * @since 4.11.0.93
*/
	getPath():String {
	
	};
	/**
 * @description Attempts to update the child containers of this container.
 * @returns true if the update was successful, otherwise false.
*/
	updateChildren():Boolean {
	
	};

}
/**
 * @classdesc Represents a file in the content library that can be loaded/imported. Also provides functionality for moving the file to a new location, renaming the file, and deleting the file from the library.
See Also:
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/contentfile_dz} */
class DzContentFile extends DzRefCountedItem, QObject {
	/**
 * @description Holds whether or not the file can be deleted. (Read Only)
	*/
	canDelete:Boolean;
	/**
 * @description Holds whether or not the file can be renamed. (Read Only)
	*/
	canRename:Boolean;
	/**
 * @description Holds whether or not a companion file is a script file. (Read Only)
	*/
	companionIsScript:Boolean;
	/**
 * @description Holds the path of the companion script for non-native files. (Read Only)
	*/
	companionPath:String;
	/**
 * @description Holds the full path of the file. (Read Only)
	*/
	fullPath:String;
	/**
 * @description Holds whether or not a non-native file has a native companion file. (Read Only)
	*/
	hasCompanion:Boolean;
	/**
 * @description Holds whether or not a non-native file has a companion script file. (Read Only)
	*/
	hasCompanionScript:Boolean;
	/**
 * @description Holds the icon for the file. (Read Only)
	*/
	icon:Pixmap;
	/**
 * @description Holds whether or not the file is a native content file . (Read Only)
	*/
	isNative:Boolean;
	/**
 * @description Holds whether or not the file is a script file . (Read Only)
	*/
	isScript:Boolean;
	/**
 * @description Holds the label of the file, as displayed to the user. (Read Only)
	*/
	label:String;
	/**
 * @description Holds the name of the file. (Read Only)
	*/
	name:String;
	/**
 * @description Holds the small icon for the file. (Read Only)
	*/
	smallIcon:Pixmap;
	/**
 * @description Removes this file from its content folder. The default implementation of this function deletes the content file and any associated thumbnail image from the disk, so use with care!
 * @returns true if the file was removed successfully, otherwise false.
*/
	deleteFile():Boolean {
	
	};
	/**
 * @returns The current parent folder of this file.
*/
	getFolder():DzContentFolder {
	
	};
	/**
 * @returns The next sibling of this file.
*/
	getNext():DzContentFile {
	
	};
	/**
 * @description Force the file to reload its icon.
*/
	reloadIcon():void {
	
	};
	/**
 * @description Rename the file to the given name.
 * @returns true if the file was successfully renamed, otherwise false.
 * @param name - The new name for the file.
*/
	rename(newName:String):Boolean {
	
	};

}
/**
 * @classdesc Represents a folder in the content library that holds DzContentFile objects as well as other DzContentFolder objects.
See Also:
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/contentfolder_dz} */
class DzContentFolder extends DzRefCountedItem, DzBase {
	/**
 * @description Holds whether or not a sub folder can be added in this folder. (Read Only)
	*/
	canAddSubFolder:Boolean;
	/**
 * @description Holds whether or not this folder can be deleted. (Read Only)
	*/
	canDelete:Boolean;
	/**
 * @description Holds whether or not this folder can be renamed. (Read Only)
	*/
	canRename:Boolean;
	/**
 * @description Holds whether or not the files of this folder are loaded. (Read Only)
	*/
	filesAreLoaded:Boolean;
	/**
 * @description Holds the name of the folder on disk. (Read Only)
	*/
	folderName:String;
	/**
 * @description Holds whether or not the subfolders of this folder are loaded. (Read Only)
	*/
	foldersAreLoaded:Boolean;
	/**
 * @description Holds the type of this folder. (Read Only)
	*/
	folderType:FolderType;
	/**
 * @description Holds the full path of the folder on disk. (Read Only)
	*/
	fullPath:String;
	/**
 * @description Holds the icon of the folder. (Read Only)
	*/
	icon:Pixmap;
	/**
 * @description Holds whether or not this folder is a built-in content folder. (Read Only)
	*/
	isBuiltInContentFolder:Boolean;
	/**
 * @description Holds the label of the folder as it is displayed to the user. (Read Only)
	*/
	label:String;
	/**
 * @description ENUMERATOR: Folder containing native content.
*/
	
	static NATIVE_TYPE;
	/**
 * @description ENUMERATOR: Folder containing Poser content.
*/
	
	static POSER_TYPE;
	/**
 * @description ENUMERATOR: Folder containing other importable content.
*/
	
	static IMPORT_TYPE;
	/**
 * @description Adds a new subfolder with the given name to this folder.
 * @returns true if the new subfolder was created successfully, otherwise false.
 * @param folderName - The name of the new sub folder.
*/
	addSubFolder(folderName:String):Boolean {
	
	};
	/**
 * @returns true if the file is a type that can be moved or copied to this folder, otherwise false.
 * @param file - The file to test for moving.
*/
	canMoveFile(file:DzContentFile):Boolean {
	
	};
	/**
 * @description Copies the given content file to this folder.
 * @returns true if the file was copied successfully, otherwise false.
 * @param file - The file to copy to this folder.
*/
	copyFile(file:DzContentFile):Boolean {
	
	};
	/**
 * @description Removes this content folder. The default implementation of this function deletes all files and subfolders in this directory from the disk, so use with care!
 * @returns true if the file was removed successfully, otherwise false.
*/
	deleteFolder():Boolean {
	
	};
	/**
 * @returns The first file in this folder (if any), otherwise null.
*/
	getFirstFile():DzContentFile {
	
	};
	/**
 * @returns The first child folder (if any), otherwise null.
*/
	getFirstFolder():DzContentFolder {
	
	};
	/**
 * @returns The first hidden file in this folder (if any), otherwise null.
*/
	getFirstHiddenFile():DzContentFile {
	
	};
	/**
 * @returns The first hidden folder (if any), otherwise null.
*/
	getFirstHiddenFolder():DzContentFolder {
	
	};
	/**
 * @returns The next sibling folder (if any), otherwise null.
*/
	getNext():DzContentFolder {
	
	};
	/**
 * @returns The parent folder of this folder (if any), otherwise null.
*/
	getParent():DzContentFolder {
	
	};
	/**
 * @returns true if this folder has subfolders, otherwise false.
*/
	hasSubFolders():Boolean {
	
	};
	/**
 * @returns true if the folder can be modified, otherwise false.
*/
	isModifiable():Boolean {
	
	};
	/**
 * @description Moves the given content file to this folder.
 * @returns true if the file was moved successfully, otherwise false.
 * @param file - The file to move to this folder.
*/
	moveFile(file:DzContentFile):Boolean {
	
	};
	/**
 * @description Checks for changes in sub folders and files (if loaded).
 * @returns true if a change in subfolders was found and the tree needs to be reloaded, otherwise false.
 * @param reloadIcons - If true, the icons will be reloaded from disk.
*/
	refresh(reloadIcons:Boolean):Boolean {
	
	};
	/**
 * @description Rename the folder to the given name.
 * @returns true if the folder was successfully renamed, otherwise false.
 * @param newName - The new name for the folder.
*/
	rename(newName:String):Boolean {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when a new folder is added.
 * @signature `"addedFolder(DzContentFolder*)"`
 * @event
*/
	addedFolder(newFolder:DzContentFolder):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the file list has changed.
 * @signature `"fileListChanged()"`
 * @event
*/
	fileListChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when a folder is added or removed.
 * @signature `"folderListChanged()"`
 * @event
*/
	folderListChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when a folder is removed.
 * @signature `"removedFolder(DzContentFolder*)"`
 * @event
*/
	removedFolder(folder:DzContentFolder):void {
	
	};

}
/**
 * @classdesc Responsible for the management of folder/file hierarchies associated with "content" (digital assets).
There is only one instance of this manager in an application. This instance is created and owned by DzApp. Request the instance via DzApp.getContentMgr().
See Also:
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/contentmgr_dz} */
class DzContentMgr extends DzBase {
	/**
 * @description Holds whether or not the content manager automatically refreshes itself.
	*/
	autoRefresh:Boolean;
	/**
 * @description Holds the maximum length of the File > Open Recent submenu, in the main menu bar.
	*/
	maxRecentFiles:Number;
	/**
 * @description Holds the path of the scene that will load when the scene is cleared (if any).
	*/
	newScene:String;
	/**
 * @description Holds whether or not the built-in content is shown in the content panes.
	*/
	showBuiltInContent:Boolean;
	/**
 * @description Holds the path of the scene that will load on startup (if any).
	*/
	startupScene:String;
	/**
 * @description ENUMERATOR: Represents the directories that are mapped and expected to contain files in the DAZ Studio native file format.
*/
	
	static NativeDirs;
	/**
 * @description ENUMERATOR: Represents the directories that are mapped and expected to contain files in the Poser file formats.
*/
	
	static PoserDirs;
	/**
 * @description ENUMERATOR: Represents the directories that are mapped and expected to contain files in formats supported by the various importers a user has installed (with the exception of the Poser format importer - see PoserDirs).
*/
	
	static ImportDirs;
	/**
 * @description ENUMERATOR: Represents the built-in directories that are expected to contain files in compatible formats.
*/
	
	static BuiltInDirs;
	/**
 * @description ENUMERATOR: Represents the built-in MDL directories and the directories that are expected to contain files in the MDL format. Since: 4.8.1.50
*/
	
	static MDLDirs;
	/**
 * @description ENUMERATOR: Represents the directories managed by the database, a given storeId_productId subdirectory, within a CloudDir directory. Since: 4.9.0.46
*/
	
	static CloudDB;
	/**
 * @description ENUMERATOR: Represents the mapped cloud directory and any ./data/cloud subdirectory located within NativeDirs and PoserDirs. Since: 4.9.0.46
*/
	
	static CloudDir;
	/**
 * @description ENUMERATOR: Represents the directory types defined by NativeDirs and BuiltInDirs (typically used to provide legacy support for methods that now use this enum).
*/
	
	static NativeAndBuiltInDirs;
	/**
 * @description ENUMERATOR: Represents the directory types defined by NativeDirs and BuiltInDirs, CloudDir, and CloudDB.
*/
	
	static CloudNativeAndBuiltInDirs;
	/**
 * @description ENUMERATOR: Represents the directory types defined by NativeDirs and BuiltInDirs, PoserDirs, ImportDirs, and MDLDirs. Since: 4.9.0.51
*/
	
	static AllLocalNonCloudDirs;
	/**
 * @description ENUMERATOR: Represents the directory types defined by NativeDirs and BuiltInDirs, PoserDirs, ImportDirs, MDLDirs, and CloudDir. Since: 4.9.0.51
*/
	
	static AllLocalDirs;
	/**
 * @description ENUMERATOR: Represents all directory types except those defined by MDLDirs, CloudDir and CloudDB. The "all" prior to 4.8.
*/
	
	static AllDirs;
	/**
 * @description ENUMERATOR: Represents all directory types. Since: 4.9.0.51
*/
	
	static AllDirsAndCloud;
	/**
 * @returns Prefix where cloud places installed products.
 * @since 4.9.0.46
*/
	getCloudPathPrefix():String {
	
	};
	/**
 * @description Checks the given node for a source file data item, and returns the path of the source file if one is found.
 * @returns The path of the source file for the node if the node contains a source file data item, otherwise an empty string.
 * @param node - The scene node to get the source file of.
*/
	static getContentPath(node:DzNode):String {
	
	};
	/**
 * @description Adds a native content directory to the list.
 * @param directory - The path of the native content directory to add.
 * @param saveSetting - If true, causes the native content directory mappings to be saved immediately instead of when the application is closed.
*/
	addContentDirectory(directory:String, saveSetting:Boolean):void {
	
	};
	/**
 * @description Adds an import directory to the list.
 * @param directory - The name of the directory to add.
 * @param saveSetting - If true, causes the Import directory mappings to be saved immediately instead of when the application is closed.
*/
	addImportDirectory(directory:String, saveSetting:Boolean):void {
	
	};
	/**
 * @description Adds a directory where MDL files can reside to the list.
 * @since 4.8.0.23
 * @param directory - The name of the directory to add.
 * @param saveSetting - If true, causes the MDL directory mappings to be saved immediately instead of when the application is closed.
*/
	addMDLDirectory(directory:String, saveSetting:Boolean):void {
	
	};
	/**
 * @description Adds a Poser import content directory to the list.
 * @param directory - The Poser content directory to add.
 * @param saveSetting - If true, causes the Poser directory mappings to be saved immediately instead of when the application is closed.
 * @attention Poser import paths are folders one level above any Poser Runtime folder.
*/
	addPoserDirectory(directory:String, saveSetting:Boolean):void {
	
	};
	/**
 * @description Adds a file to the list of recent open files.
 * @param filename - The path of the file to add.
*/
	addRecentFile(filename:String):void {
	
	};
	/**
 * @description Clears the list of recent open files.
*/
	clearRecentFileList():void {
	
	};
	/**
 * @description Attempts to locate dirPath among the mapped native content directories.
 * @returns true if the directory is mapped as a native content directory, otherwise false.
 * @since 4.5.0.124
 * @param dirPath - The directory path to locate.
*/
	contentDirectoryIsMapped(dirPath:String):Boolean {
	
	};
	/**
 * @description Displays a dialog to the user to perform a Poser content search on the local machine.
 * @returns true if the user accepted and a search was performed, otherwise false.
*/
	doContentSearch():Boolean {
	
	};
	/**
 * @description Causes the content manager to check the number of mapped content directories, and display a warning to the user if it is excessive.
*/
	doDirNumCheck():void {
	
	};
	/**
 * @description Notifies the content manager that a new content file has been saved.
*/
	fileCreated(filename:String):void {
	
	};
	/**
 * @description Given an absolute path, this method traverses the content directories and attempts to find the base (mapped) folder.
 * @returns The given content folder if successful, otherwise NULL.
 * @since 4.8.1.51
 * @param dirTypes - Bitwise OR of flags for which directory types to search.
 * @param path - The absolute path.
*/
	findBaseDirectory(dirTypes:DirectoryTypes, path:String):DzContentFolder {
	
	};
	/**
 * @description Given an absolute path, this method traverses the content directories and attempts to find the base (mapped) folder.
 * @returns The given content folder if successful, otherwise NULL.
 * @param path - The absolute path.
 * @param useImportFolders - If true, the import folders will also be searched.
*/
	findBaseDirectory(path:String, useImportFolders:Boolean):DzContentFolder {
	
	};
	/**
 * @description Given a partial path (a file path that is relative to a content directory) this function traverses all folders of the specified mapped directory types in the following order (CloudDB, CloudDir, NativeDirs, PoserDirs, ImportDirs, MDLDirs, BuiltInDirs)
 * @returns The full path to the file if successful, otherwise an empty string.
 * @param partialPath - The relative path to the file to find.
 * @param dirTypes - Bitwise OR of flags for which directory types to search.
*/
	findFile(partialPath:String, dirTypes:DirectoryTypes):String {
	
	};
	/**
 * @description Finds the source path for a node in the scene.
 * @returns The source path of the node.
 * @param sceneNode - The node to find the source path for.
*/
	findSourcePathForNode(sceneNode:DzNode):String {
	
	};
	/**
 * @description Attempts to locate relativePath by pre-pending the path information for each mapped content directory.
 * @returns The absolute path for the file if it can be found, otherwise an empty string.
 * @since 4.8.1.51
 * @param dirTypes - Bitwise OR of flags for which directory types to search.
 * @param relativePath - The relative path to find.
 * @param preferredPath - (Optional) If provided, first directory to check for.
*/
	getAbsolutePath(dirTypes:DirectoryTypes, relativePath:String, preferredPath:String):String {
	
	};
	/**
 * @description Attempts to locate relativePath by pre-pending the path information for each mapped content directory.
 * @returns The absolute path for the file if it can be found, otherwise an empty string.
 * @param relativePath - The relative path to find.
 * @param useImportFolders - If true, the mapped import folders will also be searched.
 * @param preferredPath - (Optional) If provided, first directory to check for.
*/
	getAbsolutePath(relativePath:String, useImportFolders:Boolean, preferredPath:String):String {
	
	};
	/**
 * @description Attempts to locate relativePath by pre-pending the path information for each mapped content directory.
 * @returns A list of absolute paths for the file if it can be found, otherwise an empty list.
 * @since 4.8.1.51
 * @param dirTypes - Bitwise OR of flags for which directory types to search.
 * @param relativePath - The relative path to find.
*/
	getAbsolutePaths(dirTypes:DirectoryTypes, relativePath:String):Array {
	
	};
	/**
 * @description Attempts to locate relativePath by pre-pending the path information for each mapped directory.
 * @returns A list of absolute paths for the file if it can be found, otherwise an empty list.
 * @param relativePath - The relative path to find.
 * @param useImportFolders - If true, the mapped import folders will also be searched.
*/
	getAbsolutePaths(relativePath:String, useImportFolders:Boolean):Array {
	
	};
	/**
 * @description Attempts to locate relativePath by pre-pending the path information for each mapped content directory.
 * @returns The URI for the file if it can be found, otherwise an empty URI.
 * @since 4.9.0.38
 * @param dirTypes - Bitwise OR of flags for which directory types to search.
 * @param relativePath - The relative path to find.
 * @param preferredPath - (Optional) If provided, first directory to check for.
*/
	getAbsoluteUri(dirTypes:DirectoryTypes, relativePath:String, preferredPath:String):DzUri {
	
	};
	/**
 * @returns The built-in content directory used for content and utilities that are shipped with the application.
*/
	getBuiltInContentDirectory():DzContentFolder {
	
	};
	/**
 * @returns The path of the built-in content directory used for content and utilities that are shipped with the application.
*/
	getBuiltInContentDirectoryPath():String {
	
	};
	/**
 * @returns The given built in MDL directory.
 * @since 4.8.0.23
 * @param which - The index of the built in MDL directory to return.
*/
	getBuiltInMDLDirectory(which:Number):DzContentFolder {
	
	};
	/**
 * @returns The path of the given MDL directory.
 * @since 4.8.0.23
 * @param which - The index of the built in MDL directory to return the path of.
*/
	getBuiltInMDLDirectoryPath(which:Number):String {
	
	};
	/**
 * @description Attempts to locate relativePath by pre-pending the path information for the mapped cloud directory.
 * @returns The absolute path for the file, or an empty string if the file cannot be found.
 * @since 4.9.0.33
 * @param relativePath - The relative path to find.
*/
	getCloudAbsolutePath(relativePath:String):String {
	
	};
	/**
 * @returns The directory used for content that is downloaded and installed through the application.
 * @since 4.9.0.33
*/
	getCloudContentDirectory():DzContentFolder {
	
	};
	/**
 * @returns The path of the content directory used for content and utilities that are downloaded and installed through the application.
 * @since 4.9.0.33
*/
	getCloudContentDirectoryPath():String {
	
	};
	/**
 * @description Attempts to shorten absolutePath to a path that is relative to the cloud directory. If the path cannot be shortened, the original string is returned.
 * @returns A relative path to the file if one can be made, otherwise the original path.
 * @since 4.9.0.33
 * @param absolutePath - The path to make relative.
*/
	getCloudRelativePath(absolutePath:String):String {
	
	};
	/**
 * @returns The given content directory.
 * @param which - The index of the content directory to be returned.
*/
	getContentDirectory(which:Number):DzContentFolder {
	
	};
	/**
 * @returns The path of the given content directory.
 * @param which - The index of the content directory to return the path of.
*/
	getContentDirectoryPath(which:Number):String {
	
	};
	/**
 * @returns The content replace manager that belongs to the DzContentMgr.
*/
	getContentReplaceMgr():DzContentReplaceMgr {
	
	};
	/**
 * @returns The path of the default user content directory.
*/
	getDefaultContentDirectoryPath():String {
	
	};
	/**
 * @returns The path of the default public/shared content directory.
 * @since 4.11.0.248
*/
	getDefaultSharedContentDirectoryPath():String {
	
	};
	/**
 * @returns A list of the URIs for the files in the specified relative paths.
 * @since 4.9.0.38
 * @param dirTypes - Bitwise OR of flags for which directory types to search.
 * @param relativeDirPaths - The relative directory paths to list from.
 * @param fileSuffixes - The list of filename suffixes to filter by.
*/
	getDirectoryContentsUrisList(dirTypes:DirectoryTypes, relativeDirPaths:Array, fileSuffixes:Array):Array {
	
	};
	/**
 * @description Attempts to locate a file with the given relative path by pre-pending the path information for each mapped import directory, finally falling back to the Built-In content directory.
 * @returns The absolute path for the file, or an empty string if the file cannot be found.
 * @param relativePath - The relative path to find.
*/
	getImportAbsolutePath(relativePath:String):String {
	
	};
	/**
 * @returns The given import directory.
 * @param which - The index of the import directory to return.
*/
	getImportDirectory(which:Number):DzContentFolder {
	
	};
	/**
 * @returns The path of the given import directory.
 * @param which - The index of the import directory to return the path of.
*/
	getImportDirectoryPath(which:Number):String {
	
	};
	/**
 * @returns A list of the extensions for files that can be imported.
 * @since 4.9.4.64
 * @attention Specifically excludes Poser file extensions even though they are technically imported.
*/
	getImportFileExtensions():Array {
	
	};
	/**
 * @description Attempts to extract the mapped directory portion of path.
 * @returns The portion of the absolute path that matches a mapped content directory, or an empty string if no match was found.
 * @param path - An absolute or relative path to find a corresponding content path for.
 * @param useImportFolders - If true, the import folders will also be searched.
 * @param isRelative - If true, path is treated as a relative path. If false, path is treated as an absolute path.
*/
	getMappedPath(path:String, useImportFolders:Boolean, isRelative:Boolean):String {
	
	};
	/**
 * @description Attempts to extract the mapped directory portion of path.
 * @returns The portion of the absolute path that matches a mapped content directory, or an empty string if no match was found.
 * @param dirTypes - Bitwise OR of flags for which directory types to search
 * @param path - An absolute or relative path to find a corresponding content path for.
 * @param isRelative - If true, path is treated as a relative path. If false, path is treated as an absolute path.
*/
	getMappedPath(dirTypes:DirectoryTypes, path:String, isRelative:Boolean):String {
	
	};
	/**
 * @description Attempts to locate a file with the given relative path by pre-pending the path information for each mapped MDL directory, as well as the built-in MDL directories, finally falling back to the built-in content directory.
 * @returns The absolute path for the file, or an empty string if the file cannot be found.
 * @param relativePath - The relative path to find.
*/
	getMDLAbsolutePath(relativePath:String):String {
	
	};
	/**
 * @returns The given MDL directory.
 * @since 4.8.0.23
 * @param which - The index of the MDL directory to return.
*/
	getMDLDirectory(which:Number):DzContentFolder {
	
	};
	/**
 * @returns The path of the given MDL directory.
 * @since 4.8.0.23
 * @param which - The index of the MDL directory to return the path of.
*/
	getMDLDirectoryPath(which:Number):String {
	
	};
	/**
 * @description Attempts to shorten absolutePath to a path that is relative to one of the mapped MDL directories. If the path cannot be shortened, the original string is returned.
 * @returns A relative path to the file if one can be made, otherwise the original path.
 * @since 4.8.0.35
 * @param absolutePath - The path to make relative.
*/
	getMDLRelativePath(absolutePath:String):String {
	
	};
	/**
 * @description Attempts to locate relativePath by pre-pending the path information for each mapped native directory, finally falling back to the Built-In content directory.
 * @returns The absolute path for the file, or an empty string if the file cannot be found.
 * @param relativePath - The relative path to find.
*/
	getNativeAbsolutePath(relativePath:String):String {
	
	};
	/**
 * @returns A list of the folder names that are excluded when building the native user-facing folder structure.
 * @since 4.9.4.64
*/
	getNativeBaseUserFacingExcludedDirs():Array {
	
	};
	/**
 * @returns A list of the native file extensions.
 * @since 4.9.4.64
*/
	getNativeFileExtensions():Array {
	
	};
	/**
 * @returns The number of content directories for imported content.
 * @since 4.8.0.23
*/
	getNumBuiltInMDLDirectories():Number {
	
	};
	/**
 * @returns The number of content directories.
*/
	getNumContentDirectories():Number {
	
	};
	/**
 * @returns The number of content directories for imported content.
*/
	getNumImportDirectories():Number {
	
	};
	/**
 * @returns The number of content directories for imported content.
 * @since 4.8.0.23
*/
	getNumMDLDirectories():Number {
	
	};
	/**
 * @returns The number of stored paths to Poser content directories.
*/
	getNumPoserDirectories():Number {
	
	};
	/**
 * @description Attempts to locate a file with the given relative path by pre-pending the path information for each mapped Poser directory, finally falling back to the Built-In content directory.
 * @returns The absolute path for the file, or an empty string if the file cannot be found.
 * @param relativePath - The relative path to find.
*/
	getPoserAbsolutePath(relativePath:String):String {
	
	};
	/**
 * @returns A list of the folder names within a Poser runtime folder that are considered user-facing.
 * @since 4.9.4.64
*/
	getPoserBaseUserFacingDirs():Array {
	
	};
	/**
 * @returns The given Poser content directory, otherwise null.
 * @param which - The index of the Poser directory to return.
*/
	getPoserDirectory(which:Number):DzContentFolder {
	
	};
	/**
 * @returns The path of the given Poser content directory, otherwise an empty string.
 * @param which - The index of the Poser directory to return the path of.
*/
	getPoserDirectoryPath(which:Number):String {
	
	};
	/**
 * @returns A list of the supported Poser file extensions.
 * @since 4.9.4.64
*/
	getPoserFileExtensions():Array {
	
	};
	/**
 * @returns A list of recent open files.
*/
	getRecentFileList():Array {
	
	};
	/**
 * @description Attempts to shorten absolutePath to a path that is relative to one of the mapped content directories. If the path cannot be shortened, the original string is returned.
 * @returns A relative path to the file if one can be made, otherwise absolutePath.
 * @param absolutePath - The path to make relative.
 * @param useImportFolders - If true, the mapped import folders will also be searched.
*/
	getRelativePath(absolutePath:String, useImportFolders:Boolean):String {
	
	};
	/**
 * @description Attempts to shorten absolutePath to a path that is relative to one of the mapped content directories. If the path cannot be shortened, the original path is returned.
 * @returns A relative path to the file if one can be made, otherwise absolutePath.
 * @since 4.8.1.51
 * @param dirTypes - Bitwise OR of flags for which directory types to search.
 * @param absolutePath - The path to make relative.
*/
	getRelativePath(dirTypes:DirectoryTypes, absolutePath:String):String {
	
	};
	/**
 * @description Attempts to shorten absolutePath to a list of paths that are relative to one of the mapped content directories.
 * @returns A list of relative paths to the file if one can be made, otherwise absolutePath.
 * @since 4.8.1.51
 * @param dirTypes - Bitwise OR of flags for which directory types to search.
 * @param absolutePath - The path to make relative.
*/
	getRelativePaths(dirTypes:DirectoryTypes, absolutePath:String):Array {
	
	};
	/**
 * @description Attempts to shorten absolutePath to a list of paths that are relative to one of the mapped content directories.
 * @returns A list of relative paths to the file if one can be made, otherwise an empty list.
 * @param absolutePath - The path to make relative.
 * @param useImportFolders - If true, the mapped import folders will also be searched.
*/
	getRelativePaths(absolutePath:String, useImportFolders:Boolean):Array {
	
	};
	/**
 * @returns A list of the URIs for the entries in the specified relative paths.
 * @since 4.11.0.120
 * @param dirTypes - Bitwise OR of flags for which directory types to search.
 * @param relDirPaths - The relative directory paths to list from.
 * @param filters - Bitwise OR of filtering option flags.
 * @param suffixes - The list of path suffixes to filter by.
 * @param recurse - Whether or not to recurse folder hierarchies.
*/
	getRelativeUrisList(dirTypes:DirectoryTypes, relDirPaths:Array, filters:DzDir.Filters, suffixes:Array, recurse:Boolean):Array {
	
	};
	/**
 * @description Attempts to locate dirPath among the mapped import directories.
 * @returns true if the directory is mapped as an import directory, otherwise false.
 * @since 4.5.0.124
 * @param dirPath - The directory path to locate.
*/
	importDirectoryIsMapped(dirPath:String):Boolean {
	
	};
	/**
 * @description Imports the file at the given path. A companion file (a DAZ Script file with the same name as the file being imported, or a DUF file if a DAZ Script does not exist) will be executed if one exists. This function should only be used in special circumstances. Use openFile() instead.
 * @returns true if the file was imported successfully, otherwise false.
 * @param filename - The path to the file to import.
*/
	importFile(path:String):Boolean {
	
	};
	/**
 * @returns true if directory is mapped, otherwise false.
 * @param directory - The path of the directory to check.
*/
	isDirectoryMapped(directory:String):Boolean {
	
	};
	/**
 * @returns true if relativePath is considered "user facing" for the given directory type.
 * @since 4.9.4.64
 * @param dirTypes - Bitwise OR of flags for which directory types to search.
 * @param relativePath - The relative path to find.
*/
	isUserFacingDirectoryPath(dirTypes:DirectoryTypes, relativePath:String):Boolean {
	
	};
	/**
 * @returns true if relativePath is considered "user facing" for the given directory type.
 * @since 4.9.4.64
 * @param dirTypes - Bitwise OR of flags for which directory types to search.
 * @param relativePath - The relative path to find.
*/
	isUserFacingFilePath(dirTypes:DirectoryTypes, relativePath:String):Boolean {
	
	};
	/**
 * @description Loads an asset into the scene.
 * @returns true if asset is loaded successfully, otherwise false. (since 4.9.3.68)
 * @since 4.9.3.41
 * @param asset - The asset to load.
 * @param merge - If true, combine the new asset with the existing scene. Othererwise, replace the existing scene with the new asset.
*/
	loadAsset(asset:DzAsset, merge:Boolean):Boolean {
	
	};
	/**
 * @description Loads an asset as a new scene.
 * @returns true if asset is loaded successfully, otherwise false. (since 4.9.3.68)
 * @since 4.9.3.41
 * @param asset - The asset to load.
*/
	loadAsset(asset:DzAsset):Boolean {
	
	};
	/**
 * @description Attempts to locate dirPath among the mapped MDL directories.
 * @returns true if the directory is mapped as a MDL directory, otherwise false.
 * @since 4.8.0.23
 * @param dirPath - The directory path to locate.
*/
	mdlDirectoryIsMapped(dirPath:String):Boolean {
	
	};
	/**
 * @description Merges the contents of a list of files, either as native files or imported files, into the existing scene by calling openNativeFile() or importFile() based on the file extension. For file imports, a companion file (a DAZ Script file with the same name as the file being imported, or a DUF file if a DAZ Script does not exist) will be executed if one exists.
 * @returns true if the file was loaded successfully, otherwise false.
 * @param filenames - A list of the names of the files to merge into the current scene.
*/
	mergeFiles(filenames:Array):Boolean {
	
	};
	/**
 * @description Loads the contents of a file, either as a native file or an imported file, by calling openNativeFile() or importFile() based on the file extension. For file imports, a companion file (a DAZ Script file with the same name as the file being imported, or a DUF file if a DAZ Script does not exist) will be executed if one exists.
 * @returns true if the file was loaded successfully, otherwise false.
 * @param filename - The name of the file to load.
 * @param merge - If true, the contents of the file will be merged into the existing scene. If false, the scene will be cleared and the contents of the file will be opened in a new scene. (applies only for native files)
*/
	openFile(filename:String, merge:Boolean):Boolean {
	
	};
	/**
 * @description Loads the contents of a native format file into the scene. This function should only be used in special circumstances. Use openFile() instead.
 * @returns true if the file was loaded successfully, otherwise false.
 * @param filename - The path to the native format file to open.
 * @param merge - If true, the contents of the file will be merged into the existing scene. If false, the scene will be cleared and the contents of the file will be opened in a new scene.
*/
	openNativeFile(filename:String, merge:Boolean):Boolean {
	
	};
	/**
 * @description Loads the contents of a native format file into the scene. This function should only be used in special circumstances. Use openFile() instead.
 * @returns true if the file was loaded successfully, otherwise false.
 * @param uri - The URI of the native format file to open. This can be empty if a filename is supplied.
 * @param filename - The path to the native format file to open. This can be empty if a valid URI is supplied.
 * @param merge - If true, the contents of the file will be merged into the existing scene. If false, the scene will be cleared and the contents of the file will be opened in a new scene.
*/
	openNativeUri(uri:DzUri, filename:String, merge:Boolean):Boolean {
	
	};
	/**
 * @description Loads the contents of a file, either as a native file or an imported file, by calling openNativeFile() or importFile() based on the file extension. For file imports, a companion file (a DAZ Script file with the same name as the file being imported, or a DUF file if a DAZ Script does not exist) will be executed if one exists.
 * @returns true if the file was loaded successfully, otherwise false.
 * @param uri - The URI of the file to load. This can be empty if a valid filename is supplied.
 * @param filename - The name of the file to load. This can be empty if a valid uri is supplied.
 * @param merge - If true, the contents of the file will be merged into the existing scene. If false, the scene will be cleared and the contents of the file will be opened in a new scene. (applies only to native files).
*/
	openUri(uri:DzUri, filename:String, merge:Boolean):Boolean {
	
	};
	/**
 * @description Attempts to locate dirPath path among the mapped Poser content directories.
 * @returns true if the directory is mapped as a Poser directory, otherwise false.
 * @param dirPath - The directory path to locate.
*/
	poserDirectoryIsMapped(dirPath:String):Boolean {
	
	};
	/**
 * @description Refreshes any currently loaded content directories. Call this after any operation that makes changes to the file system, e.g. saving or deleting files, etc.
 * @param reloadIcons - If true, all file icons will be reloaded - good for updating the current content directory when a file has been saved over, etc.
*/
	refresh(reloadIcons:Boolean):void {
	
	};
	/**
 * @description Causes assets for a given node in the scene to be reloaded, using the given settings, from source files at the given path.
 * @param sceneNode -
 * @param settings -
 * @param srcFilePath -
*/
	reloadAssetsFromSource(sceneNode:DzNode, settings:DzSettings, srcFilePath:String):DzError {
	
	};
	/**
 * @description Causes the assets for all nodes in the scene to be reloaded from their respective source files.
 * @param settings -
*/
	reloadSceneAssetsFromSource(settings:DzSettings):Boolean {
	
	};
	/**
 * @description Removes all native content mapped directories.
*/
	removeAllContentDirectories():void {
	
	};
	/**
 * @description Removes all import content directory mappings from the list.
*/
	removeAllImportDirectories():void {
	
	};
	/**
 * @description Removes all MDL directory mappings from the list.
 * @since 4.8.0.23
*/
	removeAllMDLDirectories():void {
	
	};
	/**
 * @description Removes all Poser import content directory mappings from the list.
*/
	removeAllPoserDirectories():void {
	
	};
	/**
 * @description Removes a native content directory mapping from the list.
 * @returns true if the directory was removed, false if the given directory is not in the list.
 * @param directory - The path of the native content directory to remove.
*/
	removeContentDirectory(directory:String):Boolean {
	
	};
	/**
 * @description Removes an import content directory mapping from the list.
 * @returns true if the directory was removed, false if the given directory is not in the list.
 * @param directory - The path of the import content directory to remove.
*/
	removeImportDirectory(directory:String):Boolean {
	
	};
	/**
 * @description Removes a MDL directory mapping from the list.
 * @returns true if the directory was removed, false if the given directory is not in the list.
 * @since 4.8.0.23
 * @param directory - The path of the MDL directory to remove.
*/
	removeMDLDirectory(directory:String):Boolean {
	
	};
	/**
 * @description Removes a Poser import content directory mapping from the list.
 * @returns true if the directory was removed, false if the given directory is not in the list.
 * @param directory - The path of the Poser import content directory to remove.
*/
	removePoserDirectory(directory:String):Boolean {
	
	};
	/**
 * @description Saves all currently mapped directories to application settings.
*/
	saveAllMappedDirectories():void {
	
	};
	/**
 * @description Deprecated
*/
	setCheckCompatibilityOn(useCheckCompatibility:Boolean):void {
	
	};
	/**
 * @description Sets the directory for content and utilities downloaded and installed through the application.
 * @since 4.9.0.33
 * @param directory - The path of the directory to add.
 * @param saveSetting - Whether or not to save the setting immediately or wait until the application exits.
*/
	setCloudContentDirectory(directory:String, saveSetting:Boolean):void {
	
	};
	/**
 * @description Sets the list of directories for native format files.
 * @since 4.9.0.35
 * @param directories - The list of directory paths to set.
 * @param saveSettings - Whether or not to save the settings immediately or wait until the application exits.
*/
	setContentDirectories(directories:Array, saveSettings:Boolean):void {
	
	};
	/**
 * @description Sets the list of directories for other import format files.
 * @since 4.9.0.35
 * @param directories - The list of directory paths to set.
 * @param saveSettings - Whether or not to save the settings immediately or wait until the application exits.
*/
	setImportDirectories(directories:Array, saveSettings:Boolean):void {
	
	};
	/**
 * @description Sets the list of directories for Poser format files.
 * @since 4.9.0.35
 * @param directories - The list of directory paths to set.
 * @param saveSettings - Whether or not to save the settings immediately or wait until the application exits.
*/
	setPoserDirectories(directories:Array, saveSettings:Boolean):void {
	
	};
	/**
 * @description Sets whether or not to use the database.
 * @param useDatabaseSearch - If true, turns database use on. If false, turns database use off.
*/
	setUseDatabaseSearch(useDatabase:Boolean):void {
	
	};
	/**
 * @description Given the filename, determines if the file should be treated as a 'merge' or an 'open' when loaded. This is determined first by content type. If that does not exist and the file is a .duf, it will attempt to retrieve the type from within the file.
 * @returns true if the file should be merged, otherwise false.
 * @param filename - The name of the file to check.
*/
	shouldMerge(filename:String):Boolean {
	
	};
	/**
 * @description Deprecated
*/
	usingCheckCompatibility():Boolean {
	
	};
	/**
 * @returns true if database use is turned on, otherwise false.
*/
	usingDatabaseSearch():Boolean {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the enabled state of the auto refresh has changed.
 * @signature `"autoRefreshChanged(bool)"`
 * @event
*/
	autoRefreshChanged(onOff:Boolean):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the cloud content directory has changed.
 * @signature `"cloudContentDirectoryChanged()"`
 * @event
*/
	cloudContentDirectoryChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when a content directory is added or removed.
 * @signature `"contentDirectoryListChanged()"`
 * @event
*/
	contentDirectoryListChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the currently loaded tree of folders has changed and needs to be rebuilt. Usually a result of a call to refresh(), or when one of the content directory lists has changed.
 * @signature `"folderTreeChanged()"`
 * @event
*/
	folderTreeChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when an import directory is added or removed.
 * @signature `"importDirectoryListChanged()"`
 * @event
*/
	importDirectoryListChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the loading of a script has failed, or when the execution of a script has finished or failed.
 * @signature `"loadScriptFinished()"`
 * @event
*/
	loadScriptFinished():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the loading of a script is starting.
 * @signature `"loadScriptStarting()"`
 * @event
*/
	loadScriptStarting():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when a MDL directory is added or removed.
 * @signature `"mdlDirectoryListChanged()"`
 * @event
*/
	mdlDirectoryListChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when a new content file has been created.
 * @signature `"newFileCreated(const QString&)"`
 * @event
*/
	newFileCreated(filename:String):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the file that is loaded on 'new' has been changed.
 * @signature `"onNewSceneChanged(const QString&)"`
 * @event
*/
	onNewSceneChanged(filename:String):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when a poser import directory is added or removed.
 * @signature `"poserDirectoryListChanged()"`
 * @event
*/
	poserDirectoryListChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when a recent file is added or removed.
 * @signature `"recentFileListChanged()"`
 * @event
*/
	recentFileListChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the execution of a script fails.
 * @signature `"scriptFailed(const QString&)"`
 * @event
*/
	scriptFailed(filename:String):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the execution of a script has finished.
 * @signature `"scriptFinished(const QString&)"`
 * @event
*/
	scriptFinished(filename:String):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the loading of a script fails.
 * @signature `"scriptLoadFailed(const QString&)"`
 * @event
*/
	scriptLoadFailed(filename:String):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the loading of a script is starting.
 * @signature `"scriptLoadStarting(const QString&)"`
 * @event
*/
	scriptLoadStarting(filename:String):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the execution of a script is starting.
 * @signature `"scriptStarting(const QString&)"`
 * @event
*/
	scriptStarting(filename:String):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the startup scene file has changed.
 * @signature `"startupSceneChanged(const QString&)"`
 * @event
*/
	startupSceneChanged(filename:String):void {
	
	};

}
/**
 * @classdesc Responsible for the management of replacing scene items based on their respective content types.
There is only one instance of this manager in an application. This instance is created and owned by DzContentMgr. Request the instance via DzContentMgr.getContentReplaceMgr().
See Also:
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/contentreplacemgr_dz} */
class DzContentReplaceMgr extends QObject {
	/**
 * @description ENUMERATOR: When a piece of content of a specific type is loaded, any content already in the scene of the same type is removed so that the new item replaces the old one.
*/
	
	static ALWAYS_REPLACE;
	/**
 * @description ENUMERATOR: When a piece of content is loaded, a dialog prompts the user to choose which (if any) items already in the scene should be removed.
*/
	
	static ASK_TO_REPLACE;
	/**
 * @description ENUMERATOR: Items already in the scene are never removed when loading a piece of content.
*/
	
	static NEVER_REPLACE;
	/**
 * @description ENUMERATOR: When a piece of content is loaded, a dialog prompts the user to choose which (if any) items already in the scene should be removed if there is an item of matching content type.
*/
	
	static ASK_WHEN_MATCHING;
	/**
 * @description Resets all replace data to default values, excluding replace mode.
*/
	clearReplaceData():void {
	
	};
	/**
 * @description Performs all the necessary steps to remove content marked for replacement.
*/
	doReplace():void {
	
	};
	/**
 * @returns A list of nodes attached to baseNode that would be replaced by default.
 * @since 4.11.0.184
 * @param baseNode - The base node.
*/
	getDefaultReplaceNodeList(baseNode:DzNode):Array {
	
	};
	/**
 * @returns The path of the new content.
*/
	getNewContentPath():String {
	
	};
	/**
 * @returns The type of the new content.
*/
	getNewContentType():String {
	
	};
	/**
 * @returns A list of nodes attached to baseNode that could potentially be replaced.
 * @since 4.11.0.184
 * @param baseNode - The base node.
*/
	getPotentialReplaceNodeList(baseNode:DzNode):Array {
	
	};
	/**
 * @returns The content replace mode.
*/
	getReplaceMode():ContentReplaceMode {
	
	};
	/**
 * @returns The nodes in the scene to be replaced.
 * @since 4.11.0.184
*/
	getReplaceNodeList():Array {
	
	};
	/**
 * @description Performs all the necessary initialization for doing content replacement when the given file will be loaded, using items attached to baseNode as potential items to replace.
*/
	initReplaceForContentLoad(path:String, baseNode:DzNode):void {
	
	};
	/**
 * @description Removes all nodes in the replace list from the scene.
*/
	removeReplaceNodes():void {
	
	};
	/**
 * @param contentPath - The path of the new content.
*/
	setNewContentPath(contentPath:String):void {
	
	};
	/**
 * @param contentType - The type of the new content.
*/
	setNewContentType(contentType:String):void {
	
	};
	/**
 * @description Sets the content replace mode.
 * @param mode - The mode to set.
*/
	setReplaceMode(mode:ContentReplaceMode):void {
	
	};
	/**
 * @description Sets the list of nodes in the scene to be replaced.
 * @param replaceNodes - The list of nodes to set.
*/
	setReplaceNodes(replaceNodes:Array):void {
	
	};
	/**
 * @description Updates the replace list to contain all items that should be removed during content load. If the replace mode is ALWAYS_REPLACE, the list will contain all nodes attached (following, parented, etc.) to baseNode whose type matches the current "New Content Type" (as set through setNewContentType()). If the replace mode is ASK_TO_REPLACE, a dialog will allow the user to select what nodes should be replaced.
*/
	updateReplaceNodes(baseNode:DzNode):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the content replace mode has changed.
 * @signature `"contentReplaceModeChanged(DzContentReplaceMgr.ContentReplaceMode)"`
 * @event
*/
	contentReplaceModeChanged(mode:DzContentReplaceMgr.ContentReplaceMode):void {
	
	};

}
/**
 * @classdesc The controller class is like a modifier for DzProperty types. Controllers allow implementation of custom modulation of properties without changing the properties actual value. Common implementations of controllers include: controllers that adjust one property based on the value of another property, controllers that replace the value of one property with the value of another property, controllers that use a script expression to drive a property, etc.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/controller_dz} */
class DzController extends DzBase {
	/**
 * @description The description of the controller (Read Only)
	*/
	description:String;
	/**
 * @description The effect of the controller (Read Only)
	*/
	effect:ControllerEffect;
	/**
 * @description The description of the controller when slave (Read Only)
	*/
	slaveDescription:String;
	/**
 * @description ENUMERATOR: Has no effect on the property
*/
	
	static None;
	/**
 * @description ENUMERATOR: Uses the current value of the property to calculate the result
*/
	
	static Additive;
	/**
 * @description ENUMERATOR: Ignores the current value of the property, and calculates the result from unrelated factors.
*/
	
	static Replace;
	/**
 * @description TODO:
Add description.
*/
	getOwner():DzProperty {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description TODO: Add Description
 * @signature `TODO: Add Description`
 * @event
*/
	attributeChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the value of this controller has changed.
 * @signature `"currentValueChanged()"`
 * @event
*/
	currentValueChanged():void {
	
	};

}
/**
 * @classdesc See Also:
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/cr2exporter_dz} */
class DzCr2Exporter extends DzExporter {
	/**
 * @description Default Constructor.
 * @constructor
*/
	constructor() {
	
	};

}
/**
 * @classdesc This class represents a script based action that the user can create themselves.
See Also:
Since:
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/customaction_dz} */
class DzCustomAction extends DzScriptAction {

}
/**
 * @classdesc TODO:
Add detailed description.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/customdata_dz} */
class DzCustomData extends DzBase {
	/**
 * @returns true if the data item should be saved to the native file format, otherwise false.
*/
	isPersistent():Boolean {
	
	};

}
/**
 * @classdesc A DzDateEdit provides a date editor.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/dateedit_dz} */
class DzDateEdit extends DzDateTimeEdit {
	/**
 * @description Holds the maximum value for the widget.
	*/
	max:Date;
	/**
 * @description Holds the minimum value for the widget.
	*/
	min:Date;
	/**
 * @description Holds the separator used by the widget.
	*/
	separator:String;
	/**
 * @description Creates a date edit widget as a child of the given parent widget.
 * @param parent - The widget parent for the date edit.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the date in the widget has changed, passes the new date.
 * @signature `"valueChanged(const QDate&)"`
 * @event
*/
	valueChanged(date:Date):void {
	
	};

}
/**
 * @classdesc A DzDateTimeEdit provides a combination date and time editor.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/datetimeedit_dz} */
class DzDateTimeEdit extends DzWidget {
	/**
 * @description Holds the date represented by the widget.
	*/
	date:Date;
	/**
 * @description Holds the maximum date value for the widget.
	*/
	dateMax:Date;
	/**
 * @description Holds the minimum date value for the widget.
	*/
	dateMin:Date;
	/**
 * @description Holds the date and time represented by the widget.
	*/
	dateTime:dateTime;
	/**
 * @description TODO:
Add description.
	*/
	displayFormat:String;
	/**
 * @description Holds the time represented by the widget.
	*/
	time:Date;
	/**
 * @description Holds the maximum time value for the widget.
	*/
	timeMax:Date;
	/**
 * @description Holds the minimum time value for the widget.
	*/
	timeMin:Date;
	/**
 * @description Creates a date time edit widget as a child of the given parent widget.
 * @param parent - The widget parent for the date time edit.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the date/time in the widget has changed, passes the new date/time.
 * @signature `"valueChanged(const QDateTime&)"`
 * @event
*/
	valueChanged(dateTime:DateTime):void {
	
	};

}
/**
 * @classdesc TODO:
Add detailed description.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/defaultmaterial_dz} */
class DzDefaultMaterial extends DzRefCountedItem, DzMaterial {
	/**
 * @description Default Constructor.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @returns The ambient color for this material.
*/
	getAmbientColor():Color {
	
	};
	/**
 * @returns The property that controls ambient color.
*/
	getAmbientColorControl():DzColorProperty {
	
	};
	/**
 * @returns The ambient color map for this material.
*/
	getAmbientColorMap():DzTexture {
	
	};
	/**
 * @returns The ambient strength for this material.
*/
	getAmbientStrength():Number {
	
	};
	/**
 * @returns The property that controls ambient strength.
*/
	getAmbientStrengthControl():DzFloatProperty {
	
	};
	/**
 * @returns The ambient strength map for this material.
*/
	getAmbientValueMap():DzTexture {
	
	};
	/**
 * @returns The property that controls bump mapping.
*/
	getBumpControl():DzFloatProperty {
	
	};
	/**
 * @returns The bump map for this material.
*/
	getBumpMap():DzTexture {
	
	};
	/**
 * @returns The maximum bump for this material.
*/
	getBumpMax():Number {
	
	};
	/**
 * @returns The property that controls the bump mapping maximum.
*/
	getBumpMaxControl():DzFloatProperty {
	
	};
	/**
 * @returns The minimum bump for this material.
*/
	getBumpMin():Number {
	
	};
	/**
 * @returns The property that controls the bump mapping minimum.
*/
	getBumpMinControl():DzFloatProperty {
	
	};
	/**
 * @returns The bump strength for this material.
*/
	getBumpStrength():Number {
	
	};
	/**
 * @returns The property that controls diffuse color.
*/
	getDiffuseColorControl():DzColorProperty {
	
	};
	/**
 * @returns The diffuse strength for this material.
*/
	getDiffuseStrength():Number {
	
	};
	/**
 * @returns The property that controls diffuse strength.
*/
	getDiffuseStrengthControl():DzFloatProperty {
	
	};
	/**
 * @returns The diffuse strength map for this material.
*/
	getDiffuseValueMap():DzTexture {
	
	};
	/**
 * @returns The property that controls displacement mapping.
*/
	getDisplacementControl():DzFloatProperty {
	
	};
	/**
 * @returns The displacement map for this material.
*/
	getDisplacementMap():DzTexture {
	
	};
	/**
 * @returns The maximum displacement (displacement that white maps to) for this material.
*/
	getDisplacementMax():Number {
	
	};
	/**
 * @returns The property that controls the displacement mapping maximum.
*/
	getDisplacementMaxControl():DzFloatProperty {
	
	};
	/**
 * @returns The minimum displacement for this material.
*/
	getDisplacementMin():Number {
	
	};
	/**
 * @returns The property that controls the displacement mapping minimum.
*/
	getDisplacementMinControl():DzFloatProperty {
	
	};
	/**
 * @returns The displacement strength for this material.
*/
	getDisplacementStrength():Number {
	
	};
	/**
 * @returns The property that controls glossiness.
*/
	getGlossinessControl():DzFloatProperty {
	
	};
	/**
 * @returns The glossines strength for this material.
*/
	getGlossinessStrength():Number {
	
	};
	/**
 * @returns The glossines strength map for this material.
*/
	getGlossinessValueMap():DzTexture {
	
	};
	/**
 * @returns The horizontal offset value.
*/
	getHorizontalOffset():Number {
	
	};
	/**
 * @returns The property that controls the horizontal offset of an image.
*/
	getHorizontalOffsetControl():DzFloatProperty {
	
	};
	/**
 * @returns The number of horizontal tiles.
*/
	getHorizontalTiles():Number {
	
	};
	/**
 * @returns The property that controls the horizontal tiling of an image.
*/
	getHorizontalTilesControl():DzFloatProperty {
	
	};
	/**
 * @returns The index of refraction for this material.
*/
	getIndexOfRefraction():Number {
	
	};
	/**
 * @returns The property that controls the index of refraction.
*/
	getIndexOfRefractionControl():DzFloatProperty {
	
	};
	/**
 * @returns The property that controls whether multiplication through opacity is enabled.
*/
	getMultThroughOpacityControl():DzBoolProperty {
	
	};
	/**
 * @returns Image for the nomal map.
*/
	getNormalValueMap():DzTexture {
	
	};
	/**
 * @returns The property that controls the normal value map.
*/
	getNormalValueMapControl():DzImageProperty {
	
	};
	/**
 * @returns The property that controls opacity.
*/
	getOpacityControl():DzFloatProperty {
	
	};
	/**
 * @returns The reflection color for this material.
*/
	getReflectionColor():Color {
	
	};
	/**
 * @returns The property that controls reflection color.
*/
	getReflectionColorControl():DzColorProperty {
	
	};
	/**
 * @returns The reflection map for this material.
*/
	getReflectionMap():DzTexture {
	
	};
	/**
 * @returns The reflection strength for this material.
*/
	getReflectionStrength():Number {
	
	};
	/**
 * @returns The property that controls reflection strength.
*/
	getReflectionStrengthControl():DzFloatProperty {
	
	};
	/**
 * @returns The reflection strength map for this material.
*/
	getReflectionValueMap():DzTexture {
	
	};
	/**
 * @returns The refraction color for this material.
*/
	getRefractionColor():Color {
	
	};
	/**
 * @returns The property that controls refraction color.
*/
	getRefractionColorControl():DzColorProperty {
	
	};
	/**
 * @returns The refraction map for this material.
*/
	getRefractionColorMap():DzTexture {
	
	};
	/**
 * @returns The refraction strength for this material.
*/
	getRefractionStrength():Number {
	
	};
	/**
 * @returns The property that controls refraction strength.
*/
	getRefractionStrengthControl():DzFloatProperty {
	
	};
	/**
 * @returns The refraction strength map for this material.
*/
	getRefractionValueMap():DzTexture {
	
	};
	/**
 * @returns The scatter color for this material.
*/
	getScatterColor():Color {
	
	};
	/**
 * @returns The property that controls scatter color.
*/
	getScatterColorControl():DzColorProperty {
	
	};
	/**
 * @returns The scatter map for this material.
*/
	getScatterColorMap():DzTexture {
	
	};
	/**
 * @returns The sheen color for this material.
*/
	getSheenColor():Color {
	
	};
	/**
 * @returns The property that controls sheen color.
*/
	getSheenColorControl():DzColorProperty {
	
	};
	/**
 * @returns The sheen map for this material.
*/
	getSheenColorMap():DzTexture {
	
	};
	/**
 * @returns The specular color for this material.
*/
	getSpecularColor():Color {
	
	};
	/**
 * @returns The property that controls specular color.
*/
	getSpecularColorControl():DzColorProperty {
	
	};
	/**
 * @returns The specular color map for this material.
*/
	getSpecularColorMap():DzTexture {
	
	};
	/**
 * @returns The specular strength for this material.
*/
	getSpecularStrength():Number {
	
	};
	/**
 * @returns The property that controls specular strength.
*/
	getSpecularStrengthControl():DzFloatProperty {
	
	};
	/**
 * @returns The specular strength map for this material.
*/
	getSpecularValueMap():DzTexture {
	
	};
	/**
 * @returns The surface type for this material.
*/
	getSurfaceType():Number {
	
	};
	/**
 * @returns The property that controls surface type.
*/
	getSurfaceTypeControl():DzEnumProperty {
	
	};
	/**
 * @returns The thickness for this material.
*/
	getThickness():Number {
	
	};
	/**
 * @returns The property that controls thickness.
*/
	getThicknessControl():DzFloatProperty {
	
	};
	/**
 * @returns The thickness map for this material.
*/
	getThicknessValueMap():DzTexture {
	
	};
	/**
 * @returns The vertical offset value.
*/
	getVerticalOffset():Number {
	
	};
	/**
 * @returns The property that controls the vertical offset of an image.
*/
	getVerticalOffsetControl():DzFloatProperty {
	
	};
	/**
 * @returns The number of vertical tiles.
*/
	getVerticalTiles():Number {
	
	};
	/**
 * @returns The property that controls the vertical tiling of an image.
*/
	getVerticalTilesControl():DzFloatProperty {
	
	};
	/**
 * @returns The value of the multiply through opacity parameter.
*/
	isMultThroughOpacity():Boolean {
	
	};
	/**
 * @returns Whether the renderman geometry needs the additional dPds adm dPdsM parameters,used for some shaders. This is true if the material has a normal map and it is in tangent space
*/
	needsTangentSpaceParams():Boolean {
	
	};
	/**
 * @description Set the ambient color for this material.
 * @param color - The new ambient color for the material.
*/
	setAmbientColor(color:Color):void {
	
	};
	/**
 * @description Set the ambient color map for this material.
 * @param img - The new ambient color map for the material.
*/
	setAmbientColorMap(img:DzTexture):void {
	
	};
	/**
 * @description Set the ambient strength for this material.
 * @param val - The new ambient strength for the material.
*/
	setAmbientStrength(val:Number):void {
	
	};
	/**
 * @description Set the ambient strength map for this material.
 * @param img - The new ambient strength map for this material.
*/
	setAmbientValueMap(img:DzTexture):void {
	
	};
	/**
 * @description Set the map for the bump strength channel.
 * @param img - The new bump map for this material.
*/
	setBumpMap(img:DzTexture):void {
	
	};
	/**
 * @description Set the maximum bump for this material.
 * @param val - The new bump maximum
*/
	setBumpMax(val:Number):void {
	
	};
	/**
 * @description Set the minimum bump for this material.
 * @param val - The new bump minimum.
*/
	setBumpMin(val:Number):void {
	
	};
	/**
 * @description Set the bump strength for this material.
 * @param val - The new bump strength for this material.
*/
	setBumpStrength(val:Number):void {
	
	};
	/**
 * @description Set the diffuse strength for this material.
 * @param val - The new diffuse strength for the material.
*/
	setDiffuseStrength(val:Number):void {
	
	};
	/**
 * @description Set the diffuse strength map for this material.
 * @param img - The new diffuse strength map for the material.
*/
	setDiffuseValueMap(img:DzTexture):void {
	
	};
	/**
 * @description Set the displacement map for this material.
 * @param img - The new displacement map for the material.
*/
	setDisplacementMap(img:DzTexture):void {
	
	};
	/**
 * @description Set the maximum displacement for this material.
 * @param val - The new maximum displacement for this material.
*/
	setDisplacementMax(val:Number):void {
	
	};
	/**
 * @description Set the minimum displacement for this material.
 * @param val - The new minimum displacement for this material.
*/
	setDisplacementMin(val:Number):void {
	
	};
	/**
 * @description Set the displacement strength for this material.
 * @param val - The new displacement strength for this material
*/
	setDisplacementStrength(val:Number):void {
	
	};
	/**
 * @description Set glossiness for this material.
 * @param size - The new highlight size (glossiness) for the material.
*/
	setGlossinessStrength(size:Number):void {
	
	};
	/**
 * @description Set glossiness value map for this material.
 * @param img - A pointer to the new glossiness value map for the material. NULL to clear the map.
*/
	setGlossinessValueMap(img:DzTexture):void {
	
	};
	/**
 * @description Set the horizontal offset for the material
 * @param offset - The value of the horizontal offset in each tile for the material
*/
	setHorizontalOffset(offset:Number):void {
	
	};
	/**
 * @description Set the horizontal tiling for the material
 * @param tiles - The number of horizontal tiles for the material
*/
	setHorizontalTiles(tiles:Number):void {
	
	};
	/**
 * @description Set the index of refraction for this material.
 * @param val - The new index of refraction for the material.
*/
	setIndexOfRefraction(val:Number):void {
	
	};
	/**
 * @description Set the multiply through opacity parameter. If true, Specular highlights are multiplied through the opacity of the material (i.e. a transparent material will not show specular highlights). If false, specular highlights can contribute to the local opacity of the material (i.e. transparent objects show highlights)
 * @param onOff - Whether or not specularity is multiplied through opacity.
*/
	setMultThroughOpacity(onOff:Boolean):void {
	
	};
	/**
 * @description Set the normal map for this material.
 * @param img - A pointer to the new map map for the material. NULL to clear the map.
*/
	setNormalValueMap(img:DzTexture):void {
	
	};
	/**
 * @description Set the reflection color for this material.
 * @param color - The new reflection color for the material.
*/
	setReflectionColor(color:Color):void {
	
	};
	/**
 * @description Set the reflection map for this material.
 * @param img - The new reflection map for the material.
*/
	setReflectionMap(img:DzTexture):void {
	
	};
	/**
 * @description Set the reflection strength for this material.
 * @param val - The new reflection strength for the material.
*/
	setReflectionStrength(val:Number):void {
	
	};
	/**
 * @description Set reflection strength map for this material.
 * @param img - The new reflection strength map for the material.
*/
	setReflectionValueMap(img:DzTexture):void {
	
	};
	/**
 * @description Set the refraction color for this material.
 * @param color - The new refraction color for the material.
*/
	setRefractionColor(color:Color):void {
	
	};
	/**
 * @description Set the refraction color map for this material.
 * @param img - The new refraction color map for the material.
*/
	setRefractionColorMap(img:DzTexture):void {
	
	};
	/**
 * @description Set the refraction strength for this material.
 * @param val - The new refraction strength for the material.
*/
	setRefractionStrength(val:Number):void {
	
	};
	/**
 * @description Set the refraction strength map for this material.
 * @param img - A pointer to the new refraction strength map for the material. NULL to clear the map.
*/
	setRefractionValueMap(img:DzTexture):void {
	
	};
	/**
 * @description Set the scatter color for this material.
 * @param color - The new scatter color for the material.
*/
	setScatterColor(color:Color):void {
	
	};
	/**
 * @description Set the scatter color map for this material.
 * @param img - The new scatter color map for the material.
*/
	setScatterColorMap(DzTexture):void {
	
	};
	/**
 * @description Set the sheen color for this material.
 * @param color - The new sheen color for the material.
*/
	setSheenColor(color:Color):void {
	
	};
	/**
 * @description Set the sheen color map for this material.
 * @param img - The new sheen color map for the material.
*/
	setSheenColorMap(DzTexture):void {
	
	};
	/**
 * @description Set base specular color for this material.
 * @param color - The new specular color for the material
*/
	setSpecularColor(color:Color):void {
	
	};
	/**
 * @description Set the specular color map for this material.
 * @param img - A pointer to the new specular color map for the material. NULL to clear the map.
*/
	setSpecularColorMap(img:DzTexture):void {
	
	};
	/**
 * @description Set base specular strength for this material.
 * @param size - The new specular strength for the material.
*/
	setSpecularStrength(size:Number):void {
	
	};
	/**
 * @description Set specular strength map for this material.
 * @param img - A pointer to the new specular strength map for the material. NULL to clear the map.
*/
	setSpecularValueMap(img:DzTexture):void {
	
	};
	/**
 * @description Set the surface type for this material.
 * @param val - The index of the surface type for the material.
*/
	setSurfaceType(val:Number):void {
	
	};
	/**
 * @description Set the refraction strength for this material.
 * @param val - The new refraction strength for the material.
*/
	setThickness(Number):void {
	
	};
	/**
 * @description Set the thickness map for this material.
 * @param img - A pointer to the new thickness map for the material. NULL to clear the map.
*/
	setThicknessValueMap(DzTexture):void {
	
	};
	/**
 * @description Set the vertical offset for the material
 * @param offset - The value of the vertical offset in each tile for the material
*/
	setVerticalOffset(offset:Number):void {
	
	};
	/**
 * @description Set the vertical tiling for the material
 * @param tiles - The number of vertical tiles for the material.
*/
	setVerticalTiles(tiles:Number):void {
	
	};

}
/**
 * @classdesc 
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/delightrenderer_dz} */
class DzDelightRenderer extends DzRenderer {
	/**
 * @description Default Constructor.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Resets the handler used for Interactive Progressive Rendering (IPR).
*/
	resetIPRHandler():void {
	
	};

}
/**
 * @classdesc Provides information about the user's desktop, such as its total size, number of screens, the geometry of each screen, and whether they are configured as separate desktops or a single virtual desktop.
Since:
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/desktopwidget_dz} */
class DzDesktopWidget extends DzWidget {
	/**
 * @description Holds the index of the screen that is configured to be the primary screen on the system.
	*/
	primaryScreen:Number;
	/**
 * @description Holds the number of screens currently available on the system.
	*/
	screenCount:Number;
	/**
 * @description Holds if the system manages the available screens in a virtual desktop.
	*/
	virtualDesktop:Boolean;
	/**
 * @description Creates an instance of the desktop, as a widget.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @returns The available geometry of the screen at the specified index (if any). What is available will be a sub-rect of screenGeometry() based on what the platform decides is available (for example excludes the dock and menu bar on Mac OS X, or the task bar on Windows).
 * @param screen - The index of the screen to get the available geometry for. The default screen is used if this is -1.
*/
	availableGeometry(screen:Number):Rect {
	
	};
	/**
 * @returns The available geometry of the screen which contains widget.
 * @param widget - The widget on the screen to get the available geometry for.
*/
	availableGeometry(widget:QWidget):Rect {
	
	};
	/**
 * @returns The available geometry of the screen which contains point.
 * @param point - The position on the screen to get the available geometry for.
*/
	availableGeometry(point:Point):Rect {
	
	};
	/**
 * @returns The geometry of the screen which contains point.
 * @param point - The Point on the screen to get the geometry for.
*/
	screenGeometry(point:Point):Rect {
	
	};
	/**
 * @returns The geometry of the screen at the specified index.
 * @param screen - The index of the screen to get the geometry for. The default screen is used if this is outside the range of screens.
*/
	screenGeometry(screen:Number):Rect {
	
	};
	/**
 * @returns The geometry of the screen which contains widget.
 * @param widget - The widget on the screen to get the geometry for.
*/
	screenGeometry(widget:QWidget):Rect {
	
	};
	/**
 * @returns The index of the screen that contains the Pointpoint, or -1 if is not on a screen.
 * @param point - The Point to get the screen number for.
*/
	screenNumber(point:Point):Number {
	
	};
	/**
 * @returns The index of the screen that contains the largest part of widget, or -1 if the widget not on a screen.
 * @param widget - The widget to get the screen number for.
*/
	screenNumber(widget:QWidget):Number {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the size of a screen changes.
 * @signature `"resized(int)"`
 * @event
*/
	resized(screen:Number):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the number of screens changes to newCount.
 * @signature `"screenCountChanged(int)"`
 * @event
*/
	screenCountChanged(newCount:Number):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the work area available on a screen changes.
 * @signature `"workAreaResized(int)"`
 * @event
*/
	workAreaResized(screen:Number):void {
	
	};

}
/**
 * @classdesc Deprecated
Exists only to keep old code working. Do not use in new code. Use DzDesktopWidget instead.
This page exists in order to indicate the script accessible properties and signals of the Qt native QDesktopWidget class. Use Global.getDesktop() to retrieve an object of this type.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/desktopwidget_q} */
class QDesktopWidget extends QWidget {
	/**
 * @description Holds the index of the screen that is configured to be the primary screen on the system.
	*/
	primaryScreen:Number;
	/**
 * @description Holds the number of screens currently available on the system.
	*/
	screenCount:Number;
	/**
 * @description Holds if the system manages the available screens in a virtual desktop.
	*/
	virtualDesktop:Boolean;
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the size of screen changes.
 * @signature `"resized(int)"`
 * @event
*/
	resized(screen:Number):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the number of screens changes to newCount.
 * @signature `"screenCountChanged(int)"`
 * @event
*/
	screenCountChanged(newCount:Number):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the work area available on screen changes.
 * @signature `"workAreaResized(int)"`
 * @event
*/
	workAreaResized(screen:Number):void {
	
	};

}
/**
 * @classdesc TODO:
Add detailed description.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/device_dz} */
class DzDevice extends QObject {
	/**
 * @param settings - This will be set to the default settings for the device.
*/
	getDefaultSettings(settings:DzSettings):void {
	
	};
	/**
 * @returns A user-readable description of the device.
*/
	getDescription():String {
	
	};
	/**
 * @returns The name of the device.
*/
	getDeviceName():String {
	
	};
	/**
 * @param settings - This will be set to the current settings for the device.
*/
	getSettings(settings:DzSettings):void {
	
	};
	/**
 * @description Changes the current settings for the device.
 * @param settings - The new settings for the device.
*/
	setSettings(settings:DzSettings):void {
	
	};

}
/**
 * @classdesc Responsible for the management of hardware devices.
There is only one instance of this manager in an application. This instance is created and owned by DzApp. Request the instance via DzApp.getDeviceMgr().
See Also:
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/devicemgr_dz} */
class DzDeviceMgr extends QObject {
	/**
 * @returns The device at the given index.
 * @param which - The index of the device to get.
 * @attention The Device Manager owns this object - do NOT delete it.
*/
	getDevice(which:Number):DzDevice {
	
	};
	/**
 * @returns The number of available devices.
*/
	getNumDevices():Number {
	
	};

}
/**
 * @classdesc The dForm is the primary component of a dForm deformer. The others are the DzDFormBase, DzDFormZone and dformmodifier_dz.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/dform_dz} */
class DzDForm extends DzNode {
	/**
 * @description Default Constructor.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Adds the effect of this dForm to the given node.
 * @param node - The node to apply this dForm's affect to.
*/
	applyToNode(node:DzNode):void {
	
	};
	/**
 * @returns The avatar scale factor for the representation of the dFormer.
*/
	getAvatarScale():Number {
	
	};
	/**
 * @returns The property that controls the avatar scale factor for this dFormer.
*/
	getAvatarScaleControl():DzFloatProperty {
	
	};
	/**
 * @returns The base for this dFormer.
*/
	getBase():DzDFormBase {
	
	};
	/**
 * @returns The color used in the gradient for weights at the maximum end of the scale.
*/
	getGradientMax():Color {
	
	};
	/**
 * @returns The color used in the gradient for weights at the minimum end of the scale.
*/
	getGradientMin():Color {
	
	};
	/**
 * @returns The influence mode.
*/
	getInfluenceMode():void {
	
	};
	/**
 * @description Gets the i'th modifier of the dForm. The index is zero based. Can be used with getNumModifiers() to iterate over all the dForm modifiers.
 * @returns The target modifier at the requested index (if valid).
 * @param i - The index of the modifier to get.
*/
	getModifier(i:Number):DzDformmodifier {
	
	};
	/**
 * @description Gets the i'th modifier of the dForm. The index is zero based. Can be used with getNumModifiers() to iterate over all the dForm modifiers.
 * @returns The target modifier on the requested node.
 * @param node - The node to find the modifier on.
*/
	getModifierForNode(node:DzNode):DzDformmodifier {
	
	};
	/**
 * @returns The number of dForm modifiers that are driven by this dForm.
*/
	getNumModifiers():Number {
	
	};
	/**
 * @returns The opacity for the representation of the dFormer.
*/
	getOpacity():Number {
	
	};
	/**
 * @returns The property that controls opacity for drawing this dFormer.
*/
	getOpacityControl():DzFloatProperty {
	
	};
	/**
 * @returns The zone for this dFormer.
*/
	getZone():DzDFormZone {
	
	};
	/**
 * @description Sets the avatar scale factor of the dForm representation.
 * @param val - The new avatar scale factor for the dForm; 1.0 maintains 100% scale.
*/
	setAvatarScale(val:Number):void {
	
	};
	/**
 * @description Sets the base for this dForm.
 * @param base - The dForm base to set.
*/
	setBase(base:DzDFormBase):void {
	
	};
	/**
 * @description Sets the Color used in the gradient for weights at the maximum end of the scale.
 * @param color - The color to use for representing maximum weights.
*/
	setGradientMax(color:Color):void {
	
	};
	/**
 * @description Sets the Color used in the gradient for weights at the minimum end of the scale.
 * @param color - The color to use for representing minimum weights.
*/
	setGradientMin(color:Color):void {
	
	};
	/**
 * @description Sets the opacity of the dForm representation.
 * @param val - The new opacity for the dForm; 0.0 is completely transparent, 1.0 is completely opaque.
*/
	setOpacity(val:Number):void {
	
	};
	/**
 * @description Sets the zone for this dForm.
 * @param zone - The dForm zone to set.
*/
	setZone(zone:DzDFormZone):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the dform modifier list for this dFormer has changed.
 * @signature `"dformModifierListChanged()"`
 * @event
*/
	dformModifierListChanged():void {
	
	};

}
/**
 * @classdesc An asset save filter for saving a D-Former(s) Preset in the DSON format.
See Also:
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/dformassetfilter_dz} */
class DzDFormAssetFilter extends DzAssetFileOutFilter {
	/**
 * @description TODO:
Add description.
 * @constructor
*/
	constructor() {
	
	};

}
/**
 * @classdesc The base is one component of a dForm deformer. The others are the DzDForm, DzDFormZone and dformmodifier_dz.
The dForm base functions as the origin for the dForm deformation effect, as detailed in the dForm class.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/dformbase_dz} */
class DzDFormBase extends DzNode {
	/**
 * @description Default Constructor.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @returns The dForm for this base.
*/
	getDForm():DzDForm {
	
	};

}
/**
 * @classdesc The zone is one component of a dForm deformer. The others are the DzDForm, DzDFormBase and dformmodifier_dz.
The zone is an independent DzNode derived object that is used to set the area of influence of the dForm's effect.
It is spherical in shape but can be scaled into any form of ellipsoid.
The zone has an effect falloff zone based on a naturalspline_dz object. The falloff is the same along the x,y and z axis.
The zone has draws itself as a wireframe sphere. The base size of this sphere is controlled by the DzFloatProperty "Radius". This sphere can be made transparent and is controlled by the DzFloatProperty "Opacity". The zone is drawn with the maximum gradient color of the dForm.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/dformzone_dz} */
class DzDFormZone extends DzNode {
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static AxisOnly;
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static Wireframe;
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static Solid;
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static Sphere;
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static WeightMap;
	/**
 * @description Default Constructor.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @returns The dForm for this zone.
*/
	getDForm():DzDForm {
	
	};
	/**
 * @returns The influence mode of this deformer.
 * @since 4.6.2.34
*/
	getInfluenceMode():void {
	
	};
	/**
 * @returns The property that controls the influence mode for this dFormer.
 * @since 4.6.2.34
*/
	getInfluenceModeControl():DzEnumProperty {
	
	};
	/**
 * @returns The property that controls the opacity for this zone.
*/
	getOpacityControl():DzFloatProperty {
	
	};
	/**
 * @returns The spline used to compute the falloff for this zone.
*/
	getSpline():DzNaturalspline {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the influence mode for this dForm zone has changed.
 * @signature `"influenceModeChanged()"`
 * @event
*/
	influenceModeChanged():void {
	
	};

}
/**
 * @classdesc A DzDial provides a rounded range control like a speedometer.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/dial_dz} */
class DzDial extends DzWidget {
	/**
 * @description The current line step
	*/
	lineStep:Number;
	/**
 * @description Holds the maximum value for the widget.
	*/
	max:Number;
	/**
 * @description Holds the minimum value for the widget.
	*/
	min:Number;
	/**
 * @description Holds whether or not to show notches.
	*/
	notchesVisible:Boolean;
	/**
 * @description Holds the current notch size. (Read Only)
	*/
	notchSize:Number;
	/**
 * @description Holds the target number of pixels between notches.
	*/
	notchTarget:Number;
	/**
 * @description The current page step
	*/
	pageStep:Number;
	/**
 * @description Holds whether or not to track the cursor, true by default.
	*/
	tracking:Boolean;
	/**
 * @description Holds the value represented by the widget.
	*/
	value:Number;
	/**
 * @description Holds whether or not the arrow can be rotated 360 degrees, or if some space is left at the bottom.
	*/
	wrapping:Boolean;
	/**
 * @description Creates a dial widget as a child of the given parent widget.
 * @param parent - The widget parent for the dial.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when dial moves, passes the new value of the dial.
 * @signature `"dialMoved(int)"`
 * @event
*/
	dialMoved(value:Number):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the dial is pressed by the user.
 * @signature `"dialPressed()"`
 * @event
*/
	dialPressed():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the dial is released by the user.
 * @signature `"dialReleased()"`
 * @event
*/
	dialReleased():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the value of the dial changes, passes the new value.
 * @signature `"valueChanged(int)"`
 * @event
*/
	valueChanged(value:Number):void {
	
	};

}
/**
 * @classdesc This is the basic building block for DAZScript interfaces. DzDialog provides an independent window widget that in turn can act as the parent for other DAZScript widgets. Most custom DAZScript interfaces will be built starting with a DzDialog customized with Layout and DzWidget components.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/dialog_dz} */
class DzDialog extends DzWidget {
	/**
 * @description Holds the title of the dialog.
	*/
	caption:String;
	/**
 * @description Holds the orientation of the dialog extension.
	*/
	orientation:DzWidget;
	/**
 * @description Holds whether or not the size grip is enabled.
	*/
	sizeGripEnabled:Boolean;
	/**
 * @description Default Constructor.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Closes the dialog.
 * @returns true if the dialog was closed, otherwise false.
*/
	close():Boolean {
	
	};
	/**
 * @description Displays the dialog to the user.
 * @returns true if the box was accepted, otherwise false.
*/
	exec():Boolean {
	
	};
	/**
 * @returns The current extension widget (if any) for the dialog.
*/
	extension():DzWidget {
	
	};
	/**
 * @description Causes the extension widget for the dialog to be hidden.
*/
	hideExtension():void {
	
	};
	/**
 * @description Sets the button that will cause the dialog to close and return true.
*/
	setAcceptButton(btn:DzButton):void {
	
	};
	/**
 * @description Sets the extension widget for the dialog.
*/
	setExtension(extension:DzWidget):void {
	
	};
	/**
 * @description Sets the button that will cause the dialog to close and return false.
*/
	setRejectButton(btn:DzButton):void {
	
	};
	/**
 * @description Sets the extension widget visibility to onOff.
*/
	showExtension(onOff:Boolean):void {
	
	};
	/**
 * @description Causes the extension widget for the dialog to be shown.
*/
	showExtension():void {
	
	};

}
/**
 * @classdesc 
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/dir_dz} */
class DzDir extends QObject {
	/**
 * @description ENUMERATOR: List directories that match the filters.
*/
	
	static Dirs;
	/**
 * @description ENUMERATOR: List files that match the filters.
*/
	
	static Files;
	/**
 * @description ENUMERATOR: List drives that match the filters.
*/
	
	static Drives;
	/**
 * @description ENUMERATOR: Do not list symbolic links.
*/
	
	static NoSymLinks;
	/**
 * @description ENUMERATOR: List directories, files, drives and symbolic links.
*/
	
	static AllEntries;
	/**
 * @description ENUMERATOR: List directories, files, drives and symbolic links.
*/
	
	static All;
	/**
 * @description ENUMERATOR: Type Mask
*/
	
	static TypeMask;
	/**
 * @description ENUMERATOR: List entries for which the application has read access. Needs to be combined with Dirs or Files.
*/
	
	static Readable;
	/**
 * @description ENUMERATOR: List entries for which the application has write access. Needs to be combined with Dirs or Files.
*/
	
	static Writable;
	/**
 * @description ENUMERATOR: List entries for which the application has execute access. Needs to be combined with Dirs or Files.
*/
	
	static Executable;
	/**
 * @description ENUMERATOR: Include Readable, Writable, and Executable entries
*/
	
	static PermissionMask;
	/**
 * @description ENUMERATOR: Include Readable, Writable, and Executable entries
*/
	
	static RWEMask;
	/**
 * @description ENUMERATOR: Only list entries that have been modified.
*/
	
	static Modified;
	/**
 * @description ENUMERATOR: List hidden entries.
*/
	
	static Hidden;
	/**
 * @description ENUMERATOR: List system entries.
*/
	
	static System;
	/**
 * @description ENUMERATOR: Access mask
*/
	
	static AccessMask;
	/**
 * @description ENUMERATOR: List all directories; don't apply filters to directory names.
*/
	
	static AllDirs;
	/**
 * @description ENUMERATOR: The filter should be treated as case sensitive.
*/
	
	static CaseSensitive;
	/**
 * @description ENUMERATOR: Do not list the special entries '.' and '..'.
*/
	
	static NoDotAndDotDot;
	/**
 * @description ENUMERATOR: Do not list the special entry '.'.
*/
	
	static NoDot;
	/**
 * @description ENUMERATOR: Do not list the special entry '..'.
*/
	
	static NoDotDot;
	/**
 * @description ENUMERATOR: Do not filter.
*/
	
	static NoFilter;
	/**
 * @description ENUMERATOR: Sort by name.
*/
	
	static Name;
	/**
 * @description ENUMERATOR: Sort by time (modification time).
*/
	
	static Time;
	/**
 * @description ENUMERATOR: Sort by size.
*/
	
	static Size;
	/**
 * @description ENUMERATOR: Do not sort.
*/
	
	static Unsorted;
	/**
 * @description ENUMERATOR: Mask for Sort by
*/
	
	static SortByMask;
	/**
 * @description ENUMERATOR: Put the directories first, then the files.
*/
	
	static DirsFirst;
	/**
 * @description ENUMERATOR: Reverse the sort order.
*/
	
	static Reversed;
	/**
 * @description ENUMERATOR: Sort case-insensitively.
*/
	
	static IgnoreCase;
	/**
 * @description ENUMERATOR: Put the files first, then the directories.
*/
	
	static DirsLast;
	/**
 * @description ENUMERATOR: Sort items appropriately using the current locale settings.
*/
	
	static LocaleAware;
	/**
 * @description ENUMERATOR: Sort by file type (extension).
*/
	
	static Type;
	/**
 * @description ENUMERATOR: Not sorted by default.
*/
	
	static NoSort;
	/**
 * @description Creates a directory object with the given path.
 * @param path - The path of the directory.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @returns The simplest version of the input, but not the canonical path; removes multiple adjacent directory separators (e.g. "//") and resolves any dot and/or dotdot (e.g. "." or "..") found in the path. Symbolic links are kept.
 * @since 4.9.3.35
*/
	static cleanPath(path:String):String {
	
	};
	/**
 * @returns The application's current directory. The directory is constructed using the absolute path of the current directory, ensuring that its path() will be the same as its absolutePath().
 * @since 4.9.3.35
*/
	current():DzDir {
	
	};
	/**
 * @returns The absolute path of the application's current directory.
 * @since 4.9.3.35
*/
	currentPath():String {
	
	};
	/**
 * @returns pathName using '/' as the path separator instead of the native path separator.
 * @since 4.9.3.35
*/
	static fromNativeSeparators(pathName:String):String {
	
	};
	/**
 * @returns The user's home directory. The directory is constructed using the absolute path of the home directory, ensuring that its path() will be the same as its absolutePath().
 * @since 4.9.3.35
*/
	home():DzDir {
	
	};
	/**
 * @returns The absolute path of the user's home directory. Under Windows this function will return the directory of the current user's profile. Under non-Windows operating systems the HOME environment variable is used if it exists, otherwise the path returned by the rootPath().
 * @since 4.9.3.35
 * @attention Under Windows, if the directory of the current user's profile does not exist or cannot be retrieved, the following alternatives will be checked (in the given order) until an existing and available path is found:  * The path specified by the USERPROFILE environment variable.The path formed by concatenating the HOMEDRIVE and HOMEPATH environment variables.The path specified by the HOME environment variable.The path returned by the rootPath() function (which uses the SystemDrive environment variable).The C:/ directory.
*/
	homePath():String {
	
	};
	/**
 * @returns true if path is absolute, otherwise false.
 * @since 4.9.3.35
*/
	static isAbsolutePath(path:String):Boolean {
	
	};
	/**
 * @returns true if path is relative, otherwise false.
 * @since 4.9.3.35
*/
	static isRelativePath(path:String):Boolean {
	
	};
	/**
 * @returns true if fileName matches the wildcard (glob) pattern filter, otherwise false. The filter may contain multiple patterns separated by spaces or semicolons. The matching is case insensitive.
 * @since 4.9.3.35
*/
	static match(filter:String, fileName:String):Boolean {
	
	};
	/**
 * @returns true if fileName matches any of the wildcard (glob) patterns in the list of filters, otherwise false. The matching is case insensitive.
 * @since 4.9.3.35
*/
	static match(filters:Array, fileName:String):Boolean {
	
	};
	/**
 * @returns The root directory. The directory is constructed using the absolute path of the root directory, ensuring that its path() will be the same as its absolutePath().
 * @since 4.9.3.35
*/
	root():DzDir {
	
	};
	/**
 * @returns The absolute path of the root directory. For Windows this normally returns "c:/"; i.e. the root of the system drive. For Mac OS X this returns "/".
 * @since 4.9.3.35
*/
	rootPath():String {
	
	};
	/**
 * @returns The native directory separator; "\" under Windows, "/" under Mac OS X.
 * @since 4.9.3.35
 * @attention You do not need to use this function to build file paths. If you always use "/", your paths will be translated to conform to the underlying operating system. If you want to display paths to the user using their operating system's separator use toNativeSeparators().
*/
	separator():String {
	
	};
	/**
 * @description Sets the application's current working directory to path.
 * @returns true if the directory was successfully changed, otherwise false.
 * @since 4.9.3.35
*/
	static setCurrent(path:String):Boolean {
	
	};
	/**
 * @returns The system's temporary directory. The directory is constructed using the absolute path of the temp directory, ensuring that its path() will be the same as its absolutePath().
 * @since 4.9.3.35
*/
	temp():DzDir {
	
	};
	/**
 * @returns The absolute path of the system's temporary directory. On Windows this is usually the path in the TEMP or TMP environment variable. On Mac OS X this is the path in the TMPDIR environment variable or /tmp if TMPDIR is not defined. Whether a directory separator is added to the end or not, depends on the operating system.
 * @since 4.9.3.35
*/
	tempPath():String {
	
	};
	/**
 * @returns pathName with the '/' separators converted to separators that are appropriate for the underlying operating system. On Windows, '/' will be converted to '\'. On Mac OS X the returned string may be the same as pathName.
 * @since 4.9.3.35
*/
	static toNativeSeparators(pathName:String):String {
	
	};
	/**
 * @description Deprecated
*/
	absFilePath(file:String):String {
	
	};
	/**
 * @returns The absolute path (a path that starts with "/" or with a drive specification) to file, which may contain symbolic links, but never contains redundant ".", ".." or multiple separators. Does not check if the file actually exists in the directory.
 * @since 4.9.3.35
 * @param fileName - The name of the file get the absolute path for.
*/
	absoluteFilePath(fileName:String):String {
	
	};
	/**
 * @returns The absolute path (a path that starts with "/" or with a drive specification), which may contain symbolic links, but never contains redundant ".", ".." or multiple separators.
 * @since 4.9.3.35
*/
	absolutePath():String {
	
	};
	/**
 * @description Deprecated
*/
	absPath():String {
	
	};
	/**
 * @returns The canonical path, i.e. a path without symbolic links or redundant "." or ".." elements.
*/
	canonicalPath():String {
	
	};
	/**
 * @description Changes the current directory to dirName.
 * @returns true if dirName exists and is readable, otherwise false.
 * @param dirName - The path to change to; can be relative or absolute.
*/
	cd(dirName:String):Boolean {
	
	};
	/**
 * @description Changes the directory by moving one directory up from the current directory.
 * @returns true if the new directory exists and is readable, otherwise false.
*/
	cdUp():Boolean {
	
	};
	/**
 * @description Makes a copy of a file.
 * @returns true if srcFile and destFile are the same or if the operation is successful, otherwise false.
 * @param srcFile - The path of the source file to copy.
 * @param destFile - The path of the file that source will be copied to.
*/
	copy(srcFile:String, destFile:String):Boolean {
	
	};
	/**
 * @returns The total number of directories and files in the directory.
 * @since 4.9.3.35
*/
	count():Number {
	
	};
	/**
 * @returns The the name of the directory (not the whole path, just the folder name). If the directory has no name (e.g. it is the root directory) an empty string is returned.
*/
	dirName():String {
	
	};
	/**
 * @returns A list of the names of all the files/directories in the directory, ordered according to the name and attribute filters previously set with setNameFilters() and setFilter(), and sorted according to the flags set with setSorting(), if the directory is exists, is readable, and contains matches.
 * @param nameFilters - The list of wildcard (globbing) name filters (that understands * and ? wildcards) to use; overrides any value set with setNameFilters().
 * @param filters - A bitwise OR of the filtering options to use.
 * @param sort - A bitwise OR of the sorting options to use.
*/
	entryList(nameFilters:Array, filters:Filters, sort:SortFlags):Array {
	
	};
	/**
 * @returns A list of the names of all the files/directories in the directory, ordered according to the name and attribute filters previously set with setNameFilters() and setFilter(), and sorted according to the flags set with setSorting(), if the directory is exists, is readable, and contains matches.
 * @since 4.9.3.35
 * @param filters - A bitwise OR of the filtering options to use.
 * @param sort - A bitwise OR of the sorting options to use.
*/
	entryList(filters:Filters, sort:SortFlags):Array {
	
	};
	/**
 * @returns A list of the names of all the files/directories in the directory, ordered according to the name and attribute filters previously set with setNameFilters() and setFilter(), and sorted according to the flags set with setSorting(), if the directory is exists, is readable, and contains matches.
 * @param nameFilter - The wildcard (globbing) name filter (that understands * and ? wildcards) to use; overrides any value set with setNameFilters().
 * @param filters - A bitwise OR of the filtering options to use.
 * @param sort - A bitwise OR of the sorting options to use.
*/
	entryList(nameFilter:String, filters:Filters, sort:SortFlags):Array {
	
	};
	/**
 * @returns true if the file exists, otherwise false.
 * @since 4.9.3.35
 * @param name - The name of the file to check for.
 * @attention Unless name contains an absolute file path, the file name is assumed to be relative to the directory itself, so this function is typically used to check for the presence of files within a directory.
*/
	exists(name:String):Boolean {
	
	};
	/**
 * @returns true if the directory exists, otherwise false.
 * @attention If a file with the same name is found this function will return false.
*/
	exists():Boolean {
	
	};
	/**
 * @description Deprecated
*/
	fileExists(fileName:String):Boolean {
	
	};
	/**
 * @returns The path of a file named file in the directory; does not check if the file actually exists.
 * @attention If the directory is relative the returned path name will also be relative. Redundant multiple separators or "." and ".." directories in fileName are not removed.
*/
	filePath(fileName:String):String {
	
	};
	/**
 * @returns The value set by setFilter().
 * @since 4.9.3.35
*/
	filter():Filters {
	
	};
	/**
 * @returns An array containing the absolute paths of files under the directory.
 * @param extensions - An array containing extensions of files to find; format of strings should be "*.ext".
 * @param recursive - If true, the retrieval of file paths should recurse sub-directories.
*/
	getFilesFromDir(extentions:Array, recursive:Boolean):Array {
	
	};
	/**
 * @returns true if the directory's path is absolute, otherwise false.
*/
	isAbsolute():Boolean {
	
	};
	/**
 * @returns true if the directory is readable and we can open files by name, otherwise false.
*/
	isReadable():Boolean {
	
	};
	/**
 * @returns true if the directory path is relative, otherwise false.
*/
	isRelative():Boolean {
	
	};
	/**
 * @returns true if the directory is the root directory, otherwise false.
 * @attention If the directory is a symbolic link to the root directory this function returns false. If you want to test for this use canonicalPath().
*/
	isRoot():Boolean {
	
	};
	/**
 * @description Converts the directory path to an absolute path. If it is already absolute nothing happens.
 * @returns true if the conversion succeeded, otherwise false.
 * @since 4.9.3.35
*/
	makeAbsolute():Boolean {
	
	};
	/**
 * @description Creates a new directory.
 * @returns true if dirName does not already exist when this function is called and the sub-directory is successfully created, otherwise false.
 * @param dirName - The relative path of a sub-directory to create. If empty (default), this directory's absolute path will be used.
*/
	mkdir(dirName:String):Boolean {
	
	};
	/**
 * @description Deprecated
*/
	mkdirs(dirName:String):Boolean {
	
	};
	/**
 * @description Creates all directories that do not already exist in dirpath.
 * @returns true if successful (the path already exists when this function is called), otherwise false.
 * @param dirpath - The path of the directories to create.
*/
	mkpath(dirpath:String):Boolean {
	
	};
	/**
 * @description Moves a file to a new location.
 * @returns true if srcFile and destFile are the same or if the operation is successful, otherwise false.
 * @param srcFile - The path of the source file to move.
 * @param destFile - The path that the file will be moved to.
*/
	move(srcFile:String, destFile:String):Boolean {
	
	};
	/**
 * @returns The string list set by setNameFilters().
 * @since 4.9.3.35
*/
	nameFilters():Array {
	
	};
	/**
 * @returns The path of this directory. This may contain symbolic links, but never contains redundant ".", ".." or multiple separators.
*/
	path():String {
	
	};
	/**
 * @description Refreshes the directory information.
*/
	refresh():void {
	
	};
	/**
 * @returns The path to file, relative to the current directory; does not check if the file actually exists.
*/
	relativeFilePath(fileName:String):String {
	
	};
	/**
 * @description Removes fileName from this directory.
 * @returns true if the file is removed successfully, otherwise false.
 * @param fileName - The relative path of the file to remove.
*/
	remove(fileName:String):Boolean {
	
	};
	/**
 * @description Renames a file or directory from oldName to newName.
 * @returns true if successful, otherwise false.
 * @param oldName - The relative path of the file/folder to rename.
 * @param newName - The relative path to rename the file/folder to.
*/
	rename(oldName:String, newName:String):Boolean {
	
	};
	/**
 * @description Removes a directory.
 * @returns true if dirName exists when this function is called, the directory is empty and the sub-directory is successfully removed, otherwise false.
 * @param dirName - The relative path of a sub-directory to remove. If empty (default), this directory's absolute path will be used.
*/
	rmdir(dirName:String):Boolean {
	
	};
	/**
 * @description Deprecated
*/
	rmdirs(dirName:String):Boolean {
	
	};
	/**
 * @description Removes all directories that exist in dirpath, provided that they are empty. This is the opposite of mkpath().
 * @returns true if successful, otherwise false.
 * @param dirpath - The path to remove.
*/
	rmpath(dirPath:String):Boolean {
	
	};
	/**
 * @description Sets the current working directory of the application to be this directory.
 * @returns true if the current working directory was changed, otherwise false.
*/
	setCurrent():Boolean {
	
	};
	/**
 * @description Sets the filter used by entryList() to filters. The filter is used to specify the kind of entries should be returned by entryList().
 * @since 4.9.3.35
*/
	setFilter(filters:Filters):void {
	
	};
	/**
 * @description Sets the name filters used by entryList() to the list of filters specified by nameFilters. Each name filter is a wildcard (globbing) filter that understands * and ? wildcards.
 * @since 4.9.3.35
*/
	setNameFilters(nameFilters:Array):void {
	
	};
	/**
 * @description Sets the path of this directory to newPath.
*/
	setPath(path:String):void {
	
	};
	/**
 * @description Sets the sort order used by entryList(). The sort is specified by OR-ing values from the enum SortFlags.
 * @since 4.9.3.35
*/
	setSorting(sort:SortFlags):void {
	
	};
	/**
 * @returns The value set by setSorting().
 * @since 4.9.3.35
*/
	sorting():SortFlags {
	
	};

}
/**
 * @classdesc TODO:
Add detailed description.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/distantlight_dz} */
class DzDistantLight extends DzLight {
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static Point;
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static Rectangle;
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static Disc;
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static Sphere;
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static Cylinder;
	/**
 * @description Default Constructor. Creates a new distant light.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @returns The diffuse color of the light
*/
	getDiffuseColor():Color {
	
	};
	/**
 * @returns The property that controls the color this light
*/
	getDiffuseColorControl():DzColorProperty {
	
	};
	/**
 * @returns The far clipping plane when viewing from the light in OpenGL
*/
	getFarClippingPlane():Number {
	
	};
	/**
 * @returns The luminous flux of the light.
 * @since 4.8.0.18
*/
	getFlux():Number {
	
	};
	/**
 * @returns The property that controls Illumination for this light
*/
	getIlluminationControl():DzEnumProperty {
	
	};
	/**
 * @returns The current light intensity.
*/
	getIntensity():Number {
	
	};
	/**
 * @returns The property that controls the intensity of this light
*/
	getIntensityControl():DzFloatProperty {
	
	};
	/**
 * @returns The current light intensity scale.
 * @since 4.8.0.18
*/
	getIntensityScale():Number {
	
	};
	/**
 * @returns The property that controls the intensity scale.
 * @since 4.8.0.18
*/
	getIntensityScaleControl():DzFloatProperty {
	
	};
	/**
 * @returns The property that controls the luminous flux of the light.
 * @since 4.8.0.18
*/
	getLightFluxControl():DzFloatProperty {
	
	};
	/**
 * @returns The type of geometry for the light; 0 = Point, 1 = Rectangle, 2 = Disc, 3 = Sphere, 4 = Cylinder.
 * @since 4.8.0.18
*/
	getLightGeometry():void {
	
	};
	/**
 * @returns The property that controls the geometry of the light.
 * @since 4.8.0.18
*/
	getLightGeometryControl():DzEnumProperty {
	
	};
	/**
 * @returns The height of the light (emitter) geometry, as measured in centimeters, in local space.
 * @since 4.8.0.18
*/
	getLightHeight():Number {
	
	};
	/**
 * @returns The property that controls the height of the light.
 * @since 4.8.0.18
*/
	getLightHeightControl():DzFloatProperty {
	
	};
	/**
 * @returns The property that controls whether or not the light represents a light portal.
 * @since 4.9.2.61
*/
	getLightPortalControl():DzBoolProperty {
	
	};
	/**
 * @returns The color temperature of the light, as measured in Kelvin (K).
 * @since 4.12.1.108
*/
	getLightTemperature():Number {
	
	};
	/**
 * @returns The property that controls the temperature of the light.
 * @since 4.8.0.18
*/
	getLightTemperatureControl():DzFloatProperty {
	
	};
	/**
 * @returns true if the light is two-sided (emits light in both directions), otherwise false.
 * @since 4.8.0.18
*/
	getLightTwoSided():Boolean {
	
	};
	/**
 * @returns The property that controls whether the light is two sided.
 * @since 4.8.0.18
*/
	getLightTwoSidedControl():DzBoolProperty {
	
	};
	/**
 * @returns The width of the light (emitter) geometry, as measured in centimeters, in local space.
 * @since 4.8.0.18
*/
	getLightWidth():Number {
	
	};
	/**
 * @returns The property that controls the width (diameter) of the light.
 * @since 4.8.0.18
*/
	getLightWidthControl():DzFloatProperty {
	
	};
	/**
 * @returns The near clipping plane when viewing from the light in OpenGL
*/
	getNearClippingPlane():Number {
	
	};
	/**
 * @returns The property that controls whether the light is in physically-based mode.
 * @since 4.8.0.18
*/
	getPhotometricModeControl():DzBoolProperty {
	
	};
	/**
 * @returns The property that controls whether the emitter is rendered.
 * @since 4.8.0.18
*/
	getRenderEmitterControl():DzBoolProperty {
	
	};
	/**
 * @returns The property that controls the bias for the shadow of this light
*/
	getShadowBiasControl():DzFloatProperty {
	
	};
	/**
 * @returns The property that controls the color this light
*/
	getShadowColorControl():DzColorProperty {
	
	};
	/**
 * @returns The property that controls the shadow intensity of this light
*/
	getShadowIntensityControl():DzFloatProperty {
	
	};
	/**
 * @returns The property that controls the softness for the shadow of this light
*/
	getShadowSoftnessControl():DzFloatProperty {
	
	};
	/**
 * @returns The direction the light is pointing in world-space
*/
	getWSDirection():DzVec3 {
	
	};
	/**
 * @returns true if this light represents a light portal, otherwise false.
 * @since 4.9.2.61
*/
	isLightPortal():Boolean {
	
	};
	/**
 * @returns true if the light is lighting the scene, false if the light has no effect on the scene.
*/
	isOn():Boolean {
	
	};
	/**
 * @returns true if the light is in photometric mode (physically based), otherwise false.
 * @since 4.8.0.18
*/
	photometricMode():Boolean {
	
	};
	/**
 * @returns true if the geometry of the light (emitter) should be rendered, otherwise false.
 * @since 4.8.0.18
*/
	renderEmitter():Boolean {
	
	};

}
/**
 * @classdesc TODO:
Add detailed description.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/dockarea_dz} */
class DzDockArea extends QWidget {
	/**
 * @returns The column at the given index
 * @param which - The index of the column to return.
*/
	getColumn(which:Number):DzDockAreaColumn {
	
	};
	/**
 * @returns The number of columns of docked windows currently being displayed in this dock area.
*/
	getNumColumns():Number {
	
	};

}
/**
 * @classdesc TODO:
Add detailed description.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/dockareacolumn_dz} */
class DzDockAreaColumn extends QWidget {
	/**
 * @returns The current depth of the column. This is the same as width() for Right and Left dock areas, or height() for Top and Bottom dock areas.
*/
	depth():Number {
	
	};
	/**
 * @returns The number of windows docked in this column
*/
	getNumWindows():Number {
	
	};
	/**
 * @returns The preferred depth of the column.
*/
	getPreferredDepth():Number {
	
	};
	/**
 * @returns The docked window at the given index
 * @param which - The index of the window to return.
*/
	getWindow(which:Number):DzDockWindow {
	
	};
	/**
 * @returns true if this column is currently minimized
*/
	isMinimized():Boolean {
	
	};
	/**
 * @description Minimizes the column, if it is not already. The column shrinks so that only its resizing handle is visible.
*/
	minimize():void {
	
	};
	/**
 * @returns The minimum depth of the column.
*/
	minimumDepth():Number {
	
	};
	/**
 * @description Restores the column to its previous depth if the column is currently minimized.
*/
	restore():void {
	
	};
	/**
 * @description Sets the 'depth' of the column.
 * @param depth - The new depth for the column. If depth is less than the minimum depth, the column becomes the minimum depth.
*/
	setPreferredDepth(depth:Number):void {
	
	};
	/**
 * @description Toggles whether this column is minimized - if minimized, the column restores itself, if full size the column becomes minimized.
*/
	toggleMinimized():void {
	
	};

}
/**
 * @classdesc This class provides access to a custom bar in the interface that can be docked with a DzToolBar. This class is not intended to be constructed directly, rather it serves as a base class for other custom dock-able bars.
See Also:
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/dockbar_dz} */
class DzDockBar extends QWidget {
	/**
 * @description Holds whether or not the bar is docked. (Read Only)
	*/
	floating:Boolean;
	/**
 * @description ENUMERATOR: The dock area at the top of a DzActivityLayout.
*/
	
	static ToolBarTop;
	/**
 * @description ENUMERATOR: The dock area at the bottom of a DzActivityLayout.
*/
	
	static ToolBarBottom;
	/**
 * @description ENUMERATOR: The dock area on the left side of a DzActivityLayout.
*/
	
	static ToolBarLeft;
	/**
 * @description ENUMERATOR: The dock area on the right side of a DzActivityLayout.
*/
	
	static ToolBarRight;
	/**
 * @description ENUMERATOR: No dock area. The bar cannot be docked.
*/
	
	static NoToolBarArea;
	/**
 * @description Docks the bar in the specified area of the DzActivityLayout, and shows the bar if it is hidden.
 * @param area - The DockArea to dock the bar to.
 * @param beforeBar - The name of the bar (if any) in the area to dock before.
*/
	dock(area:DzDockBar.DockArea, beforeBar:String):DzDockBar {
	
	};
	/**
 * @returns The dock area that the bar is docked in.
*/
	dockedArea():DockArea {
	
	};
	/**
 * @returns true if the bar is not displayed, false if the bar is displayed.
*/
	isClosed():Boolean {
	
	};
	/**
 * @description Sets whether or not the bar is displayed.
 * @param onOff - If true, the bar is not displayed. If false, the bar is displayed.
*/
	setClosed(onOff:Boolean):void {
	
	};
	/**
 * @description Undocks the bar, moves it to the given global coordinates, and shows the bar if it is hidden.
*/
	undock(pos:Point):void {
	
	};

}
/**
 * @classdesc TODO:
Add detailed description.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/dockwindow_dz} */
class DzDockWindow {
	/**
 * @description Re-Docks this window in the last area it was docked in.
*/
	dock():void {
	
	};
	/**
 * @description Docks this window in the given area.
*/
	dock(area:DzDockArea, newColumn:Boolean):void {
	
	};
	/**
 * @description Docks this window in the given area in the given column number.
*/
	dock(area:DzDockArea, columnNum:Number):void {
	
	};
	/**
 * @returns The area that the window is currently docked in, or the last area it was docked in if it is undocked.
*/
	getArea():DzDockArea {
	
	};
	/**
 * @returns The last width (or height) of the column (or row) that the window is docked in.
*/
	getColumnDimension():Number {
	
	};
	/**
 * @returns The column of the dock area that this window was last docked in.
*/
	getColumnNum():Number {
	
	};
	/**
 * @returns The last undocked size of this window (if any).
*/
	getLastSize():Size {
	
	};
	/**
 * @returns The actual length for this window while docked.
*/
	getLength():Number {
	
	};
	/**
 * @returns The minimum length for this window (if it is not minimized) while docked.
*/
	getMinimumLength():Number {
	
	};
	/**
 * @returns The preferred length for this window while docked.
*/
	getPreferredLength():Number {
	
	};
	/**
 * @returns true if the this window is currently docked, otherwise false.
*/
	isDocked():Boolean {
	
	};
	/**
 * @returns true if the value returned by length() is the only valid length for this window currently, otherwise false.
*/
	isLengthFixed():Boolean {
	
	};
	/**
 * @returns true if the this window is currently minimized, otherwise false.
*/
	isMinimized():Boolean {
	
	};
	/**
 * @description Sets this window to a minimized state.
*/
	minimize():void {
	
	};
	/**
 * @description Returns this window to its former length if it is minimized.
*/
	restore():void {
	
	};
	/**
 * @description Store the width (or height) of the column (or row) that the window is docked in.
 * @param dimension - The width (or height) to set.
*/
	setColumnDimension(dimension:Number):void {
	
	};
	/**
 * @description Sets the column of the dock area that this window was last docked in.
 * @param columnNum - The column number to set.
*/
	setColumnNum(columnNum:Number):void {
	
	};
	/**
 * @description Sets the length for this window while docked.
 * @param length - The new length for the window.
*/
	setLength(length:Number):void {
	
	};
	/**
 * @description Sets the preferred length for this window while docked.
 * @param length - The new preferred length for the window.
*/
	setPreferredLength(length:Number):void {
	
	};
	/**
 * @description Sets the visibility of the resizing handles.
*/
	setResizeHandlesVisible(yesNo:Boolean):void {
	
	};
	/**
 * @description Sets the visibility of the title bar.
*/
	setTitleBarVisible(yesNo:Boolean):void {
	
	};
	/**
 * @description Toggles this window between its docked and undocked state. Calls dock() if this window is undocked, or undock() if it is docked.
*/
	toggleDock():void {
	
	};
	/**
 * @description Toggles this window between the minimized and restored state.
*/
	toggleMinimized():void {
	
	};
	/**
 * @description Undocks this window.
*/
	undock():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when this window is docked.
 * @signature `"docked()"`
 * @event
*/
	docked():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the value returned by length() has changed.
 * @signature `"lengthChanged()"`
 * @event
*/
	lengthChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when this window becomes minimized.
 * @signature `"minimized(DzDockWindow*)"`
 * @event
*/
	minimized(window:DzDockWindow):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description TODO: Add Description
 * @signature `TODO: Add Description`
 * @event
*/
	outlineDrawFinished():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description TODO: Add Description
 * @signature `TODO: Add Description`
 * @event
*/
	outlineDrawStarting():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when this window is restored.
 * @signature `"restored(DzDockWindow*)"`
 * @event
*/
	restored(window:DzDockWindow):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when this window is undocked.
 * @signature `"undocked()"`
 * @event
*/
	undocked():void {
	
	};

}
/**
 * @classdesc A DAZScript wrapper for QDomAttr. This object represents an "Attribute" of a "Element" (DzDomElement) in a DOM document.
Instances of this object are not constructed directly, rather they are returned by calling DzDomDocument.createAttribute(). An easier method of adding or setting an attribute on an element is to call DzDomElement.setAttribute() on the element to which the attribute should be added or set.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/domattr_dz} */
class DzDomAttr extends DzDomNode {
	/**
 * @description The name of the attribute. (Read Only)
	*/
	name:String;
	/**
 * @description The value of the attribute.
	*/
	value:String;
	/**
 * @returns The element that this attribute belongs to.
*/
	ownerElement():DzDomNode {
	
	};
	/**
 * @returns true if the attribute has a value, otherwise false.
*/
	specified():Boolean {
	
	};

}
/**
 * @classdesc This object represents a basic, empty, node in a DOM document tree.
Instances of this object are not constructed directly, rather they are potentially returned by various methods on instances of other DOM and XML Objects if the node they represent is invalid (NULL).
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/dombasicnode_dz} */
class DzDomBasicNode extends DzDomNode {

}
/**
 * @classdesc A DAZScript wrapper for QDomCDATASection. This object represents a "CDATA Section" in a DOM document. CDATA Sections can contain special characters that would otherwise be interpreted as part of the markup language. This provides a way for embedding text that contains special characters without the need for escaping all those characters.
Instances of this object are not constructed directly, rather they are returned by calling DzDomDocument.createCDATASection().
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/domcdatasection_dz} */
class DzDomCDATASection extends DzDomText {

}
/**
 * @classdesc A DAZScript wrapper for QDomCharacterData. This object represents a generic data string in a DOM document. Specialized versions of this object are DzDomText, DzDomComment and DzDomCDATASection.
Instances of this object are not constructed directly, rather instances of the specialized versions of this object are returned by calling DzDomDocument.createTextNode(), DzDomDocument.createComment() or DzDomDocument.createCDATASection().
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/domcharacterdata_dz} */
class DzDomCharacterData extends DzDomNode {
	/**
 * @description Holds the text data for this node.
	*/
	data:String;
	/**
 * @description Holds the length of the data for this node. (Read Only)
	*/
	length:Number;
	/**
 * @description Appends data to the end of the current character data for this node.
 * @param arg - The character data to append.
*/
	appendData(arg:String):void {
	
	};
	/**
 * @description Removes a specified range of character data from this node.
 * @param offset - The position within the data to start deleting from.
 * @param count - The number of characters from offset to delete.
*/
	deleteData(offset:Number, count:Number):void {
	
	};
	/**
 * @description Inserts data into this node at a specified position.
 * @param offset - The position within the data to start inserting arg at.
 * @param arg - The character data to insert.
*/
	insertData(offset:Number, arg:String):void {
	
	};
	/**
 * @description Replaces a specified range of character data in this node.
 * @param offset - The position within the data to start replacing from.
 * @param count - The number of characters from offset to replace.
 * @param arg - The character data to insert.
*/
	replaceData(offset:Number, count:Number, arg:String):void {
	
	};
	/**
 * @returns The specified substring of the this node's data (if any), otherwise an empty string.
 * @param offset - The position within the data to start the substring from.
 * @param count - The number of characters from offset to include in the substring.
*/
	substringData(offset:Number, count:Number):String {
	
	};

}
/**
 * @classdesc A DAZScript wrapper for QDomComment. This object represents a "Comment" in a DOM document.
Instances of this object are not constructed directly, rather they are returned by calling DzDomDocument.createComment().
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/domcomment_dz} */
class DzDomComment extends DzDomCharacterData {

}
/**
 * @classdesc A DAZScript wrapper for QDomDocument. This object represents an entire DOM document. Conceptually, it is the root of the document tree and provides the primary access to the document's data.
Typically, this is the only DOM node that is constructed directly; using the default constructors of the other DOM and XML Objects usually only results in empty objects that cannot be manipulated or inserted into the document.
To populate a document, use loadContent() to cause data to be parsed from an XML (or XML derivative) file, or use setContent() to cause data to be parsed from an XML (or XML derivative) string.
Note that it is also possible to create nodes of the DOM tree from scratch by using the following factory functions:
The parsed XML data is represented by an internal tree of nodes that can be accessed using DOM and XML Objects. The internal objects in the DOM tree are deleted once the last DOM object referencing them and the DzDomDocument itself are deleted.
For more information about the Document Object Model (DOM) see the Level 1 and Level 2 Core specifications.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/domdocument_dz} */
class DzDomDocument extends DzDomNode {
	/**
 * @description Default constructor. Creates an empty DOM document. Typically, this is the only DOM node that is constructed directly.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @returns A new "Attribute" node that is a member of this document.
 * @param name - The name of the "Attribute" to create.
 * @attention The node must still be added as a child of one of the document's element nodes using DzDomElement.setAttributeNode(). An easier way to add attributes to an element is to simply call DzDomElement.setAttribute() on the element node.
*/
	createAttribute(name:String):DzDomAttr {
	
	};
	/**
 * @returns A new "Attribute" node, in the specified namespace, that is a member of this document.
 * @param nsURI - The namespace of the "Attribute" to create.
 * @param qName - The qualified name of the "Attribute" to create.
 * @attention The node must still be added as a child of one of the document's element nodes using DzDomElement.setAttributeNodeNS(). An easier way to add namespaced attributes to an element is to simply call DzDomElement.setAttributeNS() on the element node.
*/
	createAttributeNS(nsURI:String, qName:String):DzDomAttr {
	
	};
	/**
 * @returns A new "Character Data Section" node that is a member of this document.
 * @param value - The string value to store in the document.
 * @attention The node must still be added it as a child of the document or one of its nodes.
*/
	createCDATASection(value:String):DzDomCDATASection {
	
	};
	/**
 * @returns A new "Comment" node that is a member of this document.
 * @param value - The text of the comment.
 * @attention The node must still be added it as a child of the document or one of its nodes.
*/
	createComment(value:String):DzDomComment {
	
	};
	/**
 * @returns A new "Document Fragment" node that is a member of this document.
 * @attention The node must still be added it as a child of the document or one of its nodes.
*/
	createDocumentFragment():DzDomDocumentFragment {
	
	};
	/**
 * @returns A new "Element" node that is a member of this document.
 * @param tagName - The name of the "Element" node to create.
 * @attention The node must still be added it as a child of the document or one of its nodes.
*/
	createElement(tagName:String):DzDomElement {
	
	};
	/**
 * @returns A new "Element" node, in the specified namespace, that is a member of this document.
 * @param nsURI - The namespace of the "Element" to create.
 * @param qName - The qualified name of the "Element" to create.
 * @attention The node must still be added it as a child of the document or one of its nodes.
*/
	createElementNS(nsURI:String, qName:String):DzDomElement {
	
	};
	/**
 * @returns A new "Entity Reference" node that is a member of this document.
 * @param name - The name of the "Entity Reference" to create.
 * @attention The node must still be added it as a child of the document or one of its nodes.
*/
	createEntityReference(name:String):DzDomEntityReference {
	
	};
	/**
 * @returns A new "Processing Instruction" node that is a member of this document.
 * @param target - The target of the processing instruction.
 * @param data - The data to be processed.
 * @attention The node must still be added it as a child of the document or one of its nodes.
*/
	createProcessingInstruction(target:String, data:String):DzDomProcessingInstruction {
	
	};
	/**
 * @returns A new "Text" node that is a member of this document.
 * @param value - The text to store in the node.
 * @attention The node must still be added it as a child of the document or one of its nodes.
*/
	createTextNode(value:String):DzDomText {
	
	};
	/**
 * @returns A DzDomDocumentType for this document.
*/
	doctype():DzDomDocumentType {
	
	};
	/**
 * @returns A DzDomElement with the specified ID (if any), otherwise a DzDomBasicNode.
 * @param elementId - The ID of the element to retrieve.
*/
	elementById(id:String):DzDomNode {
	
	};
	/**
 * @returns A new node that is a member of this document that is a (deep) copy of the specified node.
 * @param node - The node to import.
 * @param deep - If true, node and all of its children are imported recursively. If false, only node is imported.
 * @attention The node must still be added it as a child of the document or one of its nodes.
*/
	importNode(node:DzDomNode, deep:Boolean):DzDomNode {
	
	};
	/**
 * @description Sets the contents of the document by parsing the file at the specified path.
 * @returns true if the file was successfully parsed, otherwise false.
 * @param filename - The (absolute) path of the file to load.
*/
	loadContent(filename:String):Boolean {
	
	};
	/**
 * @description Saves the contents of the document to the specified file.
 * @returns true if the file was successfully saved, otherwise false.
 * @param filename - The (absolute) path of the file to save.
*/
	saveContent(filename:String):Boolean {
	
	};
	/**
 * @description Sets the contents of this document from the specified string.
 * @returns true if the string was successfully parsed, otherwise false.
 * @param text - The XML document, in string form, to set the contents of this document to; assumed to be a Unicode string, no encoding detection is performed.
*/
	setContent(text:String):Boolean {
	
	};
	/**
 * @returns The contents of this document in its textual representation as a byte array, encoded as UTF-8.
 * @since 4.11.0.155
 * @param indent - The amount of space to indent sub-elements.
*/
	toByteArray(indent:Number):ByteArray {
	
	};
	/**
 * @returns The contents of the document in its textual representation.
 * @param indent - The amount of space to indent sub-elements. (since 4.11.0.155)
*/
	toString(indent:Number):String {
	
	};

}
/**
 * @classdesc A DAZScript wrapper for QDomDocumentFragment. This object represents a tree of DzDomNode objects which are not usually a complete DzDomDocument.
Instances of this object are not constructed directly, rather they are returned by calling DzDomDocument.createDocumentFragment().
The most important feature of this object is the way it is treated by DzDomNode.insertAfter(), DzDomNode.insertBefore(), DzDomNode.replaceChild() and DzDomNode.appendChild(); instead of inserting the fragment itself, all of the fragment's children are inserted.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/domdocumentfragment_dz} */
class DzDomDocumentFragment extends DzDomNode {

}
/**
 * @classdesc A DAZScript wrapper for QDomDocumentType. This object represents a "Document Type" node in a DOM document tree.
Instances of this object are not constructed directly, rather they are retrieved from a DOM document by calling DzDomDocument.doctype().
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/domdocumenttype_dz} */
class DzDomDocumentType extends DzDomNode {
	/**
 * @description Holds the internal subset of the document type. (Read Only)
	*/
	internalSubset:String;
	/**
 * @description Holds the name of this node; as specified in the !DOCTYPE tag. (Read Only)
	*/
	name:String;
	/**
 * @description Holds the public identifier of the external Document Type Definition (DTD) subset. (Read Only)
	*/
	publicId:String;
	/**
 * @description Holds the system identifier of the external Document Type Definition (DTD) subset. (Read Only)
	*/
	systemId:String;

}
/**
 * @classdesc A DAZScript wrapper for QDomElement. This object represents an "Element" in a DOM document.
Instances of this object are not constructed directly, rather they are returned by calling DzDomDocument.createElement().
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/domelement_dz} */
class DzDomElement extends DzDomNode {
	/**
 * @description Holds the tag name of this element.
	*/
	tagName:String;
	/**
 * @returns The value of the attribute with the specified name (if any), otherwise the value specified by defValue.
 * @param name - The name of the attribute to retrieve the value of.
 * @param defValue - The default value if the specified attribute does not already exist.
*/
	attribute(name:String, defValue:String):String {
	
	};
	/**
 * @returns The node that represents the name attribute (if any), otherwise a DzDomBasicNode.
 * @param name - The name of the attribute on this element to retrieve a node for.
*/
	attributeNode(name:String):DzDomNode {
	
	};
	/**
 * @returns The node that represents the attribute (if any) in the specified namespace, with the specified name, otherwise a DzDomBasicNode.
 * @param nsURI - The namespace of the attribute to retrieve the value of.
 * @param localName - The name of the attribute to retrieve the value of.
*/
	attributeNodeNS(nsURI:String, localName:String):DzDomNode {
	
	};
	/**
 * @returns The value of the attribute (if any) in the specified namespace, with the specified name, otherwise the value specified by defValue.
 * @param nsURI - The namespace of the attribute to retrieve the value of.
 * @param localName - The name of the attribute to retrieve the value of.
 * @param defValue - The default value if the specified attribute does not already exist.
*/
	attributeNS(nsURI:String, localName:String, defValue:String):String {
	
	};
	/**
 * @returns An Object where the attributes of this node are represented as its properties (keys) and their values correspond to the attribute values.
 * @since 4.11.0.279
*/
	attributes():Object {
	
	};
	/**
 * @returns A list of descendant elements named tagName (if any), in the order they were encountered.
 * @since 4.11.0.279
 * @param tagName - The name of descendant elements to retrieve.
*/
	elementsByTagName(tagName:String):Array {
	
	};
	/**
 * @returns A list of descendant elements (if any), in the specified namespace, with the specified name, in the order they were encountered.
 * @since 4.11.0.279
 * @param nsURI - The namespace of descendant elements to retrieve.
 * @param localName - The name of descendant elements to retrieve.
*/
	elementsByTagNameNS(nsURI:String, localName:String):Array {
	
	};
	/**
 * @returns true if the element has an attribute with the specified name, otherwise false.
 * @param name - The name of the attribute to check.
*/
	hasAttribute(name:String):Boolean {
	
	};
	/**
 * @returns true if the element has an attribute, in the specified namespace, with the specified name, otherwise false.
 * @param nsURI - The namespace of the attribute to check.
 * @param localName - The name of the attribute to check.
*/
	hasAttributeNS(nsURI:String, localName:String):Boolean {
	
	};
	/**
 * @description Removes an attribute from this element.
 * @param name - The name of the attribute to remove.
*/
	removeAttribute(name:String):void {
	
	};
	/**
 * @description Removes an attribute from this element.
 * @returns The attribute that was removed (if any), otherwise a DzDomBasicNode.
 * @param attr - The node for the attribute to remove.
*/
	removeAttributeNode(attr:DzDomAttr):DzDomNode {
	
	};
	/**
 * @description Removes an attribute, in the specified namespace, from this element.
 * @param nsURI - The namespace of the attribute to remove.
 * @param localName - The name of the attribute to remove.
*/
	removeAttributeNS(nsURI:String, localName:String):void {
	
	};
	/**
 * @description Sets (or adds) an attribute with the specified name/value on this element.
 * @param name - The name of the attribute to set.
 * @param value - The value to set the attribute to.
*/
	setAttribute(name:String, value:String):void {
	
	};
	/**
 * @description Sets (or adds) an attribute to this element using a DzDomAttr node.
 * @returns The node for the attribute that was replaced by attr. If no attribute was replaced, a DzDomBasicNode is returned.
 * @param attr - The node to set/add the attribute with.
*/
	setAttributeNode(attr:DzDomAttr):DzDomNode {
	
	};
	/**
 * @description Sets (or adds) an attribute to this element using a DzDomAttr node.
 * @returns The node for the attribute that was replaced (if any) by attr, otherwise a DzDomBasicNode.
 * @param attr - The node to set/add the attribute with.
*/
	setAttributeNodeNS(attr:DzDomAttr):DzDomNode {
	
	};
	/**
 * @description Sets (or adds) an attribute with the specified name/value, in the specified namespace, on this element.
 * @param nsURI - The namespace of the attribute to set.
 * @param qName - The qualified name of the attribute to set.
 * @param value - The value to set the attribute to.
*/
	setAttributeNS(nsURI:String, qName:String, value:String):void {
	
	};

}
/**
 * @classdesc A DAZScript wrapper for QDomEntity. This object represents an "Entity" in a DOM document.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/domentity_dz} */
class DzDomEntity extends DzDomNode {
	/**
 * @description Holds the name of the notation for the entity. (Read Only)
	*/
	notationName:String;
	/**
 * @description Holds the public identifier of the entity. (Read Only)
	*/
	publicId:String;
	/**
 * @description Holds the system identifier of the entity. (Read Only)
	*/
	systemId:String;

}
/**
 * @classdesc A DAZScript wrapper for QDomEntityReference. This object represents an "Entity Reference" in a DOM document.
Instances of this object are not constructed directly, rather they are returned by calling DzDomDocument.createEntityReference().
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/domentityreference_dz} */
class DzDomEntityReference extends DzDomNode {

}
/**
 * @classdesc A DAZScript wrapper for QDomNode. This is an abstract base class that provides general functionality for Document Object Model (DOM) nodes.
For more information about the Document Object Model (DOM) see the Level 1 and Level 2 Core specifications.
For a more general introduction of the DOM implementation see the DzDomDocument documentation.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/domnode_dz} */
class DzDomNode extends QObject {
	/**
 * @description Holds the local name of this node, if the node uses namespaces; only DzDomElement or DzDomAttr nodes can have namespaces; a namespace must have be specified at creation time - it is not possible to add a namespace post-creation.. (Read Only)
	*/
	localName:String;
	/**
 * @description Holds the namespace URI of this node. (Read Only)
	*/
	namespaceURI:String;
	/**
 * @description Holds the name of this node - the meaning of which depends on nodeType : (Read Only)  * for AttributeNode - the name of the attribute
	*/
	nodeName:String;
	/**
 * @description Holds the type of this node. (Read Only)
	*/
	nodeType:NodeType;
	/**
 * @description Holds the value of this node - the meaning of which depends on nodeType :  * for AttributeNode - the attribute value
	*/
	nodeValue:String;
	/**
 * @description Holds the namespace prefix of this node; only DzDomElement or DzDomAttr nodes can have namespaces; a namespace prefix must have be specified at creation time - it is not possible to add a namespace post-creation.
	*/
	prefix:String;
	/**
 * @description ENUMERATOR: A DzDomElement
*/
	
	static ElementNode;
	/**
 * @description ENUMERATOR: A DzDomAttr
*/
	
	static AttributeNode;
	/**
 * @description ENUMERATOR: A DzDomText
*/
	
	static TextNode;
	/**
 * @description ENUMERATOR: A DzDomCDATASection
*/
	
	static CDATASectionNode;
	/**
 * @description ENUMERATOR: A DzDomEntityReference
*/
	
	static EntityReferenceNode;
	/**
 * @description ENUMERATOR: A DzDomEntity
*/
	
	static EntityNode;
	/**
 * @description ENUMERATOR: A DzDomProcessingInstruction
*/
	
	static ProcessingInstructionNode;
	/**
 * @description ENUMERATOR: A DzDomComment
*/
	
	static CommentNode;
	/**
 * @description ENUMERATOR: A DzDomDocument
*/
	
	static DocumentNode;
	/**
 * @description ENUMERATOR: A DzDomDocumentType
*/
	
	static DocumentTypeNode;
	/**
 * @description ENUMERATOR: A DzDomDocumentFragment
*/
	
	static DocumentFragmentNode;
	/**
 * @description ENUMERATOR: A DzDomNotation
*/
	
	static NotationNode;
	/**
 * @description ENUMERATOR: A DzDomBasicNode
*/
	
	static BaseNode;
	/**
 * @description ENUMERATOR: A DzDomCharacterData
*/
	
	static CharacterDataNode;
	/**
 * @description Appends a node in the DOM to the end of this node's child list.
 * @param child - The node in the DOM to append.
*/
	appendChild(child:DzDomNode):DzDomNode {
	
	};
	/**
 * @returns A list of the direct node children of this node (if any).
 * @since 4.11.0.279
*/
	childNodes():Array {
	
	};
	/**
 * @description Converts the node into a DzDomBasicNode. Its type and contents are cleared.
*/
	clear():Boolean {
	
	};
	/**
 * @returns A new node in the DOM that is a (deep) copy of this node.
 * @param deep - If true (default), the return value will be a recursive copy this node and all of its children.
*/
	cloneNode(deep:Boolean):DzDomNode {
	
	};
	/**
 * @returns The column number in the DOM document where the node was parsed.
 * @since 4.11.0.279
*/
	columnNumber():Number {
	
	};
	/**
 * @returns This node's first child node (if any), otherwise a DzDomBasicNode.
*/
	firstChild():DzDomNode {
	
	};
	/**
 * @returns If tagName is non-empty, the first child DzDomElement of this node with a matching name (if any), otherwise the first child DzDomElement (if any), otherwise a DzDomBasicNode. If tagName is empty, the first child DzDomElement (if any), otherwise a DzDomBasicNode.
 * @since 4.11.0.279
 * @param tagName - The name of the child node to retrieve.
*/
	firstChildElement(tagName:String):DzDomNode {
	
	};
	/**
 * @returns true if the node has attributes, otherwise false.
*/
	hasAttributes():Boolean {
	
	};
	/**
 * @returns true if this node has children, otherwise false.
*/
	hasChildNodes():Boolean {
	
	};
	/**
 * @description Inserts a node in the DOM into this node's child list after another node.
 * @param newChild - The node in the DOM to insert.
 * @param refChild - The node in the DOM to insert after.
*/
	insertAfter(newChild:DzDomNode, refChild:DzDomNode):DzDomNode {
	
	};
	/**
 * @description Inserts a node in the DOM into this node's child list in front of another node.
 * @param newChild - The node in the DOM to insert.
 * @param refChild - The node in the DOM to insert before.
*/
	insertBefore(newChild:DzDomNode, refChild:DzDomNode):DzDomNode {
	
	};
	/**
 * @returns true if this node is an attribute, otherwise false.
*/
	isAttr():Boolean {
	
	};
	/**
 * @returns true if this node is a CDATA section, otherwise false.
*/
	isCDATASection():Boolean {
	
	};
	/**
 * @returns true if this node is a character data, otherwise false.
*/
	isCharacterData():Boolean {
	
	};
	/**
 * @returns true if this node is a comment, otherwise false.
*/
	isComment():Boolean {
	
	};
	/**
 * @returns true if this node is a document, otherwise false.
*/
	isDocument():Boolean {
	
	};
	/**
 * @returns true if this node is a document fragment, otherwise false.
*/
	isDocumentFragment():Boolean {
	
	};
	/**
 * @returns true if this node is a document type, otherwise false.
*/
	isDocumentType():Boolean {
	
	};
	/**
 * @returns true if this node is an element, otherwise false.
*/
	isElement():Boolean {
	
	};
	/**
 * @returns true if this node is an entity, otherwise false.
*/
	isEntity():Boolean {
	
	};
	/**
 * @returns true if this node is an entity reference, otherwise false.
*/
	isEntityReference():Boolean {
	
	};
	/**
 * @returns true if this node is a notation, otherwise false.
*/
	isNotation():Boolean {
	
	};
	/**
 * @returns true if this node is invalid (Null), otherwise false.
*/
	isNull():Boolean {
	
	};
	/**
 * @returns true if this node is a processing instruction, otherwise false.
*/
	isProcessingInstruction():Boolean {
	
	};
	/**
 * @returns true if the DOM implementation supports the specified feature in the specified version, otherwise false.
 * @param feature - The feature to check.
 * @param version - The version to check.
*/
	isSupported(feature:String, version:String):Boolean {
	
	};
	/**
 * @returns true if this node is text, otherwise false.
*/
	isText():Boolean {
	
	};
	/**
 * @returns This node's last child node (if any), otherwise a DzDomBasicNode.
*/
	lastChild():DzDomNode {
	
	};
	/**
 * @returns If tagName is non-empty, the last child DzDomElement of this node with a matching name (if any), otherwise the last child DzDomElement (if any), otherwise a DzDomBasicNode. If tagName is empty, the last child DzDomElement (if any), otherwise a DzDomBasicNode.
 * @since 4.11.0.279
 * @param tagName - The name of the child node to retrieve.
*/
	lastChildElement(tagName:String):DzDomNode {
	
	};
	/**
 * @returns The line number in the DOM document where the node was parsed.
 * @since 4.11.0.279
*/
	lineNumber():Number {
	
	};
	/**
 * @returns The first direct child node with a matching name (if any), otherwise a DzDomBasicNode.
 * @param name - The name of the child node to retrieve.
*/
	namedItem(name:String):DzDomNode {
	
	};
	/**
 * @returns This node's next sibling node (if any), otherwise a DzDomBasicNode.
*/
	nextSibling():DzDomNode {
	
	};
	/**
 * @returns If tagName is non-empty, the next sibling DzDomElement of this node with a matching name (if any), otherwise any next sibling DzDomElement (if any), otherwise a DzDomBasicNode. If tagName is empty, the next sibling DzDomElement (if any), otherwise a DzDomBasicNode.
 * @since 4.11.0.279
 * @param tagName - The name of the sibling node to retrieve.
*/
	nextSiblingElement(tagName:String):DzDomNode {
	
	};
	/**
 * @description Converts all of this node's children into standard form (e.g. adjacent text nodes will be merged).
*/
	normalize():void {
	
	};
	/**
 * @returns The document that this node belongs to.
*/
	ownerDocument():DzDomNode {
	
	};
	/**
 * @returns This node's parent node (if any), otherwise a DzDomBasicNode.
*/
	parentNode():DzDomNode {
	
	};
	/**
 * @returns This node's previous sibling node (if any), otherwise a DzDomBasicNode.
*/
	previousSibling():DzDomNode {
	
	};
	/**
 * @returns If tagName is non-empty, the previous sibling DzDomElement of this node with a matching name (if any), otherwise any previous sibling DzDomElement (if any), otherwise a DzDomBasicNode. If tagName is empty, the previous sibling DzDomElement (if any), otherwise a DzDomBasicNode.
 * @since 4.11.0.279
 * @param tagName - The name of the sibling node to retrieve.
*/
	previousSiblingElement(tagName:String):DzDomNode {
	
	};
	/**
 * @description Removes a node in the DOM from this node's child list.
 * @param oldChild - The node in the DOM to replace.
*/
	removeChild(oldChild:DzDomNode):DzDomNode {
	
	};
	/**
 * @description Inserts a node in the DOM into this node's child list in place of another node.
 * @param newChild - The node in the DOM to insert.
 * @param oldChild - The node in the DOM to replace.
*/
	replaceChild(newChild:DzDomNode, oldChild:DzDomNode):DzDomNode {
	
	};

}
/**
 * @classdesc A DAZScript wrapper for QDomNotation. This object represents a "Notation" in a DOM document.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/domnotation_dz} */
class DzDomNotation extends DzDomNode {
	/**
 * @description Holds the public identifier of the notation. (Read Only)
	*/
	publicId:String;
	/**
 * @description Holds the system identifier of the notation. (Read Only)
	*/
	systemId:String;

}
/**
 * @classdesc A DAZScript wrapper for QDomProcessingInstruction. This object represents a "Processing Instruction" in a DOM document.
Instances of this object are not constructed directly, rather they are returned by calling DzDomDocument.createProcessingInstruction().
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/domprocessinginstruction_dz} */
class DzDomProcessingInstruction extends DzDomNode {
	/**
 * @description Holds the data of the processing instruction.
	*/
	data:String;
	/**
 * @description Holds the target of the processing instruction. (Read Only)
	*/
	target:String;

}
/**
 * @classdesc A DAZScript wrapper for QDomText. This object represents "Text" data in a DOM document.
Instances of this object are not constructed directly, rather they are returned by calling DzDomDocument.createTextNode().
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/domtext_dz} */
class DzDomText extends DzDomCharacterData {
	/**
 * @description Splits this text node into two text nodes. This node keeps the first part of the split and the remaining characters are inserted into the document tree as another DzDomText object, after this object.
 * @returns The newly created DzDomText object with the characters in the latter part of the split (if any), otherwise a DzDomBasicNode.
 * @param offset - The position within this node's text to split at.
*/
	splitText(offset:Number):DzDomNode {
	
	};

}
/**
 * @classdesc TODO:
Add detailed description.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/drawstyle_dz} */
class DzDrawStyle extends DzRefCountedItem, DzBase {
	/**
 * @description Whether or not visual cues (such as bounding boxes for selected nodes) should be drawn when appropriate.
	*/
	drawCuesDefault:Boolean;
	/**
 * @description Whether or not only objects should be drawn.
	*/
	drawObjectsOnly:Boolean;
	/**
 * @description Whether or not only shadow casters should be drawn.
	*/
	drawShadowCastersOnly:Boolean;
	/**
 * @description Whether or not the style is a user style (Read Only).
	*/
	isUserStyle:Boolean;
	/**
 * @description Whether or not the draw is render quality.
	*/
	renderQuality:Boolean;
	/**
 * @description ENUMERATOR: Draws unlit wire-frame bounding boxes.
*/
	
	static WireBox;
	/**
 * @description ENUMERATOR: Draws smooth-shaded bounding boxes.
*/
	
	static SolidBox;
	/**
 * @description ENUMERATOR: Draws unlit wire-frames.
*/
	
	static Wireframe;
	/**
 * @description ENUMERATOR: Draws lit wire-frames.
*/
	
	static LitWireframe;
	/**
 * @description ENUMERATOR: Draws unlit wire-frames, front geometry facing only.
*/
	
	static HiddenLine;
	/**
 * @description ENUMERATOR: Draws lit smooth shaded objects with wireframes imposed.
*/
	
	static WireShaded;
	/**
 * @description ENUMERATOR: Draws lit smooth shaded objects.
*/
	
	static SmoothShaded;
	/**
 * @description ENUMERATOR: Draws lit smooth shaded objects with any texture/transparency maps applied and wireframes imposed.
*/
	
	static WireTextured;
	/**
 * @description ENUMERATOR: Draws lit smooth shaded objects with any texture/transparency maps applied.
*/
	
	static Textured;
	/**
 * @description ENUMERATOR: Draws lit smooth shaded objects with a GLSL shader applied.
*/
	
	static GLSLShader;
	/**
 * @description ENUMERATOR: Draws unlit smooth shaded objects.
*/
	
	static Unshaded;
	/**
 * @description ENUMERATOR: Special mode for using OpenGL to determine a selected object when the user clicks in the view.
*/
	
	static Picking;
	/**
 * @returns true if visual cues (such as bounding boxes for selected nodes) should be drawn for the current drawing operation, false if visual cues should not be drawn.
*/
	drawCues():Boolean {
	
	};
	/**
 * @description If the current shade style is not using lighting, this method will set the shade style to the nearest match that uses single-pass drawing and lighting.
*/
	forceUseLighting():void {
	
	};
	/**
 * @returns The current pass number; a second pass is drawn for the hidden line and wire shaded styles.
*/
	pass():Number {
	
	};
	/**
 * @returns true if regions are enabled, false if regions are disabled.
 * @attention This is only valid for node picking draw operations.
*/
	regionsEnabled():Boolean {
	
	};
	/**
 * @returns true if selection maps are enabled, false if selection maps are disabled.
 * @attention This is only valid for node picking draw operations.
*/
	selectionMapsEnabled():Boolean {
	
	};
	/**
 * @returns The scene shader for this draw operation (if any), otherwise NULL.
*/
	shader():DzSceneshader {
	
	};
	/**
 * @returns The shading style for the current drawing operation.
*/
	shadeStyle():ShadeStyle {
	
	};

}
/**
 * @classdesc A Dynamic Divider takes two DzWidget objects and places a divider bar between them. It handles resize events, as well as toggling of the divider bar if toggling is enabled.
For complex arrangements you can nest instances of this class by specifying them as one of the widgets via setFirstWidget( DzWidget ) or setSecondWidget( DzWidget )
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/dynamicdividerwgt_dz} */
class DzDynamicDividerWgt extends DzWidget {
	/**
 * @description Holds the actual position of the divider bar as a percentage in decimal format (0.5 = 50%).
	*/
	actualDividerPercent:Number;
	/**
 * @description Holds the orientation of the divider bar.
	*/
	dividerOrientation:DividerOrientation;
	/**
 * @description Holds the type of divider bar used.
	*/
	dividerType:BarStyle;
	/**
 * @description Holds the margin surrounding this object.
	*/
	margin:Number;
	/**
 * @description Holds whether or not the divider bar is currently minimized.
	*/
	minimized:Boolean;
	/**
 * @description Holds whether or not the divider bar can be moved by dragging.
	*/
	moveDisabled:Boolean;
	/**
 * @description Holds the preferred position of the divider bar as a percentage in decimal format (0.5 = 50%).
	*/
	preferredDividerPercent:Number;
	/**
 * @description Holds the preferred widget type.
	*/
	preferredWidget:WidgetType;
	/**
 * @description Holds the preferred extent of the widget. This value is only used if the value of DzDynamicDividerWgt.preferredWidget is not DzDividerBar.WTNone.
	*/
	preferredWidgetExtent:Number;
	/**
 * @description Holds the spacing between the widgets and the divider bar.
	*/
	spacing:Number;
	/**
 * @description Holds the direction the toggle bar will be minimized when clicked.
	*/
	toggleDirection:WidgetType;
	/**
 * @description Holds whether or not the divider bar can be minimized when clicked.
	*/
	toggleEnabled:Boolean;
	/**
 * @description ENUMERATOR: Use the thick divider bar.
*/
	
	static BSFull;
	/**
 * @description ENUMERATOR: Use the medium sized divider bar.
*/
	
	static BSSemi;
	/**
 * @description ENUMERATOR: Use the thin divider bar.
*/
	
	static BSThin;
	/**
 * @description ENUMERATOR: Represents a horizontal divider bar (widgets are top and bottom).
*/
	
	static DOHorizontal;
	/**
 * @description ENUMERATOR: Represents a vertical divider bar (widgets are left and right).
*/
	
	static DOVertical;
	/**
 * @description ENUMERATOR: Stretch the left (or top) widget when resizing.
*/
	
	static RTStretchFirst;
	/**
 * @description ENUMERATOR: Stretch the right (or bottom) widget when resizing.
*/
	
	static RTStretchSecond;
	/**
 * @description ENUMERATOR: Stretch both widgets equally when resizing.
*/
	
	static RTStretchBoth;
	/**
 * @description ENUMERATOR: References the widget to the left of the divider if the orientation is vertical or the widget to the top of the divider if the orientation is horizontal.
*/
	
	static WTLeftOrTop;
	/**
 * @description ENUMERATOR: References the widget to the right of the divider if the orientation is vertical or the widget to the bottom of the divider if the orientation is horizontal.
*/
	
	static WTRightOrBottom;
	/**
 * @description ENUMERATOR: References both widgets of the divider bar.
*/
	
	static WTBoth;
	/**
 * @description ENUMERATOR: References neither widget of the divider bar.
*/
	
	static WTNone;
	/**
 * @description Instantiates DzDynamicDividerWgt.
 * @param parent - The parent of this object (should not be undefined).
 * @attention : This constructor creates an instance of this object in an undefined state until both setFirstWidget( DzWidget ) and setSecondWidget( DzWidget ) are called.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Instantiates DzDynamicDividerWgt.
 * @param parent - The parent of this object (should not be undefined).
 * @param firstChild - The left (or top) widget (should not be undefined).
 * @param secondChild - The right (or bottom) widget (should not be undefined).
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Moves the divider distance pixels from the current location. If the new location will cause the divider to be displayed in an invalid location (based on minimum size requirements of the widgets), it will be moved and displayed as close as possible to the desired location.
 * @param distance - The distance in pixels from the current location.
*/
	moveDivider(distance:Number):void {
	
	};
	/**
 * @description Sets the divider bar to be used for this object
 * @param orientation - The orientation of the divider bar.
 * @param type - The type of divider bar to be used.
*/
	setDividerBar(orientation:DividerOrientation, barStyle:BarStyle):void {
	
	};
	/**
 * @description Sets the left (or top) widget, depending on the orientation.
 * @param first - The widget to be used in the left (or top) position. (should not be undefined)
*/
	setFirstWidget(first:DzWidget):void {
	
	};
	/**
 * @description Sets the preferred extent (width or height depending on orientation) for the specified widget. If this extent cannot be used (usually due to minimum size constraints) then the divider will be positioned as close as possible to the preferred extent.
 * @since 4.9.0.33
 * @param widget - The widget that should be sized. Values other than WTLeftOrTop or WTRightOrBottom will cause this method to have no effect.
 * @param extent - The extent to be set for the widget.
*/
	setPreferredWidgetExtent(widget:WidgetType, extent:Number):void {
	
	};
	/**
 * @description Sets the right (or bottom) widget, depending on the orientation.
 * @param second - The widget to be used in the right (or bottom) position. (should not be undefined)
*/
	setSecondWidget(second:DzWidget):void {
	
	};
	/**
 * @description Toggles the widget to the specified minimized state, if needed.
 * @since 4.9.0.33
 * @param minimized - Whether the divider should be minimized or not.
*/
	setToggleState(minimized:Boolean):void {
	
	};
	/**
 * @description Swaps the left (or top) and right (or bottom) widget.
 * @since 4.9.0.33
*/
	swapFirstAndSecondWidgets():void {
	
	};
	/**
 * @description Toggles the widget in the direction specified by toggleDirection. If toggling is disabled, this method has no effect. If either the first or second widget is undefined, this method will also have no effect.
*/
	toggleWidget():void {
	
	};

}
/**
 * @classdesc 
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/edge_dz} */
class DzEdge extends Object {
	/**
 * @description Holds the offset from the cage.
	*/
	cageOffsetA:Number;
	/**
 * @description Holds the index of a DzFacet this edge belongs to.
	*/
	facetA:Number;
	/**
 * @description Holds the index of the other DzFacet this edge belongs to (if any), otherwise this is an open edge.
	*/
	facetB:Number;
	/**
 * @description Holds the index of this edge.
	*/
	index:Number;
	/**
 * @description Holds the offset …
	*/
	offsetA:Number;
	/**
 * @description Holds the offset …
	*/
	offsetB:Number;
	/**
 * @description Holds the index of the vertex this edge originates at.
	*/
	vertIdx1:Number;
	/**
 * @description Holds the index of the vertex this edge ends at.
	*/
	vertIdx2:Number;
	/**
 * @description Default Constructor.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Creates an edge by parsing a string.
 * @param edge - A string representation of the edge in the form "[ vertIdx1, vertIdx2, facetA, facetB, offsetA, offsetB, index ]"
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Constructor. Creates an edge for the given vertex indices.
 * @param vertex1 - The index of the vertex this edge originates at.
 * @param vertex2 - The index of the vertex this edge ends at.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Copy Constructor. Creates an edge that is a copy of the given edge.
 * @param edge - The edge to copy.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @returns true if this is an open edge, otherwise false.
*/
	isOpenEdge():Boolean {
	
	};
	/**
 * @returns A string representation of this edge in the form "[ vertIdx1, vertIdx2, facetA, facetB, offsetA, offsetB, index ]".
*/
	toString():String {
	
	};

}
/**
 * @classdesc Classes derived from DzElement may have any number of properties (objects derived from DzProperty). Those properties may be added and removed at runtime and may be specified as animatable or not. There are several types of properties that have been supplied with the Studio SDK. Property names must be unique within an element. A variety of methods are provided to allow easy traversal and/or searching of the properties list for an object.
Methods are provided to clear animation data on all properties of an object either over a range of time, or over all time.
DzElement takes ownership of all properties added via addProperty() and/or addPrivateProperty(). Subclasses should not attempt to delete properties that have been added to the element.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/element_dz} */
class DzElement extends DzBase {
	/**
 * @description Holds the number used to uniquely identify this element in the scene. (Read Only)
	*/
	elementID:Number;
	/**
 * @description ENUMERATOR: Editing the name of this element, and any of its constituent parts, is not intended to be exposed to the user.
*/
	
	static NoNameEdit;
	/**
 * @description ENUMERATOR: The name of the element is intended to be exposed to the user for editing.
*/
	
	static ElementNameEdit;
	/**
 * @description ENUMERATOR: The names of individual properties are intended to be exposed to the user for editing.
*/
	
	static PropertyNameEdit;
	/**
 * @description Hang a new custom data item off of this element. Data items will be deleted when this element is deleted, so ownership of the data item is transferred to the element after this call. Do not attempt to delete the data item yourself unless you call removeDataItem() first.
 * @returns DZ_NO_ERROR on success, otherwise an appropriate error code.
 * @param item - The data item to attach to this element.
*/
	addDataItem(item:DzElementData):DzError {
	
	};
	/**
 * @description Adds a new private property to this element that will be available for connections or direct editing.
 * @returns DZ_NO_ERROR on success, otherwise an appropriate error code.
 * @param prop - The property to add to the element.
*/
	addPrivateProperty(prop:DzProperty):DzError {
	
	};
	/**
 * @description Adds a new property to this element that will be available for connections or direct editing.
 * @returns DZ_NO_ERROR on success, otherwise an appropriate error code.
 * @param prop - The property to add to the element.
*/
	addProperty(prop:DzProperty):DzError {
	
	};
	/**
 * @description Begins an editing operation for this element - DzProperty.beginEdit() will be called for all properties belonging to this element.
*/
	beginEdit():void {
	
	};
	/**
 * @description Cancels an editing operation for this element - DzProperty.cancelEdit() will be called for all properties belonging to this element.
*/
	cancelEdit():void {
	
	};
	/**
 * @description Removes all animation keys set on the properties of this element.
*/
	clearAllAnimData():void {
	
	};
	/**
 * @description Clears animation keys in the currently active animation layer. Removes animation data on all animatible properties owned by this element over the given range.
 * @param range - The range of time over which keys will be removed.
*/
	clearAnimData(range:DzTimeRange):void {
	
	};
	/**
 * @description Matches the properties on this element to properties on the given element by name, and then copies the values of matching properties on source to the properties on this element.
 * @param source - The element that this element should copy property values from.
*/
	copyFrom(source:DzElement):void {
	
	};
	/**
 * @description Copies the property values of the element to a 'clipboard' so that they may be saved and applied (copied) to another element - or to the same element.
 * @returns The 'clipboard' which holds a copy of the current element's property values. These values are a snapshot of the current state of the element, and will remain unchanged even if the element is changed or deleted. The caller is responsible for deleting this element.
 * @param contentTypes - A list of the contentTypes that should be included in the copy. An empty list will copy all property values.
*/
	copyToClipboard(contentTypes:Array):DzElementclipboard {
	
	};
	/**
 * @description Remove the the data item from this element and deletes it. Pointer is invalid after this call if DZ_NO_ERROR is returned.
 * @returns DZ_NO_ERROR on success, otherwise an appropriate error code.
 * @param item - The data item to remove.
*/
	deleteDataItem(item:DzElementData):DzError {
	
	};
	/**
 * @returns The data item with the given name (if any), otherwise null.
 * @param dataName - The name of the user data item to find.
*/
	findDataItem(dataName:String):DzElementData {
	
	};
	/**
 * @returns The first index of the data item (if any), otherwise -1.
 * @param item - The data item to find.
*/
	findDataItemIndex(item:DzElementData):Number {
	
	};
	/**
 * @returns The matching property (if any), otherwise null.
 * @param srcProp - The property to search for a match.
*/
	findMatchingProperty(srcProp:DzProperty):DzProperty {
	
	};
	/**
 * @returns The private property with the given name (if any), otherwise null.
 * @param name - The name of the property to search for.
*/
	findPrivateProperty(name:String):DzProperty {
	
	};
	/**
 * @returns The private property with the given name (if any), otherwise null.
 * @param name - The name of the property to search for.
 * @param caseSensitive - Whether or not the search should be case sensitive.
*/
	findPrivateProperty(name:String, caseSensitive:Boolean):DzProperty {
	
	};
	/**
 * @returns The private property with the given label (if any), otherwise null.
 * @param label - The label of the property to search for.
*/
	findPrivatePropertyByLabel(label:String):DzProperty {
	
	};
	/**
 * @returns The property with the given label (if any), otherwise null.
 * @param label - The label of the property to search for.
 * @param caseSensitive - Whether or not the search should be case sensitive.
*/
	findPrivatePropertyByLabel(label:String, caseSensitive:Boolean):DzProperty {
	
	};
	/**
 * @description Locate a property by name.
 * @returns The property with the given name (if any), otherwise null.
 * @param name - The name of the property to search for.
*/
	findProperty(name:String):DzProperty {
	
	};
	/**
 * @returns The property with the given name (if any), otherwise null.
 * @param name - The name of the property to search for.
 * @param caseSensitive - Whether or not the search should be case sensitive.
*/
	findProperty(name:String, caseSensitive:Boolean):DzProperty {
	
	};
	/**
 * @returns The property with the given label (if any), otherwise null.
 * @param label - The label of the property to search for.
 * @param caseSensitive - Whether or not the search should be case sensitive.
*/
	findPropertyByLabel(label:String, caseSensitive:Boolean):DzProperty {
	
	};
	/**
 * @returns The property with the given label (if any), otherwise null.
 * @param label - The label of the property to search for.
*/
	findPropertyByLabel(label:String):DzProperty {
	
	};
	/**
 * @description Finishes an editing operation for this element - DzProperty.finishEdit() will be called for all properties belonging to this element.
*/
	finishEdit():void {
	
	};
	/**
 * @description Populates the given settings object with the attributes of this element. If this settings object is not empty the save filters will save out this settings information in the preset.
 * @param settings - The settings object to put the information in.
*/
	getAttributes(settings:DzSettings):void {
	
	};
	/**
 * @returns The data item for this element at the given index.
 * @param index - The index of the data item to return.
*/
	getDataItem(index:Number):DzElementData {
	
	};
	/**
 * @returns A list of the data items attached to this element.
*/
	getDataItemList():Array {
	
	};
	/**
 * @returns The child of this element at the given index (if any), otherwise null.
 * @param which - The index of the child element to return.
*/
	getElementChild(which:Number):DzElement {
	
	};
	/**
 * @returns The element that is the parent of this element (if any), otherwise null.
*/
	getElementParent():DzElement {
	
	};
	/**
 * @returns The user-facing label for this element.
*/
	getLabel():String {
	
	};
	/**
 * @returns The script that is executed when this element is loaded from a file (if any), otherwise null.
*/
	getLoadScript():DzScript {
	
	};
	/**
 * @returns The value that represents the intended scope (if any) at which the name of this element, or its constituent parts, is exposed to the user for editing.
 * @since 4.12.1.103
*/
	getNameEditScope():NameEditScope {
	
	};
	/**
 * @returns The number of user data items attached to this element.
*/
	getNumDataItems():Number {
	
	};
	/**
 * @returns The number of children this element has.
*/
	getNumElementChildren():Number {
	
	};
	/**
 * @returns The number of private properties currently owned by this element.
*/
	getNumPrivateProperties():Number {
	
	};
	/**
 * @returns The number of properties currently owned by this element.
*/
	getNumProperties():Number {
	
	};
	/**
 * @returns The private property at the given index (if valid), otherwise null.
 * @param i - The index of the property to get.
*/
	getPrivateProperty(index:Number):DzProperty {
	
	};
	/**
 * @returns The property group tree for private properties owned by this element. If this element does not manage its own property grouping, the tree that is returned will be the tree of the element that manages the property groups for this element.
*/
	getPrivatePropertyGroups():DzPropertyGroupTree {
	
	};
	/**
 * @returns A list of all private properties on this element.
*/
	getPrivatePropertyList():Array {
	
	};
	/**
 * @returns The property at the given index (if valid), otherwise null.
 * @param i - The index of the property to get.
*/
	getProperty(index:Number):DzProperty {
	
	};
	/**
 * @returns The property group tree for properties owned by this element. If this element does not manage its own property grouping, the tree that is returned will be the tree of the element that manages the property groups for this element.
*/
	getPropertyGroups():DzPropertyGroupTree {
	
	};
	/**
 * @returns A list of all properties on this element.
*/
	getPropertyList():Array {
	
	};
	/**
 * @returns The user-facing label for this type of element.
 * @since 4.12.1.103
*/
	getTypeLabel():String {
	
	};
	/**
 * @returns The original value if dataName is already unique, otherwise a unique name.
 * @since 4.9.3.117
 * @param dataName - The name of the data item to make unique.
*/
	getUniqueDataItemName(dataName:String):String {
	
	};
	/**
 * @returns The original value if name is already unique, otherwise a unique private property name.
 * @since 4.9.3.117
 * @param name - The private property name to make unique.
*/
	getUniquePrivatePropertyName(name:String):String {
	
	};
	/**
 * @returns The original value if name is already unique, otherwise a unique property name.
 * @since 4.9.3.117
 * @param name - The property name to make unique.
*/
	getUniquePropertyName(name:String):String {
	
	};
	/**
 * @returns true if the element is in an editing operation, otherwise false.
*/
	inEdit():Boolean {
	
	};
	/**
 * @description Adds a new private property to this element that will be available for connections or direct editing.
 * @returns DZ_NO_ERROR on success, otherwise an appropriate error code.
 * @param index - The location in the list to insert the new property.
 * @param prop - The property to add to the element.
*/
	insertPrivateProperty(index:Number, prop:DzProperty):DzError {
	
	};
	/**
 * @description Adds a new property to this element that will be available for connections or direct editing.
 * @returns DZ_NO_ERROR on success, otherwise an appropriate error code.
 * @param index - The index in the properties list to insert the property.
 * @param prop - The property to insert in the element.
*/
	insertProperty(index:Number, prop:DzProperty):DzError {
	
	};
	/**
 * @description Moves a data item to a new index.
 * @returns DZ_NO_ERROR on success, otherwise an appropriate error code.
 * @param item - The data item to move.
 * @param newIndex - The new index of the item.
*/
	moveDataItemToIndex(item:DzElementData, index:Number):DzError {
	
	};
	/**
 * @description Moves the given property from this element to newElement, if it can be removed. Properties can be specified as non-removable (i.e., DzProperty.isUserProperty()). Doing so makes it impossible to move that property to another element.
 * @returns DZ_NO_ERROR on success, otherwise an appropriate error code.
 * @param prop - The property to remove from the element. If prop is not a user property, it returns DZ_ILLEGAL_ARGUMENT_ERROR. Note: This is also the return code for a null pointer. Passing a null pointer generates a log message, whereas passing a non-user property does not.
 * @param newElement - The element that prop should be moved to.
*/
	movePrivateProperty(prop:DzProperty, element:DzElement):DzError {
	
	};
	/**
 * @description Moves the given property from this element to newElement, if it can be removed. Properties can be specified as non-removable (e.g. the rotation channels of the DzNode class). Doing so makes it impossible to move that property to another element.
 * @returns DZ_NO_ERROR on success, otherwise an appropriate error code.
 * @param prop - The property to remove from the element. If prop is not a user property, it returns DZ_ILLEGAL_ARGUMENT_ERROR. Note: This is also the return code for a null pointer. Passing a null pointer generates a log message, whereas passing a non-user property does not.
 * @param newElement - The element that prop should be moved to.
*/
	moveProperty(prop:DzProperty, element:DzElement):DzError {
	
	};
	/**
 * @description Remove the data item from this element.
 * @returns DZ_NO_ERROR on success, otherwise an appropriate error code.
 * @param item - The data item to remove.
*/
	removeDataItem(item:DzElementData):DzError {
	
	};
	/**
 * @description Removes the given private property, if it can be removed. Properties can be specified as non-removable (i.e., DzProperty.isUserProperty() - e.g. the rotation channels of the DzNode class). Doing so makes it impossible to remove that property from this element.
 * @returns DZ_NO_ERROR on success, otherwise an appropriate error code.
 * @param prop - The property to remove from the element.
*/
	removePrivateProperty(prop:DzProperty):DzError {
	
	};
	/**
 * @description Attempts to remove the named property. Fails if the property could not be found or could not be removed (i.e., DzProperty.isUserProperty()).
 * @returns DZ_NO_ERROR on success, otherwise an appropriate error code.
 * @param name - The name of the property to search for and remove if it is found.
*/
	removePrivateProperty(name:String):DzError {
	
	};
	/**
 * @description Attempts to remove the named property. Fails if the property could not be found or could not be removed.
 * @returns DZ_NO_ERROR on success, otherwise an appropriate error code.
 * @param name - The name of the property to search for and remove if it is found.
*/
	removeProperty(name:String):DzError {
	
	};
	/**
 * @description Removes the given property, if it can be removed. Properties can be specified as non-removable (e.g. the rotation channels of the DzNode class). Doing so makes it impossible to remove that property from the element.
 * @returns DZ_NO_ERROR on success, otherwise an appropriate error code.
 * @param prop - The property to remove from the element.
*/
	removeProperty(prop:DzProperty):DzError {
	
	};
	/**
 * @description Sets attributes in the handed in settings and returns a pointer to an element set by these settings. The element returned may not be a new element or null if the settings are not correct. Default implementation returns this with no changes.
 * @returns A new element, or this element if no changes were made. The caller is responsible for cleaning up the memory of the return element if it is not this.
 * @param settings - The settings object containing the information.
*/
	setAttributes(settings:DzSettings):DzElement {
	
	};
	/**
 * @description Sets the user-facing label (i.e., displayed in the interface) for this element.
 * @returns DZ_NO_ERROR on success, otherwise an appropriate error code.
 * @param name - The new label for this element.
*/
	setLabel(name:String):DzError {
	
	};
	/**
 * @description Sets the script that will be executed when this element is loaded from a file.
 * @param script - The script that will be saved with this element and executed when it is loaded from file. The element takes ownership.
*/
	setLoadScript(script:DzScript):void {
	
	};
	/**
 * @description Sets the internal name of this element.
 * @param name - The name to assign to this element.
*/
	setName(name:String):void {
	
	};
	/**
 * @returns true if this element should have its property groups and properties sorted after being created on load, otherwise false.
*/
	shouldSortOnLoad():Boolean {
	
	};
	/**
 * @description Called to update any cached or display data for this element.
*/
	update():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when this element's label is changed.
 * @signature `"labelChanged(const QString&)"`
 * @event
*/
	labelChanged(newLabel:String):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when this element's parent is changed.
 * @signature `"parentChanged()"`
 * @event
*/
	parentChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when a private property is added to this element.
 * @signature `"privatePropertyAdded(DzProperty*)"`
 * @event
*/
	privatePropertyAdded(prop:DzProperty):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when a private property is added to or removed from this element.
 * @signature `"privatePropertyListChanged()"`
 * @event
*/
	privatePropertyListChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when a private property is added to or removed from the property tree for this element.
 * @signature `"privatePropertyListInTreeChanged()"`
 * @event
*/
	privatePropertyListInTreeChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when a private property is removed from this element.
 * @signature `"privatePropertyRemoved(DzProperty*)"`
 * @event
*/
	privatePropertyRemoved(prop:DzProperty):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the private property tree has changed.
 * @signature `"privatePropertyTreeChanged()"`
 * @event
*/
	privatePropertyTreeChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when a property is added to this element.
 * @signature `"propertyAdded(DzProperty*)"`
 * @event
*/
	propertyAdded(prop:DzProperty):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when a property is added to or removed from this element.
 * @signature `"propertyListChanged()"`
 * @event
*/
	propertyListChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when a property is added to or removed from the property tree for this element.
 * @signature `"propertyListInTreeChanged()"`
 * @event
*/
	propertyListInTreeChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when a property is removed from this element.
 * @signature `"propertyRemoved(DzProperty*)"`
 * @event
*/
	propertyRemoved(prop:DzProperty):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the property tree has changed.
 * @signature `"propertyTreeChanged()"`
 * @event
*/
	propertyTreeChanged():void {
	
	};

}
/**
 * @classdesc See Also:
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/elementdata_dz} */
class DzElementData extends DzCustomData {
	/**
 * @returns A uplicate of the data item that can be added to the given owner (if any), otherwise NULL.
 * @param owner - The element to duplicate this data item on.
*/
	duplicate(owner:DzElement):DzElementData {
	
	};
	/**
 * @returns The element that this data item is associated with (if any), otherwise NULL.
*/
	getOwner():DzElement {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the data item is added to an element.
 * @signature `"addedToElement(DzElement*)"`
 * @event
*/
	addedToElement(owner:DzElement):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the data item's owner is deleting, before the data item itself is deleted.
 * @signature `"elementDeleting(DzElement*)"`
 * @event
*/
	elementDeleting(formerOwner:DzElement):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the data item is removed from an element.
 * @signature `"removedFromElement(DzElement*)"`
 * @event
*/
	removedFromElement(formerOwner:DzElement):void {
	
	};

}
/**
 * @classdesc If the file to post-load is a script:
A global transient variable named DataItem, which refers to the DzElementPostLoadFileData that invoked the execution of the script, is provided to the script in the global context at runtime. Attempts to use this global variable outside of the associated script will result in a ReferenceError.
A global transient variable named FileIOSettings, which refers to the DzFileIOSettings that was used when the element that owns the data item was loaded, is provided to the script in the global context at runtime. Attempts to use this global variable outside of the associated script will result in a ReferenceError. (since 4.9.4.109)
Attention:@attention Attention:
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/elementpostloadfiledata_dz} */
class DzElementPostLoadFileData extends DzElementData {
	/**
 * @description Default constructor.
 * @param name - The name for the data item. This must be unique for all data items on a given element - i.e. an element can not have two data items with the same name.
 * @param persistent - If true, the data item will be saved with the element to the native file format.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @returns The file path of the file for this data item (if any), otherwise an empty string.
*/
	getPostLoadFilePath():String {
	
	};
	/**
 * @description Sets the file path of the file for this data item.
 * @param file - The file path of the file.
*/
	setPostLoadFilePath(script:String):void {
	
	};

}
/**
 * @classdesc 
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/enumproperty_dz} */
class DzEnumProperty extends DzIntProperty {
	/**
 * @description Default Constructor. Creates a non-animatable, non-user property.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @param name - The name of this property.
 * @param canAnimate - If true, creates an animatable property.
 * @param isUserProperty - If true, creates a user property; user properties are properties that can be added/deleted by users.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Adds a string to the available choices for this property. Duplicates are not allowed.
 * @returns The index of the newly added item is returned, or -1 on error.
 * @param item - The string to add to the list of items.
 * @param index - The index to insert the item at. If invalid, the item is appended to the list.
*/
	addItem(item:String, index:Number):Number {
	
	};
	/**
 * @description Searches the property for an item that matches the given string.
 * @returns The index of the item that matches the given string (if any), otherwise -1.
 * @param str - The string to find.
*/
	findItemString(str:String):Number {
	
	};
	/**
 * @returns The string representation of the default value.
*/
	getDefaultStringValue():String {
	
	};
	/**
 * @returns The string representation of the i'th item (if valid), otherwise an empty string.
 * @param i - The index of the item to return.
*/
	getItem(i:Number):String {
	
	};
	/**
 * @returns The string representation of the i'th key value (if valid), otherwise an empty string.
 * @param i - The index of the key to return the value of.
*/
	getKeyStringValue(i:Number):String {
	
	};
	/**
 * @returns The number of enumerated items.
*/
	getNumItems():Number {
	
	};
	/**
 * @returns The string representation of the raw value (if valid), otherwise the default string.
*/
	getRawStringValue():String {
	
	};
	/**
 * @returns The string representation of the raw value at the given time (if valid), otherwise the default string.
 * @param tm - The scene time at which to get the raw value of the property.
*/
	getRawStringValue(tm:DzTime):String {
	
	};
	/**
 * @returns The string representation of the value at the given time.
 * @param tm - The scene time at which to get the value.
*/
	getStringValue(tm:DzTime):String {
	
	};
	/**
 * @returns The string representation of the current value.
*/
	getStringValue():String {
	
	};
	/**
 * @returns An item string that is guaranteed to be unique. If item is not already in the list, it is returned. Otherwise, a number will be appended to item to make it unique.
*/
	getUniqueItemString(item:String):String {
	
	};
	/**
 * @description Removes all items and makes this property essentially invalid.
*/
	removeAllItems():void {
	
	};
	/**
 * @description Removes the item at the given index.
 * @returns true if the item was successfully removed, otherwise false.
 * @param idx - The index of the item to remove.
*/
	removeItem(index:Number):Boolean {
	
	};
	/**
 * @description Replaces the item at the given index with the given string.
 * @returns false if the index is out of range or the string is invalid (empty), otherwise true.
 * @param index - The index of the item to replace.
 * @param item - The new item to place into the list.
*/
	replaceItem(index:Number, item:String):Boolean {
	
	};
	/**
 * @description Sets the items for this property.
 * @since 4.5.2.20
 * @param items - The list of items to set.
*/
	setItems(items:Array):void {
	
	};
	/**
 * @description Sets the current value of the property to the index of the item that matches the given string.
 * @returns true on success, false if the given string does not match an item in this property.
 * @param str - The string to match.
*/
	setValueFromString(str:String):Boolean {
	
	};
	/**
 * @description Sets the value of the property at the given time to the index of the item that matches the given string.
 * @returns true on success, false if the given string does not match an item in this property.
 * @param tm - The scene time to set the value of the property at.
 * @param str - The string to match.
*/
	setValueFromString(tm:DzTime, str:String):Boolean {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the item list (list of legal values for this property) changes.
 * @signature `"itemListChanged()"`
 * @event
*/
	itemListChanged():void {
	
	};

}
/**
 * @classdesc A DzEnumSlider provides a control that allows a user to adjust a bounded, enumerated, integer value. The slider is clamped by default, and automatically sets its min and max range according to the number of string values it contains.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/enumslider_dz} */
class DzEnumSlider extends DzWidget {
	/**
 * @description Holds the number of items on the slider. (Read Only)
	*/
	count:Number;
	/**
 * @description Holds the default value of the slider.
	*/
	defaultValue:Number;
	/**
 * @description Holds whether or not the default value is restorable if the user holds the [Alt] key when clicked.
	*/
	restorable:Boolean;
	/**
 * @description Holds the text of the slider. (Read Only)
	*/
	text:String;
	/**
 * @description Holds the current value of the slider.
	*/
	value:Number;
	/**
 * @description Creates a new enumerated slider widget.
 * @param parent - The widget parent for the slider.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Adds a string to the list of items, and adjusts the maximum value for the slider.
 * @returns The index of the item - this is the numeric value of the slider that corresponds to the string value.
 * @param label - The string value to add to the list of items in the slider.
*/
	addItem(label:String):Number {
	
	};
	/**
 * @description Clears the list of string values for this slider.
*/
	clear():void {
	
	};
	/**
 * @returns The String representing the which item.
*/
	getItem(which:Number):String {
	
	};
	/**
 * @description Moves the item at index which to idx.
 * @param which - The index of the item to move. If out of range, this method has no effect.
 * @param idx - The index to move which to. If out of range, which becomes the last item.
*/
	moveItem(which:Number, idx:Number):void {
	
	};
	/**
 * @description Removes the item at which from the list.
 * @param which - The index of the item. If out of range, this method has no effect.
*/
	removeItem(which:Number):void {
	
	};
	/**
 * @description Renames the item at index which.
 * @param which - The index of the item to rename. If out of range, this method has no effect.
 * @param label - The new value of the item at index which.
*/
	renameItem(which:Number, label:String):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the user releases the slider.
 * @signature `"editEnd()"`
 * @event
*/
	editEnd():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the user starts dragging the slider.
 * @signature `"editStart()"`
 * @event
*/
	editStart():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the value of the slider changes, passes the new value.
 * @signature `"valueChanged(int)"`
 * @event
*/
	valueChanged(value:Number):void {
	
	};

}
/**
 * @classdesc This utility class implements the logic of 'baking' (unlinking) the current state of a controller property on a node to the numeric properties it controls, such that the controlled properties remain at the respective values they were at in that moment of time. The DzERCLink between the 'baked' properties and the controller is removed.
The controller property (the DzNumericProperty that does the controlling) must be set before calling doBake(); see setControllerProperty().
See Also:
Attention:
Since:@attention Attention:
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/ercbake_dz} */
class DzERCBake extends QObject {
	/**
 * @description Default constructor.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Performs the ERC bake based on the current settings.
 * @returns true if the bake operation was successful, otherwise false.
*/
	doBake():Boolean {
	
	};
	/**
 * @description Performs the ERC bake based on the current settings.
 * @returns true if the bake operation was successful, otherwise false.
*/
	doBakeKeyed(warn:Boolean):Boolean {
	
	};
	/**
 * @returns The property (if any) that controls the properties that will be baked when doBake() is called.
*/
	getControllerProperty():DzNumericProperty {
	
	};
	/**
 * @description Sets the property that controls the properties that will be baked when doBake() is called.
 * @param prop - The property to set as the controller to bake.
*/
	setControllerProperty(prop:DzNumericProperty):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description TODO: Add Description
 * @signature `TODO: Add Description`
 * @event
*/
	ERCChanged():void {
	
	};

}
/**
 * @classdesc This utility class implements the logic of 'freezing' (linking) the current state of numeric properties on a node (or multiple nodes) to a controller property, such that adjusting the controller property adjusts the linked properties in kind. The DzERCLink between the 'frozen' properties and the controller are created such that when the controller is set to the value it is at when the 'freeze' operation is performed, the 'frozen' properties will be at the respective values they were at in that moment of time.
The controller node (the DzNode that the controlling property is located on) and the controller property (the DzNumericProperty that ultimately does the controlling) must be set before calling doFreeze(); see setControllerNode() and setControllerProperty().
An additional property can be set and used to attenuate the effect of the controller property on the 'frozen' properties, or have its value attenuated as the controller property is applied, depending on the AttenuateMode set.
The addPropertiesToFreeze() method is used to inspect the current state of the numeric properties on a a given node that are not currently set to their respective raw values and add them to the list of those properties to be linked to the controller property. This list of properties can be inspected and/or modified using the getPropertiesToFreeze() and setPropertiesToFreeze() methods.
See Also:
Attention:
Since:@attention Attention:
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/ercfreeze_dz} */
class DzERCFreeze extends QObject {
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static SubComponents;
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static Controller;
	/**
 * @description Default constructor.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Adds all numeric properties on node whose values differ from their raw values to the list of properties to 'freeze' (link) to the controller property.
 * @returns true if node, getControllerNode(), and getControllerProperty() are defined and it succeeds, otherwise false.
 * @param node - The node to add the numeric properties from.
*/
	addPropertiesToFreeze(node:DzNode):Boolean {
	
	};
	/**
 * @description Performs the ERC freeze based on the current settings.
 * @returns true if the freeze operation was successful, otherwise false.
*/
	doFreeze():Boolean {
	
	};
	/**
 * @returns true if the controller property will be set to the value that causes the 'frozen' properties to be at their current value once the 'freeze' operation is complete, otherwise false.
*/
	getApplyController():Boolean {
	
	};
	/**
 * @returns The mode that determines how the attenuate property will be used.
*/
	getAttenuateMode():void {
	
	};
	/**
 * @returns If set, the property that will be used to attenuate either the controller property, or the affect of the controller property on the properties returned by getPropertiesToFreeze(), depending on the AttenuateMode set.
*/
	getAttenuateProperty():DzNumericProperty {
	
	};
	/**
 * @returns The node that the controller property is on.
 * @attention This is used to determine the root node that the "Restore Figure" and the "Restore Rigging" options are applied to if getRestoreFigure() and/or getRestoreRigging() return true.
*/
	getControllerNode():DzNode {
	
	};
	/**
 * @returns The property that the properties returned by getPropertiesToFreeze() will be linked to when doFreeze() is called.
*/
	getControllerProperty():DzNumericProperty {
	
	};
	/**
 * @returns true if the DzERCLink created between the controller property and the 'frozen' properties will be a DzERCLink.ERCKeyed, otherwise false.
*/
	getKeyed():Boolean {
	
	};
	/**
 * @returns The list of properties that will be linked to the property returned by getControllerProperty() when doFreeze() is called.
*/
	getPropertiesToFreeze():Array {
	
	};
	/**
 * @returns true if the Restore Figure action will be executed once the 'freeze' operation is complete, otherwise false.
*/
	getRestoreFigure():Boolean {
	
	};
	/**
 * @returns true if the Restore Figure Rigging action will be executed once the 'freeze' operation is complete, otherwise false.
*/
	getRestoreRigging():Boolean {
	
	};
	/**
 * @returns true if the Restore Selected Item(s) action will be executed once the 'freeze' operation is complete, otherwise false.
 * @since 4.11.0.362
*/
	getRestoreSelectedItems():Boolean {
	
	};
	/**
 * @description Sets whether or not the controller property will be set to the value that causes the 'frozen' properties to be at their current value once the 'freeze' operation is complete.
 * @param yesNo - If true, the controller property will be applied.
*/
	setApplyController(yesNo:Boolean):void {
	
	};
	/**
 * @description Sets the mode that determines how the attenuate property will be used.
 * @param mode - The attenuate mode to set.
*/
	setAttenuateMode(mode:AttenuateMode):void {
	
	};
	/**
 * @description Sets the property that will be used to attenuate either the controller property, or the affect of the controller property on the properties returned by getPropertiesToFreeze(), depending on the AttenuateMode set.
 * @param prop - The property to set.
*/
	setAttenuateProperty(prop:DzNumericProperty):void {
	
	};
	/**
 * @description Sets the node that the controller property is on.
 * @param node - The node to set.
 * @attention This is used to determine the root node that the "Restore Figure" and the "Restore Rigging" options are applied to if getRestoreFigure() and/or getRestoreRigging() return true.
*/
	setControllerNode(node:DzNode):void {
	
	};
	/**
 * @description Sets the property that the properties returned by getPropertiesToFreeze() will be linked to when doFreeze() is called.
 * @param prop - The property to set as the controller.
*/
	setControllerProperty(prop:DzNumericProperty):void {
	
	};
	/**
 * @description Sets whether or not the DzERCLink created between the controller property and the 'frozen' properties will be a DzERCLink.ERCKeyed (using the keys in timeline) or a DzERCLink.ERCDeltaAdd.
 * @param yesNo - If true, the DzERCLink will be a DzERCLink.ERCKeyed.
*/
	setKeyed(yesNo:Boolean):void {
	
	};
	/**
 * @description Sets the list of properties that will be linked to the property returned by getControllerProperty() when doFreeze() is called.
 * @param propList - The list of properties.
*/
	setPropertiesToFreeze(propList:Array):void {
	
	};
	/**
 * @description Sets whether or not the Restore Figure action will be executed once the 'freeze' operation is complete.
 * @param yesNo - If true, the Restore Figure action will be executed.
*/
	setRestoreFigure(yesNo:Boolean):void {
	
	};
	/**
 * @description Sets whether or not the Restore Figure Rigging action will be executed once the 'freeze' operation is complete.
 * @param yesNo - If true, the Restore Figure Rigging action will be executed.
*/
	setRestoreRigging(yesNo:Boolean):void {
	
	};
	/**
 * @description Sets whether or not the Restore Selected Item(s) action will be executed once the 'freeze' operation is complete.
 * @since 4.11.0.362
 * @param yesNo - If true, the Restore Selected Item(s) action will be executed.
*/
	setRestoreSelectedItems(yesNo:Boolean):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description TODO: Add Description
 * @signature `TODO: Add Description`
 * @event
*/
	ERCChanged():void {
	
	};

}
/**
 * @classdesc This numeric controller implements an algorithm that is based on the value of another property. There are six formulas which correspond to the ERCType of the object - the default ERCType is ERCDeltaAdd. The formulas are:
Where:
As an example of ERC in action, lets say that there are 3 properties A, B, and C. B is linked to A with a 'ERCDeltaAdd' DzERCLink with a multiplier of 1.0 and an additive value of 0.0. C is linked to B with a 'ERCDeltaAdd' DzERCLink with a multiplier of 2.0 and an additive value of 1.0. So, if the keyed value of A is 10.0, B is 0.0, and C is 0.0, the final values of the properties would be calculated as:
A = 10.0 B = 0.0 + (10.0 * 1.0) + 0.0 = 10.0 C = 0.0 + (10.0 * 2.0) + 1.0 = 21.0
If B and C have keyed values - for example B is 5.0 and C is 2.0 - the final property values would be calculated as:
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/erclink_dz} */
class DzERCLink extends DzNumericController {
	/**
 * @description Holds whether or not the controller is evaluated and applied.
	*/
	active:Boolean;
	/**
 * @description Holds the addend value for the link.
	*/
	addend:Number;
	/**
 * @description Holds whether or not the link will be automatically redirected when its owner is 'Fit To' another figure.
	*/
	autoOverride:Boolean;
	/**
 * @description Holds whether or not the link is a user-link.
	*/
	isUserLink:Boolean;
	/**
 * @description Holds the interpolation mode for links of the ERCKeyed type.
	*/
	keyInterpolation:ERCKeyInterpolation;
	/**
 * @description Holds whether the controller will be saved with the output property (the property that owns the link), or the input property (the linked property).
	*/
	saveWithOutput:Boolean;
	/**
 * @description Holds the scalar (multiplier) value for links of the ERCDeltaAdd type.
	*/
	scalar:Number;
	/**
 * @description Holds the type of operation the link will perform when evaluated and applied.
	*/
	type:ERCType;
	/**
 * @description ENUMERATOR: Linear interpolation between key values.
*/
	
	static LINEAR_INTERP;
	/**
 * @description ENUMERATOR: Constant interpolation between key values.
*/
	
	static CONSTANT_INTERP;
	/**
 * @description ENUMERATOR: TCB (Kochanek-Bartels) Spline interpolation between key values.
*/
	
	static TCB_INTERP;
	/**
 * @description ENUMERATOR: This type of ERC is the most common, and implements the formula f(v) = v + (c * m) + a where:
*/
	
	static ERCDeltaAdd;
	/**
 * @description ENUMERATOR: This type of ERC implements the formula f(v) = (c / v) + a where:
*/
	
	static ERCDivideInto;
	/**
 * @description ENUMERATOR: This type of ERC implements the formula f(v) = (v / c) + a where:
*/
	
	static ERCDivideBy;
	/**
 * @description ENUMERATOR: This type of implements the formula f(v) = (c * v) + a where:
*/
	
	static ERCMultiply;
	/**
 * @description ENUMERATOR: This type of ERC implements the formula f(v) = v - c + a where:
*/
	
	static ERCSubtract;
	/**
 * @description ENUMERATOR: This type of ERC implements the formula f(v) = v + c + a where:
*/
	
	static ERCAdd;
	/**
 * @description ENUMERATOR: This type of ERC is used to define value by a parametric function f(v) = v + P(c) where:
*/
	
	static ERCKeyed;
	/**
 * @description Default constructor.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description TODO:
Add description.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Creates a controller that is driven by property.
 * @param type - The type of this link.
 * @param prop - The property that drives this link.
 * @param scalar - The multiplier of the value.
 * @param addend - The addend to the value.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Creates a controller that is driven by property.
 * @param prop - The property that drives this link.
 * @param scalar - The multiplier of the value.
 * @param addend - The addend to the value.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Adds a keyed value to the link if the type is ERCKeyed and the interpolation mode is LINEAR_INTERP or CONSTANT_INTERP.
 * @returns If the keyed value was sucessfully added, the index that it was added at, otherwise 0.
 * @param key - The value of the property that drives this link to add a keyed value for.
 * @param value - The value of the property this link resides on to add a keyed value for.
*/
	addKeyValue(key:Number, value:Number):Number {
	
	};
	/**
 * @description Adds a keyed value to the link if the type is ERCKeyed and the interpolation mode is TCB_INTERP.
 * @returns If the keyed value was sucessfully added, the index that it was added at, otherwise 0.
 * @param key - The value of the property that drives this link to add a keyed value for.
 * @param value - The value of the property this link resides on to add a keyed value for.
 * @param t - The tenstion value to set for the keyed value.
 * @param c - The continuity value to set for the keyed value.
 * @param b - The bias value to set for the keyed value.
*/
	addKeyValue(key:Number, value:Number, t:Number, c:Number, b:Number):Number {
	
	};
	/**
 * @description Clears all keyed values for links of the ERCKeyed type.
*/
	clearKeys():void {
	
	};
	/**
 * @description Makes a deep copy of this link.
 * @returns A deep copy of this link, driven by the specified property.
 * @param newProperty - The property to drive the duplicated link with.
*/
	duplicate(newProperty:DzNumericProperty):DzERCLink {
	
	};
	/**
 * @returns If the type of the link is ERCKeyed, the index of key, otherwise -1.
 * @param key - The value of the property that drives this link to find the index of.
*/
	findKeyIndex(key:Number):Number {
	
	};
	/**
 * @returns The property that is currently driving this link. Typically, this will return the same value as getProperty(), however, if autoOverride is enabled, and the property's owner is 'Fit To' another node, this will return the property on the node that this link has been redirected to.
*/
	getCurrentProperty():DzNumericProperty {
	
	};
	/**
 * @returns If the type of link is ERCKeyed and which is within the range of keyed values, the key at which, otherwise 0.
 * @param which - The index of the keyed value to get the key for.
*/
	getKey(which:Number):Number {
	
	};
	/**
 * @returns If the link is the ERCKeyed type, the interpolated value of the operation at tm, otherwise 0.
 * @param tm - The time of the interpolated value to get.
*/
	getKeyOpValue(val:Number):Number {
	
	};
	/**
 * @returns If the type of link is ERCKeyed, which is within the range of keyed values, and the interpolation mode is TCB_INTERP, the bias value at which, otherwise 0.
 * @param which - The index of the keyed value to get the bias value for.
*/
	getKeyParamB(which:Number):Number {
	
	};
	/**
 * @returns If the type of link is ERCKeyed, which is within the range of keyed values, and the interpolation mode is TCB_INTERP, the continuity value at which, otherwise 0.
 * @param which - The index of the keyed value to get the continuity value for.
*/
	getKeyParamC(which:Number):Number {
	
	};
	/**
 * @returns If the type of link is ERCKeyed, which is within the range of keyed values, and the interpolation mode is TCB_INTERP, the tension value at which, otherwise 0.
 * @param which - The index of the keyed value to get the tension value for.
*/
	getKeyParamT(which:Number):Number {
	
	};
	/**
 * @returns If the type of link is ERCKeyed and which is within the range of keyed values, the value at which, otherwise 0.
 * @param which - The index of the keyed value to get the value for.
*/
	getKeyValue(which:Number):Number {
	
	};
	/**
 * @returns The number of keyed values for a link of the ERCKeyed type.
*/
	getNumKeyValues():Number {
	
	};
	/**
 * @returns The property that drives this link.
*/
	getProperty():DzNumericProperty {
	
	};
	/**
 * @description Presizes the array of keyed values in order to improve the performance of adding keyed values.
 * @param count - The number of keyed values to be added.
*/
	presizeKeys(count:Number):void {
	
	};
	/**
 * @description Removes a keyed value from the link if the link type is ERCKeyed.
 * @returns true if which is within the range of keyed values, otherwise false.
 * @param which - The keyed value (of the property that drives this link) to remove.
*/
	removeKeyValue(which:Number):Boolean {
	
	};
	/**
 * @description Sets the property that drives this link.
 * @param prop - The property to drive this link with.
*/
	setProperty(prop:DzNumericProperty):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description TODO: Add Description
 * @signature `TODO: Add Description`
 * @event
*/
	ercSourcePropertyRemoved(prop:DzProperty):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description TODO: Add Description
 * @signature `TODO: Add Description`
 * @event
*/
	keyChanged(which:Number):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description TODO: Add Description
 * @signature `TODO: Add Description`
 * @event
*/
	keyInterpolationChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description TODO: Add Description
 * @signature `TODO: Add Description`
 * @event
*/
	keysListChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the source property or current property is deleted.
 * @signature `"propertyDeleted(DzProperty*)"`
 * @event
*/
	propertyDeleted(prop:DzProperty):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description TODO: Add Description
 * @signature `TODO: Add Description`
 * @event
*/
	saveWithOutputChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description TODO: Add Description
 * @signature `TODO: Add Description`
 * @event
*/
	scalarChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description TODO: Add Description
 * @signature `TODO: Add Description`
 * @event
*/
	stageChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description TODO: Add Description
 * @signature `TODO: Add Description`
 * @event
*/
	typeChanged():void {
	
	};

}
/**
 * @classdesc Note:
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/error_dz} */
class DzError {
	/**
 * @returns The value of the DzError as a Number.
*/
	valueOf():Number {
	
	};

}
/**
 * @classdesc Since:
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/eventscriptaction_dz} */
class DzEventScriptAction extends DzScriptAction {

}
/**
 * @classdesc TODO:
Add detailed description.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/exporter_dz} */
class DzExporter extends DzFileIO {
	/**
 * @returns A description of the exporter that can be placed in a file type selection combobox (e.g. "Acclaim Skeleton")
*/
	getDescription():String {
	
	};
	/**
 * @returns The extension that this exporter will force filenames to (excluding the preceeding '.').
*/
	getExtension():String {
	
	};
	/**
 * @returns true if this exporter writes to a 'real' file, otherwise false.
*/
	isFileExporter():Boolean {
	
	};
	/**
 * @description Exports to a file.
 * @returns DZ_NO_ERROR on success, or an error code if the export failed.
 * @param filename - Name of the file to export to.
*/
	writeFile(filename:String):DzError {
	
	};
	/**
 * @description Exports to a file.
 * @returns DZ_NO_ERROR on success, or an error code if the export failed.
 * @param filename - The full path of the file to export to.
 * @param options - The options to use while exporting the file.
*/
	writeFile(filename:String, options:DzFileIOSettings):DzError {
	
	};

}
/**
 * @classdesc There is only one instance of this manager in an application. This instance is created and owned by DzApp. Request the instance via DzApp.getExportMgr().
See Also:
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/exportmgr_dz} */
class DzExportMgr extends QObject {
	/**
 * @description Uses the extension from each of the exporters and attempts to match an exporter with the extension of the filename.
 * @returns true if an exporter was found that can write the given file.
 * @param filename - The name of the file to try to find an exporter for.
*/
	static canExport(filename:String):Boolean {
	
	};
	/**
 * @description Uses the extension from each of the exporters and attempts to match an exporter with the extension of the filename.
 * @returns A new instance of the matching exporter, or NULL if none was found. The caller takes ownership of this pointer and is responsible for deleting it.
 * @param filename - The name of the file to try to find an exporter for.
*/
	static findExporter(filename:String):DzExporter {
	
	};
	/**
 * @description Uses the class name of each of the exporters and attempts to find an exporter with the given class name.
 * @returns A new instance of the matching exporter, or NULL if none was found. The caller takes ownership of this pointer and is responsible for deleting it.
 * @param className - The name of the exporter class to find.
*/
	static findExporterByClassName(className:String):DzExporter {
	
	};
	/**
 * @description Uses the extension from each of the exporters and attempts to match an exporter with the extension of the filename.
 * @returns The index of a matching exporter, or -1 if none was found.
 * @param filename - The name of the file to try to find an exporter for.
*/
	static findExporterIndex(filename:String):Number {
	
	};
	/**
 * @returns A new instance of the i'th exporter in the list. The caller takes ownership of this pointer and is responsible for deleting it when finished.
 * @param exporterIdx - The index of the exporter to get an instance of.
*/
	static getExporter(exporterIdx:Number):DzExporter {
	
	};
	/**
 * @returns The number of exporters currently supported.
*/
	getNumExporters():Number {
	
	};
	/**
 * @description Populates the given filter with all the types recognized by the export manager.
 * @param filter - The filter to populate
 * @param defaultFilter - The filter to set as the default
*/
	static makeExportFileFilter(filter:DzFileFilter, defaultFilter:String):void {
	
	};
	/**
 * @description Export the scene contents to a file.
 * @returns DZ_NO_ERROR if the file export was successful.
 * @param filename - The name of the file to export to.
 * @param exporterIdx - The index of the exporter class to use. If this is less than 0, then the extension of fileName is used to attempt to find an appropriate exporter.
*/
	exportFile(fileName:String, exporterIdx:Number):DzError {
	
	};
	/**
 * @description Export the scene contents to a file.
 * @returns DZ_NO_ERROR if the file export was successful.
 * @param filename - The name of the file to export to.
 * @param exporterIdx - The index of the exporter class to use. If this is less than 0, then the extension of fileName is used to attempt to find an appropriate exporter.
 * @param options - The options to use while exporting the file.
*/
	exportFile(fileName:String, exporterIdx:Number, options:DzFileIOSettings):DzError {
	
	};
	/**
 * @description Gets the default export directory - this is typically the last directory that the user exported a file to, and will be the directory that user will be taken to next time the file export dialog is displayed.
 * @returns The current default directory that files are exported to.
*/
	getExportPath():String {
	
	};
	/**
 * @returns true if there is currently a file being exported, otherwise false.
*/
	isExporting():Boolean {
	
	};
	/**
 * @description Sets the default export directory - this is the directory that user will be taken to next time the file export dialog is displayed.
 * @param path - The new default path for exporting files.
*/
	setExportPath(path:String):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when a file export operation is finished
 * @signature `"fileExported()"`
 * @event
*/
	fileExported():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when a file export operation is started
 * @signature `"fileExportStarting()"`
 * @event
*/
	fileExportStarting():void {
	
	};

}
/**
 * @classdesc A 3 or 4 sided polygonal face within a polygon mesh.
See Also:
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/facet_dz} */
class DzFacet extends Object {
	/**
 * @description Holds the index of this face in the cage mesh
	*/
	cageIndex:Number;
	/**
 * @description Holds the index of the first edge, otherwise -1
	*/
	edgeIdx1:Number;
	/**
 * @description Holds the index of the second edge, otherwise -1
	*/
	edgeIdx2:Number;
	/**
 * @description Holds the index of the third edge, otherwise -1
	*/
	edgeIdx3:Number;
	/**
 * @description Holds the index of the fourth edge normal (if any), otherwise -1
	*/
	edgeIdx4:Number;
	/**
 * @description Holds the index of the face group this face belongs to
	*/
	faceGroupIndex:Number;
	/**
 * @description Holds the index of the material group this face belongs to
	*/
	materialIndex:Number;
	/**
 * @description Holds the index of the first vertex normal
	*/
	normIdx1:Number;
	/**
 * @description Holds the index of the second vertex normal
	*/
	normIdx2:Number;
	/**
 * @description Holds the index of the third vertex normal
	*/
	normIdx3:Number;
	/**
 * @description Holds the index of the fourth vertex normal (if any), otherwise -1
	*/
	normIdx4:Number;
	/**
 * @description Holds the index of the first texture vertex
	*/
	uvwIdx1:Number;
	/**
 * @description Holds the index of the second texture vertex
	*/
	uvwIdx2:Number;
	/**
 * @description Holds the index of the third texture vertex
	*/
	uvwIdx3:Number;
	/**
 * @description Holds the index of the fourth texture vertex (if any), otherwise -1
	*/
	uvwIdx4:Number;
	/**
 * @description Holds the index of the first vertex
	*/
	vertIdx1:Number;
	/**
 * @description Holds the index of the second vertex
	*/
	vertIdx2:Number;
	/**
 * @description Holds the index of the third vertex
	*/
	vertIdx3:Number;
	/**
 * @description Holds the index of the fourth vertex (if any), otherwise -1
	*/
	vertIdx4:Number;
	/**
 * @description Default Constructor.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Creates a facet by parsing a string.
 * @param facet - A string representation of the facet in the form "number : getTriFanCount()
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description TODO:
Add description.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description TODO:
Add description.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description TODO:
Add description.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description TODO:
Add description.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @returns true if this is a 4 sided polygon, otherwise false
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @returns true if this is a 3 sided polygon, otherwise false
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description TODO:
Add description.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description TODO:
Add description.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description TODO:
Add description.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description TODO:
Add description.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description TODO:
Add description.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @returns A string representation of this facet in the form "[[ vertIdx1, vertIdx2, vertIdx3, vertIdx4 ], [ uvwIdx1, uvwIdx2, uvwIdx3, uvwIdx4 ], [ normIdx1, normIdx2, normIdx3, normIdx4 ], [ edgeIdx1, edgeIdx2, edgeIdx3, edgeIdx4 ], materialIndex, faceGroupIndex, cageIndex ]".
 * @constructor
*/
	constructor() {
	
	};

}
/**
 * @classdesc See Also:
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/fbxexporter_dz} */
class DzFbxExporter extends DzExporter {
	/**
 * @description Default Constructor.
 * @constructor
*/
	constructor() {
	
	};

}
/**
 * @classdesc See Also:
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/fbximporter_dz} */
class DzFbxImporter extends DzImporter {
	/**
 * @description Default Constructor.
 * @constructor
*/
	constructor() {
	
	};

}
/**
 * @classdesc TODO:
Add detailed description.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/figure_dz} */
class DzFigure extends DzSkeleton {
	/**
 * @description Default Constructor.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Attempts to convert a simple node with geometry into a figure.
 * @returns The figure produced by the conversion (if any), otherwise NULL.
 * @param srcNode - The source node to convert.
 * @param rootBoneName - The name to assign to the root bone of the figure.
 * @param localMaps - If true (default), local weight maps will be created, otherwise a general weight map will be created.
 * @param inheritSkeleton - If true (default), …
*/
	static convertPropToFigure(srcNode:DzNode, rootBoneName:String, localMaps:Boolean, inheritSkeleton:Boolean):void {
	
	};
	/**
 * @description Adds a face in the figure that this figure is following (if any) to hide.
 * @param faceIdx - The index of the face to hide.
*/
	addFollowTargetHiddenFace(faceIdx:Number):void {
	
	};
	/**
 * @description Adds a pair of vertex indices in the geometry of this figure, and in the geometry of the figure that this figure is following (if any), to the list of vertices to weld together in order to "graft" (integrate) them.
 * @param followerIdx - The index of the vertex in the geometry of this figure.
 * @param targetIdx - The index of the vertex in the geometry of the follow target.
 * @param notifyChange - If true (default), notifies listeners of the weldListChanged() signal.
*/
	addWeldPoint(followerIdx:Number, targetIdx:Number, notifyChange:Boolean):void {
	
	};
	/**
 * @description Clears the list of faces to hide in the figure that this figure is following (if any).
*/
	clearFollowTargetHiddenFaces():void {
	
	};
	/**
 * @description Clears the list of vertex index pairs used to weld vertices in the geometry of this figure to vertices in the geometry of another figure.
 * @since 4.9.0.53
*/
	clearWeldPoints():void {
	
	};
	/**
 * @returns The figure that is culling (hiding geometry of) this figure at the specified index (if valid), otherwise null.
 * @param which - The index of the figure that is culling this figure.
*/
	getCullFigure(which:Number):void {
	
	};
	/**
 * @returns The index of the vertex in the geometry of this figure.
 * @param which - The index of the vertex index pair to weld.
*/
	getFollowerWeldIndex(which:Number):Number {
	
	};
	/**
 * @returns The face count of the figure that this figure is following (if any).
*/
	getFollowTargetFaceCount():Number {
	
	};
	/**
 * @returns The vertex count of the figure that this figure is following (if any).
*/
	getFollowTargetVertexCount():Number {
	
	};
	/**
 * @returns The index of the vertex in the geometry of the follow target.
 * @param which - The index of the vertex index pair to weld.
*/
	getFollowTargetWeldIndex(which:Number):Number {
	
	};
	/**
 * @returns The figure that is grafting (integrating its geometry) into this figure at the specified index (if valid), otherwise null.
 * @param which - The index of the figure that is grafting into this figure.
*/
	getGraftFigure(which:Number):void {
	
	};
	/**
 * @returns The number of figures that are culling (hiding geometry of) this figure.
*/
	getNumCullFigures():Number {
	
	};
	/**
 * @returns The number of faces in the figure that this figure is following (if any) to hide.
*/
	getNumFollowTargetHiddenFaces():Number {
	
	};
	/**
 * @returns The number of figures that are grafting (integrating their geometry) into this figure.
*/
	getNumGraftFigures():Number {
	
	};
	/**
 * @returns The number of vertex index pairs in the list of vertices to weld together between the geometry of this figure, and the geometry of the figure that this figure is following (if any), in order to "graft" (integrate) them.
*/
	getNumWeldPoints():Number {
	
	};
	/**
 * @returns The skin binding for this figure
*/
	getSkinBinding():DzSkinbinding {
	
	};
	/**
 * @returns true if a follower is grafting to this figure, otherwise false.
*/
	isGraftFollowing():Boolean {
	
	};
	/**
 * @description Merges all current followers of this figure into a single follower.
 * @returns DZ_NO_ERROR on success, otherwise an appropriate error code.
 * @since 4.6.3.0
 * @attention It is the responsibility of a developer to perform the appropriate checks to ensure followers exist and can be merged prior to calling this function.
*/
	mergeFollowers():DzError {
	
	};
	/**
 * @description Optimizes the list of vertex index pairs used to weld vertices in the geometry of this figure to vertices in the geometry of another figure - removes duplicates and releases any memory not required to store the items.
 * @since 4.9.0.53
*/
	optimizeWeldPoints():void {
	
	};
	/**
 * @description Pre-sizes the list of faces to hide in the figure that this figure is following (if any).
 * @param num - The number of faces that will be hidden.
*/
	presizeFollowTargetHiddenFaces(num:Number):void {
	
	};
	/**
 * @description Pre-sizes the list of vertex index pairs used to "graft" (integrate) the geometry of this figure into the geometry of the figure that this figure is following (if any).
 * @param num - The number of vertex index pairs.
*/
	presizeWeldPoints(num:Number):void {
	
	};
	/**
 * @description Removes duplicates from the list of vertex index pairs used to weld vertices in the geometry of this figure to vertices in the geometry of another figure.
 * @since 4.9.0.53
*/
	removeDuplicateWeldPoints():void {
	
	};
	/**
 * @description Removes a pair of vertex indices in the geometry of this figure, and in the geometry of the figure that this figure is following (if any), from the list of vertices to weld together in order to "graft" (integrate) them.
 * @since 4.9.0.53
 * @param which - The index of the pair to remove.
*/
	removeWeldPoint(which:Number):void {
	
	};
	/**
 * @description Stores the face count of the figure that this figure is following (if any).
 * @param num - The number of faces.
*/
	setFollowTargetFaceCount(num:Number):void {
	
	};
	/**
 * @description Stores the vertex count of the figure that this figure is following (if any).
 * @param num - The number of vertices.
*/
	setFollowTargetVertexCount(num:Number):void {
	
	};
	/**
 * @returns true if this figure will graft during drawing operations, otherwise false.
 * @since 4.9.2.58
*/
	willGraftInDraw():Boolean {
	
	};
	/**
 * @returns true if this figure will graft during rendering operations, otherwise false.
 * @since 4.9.2.58
 * @param settings - The render settings that will be used during the render operation.
*/
	willGraftInRender(settings:DzRenderSettings):Boolean {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the list of hidden facets in the follow target has changed.
 * @signature `"followTargetHiddenListChanged()"`
 * @event
*/
	followTargetHiddenListChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the list of figures that "graft" (integrate) their geometries into this figure has changed.
 * @signature `"graftListChanged()"`
 * @event
*/
	graftListChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the list of vertex indices for the vertices to weld together in order to "graft" (integrate) their geometries has changed.
 * @signature `"weldListChanged()"`
 * @event
*/
	weldListChanged():void {
	
	};

}
/**
 * @classdesc 
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/file_dz} */
class DzFile extends DzFileInfo {
	/**
 * @description ENUMERATOR: No error occurred.
*/
	
	static NoError;
	/**
 * @description ENUMERATOR: An error occurred when reading from the file.
*/
	
	static ReadError;
	/**
 * @description ENUMERATOR: An error occurred when writing to the file.
*/
	
	static WriteError;
	/**
 * @description ENUMERATOR: A fatal error occurred.
*/
	
	static FatalError;
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static ResourceError;
	/**
 * @description ENUMERATOR: The file could not be opened.
*/
	
	static OpenError;
	/**
 * @description ENUMERATOR: The operation was aborted.
*/
	
	static AbortError;
	/**
 * @description ENUMERATOR: A timeout occurred.
*/
	
	static TimeOutError;
	/**
 * @description ENUMERATOR: An unspecified error occurred.
*/
	
	static UnspecifiedError;
	/**
 * @description ENUMERATOR: The file could not be removed.
*/
	
	static RemoveError;
	/**
 * @description ENUMERATOR: The file could not be renamed.
*/
	
	static RenameError;
	/**
 * @description ENUMERATOR: The position in the file could not be changed.
*/
	
	static PositionError;
	/**
 * @description ENUMERATOR: The file could not be resized.
*/
	
	static ResizeError;
	/**
 * @description ENUMERATOR: The file could not be accessed.
*/
	
	static PermissionsError;
	/**
 * @description ENUMERATOR: The file could not be copied.
*/
	
	static CopyError;
	/**
 * @description ENUMERATOR: The file is not open.
*/
	
	static NotOpen;
	/**
 * @description ENUMERATOR: The file is open the for reading.
*/
	
	static ReadOnly;
	/**
 * @description ENUMERATOR: The file is open the for writing.
*/
	
	static WriteOnly;
	/**
 * @description ENUMERATOR: The file is open the for reading and writing.
*/
	
	static ReadWrite;
	/**
 * @description ENUMERATOR: The file is opened in append mode, so that all data is written to the end of the file.
*/
	
	static Append;
	/**
 * @description ENUMERATOR: If possible, the file is truncated before it is opened. All earlier contents of the file are lost.
*/
	
	static Truncate;
	/**
 * @description ENUMERATOR: When reading, the end-of-line terminators are translated to '
*/
	
	static Text;
	/**
 * @description ENUMERATOR: Alias for Text.
*/
	
	static Translate;
	/**
 * @description Creates a file object with the given file name.
 * @param file - The path of the file.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Closes the file, sets its openMode() to NotOpen, and resets the error string.
*/
	close():void {
	
	};
	/**
 * @returns true if copying the file is successful, otherwise false.
 * @param newName - The path to copy this file to.
 * @attention If newName already exists it will not be overwritten.
*/
	copy(newName:String):Boolean {
	
	};
	/**
 * @returns true if the current position is at the end of the file, otherwise false.
*/
	eof():Boolean {
	
	};
	/**
 * @returns The file error status.
 * @since 4.9.3.35
 * @attention For example, if open() returns false, or a read/write operation returns -1, this function can be called to find out the reason why the operation failed.
*/
	error():FileError {
	
	};
	/**
 * @returns A human-readable description of the last error that occurred.
 * @since 4.9.3.35
*/
	errorString():String {
	
	};
	/**
 * @returns true if the file is open, otherwise false.
 * @since 4.9.3.35
*/
	isOpen():Boolean {
	
	};
	/**
 * @returns true if the Text OpenModeFlag is enabled, otherwise false.
 * @since 4.9.3.35
*/
	isTextModeEnabled():Boolean {
	
	};
	/**
 * @description Creates a link named linkName that points to the file currently specified by fileName(). What a link is depends on the underlying filesystem (be it a shortcut on Windows or a symbolic link on Mac OS X).
 * @returns true if successful, otherwise false.
 * @since 4.9.3.35
 * @attention This will not overwrite an already existing entity in the file system; in this case, link() will return false and set error() to return RenameError.
*/
	link(linkName:String):Boolean {
	
	};
	/**
 * @description Opens the file and sets its openMode() to mode.
 * @returns true if the file was opened successfully, otherwise false.
*/
	open(mode:OpenMode):Boolean {
	
	};
	/**
 * @returns The mode in which the device has been opened.
 * @since 4.9.3.35
*/
	openMode():void {
	
	};
	/**
 * @description Peeks at most maxSize bytes from the file, without side effects (i.e., if you read after you peek, you will get the same data).
 * @returns The data peeked.
 * @since 4.9.3.35
*/
	peek(maxSize:Number):ByteArray {
	
	};
	/**
 * @returns The position that data is written to or read from.
 * @since 4.9.3.35
*/
	pos():Number {
	
	};
	/**
 * @description Read the entire file.
 * @returns The file contents as a string.
*/
	read():String {
	
	};
	/**
 * @description Reads at most maxSize bytes from the file.
 * @returns The data read.
 * @since 4.9.3.35
*/
	read(maxSize:Number):ByteArray {
	
	};
	/**
 * @description Read the entire file.
 * @returns All bytes of the file.
 * @attention This function has no way of reporting errors; returning an empty ByteArray can mean either that no data was currently available for reading, or that an error occurred.
*/
	readAll():ByteArray {
	
	};
	/**
 * @description Read one character from the file.
 * @returns The character read from the file.
*/
	readByte():Number {
	
	};
	/**
 * @description Reads a line from the file, but no more than maxSize characters.
 * @returns The bytes read.
 * @param maxSize - The maximum nuber of characters to read. Since 4.9.3.35.
 * @attention This function has no way of reporting errors; returning an empty ByteArray can mean either that no data was currently available for reading, or that an error occurred.
*/
	readByteLine(maxSize:Number):ByteArray {
	
	};
	/**
 * @description Read a line of text from the file.
 * @returns The file line as a string.
*/
	readLine():String {
	
	};
	/**
 * @description Read the entire file and split it into lines of text.
 * @returns All lines from the file.
*/
	readLines():Array {
	
	};
	/**
 * @description TODO:
Add description.
*/
	rename(newName:String):Boolean {
	
	};
	/**
 * @description Seeks to the start of input.
 * @returns true on success, otherwise false (for example, if the file is not open).
 * @since 4.9.3.35
*/
	reset():Boolean {
	
	};
	/**
 * @description Sets the current position to pos.
 * @returns true on success, otherwise false.
 * @since 4.9.3.35
*/
	seek(pos:Number):Boolean {
	
	};
	/**
 * @description Sets the name of the file to name. The name can have no path, a relative path, or an absolute path.
 * @since 4.9.3.35
 * @attention Do not call this function if the file has already been opened. If the file name has no path or a relative path, the path used will be the application's current directory path at the time of the open() call.
*/
	setFileName(name:String):void {
	
	};
	/**
 * @description Sets the permissions for the file to permissions.
 * @returns true if successful, otherwise false (for example, if the permissions cannot be modified).
 * @since 4.9.3.35
*/
	setPermissions(permissions:Permissions):Boolean {
	
	};
	/**
 * @description If enabled is true, sets the Text flag on the file, otherwise the Text flag is removed.
 * @since 4.9.3.35
*/
	setTextModeEnabled(enabled:Boolean):void {
	
	};
	/**
 * @description Write a string to the file.
 * @returns The number of bytes that were actually written, or -1 if an error occurred. (since 4.9.3.35)
 * @param data - The string to write to the file.
 * @param maxSize - The maximum number of characters to write to the file. If this is less than 1 (default), the whole string is written.
*/
	write(data:String, maxSize:Number):Number {
	
	};
	/**
 * @description Write a single byte (character) to the file.
 * @param byte - The character to write to the file.
*/
	writeByte(byte:Number):void {
	
	};
	/**
 * @description Writes the content of byteArray to the file.
 * @returns The number of bytes that were actually written, or -1 if an error occurred.
 * @since 4.14.0.7
*/
	writeBytes(byteArray:ByteArray):Number {
	
	};
	/**
 * @description Write a line to the file.
 * @param data - The string to write to the file - a new line character will be written immediately following the string contents.
*/
	writeLine(data:String):void {
	
	};

}
/**
 * @classdesc A global static object available via the Global.FileDialog variable.
This object provides functions that display OS native file dialogs to the user.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/filedialog_dz} */
class DzFileDialog extends QObject {
	/**
 * @description A convenience file dialog that automatically creates a filter list for all audio formats the application can import and displays a file open dialog.
 * @returns The path of the file selected by the user (if the user does not cancel), otherwise an empty string.
 * @param startWith - The starting directory; can include a default file name.
 * @param parent - The parent widget for the file dialog.
*/
	doAudioClipOpenDialog(startWith:String, parent:DzWidget):String {
	
	};
	/**
 * @description Display a dialog for the user to choose a directory.
 * @returns The path of the directory selected by the user (if the user does not cancel), otherwise an empty string.
 * @param title - The title of the dialog box.
 * @param desc - Unused; retained for backward compatibility.
 * @param parent - The parent widget for the directory dialog.
*/
	doDirectoryDialog(title:String, desc:String, parent:DzWidget):String {
	
	};
	/**
 * @description Display a dialog for the user to choose a directory.
 * @returns The path of the directory selected by the user (if the user does not cancel), otherwise an empty string.
 * @param title - The title of the dialog box.
 * @param desc - Unused; retained for backward compatibility.
 * @param startWith - The directory that the dialog will start in.
 * @param parent - The parent widget for the directory dialog.
*/
	doDirectoryDialog(title:String, desc:String, startWith:String, parent:DzWidget):String {
	
	};
	/**
 * @description Display a dialog for the user to choose a file.
 * @returns The path of the file selected by the user (if the user does not cancel), otherwise an empty string.
 * @param open - If true, displays an open file dialog, otherwise displays a save file dialog.
 * @param title - The title of the dialog box.
 * @param startWith - The starting directory (can include a default file name).
 * @param filter - The file name filter; e.g., "TIFF files (*.tif *.tiff); JPEG files (*.jpg)".
 * @param selectedFilter - If not null, its value is set to the index of the filter that corresponds to the selected file.
 * @param parent - The parent widget for the file dialog.
*/
	doFileDialog(open:Boolean, title:String, startWith:String, filter:String, selectedFilter:Number, parent:DzWidget):String {
	
	};
	/**
 * @description A convenience file dialog that automatically creates a filter list for all image formats the application can import/export and displays a file open/save dialog.
 * @returns The path of the file selected by the user (if the user does not cancel), otherwise an empty string.
 * @param open - If true, displays an open image dialog, otherwise displays a save image dialog.
 * @param startWith - The starting directory; can include a default file name.
 * @param parent - The parent widget for the file dialog.
*/
	doImageDialog(open:Boolean, startWith:String, parent:DzWidget):String {
	
	};
	/**
 * @description A convenience file dialog that automatically creates a filter list for all video formats the application can export and displays a file save dialog.
 * @returns The path of the file selected by the user (if the user does not cancel), otherwise an empty string.
 * @param startWith - The starting directory; can include a default file name.
 * @param parent - The parent widget for the file dialog.
*/
	doVideoClipSaveDialog(startWith:String, parent:DzWidget):String {
	
	};
	/**
 * @description Shows an open file dialog to the user that allows selection of multiple files.
 * @returns A list of paths for the files selected by the user (if the user does not cancel), otherwise an empty list.
 * @param dir - The directory that the dialog will start with.
 * @param filter - The file name filter; e.g., "TIFF files (*.tif *.tiff); JPEG files (*.jpg)".
 * @param title - The title of the dialog.
 * @param parent - The parent widget of the dialog.
*/
	getOpenFileNames(dir:String, filter:String, title:String, parent:DzWidget):Array {
	
	};

}
/**
 * @classdesc For each group of files that you want to make available to the user, create a new filter with the newFilter() call, then add one or more file extensions to be accepted by the filter.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/filefilter_dz} */
class DzFileFilter extends QObject {
	/**
 * @description Default Constructor.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Creates a new file filter and adds a filter with the given description and extensions.
 * @param description - The description of the filter.
 * @param extensions - The list of extensions for the filter.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Creates a new file filter and adds a filter with the given description and extension.
 * @param description - The description of the filter.
 * @param extension - The extension for the filter.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Adds a file extension to the current filter.
 * @param extension - A file extension that this filter will open/save e.g. "duf"
*/
	addExtension(extension:String):void {
	
	};
	/**
 * @description Adds file extensions to the current filter.
 * @param extensions - A list of file extensions that this filter will open/save
*/
	addExtensions(extensions:Array):void {
	
	};
	/**
 * @returns The default filter index, returns -1 if no default is set.
*/
	getDefaultFilter():Number {
	
	};
	/**
 * @returns The extension of the filter at the given index.
 * @param filterIdx - The index of the filter to return an extension for.
 * @param extensionIdx - The index of the extension to return.
*/
	getExtension(filterIdx:Number, extensionIdx:Number):String {
	
	};
	/**
 * @returns The description of the filter at the given index.
 * @param filterIdx - The index of the filter to return a description for.
*/
	getFilterDescription(filterIdx:Number):String {
	
	};
	/**
 * @returns The number of extensions in the filter at the given index.
 * @param filterIdx - The index of the filter to get the number of extensions for.
*/
	getNumExtensions(filterIdx:Number):Number {
	
	};
	/**
 * @returns The number of filters.
*/
	getNumFilters():Number {
	
	};
	/**
 * @description Starts a new filter with the given description.
 * @param description - The description of files this filter will open/save e.g. "DAZ Studio files"
*/
	newFilter(description:String):void {
	
	};
	/**
 * @description Sets the default filter index - by default this is 0.
 * @param filterIdx - The index of the filter to become the default - if the index is invalid the default is not changed.
*/
	setDefaultFilter(filterIdx:Number):void {
	
	};

}
/**
 * @classdesc Provides access to getting information about files. It also serves as the base class for the other DAZ Script File I/O types.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/fileinfo_dz} */
class DzFileInfo extends QObject {
	/**
 * @description ENUMERATOR: The file is readable by the owner of the file.
*/
	
	static ReadOwner;
	/**
 * @description ENUMERATOR: The file is writable by the owner of the file.
*/
	
	static WriteOwner;
	/**
 * @description ENUMERATOR: The file is executable by the owner of the file.
*/
	
	static ExeOwner;
	/**
 * @description ENUMERATOR: The file is readable by the user.
*/
	
	static ReadUser;
	/**
 * @description ENUMERATOR: The file is writable by the user.
*/
	
	static WriteUser;
	/**
 * @description ENUMERATOR: The file is executable by the user.
*/
	
	static ExeUser;
	/**
 * @description ENUMERATOR: The file is readable by the group.
*/
	
	static ReadGroup;
	/**
 * @description ENUMERATOR: The file is writable by the group.
*/
	
	static WriteGroup;
	/**
 * @description ENUMERATOR: The file is executable by the group.
*/
	
	static ExeGroup;
	/**
 * @description ENUMERATOR: The file is readable by anyone.
*/
	
	static ReadOther;
	/**
 * @description ENUMERATOR: The file is writable by anyone.
*/
	
	static WriteOther;
	/**
 * @description ENUMERATOR: The file is executable by anyone.
*/
	
	static ExeOther;
	/**
 * @description Creates a file info object to retrieve information about the given file.
 * @param file - The path of the file.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Deprecated
*/
	absFileName():String {
	
	};
	/**
 * @returns The file's absolute path as a DzDir object.
 * @since 4.9.3.35
*/
	absoluteDir():DzDir {
	
	};
	/**
 * @returns The absolute path of the file, including the file name.
 * @since 4.9.3.29
*/
	absoluteFilePath():String {
	
	};
	/**
 * @returns The absolute path of the file, excluding the file name.
 * @since 4.9.3.29
*/
	absolutePath():String {
	
	};
	/**
 * @description Deprecated
*/
	baseName():String {
	
	};
	/**
 * @returns On Mac OS X, the proper localized name for a bundle if the path isBundle(). On all other platforms an empty string.
 * @since 4.9.3.29
*/
	bundleName():String {
	
	};
	/**
 * @returns true if caching is enabled, otherwise false.
 * @since 4.9.3.29
*/
	caching():Boolean {
	
	};
	/**
 * @returns The canonical path including the file name, i.e. an absolute path without symbolic links or redundant "." or ".." elements. If the file does not exist, returns an empty string.
 * @since 4.9.3.29
*/
	canonicalFilePath():String {
	
	};
	/**
 * @returns The canonical path excluding the file name, i.e. an absolute path without symbolic links or redundant "." or ".." elements. If the file does not exist, returns an empty string.
 * @since 4.9.3.29
*/
	canonicalPath():String {
	
	};
	/**
 * @returns The file name excluding the last '.' and extension.
 * @since 4.9.3.29
*/
	completeBaseName():String {
	
	};
	/**
 * @returns All characters in the file name after (but not including) the first ".".
 * @since 4.9.3.29
*/
	completeSuffix():String {
	
	};
	/**
 * @returns The date and time the file was created.
*/
	created():Date {
	
	};
	/**
 * @returns The path of the object's parent directory as a DzDir object.
 * @since 4.9.3.35
*/
	dir():DzDir {
	
	};
	/**
 * @returns true if the file exists on the disk.
*/
	exists():Boolean {
	
	};
	/**
 * @description Deprecated
*/
	extension():String {
	
	};
	/**
 * @returns The name of the file, excluding the path.
*/
	fileName():String {
	
	};
	/**
 * @returns The file name, including the path (which may be absolute or relative).
 * @since 4.9.3.29
*/
	filePath():String {
	
	};
	/**
 * @returns true if the file path is absolute, otherwise false.
 * @since 4.9.3.29
*/
	isAbsolute():Boolean {
	
	};
	/**
 * @returns true if this object points to a bundle or to a symbolic link to a bundle on Mac OS X, otherwise false.
 * @since 4.9.3.29
*/
	isBundle():Boolean {
	
	};
	/**
 * @returns true if this object points to a directory or to a symbolic link to a directory, otherwise false.
 * @since 4.9.3.29
*/
	isDir():Boolean {
	
	};
	/**
 * @returns true if this object points to file that is executable, otherwise false.
 * @since 4.9.3.29
*/
	isExecutable():Boolean {
	
	};
	/**
 * @returns true if this object points to a file or to a symbolic link to a file, otherwise false (e.g., a directory).
 * @since 4.9.3.29
*/
	isFile():Boolean {
	
	};
	/**
 * @returns true if the file is 'hidden', otherwise false.
*/
	isHidden():Boolean {
	
	};
	/**
 * @returns true if the file is readable by the user, otherwise false.
*/
	isReadable():Boolean {
	
	};
	/**
 * @returns true if the file path is relative, otherwise false.
 * @since 4.9.3.29
*/
	isRelative():Boolean {
	
	};
	/**
 * @returns true if the object points to a directory or to a symbolic link to a directory, and that directory is the root directory, otherwise false.
 * @since 4.9.3.29
*/
	isRoot():Boolean {
	
	};
	/**
 * @returns true if this object points to a symbolic link (shortcut on Windows), otherwise false.
 * @since 4.9.3.29
*/
	isSymLink():Boolean {
	
	};
	/**
 * @returns true if the file is writable by the user, otherwise false.
*/
	isWritable():Boolean {
	
	};
	/**
 * @returns The date and time the file was last modified.
*/
	lastModified():Date {
	
	};
	/**
 * @returns The date and time the file was last accessed.
*/
	lastRead():Date {
	
	};
	/**
 * @description Converts the file's path to an absolute path if it is not already in that form.
 * @returns true if the path was converted, otherwise false.
 * @since 4.9.3.29
*/
	makeAbsolute():Boolean {
	
	};
	/**
 * @returns The absolute path of the file.
*/
	path():String {
	
	};
	/**
 * @description Tests for file permissions. The permissions argument can be several Permissions OR-ed together to check for permission combinations.
 * @returns true if the file has the permissions specified, otherwise false.
 * @since 4.9.3.35
*/
	permission(permissions:Permissions):Boolean {
	
	};
	/**
 * @returns The complete OR-ed together combination of Permissions for the file.
 * @since 4.9.3.29
*/
	permissions():Permissions {
	
	};
	/**
 * @description Refreshes information about the file, i.e. reads in information from the file system the next time a cached property is fetched.
 * @since 4.9.3.29
*/
	refresh():void {
	
	};
	/**
 * @description Delete the file from the disk.
 * @returns true if successful, otherwise false.
*/
	remove():Boolean {
	
	};
	/**
 * @description Sets whether or not caching of file information caching is enabled. When caching is enabled, file information is read from the file system the first time it's needed, but generally not later.
 * @since 4.9.3.29
*/
	setCaching(enable:Boolean):void {
	
	};
	/**
 * @description Sets the file to provide information about to file in dir.
 * @since 4.9.3.29
*/
	setFile(dir:DzDir, file:String):void {
	
	};
	/**
 * @description Sets the file to provide information about to file.
 * @since 4.9.3.29
*/
	setFile(file:DzFile):void {
	
	};
	/**
 * @description Sets the file to provide information about to file.
 * @since 4.9.3.29
*/
	setFile(file:String):void {
	
	};
	/**
 * @returns The file size in bytes. If the file does not exist or cannot be fetched, 0 is returned.
*/
	size():Number {
	
	};
	/**
 * @returns The file size in bytes, formatted in an easy-to-read manner.
*/
	sizeStr():String {
	
	};
	/**
 * @returns All characters in the file after, but not including, the last '.'.
 * @since 4.9.3.29
*/
	suffix():String {
	
	};
	/**
 * @returns The absolute path that the file or directory a symbolic link (shortcut on Windows) points to, or a an empty string if the object is not a symbolic link.
 * @since 4.9.3.29
*/
	symLinkTarget():String {
	
	};

}
/**
 * @classdesc 
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/fileio_dz} */
class DzFileIO extends DzBase {
	/**
 * @description Holds whether or not the options for the importer/exporter has been shown.
	*/
	optionsShown:Boolean;
	/**
 * @description Gets the default options for an I/O operation.
 * @param options - The settings object that the selected options will be added to.
*/
	getDefaultOptions(options:DzFileIOSettings):void {
	
	};
	/**
 * @description Gets the options for an I/O operation.
 * @returns if options has been updated, otherwise false.
 * @param options - The settings object that the selected options will be added to.
 * @param useInterface - If true and the importer/exporter implements the getOptionsFrame() virtual member function, the options interface for the importer/exporter will be displayed to the user. If false, the default (or last-used) options will be added to or updated in options.
 * @param filename - The path of a file to be used by the options; usage varies.
*/
	getOptions(options:DzFileIOSettings, useInterface:Boolean, filename:String):Boolean {
	
	};
	/**
 * @returns true if this importer/exporter should display an options dialog by default, otherwise false.
*/
	showOptions():Boolean {
	
	};

}
/**
 * @classdesc Responsible for managing presets in the form of DzFileIOSettings objects for various importers, exporters, and other forms of file I/O.
There is only one instance of this manager in an application. This instance is created and owned by DzApp. Request the instance via DzApp.getFileIOPresetMgr().
File I/O presets are defined by a unique name. They have two types of settings: Specific Settings and Common Settings.
Specific Settings

 Specific settings are tied to a class name. This class name is typically, but not always, the name of an importer or exporter, such as "DzObjImporter" or "DzObjExporter." The key values for specific settings will vary based on the class.
Common Settings

 Common settings for a preset are common to all class names. These include settings that define scale values and axis settings. Common keys can be accessed via the following methods:  * getLateralAxisKey()
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/fileiopresetmgr_dz} */
class DzFileIOPresetMgr extends QObject {
	/**
 * @description TODO:
Add description.
*/
	getAllCurrentSettings(className:String, settings:DzFileIOSettings):Boolean {
	
	};
	/**
 * @description TODO:
Add description.
*/
	getAllDefaults(className:String, settings:DzFileIOSettings):Boolean {
	
	};
	/**
 * @description TODO:
Add description.
*/
	getAllSettings(presetName:String, className:String, settings:DzFileIOSettings):Boolean {
	
	};
	/**
 * @returns the available classes (typically importers or exporters) of the given preset
 * @param presetName - The name of the preset to get available classes for.
*/
	getAvailableClasses(presetName:String):Array {
	
	};
	/**
 * @returns the available presets for the given class name
 * @param className - The name of the class to get available presets for. This is typically, but not always, the name of an importer or exporter, such as "DzObjImporter." If className is empty, returns all presets
*/
	getAvailablePresets(className:String):Array {
	
	};
	/**
 * @description TODO:
Add description.
*/
	getCommonApplicationDefaults(settings:DzFileIOSettings):void {
	
	};
	/**
 * @description TODO:
Add description.
*/
	getCommonDefaults(className:String, settings:DzFileIOSettings):Boolean {
	
	};
	/**
 * @description Populates settings with the values for common to all presets named presetName
 * @returns true if successful, false if presetName does not represent a valid preset
 * @param presetName - The name of the preset to get common settings for
 * @param settings - The settings object to populate with preset values
*/
	getCommonSettings(presetName:String, className:String, settings:DzFileIOSettings):Boolean {
	
	};
	/**
 * @description TODO:
Add description.
*/
	getCurrentCommonSettings(className:String, settings:DzFileIOSettings):Boolean {
	
	};
	/**
 * @description TODO:
Add description.
*/
	getCurrentSpecificSettings(className:String, settings:DzFileIOSettings):Boolean {
	
	};
	/**
 * @returns The name of the custom preset
*/
	getCustomPresetLabel():String {
	
	};
	/**
 * @returns The key for the depth axis common setting
*/
	getDepthAxisKey():String {
	
	};
	/**
 * @returns The key for the invert depth axis common setting
*/
	getInvertDepthAxisKey():String {
	
	};
	/**
 * @returns The key for the invert lateral axis common setting
*/
	getInvertLateralAxisKey():String {
	
	};
	/**
 * @returns The key for the invert vertical axis common setting
*/
	getInvertVerticalAxisKey():String {
	
	};
	/**
 * @returns The key for the lateral axis common setting
*/
	getLateralAxisKey():String {
	
	};
	/**
 * @returns the id of the preset with the given name, or an -1 if the preset does not exist. Will also return -1 even if the preset exists when className is not empty and the given preset does not have settings for that specific class.
 * @param String - The name of the desired preset
 * @param className - The optional class name for the given preset. If not passed in or empty then the method will not take into account whether the preset has settings for the given class name.
*/
	getPresetID(presetName:String, className:String):Number {
	
	};
	/**
 * @returns the name of the preset with the given id, or an empty string if the preset does not exist. Will also return an empty string even if the preset exists when className is not empty and the given preset does not have settings for that specific class.
 * @param id - The id of the desired preset
 * @param className - The optional class name for the given preset. If not passed in or empty then the method will not take into account whether the preset has settings for the given class name.
*/
	getPresetName(id:Number, className:String):String {
	
	};
	/**
 * @description Note:
 * @returns The key for the scale common setting
*/
	getScaleKey():String {
	
	};
	/**
 * @description TODO:
Add description.
*/
	getSpecificDefaults(className:String, settings:DzFileIOSettings):Boolean {
	
	};
	/**
 * @description TODO:
Add description.
*/
	getSpecificSettings(presetName:String, className:String, settings:DzFileIOSettings):Boolean {
	
	};
	/**
 * @returns the available system-defined presets for the given class name
 * @param className - The name of the class to get available presets for. This is typically, but not always, the name of an importer or exporter, such as "DzObjImporter." If className is empty, returns all system presets
*/
	getSystemPresets(className:String):Array {
	
	};
	/**
 * @returns the available user-defined presets for the given class name
 * @param className - The name of the class to get available presets for. This is typically, but not always, the name of an importer or exporter, such as "DzObjImporter." If className is empty, returns all user presets
*/
	getUserPresets(className:String):Array {
	
	};
	/**
 * @returns The key for the vertical axis common setting
*/
	getVerticalAxisKey():String {
	
	};
	/**
 * @returns true if the preset is a system preset, false if it is a user preset or does not exist
 * @param presetName - The name of the preset to check
*/
	isSystemPreset(presetName:String):Boolean {
	
	};
	/**
 * @returns true if the preset is a user preset, false if it is a system preset or does not exist
 * @param presetName - The name of the preset to check
*/
	isUserPreset(presetName:String):Boolean {
	
	};
	/**
 * @returns true if the given preset exists, false otherwise
 * @param id - The id of the preset to check
 * @param className - The optional class name for the given preset. If not passed in or empty then the check will not take into account whether the preset has settings for the given class name
*/
	presetExists(id:Number, className:String):Boolean {
	
	};
	/**
 * @returns true if the given preset exists, false otherwise
 * @param presetName - The name of the preset to check
 * @param className - The optional class name for the given preset. If not passed in or empty then the check will not take into account whether the preset has settings for the given class name
*/
	presetExists(presetName:String, className:String):Boolean {
	
	};
	/**
 * @description Attempts to remove the preset with the given preset name and class name.
 * @returns true if successful, false if the preset could not be removed
*/
	removeUserPreset(presetName:String, className:String):Boolean {
	
	};
	/**
 * @description Attempts to save a user preset with the given preset name and class name
 * @returns true if the preset was saved, false otherwise
 * @param presetName - The name of the preset to save
 * @param className - The name of the class to save settings for presetName
 * @param keepCommonSettings - If a preset named presetName already exists, this settings determines what to do with common settings in the settings parameter. If true, the existing common settings will be kept and those in the settings will be ignored.
 * @param keepSpecificSettings - If a preset presetName and className already exists, this setting determines what to do with the specific settings. If true, the specific settings will remain unchanged.
 * @param settings - The settings to associate with the new preset
*/
	saveUserPreset(presetName:String, className:String, keepCommonSettings:Boolean, settings:DzFileIOSettings):Boolean {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when a preset is added
 * @signature `presetRemoved(const QString&, const QSring&)`
 * @event
*/
	presetAdded(presetName:String, className:String):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description TODO: Add Description
 * @signature `presetLoadFinished()`
 * @event
*/
	presetLoadFinished():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when a preset is removed
 * @signature `presetRemoved(const QString&, const QSring&)`
 * @event
*/
	presetRemoved(presetName:String, className:String):void {
	
	};

}
/**
 * @classdesc TODO:
Add detailed description.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/fileiosettings_dz} */
class DzFileIOSettings extends DzSettings {
	/**
 * @description Default Constructor - creates an empty set of options
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Copy constructor.
 * @param settings - The settings object to copy data from.
 * @constructor
*/
	constructor() {
	
	};

}
/**
 * @classdesc TODO:
Add detailed description.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/fileproperty_dz} */
class DzFileProperty extends DzStringProperty {
	/**
 * @description ENUMERATOR: The user will be prompted with a 'Save As' type dialog when browsing for a file.
*/
	
	static FileSave;
	/**
 * @description ENUMERATOR: The user will be prompted with an 'Open' type dialog when browsing for a file.
*/
	
	static FileOpen;
	/**
 * @description ENUMERATOR: The user will be prompted with a 'Select Folder' type dialog when browsing for a directory.
*/
	
	static Dir;
	/**
 * @description Default Constructor. Creates a non-user property.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @param name - The name of this property.
 * @param isUserProperty - If true, creates a user property; user properties are properties that can be added/deleted by users.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @returns The absolute path of the file specified by the given path
 * @param path - The (relative) path of the file.
*/
	getAbsolutePath(path:String):String {
	
	};
	/**
 * @description Gets the filter value.
*/
	getFilter():String {
	
	};
	/**
 * @description Gets the file type.
*/
	getType():FileType {
	
	};
	/**
 * @description Sets the value to use as a file extension filter.
 * @param filter - The filter to set. This should be in the form "FilterName (*.ext1 *.ext2 *.ext3)".
 * @attention If this property is of the type SaveFile, and if the save file is not given an extension by the user, then the first extension listed will be added to the filename. The filter is not checked if setValue() is used.
*/
	setFilter(filter:String):void {
	
	};
	/**
 * @description Sets the file type for the property.
 * @param type - The file type to set.
*/
	setType(type:FileType):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the filter for the property changes.
 * @signature `"filterChanged()"`
 * @event
*/
	filterChanged():void {
	
	};

}
/**
 * @classdesc Deprecated
Exists only to keep code written prior to 4.6.2.23 working. Do not use in new code. Use DzTextureComponent instead.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/flipmanip_dz} */
class DzFlipManip extends  {
	/**
 * @returns true if the image will be flipped horizontally, false if the image is not flipped horizontally.
*/
	flipHorizontal():Boolean {
	
	};
	/**
 * @returns true if the image will be flipped vertically, false if the image is not flipped vertically.
*/
	flipVertical():Boolean {
	
	};
	/**
 * @description Sets whether or not the image is flipped horizontally.
 * @param onOff - If true, the image will be flipped horizontally, otherwise the image is not flipped horizontally.
*/
	setFlipHorizontal(onOff:Boolean):void {
	
	};
	/**
 * @description Sets whether or not the image is flipped vertically.
 * @param onOff - If true, the image will be flipped vertically, otherwise the image is not flipped vertically.
*/
	setFlipVertical(onOff:Boolean):void {
	
	};

}
/**
 * @classdesc This class provides an animatable floating-point property with 2 values that is stored and can be accessed as a DzVec2.
Since:
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/float2property_dz} */
class DzFloat2Property extends DzFloatProperty {
	/**
 * @description Default Constructor. Creates a non-animatable, non-user property.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @param name - The name of this property.
 * @param canAnimate - If true, creates an animatable property.
 * @param isUserProperty - If true, creates a user property; user properties are properties that can be added/deleted by users.
 * @param defaultVal - Sets the default value of this property.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @param name - The name of this property.
 * @param canAnimate - If true, creates an animatable property.
 * @param isUserProperty - If true, creates a user property; user properties are properties that can be added/deleted by users.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Adjust the value of the property based on the contribution of property controllers.
 * @returns A 'raw' value for the property that will result in the property having the given value with the current controllers.
 * @param val - The 'final' value desired for the property.
*/
	adjustFloat2Value(val:DzVec2):DzVec2 {
	
	};
	/**
 * @description Adjust the value of the property at the given time based on the contribution of property controllers.
 * @returns A 'raw' value for the property that will result in the property having the given value with the current controllers.
 * @param tm - The scene time at which to adjust the value.
 * @param val - The 'final' value desired for the property.
*/
	adjustFloat2Value(tm:DzTime, val:DzVec2):DzVec2 {
	
	};
	/**
 * @returns The default value of the property.
*/
	getDefaultFloat2Value():DzVec2 {
	
	};
	/**
 * @returns The difference between the current value of the follow property and its default value at the current time. If no auto-follow property is set, or auto-follow is not enabled for this property, then this method returns 0.
*/
	getFloat2FollowValue():DzVec2 {
	
	};
	/**
 * @returns The difference between the current value of the follow property and this properties default value tm. If no auto-follow property is set, or auto-follow is not enabled for this property, then this method returns 0.
 * @param tm - The scene time for which to get the value.
*/
	getFloat2FollowValue(tm:DzTime):DzVec2 {
	
	};
	/**
 * @returns The value of the property at the current time.
*/
	getFloat2Value():DzVec2 {
	
	};
	/**
 * @returns The value of the property at the given time.
 * @param tm - The scene time to get the value for.
*/
	getFloat2Value(tm:DzTime):DzVec2 {
	
	};
	/**
 * @returns The value of the i'th key in the property.
 * @param index - The index of the key to get the value for.
*/
	getKeyFloat2Value(i:Number):DzVec2 {
	
	};
	/**
 * @description This function is provided for the special case of ERC link redirection; sometimes called 'cross-talk'. For example, if Figure A (a piece of clothing, for example) is 'Fit To' Figure B, the ERC links on Figure A are redirected to follow channels on Figure B; this is how morphs on an item of clothing will follow morphs on the figure, etc. This function will provide the value of the property ignoring any redirection of ERC links. So, for a figure that is not 'Fit To' another figure, this will return the same value as getValue(). For a figure that is 'Fit To' another figure, this will return the value that the property would have if the ERC link had not been redirected.
 * @returns The value of the property at the current time without any ERC link redirection.
*/
	getLocalFloat2Value():DzVec2 {
	
	};
	/**
 * @description This function is provided for the special case of ERC link redirection; sometimes called 'cross-talk'. For example, if Figure A (a piece of clothing, for example) is 'Fit To' Figure B, the ERC links on Figure A are redirected to follow channels on Figure B; this is how morphs on an item of clothing will follow morphs on the figure, etc. This function will provide the value of the property ignoring any redirection of ERC links. So, for a figure that is not 'Fit To' another figure, this will return the same value as getValue(). For a figure that is 'Fit To' another figure, this will return the value that the property would have if the ERC link had not been redirected.
 * @returns The value of the property at the given time without any ERC link redirection.
 * @param tm - The scene time to get the local value for.
*/
	getLocalFloat2Value(tm:DzTime):DzVec2 {
	
	};
	/**
 * @description This function is provided to make it easy to get the 'keyed' value of the property without any modifications. When the value of a property is evaluated, first the value based on key interpolation is calculated, that value is then passed to each of the controllers on the property (ERC links for example) which can modify that value. This modified value is then returned as the value of the property by getFloat2Value(). This function returns the value of the property before the application of the controllers; strictly the result of key interpolation.
 * @returns The 'raw' value of the property at the given time - this is the actual value of the property without the contribution of property links, etc.
 * @param tm - The scene time to get the raw value for.
*/
	getRawFloat2Value(tm:DzTime):DzVec2 {
	
	};
	/**
 * @description This function is provided to make it easy to get the 'keyed' value of the property without any modifications. When the value of a property is evaluated, first the value based on key interpolation is calculated, that value is then passed to each of the controllers on the property (ERC links for example) which can modify that value. This modified value is then returned as the value of the property by getFloat2Value(). This function returns the value of the property before the application of the controllers; strictly the result of key interpolation.
 * @returns The 'raw' value of the property at the current time; this is the actual value of the property without the contribution of property links, etc.
*/
	getRawFloat2Value():DzVec2 {
	
	};
	/**
 * @description Sets the default value for this property.
 * @param val - The value to set the property to.
*/
	setDefaultFloat2Value(val:DzVec2):void {
	
	};
	/**
 * @description Sets the value for this property at the given time; or the default value if this property is not animatable.
 * @param tm - The scene time to set the value at.
 * @param val - The value to set the property to.
*/
	setFloat2Value(tm:DzTime, val:DzVec2):void {
	
	};
	/**
 * @description Sets the value for this property at the current time; or the default value if this property is not animatable.
 * @param val - The value to set the property to.
*/
	setFloat2Value(val:DzVec2):void {
	
	};
	/**
 * @description Sets the value for this property at the given time; or the default value if this property is not animatable.
 * @param tm - The scene time to set the value at.
 * @param val - The value to set the property to.
 * @param interp - The type of interpolation to perform between this keyframe and the next. Parameters for interpolation are set to defaults.
*/
	setFloat2Value(tm:DzTime, val:DzVec2, interp:InterpolationType):void {
	
	};
	/**
 * @description Sets the value for this property at the given time; or the default value if this property is not animatable.
 * @param tm - The scene time to set the value at.
 * @param valIn - The value to set the property to.
 * @param interp - The type of interpolation to perform between this keyframe and the next.
 * @param param0 - The parameter 0 for key interpolation: T value for TCB interpolation, starting slope value for Hermite interpolation.
 * @param param1 - The parameter 1 for key interpolation: C value for TCB interpolation, ending slope value for Hermite interpolation.
 * @param param2 - The parameter 2 for key interpolation: B value for TCB interpolation
*/
	setFloat2Value(tm:DzTime, valIn:DzVec2, interp:InterpolationType, param0:Number, param1:Number, param2:Number):void {
	
	};
	/**
 * @description Sets the value of the i'th key.
 * @param i - The index of the key to change.
 * @param val - The new value for the key.
 * @attention You are responsible to ensure the key indices are within the valid range.
*/
	setKeyFloat2Value(i:Number, val:DzVec2):void {
	
	};

}
/**
 * @classdesc This class provides an animatable floating-point property with 3 values that is stored and can be accessed as a DzVec3.
Since:
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/float3property_dz} */
class DzFloat3Property extends DzFloatProperty {
	/**
 * @description Default Constructor. Creates a non-animatable, non-user property.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @param name - The name of this property.
 * @param canAnimate - If true, creates an animatable property.
 * @param isUserProperty - If true, creates a user property; user properties are properties that can be added/deleted by users.
 * @param defaultVal - Sets the default value of this property.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @param name - The name of this property.
 * @param canAnimate - If true, creates an animatable property.
 * @param isUserProperty - If true, creates a user property; user properties are properties that can be added/deleted by users.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Adjust the value of the property based on the contribution of property controllers.
 * @returns A 'raw' value for the property that will result in the property having the given value with the current controllers.
 * @param val - The 'final' value desired for the property.
*/
	adjustFloat3Value(val:DzVec3):DzVec3 {
	
	};
	/**
 * @description Adjust the value of the property at the given time based on the contribution of property controllers.
 * @returns A 'raw' value for the property that will result in the property having the given value with the current controllers.
 * @param tm - The scene time at which to adjust the value.
 * @param val - The 'final' value desired for the property.
*/
	adjustFloat3Value(tm:DzTime, val:DzVec3):DzVec3 {
	
	};
	/**
 * @returns The default value of the property.
*/
	getDefaultFloat3Value():DzVec3 {
	
	};
	/**
 * @returns The difference between the current value of the follow property and its default value at the current time. If no auto-follow property is set, or auto-follow is not enabled for this property, then this method returns 0.
*/
	getFloat3FollowValue():DzVec3 {
	
	};
	/**
 * @returns The difference between the current value of the follow property and this properties default value tm. If no auto-follow property is set, or auto-follow is not enabled for this property, then this method returns 0.
 * @param tm - The scene time for which to get the value.
*/
	getFloat3FollowValue(tm:DzTime):DzVec3 {
	
	};
	/**
 * @returns The value of the property at the current time.
*/
	getFloat3Value():DzVec3 {
	
	};
	/**
 * @returns The value of the property at the given time.
 * @param tm - The scene time to get the value for.
*/
	getFloat3Value(tm:DzTime):DzVec3 {
	
	};
	/**
 * @returns The value of the i'th key in the property.
 * @param index - The index of the key to get the value for.
*/
	getKeyFloat3Value(i:Number):DzVec3 {
	
	};
	/**
 * @description This function is provided for the special case of ERC link redirection; sometimes called 'cross-talk'. For example, if Figure A (a piece of clothing, for example) is 'Fit To' Figure B, the ERC links on Figure A are redirected to follow channels on Figure B; this is how morphs on an item of clothing will follow morphs on the figure, etc. This function will provide the value of the property ignoring any redirection of ERC links. So, for a figure that is not 'Fit To' another figure, this will return the same value as getValue(). For a figure that is 'Fit To' another figure, this will return the value that the property would have if the ERC link had not been redirected.
 * @returns The value of the property at the current time without any ERC link redirection.
*/
	getLocalFloat3Value():DzVec3 {
	
	};
	/**
 * @description This function is provided for the special case of ERC link redirection; sometimes called 'cross-talk'. For example, if Figure A (a piece of clothing, for example) is 'Fit To' Figure B, the ERC links on Figure A are redirected to follow channels on Figure B; this is how morphs on an item of clothing will follow morphs on the figure, etc. This function will provide the value of the property ignoring any redirection of ERC links. So, for a figure that is not 'Fit To' another figure, this will return the same value as getValue(). For a figure that is 'Fit To' another figure, this will return the value that the property would have if the ERC link had not been redirected.
 * @returns The value of the property at the given time without any ERC link redirection.
 * @param tm - The scene time to get the local value for.
*/
	getLocalFloat3Value(tm:DzTime):DzVec3 {
	
	};
	/**
 * @description This function is provided to make it easy to get the 'keyed' value of the property without any modifications. When the value of a property is evaluated, first the value based on key interpolation is calculated, that value is then passed to each of the controllers on the property (ERC links for example) which can modify that value. This modified value is then returned as the value of the property by getFloat3Value(). This function returns the value of the property before the application of the controllers; strictly the result of key interpolation.
 * @returns The 'raw' value of the property at the given time - this is the actual value of the property without the contribution of property links, etc.
 * @param tm - The scene time to get the raw value for.
*/
	getRawFloat3Value(tm:DzTime):DzVec3 {
	
	};
	/**
 * @description This function is provided to make it easy to get the 'keyed' value of the property without any modifications. When the value of a property is evaluated, first the value based on key interpolation is calculated, that value is then passed to each of the controllers on the property (ERC links for example) which can modify that value. This modified value is then returned as the value of the property by getFloat3Value(). This function returns the value of the property before the application of the controllers; strictly the result of key interpolation.
 * @returns The 'raw' value of the property at the current time; this is the actual value of the property without the contribution of property links, etc.
*/
	getRawFloat3Value():DzVec3 {
	
	};
	/**
 * @description Sets the default value for this property.
 * @param val - The value to set the property to.
*/
	setDefaultFloat3Value(val:DzVec3):void {
	
	};
	/**
 * @description Sets the value for this property at the given time; or the default value if this property is not animatable.
 * @param tm - The scene time to set the value at.
 * @param val - The value to set the property to.
*/
	setFloat3Value(tm:DzTime, val:DzVec3):void {
	
	};
	/**
 * @description Sets the value for this property at the current time; or the default value if this property is not animatable.
 * @param val - The value to set the property to.
*/
	setFloat3Value(val:DzVec3):void {
	
	};
	/**
 * @description Sets the value for this property at the given time; or the default value if this property is not animatable.
 * @param tm - The scene time to set the value at.
 * @param val - The value to set the property to.
 * @param interp - The type of interpolation to perform between this keyframe and the next. Parameters for interpolation are set to defaults.
*/
	setFloat3Value(tm:DzTime, val:DzVec3, interp:InterpolationType):void {
	
	};
	/**
 * @description Sets the value for this property at the given time; or the default value if this property is not animatable.
 * @param tm - The scene time to set the value at.
 * @param valIn - The value to set the property to.
 * @param interp - The type of interpolation to perform between this keyframe and the next.
 * @param param0 - The parameter 0 for key interpolation: T value for TCB interpolation, starting slope value for Hermite interpolation.
 * @param param1 - The parameter 1 for key interpolation: C value for TCB interpolation, ending slope value for Hermite interpolation.
 * @param param2 - The parameter 2 for key interpolation: B value for TCB interpolation
*/
	setFloat3Value(tm:DzTime, valIn:DzVec3, interp:InterpolationType, param0:Number, param1:Number, param2:Number):void {
	
	};
	/**
 * @description Sets the value of the i'th key.
 * @param i - The index of the key to change.
 * @param val - The new value for the key.
 * @attention You are responsible to ensure the key indices are within the valid range.
*/
	setKeyFloat3Value(i:Number, val:DzVec3):void {
	
	};

}
/**
 * @classdesc 
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/floatcolor_dz} */
class DzFloatColor extends Object {
	/**
 * @description Holds the alpha value for the color. Should be in the [0,1] range.
	*/
	alpha:String;
	/**
 * @description Holds the blue value for the color. Should be in the [0,1] range.
	*/
	blue:String;
	/**
 * @description Holds the green value for the color. Should be in the [0,1] range.
	*/
	green:String;
	/**
 * @description Holds the red value for the color. Should be in the [0,1] range.
	*/
	red:String;
	/**
 * @description Default constructor. Initializes a new color to opaque black.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Creates a floating point color by parsing a string.
 * @param color - A string representation of the float color in the form "[ red, green, blue, alpha ]"
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Constructor that takes individual floating-point RGBA components. Initializes the color to the given values. Values should be in the [0,1] range.
 * @param r - The red value for the color
 * @param g - The green value for the color
 * @param b - The blue value for the color
 * @param a - The alpha value for the color
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Constructor that creates an achromatic color.
 * @param val - The value to use for each color component.
 * @param alpha - The value to use for the alpha component.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Constructor that takes a floating-point array to define RGBA colors. Initializes the color to the given values.
 * @param color - An array of float values for the color. The array can have 1, 2, 3 or 4 float values. The length of the array has meanings that correspond with the other constructors. Values should be in the [0,1] range.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Constructor that takes a QColor. Initializes the color to the given color. The color is assumed to be completely opaque.
 * @param color - The color value to copy into this color.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Copy Constructor.
 * @param color - The color object to copy.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Modifies the color such that the value of no component is less than min and no more than max.
 * @param min - The minimum value to allow in each component of the color.
 * @param max - The maximum value to allow in each component of the color.
 * @param includeAlpha - If true, the alpha component is also clamped.
*/
	clamp(min:Number, max:Number, includeAlpha:Boolean):void {
	
	};
	/**
 * @returns A copy of this color where the value of no component is less than min and no more than max.
 * @param min - The minimum value to allow in each component of the color.
 * @param max - The maximum value to allow in each component of the color.
 * @param includeAlpha - If true, the alpha component is also clamped.
*/
	clamped(min:Number, max:Number, includeAlpha:Boolean):DzFloatColor {
	
	};
	/**
 * @returns A copy of this color where the value of no component is more than max.
 * @param max - The maximum value to allow in each component of the color.
 * @param includeAlpha - If true, the alpha component is also clamped.
*/
	clampedMax(max:Number, includeAlpha:Boolean):DzFloatColor {
	
	};
	/**
 * @returns A copy of this color where the value of no component is less than min.
 * @param min - The minimum value to allow in each component of the color.
 * @param includeAlpha - If true, the alpha component is also clamped.
*/
	clampedMin(min:Number, includeAlpha:Boolean):DzFloatColor {
	
	};
	/**
 * @description Modifies the color such that the value of no component is more than max.
 * @param max - The maximum value to allow in each component of the color.
 * @param includeAlpha - If true, the alpha component is also clamped.
*/
	clampMax(max:Number, includeAlpha:Boolean):void {
	
	};
	/**
 * @description Modifies the color such that the value of no component is less than min.
 * @param min - The minimum value to allow in each component of the color.
 * @param includeAlpha - If true, the alpha component is also clamped.
*/
	clampMin(min:Number, includeAlpha:Boolean):void {
	
	};
	/**
 * @returns true if this color is within tolerance of color, otherwise false.
 * @param color - The color to test this color against.
 * @param tolerance - The amount of deviation to allow in each component of the color.
*/
	equals(color:DzFloatColor, tolerance:Number):Boolean {
	
	};
	/**
 * @description Applies a gamma value to the color.
 * @param gamma - The gamma value to apply.
 * @param doAlpha - If true, applies gamma to the alpha channel of the color.
*/
	gammaColor(gamma:Number, doAlpha:Boolean):void {
	
	};
	/**
 * @returns The RGB value of this color, including its alpha.
*/
	getColor():Color {
	
	};
	/**
 * @returns A suitable grayscale equivalent of this color.
*/
	getGrayscale():Number {
	
	};
	/**
 * @returns An array consisting of the hue, saturation, lightness and alpha component values.
*/
	getHsl():Array {
	
	};
	/**
 * @returns An array consisting of the hue, saturation, value and alpha component values.
*/
	getHsv():Array {
	
	};
	/**
 * @returns The maximum value for this color.
*/
	getMaxRGBValue():Number {
	
	};
	/**
 * @returns The relative luminance for this color, calculated as: Y = 0.212671*R + 0.715160*G + 0.072169*B
*/
	getRelativeLuminance():Number {
	
	};
	/**
 * @returns An array consisting of the red, green, blue and alpha component values.
*/
	getRgba():Array {
	
	};
	/**
 * @description Linerizes the color based on a gamma value.
 * @param gamma - The gamma value to linearize by.
 * @param doAlpha - If true, linearizes the alpha channel of the color by gamma.
*/
	linearizeColor(gamma:Number, doAlpha:Boolean):void {
	
	};
	/**
 * @returns A copy of this color where the value of each component is modulated between min and max.
 * @param min - The minimum value to allow in each component of the color.
 * @param max - The maximum value to allow in each component of the color.
 * @param includeAlpha - If true, the alpha component is also clamped.
*/
	modulate(min:Number, max:Number, includeAlpha:Boolean):DzFloatColor {
	
	};
	/**
 * @description Modifies the color such that the value of each component is modulated between min and max.
 * @param min - The minimum value to allow in each component of the color.
 * @param max - The maximum value to allow in each component of the color.
 * @param includeAlpha - If true, the alpha component is also modulated.
*/
	modulo(min:Number, max:Number, includeAlpha:Boolean):void {
	
	};
	/**
 * @description Sets a HSL value on the color.
 * @param h - The value to set on the hue component.
 * @param s - The value to set on the saturation component.
 * @param l - The value to set on the lightness component.
 * @param a - The value to set on the alpha component.
*/
	setHsl(h:Number, s:Number, l:Number, a:Number):void {
	
	};
	/**
 * @description Sets the color according to an array of the hue, saturation, lightness and (optionally) alpha component values.
*/
	setHsl(list:Array):void {
	
	};
	/**
 * @description Sets the color according to an array of the hue, saturation, value and alpha component values.
*/
	setHsv(list:Array):void {
	
	};
	/**
 * @description Sets a HSV value on the color.
 * @param h - The value to set on the hue component.
 * @param s - The value to set on the saturation component.
 * @param v - The value to set on the value component.
 * @param a - The value to set on the alpha component.
*/
	setHsv(h:Number, s:Number, v:Number, a:Number):void {
	
	};
	/**
 * @description Sets the color according to an array of the red, green, blue and alpha component values.
*/
	setRgba(list:Array):void {
	
	};
	/**
 * @description Sets the color values. Values should be in the [0,1] range.
 * @param r - The red value for the color.
 * @param g - The green value for the color.
 * @param b - The blue value for the color.
 * @param a - The alpha value for the color.
*/
	setValue(r:Number, g:Number, b:Number, a:Number):void {
	
	};
	/**
 * @description Sets the color.
 * @param color - The color to set.
*/
	setValue(color:Color):void {
	
	};
	/**
 * @returns A string representation of this floating point color in the form "[ red, green, blue, alpha ]".
*/
	toString():String {
	
	};

}
/**
 * @classdesc This class provides an animatable color property that is stored and can be accessed as a floating point values.
Since:
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/floatcolorproperty_dz} */
class DzFloatColorProperty extends DzColorProperty {
	/**
 * @description ENUMERATOR: Linear interpolation between key values.
*/
	
	static LINEAR_INTERP;
	/**
 * @description ENUMERATOR: Constant interpolation between key values.
*/
	
	static CONSTANT_INTERP;
	/**
 * @description ENUMERATOR: TCB (Kochanek-Bartels) Spline interpolation between key values.
*/
	
	static TCB_INTERP;
	/**
 * @description ENUMERATOR: Hermite Spline interpolation between key values.
*/
	
	static HERMITE_INTERP;
	/**
 * @description Default Constructor. Creates a non-animatable, non-user property.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @param name - The name of this property.
 * @param canAnimate - If true, creates an animatable property.
 * @param isUserProperty - If true, creates a user property; user properties are properties that can be added/deleted by users.
 * @param defaultVal - Sets the default value of this property.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @param name - The name of this property.
 * @param canAnimate - If true, creates an animatable property.
 * @param isUserProperty - If true, creates a user property; user properties are properties that can be added/deleted by users.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Adjust the value of the property based on the contribution of property controllers.
 * @returns A 'raw' value for the property that will result in the property having the given value with the current controllers.
 * @param val - The 'final' value desired for the property.
*/
	adjustFloatColorValue(val:DzFloatColor):DzFloatColor {
	
	};
	/**
 * @description Adjust the value of the property at the given time based on the contribution of property controllers.
 * @returns A 'raw' value for the property that will result in the property having the given value with the current controllers.
 * @param tm - The scene time at which to adjust the value.
 * @param val - The 'final' value desired for the property.
*/
	adjustFloatColorValue(tm:DzTime, val:DzFloatColor):DzFloatColor {
	
	};
	/**
 * @returns The default float color value of the property.
*/
	getDefaultFloatColorValue():DzFloatColor {
	
	};
	/**
 * @returns The difference between the current value of the follow property and its default value at the current time. If no auto-follow property is set, or auto-follow is not enabled for this property, then this method returns 0.
*/
	getFloatColorFollowValue():DzFloatColor {
	
	};
	/**
 * @returns The difference between the current value of the follow property and this properties default value tm. If no auto-follow property is set, or auto-follow is not enabled for this property, then this method returns 0.
 * @param tm - The scene time for which to get the value.
*/
	getFloatColorFollowValue(tm:DzTime):DzFloatColor {
	
	};
	/**
 * @returns The float color value of the property at the current time.
*/
	getFloatColorValue():DzFloatColor {
	
	};
	/**
 * @returns The float color value of the property at the given time.
 * @param tm - The scene time to get the color value at.
*/
	getFloatColorValue(tm:DzTime):DzFloatColor {
	
	};
	/**
 * @returns The maximum allowable value of the property.
*/
	getFloatMax():Number {
	
	};
	/**
 * @returns The minimum allowable value of the property.
*/
	getFloatMin():Number {
	
	};
	/**
 * @returns The sensitivity value for this property.
*/
	getFloatSensitivity():Number {
	
	};
	/**
 * @returns The float color value of the property at the given key.
 * @param i - The index of the key to get the raw color value of.
*/
	getKeyFloatColorValue(i:Number):DzFloatColor {
	
	};
	/**
 * @description This function is provided for the special case of ERC link redirection; sometimes called 'cross-talk'. For example, if Figure A (a piece of clothing, for example) is 'Fit To' Figure B, the ERC links on Figure A are redirected to follow channels on Figure B; this is how morphs on an item of clothing will follow morphs on the figure, etc. This function will provide the value of the property ignoring any redirection of ERC links. So, for a figure that is not 'Fit To' another figure, this will return the same value as getFloatColorValue(). For a figure that is 'Fit To' another figure, this will return the value that the property would have if the ERC link had not been redirected.
 * @returns The value of the property at the current time without any ERC link redirection.
*/
	getLocalFloatColorValue():DzFloatColor {
	
	};
	/**
 * @description This function is provided for the special case of ERC link redirection; sometimes called 'cross-talk'. For example, if Figure A (a piece of clothing, for example) is 'Fit To' Figure B, the ERC links on Figure A are redirected to follow channels on Figure B; this is how morphs on an item of clothing will follow morphs on the figure, etc. This function will provide the value of the property ignoring any redirection of ERC links. So, for a figure that is not 'Fit To' another figure, this will return the same value as getFloatColorValue(). For a figure that is 'Fit To' another figure, this will return the value that the property would have if the ERC link had not been redirected.
 * @returns The value of the property at the current time without any ERC link redirection.
 * @param tm - The scene time to get the local value for.
*/
	getLocalFloatColorValue(tm:DzTime):DzFloatColor {
	
	};
	/**
 * @returns The 'raw' float color value of the property.
 * @param tm - The scene time at which to get the 'raw' float color value.
*/
	getRawFloatColorValue(tm:DzTime):DzFloatColor {
	
	};
	/**
 * @returns The 'raw' float color value of the property at the current time.
*/
	getRawFloatColorValue():DzFloatColor {
	
	};
	/**
 * @description Sets the default float color value for this property.
 * @param val - The new default value for the property.
*/
	setDefaultFloatColorValue(val:DzFloatColor):void {
	
	};
	/**
 * @description Sets the float color value of the property at the current time.
 * @param val - The value to set.
*/
	setFloatColorValue(val:DzFloatColor):void {
	
	};
	/**
 * @description Sets the float color value of the property at the specified time.
 * @param tm - The scene time to set the value for.
 * @param val - The value to set.
 * @param interp - The type of interpolation to perform between this keyframe and the next.
 * @param param0 - The parameter 0 for key interpolation: T value for TCB interpolation, starting slope value for Hermite interpolation.
 * @param param1 - The parameter 1 for key interpolation: C value for TCB interpolation, ending slope value for Hermite interpolation.
 * @param param2 - The parameter 2 for key interpolation: B value for TCB interpolation.
*/
	setFloatColorValue(tm:DzTime, val:DzFloatColor, interp:InterpolationType, param0:Number, param1:Number, param2:Number):void {
	
	};
	/**
 * @description Sets the float color value of the property at the specified time.
 * @param tm - The scene time to set the value for.
 * @param val - The value to set.
 * @param interp - The type of interpolation to perform between this keyframe and the next.
*/
	setFloatColorValue(tm:DzTime, val:DzFloatColor, interp:InterpolationType):void {
	
	};
	/**
 * @description Sets the float color value of the property at the specified time.
 * @param tm - The scene time to set the value for.
 * @param val - The value to set.
*/
	setFloatColorValue(tm:DzTime, val:DzFloatColor):void {
	
	};
	/**
 * @description Set the maxinimum allowable value, as a float.
 * @param max - The maximum value to set.
*/
	setFloatMax(max:Number):void {
	
	};
	/**
 * @description Set the mininimum allowable value, as a float.
 * @param min - The minimum value to set.
*/
	setFloatMin(min:Number):void {
	
	};
	/**
 * @description Set the mininimum and maximum allowable values, as floats.
 * @param min - The minimum value to set.
 * @param max - The maximum value to set.
*/
	setFloatMinMax(min:Number, max:Number):void {
	
	};
	/**
 * @description Set the sensitivity for this property. This value describes the amount of change in the value of this property caused by adjustment in the interface, especially if limits are off.
 * @param sens - The value to set.
*/
	setFloatSensitivity(sens:Number):void {
	
	};
	/**
 * @description Sets the float color value of this property for the given key.
 * @param i - The index of the key to set the value of.
 * @param val - The new default value for the property.
*/
	setKeyFloatColorValue(i:Number, val:DzFloatColor):void {
	
	};
	/**
 * @description Sets the 'raw' float color value of the property at the specified time; this is the actual value of the property without the contribution of property links, etc.
 * @param tm - The scene time to set the raw value for.
 * @param val - The value to set.
*/
	setRawFloatColorValue(tm:DzTime, val:DzFloatColor):void {
	
	};
	/**
 * @description Sets the 'raw' float color value of the property at the current time; this is the actual value of the property without the contribution of property links, etc.
 * @param val - The value to set.
*/
	setRawFloatColorValue(val:DzFloatColor):void {
	
	};

}
/**
 * @classdesc TODO:
Add detailed description.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/floatproperty_dz} */
class DzFloatProperty extends DzNumericProperty {
	/**
 * @description ENUMERATOR: Linear interpolation between key values.
*/
	
	static LINEAR_INTERP;
	/**
 * @description ENUMERATOR: Constant interpolation between key values.
*/
	
	static CONSTANT_INTERP;
	/**
 * @description ENUMERATOR: TCB (Kochanek-Bartels) Spline interpolation between key values.
*/
	
	static TCB_INTERP;
	/**
 * @description ENUMERATOR: Hermite Spline interpolation between key values.
*/
	
	static HERMITE_INTERP;
	/**
 * @description ENUMERATOR: This property is not a transform property.
*/
	
	static NON_TRANSFORM;
	/**
 * @description ENUMERATOR: This property is a scale transform.
*/
	
	static SCALE;
	/**
 * @description ENUMERATOR: This property is a translation transform property.
*/
	
	static TRANSLATE;
	/**
 * @description ENUMERATOR: This property is a rotation on the first axis of the rotation order.
*/
	
	static ROT_FIRST_AXIS;
	/**
 * @description ENUMERATOR: This property is a rotation on the second axis of the rotation order.
*/
	
	static ROT_SECOND_AXIS;
	/**
 * @description ENUMERATOR: This property is a rotation on the third axis of the rotation order.
*/
	
	static ROT_THIRD_AXIS;
	/**
 * @description Default Constructor. Creates a non-animatable, non-user property.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @param name - The name of this property.
 * @param canAnimate - If true, creates an animatable property.
 * @param isUserProperty - If true, creates a user property; user properties are properties that can be added/deleted by users.
 * @param defaultVal - Sets the default value of this property.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Adds the given value to all the key values.
 * @param val - The addend for the values.
 * @param applyToDefault - If true, val will also be added to the default value for the property.
*/
	add(val:Number, applyToDefault:Boolean):void {
	
	};
	/**
 * @description Adjust the value of the property based on the contribution of property controllers.
 * @returns A 'raw' value for the property that will result in the property having the given value with the current controllers.
 * @param val - The 'final' value desired for the property.
*/
	adjustValue(val:Number):Number {
	
	};
	/**
 * @description Adjust the value of the property at the given time based on the contribution of property controllers.
 * @returns A 'raw' value for the property that will result in the property having the given value with the current controllers.
 * @param tm - The scene time at which to adjust the value.
 * @param val - The 'final' value desired for the property.
*/
	adjustValue(tm:DzTime, val:Number):Number {
	
	};
	/**
 * @description Divides all key values by the given amount.
 * @param val - The divisor for the values.
 * @param applyToDefault - If true, the default value for the property will also be divided.
*/
	divide(val:Number, applyToDefault:Boolean):void {
	
	};
	/**
 * @returns The default value of the property.
*/
	getDefaultValue():Number {
	
	};
	/**
 * @returns true if this property should be displayed as a percentage, false if this property should be displayed as a decimal.
*/
	getDisplayAsPercent():Boolean {
	
	};
	/**
 * @returns The value of the i'th key in the property.
 * @param i - The index of the key to get the value for.
*/
	getKeyValue(i:Number):Number {
	
	};
	/**
 * @description This function is provided for the special case of ERC link redirection; sometimes called 'cross-talk'. For example, if Figure A (a piece of clothing, for example) is 'Fit To' Figure B, the ERC links on Figure A are redirected to follow channels on Figure B; this is how morphs on an item of clothing will follow morphs on the figure, etc. This function will provide the value of the property ignoring any redirection of ERC links. So, for a figure that is not 'Fit To' another figure, this will return the same value as getValue(). For a figure that is 'Fit To' another figure, this will return the value that the property would have if the ERC link had not been redirected.
 * @returns The value of the property at the current time without any ERC link redirection.
*/
	getLocalValue():Number {
	
	};
	/**
 * @description This function is provided for the special case of ERC link redirection; sometimes called 'cross-talk'. For example, if Figure A (a piece of clothing, for example) is 'Fit To' Figure B, the ERC links on Figure A are redirected to follow channels on Figure B; this is how morphs on an item of clothing will follow morphs on the figure, etc. This function will provide the value of the property ignoring any redirection of ERC links. So, for a figure that is not 'Fit To' another figure, this will return the same value as getValue(). For a figure that is 'Fit To' another figure, this will return the value that the property would have if the ERC link had not been redirected.
 * @returns The value of the property at the given time without any ERC link redirection.
 * @param tm - The scene time to get the local value for.
*/
	getLocalValue(tm:DzTime):Number {
	
	};
	/**
 * @returns The maximum allowable value of the property.
*/
	getMax():Number {
	
	};
	/**
 * @returns The minimum allowable value of the property.
*/
	getMin():Number {
	
	};
	/**
 * @description This function is provided to make it easy to get the 'keyed' value of the property without any modifications. When the value of a property is evaluated, first the value based on key interpolation is calculated, that value is then passed to each of the controllers on the property (ERC links for example) which can modify that value. This modified value is then returned as the value of the property by getValue(). This function returns the value of the property before the application of the controllers; strictly the result of key interpolation.
 * @returns The 'raw' value of the property at the current time; this is the actual value of the property without the contribution of property links, etc.
*/
	getRawValue():Number {
	
	};
	/**
 * @description This function is provided to make it easy to get the 'keyed' value of the property without any modifications. When the value of a property is evaluated, first the value based on key interpolation is calculated, that value is then passed to each of the controllers on the property (ERC links for example) which can modify that value. This modified value is then returned as the value of the property by getValue(). This function returns the value of the property before the application of the controllers; strictly the result of key interpolation.
 * @returns The 'raw' value of the property at the given time; this is the actual value of the property without the contribution of property links, etc.
 * @param tm - The scene time to get the raw value for.
*/
	getRawValue(tm:DzTime):Number {
	
	};
	/**
 * @returns The sensitivity value for this property.
*/
	getSensitivity():Number {
	
	};
	/**
 * @returns The transform type for this property.
*/
	getTransformType():TransformType {
	
	};
	/**
 * @returns The value of the property at the current time.
*/
	getValue():Number {
	
	};
	/**
 * @returns The value of the property at the given time.
 * @param tm - The scene time to get the value for.
*/
	getValue(tm:DzTime):Number {
	
	};
	/**
 * @description Multiplies all key values by the given amount.
 * @param val - The multiplier for the values.
 * @param applyToDefault - If true, the default value for the property will also be multiplied.
*/
	multiply(val:Number, applyToDefault:Boolean):void {
	
	};
	/**
 * @description Sets the default value for this property.
 * @param val - The value to set as the default for this property.
*/
	setDefaultValue(val:Number):void {
	
	};
	/**
 * @description Sets whether this property should have its value displayed as a percentage; the default is false (value is displayed as a decimal).
*/
	setDisplayAsPercent(onOff:Boolean):void {
	
	};
	/**
 * @description Sets the value of the i'th key.
 * @param keyIndex - The index of the key to set the value for.
 * @param val - The value to set.
*/
	setKeyValue(i:Number, val:Number):void {
	
	};
	/**
 * @description Set the maximum allowable value.
 * @param max - The maximum value to set.
*/
	setMax(max:Number):void {
	
	};
	/**
 * @description Set the mininimum allowable value.
 * @param min - The minimum value to set.
*/
	setMin(min:Number):void {
	
	};
	/**
 * @description Set the mininimum and maximum allowable values.
 * @param min - The minimum value to set.
 * @param max - The maximum value to set.
*/
	setMinMax(min:Number, max:Number):void {
	
	};
	/**
 * @description Set the sensitivity for this property. This value describes the amount of change in the value of this property caused by adjustment in the interface, especially if limits are off.
 * @param sens - The value to set.
*/
	setSensitivity(sens:Number):void {
	
	};
	/**
 * @description Sets the transform type for this property.
 * @param type - The enumeration value for the type of transform.
*/
	setTransformType(type:TransformType):void {
	
	};
	/**
 * @description Sets the value for this property at the given time; or the default value if this property is not animatable.
 * @param tm - The scene time to set the value at.
 * @param val - The value to set the property to.
 * @param interp - The type of interpolation to perform between this keyframe and the next.
 * @param param0 - The parameter 0 for key interpolation: T value for TCB interpolation, starting slope value for Hermite interpolation.
 * @param param1 - The parameter 1 for key interpolation: C value for TCB interpolation, ending slope value for Hermite interpolation.
 * @param param2 - The parameter 2 for key interpolation: B value for TCB interpolation
*/
	setValue(tm:DzTime, val:Number, interp:InterpolationType, param0:Number, param1:Number, param2:Number):void {
	
	};
	/**
 * @description Sets the value for this property at the current time; or the default value if this property is not animatable. This function differs from setRawValue() in that it takes into account any controllers on the property such that calling setValue( getValue() ) should not change the value of the property.
 * @param val - The value to set.
*/
	setValue(val:Number):void {
	
	};
	/**
 * @description Sets the value for this property at the given time; or the default value if this property is not animatable. This function differs from setRawValue() in that it takes into account any controllers on the property such that calling setValue( getValue() ) should not change the value of the property.
 * @param tm - The scene time to set the value at.
 * @param val - The value to set.
 * @param interp - The type of interpolation to perform between this keyframe and the next. Parameters for interpolation are set to defaults.
*/
	setValue(tm:DzTime, val:Number, interp:InterpolationType):void {
	
	};
	/**
 * @description Sets the value for this property at the given time; or the default value if this property is not animatable. This function differs from setRawValue() in that it takes into account any controllers on the property such that calling setValue( getValue() ) should not change the value of the property.
 * @param tm - The scene time to set the value at.
 * @param val - The value to set.
*/
	setValue(tm:DzTime, val:Number):void {
	
	};
	/**
 * @description Subtracts the given value to all the key values.
 * @param val - The value to be subtracted from the key values.
 * @param applyToDefault - If true, val will also be subtracted from the default value for the property.
*/
	subtract(val:Number, applyToDefault:Boolean):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted if the way this property is displayed changed.
 * @signature `"displayAsPercentChanged()"`
 * @event
*/
	displayAsPercentChanged():void {
	
	};

}
/**
 * @classdesc A DzFloatSlider provides a control that allows a user to adjust a bounded floating point value.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/floatslider_dz} */
class DzFloatSlider extends DzWidget {
	/**
 * @description Holds whether or not the slider obeys its limits. false by default.
	*/
	clamped:Boolean;
	/**
 * @description Holds the default value of the slider.
	*/
	defaultValue:Number;
	/**
 * @description Holds whether or not the slider text is displayed as a percentage value. false by default.
	*/
	displayAsPercent:Boolean;
	/**
 * @description Holds whether or not editing the slider text causes the edit field to consume the full height/width of the slider. false by default.
	*/
	fullLengthEdit:Boolean;
	/**
 * @description If true, the slider is considered to have an 'indeterminate' or '<?>' value. false by default.
	*/
	indeterminate:Boolean;
	/**
 * @description Holds whether or not the value is currently being edited. (Read Only)
	*/
	isEditing:Boolean;
	/**
 * @description Holds the label text for the slider.
	*/
	label:String;
	/**
 * @description Holds whether or not the slider's label is visible.
	*/
	labelVisible:Boolean;
	/**
 * @description Holds the maximum value of the slider. Any attempt to set this to a value that is less than the current min will fail.
	*/
	max:Number;
	/**
 * @description Holds the minimum value of the slider. Any attempt to set this to a value that is greater than the current max will fail.
	*/
	min:Number;
	/**
 * @description Holds whether or not the default value is restorable if the user holds the [Alt] key when clicked.
	*/
	restorable:Boolean;
	/**
 * @description Holds the sensitivity of the slider.
	*/
	sensitivity:Number;
	/**
 * @description Holds the text of the slider. (Read Only)
	*/
	text:String;
	/**
 * @description Holds whether or not the slider text is editable by the user. false by default.
	*/
	textEditable:Boolean;
	/**
 * @description Holds whether or not the slider text is visible to the user. true by default.
	*/
	textVisible:Boolean;
	/**
 * @description Holds the current value of the slider.
	*/
	value:Number;
	/**
 * @description Creates a slider as a child of the given parent widget.
 * @param parent - The widget parent for the slider.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the user cancels an edit of the slider.
 * @signature `"editCancelled()"`
 * @event
*/
	editCancelled():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the user releases the slider.
 * @signature `"editEnd()"`
 * @event
*/
	editEnd():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the user starts dragging the slider.
 * @signature `"editStart()"`
 * @event
*/
	editStart():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the value of the slider changes, passes the new value.
 * @signature `"valueChanged(float)"`
 * @event
*/
	valueChanged(value:Number):void {
	
	};

}
/**
 * @classdesc The "Folder" container type serves to present assets as the files they represent exist in the folder structure on disk.
See Also:
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/folderassetcontainer_dz} */
class DzFolderAssetContainer extends DzRefCountedItem, DzAbstractAssetContainer {
	/**
 * @description Holds the list of folder names to exclude as children of this container.
	*/
	excludeFolders:Array;
	/**
 * @description Holds the list of file filters for this container.
	*/
	fileFilters:Array;
	/**
 * @description Holds whether or not this container represents an Import folder. (Read Only)
	*/
	isImport:Boolean;
	/**
 * @description Holds whether or not this container is at the top level of the Import folder hierarchy. (Read Only)
	*/
	isImportTopLevel:Boolean;
	/**
 * @description Holds whether or not this container represents a native folder. (Read Only)
	*/
	isNative:Boolean;
	/**
 * @description Holds whether or not this container is at the top level of the native folder hierarchy. (Read Only)
	*/
	isNativeTopLevel:Boolean;
	/**
 * @description Holds whether or not this container represents a Poser folder. (Read Only)
	*/
	isPoser:Boolean;
	/**
 * @description Holds whether or not this container is an immediate child of the top level folder in a Poser folder hierarchy. (Read Only)
	*/
	isPoserIntermediate:Boolean;
	/**
 * @description Holds whether or not this container is at the top level of the Poser folder hierarchy. (Read Only)
	*/
	isPoserTopLevel:Boolean;
	/**
 * @description Holds the list of folder names to allow as children of this container.
	*/
	onlyIncludeFolders:Array;
	/**
 * @returns true if shortFileName matches the filter for this container, otherwise false.
*/
	fileMatchesFilter(shortFileName:String):Boolean {
	
	};
	/**
 * @returns The full path of the folder that this container represents.
*/
	getFullPath():String {
	
	};
	/**
 * @returns true if this container has child containers that are directories, otherwise false.
*/
	hasDirectoryChildren():Boolean {
	
	};
	/**
 * @returns true if asset conflicts will create a link when called, otherwise false.
 * @since 4.9.0.47
*/
	insertsAsLink(asset:DzAsset):Boolean {
	
	};
	/**
 * @description Attempts to update the child containers of this container.
 * @returns true if the update was successful, otherwise false.
*/
	updateChildren():Boolean {
	
	};

}
/**
 * @classdesc When a figure is "Fit to" (set to follow) another figure in the scene, the application uses a name-matching mechanism referred to as "Auto Follow" to establish relationships between properties in the following figure to the corresponding properties in the follow target. This relationship causes certain matched properties on the follower to inherit the values of the properties on the follow target.
Active morphs on the follow target, when configured to "Auto Follow," are projected from the follow target to the follower at the moment the follower is "Fit to" the follow target; this projection only occurs if a morph target bearing the same name does not already exist on the follower. Morphs that are configured to "Auto Follow" on the follow target that were not active at the moment the follower was "Fit to" the follow target are projected as they become active. These options are used to control how (or even if) "Auto Follow" morphs are projected.
Each figure owns its own instance of this object. To modify the projection options for a follower, request the object from the figure and configure its instance rather than attempting to construct a new instance.
See Also:
Since:
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/followingprojectionoptions_dz} */
class DzFollowingProjectionOptions extends QObject {
	/**
 * @description Holds the tolerance used for considering the locations around the closest found location.
	*/
	adaptiveTolerance:Number;
	/**
 * @description Holds whether or not the projection considers polylines as rigid for projection purposes.
	*/
	considerLinesAsRigid:Boolean;
	/**
 * @description Holds whether or not morph projection is disabled.
	*/
	disableMorphProjection:Boolean;
	/**
 * @description Holds the tolerance used for determining if two (or more) locations are considered coincident.
	*/
	distanceSquaredTolerance:Number;
	/**
 * @description Holds the name of the morph (if any) on the owner of this object to apply while projecting from the follow target.
	*/
	followerProjectionMorph:String;
	/**
 * @description Holds the nearness factor to use if near vertices are included.
	*/
	nearnessFactor:Number;
	/**
 * @description Holds whether or not the projection should be "smart" about projecting values to/from face groups that are on the left vs. right side of the meshes.
	*/
	smartLeftRightHandling:Boolean;
	/**
 * @description Holds whether or not the follow target is subdivided when projecting.
	*/
	sourceSubdivisionMode:SourceSubdivisionMode;
	/**
 * @description Holds whether or not to include near vertices in the projection calculation.
	*/
	useNear:Boolean;
	/**
 * @description Holds whether or not UV space will be used during projection calculation.
	*/
	uvSpaceProjection:Boolean;
	/**
 * @description Holds whether vertices or facets on the follow target looked at first during projection.
	*/
	vertexFirstProjection:Boolean;
	/**
 * @description Holds whether or not the current options are written to file as the definition for the owner of this object.
	*/
	writtenAsDefinition:Boolean;
	/**
 * @description ENUMERATOR: Projection will occur with the current subdivision state/resolution of the follow target.
*/
	
	static SrcAuto;
	/**
 * @description ENUMERATOR: Projection will occur with the follow target in its cage state/resolution.
*/
	
	static SrcCage;
	/**
 * @description ENUMERATOR: Projection will occur with the follow target in its subdivided state/resolution.
*/
	
	static SrcSubdivided;
	/**
 * @description Adds a pair of (not necessarily matched) morph names to apply in the respective figures during a projection operation.
 * @param srcMorph - The name of the morph in the follow target.
 * @param followerMorph - The name of the morph in the owner of this object. An empty string here will cause any defined follower projection morph to be used.
*/
	addCorrelatedMorph(srcMorph:String, followerMorph:String):void {
	
	};
	/**
 * @description Clears the list of morph pair names to apply during a projection operation.
 * @since 4.8.1.88
*/
	clearCorrelatedMorphs():void {
	
	};
	/**
 * @description Copies options from another instance.
 * @param other - The instance to copy.
*/
	copyFrom(other:DzFollowingProjectionOptions):DzFollowingProjectionOptions {
	
	};
	/**
 * @returns The name of the morph in the owner of this object for the pair at the specified index.
 * @param which - The index of the pair of morph names to get.
*/
	getFollowerCorrelatedMorph(which:Number):String {
	
	};
	/**
 * @returns The number of morph name pairs to apply during a projection operation.
*/
	getNumCorrelatedMorphs():Number {
	
	};
	/**
 * @returns The name of the morph in the follow target for the pair at the specified index.
 * @param which - The index of the pair of morph names to get.
*/
	getSourceCorrelatedMorph(which:Number):String {
	
	};
	/**
 * @returns true if all options are at their respective default values, otherwise false.
*/
	isAtDefault():Boolean {
	
	};
	/**
 * @description Removes a pair of morph names to apply during a projection operation.
 * @param which - The index of the name pair to remove.
*/
	removeCorrelatedMorph(which:Number):void {
	
	};

}
/**
 * @classdesc This is the DAZScript counterpart to the QFont type used in the DAZ Studio SDK.
Attention:@attention Attention:
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/font} */
class Font extends QObject {
	/**
 * @description Holds whether or not the Font is bolded.
	*/
	bold:Boolean;
	/**
 * @description Holds the family name of the Font.
	*/
	family:String;
	/**
 * @description Holds whether or not the Font is italicized.
	*/
	italic:Boolean;
	/**
 * @description The pixel size of the font (the device dependent size of the font)
	*/
	pixelSize:Number;
	/**
 * @description The point size of the font (the device independent size of the font)
	*/
	pointSize:Number;
	/**
 * @description Holds whether or not the Font is striked.
	*/
	strikeout:Boolean;
	/**
 * @description Holds whether or not the Font is underlined.
	*/
	underline:Boolean;
	/**
 * @description Default Constructor.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Copy Constructor.
 * @param font - The Font to copy.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Constructs a new font of the given family.
 * @param familyName - The name of the font family that the new font will be of.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @returns The bounding rectangle of the characters in text, which is the set of pixels the text would cover if drawn at (0, 0), constrained to maxRect.
 * @since 4.10.0.121
 * @param maxRect - The rectangle to constrain the bounding rectangle to.
 * @param text - The text to get the bounding rectangle of.
 * @param flags - A bitwise OR of the following flags:

 DzWidget.AlignLeft

 DzWidget.AlignRight

 DzWidget.AlignHCenter

 DzWidget.AlignJustify

 DzWidget.AlignTop

 DzWidget.AlignBottom

 DzWidget.AlignVCenter

 DzWidget.AlignCenter

 DzWidget.TextSingleLine

 DzWidget.TextExpandTabs

 DzWidget.TextShowMnemonic

 DzWidget.TextWordWrap
*/
	boundingRect(maxRect:Rect, text:String, flags:Number):Rect {
	
	};
	/**
 * @returns If text is wider than width, an elided version of text, otherwise the original string.
 * @since 4.10.0.121
 * @param text - The text to get an elided version of.
 * @param mode - The mode to elide the text with.
 * @param width - The width (in pixels) to test text with.
 * @param flags - Currently only supports DzWidget.TextShowMnemonic.
*/
	elidedText(text:String, mode:DzWidget.TextElideMode, width:Number, flags:Number):String {
	
	};
	/**
 * @returns A list of the font families available on the current machine (if any), otherwise an empty list.
 * @since 4.10.0.121
*/
	families():Array {
	
	};
	/**
 * @returns A list of the point sizes for the font specified by family and style.
 * @since 4.10.0.121
 * @param family - The name of the font family to get sizes for.
 * @param style - The style of the font family to get sizes for.
*/
	pointSizes(family:String, style:String):Array {
	
	};
	/**
 * @returns The size (in pixels) of text.
 * @since 4.10.0.121
 * @param text - The text to get the size of.
 * @param flags - A bitwise OR of the following flags:

 DzWidget.TextSingleLine

 DzWidget.TextExpandTabs

 DzWidget.TextShowMnemonic

 DzWidget.TextWordWrap
*/
	size(text:String, flags:Number):Size {
	
	};
	/**
 * @returns A list of the styles for the font specified by family (if any), otherwise an empty list.
 * @since 4.10.0.121
 * @param family - The name of the font family to get styles for.
*/
	styles(family:String):Array {
	
	};

}
/**
 * @classdesc TODO:
Add detailed description.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/geometryimporter_dz} */
class DzGeometryImporter extends DzImporter {

}
/**
 * @classdesc 
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/geometryshellnode_dz} */
class DzGeometryShellNode extends DzNode {
	/**
 * @description Default Constructor. Creates a shell with DzObject, pushmodifier_dz, and DzGeometryShellShape. This is the preferred way to create a shell node.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @returns The property that controls selection of the node that this node is a shell of.
*/
	getShellNodeControl():DzNodeProperty {
	
	};

}
/**
 * @classdesc The DzGeometryUtil object provides access to geometry manipulation utility functions. It is accessible via the Global.Geometry variable.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/geometryutil_dz} */
class DzGeometryUtil extends QObject {
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static Sphere;
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static Cube;
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static Cone;
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static Plane;
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static Torus;
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static Cylinder;
	/**
 * @description Converts a scene item with polygon mesh geometry to a SubD object. If the node passed in is a DzBone or DzSkeleton, the entire figure will be converted to SubD.
 * @returns DZ_NO_ERROR on success, otherwise an error code.
 * @param node - The scene item to convert.
 * @param defaultLevel - The default subdivision level of the item after conversion.
*/
	convertToSubD(node:DzNode, defaultLevel:Number):DzError {
	
	};
	/**
 * @description Creates a primitive based on the settings supplied.
 * @returns The new primitive node in the scene. NULL if nothing was created.
 * @param settings - The settings that specify the type of primitive and corresponding dimensions.
*/
	createPrimitive(settings:DzSettings):DzNode {
	
	};
	/**
 * @description Populates a settings object with the default settings that are used to create a primitive.
 * @since 4.9.3.105
 * @param type - The type of primitive shape to get the default options for.
 * @param settings - The settings object to populate with the individual settings that specify the type of primitive and corresponding dimensions.
 * @attention The "PrimaryAxis" setting values have the following meanings:0 = X+1 = X-2 = Y+3 = Y-4 = Z+5 = Z-
*/
	getDefaultPrimitiveOptions(type:PrimitiveType, settings:DzSettings):void {
	
	};

}
/**
 * @classdesc TODO:
Add detailed description.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/geomsourcefiledata_dz} */
class DzGeomSourceFileData extends DzSourceFileData {
	/**
 * @description The name of the group that the geometry came from.
	*/
	groupName:String;
	/**
 * @description Creates a new Geometry Source File Data object that stores the given file path and group name.
 * @constructor
*/
	constructor() {
	
	};

}

////////////////////////////////////////GLOBALS/////////////////////////////////////////////
var false:Boolean;
var Infinity:Number;
var JSON:JSON;
var Math:Math;
var NaN:Number;
var null:Object;
var true:Boolean;
var undefined:undefined;
var App:DzApp;
var ColorDialog:DzColorDialog;
var FileDialog:DzFileDialog;
var Geometry:DzGeometryUtil;
var MainWindow:DzMainWindow;
var MessageBox:DzMessageBox;
var OpenGL:DzOpenGL;
var Scene:DzScene;
var System:DzSystem;
var UndoStack:DzUndoStack;
/**
 * @returns A new version of encodedURI in which each escape sequence and UTF-8 encoding of the kind that might be introduced by encodeURI() is replaced with the character that it represents. Escape sequences that could not have been introduced by encodeURI() are not replaced.
 * @param encodedURI - The encoded URI to decode.
*/
function decodeURI(encodedURI:String):String {
	
	};
/**
 * @returns A new version of encodedURIComponent in which each escape sequence and UTF-8 encoding of the kind that might be introduced by encodeURIComponent() is replaced with the character that it represents.
*/
function decodeURIComponent(encodedURIComponent:String):String {
	
	};
/**
 * @returns A new version of uri in which each instance of certain characters is replaced by one, two, three, or four escape sequences representing the UTF-8 encoding of the character.
 * @param uri - The URI to encode.
*/
function encodeURI(uri:String):String {
	
	};
/**
 * @returns A new version of uri in which each instance of certain characters is replaced by one, two, three, or four escape sequences representing the UTF-8 encoding of the character.
*/
function encodeURIComponent(uriComponent:String):String {
	
	};
/**
 * @description Parses and executes str, and returns the result.
 * @param str - The statement to evaluate.
*/
function eval(str:String):Object {
	
	};
/**
 * @returns false if expression coerces to NaN or Infinity, otherwise true.
 * @param expression - The script expression to evaluate.
*/
function isFinite(expression:Object):Boolean {
	
	};
/**
 * @returns true if expression is NaN (Not a Number), otherwise false.
 * @param expression - The script expression to evaluate.
*/
function isNaN(expression:Object):Boolean {
	
	};
/**
 * @description Parses str and returns the floating point number that it represents or NaN if the parse fails. Leading and trailing whitespace is ignored, and if the string contains a number followed by non-numeric characters, the value of the number is returned and the remainder of the string is ignored.
 * @returns A floating point number or NaN.
 * @param str - The string to convert to a floating point number.
*/
function parseFloat(str:String):Number {
	
	};
/**
 * @description Parses the string and returns the integer that it represents or NaN if the parse fails. Leading and trailing whitespace is ignored, and if the string contains a number followed by non-numeric characters, the value of the number is returned and the remainder of the string is ignored.
 * @returns An integer or NaN.
 * @param str - The string to convert to an integer.
 * @param radix - The (optional) base of the number; [2,36]; if not specified, base is determined as follows:

 base 16 if the number begins with "0x" or "0X"

 base 8 if the number begins with "0"

 base 10 otherwise
*/
function parseInt(str:String, radix:Number):Number {
	
	};
/**
 * @description While the garbage collector is automatically run for script objects that are no longer referenced, there is no guarantee on when it will take place. This function can be used to explicitly request garbage collection.
*/
function gc() {
	
	};
/**
 * @description Prints the expression to the console (if executed from within the Script Editor) or to the log.
 * @param expression - The expression to print - the argument will be converted to a string (via toString) if necessary.
*/
function print(expression:String):void {
	
	};
/**
 * @returns A translated version of sourceText if an appropriate translated string is available, otherwise returns sourceText itself.
*/
function qsTr(sourceText:String):String {
	
	};
/**
 * @returns The translation text for sourceText, by querying the installed translation files. Translation files are searched from the most recently installed file back to the first installed file.
*/
function qsTranslate(sourceText:String):String {
	
	};
/**
 * @returns A translated string identified by id. If no matching string is found, id itself is returned.
*/
function qsTrId(id:String):String {
	
	};
/**
 * @description Scripts can call this function to accept and finish a hold on the undo stack started by calling beginUndo().
 * @param caption - The brief description for the action that will be displayed to the user.
*/
function acceptUndo(caption:String):void {
	
	};
/**
 * @returns true if one or more background progress operations are currently being tracked.
*/
function backgroundProgressIsActive() {
	
	};
/**
 * @returns true if the user has cancelled the current operation by pressing the 'Cancel' button on the background progress.
*/
function backgroundProgressIsCancelled() {
	
	};
/**
 * @description Captures the current state of node selection in the scene, on a node selection stack.
 * @since 4.9.4.109
*/
function beginNodeSelectionHold() {
	
	};
/**
 * @description Starts a hold on the undo stack. It is recommended that scripts use this function rather than accessing DzUndoStack directly, since if the script crashes or a logic error results in leaving the undo stack open, calling this function insures that the undo stack will be closed at the end of script execution.
*/
function beginUndo() {
	
	};
/**
 * @description Scripts can call this function to cancel a hold on the undo stack started by calling beginUndo().
*/
function cancelUndo() {
	
	};
/**
 * @description Clears the application-standard busy cursor and returns the mouse cursor to the previous cursor. Match every call to setBusyCursor() with a call to this function.
*/
function clearBusyCursor() {
	
	};
/**
 * @description Clears all selection holds without restoring the selection.
 * @since 4.9.4.109
*/
function clearNodeSelectionHolds() {
	
	};
/**
 * @description Scripts can call this function to clear the undo stack.
*/
function clearUndoStack() {
	
	};
/**
 * @description Connects a signal from one object to a function (slot) on another object.
 * @param sender - The object emitting the signal.
 * @param signal - The signal being emitted.
 * @param receiver - The object that will receive the signal.
 * @param function - The name of the method on receiver to execute when sender emits signal. If receiver is a script defined Function, the 'this' object within the context of the function will be the Global object.
*/
function connect(sender:Object, signal:String, receiver:Object, function:String):void {
	
	};
/**
 * @description Connects a signal from an object to a function.
 * @since 4.15.0.18
 * @param sender - The object emitting the signal.
 * @param signal - The signal being emitted.
 * @param thisObject - The object to bind to 'this' in the scope of functionRef if functionRef is a script-defined Function. If functionRef is a function on a QObject, this argument is not used.
 * @param functionRef - The function to execute when sender emits signal.
*/
function connect(sender:Object, signal:String, thisObject:Object, functionRef:Function):void {
	
	};
/**
 * @description Connects a signal from an object to a function.
 * @param sender - The object emitting the signal.
 * @param signal - The signal being emitted.
 * @param functionRef - The function to execute when sender emits signal.
*/
function connect(sender:Object, signal:String, functionRef:Function):void {
	
	};
/**
 * @description Prints expression to the output console (stderr), followed by a newline.
*/
function debug(expression):void {
	
	};
/**
 * @description Disconnects a signal from one object to a function (slot) on another object.
 * @param sender - The object emitting the signal.
 * @param signal - The signal being emitted.
 * @param receiver - The object that receives the signal.
 * @param function - The method on receiver to disconnect from signal.
*/
function disconnect(sender:Object, signal:String, receiver:Object, function:String):void {
	
	};
/**
 * @description Disconnects a signal from an object to a function.
 * @since 4.15.0.18
 * @param sender - The object emitting the signal.
 * @param signal - The signal being emitted.
 * @param thisObject - The object bound to 'this' in the scope of functionRef if functionRef is a script-defined Function. If functionRef is a function on a QObject, this argument is not used.
 * @param functionRef - The function to disconnect from signal.
*/
function disconnect(sender:Object, signal:String, thisObject:Object, functionRef:Function):void {
	
	};
/**
 * @description Disconnects a signal from an object to a function.
 * @param sender - The object emitting the signal.
 * @param signal - The signal being emitted.
 * @param functionRef - The function to disconnect from signal.
*/
function disconnect(sender:Object, signal:String, functionRef:Function):void {
	
	};
/**
 * @description Removes the current hold on the state of node selection in the scene without restoring the selection.
 * @since 4.9.4.109
*/
function dropNodeSelectionHold() {
	
	};
/**
 * @description Scripts can call this function to drop a hold on the undo stack started by calling beginUndo().
*/
function dropUndo() {
	
	};
/**
 * @description Ends the current background progress tracking operation, and closes the background progress if no other background progress tracking operations are active.
*/
function finishBackgroundProgress() {
	
	};
/**
 * @description Ends the current progress tracking operation, and closes the progress dialog if no other progress tracking operations are active.
*/
function finishProgress() {
	
	};
/**
 * @returns The list of arguments passed to the script (if any) upon execution, otherwise an empty Array.
*/
function getArguments() {
	
	};
/**
 * @description This function converts an error code into a string message.
 * @returns A user-readable message that describes the error represented by the error code.
 * @param errCode - The Daz Studio error code.
*/
function getErrorMessage(errCode:DzError):String {
	
	};
/**
 * @description This function allows a script to get the object-parent of a QObject.
 * @returns The QObject parent of obj.
 * @param obj - The QObject to get the parent of.
*/
function getObjectParent(obj:QObject):QObject {
	
	};
/**
 * @returns The author of the current script (if any).
*/
function getScriptAuthor() {
	
	};
/**
 * @returns The file name of the current script (if any).
*/
function getScriptFileName() {
	
	};
/**
 * @returns The file type that this script was saved out as.
*/
function getScriptType() {
	
	};
/**
 * @returns The version of the current script (if any).
*/
function getScriptVersionString() {
	
	};
/**
 * @description Includes the contents of scriptPath in the same context as the calling script. This function should only be called within the global scope of the script; it should not be called within a nested scope and it should not be called inline. As a safeguard against circular references, the script engine keeps an internal list of unique paths for included scripts; per script context, per execution. Each time the function is called, scriptPath is checked against the list to ensure that the path has only been included once within the context of the script.
 * @param scriptPath - The path of the script to include. The path is assumed to be relative to the ./scripts directory. Absolute paths are also supported.
*/
function include(scriptPath:String):void {
	
	};
/**
 * @description This function allows a script to test if two QObject derived variables point to the same instance.
 * @returns true if the pointers point to the same object, otherwise false.
 * @param ptr1 - The first object.
 * @param ptr2 - The second object.
*/
function pointersAreEqual(ptr1:QObject, ptr2:QObject):Boolean {
	
	};
/**
 * @description Pauses execution of the script and allows the GUI thread time to process events.
*/
function processEvents() {
	
	};
/**
 * @returns true if one or more progress operations are currently being tracked, otherwise false.
*/
function progressIsActive() {
	
	};
/**
 * @returns true if the user has cancelled the current operation by pressing the 'Cancel' button on the progress dialog.
*/
function progressIsCancelled() {
	
	};
/**
 * @description Restores node selection in the scene to the state it was in when the last call to beginNodeSelectionHold() was made.
 * @since 4.9.4.109
*/
function restoreNodeSelectionHold() {
	
	};
/**
 * @description Sets the application-standard busy cursor. Match every call to this function with a call to clearBusyCursor() to restore the previous cursor.
*/
function setBusyCursor() {
	
	};
/**
 * @description Pauses the script for the specified number of milliseconds without blocking the application event loop.
 * @since 4.8.0.45
 * @param milliseconds - The duration, in milliseconds, to sleep.
*/
function sleep(milliseconds:Number):void {
	
	};
/**
 * @description Displays a background progress bar to the user if one is not already being displayed and starts a progress tracking operation.
 * @param info - The string to display in the status bar as the current description of the operation.
 * @param totalSteps - The number of progress steps for the operation to be complete.
 * @param isCancellable - If true, the user is given the option to cancel the operation.
*/
function startBackgroundProgress(info:String, totalSteps:Number, isCancellable:Boolean):void {
	
	};
/**
 * @description Displays a progress dialog to the user if one is not already being displayed and starts a progress tracking operation.
 * @param info - The string to display in the progress dialog as the current description of the operation.
 * @param totalSteps - The number of progress steps for the operation to be complete.
 * @param isCancellable - If true, the user is given the option to cancel the operation.
 * @param showTimeElapsed - If true, the amount of time since the progress operation was started will be displayed in the dialog.
*/
function startProgress(info:String, totalSteps:Number, isCancellable:Boolean, showTimeElapsed:Boolean):void {
	
	};
/**
 * @description Steps the current background progress forward the given number of steps.
 * @param numSteps - The number of steps to move the progress indicator forward.
*/
function stepBackgroundProgress(numSteps:Number):void {
	
	};
/**
 * @description Steps the current progress dialog forward the given number of steps.
 * @param numSteps - The number of steps to move the progress indicator forward.
*/
function stepProgress(numSteps:Number):void {
	
	};
/**
 * @description Sets the current background progress to the given number of steps.
 * @param position - The number of steps to set as the current position for the progress indicator.
*/
function updateBackgroundProgress(position:Number):void {
	
	};
/**
 * @description Sets the current progress dialog to the given number of steps.
 * @param position - The number of steps to set as the current position for the progress indicator.
*/
function updateProgress(position:Number):void {
	
	};
/**
 * @description Deprecated
*/
function unescape(text:String):String {
	
	};
/**
 * @description Deprecated
*/
function escape(text:String):String {
	
	};
/**
 * @description Deprecated
*/
function shiftPressed() {
	
	};
/**
 * @description Deprecated
*/
function ctrlPressed() {
	
	};
/**
 * @description Deprecated
*/
function getDesktop(deprecated):QDesktopWidget (deprecated) {
	
	};

/**
 * @classdesc TODO:
Add detailed description.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/gridlayout_dz} */
class DzGridLayout extends DzLayout {
	/**
 * @description Creates a grid layout that manages the children widgets of the given parent widget
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Creates a grid layout as a sub-layout of the given layout
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Adds the given layout to the items managed by this layout
 * @param layout - The layout to add to this layout
 * @param row - The row to insert the layout into.
 * @param col - The column to insert the layout into.
 * @param rowspan - The number of rows the layout should span (1 if not specified)
 * @param colspan - The number of columns the layout should span (1 if not specified)
*/
	addLayout(layout:DzLayout, row:Number, col:Number, rowSpan:Number, colSpan:Number):void {
	
	};
	/**
 * @description Deprecated
*/
	addMultiCellLayout(layout:DzLayout, fromRow:Number, toRow:Number, fromCol:Number, toCol:Number):void {
	
	};
	/**
 * @description Deprecated
*/
	addMultiCellWidget(widget:DzWidget, fromRow:Number, toRow:Number, fromCol:Number, toCol:Number):void {
	
	};
	/**
 * @description Adds the given widget to the items managed by this layout
 * @param widget - The widget to add to the layout
 * @param row - The row to insert the widget into.
 * @param col - The column to insert the widget into.
 * @param rowspan - The number of rows the widget should span (1 if not specified)
 * @param colspan - The number of columns the widget should span (1 if not specified)
*/
	addWidget(widget:DzWidget, row:Number, col:Number, rowSpan:Number, colSpan:Number):void {
	
	};
	/**
 * @returns The number of columns in this grid
*/
	colCount():Number {
	
	};
	/**
 * @returns The the minimum width for the given column
*/
	colSpacing(col:Number):Number {
	
	};
	/**
 * @returns The relative amount of stretch for the given column
*/
	colStretch(col:Number):Number {
	
	};
	/**
 * @returns The number of rows in this grid
*/
	rowCount():Number {
	
	};
	/**
 * @returns The the minimum height for the given row
*/
	rowSpacing(row:Number):Number {
	
	};
	/**
 * @returns The relative amount of stretch for the given row
*/
	rowStretch(row:Number):Number {
	
	};
	/**
 * @description Sets the minimum width for the given column
*/
	setColSpacing(col:Number, minSize:Number):void {
	
	};
	/**
 * @description Sets the relative amount of stretch for the given column
*/
	setColStretch(col:Number, stretch:Number):void {
	
	};
	/**
 * @description Sets the minimum height for the given row
*/
	setRowSpacing(row:Number, minSize:Number):void {
	
	};
	/**
 * @description Sets the relative amount of stretch for the given row
*/
	setRowStretch(row:Number, stretch:Number):void {
	
	};

}
/**
 * @classdesc A DzGroupBox provides a group box frame, with an optional title and an ability to be checked like a DzCheckBox.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/groupbox_dz} */
class DzGroupBox extends DzWidget {
	/**
 * @description Holds the alignment of the group box title.
	*/
	alignment:DzWidget;
	/**
 * @description Holds whether or not the group box is checkable.
	*/
	checkable:Boolean;
	/**
 * @description Holds whether or not the group box is checked.
	*/
	checked:Boolean;
	/**
 * @description Holds the number of columns in the group box.
	*/
	columns:Number;
	/**
 * @description Holds whether or not the group box is painted flat (without a frame).
	*/
	flat:Boolean;
	/**
 * @description Holds the margin between items inside the group box and the frame.
	*/
	insideMargin:Number;
	/**
 * @description Holds the spacing between items inside the group box.
	*/
	insideSpacing:Number;
	/**
 * @description Holds the orientation of the group box.
	*/
	orientation:DzWidget;
	/**
 * @description Holds the title of the group box.
	*/
	title:String;
	/**
 * @description Creates a group box as a child of the given parent widget.
 * @param parent - The widget parent for the group box.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Adds an empty cell at the next free position. If space is greater than 0, the empty cell uses space as its fixed width (if Orientation is Horizontal) or height (if Orientation is Vertical).
*/
	addSpace(space:Number):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the DzGroupBox's check box is clicked. Passes the new state of the check box.
 * @signature `"clicked(bool)"`
 * @event
*/
	clicked(checked:Boolean):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the DzGroupBox's check box is toggled. Passes the new state of the check box.
 * @signature `"toggled(bool)"`
 * @event
*/
	toggled(onOff:Boolean):void {
	
	};

}
/**
 * @classdesc This specialized DzNode is intended for grouping multiple nodes in the scene under one parent node. This allows easy transformation, visibility and/or selectability of the whole group.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/groupnode_dz} */
class DzGroupNode extends DzNode {
	/**
 * @description TODO:
Add description.
 * @constructor
*/
	constructor() {
	
	};

}
/**
 * @classdesc Guide Pages are intended as a dynamic means of providing users with instructions on how to use a portion of the User Interface (UI), and/or provide widgets that simplify the process of getting started where an otherwise non-descript area of the UI would be displayed.
These pages are typically found within a DzPane via instances of filecontenttab_dz or productcontenttab_dz, or within an embedded instance of productassetsview_dz or associatedassetsview_dz.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/guidepage_dz} */
class DzGuidePage extends QWidget {
	/**
 * @returns The default path to the script to execute in order to create the UI in this page, sans extension.
 * @since 4.10.0.41
*/
	defaultScriptPath():String {
	
	};
	/**
 * @returns true if the page is the current widget in the stack, otherwise false.
*/
	isCurrentPage():Boolean {
	
	};
	/**
 * @description Sets whether the guide page is the current widget in the stack.
 * @param onOff - If true, the guide page is set as the current widget, otherwise the other widget in the stack is raised.
*/
	makeCurrentPage(onOff:Boolean):void {
	
	};
	/**
 * @description Loads the contents of the page by calling the current script. A special script context is provided to this script which exposes a global "getWidget()" function that returns a DzWidget wrapper. This DzWidget can be used by the script to create, populate, and connect the UI components inside the widget.
 * @returns DZ_NO_ERROR if no error is encountered, otherwise an appropriate error code.
 * @since 4.10.0.41
*/
	reload():DzError {
	
	};
	/**
 * @returns The full path to the script to execute in order to create the UI in this page.
 * @since 4.10.0.41
*/
	scriptFilename():String {
	
	};
	/**
 * @description Loads the contents of the page by calling the script at scriptPath. A special script context is provided to this script which exposes a global "getWidget()" function that returns a DzWidget wrapper. This DzWidget can be used by the script to create, populate, and connect the UI components inside the widget.
 * @returns DZ_NO_ERROR if no error is encountered, otherwise an appropriate error code.
 * @param scriptPath - The path to the script to execute in order to create the UI in this page. The path can be absolute, relative to the resources folder in the application data path, or relative to the application resources path. If the path does not include an extension, an attempt is made to locate a script with one of the possible extensions (in dsa, dsb, dse, ds order) at the specified path until one is found.
*/
	setUiScript(scriptPath:String):DzError {
	
	};

}
/**
 * @classdesc This class provides DAZ Script functionality for reading and writing *.gz ('gzipped') files. A high-level interface for zipping/unzipping files is provided with the functions zip() and unzip(). Also, a low-level interface is provided, allowing scripts to read and write compressed files directly.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/gzfile_dz} */
class DzGZFile extends DzFileInfo {
	/**
 * @description ENUMERATOR: Open the file for reading only.
*/
	
	static ReadOnly;
	/**
 * @description ENUMERATOR: Open the file for writing only.
*/
	
	static WriteOnly;
	/**
 * @description ENUMERATOR: Open the file for reading and writing.
*/
	
	static ReadWrite;
	/**
 * @description ENUMERATOR: The file is opened in append mode, so that all data is written to the end of the file.
*/
	
	static Append;
	/**
 * @description ENUMERATOR: If possible, the file is truncated before it is opened. All earlier contents of the file are lost.
*/
	
	static Truncate;
	/**
 * @description ENUMERATOR: When reading, the end-of-line terminators are translated to '
*/
	
	static Text;
	/**
 * @description ENUMERATOR: Alias for Text.
*/
	
	static Translate;
	/**
 * @description Creates a gzip file with the given file name.
 * @param file - The path of the *.gz file.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Closes the file.
*/
	close():void {
	
	};
	/**
 * @returns true if the current file position is at the end of the file, otherwise false.
*/
	eof():Boolean {
	
	};
	/**
 * @description Open the file with the given mode.
 * @returns true if the file was opened successfully, otherwise false.
 * @param accessMode - The access mode to open with.
*/
	open(accessMode:AccessMode):Boolean {
	
	};
	/**
 * @description Reads the entire file.
 * @returns The uncompressed file contents as a string.
*/
	read():String {
	
	};
	/**
 * @description Read one uncompressed character from the file buffer.
 * @returns The next uncompressed character read from the file.
*/
	readByte():Number {
	
	};
	/**
 * @description Read an uncompressed line of text from the file.
 * @returns The next uncompressed file line as a string.
*/
	readLine():String {
	
	};
	/**
 * @description Uncompresses the entire file and splits it into lines of text.
 * @returns A list of uncompressed text lines from the file.
*/
	readLines():Array {
	
	};
	/**
 * @description Unzips this file into the given filename.
 * @param filename - The name of the file to write to.
*/
	unzip(filename:String):Boolean {
	
	};
	/**
 * @description Write a string to the file compression buffer.
 * @param data - The string to write to the file.
 * @param length - The maximum number of characters to write to the file. If this is less than 1 (default), the whole string is written.
*/
	write(data:String, length:Number):void {
	
	};
	/**
 * @description Write a single byte (character) to the file compression buffer.
 * @param byte - The character to write to the file.
*/
	writeByte(byte:Number):void {
	
	};
	/**
 * @description Write a line of text to the file compression buffer.
 * @param data - The string to write to the file - a new line character will be written immediately following the string contents.
*/
	writeLine(data:String):void {
	
	};
	/**
 * @description Replaces this file's contents with the gzipped contents of the given file. If this file does not exist, it will be created.
 * @returns true if the file was successfully zipped, otherwise false.
 * @param filename - The name of the file to replace this file's contents with.
*/
	zip(filename:String):Boolean {
	
	};

}
/**
 * @classdesc Provided as a convenience for creating a DzBoxLayout where the direction is automatically initially set to DzBoxLayout.LeftToRight.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/hboxlayout_dz} */
class DzHBoxLayout extends DzBoxLayout {
	/**
 * @description Creates a horizontal box layout that manages the children widgets of the given parent widget
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Creates a horizontal box layout as a sub-layout of the given layout
 * @constructor
*/
	constructor() {
	
	};

}
/**
 * @classdesc Provides a DzButtonGroup with a horizontal layout.
Deprecated
Exists only to keep old code working. Do not use in new code. Use DzButtonGroup for state management and DzGroupBox in conjunction with DzHBoxLayout for visual representation instead.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/hbuttongroup_dz} */
class DzHButtonGroup extends DzButtonGroup {
	/**
 * @description Creates a button group as a child of the given parent widget
 * @constructor
*/
	constructor() {
	
	};

}
/**
 * @classdesc See Also:
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/header_dz} */
class DzHeader extends DzWidget {
	/**
 * @description Holds whether or not the header sections respond to mouse clicks.
	*/
	clickEnabled:Boolean;
	/**
 * @description Holds whether or not the header sections can be moved.
	*/
	movingEnabled:Boolean;
	/**
 * @description Holds whether or not the header sections can be resized.
	*/
	resizeEnabled:Boolean;
	/**
 * @description Holds whether or not the header sections can be stretched.
	*/
	stretchEnabled:Boolean;
	/**
 * @returns true if the header for a given section responds to mouse clicks, otherwise false.
 * @param section - The section to check.
*/
	isClickEnabled(section:Number):void {
	
	};
	/**
 * @returns true if resizing for a given section is enabled, otherwise false.
 * @param section - The section to check.
*/
	isResizeEnabled(section:Number):void {
	
	};
	/**
 * @returns true if stretching for a given section is enabled, otherwise false.
 * @param section - The section to check.
*/
	isStretchEnabled(section:Number):Boolean {
	
	};
	/**
 * @description Sets whether or not the header for a given section responds to mouse clicks.
 * @param enable - true to enable, false to disable.
 * @param section - The section to enable/disable clicking in.
*/
	setClickEnabled(enable:Boolean, section:Number):void {
	
	};
	/**
 * @description Sets whether or not resizing for a given section is enabled.
 * @param enable - true to enable, false to disable.
 * @param section - The section to enable/disable resizing of.
*/
	setResizeEnabled(enable:Boolean, section:Number):void {
	
	};
	/**
 * @description Sets whether or not stretch for a given section is enabled.
 * @param enable - true to enable, false to disable.
 * @param section - The section to enable/disable stretching of.
*/
	setStretchEnabled(enable:Boolean, section:Number):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when an item in the header is clicked
 * @signature `"clicked(int)"`
 * @event
*/
	clicked(section:Number):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when an item in the header changes index
 * @signature `"indexChange(int,int,int)"`
 * @event
*/
	indexChange(section:Number, fromIndex:Number, toIndex:Number):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when an item in the header is pressed
 * @signature `"pressed(int)"`
 * @event
*/
	pressed(section:Number):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when an item in the header is released
 * @signature `"released(int)"`
 * @event
*/
	released(section:Number):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when an item in the header is double clicked
 * @signature `"sectionHandleDoubleClicked(int)"`
 * @event
*/
	sectionHandleDoubleClicked(section:Number):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when an item in the header changes size
 * @signature `"sizeChange(int,int,int)"`
 * @event
*/
	sizeChange(section:Number, oldSize:Number, newSize:Number):void {
	
	};

}
/**
 * @classdesc This class manages help documentation for the application.
There is only one instance of this manager in an application. This instance is created and owned by DzApp. Request the instance via DzApp.getHelpMgr().
See Also:
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/helpmgr_dz} */
class DzHelpMgr extends QObject {
	/**
 * @description Opens the help browser at the given identifier.
 * @param identifier - The identifier to browse to.
*/
	browseToIdentifier(identifier:String):void {
	
	};
	/**
 * @description Opens the help browser at the given keyword.
 * @param keyword - The keyword to browse to.
*/
	browseToKeyword(keyword:String):void {
	
	};
	/**
 * @description Opens the spacified page in the help browser.
 * @param page - The path of the page to browse to; can be absolute or relative to DzApp.getDocumentationPath().
*/
	browseToPage(page:String):void {
	
	};
	/**
 * @description Opens the help browser at the given url.
 * @param url - The URL of the page to browse to.
*/
	browseToUrl(url:String):void {
	
	};
	/**
 * @returns The list of attributes for the help filter help keyword (if any), otherwise an empty list.
 * @param name - The name of the help filter to get the attributes of.
*/
	findFilterAttributes(name:String):Array {
	
	};
	/**
 * @returns The URL associated with the help identifier (if any), otherwise an empty URL.
 * @param id - The help identifier to find the associated URL for.
*/
	findIdentifierUrl(id:String):String {
	
	};
	/**
 * @returns The URL associated with the help keyword (if any), otherwise an empty URL.
 * @param keyword - The keyword to find the associated URL for.
*/
	findKeywordUrl(keyword:String):String {
	
	};
	/**
 * @returns The description for the help item named label (if any), otherwise an empty string.
 * @param label - The label of the help item.
*/
	getDescription(label:String):String {
	
	};
	/**
 * @returns The list of attributes for the help filter at the given index (if valid), otherwise an empty list.
 * @param which - The index of the help filter attributes to return.
*/
	getFilterAttributes(which:Number):Array {
	
	};
	/**
 * @returns The name of the help filter at the given index (if valid), otherwise an empty string.
 * @param which - The index of the help filter to return.
*/
	getFilterName(which:Number):String {
	
	};
	/**
 * @returns The group for the help item named label (if any), otherwise an empty string.
 * @param label - The label of the help item.
*/
	getGroup(label:String):String {
	
	};
	/**
 * @returns A list of the groups for the help items (if any), otherwise an empty list.
 * @since 4.11.0.151
*/
	getGroups():Array {
	
	};
	/**
 * @returns A list of labels for all help items (if any), otherwise an empty list.
*/
	getHelpItemLabels():Array {
	
	};
	/**
 * @returns The whats this help string text for the help item named label (if any), otherwise an empty string.
 * @param label - The label of the help item.
*/
	getHelpString(label:String):String {
	
	};
	/**
 * @returns The help string replacement text (if any), otherwise an empty string.
 * @since 4.11.0.359
 * @param group - The group name of the replacement text; must match the group name of the help item where the replacement will be used.
 * @param key - The key for the replacement text; must match the regular expression: [:/-_.a-zA-Z0-9]+.
*/
	getHelpStringReplacement(group:String, key:String):String {
	
	};
	/**
 * @returns A list of the help string replacement groups (if any), otherwise an empty list.
 * @since 4.11.0.359
*/
	getHelpStringReplacementGroups():Array {
	
	};
	/**
 * @returns A list of help string replacement keys in the specified group (if any), otherwise an empty list.
 * @since 4.11.0.359
 * @param group - The group name of the replacement text; expected to be the group name of the help item where the replacement will be used.
*/
	getHelpStringReplacementKeys(group:String):Array {
	
	};
	/**
 * @returns The help identifier at the given index (if valid), otherwise an empty string.
 * @param which - The index of the help identifier to return.
*/
	getIdentifier(which:Number):String {
	
	};
	/**
 * @returns The URL associated with the help identifier at the given index (if valid), otherwise an empty URL.
 * @param which - The index of the help identifier URL to return.
*/
	getIdentifierUrl(which:Number):String {
	
	};
	/**
 * @returns The help keyword at the given index (if valid), otherwise an empty string.
 * @param which - The index of the help keyword to return.
*/
	getKeyword(which:Number):String {
	
	};
	/**
 * @returns The URL associated with the help keyword at the given index (if any), otherwise an empty URL.
 * @param which - The index of the help keyword URL to return.
*/
	getKeywordUrl(which:Number):String {
	
	};
	/**
 * @returns The number of help filters.
*/
	getNumFilters():Number {
	
	};
	/**
 * @returns The number of help identifiers.
*/
	getNumIdentifiers():Number {
	
	};
	/**
 * @returns The number of help keywords.
*/
	getNumKeywords():Number {
	
	};
	/**
 * @returns The status tip text for the help item named label (if any), otherwise an empty string.
 * @param label - The label of the help item.
*/
	getStatusTip(label:String):String {
	
	};
	/**
 * @returns The tool tip text for the help item named label (if any), otherwise an empty string.
 * @param label - The label of the help item.
*/
	getToolTip(label:String):String {
	
	};
	/**
 * @returns true if a help item with the given label exists, otherwise false.
 * @param label - The label of the help item.
*/
	hasHelpItem(label:String):Boolean {
	
	};
	/**
 * @returns true if a help item with the given label is used, otherwise false.
 * @param label - The label of the help item.
*/
	isHelpItemUsed(label:String):Boolean {
	
	};
	/**
 * @description Removes the help item with the given label.
 * @returns true if label was removed, otherwise false.
 * @param label - The label of the help item to remove.
*/
	removeHelpItem(label:String):Boolean {
	
	};
	/**
 * @description Changes the name for the help item with the given label.
 * @returns true if oldLabel was renamed, otherwise false.
 * @param oldLabel - The label of the help item to rename.
 * @param newLabel - The new label of the help item.
*/
	renameHelpItem(oldLabel:String, newLabel:String):Boolean {
	
	};
	/**
 * @description Save the inline help to the specified path.
 * @returns DZ_NO_ERROR on success, otherwise an appropriate error code.
 * @since 4.11.0.151
 * @param path - The path to save to.
 * @param groups - The list of groups of items to include; an empty list (default) does not filter which groups to allow.
 * @param labels - The list of labels of items to include; an empty list (default) does not filter which labels to allow.
 * @attention If path ends in a filename (has a file extension), a single file is saved - see saveHelpItemsFile(). If path has no file extension, it is treated as a directory path and a file named after each group in groups is saved. If any group is an empty string, for the purposes of generating a filename, it will be replaced with a single underscore ('_') character.
*/
	saveHelpItems(filename:String, groups:Array, labels:Array):DzError {
	
	};
	/**
 * @description Sets the description for the help item with the given label. If a help item does not exist, one will be created.
 * @param label - The label of the help item to set the values of.
 * @param description - The string to set the description of the help item to.
*/
	setDescription(label:String, description:String):void {
	
	};
	/**
 * @description Sets the group for the help item with the given label. If a help item does not exist, one will be created.
 * @param label - The label of the help item to set the values of.
 * @param group - The string to set the group of the help item to.
*/
	setGroup(label:String, group:String):void {
	
	};
	/**
 * @description Sets the values for the help item with the given label. If a help item does not exist, one will be created.
 * @param label - The label of the help item to set the values of.
 * @param description - The string to set the description of the help item to.
 * @param toolTip - The string to set the tool tip of the help item to.
 * @param statusTip - The string to set the status tip of the help item to.
 * @param helpString - The string to set the whats this help string of the help item to.
*/
	setHelpItem(label:String, group:String, description:String, toolTip:String, statusTip:String, helpString:String):void {
	
	};
	/**
 * @description Sets the whats this help string for the help item with the given label. If a help item does not exist, one will be created.
 * @param label - The label of the help item to set the values of.
 * @param helpString - The string to set the whats this help string of the help item to.
*/
	setHelpString(label:String, helpString:String):void {
	
	};
	/**
 * @description Sets a key / value pair for a help string replacement in the specified group.
 * @since 4.11.0.359
 * @param group - The group name of the replacement text; must match the group name of the help item where the replacement will be used.
 * @param key - The key for the replacement text; must match the regular expression: [:/-_.a-zA-Z0-9]+.
 * @param value - The replacement text.
 * @attention When the help string (i.e., toolTip, statusTip, whatsThis) for a widget/action is registered (i.e., during startup) or updated, a regular expression is used to capture a specific pattern within the help string that is used to perform a lookup into a table of replacement strings. If an entry for the captured portion of the pattern is found in the replacement string table, in the same group as the help item for that widget/action, the pattern in the help string is replaced by the found string before being assigned to the widget/action. The pattern expected is loosely based on the "Mustache" syntax - that is, two opening curly braces (i.e., "{{"), followed by one or more specific characters, followed by two closing curly braces (i.e., "}}").
*/
	setHelpStringReplacement(group:String, key:String, value:String):void {
	
	};
	/**
 * @description Sets the status tip for the help item with the given label. If a help item does not exist, one will be created.
 * @param label - The label of the help item to set the values of.
 * @param statusTip - The string to set the status tip of the help item to.
*/
	setStatusTip(label:String, statusTip:String):void {
	
	};
	/**
 * @description Sets the tool tip for the help item with the given label. If a help item does not exist, one will be created.
 * @param label - The label of the help item to set the values of.
 * @param toolTip - The string to set the tool tip of the help item to.
*/
	setToolTip(label:String, toolTip:String):void {
	
	};
	/**
 * @description Called to update the inline help for a widget.
 * @param widget - The widget to update help for.
*/
	updateHelp(widget:QWidget):void {
	
	};
	/**
 * @description Called to update the inline help for an action.
 * @param action - The action to update help for.
*/
	updateHelp(action:DzAction):void {
	
	};

}
/**
 * @classdesc A DzHGroupBox provides a DzGroupBox with a horizontal layout.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/hgroupbox_dz} */
class DzHGroupBox extends DzGroupBox {
	/**
 * @description Creates a group box as a child of the given parent widget.
 * @param parent - The widget parent for the group box.
 * @constructor
*/
	constructor() {
	
	};

}
/**
 * @classdesc An asset save filter for saving a Hierarchical Material(s) Preset in the DSON format.
See Also:
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/hierarchicalmaterialassetfilter_dz} */
class DzHierarchicalMaterialAssetFilter extends DzAssetFileOutFilter {
	/**
 * @description TODO:
Add description.
 * @constructor
*/
	constructor() {
	
	};

}
/**
 * @classdesc An asset save filter for saving a Hierarchical Pose Preset in the DSON format.
See Also:
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/hierarchicalposeassetfilter_dz} */
class DzHierarchicalPoseAssetFilter extends DzAssetFileOutFilter {
	/**
 * @description TODO:
Add description.
 * @constructor
*/
	constructor() {
	
	};

}
/**
 * @classdesc Provides a simple implementation of the HTTP protocol.
See Also:
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/httphelper_dz} */
class DzHttpHelper extends QObject {
	/**
 * @description Constructor. Creates a new instance.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Aborts the current request and deletes all scheduled requests.
*/
	abort():void {
	
	};
	/**
 * @description Sends an asynchronous request to the server.
 * @param content - The content to send (if any).
 * @attention This function returns immediately, it does not wait for a response.
*/
	doAsynchronousRequest(content:ByteArray):void {
	
	};
	/**
 * @description Sends a synchronous request to the server.
 * @returns A byte array consisting of the response content.
 * @param content - The content to send (if any).
 * @attention This function waits for a response.
*/
	doSynchronousRequest(content:ByteArray):ByteArray {
	
	};
	/**
 * @returns A human-readable description of the last error that occurred (if any), otherwise an empty string.
*/
	getError():String {
	
	};
	/**
 * @description Sets the HTTP connection mode used for connecting to the server.
 * @param mode - The connection mode to set - i.e., "http" or "https".
*/
	setConnectionMode(mode:String):void {
	
	};
	/**
 * @description Sets the value of the special HTTP header content-type field.
 * @param type - The content-type to set - e.g., "application/json".
*/
	setContentType(type:String):void {
	
	};
	/**
 * @param keys - The keys in the http header.
 * @param values - The corresponding values for the keys.
 * @attention Keys and Values must be the same length
*/
	setHeaderValues(keys:Array, values:Array):void {
	
	};
	/**
 * @description Sets the host for requests.
 * @param host - The host to set - e.g.,"www.daz3d.com".
*/
	setHost(host:String):void {
	
	};
	/**
 * @description Sets the path portion of the URL.
 * @param path - The path to set - e.g., "/dazApi/slab/13176".
*/
	setPath(path:String):void {
	
	};
	/**
 * @description Sets the query string (and optionally fragment) portion of the URL.
 * @param query - The query string (and optionally fragment) to set.
*/
	setQueryString(query:String):void {
	
	};
	/**
 * @description Sets the HTTP request method which describes the requests action.
 * @param method - The request method to set - e.g., "GET", "POST", "HEAD".
*/
	setRequestMethod(method:String):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when new bytes are received.
 * @signature `"received(QByteArray)"`
 * @event
*/
	received(bytes:ByteArray):void {
	
	};

}
/**
 * @classdesc This is the DAZScript counterpart to the QImage type used in the DAZ Studio SDK.
Attention:@attention Attention:
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/image} */
class Image extends QObject {
	/**
 * @description Holds whether or not the image has an alpha channel.
	*/
	alphaBuffer:Boolean;
	/**
 * @description Holds the color depth of the image. (Read-Only)
	*/
	depth:Number;
	/**
 * @description Holds the X resolution of the image.
	*/
	dotsPerMeterX:Number;
	/**
 * @description Holds the Y resolution of the image.
	*/
	dotsPerMeterY:Number;
	/**
 * @description Holds the format of the image.
	*/
	format:Format;
	/**
 * @description Holds the height of the image. (Read-Only)
	*/
	height:Number;
	/**
 * @description Holds the number of colors in the image.
	*/
	numColors:Number;
	/**
 * @description Holds the number of pixels to offset the image when positioning it.
	*/
	offset:Point;
	/**
 * @description Holds the number of pixels to offset the image when positioning it.
	*/
	size:Size;
	/**
 * @description Holds the width of the image. (Read-Only)
	*/
	width:Number;
	/**
 * @description ENUMERATOR: The image is invalid.
*/
	
	static Format_Invalid;
	/**
 * @description ENUMERATOR: The image is stored using 1-bit per pixel. Bytes are packed with the most significant bit (MSB) first.
*/
	
	static Format_Mono;
	/**
 * @description ENUMERATOR: The image is stored using 1-bit per pixel. Bytes are packed with the less significant bit (LSB) first.
*/
	
	static Format_MonoLSB;
	/**
 * @description ENUMERATOR: The image is stored using 8-bit indexes into a colormap.
*/
	
	static Format_Indexed8;
	/**
 * @description ENUMERATOR: The image is stored using a 32-bit RGB format (0xffRRGGBB).
*/
	
	static Format_RGB32;
	/**
 * @description ENUMERATOR: The image is stored using a 32-bit ARGB format (0xAARRGGBB).
*/
	
	static Format_ARGB32;
	/**
 * @description ENUMERATOR: The image is stored using a premultiplied 32-bit ARGB format (0xAARRGGBB), i.e. the red, green, and blue channels are multiplied by the alpha component divided by 255. (If RR, GG, or BB has a higher value than the alpha channel, the results are undefined.) Certain operations (such as image composition using alpha blending) are faster using premultiplied ARGB32 than with plain ARGB32.
*/
	
	static Format_ARGB32_Premultiplied;
	/**
 * @description ENUMERATOR: The image is stored using a 16-bit RGB format (5-6-5).
*/
	
	static Format_RGB16;
	/**
 * @description ENUMERATOR: The image is stored using a premultiplied 24-bit ARGB format (8-5-6-5).
*/
	
	static Format_ARGB8565_Premultiplied;
	/**
 * @description ENUMERATOR: The image is stored using a 24-bit RGB format (6-6-6). The unused most significant bits is always zero.
*/
	
	static Format_RGB666;
	/**
 * @description ENUMERATOR: The image is stored using a premultiplied 24-bit ARGB format (6-6-6-6).
*/
	
	static Format_ARGB6666_Premultiplied;
	/**
 * @description ENUMERATOR: The image is stored using a 16-bit RGB format (5-5-5). The unused most significant bit is always zero.
*/
	
	static Format_RGB555;
	/**
 * @description ENUMERATOR: The image is stored using a premultiplied 24-bit ARGB format (8-5-5-5).
*/
	
	static Format_ARGB8555_Premultiplied;
	/**
 * @description ENUMERATOR: The image is stored using a 24-bit RGB format (8-8-8).
*/
	
	static Format_RGB888;
	/**
 * @description ENUMERATOR: The image is stored using a 16-bit RGB format (4-4-4). The unused bits are always zero.
*/
	
	static Format_RGB444;
	/**
 * @description ENUMERATOR: The image is stored using a premultiplied 16-bit ARGB format (4-4-4-4).
*/
	
	static Format_ARGB4444_Premultiplied;
	/**
 * @description Default Constructor.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @since 4.9.4.4
 * @param width - The width of the image.
 * @param height - The height of the image.
 * @param format - The format of the image.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Copy Constructor.
 * @param image - The image to copy.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @param filename - The name of the file to load the image's data from.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Gets a color value from the color table for the image only valid for.
 * @returns The RGB value of the color at the given index.
 * @param index - The index of the color to look up in the table.
*/
	color(index:Number):Color {
	
	};
	/**
 * @returns A copy of this image, where the pixels of this image are blended on top of other and the alpha of this image is reduced by the alpha of other.
 * @since 4.10.0.120
 * @param other - The image to composite this image with.
 * @param x - The offset, in the horizontal direction, from the top left corner of other.
 * @param y - The offset, in the vertical direction, from the top left corner of other.
*/
	compositeAtop(other:Image, x:int, y:int):Image {
	
	};
	/**
 * @returns An image where the other color is darkened to reflect the color of this image. White in this image leaves the other color unchanged.
 * @since 4.10.0.120
 * @param other - The image to composite this image with.
 * @param x - The offset, in the horizontal direction, from the top left corner of other.
 * @param y - The offset, in the vertical direction, from the top left corner of other.
*/
	compositeColorBurn(other:Image, x:int, y:int):Image {
	
	};
	/**
 * @returns An image where the other color is brightened to reflect the color of this image. Black in this image leaves the other color unchanged.
 * @since 4.10.0.120
 * @param other - The image to composite this image with.
 * @param x - The offset, in the horizontal direction, from the top left corner of other.
 * @param y - The offset, in the vertical direction, from the top left corner of other.
*/
	compositeColorDodge(other:Image, x:int, y:int):Image {
	
	};
	/**
 * @returns An image where the darker color of this image and other is selected.
 * @since 4.10.0.120
 * @param other - The image to composite this image with.
 * @param x - The offset, in the horizontal direction, from the top left corner of other.
 * @param y - The offset, in the vertical direction, from the top left corner of other.
*/
	compositeDarken(other:Image, x:int, y:int):Image {
	
	};
	/**
 * @returns An image where the darker of this image and other is subtracted from the lighter. White in this image inverts the color in other, whereas black leaves the color of other unchanged.
 * @since 4.10.0.120
 * @param other - The image to composite this image with.
 * @param x - The offset, in the horizontal direction, from the top left corner of other.
 * @param y - The offset, in the vertical direction, from the top left corner of other.
*/
	compositeDifference(other:Image, x:int, y:int):Image {
	
	};
	/**
 * @returns An image where the darker of this image and other is subtracted from the lighter. White in this image inverts the color in other, whereas black leaves the color of other unchanged.
 * @since 4.10.0.120
 * @param other - The image to composite this image with.
 * @param x - The offset, in the horizontal direction, from the top left corner of other.
 * @param y - The offset, in the vertical direction, from the top left corner of other.
*/
	compositeExclusion(other:Image, x:int, y:int):Image {
	
	};
	/**
 * @returns An image where the color of this image and other are multiplied or screened depending on the color of this image. A light color in this image will lighten the other color, whereas a dark color in this image will darken the other color.
 * @since 4.10.0.120
 * @param other - The image to composite this image with.
 * @param x - The offset, in the horizontal direction, from the top left corner of other.
 * @param y - The offset, in the vertical direction, from the top left corner of other.
*/
	compositeHardLight(other:Image, x:int, y:int):Image {
	
	};
	/**
 * @returns A copy of this image, where the alpha of this image is reduced by the alpha of other.
 * @since 4.10.0.120
 * @param other - The image to composite this image with.
 * @param x - The offset, in the horizontal direction, from the top left corner of other.
 * @param y - The offset, in the vertical direction, from the top left corner of other.
*/
	compositeIn(other:Image, x:int, y:int):Image {
	
	};
	/**
 * @returns An image where the lighter color of this image and other is selected.
 * @since 4.10.0.120
 * @param other - The image to composite this image with.
 * @param x - The offset, in the horizontal direction, from the top left corner of other.
 * @param y - The offset, in the vertical direction, from the top left corner of other.
*/
	compositeLighten(other:Image, x:int, y:int):Image {
	
	};
	/**
 * @returns An image where the color of this image and other are multiplied together.
 * @since 4.10.0.120
 * @param other - The image to composite this image with.
 * @param x - The offset, in the horizontal direction, from the top left corner of other.
 * @param y - The offset, in the vertical direction, from the top left corner of other.
 * @attention Multiplying a color with white (1) leaves the color unchanged, while multiplying a color with black (0) produces black.
*/
	compositeMultiply(other:Image, x:int, y:int):Image {
	
	};
	/**
 * @returns A copy of this image, where the alpha of this image is reduced by the inverse of the alpha of other.
 * @since 4.10.0.120
 * @param other - The image to composite this image with.
 * @param x - The offset, in the horizontal direction, from the top left corner of other.
 * @param y - The offset, in the vertical direction, from the top left corner of other.
*/
	compositeOut(other:Image, x:int, y:int):Image {
	
	};
	/**
 * @returns A copy of this image, where the alpha of this image is used to blend it on top of other.
 * @since 4.10.0.120
 * @param other - The image to composite this image with.
 * @param x - The offset, in the horizontal direction, from the top left corner of other.
 * @param y - The offset, in the vertical direction, from the top left corner of other.
*/
	compositeOver(other:Image, x:Number, y:Number):Image {
	
	};
	/**
 * @returns An image where the color of this image and other are multiplied or screened depending on other color. The other color is mixed with this color to reflect the lightness or darkness of other.
 * @since 4.10.0.120
 * @param other - The image to composite this image with.
 * @param x - The offset, in the horizontal direction, from the top left corner of other.
 * @param y - The offset, in the vertical direction, from the top left corner of other.
*/
	compositeOverlay(other:Image, x:int, y:int):Image {
	
	};
	/**
 * @returns An image where the alpha/color of this image and other are added together.
 * @since 4.10.0.120
 * @param other - The image to composite this image with.
 * @param x - The offset, in the horizontal direction, from the top left corner of other.
 * @param y - The offset, in the vertical direction, from the top left corner of other.
*/
	compositePlus(other:Image, x:int, y:int):Image {
	
	};
	/**
 * @returns An image where the inverse color of this image and other are multiplied together.
 * @since 4.10.0.120
 * @param other - The image to composite this image with.
 * @param x - The offset, in the horizontal direction, from the top left corner of other.
 * @param y - The offset, in the vertical direction, from the top left corner of other.
 * @attention Screening a color with white (1) produces white, while screening a with black (0) leaves the color unchanged.
*/
	compositeScreen(other:Image, x:int, y:int):Image {
	
	};
	/**
 * @returns An image where the color of this image and other are darkened or lightened depending on the color of this image.
 * @since 4.10.0.120
 * @param other - The image to composite this image with.
 * @param x - The offset, in the horizontal direction, from the top left corner of other.
 * @param y - The offset, in the vertical direction, from the top left corner of other.
*/
	compositeSoftLight(other:Image, x:int, y:int):Image {
	
	};
	/**
 * @returns A copy of this image, where the alpha is reduced by the inverse of the alpha of other, is merged with other, and whose alpha is reduced by the inverse of this image alpha.
 * @since 4.10.0.120
 * @param other - The image to composite this image with.
 * @param x - The offset, in the horizontal direction, from the top left corner of other.
 * @param y - The offset, in the vertical direction, from the top left corner of other.
*/
	compositeXor(other:Image, x:int, y:int):Image {
	
	};
	/**
 * @description Creates a copy of the image with the given color depth.
 * @returns The image converted to the new color depth.
 * @param depth - The color depth to convert the image to.
*/
	convertDepth(depth:Number):Image {
	
	};
	/**
 * @description Creates a copy of a portion of the image.
 * @returns A new copy of the specified area of the image.
 * @param x - The x position of the area to copy.
 * @param y - The y position of the area to copy.
 * @param w - The width of the area to copy.
 * @param h - The height of the area to copy.
*/
	copy(x:Number, y:Number, w:Number, h:Number):Image {
	
	};
	/**
 * @description Creates a copy of the image.
 * @returns A new copy of the image.
*/
	copy():Image {
	
	};
	/**
 * @description Creates a copy of a portion of the image.
 * @returns A new copy of the specified area of the image.
 * @param rect - The area to copy.
*/
	copy(rect:Rect):Image {
	
	};
	/**
 * @description Clears the image data and creates a new image with the given settings.
 * @param size - The new size for the image.
 * @param depth - The new color depth for the image.
 * @param numColors - The number of colors for the new image.
*/
	create(size:Size, depth:Number, numColors:Number):void {
	
	};
	/**
 * @description Clears the image data and creates a new image with the given settings.
 * @param w - The new width for the image.
 * @param h - The new height for the image.
 * @param depth - The new color depth for the image.
 * @param numColors - The number of colors for the new image.
*/
	create(w:Number, h:Number, depth:Number, numColors:Number):void {
	
	};
	/**
 * @returns A bounding rectangle that encloses the drawn text.
 * @since 4.10.0.121
 * @param x - The offset, in the horizontal direction, from the top left corner of the image to start drawing the (left of the) text.
 * @param y - The offset, in the vertical direction, from the top left corner of the image to start drawing the (top of the) text.
 * @param text - The text to draw.
 * @param font - The font to use when drawing the text.
 * @param color - The color to use when drawing the text.
 * @param flags - A bitwise OR of the following flags:

 DzWidget.AlignLeft

 DzWidget.AlignRight

 DzWidget.AlignHCenter

 DzWidget.AlignJustify

 DzWidget.AlignTop

 DzWidget.AlignBottom

 DzWidget.AlignVCenter

 DzWidget.AlignCenter

 DzWidget.TextSingleLine

 DzWidget.TextExpandTabs

 DzWidget.TextShowMnemonic

 DzWidget.TextWordWrap
*/
	drawText(x:Number, y:Number, text:String, font:Font, color:Color, flags:Number):Rect {
	
	};
	/**
 * @description Fills the image with color.
 * @param color - The color to set the pixels of the image.
*/
	fill(color:Color):void {
	
	};
	/**
 * @returns An image mask for the specified color.
 * @since 4.10.0.120
 * @param maskColor - The color to mask from this image.
 * @param invert - If true, the mask is inverted.
 * @param tolerance - The allowable amount of variation from the value of maskColor to consider as maskColor.
*/
	getColorMask(maskColor:Color, invert:Boolean, tolerance:Number):Image {
	
	};
	/**
 * @description Inverts all pixels in the image.
 * @param invertAlpha - If the image has a 32 bit depth, and this is true, the alpha channel will also be inverted, otherwise the alpha channel is unaffected.
*/
	invertPixels(invertAlpha:Boolean):void {
	
	};
	/**
 * @description Gets whether or not the image is Null.
 * @returns true if the image is Null (empty), otherwise .
*/
	isNull():Boolean {
	
	};
	/**
 * @description Loads data for the image from a file.
 * @returns true if the data was loaded, otherwise false. (since 4.11.0.155)
 * @param filename - The name of the file to load into the image.
 * @param format - The file format of the bytes in file pointed to by filename; i.e. "PNG". (since 4.11.0.155)
*/
	load(filename:String, format:String):Boolean {
	
	};
	/**
 * @description Loads data into the image from a byte array using the specified format.
 * @returns true if the data was loaded, otherwise false.
 * @since 4.10.0.88
 * @param data - The binary data to load into the image.
 * @param format - The file format of the bytes in data; i.e. "PNG".
*/
	loadFromData(data:ByteArray, format:String):Boolean {
	
	};
	/**
 * @description Creates a copy of this image that has been mirrored vertically.
 * @returns The mirrored copy of the image.
*/
	mirror():Image {
	
	};
	/**
 * @description Creates a copy of this image that has been mirrored.
 * @returns The mirrored copy of the image.
 * @param horizontal - If true, the image will be mirrored horizontally.
 * @param vertical - If true, the image will be mirrored vertically.
*/
	mirror(horizontal:bool, vertical:bool):Image {
	
	};
	/**
 * @description Gets the color value of an individual pixel.
 * @returns The value of the pixel at the given location.
 * @param x - The x position of the pixel.
 * @param y - The y position of the pixel.
*/
	pixel(x:Number, y:Number):Color {
	
	};
	/**
 * @description Saves the image to a file.
 * @param filename - The name of the file to save the image to.
*/
	save(filename:String):void {
	
	};
	/**
 * @description Creates a new image that is a scaled version of this image.
 * @returns The new scaled image.
 * @param width - The width of the new image.
 * @param height - The height of the new image.
*/
	scale(width:Number, height:Number):Image {
	
	};
	/**
 * @description Creates a new image that is a scaled version of this image.
 * @returns The new scaled image.
 * @param size - The size of the new image.
*/
	scale(size:Size):Image {
	
	};
	/**
 * @returns false if img is null, otherwise true.
 * @since 4.10.0.120
 * @param img - The image to set the alpha of this image from.
*/
	setAlphaFromImage(img:Image):Boolean {
	
	};
	/**
 * @description Sets the color value of a color in the color table.
 * @param index - The index of the color in the color table to change.
 * @param color - The new value for the color.
*/
	setColor(index:Number, color:Color):void {
	
	};
	/**
 * @description Sets the color value of the given pixel.
 * @param x - The x position of the pixel to change.
 * @param y - The y position of the pixel to change.
 * @param color - The new value for the pixel.
*/
	setPixel(x:Number, y:Number, color:Color):void {
	
	};
	/**
 * @description Sets the image text to text and associates it with key.
 * @since 4.9.3.78
 * @param key - The name of the key to associate the embedded text with.
 * @param text - The text to embedd and associate with the key.
*/
	setText(key:String, text:String):void {
	
	};
	/**
 * @description Creates a new image that is a scaled version of this image.
 * @returns The new scaled image.
 * @param size - The size of the new image.
*/
	smoothScale(size:Size):Image {
	
	};
	/**
 * @description Creates a new image that is a scaled version of this image.
 * @returns The new scaled image.
 * @param width - The width of the new image.
 * @param height - The height of the new image.
*/
	smoothScale(width:Number, height:Number):Image {
	
	};
	/**
 * @description Creates a copy of the image in which the Red and Blue values have been swapped.
 * @returns A BGR version of the image.
*/
	swapRGB():Image {
	
	};
	/**
 * @returns The embedded text associated with key. If key is an empty string, the whole embedded text is returned, with each key-text pair separated by a newline.
 * @since 4.9.3.78
 * @param key - The name of the key to get the associated text of.
*/
	text(key:String):void {
	
	};
	/**
 * @returns The text keys for this image.
 * @since 4.9.3.78
*/
	textKeys():Array {
	
	};

}
/**
 * @classdesc Deprecated
Exists only to keep code written prior to 4.6.2.23 working. Do not use in new code. Use DzTextureLayer instead.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/imageblend_dz} */
class DzImageBlend extends QObject {
	/**
 * @description Used to blend src into dest.
 * @param dest - The destination image that the blending operation will add to.
 * @param src - The source image that is being blended into the destination image.
*/
	blendImage(dest:Image, src:Image):void {
	
	};
	/**
 * @returns The description of the blending operation that will be displayed to the user.
*/
	getDescription():String {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the blend method has changed.
 * @signature `"blendMethodChanged()"`
 * @event
*/
	blendMethodChanged():void {
	
	};

}
/**
 * @classdesc Deprecated
Exists only to keep code written prior to 4.6.2.23 working. Do not use in new code. Use DzTextureLayer instead.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/imagecolorlayer_dz} */
class DzImageColorLayer extends  {
	/**
 * @description The color for this layer.
	*/
	color:Color;
	/**
 * @description Sets the size for this color layer.
 * @param size - The new size to use.
*/
	setSize(size:Size):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the layer color changes.
 * @signature `"colorChanged(const QColor&)"`
 * @event
*/
	colorChanged(color:Color):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the layer size changes.
 * @signature `"sizeChanged(const QSize&)"`
 * @event
*/
	sizeChanged(size:Size):void {
	
	};

}
/**
 * @classdesc Deprecated
Exists only to keep code written prior to 4.6.2.23 working. Do not use in new code. Use DzTextureComponent instead.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/imagecomponent_dz} */
class DzImageComponent extends QObject {
	/**
 * @description The label for the layer.
	*/
	label:String;
	/**
 * @description Holds whether or not the layer contributes to the final image.
	*/
	visible:Boolean;
	/**
 * @description TODO:
Add description.
*/
	addManipulator((deprecated:DzImageManip):void {
	
	};
	/**
 * @description TODO:
Add description.
*/
	freeImageData():void {
	
	};
	/**
 * @returns The image data of the component.
*/
	getImageData():Image {
	
	};
	/**
 * @description TODO:
Add description.
*/
	getManipulator(deprecated):DzImageManip (deprecated) {
	
	};
	/**
 * @description TODO:
Add description.
*/
	getNumManipulators():Number {
	
	};
	/**
 * @returns The size of the image data of the component.
*/
	getSize():Size {
	
	};
	/**
 * @description TODO:
Add description.
*/
	insertManipulator(idx:Number, (deprecated:DzImageManip):void {
	
	};
	/**
 * @description TODO:
Add description.
*/
	removeManipulator(idx:Number):Boolean {
	
	};
	/**
 * @description TODO:
Add description.
*/
	removeManipulator((deprecated:DzImageManip):Boolean {
	
	};
	/**
 * @description TODO:
Add description.
*/
	toTextureLayer(layer:DzTextureLayer, imageSize:Size):Boolean {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the image data for the component has been changed.
 * @signature `"imageDataChanged()"`
 * @event
*/
	imageDataChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the label of the component has been changed.
 * @signature `"labelChanged(const QString&)"`
 * @event
*/
	labelChanged(label:String):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the list of manipulators for the component has been changed.
 * @signature `"manipulatorListChanged()"`
 * @event
*/
	manipulatorListChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the visibility of the component has been changed.
 * @signature `"visibilityChanged(bool)"`
 * @event
*/
	visibilityChanged(onOff:Boolean):void {
	
	};

}
/**
 * @classdesc TODO:
Add detailed description.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/imageexporter_dz} */
class DzImageExporter extends DzFileIO {
	/**
 * @returns A description of the exporter that can be placed in a file type selection combo box (e.g. "JPEG Format")
*/
	getDescription():String {
	
	};
	/**
 * @returns The extension that this exporter will force filenames to.
*/
	getExtension():String {
	
	};
	/**
 * @returns true if this exporter writes to a 'real' file. Derived classes should override this to indicate whether or not they are writing out to a real file. Exporters can, if they want to, write to entities other than files (e.g. sockets, pipes, etc.)
*/
	isFileExporter():Boolean {
	
	};
	/**
 * @description Writes the file.
 * @returns DZ_NO_ERROR on success, otherwise an error code.
 * @param filename - The name of the file to save the image to.
 * @param image - Image to save to file.
*/
	saveImage(filename:String, image:Image):DzError {
	
	};
	/**
 * @description Writes the file.
 * @returns DZ_NO_ERROR on success, otherwise an error code.
 * @param filename - The name of the file to save the image to.
 * @param image - Image to save to file.
 * @param options - The options for the exporter.
*/
	saveImage(filename:String, image:Image, options:DzFileIOSettings):DzError {
	
	};

}
/**
 * @classdesc Deprecated
Exists only to keep code written prior to 4.6.2.23 working. Do not use in new code. Use DzTextureLayer instead.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/imagefilelayer_dz} */
class DzImageFileLayer extends  {
	/**
 * @description The filename of the image that this layer references.
	*/
	filename:String;
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the file name associated with this layer changes
 * @signature `"sizeChanged(const QString&)"`
 * @event
*/
	filenameChanged(filename:String):void {
	
	};

}
/**
 * @classdesc TODO:
Add detailed description.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/imageimporter_dz} */
class DzImageImporter extends DzFileIO {
	/**
 * @returns A description of the importer that can be placed in a file type selection combo box (e.g. "JPEG Format").
*/
	getDescription():String {
	
	};
	/**
 * @returns The file extension (excluding the preceding dot) supported by this importer.
*/
	getExtension(i:Number):String {
	
	};
	/**
 * @returns The number of supported file extensions for this importer.
*/
	getNumExtensions():Number {
	
	};
	/**
 * @description Reads the file.
 * @param filename - The name of the file to read.
 * @param image - Image to read data into.
*/
	loadImage(filename:String, image:Image, options:DzFileIOSettings):DzError {
	
	};
	/**
 * @description Reads the file.
 * @param filename - The name of the file to read.
 * @param image - Image to read data into.
*/
	loadImage(filename:String, image:Image):DzError {
	
	};
	/**
 * @description Test the given filename and file contents to see if this importer can read it.
 * @returns true if the importer can import the file, otherwise false.
*/
	recognize(filename:String):Boolean {
	
	};

}
/**
 * @classdesc Deprecated
Exists only to keep code written prior to 4.6.2.23 working. Do not use in new code. Use DzTextureLayer instead.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/imagelayer_dz} */
class DzImageLayer extends  {
	/**
 * @returns The blend mode for this image layer. The layer owns this object.
*/
	getBlendMode(deprecated):DzImageBlend (deprecated) {
	
	};
	/**
 * @returns A user-readable description of the layer.
*/
	getDescription():String {
	
	};
	/**
 * @returns The mask for this image layer, NULL if the layer is not masked. The layer owns this object.
*/
	getMask(deprecated):DzImageMask (deprecated) {
	
	};
	/**
 * @description Sets the blending mode for this image layer.
 * @param mode - The new blending mode for the image layer. The layer takes ownership of this object and deletes it when it is no longer used.
*/
	setBlendMode((deprecated:DzImageBlend):void {
	
	};
	/**
 * @description Sets the mask for this image layer.
 * @param mask - A pointer to the new mask for the image layer. The layer takes ownership of this object and deletes it when it is no longer used. To clear the current mask, pass in a NULL pointer.
*/
	setMask((deprecated:DzImageMask):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the blend mode for the layer has been changed.
 * @signature `"blendModeChanged(DzImageBlend*)"`
 * @event
*/
	blendModeChanged((deprecated:DzImageBlend):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the mask for the layer has been changed.
 * @signature `"maskChanged(DzImageMask*)"`
 * @event
*/
	maskChanged((deprecated:DzImageMask):void {
	
	};

}
/**
 * @classdesc Image manipulators are applied to an image layer before it is blended into the final image.
Deprecated
Exists only to keep code written prior to 4.6.2.23 working. Do not use in new code. Use DzTextureComponent instead.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/imagemanip_dz} */
class DzImageManip extends QObject {
	/**
 * @returns The description of the manipulator that will be displayed to the user.
*/
	getDescription():String {
	
	};
	/**
 * @description Applies the manipulator to img.
 * @param img - The image to apply the manipulation to.
*/
	manipulate(img:Image):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the value of the manipulator has changed and it needs to be reapplied.
 * @signature `"manipulationChanged()"`
 * @event
*/
	manipulationChanged():void {
	
	};

}
/**
 * @classdesc Deprecated
Exists only to keep code written prior to 4.6.2.23 working. Do not use in new code. Use DzTextureMask instead.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/imagemask_dz} */
class DzImageMask extends  {
	/**
 * @description The filename of the image that this mask references.
	*/
	filename:String;
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the file name associated with this mask changes
 * @signature `"sizeChanged(const QString&)"`
 * @event
*/
	filenameChanged(filename:String):void {
	
	};

}
/**
 * @classdesc Responsible for the management of image (texture) importers/exporters, as well as the lifetime (loading/unloading) and preparation (for display/rendering) of images used as textures for scene items.
There is only one instance of this manager in an application. This instance is created and owned by DzApp. Request the instance via DzApp.getImageMgr().
See Also:
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/imagemgr_dz} */
class DzImageMgr extends QObject {
	/**
 * @returns The size of the image, without actually reading the image contents. If the image format does not support this feature, this function returns an invalid size.
 * @since 4.9.3.82
 * @param imagePath - The full path of an image file to get the size of.
*/
	static getImageSize(imagePath:String):Size {
	
	};
	/**
 * @description Called prior to editing an image; pauses image preparation.
*/
	beginEditingImage():void {
	
	};
	/**
 * @returns A sharable object that stores information for a layered texture (image map) that is used in OpenGL.
 * @param name - The name of the layered texture to create.
*/
	createLayeredTexture(name:String):DzLayeredTexture {
	
	};
	/**
 * @description This method is called from the 3D viewports to clear out any texture objects that are no longer being used. It has to be called only when a Studio OGL context is current.
*/
	deleteUnusedTextureObjects():void {
	
	};
	/**
 * @returns A currently loaded image object whose source matches the given image filename (if any), otherwise NULL.
 * @param path - The full path of the image file to find a DzTexture instance for.
*/
	findImage(fullPath:String):DzTexture {
	
	};
	/**
 * @returns The image with the given name (if any), otherwise NULL.
 * @param name - The name of the image to find.
*/
	findImageByName(name:String):DzTexture {
	
	};
	/**
 * @returns The found layered texture (if any), otherwise null.
 * @param uri - The URI of the layered texture to find.
*/
	findLayeredTexture(uri:DzUri):DzLayeredTexture {
	
	};
	/**
 * @returns The found texture (if any), otherwise null.
 * @param uri - The URI of the texture to find.
*/
	findTexture(uri:DzUri):DzTexture {
	
	};
	/**
 * @description Called after editing an image; restarts image preparation.
 * @param img - The image to add to the preparation list.
*/
	finishedEditingImage(img:DzTexture):void {
	
	};
	/**
 * @returns The image at the given index (if valid), otherwise NULL.
 * @param which - The index of the image to return.
*/
	getImage(which:Number):DzTexture {
	
	};
	/**
 * @returns A currently loaded image object whose source matches the given image filename. If the image is not already loaded, it is loaded and the new image is returned.
 * @param fullPath - The full path of the image file to get a DzTexture instance for.
 * @param creationGamma - The gamma to set on this DzTexture instance if this function creates it.
*/
	getImage(fullPath:String, creationGamma:Number):DzTexture {
	
	};
	/**
 * @returns A currently loaded image object whose source matches the given image filename. If the image is not already loaded, it is loaded and the new image is returned.
 * @param fullPath - The full path of the image file to get a DzTexture instance for.
*/
	getImage(fullPath:String):DzTexture {
	
	};
	/**
 * @returns A currently loaded image object whose source matches the given image filename. If the image is not already loaded, it is loaded and the new image is returned.
 * @param fullPath - The full path of the image file to get a DzTexture instance for.
 * @param creationGamma - The gamma to set on this DzTexture instance if this function creates it.
 * @param creationType - The texture type to set on this DzTexture instance if this function creates it.
*/
	getImage(fullPath:String, creationGamma:Number, creationType:Number):DzTexture {
	
	};
	/**
 * @returns The path of the last directory that images were loaded from.
*/
	getImageOpenPath():String {
	
	};
	/**
 * @returns The path of the last directory that images were saved to.
*/
	getImageSavePath():String {
	
	};
	/**
 * @returns The number of currently available images.
*/
	getNumImages():Number {
	
	};
	/**
 * @description Creates a modified version of the given name if necessary to make it unique.
 * @returns The given name if it is already unique, otherwise a modified copy of the name that is unique.
 * @param name - The image name to make unique.
*/
	getUniqueImageName(name:String):String {
	
	};
	/**
 * @description Called by the framework to notify the manager that the image has been prepared for the off-line renderer.
 * @param img - The image that has been prepared.
 * @param tempName - The new temporary name for the image.
*/
	imagePrepared(img:DzTexture, tempName:String):void {
	
	};
	/**
 * @description Reads an image from a file.
 * @returns The loaded image.
 * @param filename - The name of the image file to load.
*/
	loadImage(filename:String):Image {
	
	};
	/**
 * @description Reads an image from a file.
 * @returns DZ_NO_ERROR if the file was loaded successfully, otherwise an appropriate error code.
 * @param filename - The name of the image file to load.
 * @param img - The image that the file will be loaded into.
 * @param importerIdx - The index of the importer to use to load the image. If less than zero, the manager will attempt to find an importer that can load the file.
*/
	loadImage(filename:String, img:Image, importerIdx:Number):DzError {
	
	};
	/**
 * @description Forces a flush of the background image processing buffer.
 * @param r - The renderer that is about to render the scene.
*/
	prepareAllImages(r:DzRenderer):void {
	
	};
	/**
 * @description Reloads any images whose source files have changed.
*/
	refresh():void {
	
	};
	/**
 * @description Writes an image to a file.
 * @returns DZ_NO_ERROR if the file was saved successfully, otherwise an appropriate error code.
 * @param filename - The name of the image file to save.
 * @param image - The image to save.
 * @param exporterIdx - The index of the exporter to use to save the image. If less than zero, the manager will attempt to find an appropriate exporter based on the filename extension.
*/
	saveImage(filename:String, image:Image, exporterIdx:Number):DzError {
	
	};
	/**
 * @description Sets the file path that a file open dialog will point to for images.
 * @param path - The folder path that the open image dialogs will default to.
*/
	setImageOpenPath(path:String):void {
	
	};
	/**
 * @description Sets the file path that a file save dialog will point to for images.
 * @param path - The folder path that the save image dialogs will default to.
*/
	setImageSavePath(path:String):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the auto refresh state changes.
 * @signature `"autoRefreshChanged(bool)"`
 * @event
*/
	autoRefreshChanged(onOff:Boolean):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when an image is added to or removed from the list.
 * @signature `"imageListChanged()"`
 * @event
*/
	imageListChanged():void {
	
	};

}
/**
 * @classdesc TODO:
Add detailed description.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/imageproperty_dz} */
class DzImageProperty extends DzProperty {
	/**
 * @description Default Constructor. Creates a non-user property.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @param name - The name of this property.
 * @param isUserProperty - If true, creates a user property; user properties are properties that can be added/deleted by users.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @returns The default map gamma.
 * @since 4.5.2.23
*/
	getDefaultMapGamma():Number {
	
	};
	/**
 * @returns The default map texture type.
 * @since 4.6.4.30
*/
	getDefaultMapTextureType():Number {
	
	};
	/**
 * @returns The texture modifier for this property (if any), otherwise NULL.
 * @since 4.6.4.80
*/
	getTextureModifier():DzTextureModifier {
	
	};
	/**
 * @returns The texture modifier flags.
 * @since 4.6.4.82
*/
	getTextureModifierFlags():Number {
	
	};
	/**
 * @returns The image value of this property.
*/
	getValue():DzTexture {
	
	};
	/**
 * @description Sets the default map gamma.
 * @since 4.5.2.23
 * @param gamma - The gamma value to set.
*/
	setDefaultMapGamma(gamma:Number):void {
	
	};
	/**
 * @description Sets the default map texture type.
 * @since 4.6.4.30
 * @param type - The map texture type to set.
*/
	setDefaultMapTextureType(type:Number):void {
	
	};
	/**
 * @description Sets the texture modifier.
 * @since 4.6.4.80
 * @param txtMod - The texture modifier to set.
*/
	setTextureModifier(txtMod:DzTextureModifier):void {
	
	};
	/**
 * @description Sets texture modifier flags for this property.
 * @since 4.6.4.82
 * @param flags - The texture modifier flags to set.
*/
	setTextureModifierFlags(flags:Number):void {
	
	};
	/**
 * @description Sets the texture value on this property.
 * @param val - The texture value to set.
*/
	setValue(val:DzTexture):Boolean {
	
	};
	/**
 * @description Sets the image value.
 * @param imgFile - The path of the image to set as the value; can be absolute or relative to a mapped directory.
*/
	setValue(imgFile:String):Boolean {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the default map gamma for this property has changed.
 * @signature `"defaultMapGammaChanged()"`
 * @event
*/
	defaultMapGammaChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the default map texture type for this property has changed.
 * @signature `"defaultMapTextureTypeChanged()"`
 * @event
*/
	defaultMapTextureTypeChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the texture modifier for this property has changed.
 * @signature `"textureModifierChanged()"`
 * @event
*/
	textureModifierChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the flags on the texture modifier for this property have changed.
 * @signature `"textureModifierFlagsChanged()"`
 * @event
*/
	textureModifierFlagsChanged():void {
	
	};

}
/**
 * @classdesc 
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/imagerenderhandler_dz} */
class DzImageRenderHandler extends DzRenderHandler {
	/**
 * @description Holds whether each frame is written to file when finishFrame is called. The internal images is reset on each new frame.
	*/
	writeToFile:Boolean;
	/**
 * @description Create a new image render handler for rendering a single frame.
 * @param size - The width & height of the rendered image.
 * @param renderTime - The time to render the frame at.
 * @param filename - The filename to save the image to.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Create a new image render handler for rendering a multiple frames.
 * @param size - The width & height of the rendered images.
 * @param startingTime - The time to start the render at.
 * @param numFrames - The number of frames to render.
 * @param filename - The name of the movie file or the base file name for the series.
 * @param isMovie - If true, the filename is expected to be a valid filename for saving a movie file, if false, it is expected to be a valid image name.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Begins rendering the given frame
*/
	beginFrame(frame:Number):void {
	
	};
	/**
 * @description Starts a render
*/
	beginRender():void {
	
	};
	/**
 * @description Finishes rendering the current frame
*/
	finishFrame():void {
	
	};
	/**
 * @description Finishes the render and saves it out to file
*/
	finishRender():void {
	
	};
	/**
 * @returns true if a thumbnail is created, false otherwise
*/
	getCreateThumbnail():Boolean {
	
	};
	/**
 * @returns The current frame's image. This image is reset at every call to beginFrame.
*/
	getCurrentFrameImage():Image {
	
	};
	/**
 * @returns The number of frames in the render
*/
	getNumFrames():Number {
	
	};
	/**
 * @returns the size of the rendered image
*/
	getSize():Size {
	
	};
	/**
 * @returns The starting time of the render
*/
	getStartingTime():DzTime {
	
	};
	/**
 * @description Sets whether a thumbnail is created
 * @param createThumb - If true, a thumbnail is created
*/
	setCreateThumbnail(createThumb:Boolean):void {
	
	};

}
/**
 * @classdesc TODO:
Add detailed description.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/imagetexture_dz} */
class DzImageTexture extends DzRefCountedItem, DzTexture {
	/**
 * @description Holds the author of the file for this texture. (Read Only)
	*/
	assetAuthor:DzAuthor;
	/**
 * @description Holds the revision version of the asset file for this texture. (Read Only)
	*/
	assetFileRevision:DzVersion;
	/**
 * @description Holds the asset id for this texture.
	*/
	assetId:String;
	/**
 * @description Holds the modified date of the asset file for this texture. (Read Only)
	*/
	assetModifiedDate:Date;
	/**
 * @description Holds whether or not the asset for this texture needs to be saved. (Read Only)
	*/
	assetNeedSave:Boolean;
	/**
 * @description Holds the URI of the asset source for this texture; only valid when the asset is in an embedded state - i.e. modified. (Read Only)
	*/
	assetSource:DzUri;
	/**
 * @description Holds the asset URI for this texture. (Read Only)
	*/
	assetUri:DzUri;
	/**
 * @description Constructor.
 * @param filename - The source file name for this texture.
 * @param gamma - The gamma to set; gamma ⇐ 0 - do best guess of the image gamma; gamma == 1 - no gamma correction needed; gamma > 0 != 1 - the image is at the specified gamma.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Constructor.
 * @param filename - The source file name for this texture.
 * @param gamma - The gamma to set; gamma ⇐ 0 - do best guess of the image gamma; gamma == 1 - no gamma correction needed; gamma > 0 != 1 - the image is at the specified gamma.
 * @param textureType - The texture type of this texture.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the image texture has been modified.
 * @signature `"assetModified()"`
 * @event
*/
	assetModified():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted after the image texture has been saved.
 * @signature `"assetWasSaved()"`
 * @event
*/
	assetWasSaved():void {
	
	};

}
/**
 * @classdesc TODO:
Add detailed description.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/importer_dz} */
class DzImporter extends DzFileIO {
	/**
 * @returns A description of the importer that can be placed in a file type selection combobox (e.g. "Acclaim Skeleton").
*/
	getDescription():String {
	
	};
	/**
 * @returns The i'th file extension (excluding the preceding dot) supported by this importer.
*/
	getExtension(i:Number):String {
	
	};
	/**
 * @returns The imported node at the given index (if valid), otherwise an empty string.
 * @since 4.11.0.254
 * @param i - The index of the imported node to get.
*/
	getImportedNode(i:Number):DzNode {
	
	};
	/**
 * @returns The number of supported file extensions for this importer.
*/
	getNumExtensions():Number {
	
	};
	/**
 * @returns The number of nodes that were imported.
 * @since 4.11.0.254
*/
	getNumImportedNodes():Number {
	
	};
	/**
 * @description Imports from a file.
 * @returns DZ_NO_ERROR on success, or an error code if the import failed.
 * @param filename - The full path of the file to import.
 * @param options - The options to use while importing the file.
*/
	readFile(filename:String, options:DzFileIOSettings):DzError {
	
	};
	/**
 * @description Imports from a file.
 * @returns DZ_NO_ERROR on success, or an error code if the import failed.
 * @param filename - The name of the file to import.
*/
	readFile(filename:String):DzError {
	
	};
	/**
 * @description Test the given filename and file contents to see if this importer can read it.
 * @returns true if the importer can import the file, otherwise false.
 * @param filename - The name of the file to test.
*/
	recognize(filename:String):Boolean {
	
	};

}
/**
 * @classdesc There is only one instance of this manager in an application. This instance is created and owned by DzApp. Request the instance via DzApp.getImportMgr().
See Also:
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/importmgr_dz} */
class DzImportMgr extends QObject {
	/**
 * @description Calls recognize() on each of the importers and attempts to match an importer with the filename.
 * @returns true if an importer was found that can read the given file.
 * @param filename - The name of the file to try to find an importer for.
*/
	static canImport(filename:String):Boolean {
	
	};
	/**
 * @description Calls recognize() on each of the importers and attempts to match an importer with the filename.
 * @returns A new instance of the matching importer, or NULL if none was found. The caller takes ownership of this pointer and is responsible for deleting it.
 * @param filename - The name of the file to try to find an importer for.
*/
	static findImporter(filename:String):DzImporter {
	
	};
	/**
 * @description Attempts to locate an importer class type by name.
 * @returns A new instance of the matching importer, or NULL if none was found. The caller takes ownership of this pointer and is responsible for deleting it.
 * @param className - The class name of the importer to find.
*/
	static findImporterByClassName(className:String):DzImporter {
	
	};
	/**
 * @description Calls recognize() on each of the importers and attempts to match an importer with the filename.
 * @returns The index of a matching importer, or -1 if none was found.
 * @param filename - The name of the file to try to find an importer for.
*/
	static findImporterIndex(filename:String):Number {
	
	};
	/**
 * @returns The number of importers currently supported.
*/
	getNumImporters():Number {
	
	};
	/**
 * @description Populates the given filter with all the geometry types recognized by the import manager.
 * @param filter - The filter to populate
 * @param defaultFilter - The filter to set as the default
 * @param makeAllFilesEntry - If true, an extra filter is appended to the list that matches all the valid extensions.
*/
	static makeGeometryFileFilter(filter:DzFileFilter, defaultFilter:String, makeAllFilesEntry:Boolean):void {
	
	};
	/**
 * @description Populates the given filter with all the types recognized by the import manager.
 * @param filter - The filter to populate
 * @param defaultFilter - The filter to set as the default
 * @param makeAllFilesEntry - If true, an extra filter is appended to the list that matches all the valid extensions.
*/
	static makeImportFileFilter(filter:DzFileFilter, defaultFilter:String, makeAllFilesEntry:Boolean):void {
	
	};
	/**
 * @description Gets the full import file name.
 * @returns The full import file name.
*/
	getImportFileName():String {
	
	};
	/**
 * @description Gets the default import directory - this is typically the last directory that the user imported a file from, and will be the directory that user will be taken to next time the file import dialog is displayed.
 * @returns The current default directory that files are imported from.
*/
	getImportPath():String {
	
	};
	/**
 * @returns true if there is currently a file being imported, otherwise false.
*/
	isImporting():Boolean {
	
	};
	/**
 * @description Import the contents of a file into the scene.
 * @returns DZ_NO_ERROR if the file import was successful.
 * @param filename - The name of the file to import. This must be the full filename including the path to the file.
 * @param importerIdx - The index of the importer class to use. If this is less than 0, then the recognize function of the importer classes will be called with the fileName to attempt to find an appropriate importer.
*/
	readFile(filename:String, importerIdx:Number):DzError {
	
	};
	/**
 * @description Import the contents of a file into the scene.
 * @returns DZ_NO_ERROR if the file import was successful.
 * @param filename - The name of the file to import. This must be the full filename including the path to the file.
 * @param importerIdx - The index of the importer class to use. If this is less than 0, then the recognize function of the importer classes will be called with the fileName to attempt to find an appropriate importer.
 * @param options - The options to use while importing the file.
*/
	readFile(filename:String, importerIdx:Number, options:DzFileIOSettings):DzError {
	
	};
	/**
 * @description Reads the geometry file into a new shape.
 * @returns The new shape that the geometry was read into, NULL on failure.
 * @param filename - The full path of the file to import.
 * @param importerIdx - The index of the importer to use, if invalid (<0) the file's extension will be used to select an appropriate importer.
 * @param options - The options to use while importing the file.
*/
	readGeometry(filename:String, importerIdx:Number, options:DzFileIOSettings):DzShape {
	
	};
	/**
 * @description Reads the geometry file into a new shape.
 * @returns The new shape that the geometry was read into, NULL on failure.
 * @param filename - The full path of the file to import.
 * @param importerIdx - The index of the importer to use, if invalid (<0) the file's extension will be used to select an appropriate importer.
*/
	readGeometry(filename:String, importerIdx:Number):DzShape {
	
	};
	/**
 * @description Sets the import file name - this is the full file name that file was import
 * @param fileName - The full file name.
*/
	setImportFileName(fileName:String):void {
	
	};
	/**
 * @description Sets the default import directory - this is the directory that user will be taken to next time the file import dialog is displayed.
 * @param path - The new default path for importing files.
*/
	setImportPath(path:String):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted after importing a file. This may not always be emitted after every fileImportStarting() signal if there were errors during file loading.
 * @signature `"fileImported()"`
 * @event
*/
	fileImported():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted just before importing a file.
 * @signature `"fileImportStarting()"`
 * @event
*/
	fileImportStarting():void {
	
	};

}
/**
 * @classdesc DzInfoDivider places a divider bar between your widget and a tab bar of info tabs. This class is very similar (but not exactly like) DzDynamicDividerWgt. For situations where you want to control both sides of the divider bar it is recommended to use DzDynamicDividerWgt.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/infodivider_dz} */
class DzInfoDivider extends QWidget {
	/**
 * @returns The current divider position, or -1 if minimized.
*/
	getActualDividerPercent():Number {
	
	};
	/**
 * @returns The info tabs for this divider bar. The info divider allows you to display tips, metadata, and other info relating to your product.
*/
	getInfoTabs():DzInfoTabs {
	
	};
	/**
 * @returns The preffered relative position of the divider.
*/
	getPreferredDividerPercent():Number {
	
	};
	/**
 * @returns The minimized (toggled) state as a Number.  * 0 = NotMinimized1 = HalfMinimized2 = FullMinimized
*/
	getToggleState():Number {
	
	};
	/**
 * @returns true if the divider bar is in a minimized state, othewise false.
*/
	isMinimized():Boolean {
	
	};
	/**
 * @returns true if the divider bar is in a minimized state, otherwise false.
*/
	isToggled():Boolean {
	
	};
	/**
 * @description Moves the divider distance pixels from the current location.
 * @param distance - The distance in pixels from the current location. If the new location will cause the divider to be displayed in an invalid location, it will be displayed in the closest location to where it was dragged
*/
	moveDivider(distance:Number):void {
	
	};
	/**
 * @description Sets the location of the divider bar.
 * @param position - The preffered relative position of the divider. If the new location will cause the divider to be displayed in an invalid location, it will be displayed in the closest location possible.
*/
	setPreferredDividerPercent(distance:Number):void {
	
	};
	/**
 * @description Sets the toggled state of this divider bar.
 * @param state - The new state of this divider bar:    * 0 = Not Minimized

 1 = Half Minimized

 2 = Full Minimized
*/
	setToggleState(state:Number):void {
	
	};
	/**
 * @description Toggles the second widget between fully closed and fully open.
*/
	toggleClosed():void {
	
	};
	/**
 * @returns true if this divider bar can be toggled, otherwise false.
*/
	toggleEnabled():Boolean {
	
	};
	/**
 * @description Toggles the minimized state of the second widget. If toggling is disabled, this method has no effect. If either the first or second widget is null, toggling this method will also have no effect.
*/
	toggleMinimized():void {
	
	};

}
/**
 * @classdesc 
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/infotabs_dz} */
class DzInfoTabs extends QWidget {
	/**
 * @returns The index of the current tab
*/
	currentTab():Number {
	
	};
	/**
 * @description Hides the widget responsible for displaying tab contents
*/
	hideStack():void {
	
	};
	/**
 * @returns true if the widget responsible for displaying tab contents is hidden, false otherwise
*/
	isStackHidden():Boolean {
	
	};
	/**
 * @description Sets the current tab to which
 * @param which - The tab to make current
*/
	setCurrentTab(which:Number):void {
	
	};
	/**
 * @description Sets the file info for the given asset
 * @param asset - The asset file from which file info will be populated
*/
	setFileInfo(asset:DzAsset):void {
	
	};
	/**
 * @description Sets file and meta data info for the given asset
 * @param asset - The asset file from which file and metadata info will be populated
*/
	setInfo(asset:DzAsset):void {
	
	};
	/**
 * @description Sets metadata info for the given asset
 * @param asset - The asset file from which file info will be populated
*/
	setMetaInfo(asset:DzAsset):void {
	
	};
	/**
 * @description Sets info for the given node
 * @param node - The node from which info will be populated
*/
	setNodeInfo(node:DzNode):void {
	
	};
	/**
 * @description Sets file info from the given asset container
 * @param product - The product from which product info will be populated
*/
	setProductInfo(product:DzProductAssetContainer):void {
	
	};
	/**
 * @description Sets the UI script responsible for displaying the contents of the Tips tab
 * @returns A DzError error code indicating the status of setting the UI File
 * @param path - The path to the UI script file to use
*/
	setTipUIScript(path:String):DzError {
	
	};
	/**
 * @description Specifies whether the file tab is shown or not
 * @param onOff - If true, the file tab will be shown, otherwise it will be hidden
*/
	showFileTab(onOff:Boolean):void {
	
	};
	/**
 * @description Specifies whether the metadata tab is shown or not
 * @param onOff - If true, the metadata tab will be shown, otherwise it will be hidden
*/
	showMetaTab(onOff:Boolean):void {
	
	};
	/**
 * @description Specifies whether the node tab is shown or not
 * @param onOff - If true, the node tab will be shown, otherwise it will be hidden
*/
	showNodeTab(onOff:Boolean):void {
	
	};
	/**
 * @description Specifies whether the render tab is shown or not
 * @param onOff - If true, the render tab will be shown, otherwise it will be hidden
*/
	showRenderTab(onOff:Boolean):void {
	
	};
	/**
 * @description Shows the widget responsible for displaying the contents of the tabs
*/
	showStack():void {
	
	};
	/**
 * @description Specifies whether the store tab is shown or not
 * @since 4.8.1.79
 * @param onOff - If true, the store tab will be shown, otherwise it will be hidden
*/
	showStoreTab(onOff:Boolean):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when a keyword is clicked and the CTRL modifier key is pressed.
 * @signature `"keywordAddUniqueClicked(const QString&)"`
 * @event
*/
	keywordAddUniqueClicked(keyword:String):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when a keyword is clicked.
 * @signature `"keywordSetClicked(const QString&)"`
 * @event
*/
	keywordSetClicked(keyword:String):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the apply button on the render tab is clicked.
 * @signature `"renderApplyClicked()"`
 * @event
*/
	renderApplyClicked():void {
	
	};

}
/**
 * @classdesc This class can be used to create a single instance of another DzNode (subclass) that also has a DzOobject for inclusion in a group of like nodes. These instances are drawn the same as the target node except for transforms.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/instancegroupitem_dz} */
class DzInstanceGroupItem extends DzBase {
	/**
 * @description TODO:
Add description.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Copies the transform values of the given nodes transform properties. Also copies rotation order.
 * @param node - The node to copy transform values from.
*/
	copyTransformFromNode(node:DzNode):void {
	
	};
	/**
 * @description Copies the transform values to the given nodes transform properties. Also copies rotation order
 * @param node - The node to copy transform values from.
*/
	copyTransformToNode(node:DzNode):void {
	
	};
	/**
 * @returns The endpoint values of this item.
*/
	getEndPointValues():DzVec3 {
	
	};
	/**
 * @returns The general scale value of this item.
*/
	getGeneralScaleValue():Number {
	
	};
	/**
 * @returns The label of this item.
*/
	getLabel():String {
	
	};
	/**
 * @returns The local-space position of the item at the current time.
*/
	getLocalPos():DzVec3 {
	
	};
	/**
 * @returns The local-space rotation of the item at the current time.
*/
	getLocalRot():DzQuat {
	
	};
	/**
 * @returns The local-space scale of the item at the time.
*/
	getLocalScale():DzMatrix3 {
	
	};
	/**
 * @returns A matrix representing the composed local transform for this item at the current time.
*/
	getLocalTransform():DzMatrix3 {
	
	};
	/**
 * @returns The orientation of the item.
*/
	getOrientation():DzQuat {
	
	};
	/**
 * @returns The orientation values of this item, in degrees.
*/
	getOrientationValues():DzVec3 {
	
	};
	/**
 * @returns The origin (centerpoint) values of this item.
*/
	getOriginValues():DzVec3 {
	
	};
	/**
 * @returns The potion values of this item.
*/
	getPositionValues():DzVec3 {
	
	};
	/**
 * @returns The rotation order of this item.
*/
	getRotationOrder():DzRotationOrder {
	
	};
	/**
 * @returns The rotation values of this item, in degrees.
*/
	getRotationValues():DzVec3 {
	
	};
	/**
 * @returns The world-space position of the item.
 * @param tm - The scene time at which to get the the transform.
 * @param defaultVal - Use the default version of the origin, end point, and orientation instead of the current position.
*/
	getWSPos(tm:DzTime, defaultVal:Boolean):DzVec3 {
	
	};
	/**
 * @returns The world-space position of the item at the current time.
*/
	getWSPos():DzVec3 {
	
	};
	/**
 * @returns The world-space rotation of the item.
 * @param tm - The scene time at which to get the the transform.
 * @param defaultVal - Use the default version of the origin, end point, and orientation instead of the current position.
*/
	getWSRot(tm:DzTime, defaultVal:Boolean):DzQuat {
	
	};
	/**
 * @returns The world-space rotation of the item at the current time.
*/
	getWSRot():DzQuat {
	
	};
	/**
 * @returns The world-space scale of the item.
 * @param tm - The scene time at which to get the the transform.
 * @param defaultVal - Use the default version of the origin, end point, and orientation instead of the current position.
*/
	getWSScale(tm:DzTime, defaultVal:Boolean):DzMatrix3 {
	
	};
	/**
 * @returns The world-space scale of the item at the current time.
*/
	getWSScale():DzMatrix3 {
	
	};
	/**
 * @returns A matrix representing the composed world-space transform for this item at the current time.
*/
	getWSTransform():DzMatrix3 {
	
	};
	/**
 * @returns A matrix representing the composed world-space transform for this item.
 * @param tm - The scene time at which to get the the transform.
 * @param defaultVal - Use the default version of the origin, end point, and orientation instead of the current position.
*/
	getWSTransform(tm:DzTime, defaultVal:Boolean):DzMatrix3 {
	
	};
	/**
 * @returns The xyz scale values of this item.
*/
	getXYZScaleValues():DzVec3 {
	
	};
	/**
 * @returns true if this node inherits scale from its parent, otherwise false.
*/
	inheritsScale():Boolean {
	
	};
	/**
 * @description Sets the endpoint for this item.
 * @param x - The x position.
 * @param y - The y position.
 * @param z - The z position.
*/
	setEndPoint(x:Number, y:Number, z:Number):void {
	
	};
	/**
 * @description Sets whether or not this node inherits the scale of its parent.
 * @param onOff - If true, scaling the parent of this node will scale this node also.
*/
	setInheritScale(onOff:Boolean):void {
	
	};
	/**
 * @description Sets the label for this item.
 * @param label - The label to set.
*/
	setLabel(label:String):void {
	
	};
	/**
 * @description Sets the orientation for this item.
 * @param x - The rotation, in degrees, on the x axis.
 * @param y - The rotation, in degrees, on the y axis.
 * @param z - The rotation, in degrees, on the z axis.
*/
	setOrientation(x:Number, y:Number, z:Number):void {
	
	};
	/**
 * @description Sets the origin for this item.
 * @param x - The x position.
 * @param y - The y position.
 * @param z - The z position.
*/
	setOrigin(x:Number, y:Number, z:Number):void {
	
	};
	/**
 * @description Sets the position for this item.
 * @param x - The x position.
 * @param y - The y position.
 * @param z - The z position.
*/
	setPosition(x:Number, y:Number, z:Number):void {
	
	};
	/**
 * @description Sets the rotation for this item.
 * @param x - The rotation, in degrees, on the x axis.
 * @param y - The rotation, in degrees, on the y axis.
 * @param z - The rotation, in degrees, on the z axis.
*/
	setRotation(x:Number, y:Number, z:Number):void {
	
	};
	/**
 * @description Sets the rotation order for this item.
 * @param order - The rotation order to set.
*/
	setRotationOrder(order:DzRotationOrder):void {
	
	};
	/**
 * @description Sets the scale for this item.
 * @param x - The scale on the x axis.
 * @param y - The scale on the y axis.
 * @param z - The scale on the z axis.
 * @param genScale - The general scale.
*/
	setScale(x:Number, y:Number, z:Number, genScale:Number):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the local transform for this item has changed.
 * @signature `"localTransformChanged()"`
 * @event
*/
	localTransformChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the transform for this item has changed.
 * @signature `"transformChanged()"`
 * @event
*/
	transformChanged():void {
	
	};

}
/**
 * @classdesc This class can be used to create a multiple instances of another DzNode (subclass) that also has a DzOobject. These instances are drawn the same as the target node except for transforms.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/instancegroupnode_dz} */
class DzInstanceGroupNode extends DzInstanceNode {
	/**
 * @description Default Constructor.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Begin edit of this node.
 * @attention If adding or removing many items from this node it is more efficient to call beginItemEdit() do edits and call finishItemEdit() when done.
*/
	beginItemEdit():void {
	
	};
	/**
 * @returns Removes all items from this node.
*/
	clearItems():void {
	
	};
	/**
 * @returns A new instance group item.
*/
	createItem():DzInstanceGroupItem {
	
	};
	/**
 * @returns The index for the given item or -1 if it does not belong to this node.
 * @param item - The item to get the index for.
*/
	findIndexForItem(item:DzInstanceGroupItem):Number {
	
	};
	/**
 * @description Finish edit of this node.
*/
	finishItemEdit():void {
	
	};
	/**
 * @returns The group item at the given index or null if it does not exist.
 * @param index - The index of the item to get the group of.
*/
	getGroupItem(index:Number):DzInstanceGroupItem {
	
	};
	/**
 * @returns The number of group items.
*/
	getNumberOfGroupItems():Number {
	
	};
	/**
 * @returns true if in beginItemEdit/finishItemEdit session
*/
	isEditingItems():Boolean {
	
	};
	/**
 * @returns Removes and deletes the item at the given index.
 * @param index - The index of the item to remove.
*/
	removeItem(index:Number):void {
	
	};

}
/**
 * @classdesc This class can be used to create a single instance of another DzNode (subclass) that also has a DzOobject. The instance is drawn the same as the target node except for transforms.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/instancenode_dz} */
class DzInstanceNode extends DzNode {
	/**
 * @description Default Constructor.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @returns The property controlling how the node is instanced (i.e., just the target or the target and its children).
*/
	getCopyModeControl():DzEnumProperty {
	
	};
	/**
 * @returns The current node being instanced by this node (if any), otherwise NULL.
*/
	getTarget():DzNode {
	
	};
	/**
 * @returns The property pointing at the target node.
*/
	getTargetControl():DzNodeProperty {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the target for this instance has changed.
 * @signature `"targetChanged()"`
 * @event
*/
	targetChanged():void {
	
	};

}
/**
 * @classdesc See Also:
Since:
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/int2_dz} */
class DzInt2 extends Object {
	/**
 * @description Holds the height of this vector; an alias to the y component.
	*/
	height:Number;
	/**
 * @description Holds the width of this vector; an alias for the x component.
	*/
	width:Number;
	/**
 * @description Holds the x component of this vector.
	*/
	x:Number;
	/**
 * @description Holds the y component of this vector.
	*/
	y:Number;
	/**
 * @description Default Constructor. Creates an uninitialized vector.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Creates a vector by parsing a string.
 * @param vec - A string representation of the vector in the form "[ width, height ]"
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Copy Constructor.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Copy Constructor.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Creates and initializes this vector with an array of 2 integer values.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Creates and initializes this vector with 2 integer values.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Sets the value of each component to its respective absolute value.
*/
	abs():void {
	
	};
	/**
 * @returns A vector that is the result of adding vec to this vector.
 * @param vec - The vector to add to this vector.
*/
	add(vec:DzInt2):DzInt2 {
	
	};
	/**
 * @returns The average of each component of this vector.
 * @since 4.9.3.118
*/
	average():Number {
	
	};
	/**
 * @description Clamps each component of this vector.
 * @since 4.9.3.118
 * @param min - The minimum value.
 * @param max - The maximum value.
*/
	clamp(min:Number, max:Number):void {
	
	};
	/**
 * @returns A copy of this vector where each component has been clamped to min and max.
 * @since 4.9.3.118
 * @param min - The minimum value.
 * @param max - The maximum value.
*/
	clamped(min:Number, max:Number):DzInt2 {
	
	};
	/**
 * @returns A copy of this vector where each component has been clamped to max.
 * @since 4.9.3.118
 * @param max - The maximum value.
*/
	clampedMax(max:Number):DzInt2 {
	
	};
	/**
 * @returns A copy of this vector where each component has been clamped to min.
 * @since 4.9.3.118
 * @param min - The minimum value.
*/
	clampedMin(min:Number):DzInt2 {
	
	};
	/**
 * @description Clamps the maximum value for each component of this vector.
 * @since 4.9.3.118
 * @param max - The maximum value.
*/
	clampMax(max:Number):void {
	
	};
	/**
 * @description Clamps the minimum value for each component of this vector.
 * @since 4.9.3.118
 * @param min - The minimum value.
*/
	clampMin(min:Number):void {
	
	};
	/**
 * @returns A vector that is the result of dividing vec by this vector.
 * @param vec - The vector to divide by this vector.
*/
	divide(vec:DzInt2):DzInt2 {
	
	};
	/**
 * @returns A vector with components set to (1, 1).
 * @since 4.14.1.31
*/
	identity():DzInt2 {
	
	};
	/**
 * @returns true if both values are zero (0, 0), otherwise false.
*/
	isNull():Boolean {
	
	};
	/**
 * @returns The length of this vector.
*/
	length():Number {
	
	};
	/**
 * @returns The length of this vector, squared.
*/
	lengthSquared():Number {
	
	};
	/**
 * @description Performs a linear interpolation between v1 and v2 based on the value of t.
 * @returns v1 if t = 0. v2 if t = 1. Values outside the 0 ⇐ t ⇐ 1 range may also be used to return an extrapolated vector.
 * @since 4.9.3.118
 * @param t - The value to evaluate.
 * @param vec1 - The first vector.
 * @param vec2 - The second vector.
*/
	linearInterp(t:Number, v1:DzInt2, v2:DzInt2):DzInt2 {
	
	};
	/**
 * @description Sets this vector to (1, 1).
*/
	makeIdentity():void {
	
	};
	/**
 * @description Sets this vector to (0, 0).
*/
	makeZero():void {
	
	};
	/**
 * @returns The rectilinear distance of this vector.
*/
	manhattanLength():Number {
	
	};
	/**
 * @returns A copy of this vector where each component has been modulated by min and max.
 * @since 4.9.3.118
 * @param min - The minimum value.
 * @param max - The maximum value.
*/
	modulate(min:Number, max:Number):DzInt2 {
	
	};
	/**
 * @description Modulates each component of this vector.
 * @since 4.9.3.118
 * @param min - The minimum value.
 * @param max - The maximum value.
*/
	modulo(min:Number, max:Number):void {
	
	};
	/**
 * @returns A vector that is the result of multiplying vec by this vector.
 * @param vec - The vector to multiply by this vector.
*/
	multiply(vec:DzInt2):DzInt2 {
	
	};
	/**
 * @description Negates each component of this vector.
*/
	negate():void {
	
	};
	/**
 * @description Sets this vector to have a specific length in the current direction.
 * @param newLength - The length to set.
*/
	setLength(length:Number):void {
	
	};
	/**
 * @description Sets the value of each component to its respective squared value.
*/
	square():void {
	
	};
	/**
 * @returns A vector that is the result of subtracting vec from this vector.
 * @param vec - The vector to subtract from this vector.
*/
	subtract(vec:DzInt2):DzInt2 {
	
	};
	/**
 * @returns A string representation of the object.
*/
	toString():String {
	
	};
	/**
 * @description Swaps the values of x and y.
*/
	transpose():void {
	
	};
	/**
 * @returns A vector with components set to (0, 0).
 * @since 4.14.1.31
*/
	zero():DzInt2 {
	
	};

}
/**
 * @classdesc This class provides an animatable integer property with 2 values that is stored and can be accessed as a DzInt2.
Since:
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/int2property_dz} */
class DzInt2Property extends DzIntProperty {
	/**
 * @description Default Constructor. Creates a non-animatable, non-user property.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @param name - The name of this property.
 * @param canAnimate - If true, creates an animatable property.
 * @param isUserProperty - If true, creates a user property; user properties are properties that can be added/deleted by users.
 * @param defaultVal - Sets the default value of this property.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @param name - The name of this property.
 * @param canAnimate - If true, creates an animatable property.
 * @param isUserProperty - If true, creates a user property; user properties are properties that can be added/deleted by users.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Adjust the value of the property based on the contribution of property controllers.
 * @returns A 'raw' value for the property that will result in the property having the given value with the current controllers.
 * @param val - The 'final' value desired for the property.
*/
	adjustInt2Value(val:DzInt2):DzInt2 {
	
	};
	/**
 * @description Adjust the value of the property at the given time based on the contribution of property controllers.
 * @returns A 'raw' value for the property that will result in the property having the given value with the current controllers.
 * @param tm - The scene time at which to adjust the value.
 * @param val - The 'final' value desired for the property.
*/
	adjustInt2Value(tm:DzTime, val:DzInt2):DzInt2 {
	
	};
	/**
 * @returns The default value of the property.
*/
	getDefaultInt2Value():DzInt2 {
	
	};
	/**
 * @returns The difference between the current value of the follow property and its default value at the current time. If no auto-follow property is set, or auto-follow is not enabled for this property, then this method returns 0.
*/
	getInt2FollowValue():DzInt2 {
	
	};
	/**
 * @returns The difference between the current value of the follow property and this properties default value tm. If no auto-follow property is set, or auto-follow is not enabled for this property, then this method returns 0.
 * @param tm - The scene time for which to get the value.
*/
	getInt2FollowValue(tm:DzTime):DzInt2 {
	
	};
	/**
 * @returns The value of the property at the current time.
*/
	getInt2Value():DzInt2 {
	
	};
	/**
 * @returns The value of the property at the given time.
 * @param tm - The scene time to get the value for.
*/
	getInt2Value(tm:DzTime):DzInt2 {
	
	};
	/**
 * @returns The value of the i'th key in the property.
 * @param index - The index of the key to get the value for.
*/
	getKeyInt2Value(i:Number):DzInt2 {
	
	};
	/**
 * @description This function is provided for the special case of ERC link redirection; sometimes called 'cross-talk'. For example, if Figure A (a piece of clothing, for example) is 'Fit To' Figure B, the ERC links on Figure A are redirected to follow channels on Figure B; this is how morphs on an item of clothing will follow morphs on the figure, etc. This function will provide the value of the property ignoring any redirection of ERC links. So, for a figure that is not 'Fit To' another figure, this will return the same value as getValue(). For a figure that is 'Fit To' another figure, this will return the value that the property would have if the ERC link had not been redirected.
 * @returns The value of the property at the current time without any ERC link redirection.
*/
	getLocalInt2Value():DzInt2 {
	
	};
	/**
 * @description This function is provided for the special case of ERC link redirection; sometimes called 'cross-talk'. For example, if Figure A (a piece of clothing, for example) is 'Fit To' Figure B, the ERC links on Figure A are redirected to follow channels on Figure B; this is how morphs on an item of clothing will follow morphs on the figure, etc. This function will provide the value of the property ignoring any redirection of ERC links. So, for a figure that is not 'Fit To' another figure, this will return the same value as getValue(). For a figure that is 'Fit To' another figure, this will return the value that the property would have if the ERC link had not been redirected.
 * @returns The value of the property at the given time without any ERC link redirection.
 * @param tm - The scene time to get the local value for.
*/
	getLocalInt2Value(tm:DzTime):DzInt2 {
	
	};
	/**
 * @description This function is provided to make it easy to get the 'keyed' value of the property without any modifications. When the value of a property is evaluated, first the value based on key interpolation is calculated, that value is then passed to each of the controllers on the property (ERC links for example) which can modify that value. This modified value is then returned as the value of the property by getInt2Value(). This function returns the value of the property before the application of the controllers; strictly the result of key interpolation.
 * @returns The 'raw' value of the property at the given time - this is the actual value of the property without the contribution of property links, etc.
 * @param tm - The scene time to get the raw value for.
*/
	getRawInt2Value(tm:DzTime):DzInt2 {
	
	};
	/**
 * @description This function is provided to make it easy to get the 'keyed' value of the property without any modifications. When the value of a property is evaluated, first the value based on key interpolation is calculated, that value is then passed to each of the controllers on the property (ERC links for example) which can modify that value. This modified value is then returned as the value of the property by getInt2Value(). This function returns the value of the property before the application of the controllers; strictly the result of key interpolation.
 * @returns The 'raw' value of the property at the current time; this is the actual value of the property without the contribution of property links, etc.
*/
	getRawInt2Value():DzInt2 {
	
	};
	/**
 * @description Sets the default value for this property.
 * @param val - The value to set the property to.
*/
	setDefaultInt2Value(val:DzInt2):void {
	
	};
	/**
 * @description Sets the value for this property at the current time; or the default value if this property is not animatable.
 * @param val - The value to set.
*/
	setInt2Value(val:DzInt2):void {
	
	};
	/**
 * @description Sets the value for this property at the given time; or the default value if this property is not animatable.
 * @param tm - The scene time to set the value at.
 * @param val - The value to set.
*/
	setInt2Value(tm:DzTime, val:DzInt2):void {
	
	};
	/**
 * @description Sets the value of the i'th key.
 * @param i - The index of the key to change.
 * @param val - The new value for the key.
 * @attention You are responsible to ensure the key indices are within the valid range.
*/
	setKeyInt2Value(i:Number, val:DzInt2):void {
	
	};
	/**
 * @description The same as calling setInt2Value( DzInt2 ).
*/
	setRawInt2Value(val:DzInt2):void {
	
	};
	/**
 * @description The same as calling setInt2Value( DzTime, DzInt2 ).
*/
	setRawInt2Value(tm:DzTime, val:DzInt2):void {
	
	};

}
/**
 * @classdesc Since:
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/interactiveinstructionobject_dz} */
class DzInteractiveInstructionObject extends QObject {
	/**
 * @returns An Object, Array, Boolean, Number or String if the instruction has a member named name, otherwise null
*/
	getMember(name:String):Object {
	
	};
	/**
 * @returns true if the object has a member named name, otherwise false
*/
	hasMember(name:String):Boolean {
	
	};
	/**
 * @description Removes the member/value named name from the instruction.
*/
	removeMember(name:String):void {
	
	};
	/**
 * @description Sets the member name of the instruction to value. A valid value depends on the type of instruction and can be one of Boolean, Number, String or Array.
*/
	setMember(name:String, value:Object):void {
	
	};

}
/**
 * @classdesc This class manages interactive lessons that the user can perform in the interface via lessonstripwgt_dz.
There is only one instance of this manager in an application. This instance is created and owned by DzMainWindow. Request the instance via DzMainWindow.getInteractiveLessonMgr().
See Also:
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/interactivelessonmgr_dz} */
class DzInteractiveLessonMgr extends QObject {
	/**
 * @description The width of the progress indicator displayed above the instruction box.
	*/
	progressWidth:Number;
	/**
 * @description Starts the lesson using a list of instructions in a separate file.
 * @param path - The absolute path to a file that provides a list of instructions for the lesson.
*/
	begin(path:String):void {
	
	};
	/**
 * @description Starts the lesson using the instructions list.
 * @param instructions - The list of instructions for the lesson.
*/
	begin(instructions:Array):void {
	
	};
	/**
 * @returns The index of the current instruction within the lesson.
*/
	currentIndex():Number {
	
	};
	/**
 * @returns The path of the current lesson.
*/
	currentPath():String {
	
	};
	/**
 * @returns The query of the current instruction within the lesson.
*/
	currentQuery():Boolean {
	
	};
	/**
 * @description TODO:
Add description.
*/
	currentQuery():Number {
	
	};
	/**
 * @description TODO:
Add description.
*/
	currentQuery():String {
	
	};
	/**
 * @returns The type of the current instruction within the lesson.
*/
	currentType():String {
	
	};
	/**
 * @returns A string representation of an "action" type instruction.
*/
	getActionInstruction(classname:String, info:String, tag:String, locateOnly:Boolean):String {
	
	};
	/**
 * @returns A string representation of an "activity" type instruction.
*/
	getActivityInstruction(activity:String, info:String, tag:String, locateOnly:Boolean):String {
	
	};
	/**
 * @returns A string representation of a "display" type instruction.
*/
	getDisplayInstruction(info:String, button:String):String {
	
	};
	/**
 * @returns A string representation of an instruction.
*/
	getInstruction(type:String, query:ByteArray, info:String, tag:String, locateOnly:Boolean):String {
	
	};
	/**
 * @returns A string representation of an instruction if the type is valid, otherwise an empty string.
*/
	getInstruction(type:String, query:String, info:String, tag:String, locateOnly:Boolean):String {
	
	};
	/**
 * @returns A string representation of an instruction.
*/
	getInstruction(type:String, query:Boolean, info:String, tag:String, locateOnly:Boolean):String {
	
	};
	/**
 * @returns A string representation of an instruction.
*/
	getInstruction(type:String, query:Number, info:String, tag:String, locateOnly:Boolean):String {
	
	};
	/**
 * @returns A string representation of an "layout" type instruction.
*/
	getLayoutInstruction(layout:String, info:String, tag:String, locateOnly:Boolean):String {
	
	};
	/**
 * @returns A string representation of a "widget" type instruction.
*/
	getWidgetInstruction(widgetPath:String, info:String, tag:String, locateOnly:Boolean):String {
	
	};
	/**
 * @description TODO:
Add description.
*/
	instructionTypes():Array {
	
	};
	/**
 * @returns true if the lesson is currently running, otherwise false.
*/
	isRunning():Boolean {
	
	};
	/**
 * @description TODO:
Add description.
*/
	iterate():void {
	
	};
	/**
 * @description Skips the next instruction in the lesson.
*/
	skip():void {
	
	};
	/**
 * @description Stops the lesson.
*/
	stop():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when an instruction in an interactive lesson has been skipped.
 * @signature `"skipped()"`
 * @event
*/
	skipped():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when an interactive lesson has started.
 * @signature `"started()"`
 * @event
*/
	started():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when an interactive lesson has stepped to the next instruction.
 * @signature `"stepped()"`
 * @event
*/
	stepped():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when an interactive lesson is stopped.
 * @signature `"stopped(bool)"`
 * @event
*/
	stopped(success:Boolean):void {
	
	};

}
/**
 * @classdesc Since:
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/interactivelessonobject_dz} */
class DzInteractiveLessonObject extends QObject {
	/**
 * @returns A new DzInteractiveInstructionObject appended to the end of the interactive lesson.
*/
	appendInstruction():DzInteractiveInstructionObject {
	
	};
	/**
 * @returns The number of instructions in the interactive lesson.
*/
	count():Number {
	
	};
	/**
 * @returns The index of the current instruction in the interactive lesson.
*/
	currentIndex():Number {
	
	};
	/**
 * @returns A new DzInteractiveInstructionObject inserted into the interactive lesson at index position.
*/
	insertInstruction(index:Number):DzInteractiveInstructionObject {
	
	};
	/**
 * @returns The instruction at index in the interactive lesson.
*/
	instructionAt(index:Number):DzInteractiveInstructionObject {
	
	};
	/**
 * @returns The next instruction in the interactive lesson, or NULL if the last instruction.
*/
	nextInstruction():DzInteractiveInstructionObject {
	
	};

}
/**
 * @classdesc TODO:
Add detailed description.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/intproperty_dz} */
class DzIntProperty extends DzNumericProperty {
	/**
 * @description Default Constructor. Creates a non-animatable, non-user property.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @param name - The name of this property.
 * @param canAnimate - If true, creates an animatable property.
 * @param isUserProperty - If true, creates a user property; user properties are properties that can be added/deleted by users.
 * @param defaultVal - Sets the default value of this property.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Adjust the value of the property based on the contribution of property controllers.
 * @returns A 'raw' value for the property that will result in the property having the given value with the current controllers.
 * @param val - The 'final' value desired for the property.
*/
	adjustValue(val:Number):Number {
	
	};
	/**
 * @description Adjust the value of the property at the given time based on the contribution of property controllers.
 * @returns A 'raw' value for the property that will result in the property having the given value with the current controllers.
 * @param tm - The scene time at which to adjust the value.
 * @param val - The 'final' value desired for the property.
*/
	adjustValue(tm:DzTime, val:Number):Number {
	
	};
	/**
 * @returns The default value of the property.
*/
	getDefaultValue():Number {
	
	};
	/**
 * @returns The value of the i'th key in the property.
 * @param i - The index of the key to get the value for.
*/
	getKeyValue(i:Number):Number {
	
	};
	/**
 * @description This function is provided for the special case of ERC link redirection; sometimes called 'cross-talk'. For example, if Figure A (a piece of clothing, for example) is 'Fit To' Figure B, the ERC links on Figure A are redirected to follow channels on Figure B; this is how morphs on an item of clothing will follow morphs on the figure, etc. This function will provide the value of the property ignoring any redirection of ERC links. So, for a figure that is not 'Fit To' another figure, this will return the same value as getValue(). For a figure that is 'Fit To' another figure, this will return the value that the property would have if the ERC link had not been redirected.
 * @returns The value of the property at the given time without any ERC link redirection.
 * @param tm - The scene time to get the local value for.
*/
	getLocalValue(tm:DzTime):Number {
	
	};
	/**
 * @description This function is provided for the special case of ERC link redirection; sometimes called 'cross-talk'. For example, if Figure A (a piece of clothing, for example) is 'Fit To' Figure B, the ERC links on Figure A are redirected to follow channels on Figure B; this is how morphs on an item of clothing will follow morphs on the figure, etc. This function will provide the value of the property ignoring any redirection of ERC links. So, for a figure that is not 'Fit To' another figure, this will return the same value as getValue(). For a figure that is 'Fit To' another figure, this will return the value that the property would have if the ERC link had not been redirected.
 * @returns The value of the property at the current time without any ERC link redirection.
*/
	getLocalValue():Number {
	
	};
	/**
 * @returns The maximum allowable value of the property.
*/
	getMax():Number {
	
	};
	/**
 * @returns The minimum allowable value of the property.
*/
	getMin():Number {
	
	};
	/**
 * @description This function is provided to make it easy to get the 'keyed' value of the property without any modifications. When the value of a property is evaluated, first the value based on key interpolation is calculated, that value is then passed to each of the controllers on the property (ERC links for example) which can modify that value. This modified value is then returned as the value of the property by getValue(). This function returns the value of the property before the application of the controllers; strictly the result of key interpolation.
 * @returns The 'raw' value of the property at the current time; this is the actual value of the property without the contribution of property links, etc.
*/
	getRawValue():Number {
	
	};
	/**
 * @description This function is provided to make it easy to get the 'keyed' value of the property without any modifications. When the value of a property is evaluated, first the value based on key interpolation is calculated, that value is then passed to each of the controllers on the property (ERC links for example) which can modify that value. This modified value is then returned as the value of the property by getValue(). This function returns the value of the property before the application of the controllers; strictly the result of key interpolation.
 * @returns The 'raw' value of the property at the given time; this is the actual value of the property without the contribution of property links, etc.
 * @param tm - The scene time to get the raw value for.
*/
	getRawValue(tm:DzTime):Number {
	
	};
	/**
 * @returns The sensitivity setting for this property.
*/
	getSensitivity():Number {
	
	};
	/**
 * @returns The value of the property at the given time.
 * @param tm - The scene time to get the value for.
*/
	getValue(tm:DzTime):Number {
	
	};
	/**
 * @returns The value of the property at the current time.
*/
	getValue():Number {
	
	};
	/**
 * @description Sets the default value for this property.
 * @param val - The value to set as the default for this property.
*/
	setDefaultValue(val:Number):void {
	
	};
	/**
 * @description Sets the value of the i'th key.
 * @param i - The index of the key to set the value for.
 * @param val - The value to set.
 * @attention You are responsible to ensure the key index is within the valid range.
*/
	setKeyValue(i:Number, val:Number):void {
	
	};
	/**
 * @description Set the maximum allowable value.
 * @param max - The maximum value to set.
*/
	setMax(max:Number):void {
	
	};
	/**
 * @description Set the mininimum allowable value.
 * @param min - The minimum value to set.
*/
	setMin(min:Number):void {
	
	};
	/**
 * @description Set the mininimum and maximum allowable values.
 * @param min - The minimum value to set.
 * @param max - The maximum value to set.
*/
	setMinMax(min:Number, max:Number):void {
	
	};
	/**
 * @description Set the sensitivity for this property. This value describes the amount of change in the value of this property caused by adjustment in the interface, especially if limits are off.
 * @param sens - The value to set.
*/
	setSensitivity(sens:Number):void {
	
	};
	/**
 * @description Sets the value for this property at the given time; or the default value if this property is not animatable. This function differs from setRawValue() in that it takes into account any controllers on the property such that calling setValue( getValue() ) should not change the value of the property.
 * @param tm - The scene time to set the value at.
 * @param val - The value to set.
*/
	setValue(tm:DzTime, val:Number):void {
	
	};
	/**
 * @description Sets the value for this property at the current time; or the default value if this property is not animatable. This function differs from setRawValue() in that it takes into account any controllers on the property such that calling setValue( getValue() ) should not change the value of the property.
 * @param val - The value to set.
*/
	setValue(val:Number):void {
	
	};

}
/**
 * @classdesc A DzIntSlider provides a control that allows a user to adjust a bounded integer value.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/intslider_dz} */
class DzIntSlider extends DzWidget {
	/**
 * @description Holds whether or not the slider obeys its limits. false by default.
	*/
	clamped:Boolean;
	/**
 * @description Holds the default value of the slider.
	*/
	defaultValue:Number;
	/**
 * @description Holds whether or not the slider text is displayed as a percentage value. false by default.
	*/
	displayAsPercent:Boolean;
	/**
 * @description Holds whether or not editing the slider text causes the edit field to consume the full height/width of the slider. false by default.
	*/
	fullLengthEdit:Boolean;
	/**
 * @description If true, the slider is considered to have an 'indeterminate' or '<?>' value. false by default.
	*/
	indeterminate:Boolean;
	/**
 * @description Holds whether or not the value is currently being edited. (Read Only)
	*/
	isEditing:Boolean;
	/**
 * @description Holds the label text for the slider.
	*/
	label:String;
	/**
 * @description Holds whether or not the slider's label is visible.
	*/
	labelVisible:Boolean;
	/**
 * @description Holds the maximum value of the slider. Any attempt to set this to a value that is less than the current min will fail.
	*/
	max:Number;
	/**
 * @description Holds the minimum value of the slider. Any attempt to set this to a value that is greater than the current max will fail.
	*/
	min:Number;
	/**
 * @description Holds whether or not the default value is restorable if the user holds the [Alt] key when clicked.
	*/
	restorable:Boolean;
	/**
 * @description Holds the sensitivity of the slider.
	*/
	sensitivity:Number;
	/**
 * @description Holds the text of the slider. (Read Only)
	*/
	text:String;
	/**
 * @description Holds whether or not the slider text is editable by the user. false by default.
	*/
	textEditable:Boolean;
	/**
 * @description Holds whether or not the slider text is visible to the user. true by default.
	*/
	textVisible:Boolean;
	/**
 * @description Holds the current value of the slider.
	*/
	value:Number;
	/**
 * @description Creates a slider as a child of the given parent widget.
 * @param parent - The widget parent for the slider.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the user cancels an edit of the slider.
 * @signature `"editCancelled()"`
 * @event
*/
	editCancelled():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the user releases the slider.
 * @signature `"editEnd()"`
 * @event
*/
	editEnd():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the user starts dragging the slider.
 * @signature `"editStart()"`
 * @event
*/
	editStart():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the value of the slider changes, passes the new value.
 * @signature `"valueChanged(int)"`
 * @event
*/
	valueChanged(value:Number):void {
	
	};

}
/**
 * @classdesc Deprecated
Exists only to keep code written prior to 4.6.2.23 working. Do not use in new code. Use DzTextureComponent instead.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/invertmanip_dz} */
class DzInvertManip extends  {
	/**
 * @description TODO:
Add description.
	*/
	on:Boolean;
	/**
 * @description Holds whether or not the manipulater is active
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @returns true if the image's colors will be inverted, otherwise false.
*/
	isOn():Boolean {
	
	};
	/**
 * @description Sets whether or not the invert manipulator is applied.
 * @param onOff - If true, the manipulator is applied, if false, the image's colors are not inverted.
*/
	setOn(onOff:Boolean):void {
	
	};

}
/**
 * @classdesc 
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/irayrenderer_dz} */
class DzIrayRenderer extends DzRenderer {
	/**
 * @description Default Constructor.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @since 4.12.1.81
*/
	getAllowCPUFallback():Boolean {
	
	};
	/**
 * @since 4.12.1.81
*/
	getAllowGPUDetection():Boolean {
	
	};
	/**
 * @returns The CPU load limit for the NVIDIA Iray renderer.
 * @since 4.12.1.81
*/
	getCPULoadLimit():Number {
	
	};
	/**
 * @returns true if CPU thread affinity is enabled, otherwise false.
 * @since 4.12.1.81
*/
	getCPUThreadAffinityEnabled():Boolean {
	
	};
	/**
 * @since 4.12.1.81
*/
	getGPUDriverCheck():Boolean {
	
	};
	/**
 * @returns The GPU load limit for the NVIDIA Iray renderer.
 * @since 4.12.1.81
*/
	getGPULoadLimit():Number {
	
	};
	/**
 * @since 4.12.1.81
*/
	getHighThreshold():Number {
	
	};
	/**
 * @since 4.12.1.81
*/
	getMediumThreshold():Number {
	
	};
	/**
 * @since 4.12.1.81
*/
	getNVLINKPeerGroupSize():Number {
	
	};
	/**
 * @returns The element that holds the properties for this renderer.
*/
	getPropertyHolder():DzElement {
	
	};
	/**
 * @returns true if this renderer is currently performing an interactive progressive render, otherwise false.
*/
	isIPRRendering():Boolean {
	
	};
	/**
 * @since 4.12.1.81
*/
	setAllowCPUFallback(onOff:Boolean):void {
	
	};
	/**
 * @since 4.12.1.81
*/
	setAllowGPUDetection(onOff:Boolean):void {
	
	};
	/**
 * @description Sets the CPU load limit for the NVIDIA Iray renderer.
 * @returns true if the limit was successfully set, false if the new limit was not set (e.g., invalid - less than 1.0).
 * @since 4.12.1.81
 * @param limit - The new CPU load limit. This value may be clamped against some upper bound imposed by license restrictions.
*/
	setCPULoadLimit(limit:Number):Boolean {
	
	};
	/**
 * @description Sets the affinity of CPU threads.
 * @returns true if thread affinity was successfully set, otherwise false.
 * @since 4.12.1.81
 * @param onOff - If true, threads are bound to the CPU they are currently running on. If false (default), the operating system is free to migrate threads between CPUs as it sees fit (which may suffer from cache misses).
 * @attention This setting is not supported on macOS. This setting only affects internal threads that are used to execute renders. Application threads are not affected. Changing this value does not affect a render that is currently being executed, it only affects subsequently started renders.
*/
	setCPUThreadAffinityEnabled(onOff:Boolean):Boolean {
	
	};
	/**
 * @since 4.12.1.81
*/
	setGPUDriverCheck(onOff:Boolean):void {
	
	};
	/**
 * @description Sets the GPU load limit for the NVIDIA Iray renderer.
 * @returns true if the limit was successfully set, false if the new limit was not set (e.g., invalid - less than 1.0).
 * @since 4.12.1.81
 * @param limit - The new GPU load limit. This value may be clamped against some upper bound imposed by license restrictions.
*/
	setGPULoadLimit(limit:Number):Boolean {
	
	};
	/**
 * @since 4.12.1.81
*/
	setHighThreshold(val:Number):void {
	
	};
	/**
 * @since 4.12.1.81
*/
	setMediumThreshold(val:Number):void {
	
	};
	/**
 * @since 4.12.1.81
*/
	setNVLINKPeerGroupSize(size:Number):void {
	
	};

}
/**
 * @classdesc 
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/label_dz} */
class DzLabel extends DzWidget {
	/**
 * @description Holds the alignment of the text displayed in the label.
	*/
	alignment:DzWidget;
	/**
 * @description Holds the name of the text style used to draw the label on this label.
	*/
	elideMode:DzWidget;
	/**
 * @description Holds whether or not text is selected. (Read Only)
	*/
	hasSelectedText:Boolean;
	/**
 * @description Holds the label's indent in pixels from its current alignment.
	*/
	indent:Number;
	/**
 * @description Holds whether or not external links will be opened when clicked.
	*/
	openExternalLinks:Boolean;
	/**
 * @description The pixmap shown on the label. If the pixmap is monochrome (e.g. its depth is 1) and it does not have a mask, the pixmap will be its own mask. This allows transparent bitmaps to be drawn, which are important for toggle buttons. undefined if no pixmap is set.
	*/
	pixmap:Pixmap;
	/**
 * @description TODO:
Add description.
	*/
	primitive:String;
	/**
 * @description Holds whether or not the contents of the label are scaled to fill the available space.
	*/
	scaledContents:Boolean;
	/**
 * @description Holds the text that is currently selected. (Read Only)
	*/
	selectedText:String;
	/**
 * @description Holds the text displayed in the label.
	*/
	text:String;
	/**
 * @description Holds the value that is used to determine if the text string should be interpreted as plain, rich or log text.
	*/
	textFormat:TextFormat;
	/**
 * @description Holds the value that is used to determine how the label reacts to user input.
	*/
	textInteractionFlags:DzWidget;
	/**
 * @description Holds the name of the primitive element used to draw this label.
	*/
	textStyle:String;
	/**
 * @description Holds whether or not the text is wrapped where necessary; i.e., word-breaks.
	*/
	wordWrap:Boolean;
	/**
 * @description ENUMERATOR: The text string is interpreted as a plain text.
*/
	
	static PlainText;
	/**
 * @description ENUMERATOR: The text string is interpreted as a rich text.
*/
	
	static RichText;
	/**
 * @description ENUMERATOR: The text is interpreted as automatically.
*/
	
	static AutoText;
	/**
 * @description Holds the elide mode to be used for the text on this label.
 * @since 4.10.0.22
 * @param parent - The widget parent for the label.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @returns The buddy widget for the label, undefined if none.
*/
	buddy():DzWidget {
	
	};
	/**
 * @description Clears the text displayed in the label.
*/
	clear():void {
	
	};
	/**
 * @description Sets the buddy widget for this label.
 * @param buddy - The widget to set.
*/
	setBuddy(buddy:DzWidget):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description TODO: Add Description
 * @signature `elideModeChanged()`
 * @event
*/
	elideModeChanged(mode:DzWidget.TextElideMode):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description TODO: Add Description
 * @signature `primitiveChanged()`
 * @event
*/
	primitiveChanged(name:String):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description TODO: Add Description
 * @signature `TODO: Add Description`
 * @event
*/
	textFormatChanged(format:TextFormat):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description TODO: Add Description
 * @signature `textInteractionFlagsChanged()`
 * @event
*/
	textInteractionFlagsChanged(flags:DzWidget.TextInteractionFlags):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description TODO: Add Description
 * @signature `textStyleChanged()`
 * @event
*/
	textStyleChanged(name:String):void {
	
	};

}
/**
 * @classdesc An asset save filter for saving a Layered Image(s) Preset in the DSON format.
See Also:
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/layerassetfilter_dz} */
class DzLayerAssetFilter extends DzAssetFileOutFilter {
	/**
 * @description TODO:
Add description.
 * @constructor
*/
	constructor() {
	
	};

}
/**
 * @classdesc Deprecated
This class exists only to keep code written prior to 4.6.2.23 working. Do not use in new code. Use DzLayeredTexture instead.
This class uses explicit sharing to make it very efficient to copy. This does, however, mean that modifying one copy of the image modifies all copies. DzLayeredImage does not currently support detach() or copy() functions for creating unique instances or deep copies.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/layeredimage_dz} */
class DzLayeredImage extends DzBase {
	/**
 * @description Add a layer to the image.
 * @param layer - The layer to add to the image. The image takes ownership of this object and deletes it when it is no longer needed.
*/
	addLayer((deprecated:DzImageLayer):void {
	
	};
	/**
 * @returns An image that is the final result of merging all the visible layers in the image.
 * @param freeMem - If true, any image layers loaded from file will be unloaded immediately after flattening. They will have to be re-loaded again for future flattening operations.
*/
	getFlattenedImage(freeMem:Boolean):Image {
	
	};
	/**
 * @returns The layer at index which. This object is owned by the image.
*/
	getLayer(deprecated):DzImageLayer (deprecated) {
	
	};
	/**
 * @returns The number of layers in this image.
*/
	getLayerCount():Number {
	
	};
	/**
 * @returns The size of the canvas for this image.
*/
	getSize():Size {
	
	};
	/**
 * @description Insert a layer at a specific index.
 * @param layer - The layer to add to the image. The image takes ownership of this object and deletes it when it is no longer needed.
 * @param idx - The index in the list to insert the layer at.
*/
	insertLayer((deprecated:DzImageLayer):void {
	
	};
	/**
 * @description Adjust layer order.
 * @param from - The index of the layer to move.
 * @param to - The index in the list to move the layer to.
*/
	moveLayer(from:Number, to:Number):void {
	
	};
	/**
 * @description Remove the specified layer.
 * @returns true if the layer was removed from the image, otherwise false.
 * @param layer - The layer to remove from the image. The layer will be deleted if it is owned by the image.
*/
	removeLayer((deprecated:DzImageLayer):Boolean {
	
	};
	/**
 * @description Replace a layer with a new layer.
 * @returns true if the layer was successfully replaced, otherwise false.
 * @param oldLayer - A pointer to the layer to remove from the image. The layer will be deleted if it is owned by the image.
 * @param newLayer - The new layer to add to the image in place of the old layer. The image takes ownership of this object and deletes it when it is no longer used.
*/
	replaceLayer((deprecated:DzImageLayer):Boolean {
	
	};
	/**
 * @description Sets the size of the image's canvas.
 * @param size - The new size for the image's canvas.
*/
	setSize(size:Size):void {
	
	};
	/**
 * @returns true if the image was successfully copied to img, otherwise false.
 * @param img - The layered texture to copy/convert the layered image into.
*/
	toLayeredTexture(img:DzLayeredTexture):Boolean {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description TODO: Add Description
 * @signature `layerListChanged()`
 * @event
*/
	layerListChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emits a signal that the size of canvas has changed.
 * @signature `"sizeChanged(const QSize&)"`
 * @event
*/
	sizeChanged(size:Size):void {
	
	};

}
/**
 * @classdesc This is a sharable object that stores information for a layered texture (image map) that is used in OpenGL. Do not create a layered texture, rather, request one from DzImageMgr - this insures that there is only one instance of a given image in memory at a time, and also ensures that necessary conversions for rendering the image via OpenGL and offline renderers occurs correctly.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/layeredtexture_dz} */
class DzLayeredTexture extends DzRefCountedItem, DzTexture {
	/**
 * @description Holds the author of the file for this texture. (Read Only)
	*/
	assetAuthor:DzAuthor;
	/**
 * @description Holds the revision version of the asset file for this texture. (Read Only)
	*/
	assetFileRevision:DzVersion;
	/**
 * @description Holds the asset id for this texture.
	*/
	assetId:String;
	/**
 * @description Holds the modified date of the asset file for this texture. (Read Only)
	*/
	assetModifiedDate:Date;
	/**
 * @description Holds whether or not the asset for this texture needs to be saved. (Read Only)
	*/
	assetNeedSave:Boolean;
	/**
 * @description Holds the URI of the asset source for this texture; only valid when the asset is in an embedded state - i.e. modified. (Read Only)
	*/
	assetSource:DzUri;
	/**
 * @description Holds the asset URI for this texture. (Read Only)
	*/
	assetUri:DzUri;
	/**
 * @description Holds the size of the texture.
	*/
	size:Boolean;
	/**
 * @description Adds a layer to (the bottom of) this layered texture.
 * @param layer - The layer to add.
*/
	addLayer(layer:DzTextureLayer):void {
	
	};
	/**
 * @description Must be called before editing and paired with a call to endEditing().
*/
	beginEditing():void {
	
	};
	/**
 * @description Copies the settings of the given layered texture to this layered texture.
 * @param texture - The layered texture to cupy settings from.
*/
	copyFrom(texture:DzLayeredTexture):DzLayeredTexture {
	
	};
	/**
 * @description Creates a new (white) layer with the specified name in this layered texture.
 * @returns The new layer.
 * @param name - The name to assign to the layer.
*/
	createLayer(name:String):DzTextureLayer {
	
	};
	/**
 * @description Must be called after editing is completed and after beginEditing() is called.
*/
	endEditing():void {
	
	};
	/**
 * @returns The index of the found layer (if any), otherwise -1.
 * @param layer - The layer to find the index of in this layered texture.
*/
	findLayer(layer:DzTextureLayer):Number {
	
	};
	/**
 * @returns The layer at the specified index (if valid), otherwise null.
 * @param index - The index of the layer to get.
*/
	getLayer(index:Number):DzTextureLayer {
	
	};
	/**
 * @returns The number of layers in this layered texture.
*/
	getNumLayers():Number {
	
	};
	/**
 * @returns The full path of the image file for this layered texture.
*/
	getSourceDSI():String {
	
	};
	/**
 * @description Inserts a layer into this layered texture at the specified index.
 * @param index - The index to insert the layer at.
 * @param layer - The layer to insert.
*/
	insertLayer(index:Number, layer:DzTextureLayer):void {
	
	};
	/**
 * @returns true if the layer is moved, otherwise false.
 * @param fromIndex - The index of the layer to move.
 * @param toIndex - The index to move the layer to.
*/
	moveLayer(fromIndex:Number, toIndex:Number):Boolean {
	
	};
	/**
 * @description Refreshes each layer of this layered texture.
*/
	refeshLayeredTexture():void {
	
	};
	/**
 * @description Removes (deletes) all layers from this layered texture.
*/
	removeAllLayers():void {
	
	};
	/**
 * @returns true if the specified layer is removed from this layered texture, otherwise false.
 * @param index - The index of the layer to remove (and delete).
*/
	removeLayer(index:Number):Boolean {
	
	};
	/**
 * @returns true if the specified layer is removed from this layered texture, otherwise false.
 * @param layer - The layer to remove (and delete).
*/
	removeLayer(layer:DzTextureLayer):Boolean {
	
	};
	/**
 * @returns true if replacing the layer succeeds, otherwise false.
 * @param oldLayer - The layer in this layered texture to replace.
 * @param newLayer - The new layer to replace the old layer with.
*/
	replaceLayer(oldLayer:DzTextureLayer, newLayer:DzTextureLayer):Boolean {
	
	};
	/**
 * @description Removes the layer at the specified index.
 * @returns The layer at the specified index (if valid), otherwise null.
 * @param index - The index of the layer to remove.
*/
	takeLayer(index:Number):DzTextureLayer {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted immediately before layers are inserted into this layered texture.
 * @signature `"aboutToInsertLayers(int,int)"`
 * @event
*/
	aboutToInsertLayers(index:Number, count:Number):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted immediately before layers are removed from this layered texture.
 * @signature `"aboutToRemoveLayers(int,int)"`
 * @event
*/
	aboutToRemoveLayers(index:Number, count:Number):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the layered texture has been modified.
 * @signature `"assetModified()"`
 * @event
*/
	assetModified():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted after the layered texture has been saved.
 * @signature `"assetWasSaved()"`
 * @event
*/
	assetWasSaved():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the layer list has changed.
 * @signature `"layerListChanged()"`
 * @event
*/
	layerListChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when layers are inserted into this layered texture.
 * @signature `"layersInserted(int,int)"`
 * @event
*/
	layersInserted(index:Number, count:Number):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when layers are removed from this layered texture.
 * @signature `"layersRemoved(int,int)"`
 * @event
*/
	layersRemoved(index:Number, count:Number):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the size of this layered texture has changed.
 * @signature `"sizeChanged(const QSize&)"`
 * @event
*/
	sizeChanged(size:Size):void {
	
	};

}
/**
 * @classdesc 
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/layout_dz} */
class DzLayout extends QObject {
	/**
 * @description Whether the parent widget's children are automatically added to the layout or not.
	*/
	autoAdd:Boolean;
	/**
 * @description The margin between the widgets in the layout and the parent widget's edge
	*/
	margin:Number;
	/**
 * @description The spacing between the widgets in the layout
	*/
	spacing:Number;
	/**
 * @description Adds the given widget to the items managed by this layout
 * @param item - The widget to add
*/
	addWidget(item:DzWidget):void {
	
	};

}
/**
 * @classdesc Provides a LCD-style number display.
The following digits and symbols can be displayed:
0/O, 1, 2, 3, 4, 5/S, 6, 7, 8, 9/g, - (minus), . (decimal point), A, B, C, D, E, F, h, H, L, o, P, r, u, U, Y, : (colon),  &deg;  (degree sign - which is specified as single quote in the string) and space.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/lcdnumber_dz} */
class DzLCDNumber extends DzWidget {
	/**
 * @description Holds the display mode of the number.
	*/
	mode:Mode;
	/**
 * @description Holds the number of digits displayed in the widget.
	*/
	numDigits:Number;
	/**
 * @description Holds the style of the number.
	*/
	segmentStyle:SegmentStyle;
	/**
 * @description Holds whether or not the decimal point is drawn between digits; takes up a digit of its own if false.
	*/
	smallDecimalPoint:Boolean;
	/**
 * @description Holds the value of the number.
	*/
	value:Number;
	/**
 * @description ENUMERATOR: Hexadecimal (base 16)
*/
	
	static Hex;
	/**
 * @description ENUMERATOR: Decimal (base 10)
*/
	
	static Dec;
	/**
 * @description ENUMERATOR: Octal (base 8)
*/
	
	static Oct;
	/**
 * @description ENUMERATOR: Binary (base 2)
*/
	
	static Bin;
	/**
 * @description ENUMERATOR: Same as Hex
*/
	
	static HEX;
	/**
 * @description ENUMERATOR: Same as Dec
*/
	
	static DEC;
	/**
 * @description ENUMERATOR: Same as Oct
*/
	
	static OCT;
	/**
 * @description ENUMERATOR: Same as Bin
*/
	
	static BIN;
	/**
 * @description ENUMERATOR: Raised segments filled with the background color
*/
	
	static Outline;
	/**
 * @description ENUMERATOR: Raised segments filled with the foreground color
*/
	
	static Filled;
	/**
 * @description ENUMERATOR: Flat segments filled with the foreground color
*/
	
	static Flat;
	/**
 * @description Creates a LCD number widget as a child of the given parent widget.
 * @param parent - The widget parent for the LCD number.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the number is set to a value that exceeds the number of digits.
 * @signature `"overflow()"`
 * @event
*/
	overflow():void {
	
	};

}
/**
 * @classdesc TODO:
Add detailed description.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/light_dz} */
class DzLight extends DzCamera {
	/**
 * @description ENUMERATOR: The light does not utilize shadows.
*/
	
	static None;
	/**
 * @description ENUMERATOR: The light utilizes a Deep Shadow Map (DSM).
*/
	
	static DeepShadowMap;
	/**
 * @description ENUMERATOR: The light utilizes ray-traced shadows.
*/
	
	static Raytraced;
	/**
 * @returns A list of [trimmed] categories on this light.
 * @since 4.8.0.7
*/
	getCategories():Array {
	
	};
	/**
 * @returns The property that holds the categories for this light.
 * @since 4.8.0.7
*/
	getCategoriesControl():DzStringProperty {
	
	};
	/**
 * @returns The current diffuse light color, including adjustment for intensity.
*/
	getDiffuseColor():Color {
	
	};
	/**
 * @returns The enumerated value indicating the type of shadow utilized by the light.
*/
	getShadowType():ShadowType {
	
	};
	/**
 * @returns The property used to indicate the type of shadow utilized by the light.
*/
	getShadowTypeControl():DzEnumProperty {
	
	};
	/**
 * @description Calculates the direction that light is being cast from this light.
 * @returns The current world-space light-casting direction vector.
*/
	getWSDirection():DzVec3 {
	
	};
	/**
 * @returns true if this is an area light source, otherwise false. If true, the light source center will be given by the position of the light. Additional light geometry will be defined in the derived classes.
*/
	isAreaLight():Boolean {
	
	};
	/**
 * @description Indicates if this light is an infinite directional light.
 * @returns true if this light is directional, otherwise (e.g., omni-directional) false.
*/
	isDirectional():Boolean {
	
	};
	/**
 * @returns true if this light is currently on, otherwise false.
*/
	isOn():Boolean {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the categories that a light is in changes.
 * @signature `"categoriesChanged()"`
 * @event
*/
	categoriesChanged():void {
	
	};

}
/**
 * @classdesc An asset save filter for saving a Light(s) Preset in the DSON format.
See Also:
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/lightassetfilter_dz} */
class DzLightAssetFilter extends DzAssetFileOutFilter {
	/**
 * @description TODO:
Add description.
 * @constructor
*/
	constructor() {
	
	};

}
/**
 * @classdesc TODO:
Add detailed description.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/line3_dz} */
class DzLine3 extends Object {
	/**
 * @description Holds the line's ending point in three dimensional space.
	*/
	end:DzVec3;
	/**
 * @description Holds the line's starting point in three dimensional space.
	*/
	origin:DzVec3;
	/**
 * @description Default Constructor. Creates an uninitialized line.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Creates a quaternion by parsing a string.
 * @param line - A string representation of the line in the form "[[ originX, originY, originZ ],[ endX, endY, endZ ]]"
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Copy Constructor.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Parameterized Constructor.
 * @param origin - The origin point of the line.
 * @param end - The end point of the line.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @returns The vector direction of this line (end - origin).
 * @since 4.11.0.216
*/
	getDirection():DzVec3 {
	
	};
	/**
 * @returns The point with the given parametric distance along the line.
 * @since 4.11.0.216
*/
	getPoint(t:Number):DzVec3 {
	
	};
	/**
 * @returns The length of the line given a parametric distance along the line.
 * @since 4.11.0.216
*/
	length(t:Number):Number {
	
	};
	/**
 * @description Tests the intersection of two lines. This line and the given line are assumed to be infinitely long in both directions (i.e. the intersection can be outside the origin-end segment of either line).
 * @returns An object where the "intersects" property represents whether or not this line intersects with the given line, and the "intersection" property represents the intersection point if the lines intersect.
 * @since 4.11.0.216
 * @param line - The line to test intersection with.
 * @param tolerance - If not zero, specifies the maximum distance between lines that will be counted as an intersection.
*/
	linesIntersect(line:DzLine3, tolerance:Number):Object {
	
	};
	/**
 * @returns An object where the "distance" property represents the minimum distance between this line and another line, the "s" property represents the parametric distance along this line, and the "t" property represents the parametric distance along the given line.
 * @since 4.11.0.216
 * @param line - The line to calculate min distance from.
*/
	minDistanceFromLine(line:DzLine3):Object {
	
	};
	/**
 * @returns An object where the "distance" property represents the minimum distance squared between this line and another line, the "s" property represents the parametric distance along this line, and the "t" property represents the parametric distance along the given line.
 * @since 4.11.0.216
 * @param line - The line to calculate min distance from.
*/
	minDistanceFromLineSquared(line:DzLine3):Object {
	
	};
	/**
 * @returns An object where the "distance" property represents the minimum distance between this line and a point, and the "s" property represents the parametric distance along the line to the minimum perpendicular distance point.
 * @since 4.11.0.216
 * @param pnt - The point to calculate the min distance from.
 * @param clampEnds - If true, the parametric distance is clamped to the [0-1] range and the nearest point to the line segment is returned rather than the nearest distance to the infinite line formed by the two end points of the segment.
*/
	minDistanceFromPoint(pnt:DzVec3, clampEnds:Boolean):Object {
	
	};
	/**
 * @returns An object where the "distance" property represents the minimum distance squared between this line and a point, and the "s" property represents the parametric distance along the line to the minimum perpendicular distance point.
 * @since 4.11.0.216
 * @param pnt - The point to calculate the min distance from.
 * @param clampEnds - If true, the parametric distance is clamped to the [0-1] range and the nearest point to the line segment is returned rather than the nearest distance to the infinite line formed by the two end points of the segment.
*/
	minDistanceFromPointSquared(pnt:DzVec3, clampEnds:Boolean):Object {
	
	};
	/**
 * @returns An object where the "distance" property represents the minimum distance between this line and a ray, the "seg_t" property represents the parametric distance along this line, and the "ray_t" property represents the parametric distance along the given ray.
 * @since 4.11.0.216
 * @param ray - The ray to calculate min distance from.
*/
	minDistanceFromRay(ray:DzLine3):Object {
	
	};
	/**
 * @returns An object where the "distance" property represents the minimum distance squared between this line and a ray, the "seg_t" property represents the parametric distance along this line, and the "ray_t" property represents the parametric distance along the given ray.
 * @since 4.11.0.216
 * @param ray - The ray to calculate min distance from.
*/
	minDistanceFromRaySquared(ray:DzLine3):Object {
	
	};
	/**
 * @description Reverses the direction of the line by mirroring the endpoint.
 * @since 4.11.0.216
*/
	negate():void {
	
	};
	/**
 * @description Calculates the intersection of this line and the plane specified. The plane is defined by a point on the plane and the normal to the plane.
 * @returns An object where the "intersects" property represents whether or not this line intersects with the given plane, the "t" property represents the parametric distance along this line to the intersection point (if there is one), and the "intersection" property represents the intersection point if the line and plane intersect.
 * @since 4.11.0.216
 * @param planePoint - A point on the plane (to define the plane).
 * @param planeNormal - The normal to the plane (to define the plane).
*/
	planeIntersect(planePoint:DzVec3, planeNormal:DzVec3):Object {
	
	};
	/**
 * @description Tests the intersection of two line segments.
 * @returns An object where the "intersects" property represents whether or not this line segment intersects with the given line segment, and the "intersection" property represents the intersection point if the lines intersect.
 * @since 4.11.0.216
 * @param line - The line to test intersection with.
 * @param tolerance - If not zero, specifies the maximum distance between lines that will be counted as an intersection.
*/
	segmentsIntersect(line:DzLine3, tolerance:Number):Object {
	
	};
	/**
 * @description Sets the line to have the length given by setting the endpoint relative to the current origin.
 * @since 4.11.0.216
*/
	setLength(length:Number):void {
	
	};
	/**
 * @description Swaps the origin for the endpoint.
 * @since 4.11.0.216
*/
	swapEnds():void {
	
	};
	/**
 * @returns A string representation of this line in the form "[[ originX, originY, originZ ],[ endX, endY, endZ ]]".
*/
	toString():String {
	
	};

}
/**
 * @classdesc TODO:
Add detailed description.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/linearpointlight_dz} */
class DzLinearPointLight extends DzPointLight {
	/**
 * @description Default Constructor. Creates a new linear point light.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @returns The distance from the origin of the node where the intensity reaches 0.
 * @since 4.9.3.145
*/
	getFallOffEnd():Number {
	
	};
	/**
 * @returns The property that controls the distance from the origin of the node where the intensity reaches 0.
*/
	getFallOffEndControl():DzFloatProperty {
	
	};
	/**
 * @returns The distance from the origin of the node where the intensity begins to decrease.
 * @since 4.9.3.145
*/
	getFallOffStart():Number {
	
	};
	/**
 * @returns The property that controls the distance from the origin of the node where the intensity begins to decrease.
*/
	getFallOffStartControl():DzFloatProperty {
	
	};
	/**
 * @description Sets the distance from the origin of the node where the intensity reaches 0.
 * @since 4.9.3.145
 * @param end - The distance from the origin to set.
*/
	setFallOffEnd(end:Number):void {
	
	};
	/**
 * @description Sets the distance from the origin of the node where the intensity begins to decrease.
 * @since 4.9.3.145
 * @param start - The distance from the origin to set.
*/
	setFallOffStart(start:Number):void {
	
	};

}
/**
 * @classdesc 
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/lineedit_dz} */
class DzLineEdit extends DzWidget {
	/**
 * @description Holds whether or not the input satisfies the inputMask and the validator. (Read Only)
	*/
	acceptableInput:Boolean;
	/**
 * @description Holds the alignment of the text displayed in the editor.
	*/
	alignment:DzWidget;
	/**
 * @description Holds the position of the cursor in the editor.
	*/
	cursorPosition:Number;
	/**
 * @description Holds the value that determines how the text entered is displayed to the user.
	*/
	echoMode:EchoMode;
	/**
 * @description Holds whether or not the editor is drawn with a frame.
	*/
	frame:Boolean;
	/**
 * @description Holds whether or not text is selected. (Read Only)
	*/
	hasSelectedText:Boolean;
	/**
 * @description Holds the input mask for the editor. Set this to an empty string to clear the input mask.
	*/
	inputMask:String;
	/**
 * @description Holds the maximum length of the text in the editor.
	*/
	maxLength:Number;
	/**
 * @description Holds whether or not the text in the editor has been modified. (Read Only < 4.9.3.93)
	*/
	modified:Boolean;
	/**
 * @description Holds the text string displayed in the editor when its text string is empty.
	*/
	placeholderText:String;
	/**
 * @description Holds whether or not the text in the editor can be edited by the user.
	*/
	readOnly:Boolean;
	/**
 * @description Holds whether or not a redo operation is available. (Read Only)
	*/
	redoAvailable:Boolean;
	/**
 * @description Holds the selected text (if any) of the editor.
	*/
	selectedText:String;
	/**
 * @description Holds the text value of the editor.
	*/
	text:String;
	/**
 * @description Holds whether or not an undo operation is available. (Read Only)
	*/
	undoAvailable:Boolean;
	/**
 * @description ENUMERATOR: Display characters as they are entered.
*/
	
	static Normal;
	/**
 * @description ENUMERATOR: Do not display anything. This may be appropriate for passwords where even the length of the password should be kept secret.
*/
	
	static NoEcho;
	/**
 * @description ENUMERATOR: Display asterisks instead of the characters actually entered.
*/
	
	static Password;
	/**
 * @description ENUMERATOR: Display characters as they are entered while editing otherwise display asterisks.
*/
	
	static PasswordEchoOnEdit;
	/**
 * @description Creates a line edit as a child of the given parent widget.
 * @param parent - The widget parent for the editor.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description If text is currently selected, it will be deleted and the cursor moved to the beginning of the selection. If no text is selected, the cursor will be moved one character to the left and the character will be deleted.
*/
	backspace():void {
	
	};
	/**
 * @description Clears the text in the editor.
*/
	clear():void {
	
	};
	/**
 * @description Deprecated
*/
	clearModified():void {
	
	};
	/**
 * @description Copies the selected text into the clipboard.
*/
	copy():void {
	
	};
	/**
 * @description Moves the cursor backward the given number of characters.
 * @param mark - If true, each character that is stepped over will be added to the current selection.
 * @param steps - The number of characters to move the cursor.
*/
	cursorBackward(mark:Boolean, steps:Number):void {
	
	};
	/**
 * @description Moves the cursor forward the given number of characters.
 * @param mark - If true, each character that is stepped over will be added to the current selection.
 * @param steps - The number of characters to move the cursor.
*/
	cursorForward(mark:Boolean, steps:Number):void {
	
	};
	/**
 * @description Moves the cursor backward one word.
 * @param mark - If true, the word will be added to the current selection.
 * @param steps - The number of words to move the cursor. (since 4.9.3.93)
*/
	cursorWordBackward(mark:Boolean, steps:Number):void {
	
	};
	/**
 * @description Moves the cursor forward one word.
 * @param mark - If true, the word will be added to the current selection.
 * @param steps - The number of words to move the cursor. (since 4.9.3.93)
*/
	cursorWordForward(mark:Boolean, steps:Number):void {
	
	};
	/**
 * @description Copies the selected text into the clipboard and removes it from the editor.
*/
	cut():void {
	
	};
	/**
 * @description If text is currently selected, it will be deleted and the cursor moved to the beginning of the selection. If no text is selected, the character to the right of the cursor will be deleted.
*/
	del():void {
	
	};
	/**
 * @description Clears any selection in the editor.
*/
	deselect():void {
	
	};
	/**
 * @description Moves the cursor to the end of the line.
 * @param mark - If true, the text from the cursor's previous position to the end of the line will be added to the current selection.
*/
	end(mark:Boolean):void {
	
	};
	/**
 * @returns The settings for the validator (if any) set on this line edit, otherwise null.
 * @since 4.12.1.97
*/
	getValidatorSettings():DzSettings {
	
	};
	/**
 * @returns true if the input satisfies the inputMask and the validator, otherwise false.
*/
	hasAcceptableInput():Boolean {
	
	};
	/**
 * @returns true if some or all of the text in the editor is selected, otherwise false.
*/
	hasSelectedText():Boolean {
	
	};
	/**
 * @description Moves the cursor to the beginning of the line.
 * @param mark - If true, the text from the beginning of the line to the cursor's previous position will be added to the current selection.
*/
	home(mark:Boolean):void {
	
	};
	/**
 * @description Inserts any text on the clipboard into the line at the cursor's current position.
*/
	paste():void {
	
	};
	/**
 * @description If redoAvailable is true, redoes the next operation in the editor.
*/
	redo():void {
	
	};
	/**
 * @description Selects all the text in the editor.
*/
	selectAll():void {
	
	};
	/**
 * @returns The currently selected text (if any) in the editor.
*/
	selectedText():String {
	
	};
	/**
 * @returns The position in the editor where the current selection begins.
*/
	selectionStart():Number {
	
	};
	/**
 * @description Causes this line edit to only accept characters that represent double precision floating point (decimal) numbers.
 * @param bottom - The minimum acceptable value.
 * @param top - The maximum acceptable value.
 * @param decimals - The maximum number of digits after the decimal point to allow.
 * @param scientific - If true, the text of the editor is expressed in scientific form; i.e., it may have an exponent part; i.e., 1.5E-2. If false (default), the text of the editor is expressed as a standard number; i.e., 0.015.
*/
	setDoubleValidator(bottom:Number, top:Number, decimals:Number, scientific:Boolean):void {
	
	};
	/**
 * @description Causes this line edit to only accept characters that represent whole numbers (integers).
 * @param minimum - The minimum acceptable value.
 * @param maximum - The maximum acceptable value.
*/
	setIntValidator(minimum:Number, maximum:Number):void {
	
	};
	/**
 * @description Causes this line edit to only accept characters that satisfy a Regular Expression.
 * @param regx - The Regular Expression to use.
 * @param caseSensitive - If true (default), the expression is case sensitive.
*/
	setRegExValidator(rx:String, caseSensitive:Boolean):void {
	
	};
	/**
 * @description Sets the selected portion of the text in the editor.
 * @param start - The position to start the selection from.
 * @param length - The number of characters from start to select.
*/
	setSelection(start:Number, length:Number):void {
	
	};
	/**
 * @description Causes this line edit to only accept characters that satisfy a validator configured with a settings object.
 * @since 4.12.1.97
 * @param settings - The settings to use in choosing and configuring the validator. The settings must contain a string value named "validator" that provides the type of validator to set. Valid types are: float, int, regexp, subpath, filename, nodename, nodelabel.
 * @attention Other settings to configure a given validator can be retrieved using getValidatorSettings().
*/
	setValidator(settings:DzSettings):void {
	
	};
	/**
 * @description If undoAvailable is true, undoes the last operation in the editor.
*/
	undo():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the current position changes.
 * @signature `"cursorPositionChanged(int, int)"`
 * @event
*/
	cursorPositionChanged(oldPos:Number, newPos:Number):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the [Return] or [Enter] key is pressed or the editor loses focus.
 * @signature `"editingFinished()"`
 * @event
*/
	editingFinished():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the user presses the [Return] key in the editor.
 * @signature `"returnPressed()"`
 * @event
*/
	returnPressed():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the selected text in the editor changes.
 * @signature `"selectionChanged()"`
 * @event
*/
	selectionChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the text of the editor changes, passes the new text.
 * @signature `"textChanged(const QString&)"`
 * @event
*/
	textChanged(text:String):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the text edited, passes the new text.
 * @signature `"textEdited(const QString&)"`
 * @event
*/
	textEdited(text:String):void {
	
	};

}
/**
 * @classdesc TODO:
Add detailed description.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/listbox_dz} */
class DzListBox extends  {
	/**
 * @description The layout mode for the columns of the list box
	*/
	columnMode:LayoutMode;
	/**
 * @description The number of items in the list box (read-only)
	*/
	count:Number;
	/**
 * @description The index of the currently highlighted item in the list box
	*/
	currentItem:Number;
	/**
 * @description The text of the currently highlighted item in the list box
	*/
	currentText:String;
	/**
 * @description The number of columns in the list box (read-only)
	*/
	numColumns:Number;
	/**
 * @description The number of items visible in the list box (read-only)
	*/
	numItemsVisible:Number;
	/**
 * @description The number of rows in the list box (read-only)
	*/
	numRows:Number;
	/**
 * @description The layout mode for the rows of the list box
	*/
	rowMode:LayoutMode;
	/**
 * @description The index of the currently selected item in the list box (in single selection mode only)
	*/
	selected:Number;
	/**
 * @description The selection mode of the list box
	*/
	selectionMode:SelectionMode;
	/**
 * @description The index of the item at the top of the list box
	*/
	topItem:Number;
	/**
 * @description Whether or not the list box has variable height rows
	*/
	variableHeight:Boolean;
	/**
 * @description Whether or not the list box has variable width columns
	*/
	variableWidth:Boolean;
	/**
 * @description ENUMERATOR: There is a fixed number of rows or columns
*/
	
	static FixedNumber;
	/**
 * @description ENUMERATOR: There are as many columns as will fit
*/
	
	static FitToWidth;
	/**
 * @description ENUMERATOR: There are as many rows as will fit
*/
	
	static FitToHeight;
	/**
 * @description ENUMERATOR: There are as many rows as required by the column mode and vice-versa
*/
	
	static Variable;
	/**
 * @description ENUMERATOR: Single selection - only one item in the box can be selected at a time
*/
	
	static Single;
	/**
 * @description ENUMERATOR: Multi selection - when the user clicks on an item, its selection state is toggled, all other items remain the same
*/
	
	static Multi;
	/**
 * @description ENUMERATOR: Extended selection - when the user clicks on an item, the current selection is replaced with that item. The ctrl and shift keys can be used to select multiple items.
*/
	
	static Extended;
	/**
 * @description ENUMERATOR: Items can not be selected
*/
	
	static NoSelection;
	/**
 * @description Creates a list box with the given parent widget
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Clears all items in the list box
*/
	clear():void {
	
	};
	/**
 * @description Inserts the given item into the list box
*/
	insertItem(text:String):void {
	
	};
	/**
 * @returns true if the item at the given index is selected
*/
	isSelected(index:Number):Boolean {
	
	};
	/**
 * @description Removes the given item from the list box
*/
	removeItem(index:Number):void {
	
	};
	/**
 * @description Sets whether the item at the given index is selected
*/
	setSelected(index:Number, selected:Boolean):void {
	
	};
	/**
 * @returns The text of the item at the given index
*/
	text(index:Number):String {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when an item is clicked (mouse button pressed and released).
 * @signature `"clicked(int)"`
 * @event
*/
	clicked(index:Number):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when an item is clicked (mouse button pressed and released).
 * @signature `"clicked(int,const QPoint&)"`
 * @event
*/
	clicked(index:Number, pnt:Point):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the user right clicks the list box for a context menu.
 * @signature `"contextMenuRequested(int,const QPoint&)"`
 * @event
*/
	contextMenuRequested(index:Number, pos:Point):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the current item changes.
 * @signature `"currentChanged(int)"`
 * @event
*/
	currentChanged(index:Number):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when an item is double clicked.
 * @signature `"doubleClicked(int)"`
 * @event
*/
	doubleClicked(index:Number):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the highlighted item changes.
 * @signature `"highlighted(const QString&)"`
 * @event
*/
	highlighted(text:String):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the highlighted item changes.
 * @signature `"highlighted(int)"`
 * @event
*/
	highlighted(index:Number):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when an item is clicked with the a mouse button (mouse button pressed and released).
 * @signature `"mouseButtonClicked(int,int,const QPoint&)"`
 * @event
*/
	mouseButtonClicked(button:Number, index:Number, pos:Point):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when an item is pressed with the a mouse button (mouse button pressed).
 * @signature `"mouseButtonPressed(int,int,const QPoint&)"`
 * @event
*/
	mouseButtonPressed(button:Number, index:Number, pos:Point):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted mouse cursor moves onto an item.
 * @signature `"onItem(int)"`
 * @event
*/
	onItem(index:Number):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted mouse cursor moves from an item to an empty part of the list box.
 * @signature `"onViewport()"`
 * @event
*/
	onViewport():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when an item is pressed (mouse button pressed).
 * @signature `"pressed(int,const QPoint&)"`
 * @event
*/
	pressed(index:Number, pnt:Point):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when an item is pressed (mouse button pressed).
 * @signature `"pressed(int)"`
 * @event
*/
	pressed(index:Number):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when return is pressed on the current item.
 * @signature `"returnPressed(int)"`
 * @event
*/
	returnPressed(index:Number):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when an item is clicked with the right button (mouse button pressed and released).
 * @signature `"rightButtonClicked(int,const QPoint&)"`
 * @event
*/
	rightButtonClicked(index:Number, pnt:Point):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when an item is pressed with the right button (mouse button pressed).
 * @signature `"rightButtonPressed(int,const QPoint&)"`
 * @event
*/
	rightButtonPressed(index:Number, pnt:Point):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the selected item changes.
 * @signature `"selected(int)"`
 * @event
*/
	selected(index:Number):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the selected item changes.
 * @signature `"selected(const QString&)"`
 * @event
*/
	selected(text:String):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the selection in the box changes.
 * @signature `"selectionChanged()"`
 * @event
*/
	selectionChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when a new item is selected in single selection mode.
 * @signature `"selectionChanged(int)"`
 * @event
*/
	selectionChanged(index:Number):void {
	
	};

}
/**
 * @classdesc TODO:
Add detailed description.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/listview_dz} */
class DzListView extends  {
	/**
 * @description Holds whether or not all columns show keyboard focus.
	*/
	allColumnsShowFocus:Boolean;
	/**
 * @description Holds the number root level children in the list view. (Read Only)
	*/
	childCount:Number;
	/**
 * @description Holds the number of items in the list box. (Read Only)
	*/
	columns:Number;
	/**
 * @description Holds the default action that is taken when the user attempts to rename an item.
	*/
	defaultRenameAction:RenameAction;
	/**
 * @description Holds the advisory margin for list view items.
	*/
	itemMargin:Number;
	/**
 * @description Holds the resize mode for the list view.
	*/
	resizeMode:ResizeMode;
	/**
 * @description Holds whether or not the root level items show expand/collapse boxes.
	*/
	rootIsDecorated:Boolean;
	/**
 * @description Holds the selection mode for the list view.
	*/
	selectionMode:SelectionMode;
	/**
 * @description Holds whether or not the sort indicator should be displayed.
	*/
	showSortIndicator:Boolean;
	/**
 * @description Holds whether or not tool tips should be displayed.
	*/
	showToolTips:Boolean;
	/**
 * @description Holds the column that the list is sorted by.
	*/
	sortColumn:Number;
	/**
 * @description Holds the sort order of the list view.
	*/
	sortOrder:SortOrder;
	/**
 * @description Holds the number of pixels that a child item is offset from its parent.
	*/
	treeStepSize:Number;
	/**
 * @description ENUMERATOR: The selected items.
*/
	
	static Selected;
	/**
 * @description ENUMERATOR: The unselected items.
*/
	
	static Unselected;
	/**
 * @description ENUMERATOR: The items that are checked.
*/
	
	static Checked;
	/**
 * @description ENUMERATOR: The items that are not checked.
*/
	
	static NotChecked;
	/**
 * @description ENUMERATOR: All the items in the view.
*/
	
	static All;
	/**
 * @description ENUMERATOR: The item is renamed if return is pressed or if the user clicks away from the entry field (it loses focus).
*/
	
	static Accept;
	/**
 * @description ENUMERATOR: The item is renamed only if the user presses return in the entry field. If the entry field loses focus, the rename operation is discarded.
*/
	
	static Reject;
	/**
 * @description ENUMERATOR: The columns do not get resized.
*/
	
	static NoColumn;
	/**
 * @description ENUMERATOR: All columns get resized equally.
*/
	
	static AllColumns;
	/**
 * @description ENUMERATOR: The last column is resized to fit the width of the view.
*/
	
	static LastColumn;
	/**
 * @description ENUMERATOR: Only one item in the list view can be selected.
*/
	
	static Single;
	/**
 * @description ENUMERATOR: Multiple items in the list view can be selected. When the user clicks on an item, its selection state is toggled on/off.
*/
	
	static Multi;
	/**
 * @description ENUMERATOR: Multiple items in the list view can be selected. When the user clicks on an item, the current selection is cleared, and that item becomes selected. Multiple items are selected by clicking with the CTRL key, or SHIFT key pressed, or by clicking and dragging.
*/
	
	static Extended;
	/**
 * @description ENUMERATOR: No items in the list view can be selected.
*/
	
	static NoSelection;
	/**
 * @description ENUMERATOR: The column width does not change automatically.
*/
	
	static Manual;
	/**
 * @description ENUMERATOR: The column width grows automatically according to the maximum width of all items in the column.
*/
	
	static Maximum;
	/**
 * @description Creates a list view widget with the specified parent widget
 * @param parent - The widget to parent this widget to.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Adds a column to the list view.
 * @param label - The label for the column.
*/
	addColumn(label:String):Number {
	
	};
	/**
 * @description Clears all items from the list view.
*/
	clear():void {
	
	};
	/**
 * @description Clears the current selection in the view.
*/
	clearSelection():void {
	
	};
	/**
 * @returns The alignment of the specified column.
 * @param column - The index of the column.
*/
	columnAlignment(column:Number):Number {
	
	};
	/**
 * @returns The label of the specified column (if any), otherwise an empty string.
 * @param column - The index of the column.
*/
	columnText(column:Number):String {
	
	};
	/**
 * @returns The width of the specified column.
 * @param column - The index of the column.
*/
	columnWidth(column:Number):Number {
	
	};
	/**
 * @returns The width mode of the specified column.
 * @param column - The index of the column.
*/
	columnWidthMode(column:Number):WidthMode {
	
	};
	/**
 * @returns The currently highlighted item.
*/
	currentItem():DzListViewItem {
	
	};
	/**
 * @description Deletes an item from the list view.
 * @param item - The item to delete.
*/
	deleteItem(item:DzListViewItem):void {
	
	};
	/**
 * @description Ensures an item is visible in the view.
 * @param item - The item to ensure is visible.
*/
	ensureItemVisible(item:DzListViewItem):void {
	
	};
	/**
 * @returns The item in the view with the specified text, for the specified column, matched according to the specified flags (if any), otherwise null.
 * @param text - The text to find.
 * @param column - The index of the column.
 * @param compare - A bitwise OR of the following values:

 CaseSensitive = 0x00001 (0 0001)

 BeginsWith = 0x00002 (0 0010)

 EndsWith = 0x00004 (0 0100)

 Contains = 0x00008 (0 1000)

 ExactMatch = 0x00010 (1 0000)
*/
	findItem(text:String, column:Number, compare:Number):DzListViewItem {
	
	};
	/**
 * @returns The first item in the list view.
*/
	firstChild():DzListViewItem {
	
	};
	/**
 * @returns A list of the DzListViewItem instances in this list view that match the supplied flag.
 * @param mode - The mode of the items to retrieve.
*/
	getItems(mode:ItemsMode):Array {
	
	};
	/**
 * @returns The header for this list view.
*/
	header():DzHeader {
	
	};
	/**
 * @description Hide the specified column
 * @param column - The index of the column.
*/
	hideColumn(column:Number):void {
	
	};
	/**
 * @returns true if the specified item is expanded (open), or false if it is collapsed (closed).
 * @param item - The item to retrieve the open state of.
*/
	isOpen(item:DzListViewItem):Boolean {
	
	};
	/**
 * @returns true if the view is currently in a renaming operation, otherwise false.
*/
	isRenaming():Boolean {
	
	};
	/**
 * @returns true if the specified item is selected, otherwise false.
 * @param item - The item to check.
*/
	isSelected(item:DzListViewItem):Boolean {
	
	};
	/**
 * @returns The last item in the list view.
*/
	lastItem():DzListViewItem {
	
	};
	/**
 * @description Removes a column from the list view.
 * @param column - The index of the column.
*/
	removeColumn(column:Number):void {
	
	};
	/**
 * @returns The selected item.
*/
	selectedItem():DzListViewItem {
	
	};
	/**
 * @description Sets the alignment of a column.
 * @param column - The index of the column.
 * @param align - The alignment to set.
*/
	setColumnAlignment(column:Number, align:Number):void {
	
	};
	/**
 * @description Changes the label of a column in the list view.
 * @param column - The index of the column.
 * @param label - The label for the column.
*/
	setColumnText(column:Number, label:String):void {
	
	};
	/**
 * @description Sets the width of a column.
 * @param column - The index of the column.
 * @param width - The width to set.
*/
	setColumnWidth(column:Number, width:Number):void {
	
	};
	/**
 * @description Sets the width mode of a column.
 * @param column - The index of the column.
 * @param mode - The width mode to set.
*/
	setColumnWidthMode(column:Number, mode:WidthMode):void {
	
	};
	/**
 * @description Sets the currently highlighted item
 * @param item - The item to set.
*/
	setCurrentItem(item:DzListViewItem):void {
	
	};
	/**
 * @description Sets whether or not an item is expanded (open) or collapsed (closed).
 * @param item - The item to set the open state of.
 * @param open - The open state to set.
*/
	setOpen(item:DzListViewItem, open:Boolean):void {
	
	};
	/**
 * @description Sets whether or not an item is selected.
 * @param item - The item to set the selected state of.
 * @param selected - The selected state to set.
*/
	setSelected(item:DzListViewItem, selected:Boolean):void {
	
	};
	/**
 * @description Sets the selection anchor of the view.
 * @param item - The item to set.
*/
	setSelectionAnchor(item:DzListViewItem):void {
	
	};
	/**
 * @description Sets the sorting column and order for the view.
 * @param column - The index of the column.
 * @param ascending - If true, ascending. If false, descending.
*/
	setSorting(column:Number, ascending:Boolean):void {
	
	};
	/**
 * @description Sort the view
*/
	sort():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when an item is clicked (mouse button pressed and released)
 * @signature `"clicked(DzListViewItem*)"`
 * @event
*/
	clicked(item:DzListViewItem):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when an item is clicked (mouse button pressed and released)
 * @signature `"clicked(DzListViewItem*,const QPoint&,int)"`
 * @event
*/
	clicked(item:DzListViewItem, pos:Point, col:Number):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when an item is collapsed (when item 's children are hidden)
 * @signature `"collapsed(DzListViewItem*)"`
 * @event
*/
	collapsed(item:DzListViewItem):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the user right clicks the list view, or uses a special system key, for a context menu
 * @signature `"contextMenuRequested(DzListViewItem*,const QPoint&,int)"`
 * @event
*/
	contextMenuRequested(item:DzListViewItem, pos:Point, col:Number):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the current item changes
 * @signature `"currentChanged(DzListViewItem*)"`
 * @event
*/
	currentChanged(item:DzListViewItem):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when an item is double clicked (on the second button press, not release)
 * @signature `"doubleClicked(DzListViewItem*,const QPoint&,int)"`
 * @event
*/
	doubleClicked(item:DzListViewItem, pos:Point, col:Number):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when an item is expanded (when item 's children are shown)
 * @signature `"expanded(DzListViewItem*)"`
 * @event
*/
	expanded(item:DzListViewItem):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when an item is renamed
 * @signature `"itemRenamed(DzListViewItem*,int,const QString&)"`
 * @event
*/
	itemRenamed(item:DzListViewItem, col:Number, text:String):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when an item is renamed
 * @signature `"itemRenamed(DzListViewItem*,int)"`
 * @event
*/
	itemRenamed(item:DzListViewItem, col:Number):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when an item is clicked with the a mouse button (mouse button pressed and released)
 * @signature `"mouseButtonClicked(int,DzListViewItem*,const QPoint&,int)"`
 * @event
*/
	mouseButtonClicked(button:Number, item:DzListViewItem, pos:Point, col:Number):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when an item is pressed with the a mouse button (mouse button pressed)
 * @signature `"mouseButtonPressed(int,DzListViewItem*,const QPoint&,int)"`
 * @event
*/
	mouseButtonPressed(button:Number, item:DzListViewItem, pos:Point, col:Number):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when an item is pressed (mouse button pressed)
 * @signature `"pressed(DzListViewItem*,const QPoint&,int)"`
 * @event
*/
	pressed(item:DzListViewItem, pos:Point, col:Number):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when an item is pressed (mouse button pressed)
 * @signature `"pressed(DzListViewItem*)"`
 * @event
*/
	pressed(item:DzListViewItem):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when return is pressed on the current item
 * @signature `"returnPressed(DzListViewItem*)"`
 * @event
*/
	returnPressed(item:DzListViewItem):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when an item is clicked with the right button (mouse button pressed and released)
 * @signature `"rightButtonClicked(DzListViewItem*,const QPoint&,int)"`
 * @event
*/
	rightButtonClicked(item:DzListViewItem, pos:Point, col:Number):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when an item is pressed with the right button (mouse button pressed)
 * @signature `"rightButtonPressed(DzListViewItem*,const QPoint&,int)"`
 * @event
*/
	rightButtonPressed(item:DzListViewItem, pos:Point, col:Number):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the selected item changes.
 * @signature `"selectionChanged()"`
 * @event
*/
	selectionChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the selected item changes
 * @signature `"selectionChanged(DzListViewItem*)"`
 * @event
*/
	selectionChanged(item:DzListViewItem):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the space bar is pressed on the current item
 * @signature `"spacePressed(DzListViewItem*)"`
 * @event
*/
	spacePressed(item:DzListViewItem):void {
	
	};

}
/**
 * @classdesc This class is not a widget, but a helper class for working with DzListView. Each DzListViewItem represents a single item in a list view - add items to a list view by creating a new DzListViewItem that is a child of the list view, or a child of another list view item in the list view.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/listviewitem_dz} */
class DzListViewItem extends QObject {
	/**
 * @description Holds whether or not the item can be dragged.
	*/
	dragEnabled:Boolean;
	/**
 * @description Holds whether or not the item can have other items dropped on it.
	*/
	dropEnabled:Boolean;
	/**
 * @description Holds whether or not the item can be enabled .
	*/
	enabled:Boolean;
	/**
 * @description Holds whether or not the item can be expanded (opened).
	*/
	expandable:Boolean;
	/**
 * @description Holds the height of the item.
	*/
	height:Number;
	/**
 * @description Holds the identifier for this item. (Read Only)
	*/
	id:Number;
	/**
 * @description Holds whether or not the item can be displayed on multiple lines.
	*/
	multiLinesEnabled:Boolean;
	/**
 * @description Holds whether or not the item is expanded (open) or collapsed (closed).
	*/
	open:Boolean;
	/**
 * @description Holds whether or not the item can be selected.
	*/
	selectable:Boolean;
	/**
 * @description Holds whether or not the item is selected.
	*/
	selected:Boolean;
	/**
 * @description Holds whether or not the item is visible.
	*/
	visible:Boolean;
	/**
 * @description Creates a list view item at the root level of the specified list view
 * @param parent - The listview to create this item as a child of
 * @param id - The identifier for this item
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Creates a list view item as a child of the specified list view item
 * @param parent - The item to create this item as a child of
 * @param id - The identifier for this item
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Adds an arbitrary data item to be stored with the item.
 * @param key - The key for the data.
 * @param val - The value of the data.
*/
	addDataItem(key:String, val:Object):void {
	
	};
	/**
 * @returns The number of child items of this item.
*/
	childCount():Number {
	
	};
	/**
 * @description Compares the specified item with this item in the specified column (if any).
 * @returns -1 if this item is less than item, 0 if they are equal, and 1 if this item is greater than item.
 * @param item - The item to compare.
 * @param column - The index of the column.
 * @param ascending - Whether to compare in ascending, or descending, order.
*/
	compare(item:DzListViewItem, column:Number, ascending:Boolean):Number {
	
	};
	/**
 * @description Deletes an item from this item's list of child items.
 * @param item - The item to delete.
*/
	deleteItem(item:DzListViewItem):DzListViewItem {
	
	};
	/**
 * @returns The hierarchical depth of this item.
*/
	depth():Number {
	
	};
	/**
 * @returns The first child item of this item.
*/
	firstChild():DzListViewItem {
	
	};
	/**
 * @returns The value of the data on the item with the specified key (if any).
 * @param key - The key for the data.
*/
	getDataItem(key:String):Object {
	
	};
	/**
 * @returns The number of data items on the item.
*/
	getNumDataItems():Number {
	
	};
	/**
 * @description Inserts an item as a child of this item.
 * @param newChild - The item to insert.
*/
	insertItem(newChild:DzListViewItem):DzListViewItem {
	
	};
	/**
 * @returns The item above this item.
*/
	itemAbove():DzListViewItem {
	
	};
	/**
 * @returns The item below this item.
*/
	itemBelow():DzListViewItem {
	
	};
	/**
 * @returns A key that can be used for sorting by column - i.e., text()
 * @param column - The index of the column.
 * @param ascending - Whether to compare in ascending, or descending, order.
*/
	key(column:Number, ascending:Boolean):String {
	
	};
	/**
 * @returns The list view that this item resides in.
*/
	listView():DzListView {
	
	};
	/**
 * @description Moves this item to be after the specified item, which must be one of its siblings.
 * @param item - The item to move after.
*/
	moveItem(item:DzListViewItem):DzListViewItem {
	
	};
	/**
 * @returns The next sibling of this item.
*/
	nextSibling():DzListViewItem {
	
	};
	/**
 * @returns The parent of this item.
*/
	parent():DzListViewItem {
	
	};
	/**
 * @description Removes an item from the children of this item.
 * @param item - The item to insert.
*/
	removeItem(item:DzListViewItem):DzListViewItem {
	
	};
	/**
 * @returns Whether or not the text in the specified column can be changed by the user.
 * @param column - The index of the column.
*/
	renameEnabled(column:Number):Boolean {
	
	};
	/**
 * @description Sets the pixmap for this item in the specified column.
 * @param column - The index of the column.
 * @param pm - The pixmap to set.
*/
	setPixmap(column:Number, pm:Pixmap):void {
	
	};
	/**
 * @description Sets whether or not the text in the specified column can be changed by the user.
 * @param column - The index of the column.
 * @param yesNo - Whether or not the column can be changed.
*/
	setRenameEnabled(column:Number, yesNo:Boolean):void {
	
	};
	/**
 * @description Sets the text for this item in the specified column.
 * @param column - The index of the column.
 * @param text - The text to set.
*/
	setText(column:Number, text:String):void {
	
	};
	/**
 * @description Sorts the children of this item according to the current sorting column and order.
*/
	sort():void {
	
	};
	/**
 * @description Sorts the child items of this item by the specified column in the specified order.
 * @param column - The index of the column.
 * @param ascending - Whether to sort in ascending, or descending, order.
*/
	sortChildItems(column:Number, ascending:Boolean):void {
	
	};
	/**
 * @description Starts a rename operation.
 * @param column - The index of the column.
*/
	startRename(column:Number):void {
	
	};
	/**
 * @returns The text for this item in the specified column
 * @param column - The index of the column.
*/
	text(column:Number):String {
	
	};

}
/**
 * @classdesc There is only one of these widgets in the application, which is created and owned by DzApp. It can be accessed by using the Global.MainWindow variable.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/mainwindow_dz} */
class DzMainWindow extends QWidget {
	/**
 * @description Whether or not the main window is always on top of other application windows.
	*/
	alwaysOnTop:Boolean;
	/**
 * @description Whether or not tool tips are enabled.
	*/
	toolTipsEnabled:Boolean;
	/**
 * @description Presents the user with a dialog that asks if they want to save changes to the scene, and does a scene save if the user selects yes.
 * @returns true if the user selects 'Yes' or 'No', otherwise false.
*/
	askSaveChanges():Boolean {
	
	};
	/**
 * @description Presents the user with a dialog that asks if they want to turn off limits to apply the preset currently being loaded.
 * @returns true if limits should be turned off, false if limits should be left alone.
*/
	askTurnOffLimits():Boolean {
	
	};
	/**
 * @description Checks to see if the given file already exists - if it does, prompts the user for whether or not they want to overwrite it.
 * @returns true if the file does not exist or the user wants to overwrite it, false if the user needs to select a new name.
 * @param filename - The full path of the file to check.
*/
	checkExistingFile(filename:String):Boolean {
	
	};
	/**
 * @description Clears a the current UI popup if there is one.
*/
	clearUIPopUp():void {
	
	};
	/**
 * @description Display a message in the status bar.
 * @param msg - Message to display.
 * @param msecs - If greater than zero, the message will be displayed for the given amount of time, otherwise the message will be displayed until another message is sent.
*/
	displayPrompt(msg:String, msecs:Number):void {
	
	};
	/**
 * @returns The dock area located at the goven position.
*/
	dockArea(pos:Point):DzDockArea {
	
	};
	/**
 * @description Displays a dialog for saving the scene to a non-native file, and saves the scene if the user does not cancel.
 * @returns true if a file was selected and successfully saved, otherwise false.
 * @param parent - The widget to parent the dialog to; see DzApp.getDialogParent().
*/
	doFileExport(parent:QWidget):Boolean {
	
	};
	/**
 * @description Displays a dialog for loading a non-native file, and loads the file if the user does not cancel.
 * @returns true if a file was selected and successfully loaded, otherwise false.
 * @param parent - The widget to parent the dialog to; see DzApp.getDialogParent().
*/
	doFileImport(parent:QWidget):Boolean {
	
	};
	/**
 * @description Displays a dialog for loading a native scene file, and merges the file into the current scene if the user does not cancel.
 * @returns true if a file was selected and successfully loaded, otherwise false.
 * @param parent - The widget to parent the dialog to; see DzApp.getDialogParent().
*/
	doFileMerge(parent:QWidget):Boolean {
	
	};
	/**
 * @description Displays a dialog for loading a native scene file, and opens the file as a new scene if the user does not cancel.
 * @returns true if a file was selected and successfully loaded, otherwise false.
 * @param parent - The widget to parent the dialog to; see DzApp.getDialogParent().
*/
	doFileOpen(parent:QWidget):Boolean {
	
	};
	/**
 * @description Saves the scene to the current scene file; displays a dialog to the user if a file needs to be selected.
 * @returns true if a file was selected and successfully saved, otherwise false.
 * @param parent - The widget to parent the dialog to; see DzApp.getDialogParent().
*/
	doFileSave(parent:QWidget):Boolean {
	
	};
	/**
 * @description Displays a dialog for saving the scene to a native file, and saves the scene if the user does not cancel.
 * @returns true if a file was selected and successfully saved, otherwise false.
 * @param parent - The widget to parent the dialog to; see DzApp.getDialogParent().
 * @param startWith - The directory to start the file dialog in (can include a default filename). If empty, the current load/save directory is used.
*/
	doFileSaveAs(parent:QWidget, startWith:String):Boolean {
	
	};
	/**
 * @description Displays a dialog for loading an image file, and loads the file if the user does not cancel.
 * @returns An empty image if the user cancels or loading fails, otherwise the selected image.
 * @param parent - The widget to parent the dialog to; see DzApp.getDialogParent().
*/
	doImageOpen(parent:QWidget):Image {
	
	};
	/**
 * @description Displays a dialog for saving the given image, and saves the image if the user does not cancel.
 * @returns true if a file was selected and successfully saved, otherwise false.
 * @param image - The image to save.
 * @param parent - The widget to parent the dialog to; see DzApp.getDialogParent().
*/
	doImageSaveAs(image:Image, parent:QWidget):Boolean {
	
	};
	/**
 * @description Clears the scene.
*/
	doNewFile():Boolean {
	
	};
	/**
 * @description Displays a dialog for saving the given video clip, and saves the clip if the user does not cancel.
 * @returns true if a file was selected and successfully saved, otherwise false.
 * @param clip - The video clip to save.
 * @param parent - The widget to parent the dialog to; see DzApp.getDialogParent().
*/
	doVideoClipSaveAs(clip:DzVideoClip, parent:QWidget):Boolean {
	
	};
	/**
 * @description Switches from full screen back to normal mode.
*/
	exitFullScreen():void {
	
	};
	/**
 * @returns The global action manager for the application interface.
*/
	getActionMgr():DzActionMgr {
	
	};
	/**
 * @returns The dock area located at the bottom of the main window.
*/
	getBottomDockArea():DzDockArea {
	
	};
	/**
 * @returns The dock area located in the center of the main window.
 * @since 4.6.4.4
*/
	getCenterDockArea():DzDockArea {
	
	};
	/**
 * @returns The global interactive lesson manager for the application interface.
*/
	getInteractiveLessonMgr():DzInteractiveLessonMgr {
	
	};
	/**
 * @returns The dock area located at the left of the main window.
*/
	getLeftDockArea():DzDockArea {
	
	};
	/**
 * @returns The global pane manager for the application interface.
*/
	getPaneMgr():DzPaneMgr {
	
	};
	/**
 * @returns The dock area located at the right of the main window.
*/
	getRightDockArea():DzDockArea {
	
	};
	/**
 * @returns The sensitivity of the mouse move response in limitless sliders.
 * @since 4.11.0.159
*/
	getSliderMouseDragScalar():Number {
	
	};
	/**
 * @returns The dock area located at the top of the main window.
*/
	getTopDockArea():DzDockArea {
	
	};
	/**
 * @returns The current user interface popup widget (if any), otherwise null.
*/
	getUIPopUp():DzUIPopUpWgt {
	
	};
	/**
 * @returns The global viewport manager for the application interface.
*/
	getViewportMgr():DzViewportMgr {
	
	};
	/**
 * @description Switches from normal to full screen mode
*/
	goFullScreen():void {
	
	};
	/**
 * @returns true if the user interface is locked, otherwise false.
*/
	isUILocked():Boolean {
	
	};
	/**
 * @description Position the popup according to a widget.
 * @param posWgt - The widget to position the popup on.
*/
	positionUIPopUp(posWgt:QWidget):void {
	
	};
	/**
 * @description Clear the message in the status bar.
*/
	removePrompt():void {
	
	};
	/**
 * @description A convenience method for forcing a repaint of the currently active 3D viewport (if any).
*/
	repaintActive3DViewport():void {
	
	};
	/**
 * @description Restores the locked state of the user interface to the value in the application settings.
*/
	restoreUILockState():void {
	
	};
	/**
 * @description Sets the sensitivity of the mouse move response in limitless sliders.
 * @since 4.11.0.159
 * @param val - The scalar value to set.
*/
	setSliderMouseDragScalar(val:Number):void {
	
	};
	/**
 * @description Sets the locked state of the user interface.
 * @param onOff - If true, the user interface is locked.
 * @param storeSetting - If true (default), records the application setting.
*/
	setUILocked(onOff:Boolean, storeSetting:Boolean):void {
	
	};
	/**
 * @description Show the Home page dialog.
*/
	showHomeDlg():void {
	
	};
	/**
 * @returns The popup widget.
 * @param filename - The script that loads a .ui file, or a .ui file directly, to show in the popup widget.
 * @param posWgt - The widget to position the popup on.
*/
	showUIPopUpWgt(filename:String, posWgt:QWidget):DzUIPopUpWgt {
	
	};
	/**
 * @description If a popup already exists with the same filename, it is cleared (toggled). Otherwise it has the same effect as calling DzMainWindow.showUIPopUpWgt()
 * @returns The popup widget (if it was toggled on), otherwise null.
 * @param filename - The script that loads a .ui file, or a .ui file directly, to show in the popup widget.
 * @param posWgt - The widget to position the popup on.
*/
	toggleUIPopUpWgt(filename:String, posWgt:QWidget):DzUIPopUpWgt {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted just before the main window closes.
 * @signature `"aboutToClose()"`
 * @event
*/
	aboutToClose():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the main window is switched to/from being always on top.
 * @signature `"aboutToClose()"`
 * @event
*/
	alwaysOnTopChanged(onOff:Boolean):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the scalar for limitless slider mouse movement changes.
 * @signature `"sliderMouseDragScalarChanged(float)"`
 * @event
*/
	sliderMouseDragScalarChanged(scalar:Number):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted after the startup() function has finished.
 * @signature `"started()"`
 * @event
*/
	started():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the main window is switched to/from having the ui locked.
 * @signature `"uiLockedChanged()"`
 * @event
*/
	uiLockedChanged():void {
	
	};

}
/**
 * @classdesc TODO:
Add detailed description.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/map_dz} */
class DzMap extends DzRefCountedItem {
	/**
 * @description ENUMERATOR: 1 Dimensional map of float values.
*/
	
	static FLOAT_MAP;
	/**
 * @description ENUMERATOR: 2 Dimensional map of float values.
*/
	
	static FLOAT2_MAP;
	/**
 * @description ENUMERATOR: 3 Dimensional map of float values.
*/
	
	static FLOAT3_MAP;
	/**
 * @description ENUMERATOR: 1 Dimensional map of int values.
*/
	
	static INT_MAP;
	/**
 * @description ENUMERATOR: 1 Dimensional map of short values.
*/
	
	static SHORT_MAP;
	/**
 * @description Constructor. Creates a new map of the given type.
 * @param type - The type of map to create.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Append a new value to the end of a float map.
 * @param val - The new value to append to the map.
 * @attention This function is only valid for maps of the FLOAT_MAP type.
*/
	appendFloatValue(val:Number):void {
	
	};
	/**
 * @description Append a new value to the end of a integer map.
 * @param val - The new value to append to the map.
 * @attention This function is only valid for maps of the INT_MAP type.
*/
	appendIntValue(val:Number):void {
	
	};
	/**
 * @description Appends a value to a float 2 map.
 * @param val - The value to append to the map. The z value of the vector is ignored.
 * @attention This function is only valid for maps of the FLOAT2_MAP type.
*/
	appendPnt2Vec(val:DzVec3):void {
	
	};
	/**
 * @description Appends a value to a float 3 map.
 * @param val - The value to append to the map.
 * @attention This function is only valid for maps of the FLOAT3_MAP type.
*/
	appendPnt3Vec(val:DzVec3):void {
	
	};
	/**
 * @description Append a new value to the end of a short value map.
 * @param val - The new value to append to the map.
 * @attention This function is only valid for maps of the SHORT_MAP type.
*/
	appendShortValue(val:Number):void {
	
	};
	/**
 * @description Clears all map values. After this call, the number of values in the map will be zero.
*/
	clearAllData():void {
	
	};
	/**
 * @returns The maximum value of this map - for maps of the FLOAT_MAP type.
 * @since 4.6.4.28
 * @param idx - Not used.
*/
	getFloatMax(idx:Number):Number {
	
	};
	/**
 * @returns The minimum value of this map - for maps of the FLOAT_MAP type.
 * @since 4.6.4.28
 * @param idx - Not used.
*/
	getFloatMin(idx:Number):Number {
	
	};
	/**
 * @returns The value of this map at the specified index (if valid), or the default value if the index is out of range - for maps of the FLOAT_MAP type.
*/
	getFloatValue(idx:Number):Number {
	
	};
	/**
 * @returns The value of this map at the specified index (if valid), or the default value if the index is out of range - for maps of the INT_MAP type.
 * @param idx - The index of the value to retrieve.
*/
	getIntValue(idx:Number):Number {
	
	};
	/**
 * @returns The maximum value of this map - for maps of the INT_MAP type.
 * @since 4.6.4.28
 * @param idx - Not used.
*/
	getIntValueMax(idx:Number):Number {
	
	};
	/**
 * @returns The minimum value of this map - for maps of the INT_MAP type.
 * @since 4.6.4.28
 * @param idx - Not used.
*/
	getIntValueMin(idx:Number):Number {
	
	};
	/**
 * @returns The label for this map.
*/
	getLabel():String {
	
	};
	/**
 * @returns The number of dimensions for this map.
*/
	getNumDimensions():Number {
	
	};
	/**
 * @returns The number of values currently in this map.
*/
	getNumValues():Number {
	
	};
	/**
 * @returns The geometry that this map has been reordered to match, or NULL if none.
*/
	getOrderingGeometry():DzGeometry {
	
	};
	/**
 * @returns The value of this map at the specified index (if valid), or the default value if the index is out of range - for maps of the FLOAT2_MAP type. The value will be contained in the X and Y components of the vector - the Z component will always be zero.
 * @param idx - The index of the value to retrieve.
*/
	getPnt2Vec(idx:Number):DzVec3 {
	
	};
	/**
 * @returns The maximum value of this map - for maps of the FLOAT2_MAP type.
 * @since 4.6.4.28
 * @param idx - Not used.
*/
	getPnt2VecMax(idx:Number):DzVec3 {
	
	};
	/**
 * @returns The minimum value of this map - for maps of the FLOAT2_MAP type.
 * @since 4.6.4.28
 * @param idx - Not used.
*/
	getPnt2VecMin(idx:Number):DzVec3 {
	
	};
	/**
 * @returns The value of this map at the specified index (if valid), or the default value if the index is out of range - for maps of the FLOAT3_MAP type.
 * @param idx - The index of the value to retrieve.
*/
	getPnt3Vec(idx:Number):DzVec3 {
	
	};
	/**
 * @returns The maximum value of this map - for maps of the FLOAT3_MAP type.
 * @since 4.6.4.28
 * @param idx - Not used.
*/
	getPnt3VecMax(idx:Number):DzVec3 {
	
	};
	/**
 * @returns The minimum value of this map - for maps of the FLOAT3_MAP type.
 * @since 4.6.4.28
 * @param idx - Not used.
*/
	getPnt3VecMin(idx:Number):DzVec3 {
	
	};
	/**
 * @returns The value of this map at the specified index (if valid), or the default value if the index is out of range - for maps of the SHORT_MAP type.
 * @param idx - The index of the value to retrieve.
*/
	getShortValue(idx:Number):Number {
	
	};
	/**
 * @returns The maximum value of this map - for maps of the SHORT_MAP type.
 * @since 4.6.4.28
 * @param idx - Not used.
*/
	getShortValueMax(idx:Number):Number {
	
	};
	/**
 * @returns The minimum value of this map - for maps of the SHORT_MAP type.
 * @since 4.6.4.28
 * @param idx - Not used.
*/
	getShortValueMin(idx:Number):Number {
	
	};
	/**
 * @returns The type of this map.
*/
	getType():MapType {
	
	};
	/**
 * @returns true if the values of the map are in unit space, otherwise false.
 * @since 4.6.4.28
*/
	inUnitSpace():Boolean {
	
	};
	/**
 * @description Invalidates the calculated minimum and maximum values for this map.
 * @since 4.6.4.28
*/
	invalidateMinMax():void {
	
	};
	/**
 * @returns A copy of this map.
 * @since 4.11.0.300
 * @attention Currently only correctly copies DzMap, DzVertexMap, and DzUVSet. Other subclasses will only copy data included in these types and return an instance of the superclass
*/
	makeCopy():DzMap {
	
	};
	/**
 * @description Pre-allocates size of the data array.
 * @param num - The new number of values to pre-allocate for this map.
*/
	preSize(num:Number):void {
	
	};
	/**
 * @description Sets the default value for a float map. This is the value returned if the map is empty or a map data value is requested that is outside the index range of this map.
 * @param x - The new default value for the map.
 * @attention This function is only valid for maps of the FLOAT_MAP type.
*/
	setDefaultFloatValue(defaultVal:Number):void {
	
	};
	/**
 * @description Sets the default value for an integer map. This is the value returned if the map is empty or a map data value is requested that is outside the index range of this map.
 * @param x - The new default value for the map.
 * @attention This function is only valid for maps of the INT_MAP type.
*/
	setDefaultIntValue(defaultVal:Number):void {
	
	};
	/**
 * @description Sets the default value of a float 2 map.
 * @param defaultVal - The default value of this map. The z value of the vector is ignored.
*/
	setDefaultPnt2Vec(defaultVal:DzVec3):void {
	
	};
	/**
 * @description Sets the default value of a float 3 map.
 * @param defaultVal - The default value of this map.
*/
	setDefaultPnt3Vec(defaultVal:DzVec3):void {
	
	};
	/**
 * @description Sets the default value for a short value map. This is the value returned if the map is empty or a map data value is requested that is outside the index range of this map.
 * @param x - The new default value for the map.
 * @attention This function is only valid for maps of the SHORT_MAP type.
*/
	setDefaultShortValue(defaultVal:Number):void {
	
	};
	/**
 * @description Set one of the currently existing data values on a float map.
 * @param idx - The index of the value to set.
 * @param val - The new value.
 * @attention This function is only valid for maps of the FLOAT_MAP type.
*/
	setFloatValue(idx:Number, val:Number):void {
	
	};
	/**
 * @description Set one of the currently existing data values on a integer map.
 * @param idx - The index of the entry to set.
 * @param val - The value of this map at the specified index (if valid).
 * @attention This function is only valid for maps of the INT_MAP type.
*/
	setIntValue(idx:Number, val:Number):void {
	
	};
	/**
 * @description Sets the user-readable label for the map.
 * @param label - The new label for the map.
*/
	setLabel(label:String):void {
	
	};
	/**
 * @description Changes the type of this map.
 * @param mapType - The new type for the map.
 * @param keepData - If true, the existing data will be converted to the new type as much as possible. If false, the existing data is lost, and the number of values in the map will be zero.
*/
	setMapType(mapType:MapType, keepData:Boolean):void {
	
	};
	/**
 * @description Sets the size of the data array. Does not initialize newly allocated values.
 * @param num - The new number of values contained in this map.
*/
	setNumValues(num:Number):void {
	
	};
	/**
 * @description Set one of the currently existing data values on a float 2 map.
 * @param idx - The index of the entry to set.
 * @param val - The value of this map at the specified index (if valid). The z value of the vector is ignored.
 * @attention This function is only valid for maps of the FLOAT2_MAP type.
*/
	setPnt2Vec(idx:Number, val:DzVec3):void {
	
	};
	/**
 * @description Set one of the currently existing data values on a float 3 map.
 * @param idx - The index of the entry to set
 * @param val - The value of this map at the specified index (if valid).
 * @attention This function is only valid for maps of the FLOAT3_MAP type.
*/
	setPnt3Vec(idx:Number, val:DzVec3):void {
	
	};
	/**
 * @description Set one of the currently existing data values on a short value map.
 * @param idx - The index of the entry to set.
 * @param val - The value of this map at the specified index (if valid).
 * @attention This function is only valid for maps of the SHORT_MAP type.
*/
	setShortValue(idx:Number, val:Number):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the map's label changes.
 * @signature `"labelChanged()"`
 * @event
*/
	labelChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted whenever values are added, removed or modified on the map.
 * @signature `"mapModified()"`
 * @event
*/
	mapModified():void {
	
	};

}
/**
 * @classdesc A "material" represents a collection of properties and settings that, when applied through the use of a "shader" (a small program/subroutine that describes how the settings are used), describe how the geometry associated with a 3D object interacts with light and ultimately what the surface of that 3D object looks like when rendered.
See Also:
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/material_dz} */
class DzMaterial extends DzRefCountedItem, DzElement {
	/**
 * @description Hold the author of the file for this material. (Read Only)
	*/
	assetAuthor:DzAuthor;
	/**
 * @description Hold the revision version of the asset file for this material. (Read Only)
	*/
	assetFileRevision:DzVersion;
	/**
 * @description Hold the asset id for this material.
	*/
	assetId:String;
	/**
 * @description Hold the modified date of the asset file for this material. (Read Only)
	*/
	assetModifiedDate:Date;
	/**
 * @description Holds whether or not the asset for this modifier needs to be saved. (Read Only)
	*/
	assetNeedSave:Boolean;
	/**
 * @description Hold the URI of the asset source for this material; only valid when the asset is in an embedded state - i.e. modified. (Read Only)
	*/
	assetSource:DzUri;
	/**
 * @description Holds the asset URI for this material. (Read Only)
	*/
	assetUri:DzUri;
	/**
 * @description The render priority for the material. Render priority controls the order in which materials are handled during a render. The higher the priority, the earlier the material will be handled. If several materials have the same render priority, those materials will be handled in an arbitrary order.
	*/
	renderPriority:DzRenderMgr;
	/**
 * @returns The material with the given index.
*/
	static getMaterial(which:Number):void {
	
	};
	/**
 * @returns The number of materials that have been created
*/
	getNumMaterials():Number {
	
	};
	/**
 * @returns The duplicate material if a material could be duplicated, otherwise a DzDefaultMaterial.
 * @since 4.6.2.104
 * @param context - The context of the material to duplicate.
*/
	duplicateOrDefaultMaterial(context:DzElementDuplicateContext):void {
	
	};
	/**
 * @description Sets whether or not this material should propagate its render priority up to all the nodes that use it. Setting this to true will also ensure that the render priority is set for nodes that the material is assigned to at a later time.
 * @param propagateOnOff - Whether or not the new priority value should be applied to all nodes that use this material (this will include the top-level skeleton node when dealing with figures).
*/
	enablePropagateRenderPriorityToNodes(propagate:Boolean):void {
	
	};
	/**
 * @returns The UV set that is used by this material for the given shape. May be NULL if the shape does not have any UV Sets.
 * @since 4.9.3.69
*/
	getActiveUVSet(shape:shape_dz):DzUVSet {
	
	};
	/**
 * @returns The UV set that is used by this material for the given geometry. May be NULL if the geometry does not have any UV Sets.
 * @since 4.9.3.69
*/
	getActiveUVSet(geom:geometry_dz):DzUVSet {
	
	};
	/**
 * @description Collects all the images that are being used by this material at the current time and inserts them into the given list if they are not already there.
 * @returns A list of DzTextures currently used by this material.
*/
	getAllMaps():Array {
	
	};
	/**
 * @returns The 'baked' map for the material. NULL if the material is not using a baked map.
*/
	getBakedMap():DzTexture {
	
	};
	/**
 * @returns The opactiy value for this material.
*/
	getBaseOpacity():Number {
	
	};
	/**
 * @returns The bounding box for this material.
*/
	getBoundingBox():DzBox3 {
	
	};
	/**
 * @returns The color ('texture') map for this material.
*/
	getColorMap():DzTexture {
	
	};
	/**
 * @returns The diffuse color for this material.
*/
	getDiffuseColor():Color {
	
	};
	/**
 * @returns The material index of this material.
*/
	getIndex():Number {
	
	};
	/**
 * @returns The current line end width.
 * @since 4.11.0.76
*/
	getLineEndWidth():void {
	
	};
	/**
 * @returns The property that controls the desired end width of a line.
 * @since 4.11.0.76
*/
	getLineEndWidthControl():DzFloatProperty {
	
	};
	/**
 * @returns The current line preview color.
 * @since 4.11.0.76
*/
	getLinePreviewColor():Color {
	
	};
	/**
 * @returns The property that controls the color or lines for preview.
 * @since 4.11.0.76
*/
	getLinePreviewColorControl():DzColorProperty {
	
	};
	/**
 * @returns The current line start width.
 * @since 4.11.0.76
*/
	getLineStartWidth():void {
	
	};
	/**
 * @returns The property that controls the desired start width of a line.
 * @since 4.11.0.76
*/
	getLineStartWidthControl():DzFloatProperty {
	
	};
	/**
 * @returns The current line UV width.
 * @since 4.11.0.109
*/
	getLineUVWidth():void {
	
	};
	/**
 * @returns The property that controls the desired UV width of a line.
 * @since 4.11.0.109
*/
	getLineUVWidthControl():DzFloatProperty {
	
	};
	/**
 * @returns The name for the type of shader (not the name for the material instance).
*/
	getMaterialName():String {
	
	};
	/**
 * @returns The number of OpenGL texture maps necessary for rendering this material in OpenGL (e.g. one for a diffuse color map, one for an opacity map, etc.).
*/
	getNumGLMaps():Number {
	
	};
	/**
 * @returns The opacity map for this material.
*/
	getOpacityMap():DzTexture {
	
	};
	/**
 * @returns The property that controls the render priority propagation for this material.
*/
	getPropagatePriorityControl():DzBoolProperty {
	
	};
	/**
 * @returns The property that controls the render priority for this material.
*/
	getRenderPriorityControl():DzEnumProperty {
	
	};
	/**
 * @returns A list of the shapes this material is on.
*/
	getShapeList():Array {
	
	};
	/**
 * @returns The property that controls the smoothing angle for this material.
*/
	getSmoothAngleControl():DzFloatProperty {
	
	};
	/**
 * @returns The property that controls whether smoothing is enabled for this material.
*/
	getSmoothControl():DzBoolProperty {
	
	};
	/**
 * @returns The current smoothing angle for the material.
*/
	getSmoothingAngle():Number {
	
	};
	/**
 * @returns A list of (trimmed) tags on this material.
 * @since 4.7.1.29
*/
	getTags():Array {
	
	};
	/**
 * @returns The property that holds the tags for this material.
 * @since 4.7.1.29
*/
	getTagsControl():DzStringProperty {
	
	};
	/**
 * @returns The property that controls the active UV set for this material.
*/
	getUVSetControl():DzEnumProperty {
	
	};
	/**
 * @returns true if the material supports mapping of the Diffuse channel, otherwise false.
*/
	isColorMappable():Boolean {
	
	};
	/**
 * @returns true if the material is currently drawn with a highlight, otherwise false.
*/
	isHighlighted():Boolean {
	
	};
	/**
 * @returns true if the material supports mapping of the Opacity channel, otherwise false.
*/
	isOpacityMappable():Boolean {
	
	};
	/**
 * @returns true if this material is opaque, otherwise false.
*/
	isOpaque():Boolean {
	
	};
	/**
 * @returns Whether or not this material should propagate its render priority up to all the nodes that use it.
*/
	isPropagateRenderPriorityToNodesEnabled():Boolean {
	
	};
	/**
 * @returns true if the material is selected, otherwise false.
*/
	isSelected():Boolean {
	
	};
	/**
 * @returns true if smoothing is enabled for the material, otherwise false.
*/
	isSmoothingOn():Boolean {
	
	};
	/**
 * @description Marks the asset as being modified. Makes the current author the author of the file.
 * @returns true if the asset was successfully marked as modified, otherwise false.
*/
	modifyAsset():Boolean {
	
	};
	/**
 * @description Marks the asset as being modified. Makes the current author the author of the file. Sets the file URI for the asset to the given URI.
 * @returns true if the asset was successfully marked as modified, otherwise false.
 * @param newUri - The new file URI to set for the asset.
*/
	modifyAsset(newUri:DzUri):Boolean {
	
	};
	/**
 * @description TODO:
Add description.
*/
	needsPtex():Boolean {
	
	};
	/**
 * @returns true if the rendering geometry needs the additional dPds and dPdsM parameters for shaders, otherwise false.
*/
	needsTangentSpaceParams():Boolean {
	
	};
	/**
 * @description Set the selection state for this material.
 * @param onOff - If true, the material will be selected. If false, the material will be deselected.
*/
	select(onOff:Boolean):void {
	
	};
	/**
 * @description Set the 'baked' shader map for this material. This overrides any current material settings and just draws the map. This is useful for representing the results of off-line shaders that can not be represented in OpenGL - the results of the shader are 'baked' onto a texture map, and then applied to the material with this function.
 * @param img - The image that will be applied to the material instead of the current material settings. If NULL, the current baked map is cleared and the material is returned to using its current settings.
*/
	setBakedMap(img:DzTexture):void {
	
	};
	/**
 * @description Set the opacity value for this material.
*/
	setBaseOpacity(val:Number):void {
	
	};
	/**
 * @description Set the color ('texture') map for this material.
*/
	setColorMap(img:DzTexture):void {
	
	};
	/**
 * @description Set the diffuse color for this material.
*/
	setDiffuseColor(color:Color):void {
	
	};
	/**
 * @since 4.11.0.76
 * @param width - The desired width for the line end.
*/
	setLineEndWidth(width:Number):void {
	
	};
	/**
 * @description Sets whether or not smoothing is enabled for the material.
 * @since 4.11.0.76
 * @param color - The color to use for preview lines.
*/
	setLinePreviewColor(color:Color):void {
	
	};
	/**
 * @since 4.11.0.76
 * @param width - The desired width for the line start.
*/
	setLineStartWidth(width:Number):void {
	
	};
	/**
 * @since 4.11.0.109
 * @param width - The desired width for the line UV.
*/
	setLineUVWidth(width:Number):void {
	
	};
	/**
 * @description Set the opactiy map for this material.
*/
	setOpacityMap(img:DzTexture):void {
	
	};
	/**
 * @description Sets the smoothing angle for the material. This only has effect on the material if smoothing is enabled.
 * @param angle - The smoothing angle for the material. Any edges on the mesh where angle of the normals of the adjacent facets is less than this value will be smoothed. Higher values mean more smoothing, lower values mean less smoothing.
*/
	setSmoothingAngle(angle:Number):void {
	
	};
	/**
 * @description Sets whether or not smoothing is enabled for the material.
 * @param onOff - If true, smoothing is applied according to the smoothing angle. If false, no smoothing is applied to the material.
*/
	setSmoothingOn(onOff:Boolean):void {
	
	};
	/**
 * @returns true if these materials are using the same shaders, otherwise false.
*/
	shadersMatch(otherMat:DzMaterial):Boolean {
	
	};
	/**
 * @returns true if this material should always embed into a DSON scene, otherwise false.
*/
	shouldAlwaysEmbed():Boolean {
	
	};
	/**
 * @description Causes this material to be drawn with a highlight based on the styles current highlight color. This is used by material selection tools, etc, to give visual feedback to the user about a material in the viewport.
*/
	startDrawHighlight():void {
	
	};
	/**
 * @description Causes this material to stop being drawn with a highlight.
*/
	stopDrawHighlight():void {
	
	};
	/**
 * @description Deprecated
*/
	getNumUVMaps():Number {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the material has been modified.
 * @signature `"assetModified()"`
 * @event
*/
	assetModified():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted after the material has been saved.
 * @signature `"assetWasSaved()"`
 * @event
*/
	assetWasSaved():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Transmitted when the baked map of this material changes.
 * @signature `"bakedMapChanged()"`
 * @event
*/
	bakedMapChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the UV line width changes
 * @signature `"lineUVWidthChanged()"`
 * @event
*/
	lineUVWidthChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the start or end line width changes
 * @signature `"lineWidthChanged()"`
 * @event
*/
	lineWidthChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Transmitted when the selection state of this material changes.
 * @signature `"selectionStateChanged(DzMaterial*,bool)"`
 * @event
*/
	selectionStateChanged(mat:DzMaterial, onOff:Boolean):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Transmitted when one of the values of this material changes.
 * @signature `"settingsChanged()"`
 * @event
*/
	settingsChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Transmitted when the smoothing settings of this material change.
 * @signature `"smoothingChanged()"`
 * @event
*/
	smoothingChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the tags on this material change.
 * @signature `"tagsChanged()"`
 * @event
*/
	tagsChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Transmitted when the uv settings of this material change.
 * @signature `"uvsChanged()"`
 * @event
*/
	uvsChanged():void {
	
	};

}
/**
 * @classdesc An asset save filter for saving a Material(s) Preset in the DSON format.
See Also:
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/materialassetfilter_dz} */
class DzMaterialAssetFilter extends DzAssetFileOutFilter {
	/**
 * @description TODO:
Add description.
 * @constructor
*/
	constructor() {
	
	};

}
/**
 * @classdesc 
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/matrix3_dz} */
class DzMatrix3 extends Object {
	/**
 * @description Whether or not this matrix is identity
	*/
	isIdentity:Boolean;
	/**
 * @description The value of this matrix at [1, 1]
	*/
	m11:Number;
	/**
 * @description The value of this matrix at [1, 2]
	*/
	m12:Number;
	/**
 * @description The value of this matrix at [1, 3]
	*/
	m13:Number;
	/**
 * @description The value of this matrix at [1, 4]
	*/
	m14:Number;
	/**
 * @description The value of this matrix at [2, 1]
	*/
	m21:Number;
	/**
 * @description The value of this matrix at [2, 2]
	*/
	m22:Number;
	/**
 * @description The value of this matrix at [2, 3]
	*/
	m23:Number;
	/**
 * @description The value of this matrix at [2, 4]
	*/
	m24:Number;
	/**
 * @description The value of this matrix at [3, 1]
	*/
	m31:Number;
	/**
 * @description The value of this matrix at [3, 2]
	*/
	m32:Number;
	/**
 * @description The value of this matrix at [3, 3]
	*/
	m33:Number;
	/**
 * @description The value of this matrix at [3, 4]
	*/
	m34:Number;
	/**
 * @description Default Constructor.
 * @param initIdentity - If true, this matrix will be set to the identity matrix, otherwise, this matrix values will be indeterminate.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Creates a 4×3 matrix by parsing a string.
 * @param mtx - A string representation of the 4×3 matrix in the form "[ m11, m21, m31, m12, m22, m32, m13, m23, m33, m14, m24, m34 ]"
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Constructs a 4×3 matrix from 12 elements in "Column Major" order.
 * @param m11 - The value of this matrix at [1, 1]
 * @param m21 - The value of this matrix at [2, 1]
 * @param m31 - The value of this matrix at [3, 1]
 * @param m12 - The value of this matrix at [1, 2]
 * @param m22 - The value of this matrix at [2, 2]
 * @param m32 - The value of this matrix at [3, 2]
 * @param m13 - The value of this matrix at [1, 3]
 * @param m23 - The value of this matrix at [2, 3]
 * @param m33 - The value of this matrix at [3, 3]
 * @param m14 - The value of this matrix at [1, 4]
 * @param m24 - The value of this matrix at [2, 4]
 * @param m34 - The value of this matrix at [3, 4]
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Constructor from three axes of the rotation coord system. These are assumed to be (but do not have to be if a sheared or warped coord system is desired) to be orthogonal unit vectors.
 * @since 4.6.4.98
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Constructs a 4×3 matrix from a quaternion.
 * @since 4.6.4.98
 * @param rot - The rotation to initialize this matrix to.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Copy Constructor.
 * @param mat - The matrix to copy.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @returns The determinant of the upper 3×3 part of this matrix.
 * @since 4.9.2.18
*/
	det3():Number {
	
	};
	/**
 * @returns The inverse of this matrix.
*/
	inverse():DzMatrix3 {
	
	};
	/**
 * @description Sets this matrix to be identity.
*/
	makeIdentity():void {
	
	};
	/**
 * @returns This matrix as a 4×4 matrix.
 * @since 4.9.2.18
*/
	matrix4():DzMatrix4 {
	
	};
	/**
 * @description Calculates the multiplication of this matrix by the given matrix.
 * @returns The result of the multiplication.
 * @param mat - The matrix to multiply by.
*/
	multiply(mat:DzMatrix3):DzMatrix3 {
	
	};
	/**
 * @description Multiplies this matrix by given column vector, giving column vector result.
 * @returns The result of multiplying the given vector through this matrix.
 * @param vec - The vector to multiplying this matrix by.
*/
	multMatrixVec(vec:DzVec3):DzVec3 {
	
	};
	/**
 * @description Transforms the given vector through this matrix.
 * @since 4.9.2.18
 * @param vec - The vector to transform through this matrix.
*/
	multVec(vec:DzVec3):DzVec3 {
	
	};
	/**
 * @description Sets the rotation part of this matrix to zero.
*/
	noRot():void {
	
	};
	/**
 * @description Sets the scale part of this matrix to unity.
*/
	noScale():void {
	
	};
	/**
 * @description Sets the translation part of this matrix to zero.
*/
	noTrans():void {
	
	};
	/**
 * @description Test for orthogonal 3×3 sub-matrix (orthonormal rows).
*/
	orthogonal():Boolean {
	
	};
	/**
 * @description Orthogonalize this matrix.
*/
	orthogonalize():void {
	
	};
	/**
 * @description Accumulate rotation by pre-multiplying.
 * @param rot - The quaternion at which to rotate.
*/
	preRotate(rot:DzQuat):void {
	
	};
	/**
 * @description Accumulate rotation around the X axis by pre-multiplying.
 * @param radians - The radians at which to rotate.
*/
	preRotateX(radians:Number):void {
	
	};
	/**
 * @description Accumulate rotation around the Y axis by pre-multiplying.
 * @param radians - The radians at which to rotate.
*/
	preRotateY(radians:Number):void {
	
	};
	/**
 * @description Accumulate rotation around the Z axis by pre-multiplying.
 * @param radians - The radians at which to rotate.
*/
	preRotateZ(radians:Number):void {
	
	};
	/**
 * @description Accumulate a translation by pre-multiplying.
 * @param vec - The point at which to translate.
*/
	preTranslate(vec:DzVec3):void {
	
	};
	/**
 * @description Accumulate rotation (by post-multiplying).
 * @param rot - The quaternion at which to rotate
*/
	rotate(rot:DzQuat):void {
	
	};
	/**
 * @description Accumulate rotation around the X axis (by post-multiplying).
 * @param radians - The radians at which to rotate.
*/
	rotateX(radians:Number):void {
	
	};
	/**
 * @description Accumulate rotation around the Y axis (by post-multiplying).
 * @param radians - The radians at which to rotate.
*/
	rotateY(radians:Number):void {
	
	};
	/**
 * @description Accumulate rotation around the Z axis (by post-multiplying).
 * @param radians - The radians at which to rotate.
*/
	rotateZ(radians:Number):void {
	
	};
	/**
 * @returns The i'th row of this matrix.
 * @since 4.9.2.18
*/
	row(i:Number):DzVec3 {
	
	};
	/**
 * @description Accumulates a scale along an arbitrary axis (by post-multiplying).
 * @since 4.9.2.18
 * @param scale - The scale to apply.
 * @param dir - The direction to scale.
 * @param affectTrans - Whether or not to affect the transform rows.
*/
	scale(scale:Number, direction:DzVec3, affectTrans:Boolean):void {
	
	};
	/**
 * @description TODO:
Add description.
*/
	scale(vec:DzVec3, affectTrans:Boolean):void {
	
	};
	/**
 * @description TODO:
Add description.
*/
	scale(scale:Number, affectTrans:Boolean):void {
	
	};
	/**
 * @description Sets matrix to translate by given vector, leaving rotation as is.
 * @param vec - The point at which to translate.
*/
	setTrans(vec:DzVec3):void {
	
	};
	/**
 * @description Shears this matrix along the x and y axis (by post-multiplying).
 * @since 4.9.2.18
 * @param xShear - The value to shear along the x axis.
 * @param yShear - The value to shear along the y axis.
*/
	shearXY(xShear:Number, yShear:Number):void {
	
	};
	/**
 * @description Shears this matrix along the x and z axis (by post-multiplying).
 * @since 4.9.2.18
 * @param xShear - The value to shear along the x axis.
 * @param zShear - The value to shear along the z axis.
*/
	shearXZ(xShear:Number, zShear:Number):void {
	
	};
	/**
 * @description Shears this matrix along the y and z axis (by post-multiplying).
 * @since 4.9.2.18
 * @param yShear - The value to shear along the y axis.
 * @param zShear - The value to shear along the z axis.
*/
	shearYZ(yShear:Number, zShear:Number):void {
	
	};
	/**
 * @returns A string representation of this matrix in the form "[ m11, m21, m31, m12, m22, m32, m13, m23, m33, m14, m24, m34 ]".
*/
	toString():String {
	
	};
	/**
 * @returns The trace of this matrix.
 * @since 4.9.2.18
*/
	trace():Number {
	
	};
	/**
 * @description Accumulate a translation (by post-multiplying).
 * @param vec - The point at which to translate.
*/
	translate(vec:DzVec3):void {
	
	};

}
/**
 * @classdesc 
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/matrix4_dz} */
class DzMatrix4 extends Object {
	/**
 * @description Whether or not this matrix is identity
	*/
	isIdentity:Boolean;
	/**
 * @description The value of this matrix at [1, 1]
	*/
	m11:Number;
	/**
 * @description The value of this matrix at [1, 2]
	*/
	m12:Number;
	/**
 * @description The value of this matrix at [1, 3]
	*/
	m13:Number;
	/**
 * @description The value of this matrix at [1, 4]
	*/
	m14:Number;
	/**
 * @description The value of this matrix at [2, 1]
	*/
	m21:Number;
	/**
 * @description The value of this matrix at [2, 2]
	*/
	m22:Number;
	/**
 * @description The value of this matrix at [2, 3]
	*/
	m23:Number;
	/**
 * @description The value of this matrix at [2, 4]
	*/
	m24:Number;
	/**
 * @description The value of this matrix at [3, 1]
	*/
	m31:Number;
	/**
 * @description The value of this matrix at [3, 2]
	*/
	m32:Number;
	/**
 * @description The value of this matrix at [3, 3]
	*/
	m33:Number;
	/**
 * @description The value of this matrix at [3, 4]
	*/
	m34:Number;
	/**
 * @description The value of this matrix at [4, 1]
	*/
	m41:Number;
	/**
 * @description The value of this matrix at [4, 2]
	*/
	m42:Number;
	/**
 * @description The value of this matrix at [4, 3]
	*/
	m43:Number;
	/**
 * @description The value of this matrix at [4, 4]
	*/
	m44:Number;
	/**
 * @description Default Constructor.
 * @param initIdentity - If true, this matrix will be set to the identity matrix, otherwise, this matrix values will be indeterminate.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Creates a 4×4 matrix by parsing a string.
 * @param mtx - A string representation of the 4×4 matrix in the form "[ m11, m21, m31, m41, m12, m22, m32, m42, m13, m23, m33, m43, m14, m24, m34, m44 ]"
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Constructs a 4×4 matrix from 16 elements in "Column Major" order.
 * @param m11 - The value of this matrix at [1, 1]
 * @param m21 - The value of this matrix at [2, 1]
 * @param m31 - The value of this matrix at [3, 1]
 * @param m41 - The value of this matrix at [4, 1]
 * @param m12 - The value of this matrix at [1, 2]
 * @param m22 - The value of this matrix at [2, 2]
 * @param m32 - The value of this matrix at [3, 2]
 * @param m42 - The value of this matrix at [4, 2]
 * @param m13 - The value of this matrix at [1, 3]
 * @param m23 - The value of this matrix at [2, 3]
 * @param m33 - The value of this matrix at [3, 3]
 * @param m43 - The value of this matrix at [4, 3]
 * @param m14 - The value of this matrix at [1, 4]
 * @param m24 - The value of this matrix at [2, 4]
 * @param m34 - The value of this matrix at [3, 4]
 * @param m44 - The value of this matrix at [4, 4]
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Constructor from three axes of the rotation coord system. These are assumed to be (but do not have to be if a sheared or warped coord system is desired) to be orthogonal unit vectors.
 * @since 4.6.4.98
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Constructs a 4×4 matrix from a quaternion.
 * @since 4.6.4.98
 * @param rot - The rotation to initialize this matrix to.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Copy Constructor.
 * @param mat - The matrix to copy.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @returns The inverse of this matrix.
*/
	inverse():DzMatrix4 {
	
	};
	/**
 * @description Test and choose the best inverse for this matrix.
 * @since 4.9.2.18
*/
	invert():void {
	
	};
	/**
 * @description Sets this matrix to be identity.
*/
	makeIdentity():void {
	
	};
	/**
 * @returns The value of this matrix as a DzMatrix3.
 * @since 4.9.2.18
*/
	matrix3():DzMatrix3 {
	
	};
	/**
 * @description Calculates the multiplication of this matrix by the given matrix.
 * @returns The result of the multiplication.
 * @since 4.14.1.36
 * @param mat - The matrix to multiply by.
*/
	multiply(mat:DzMatrix4):DzMatrix4 {
	
	};
	/**
 * @description Multiplies matrix by given column vector, giving column vector result.
 * @returns The result of multiplying the given vector through this matrix.
 * @param vec - The vector to multiply this matrix by.
*/
	multMatrixVec(vec:DzVec3):DzVec3 {
	
	};
	/**
 * @description Multiplies given row vector by matrix, giving row vector result.
 * @returns The result of multiplying the given vector through this matrix.
 * @param vec - The vector to multiply this matrix by.
*/
	multVecMatrix(vec:DzVec3):DzVec3 {
	
	};
	/**
 * @description Test for orthogonal 3×3 sub-matrix (orthonormal rows).
 * @since 4.6.4.98
*/
	orthogonal():Boolean {
	
	};
	/**
 * @description Accumulates a uniform scale by pre-multiplying.
 * @param scale - The scale to apply.
*/
	preScale(scale:Number):void {
	
	};
	/**
 * @description Accumulates a general scale by pre-multiplying.
 * @param scale - The scale to apply.
*/
	preScale(vec:DzVec3):void {
	
	};
	/**
 * @description Accumulates a scale along an arbitrary axis by pre-multiplying.
 * @since 4.9.2.18
 * @param scale - The scale to apply.
 * @param direction - The direction to scale.
*/
	preScale(scale:Number, direction:DzVec3):void {
	
	};
	/**
 * @description Shears the matrix along the x and y axis (by pre-multiplying).
 * @since 4.9.2.18
 * @param xShear - The value to shear along the x axis.
 * @param yShear - The value to shear along the y axis.
*/
	preShearXY(xShear:Number, yShear:Number):void {
	
	};
	/**
 * @description Shears the matrix along the x and z axis (by pre-multiplying).
 * @since 4.9.2.18
 * @param xShear - The value to shear along the x axis.
 * @param zShear - The value to shear along the z axis.
*/
	preShearXZ(xShear:Number, zShear:Number):void {
	
	};
	/**
 * @description Shears the matrix along the y and z axis (by pre-multiplying).
 * @since 4.9.2.18
 * @param yShear - The value to shear along the y axis.
 * @param zShear - The value to shear along the z axis.
*/
	preShearYZ(yShear:Number, zShear:Number):void {
	
	};
	/**
 * @description Accumulate a translation by pre-multiplying.
 * @param vec - The point at which to translate.
*/
	preTranslate(vec:DzVec3):void {
	
	};
	/**
 * @description Accumulate rotation (by post-multiplying).
 * @param rot - The quaternion at which to rotate.
*/
	rotate(rot:DzQuat):void {
	
	};
	/**
 * @description Accumulate rotation around the X axis (by post-multiplying).
 * @param radians - The radians at which to rotate.
*/
	rotateX(radians:Number):void {
	
	};
	/**
 * @description Accumulate rotation around the Y axis (by post-multiplying).
 * @param radians - The radians at which to rotate.
*/
	rotateY(radians:Number):void {
	
	};
	/**
 * @description Accumulate rotation around the Z axis (by post-multiplying).
 * @param radians - The radians at which to rotate.
*/
	rotateZ(radians:Number):void {
	
	};
	/**
 * @returns The first three elements of the i'th row of this matrix.
 * @since 4.9.2.18
*/
	row(i:Number):DzVec3 {
	
	};
	/**
 * @description Accumulates a scale along an arbitrary axis (by post-multiplying).
 * @since 4.9.2.18
 * @param scale - The scale to apply.
 * @param direction - The direction to scale.
*/
	scale(scale:Number, direction:DzVec3):void {
	
	};
	/**
 * @description Accumulates a general scale (by post-multiplying).
 * @param vec - The scale to apply.
*/
	scale(vec:DzVec3):void {
	
	};
	/**
 * @description Accumulates a uniform scale (by post-multiplying).
 * @param scale - The scale to apply.
*/
	scale(scale:Number):void {
	
	};
	/**
 * @description Sets the first three elements of the i'th row of this matrix.
 * @param i - The row to set.
 * @param vec - The values for the first three elements.
*/
	setRow(i:Number, vec:DzVec3):void {
	
	};
	/**
 * @description Sets matrix to translate by given vector, leaving rotation as is.
 * @param vec - The point at which to translate.
*/
	setTrans(vec:DzVec3):void {
	
	};
	/**
 * @description Shears this matrix along the x and y axis (by post-multiplying).
 * @since 4.9.2.18
 * @param xShear - The value to shear along the x axis.
 * @param yShear - The value to shear along the y axis.
*/
	shearXY(xShear:Number, yShear:Number):void {
	
	};
	/**
 * @description Shears this matrix along the x and z axis (by post-multiplying).
 * @since 4.9.2.18
 * @param xShear - The value to shear along the x axis.
 * @param zShear - The value to shear along the z axis.
*/
	shearXZ(xShear:Number, zShear:Number):void {
	
	};
	/**
 * @description Shears this matrix along the y and z axis (by post-multiplying).
 * @since 4.9.2.18
 * @param yShear - The value to shear along the y axis.
 * @param zShear - The value to shear along the z axis.
*/
	shearYZ(yShear:Number, zShear:Number):void {
	
	};
	/**
 * @returns A string representation of this matrix in the form "[ m11, m21, m31, m41, m12, m22, m32, m42, m13, m23, m33, m43, m14, m24, m34, m44 ]".
*/
	toString():String {
	
	};
	/**
 * @returns The trace of this matrix.
 * @since 4.9.2.18
*/
	trace():Number {
	
	};
	/**
 * @description Accumulate a translation (by post-multiplying).
 * @param vec - The point at which to translate.
*/
	translate(vec:DzVec3):void {
	
	};
	/**
 * @returns The transpose of this matrix.
 * @since 4.9.2.18
*/
	transpose():DzMatrix4 {
	
	};

}
/**
 * @classdesc TODO:
Add detailed description.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/menu_dz} */
class DzMenu extends QObject {
	/**
 * @description Adds the DzAction to the given menu.
 * @returns The item id of the action in the menu.
 * @param action - The action to add to the menu.
 * @param menuId - The menu id of the menu to add the action to. If zero, the action will be added to the root menu.
*/
	addAction(action:DzAction, menuId:Number):Number {
	
	};
	/**
 * @description Convenience method to find an action by class name and add it to the menu.
 * @returns The item id of the action in the menu.
 * @param className - The class name of the action to add to the menu.
 * @param menuId - The menu id of the menu to add the action to. If zero, the action will be added to the root menu.
*/
	addAction(className:String, menuId:Number):Number {
	
	};
	/**
 * @description Adds an entry to the given menu.
 * @returns The item id of the new menu item.
 * @param label - The label that will appear in the menu for the user to activate the item.
 * @param menuId - The menu id of the menu to add the item to. If zero, the item will be added to the root menu.
*/
	addItem(label:String, menuId:Number):Number {
	
	};
	/**
 * @description Adds an entry to the given menu and connects it to a slot.
 * @returns The item id of the new menu item.
 * @param label - The label that will appear in the menu for the user to activate the item.
 * @param receiver - The QObject to connect the activate signal to.
 * @param member - The name of the slot/signal that will be connected to the activate signal.
 * @param menuId - The menu id of the menu to add the item to. If zero, the item will be added to the root menu.
*/
	addItem(label:String, receiver:QObject, member:String, menuId:Number):Number {
	
	};
	/**
 * @description Adds a separator bar to the given menu.
 * @param menuId - The menu id of the menu to add the separator to. If zero, the separator will be added to the root menu.
*/
	addSeparator(menuId:Number):void {
	
	};
	/**
 * @description Creates a submenu with the given label, and adds it to the given menu.
 * @returns The menu id of the new submenu.
 * @param label - The text that will appear in the parent menu for the user to activate the submenu.
 * @param menuId - The menu id of the parent menu to add the submenu to. If zero, the submenu will be added to the root menu.
*/
	addSubMenu(label:String, menuId:Number):Number {
	
	};
	/**
 * @description Shows the menu to the user.
 * @returns The item id of the item selected by the user, or -1 if the menu was closed without the user selecting an item.
 * @param pos - The global position that the menu will be displayed at.
*/
	exec(pos:Point):Number {
	
	};
	/**
 * @description Finds a submenu with the given label, and returns its menu id.
 * @returns The menu id of the new submenu, -1 if submenu is not found.
 * @param label - The text that appears in the parent menu for the user to activate the submenu.
 * @param menuId - The menu id of the parent menu to search for the submenu in. If zero, the root menu will be searched.
*/
	findSubMenu(label:String, menuId:Number):Number {
	
	};
	/**
 * @returns true if no items or actions have been added to the menu, otherwise false.
*/
	isEmpty():Boolean {
	
	};
	/**
 * @description Sets weather or not an item is checkable.
 * @param itemId - The id of the item.
 * @param checkable - If true, the item is made checkable.
*/
	setItemCheckable(itemId:Number, checkable:Boolean):void {
	
	};
	/**
 * @description Sets weather or not an item is checked.
 * @param itemId - The id of the item.
 * @param checked - If true, the item is checked.
*/
	setItemChecked(itemId:Number, checked:Boolean):void {
	
	};
	/**
 * @description Sets the data for the item.
 * @param itemId - The id of the item.
 * @param data - The data to set.
*/
	setItemData(itemId:Number, data:Object):void {
	
	};
	/**
 * @description Sets whether or not an item is enabled.
 * @since 4.11.0.208
 * @param itemId - The id of the item.
 * @param enabled - If true, the action is enabled.
*/
	setItemEnabled(itemId:Number, enabled:Boolean):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the user selects an item in the menu, or one of its submenus.
 * @signature `"activated(int)"`
 * @event
*/
	activated(id:Number):void {
	
	};

}
/**
 * @classdesc A global static object available via the Global.MessageBox variable.
This object provides functions that display pre-built message boxes to the user. This is the easiest way for a script to interact with a user - simply call one of the functions as shown in the following examples:Display an information box with an 'Ok' button

### Example:
```
MessageBox.information( qsTr("MyScript finished successfully."), qsTr("MyScript"), qsTr("&OK") );
```
Ask the user a question with 'Yes'/'No' buttons

### Example:
```
if( MessageBox.question( qsTr("Do you want to reset the entire figure?"), qsTr("MyScript"), qsTr("&Yes"), qsTr("&No") ) == 0 ){
	resetEntireFigure();
}
```
Display a warning message to the user

### Example:
```
if( MessageBox.warning( qsTr("If you continue, the entire figure will be reset!"), qsTr("MyScript"), qsTr("&OK"), qsTr("&Cancel") ) == 1 ){
	return;
}
```
Display a critical message to the user

### Example:
```
var error = doSomething();
if( error != 0 ){
	MessageBox.critical( qsTr("The script has encountered a critical error!"), qsTr("MyScript"), qsTr("&OK") );
	return;
}
```
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/messagebox_dz} */
class DzMessageBox extends QObject {
	/**
 * @description Shows a critical dialog box to the user.
 * @returns The index of the button that the user pressed (0, 1, or 2)
 * @param text - The text that is shown in the body of the dialog.
 * @param title - The title of the dialog.
 * @param button0 - The text of button 0.
 * @param button1 - The text of button 1 (if empty, no button will be shown).
 * @param button2 - The text of button 2 (if empty, no button will be shown).
*/
	critical(text:String, title:String, button0:String, button1:String, button2:String):Number {
	
	};
	/**
 * @description Shows an information dialog box to the user.
 * @returns The index of the button that the user pressed (0, 1, or 2).
 * @param text - The text that is shown in the body of the dialog.
 * @param title - The title of the dialog.
 * @param button0 - The text of button 0.
 * @param button1 - The text of button 1 (if empty, no button will be shown).
 * @param button2 - The text of button 2 (if empty, no button will be shown).
*/
	information(text:String, title:String, button0:String, button1:String, button2:String):Number {
	
	};
	/**
 * @description Shows a question dialog box to the user.
 * @returns The index of the button that the user pressed (0, 1, or 2).
 * @param text - The text that is shown in the body of the dialog.
 * @param title - The title of the dialog.
 * @param button0 - The text of button 0.
 * @param button1 - The text of button 1.
 * @param button2 - The text of button 2 (if empty, no button will be shown).
*/
	question(text:String, title:String, button0:String, button1:String, button2:String):Number {
	
	};
	/**
 * @description Shows a warning dialog box to the user.
 * @returns The index of the button that the user pressed (0, 1, or 2).
 * @param text - The text that is shown in the body of the dialog.
 * @param title - The title of the dialog.
 * @param button0 - The text of button 0.
 * @param button1 - The text of button 1.
 * @param button2 - The text of button 2 (if empty, no button will be shown).
*/
	warning(text:String, title:String, button0:String, button1:String, button2:String):Number {
	
	};

}
/**
 * @classdesc TODO:
Add detailed description.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/modifier_dz} */
class DzModifier extends DzElement {
	/**
 * @returns The section that this modifier was assigned to in the DzObject modifier stack (list).
 * @since 4.11.0.44
*/
	getAssignedModifierStackSectionID():Number {
	
	};
	/**
 * @returns The section that this modifier should be a part of in the DzObject modifier stack (list).
 * @since 4.11.0.44
*/
	getPreferredModifierStackSectionID():Number {
	
	};
	/**
 * @returns The value used to mark a modifier as not having a section ID.
 * @since 4.11.0.44
*/
	getUnknownModifierStackSectionID():Number {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted immediately before the modifier is removed from its owner.
 * @signature `"aboutToBeRemoved()"`
 * @event
*/
	aboutToBeRemoved():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the modifier has been added to its owner.
 * @signature `"added()"`
 * @event
*/
	added():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the modifier has changed and needs to be reapplied.
 * @signature `"currentValueChanged()"`
 * @event
*/
	currentValueChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the modifier has been removed from its owner.
 * @signature `"removed()"`
 * @event
*/
	removed():void {
	
	};

}
/**
 * @classdesc Since:
Attention:@attention Attention:
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/morphloader_dz} */
class DzMorphLoader extends DzRefCountedItem, QObject {
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static WeightMap;
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static FacetList;
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static EdgeList;
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static VertexList;
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static UnknownMap;
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static EntireFigure;
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static SelectedNodes;
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static PrimaryNode;
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static SingleSkinFigure;
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static SingleSkinFigureFromGraft;
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static DoNotMirror;
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static XSwap;
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static XPosToNeg;
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static XNegToPos;
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static YSwap;
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static YPosToNeg;
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static YNegToPos;
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static ZSwap;
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static ZPosToNeg;
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static ZNegToPos;
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static MakeUnique;
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static DeltasAndERCLinks;
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static DeltasOnly;
	/**
 * @description Default Constructor. Creates a morph loader with default settings.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Gets the path for a given weight map context and a given node.
 * @returns The path for the weight map context on node.
 * @param context - The weight map context.
 * @param node - The node.
*/
	static getPathForContext(context:DzWeightMapContext, node:DzNode):String {
	
	};
	/**
 * @description Creates a morph on the node provided from the geometry loaded from the file. This function supports morph creation from vertex-only geometries.
 * @returns The log containing messages (if any) about the creation of the morph, otherwise an empty string.
 * @param settings - The settings to use for loading the geometry; i.e., the scale for the mesh, whether or not to swap the Y and Z coordinates of the mesh, etc.
 * @param node - The node containing the geometry to create the morph for.
 * @param onlyErrorsOrWarnings - If true (default), only errors and warnings will be returned.
 * @param plainText - If true (default), the returned string will be plain text, otherwise the returned string will contain HTML.
*/
	createMorph(settings:DzFileIOSettings, node:DzNode, onlyErrorsOrWarnings:Boolean, plainText:Boolean):String {
	
	};
	/**
 * @description Creates a morph on the node provided from the given geometry. This function supports morph creation from vertex-only geometries.
 * @returns The log containing messages (if any) about the creation of the morph, otherwise an empty string.
 * @since 4.15.0.6
 * @param mesh - The geometry with the morph information.
 * @param node - The node containing the geometry to create the morph for.
 * @param onlyErrorsOrWarnings - If true (default), only errors and warnings will be returned.
 * @param plainText - If true (default), the returned string will be plain text, otherwise the returned string will contain HTML.
*/
	createMorphFromMesh(mesh:vertexmesh_dz, node:DzNode, onlyErrorsOrWarnings:Boolean, plainText:Boolean):String {
	
	};
	/**
 * @returns The strength that will be used for attenuating the effect of the morph being loaded on the vertices that reside along the boundary of the current geometric selection.
*/
	getAttenuateEdgeStrength():Number {
	
	};
	/**
 * @returns The path to the map that will be used for attenuating the effect of the morph.
*/
	getAttenuateMapPath():String {
	
	};
	/**
 * @returns The strength that the map used to attenuate the effect of the morph will be applied at.
*/
	getAttenuateStrength():Number {
	
	};
	/**
 * @description Gets whether or not orphans should be cleaned up when overwriting existing morphs. An 'orphan' is a morph by the same name that does not have any deltas from a new morph.
 * @returns true if orphans are to be cleaned up when overwriting existing morphs, otherwise false.
*/
	getCleanUpOrphans():Boolean {
	
	};
	/**
 * @returns The node that the control property will be located on.
 * @attention This has no meaning if getCreateControlProperty() is false.
*/
	getControlNode():DzNode {
	
	};
	/**
 * @returns The property that will serve as the additional control property for the morph(s) created.
 * @attention This has no meaning if getCreateControlProperty() is false.
*/
	getControlProperty():DzNumericProperty {
	
	};
	/**
 * @returns The custom label that will be used for secondary (non-control) properties.
 * @attention This has no meaning if getControlPropertyUseCustomLabel() or getCreateControlProperty() are false.
*/
	getControlPropertyCustomLabel():String {
	
	};
	/**
 * @returns The custom value for creating ERC links to the control property.
 * @attention This has no meaning if getControlPropertyERCUseCustomValue() or getCreateControlProperty() are false.
*/
	getControlPropertyERCCustomValue():Number {
	
	};
	/**
 * @returns The ERC type to use when connecting secondary properties to the control property.
*/
	getControlPropertyERCType():DzERCLink {
	
	};
	/**
 * @returns true if a custom value will be used for the ERC links to the control property, otherwise false.
 * @attention This has no meaning if getCreateControlProperty() is false.
*/
	getControlPropertyERCUseCustomValue():Boolean {
	
	};
	/**
 * @returns true if a custom label will be used for the secondary (non-control) properties, otherwise false.
 * @attention This has no meaning if getCreateControlProperty() is false.
*/
	getControlPropertyUseCustomLabel():Boolean {
	
	};
	/**
 * @returns true if the loader will create and use ERC links to an additional control property.
*/
	getCreateControlProperty():Boolean {
	
	};
	/**
 * @description Gets the minimum amount of deviation from the original position of a given vertex that will be recorded in the morph.
 * @returns The minimum amount of deviation from the original position of a given vertex to be recorded in the morph.
*/
	getDeltaTolerance():Number {
	
	};
	/**
 * @returns The name to display for this collection of settings.
 * @since 4.15.0.7
*/
	getDisplayName():String {
	
	};
	/**
 * @returns The full path to the file that this morph will load its geometry from.
*/
	getFilename():String {
	
	};
	/**
 * @returns true if secondary (non-control) properties are hidden, otherwise false.
 * @attention This has no meaning if getCreateControlProperty() is false.
*/
	getHideSecondaryProperties():Boolean {
	
	};
	/**
 * @description Gets the type of mirroring to apply.
 * @returns The type of mirroring that will be applied to the morph.
*/
	getMorphMirroring():void {
	
	};
	/**
 * @returns The name of the morph(s) that will be created by this morph loader.
*/
	getMorphName():String {
	
	};
	/**
 * @returns true if an existing morph by the same name will be replaced, otherwise false.
*/
	getOverwriteExisting():void {
	
	};
	/**
 * @returns true if existing deltas in a morph by the same name be preserved, otherwise false.
*/
	getPreserveExistingDeltas():Boolean {
	
	};
	/**
 * @returns The path of the property group that morph value properties will be added to.
*/
	getPropertyGroupPath():String {
	
	};
	/**
 * @returns true if joint deformations and other modifiers will be reversed from the current world-space geometry to calculate the deltas, otherwise false.
*/
	getReverseDeformations():Boolean {
	
	};
	/**
 * @returns The path of the pose file to be applied to the figure before a morph is loaded.
*/
	getReverseDeformationsPose():String {
	
	};
	/**
 * @returns true if the morph of the same name already exists, otherwise false.
 * @param node - The node to check for the morph.
*/
	morphAlreadyExists(node:DzNode):Boolean {
	
	};
	/**
 * @description Reads common object settings from a configuration file (*.dsx).
 * @returns true if the file was successfully read, otherwise false.
 * @since 4.9.3.47
 * @param filename - The full path of the file to read.
*/
	readObjectCommonSettingsFromConfigFile(filename:String):Boolean {
	
	};
	/**
 * @description Reads the settings of the first object in a configuration file (*.dsx).
 * @returns true if the read was successful, otherwise false. (since 4.15.0.4)
 * @since 4.9.3.47
 * @param filename - The name of the file to read.
 * @param filePath - The path of the directory that the file to read is in.
*/
	readObjectSettingsFromConfigFile(filename:String, filePath:String):Boolean {
	
	};
	/**
 * @description Saves object settings to a configuration file (*.dsx).
 * @returns true if the save was successful, otherwise false. (since 4.15.0.4)
 * @since 4.9.3.47
 * @param filename - The full path of the file to write to.
 * @param projectPath - The full path of the directory containing the files of a project.
 * @param relativeToProject - If true, filename is saved relative to projectPath. If false, filename is considered to be absolute and projectPath is ignored.
*/
	saveObjectSettingsToConfigFile(filename:String, projectPath:String, saveProjectRelative:Boolean):Boolean {
	
	};
	/**
 * @description Sets the strength to use for attenuating the effect of the morph on the vertices that reside along the boundary of the current geometric selection.
 * @param val - The strength value to set. A value of 0 yields no (0%) attenuation. A value of 1 yields full (100%) attenuation. Values between 0 and 1 yield attenuation that is commensurate with the specified value.
 * @attention This value is ignored when a weight map is used for attenuation.
*/
	setAttenuateEdgeStrength(val:Number):void {
	
	};
	/**
 * @description Sets the path to the map used to attenuate the effect of the morph.
 * @param mapPath - The path to the map.
 * @attention The value of mapPath must follow one of these patterns:<NodeName>facetlist.facegroup::<FaceGroupName><NodeName>facetlist::surface::<SurfaceName><NodeName>facetlist::selecitonset::<SelectionSetName><NodeName>edgelist::selecitonset::<SelectionSetName><NodeName>vertexlist::selecitonset::<SelectionSetName><NodeName>weightmap::<WeightMapName><MapNodeName>weightmap::<WeightMapName><MapNodeName>weightmap::<NodeName>/<WeightMapName>
*/
	setAttenuateMapPath(mapPath:String):void {
	
	};
	/**
 * @description Sets the strength to apply the map used to attenuate the effect of the morph.
 * @param val - The strength value to set. A value of 1.0 will cause the values in the map to be applied at their full respective values. A value of 0.0 will cause the values in the map to not be applied. A value of -1.0 will cause the values in the map to be inverted and applied at the opposite of their full respective values.
*/
	setAttenuateStrength(val:Number):void {
	
	};
	/**
 * @description Sets whether or not orphans should be cleaned up when overwriting existing morphs. An 'orphan' is a morph by the same name that does not have any deltas from a new morph.
 * @param onOff - If true, orphans will be cleaned up.
*/
	setCleanUpOrphans(onOff:Boolean):void {
	
	};
	/**
 * @description Sets the node that the control property will be located on.
 * @param node - The node that will own the control property.
 * @attention This has no effect if getCreateControlProperty() is false.
*/
	setControlNode(node:DzNode):void {
	
	};
	/**
 * @description Sets the property that will serve as the additional control property for the morph(s) created by this loader.
 * @param prop - The control property for the new morph(s).
 * @attention This has no effect if getCreateControlProperty() is false.
*/
	setControlProperty(prop:DzNumericProperty):void {
	
	};
	/**
 * @description Sets the custom label that will be used for secondary (non-control) properties.
 * @param label - The custom label to use for the secondary (non-control) properties.
 * @attention This has no effect if getControlPropertyUseCustomLabel() or getCreateControlProperty() are false.
*/
	setControlPropertyCustomLabel(label:String):void {
	
	};
	/**
 * @description Sets the custom value for creating ERC links to the control property.
 * @param val - The custom multiplier for the ERC links that are created to the control property.
 * @attention This has no effect if getControlPropertyERCUseCustomValue() or getCreateControlProperty() are false.
*/
	setControlPropertyERCCustomValue(val:Number):void {
	
	};
	/**
 * @description Sets the ERC link type to use when connecting secondary properties to the control property.
 * @param type - The ERC link type to use when connecting secondary properties to the control property.
*/
	setControlPropertyERCType(type:DzERCLink.ERCType):void {
	
	};
	/**
 * @description Sets whether or not a custom value will be used for the ERC links to the control property.
 * @param onOff - If true, a custom value will be used for the links to the control property. Otherwise the default 1:1 ratio is assumed.
 * @attention This has no effect if getCreateControlProperty() is false.
*/
	setControlPropertyERCUseCustomValue(onOff:Boolean):void {
	
	};
	/**
 * @description Sets whether or not a custom label will be used for the secondary (non-control) properties.
 * @param onOff - If true, a custom label will be used for the secondary (non-control) properties. Otherwise the default label is used.
 * @attention This has no effect if getCreateControlProperty() is false.
*/
	setControlPropertyUseCustomLabel(onOff:Boolean):void {
	
	};
	/**
 * @description Sets whether or not the loader will use and create ERC links to an additional control property.
 * @param onOff - If true, the loader will create links to an additional control property, otherwise, settings for the additional control property will be ignored.
*/
	setCreateControlProperty(onOff:Boolean):void {
	
	};
	/**
 * @description Sets the minimum amount of deviation from the original position of a given vertex that will be recorded in the morph.
 * @param val - The minimum amount of deviation from the original position of a given vertex to be recorded in the morph.
*/
	setDeltaTolerance(val:Number):void {
	
	};
	/**
 * @description Sets the file to read the geometry from.
 * @param filename - The full path of the file to load this morph's geometry from.
*/
	setFilename(filename:String):void {
	
	};
	/**
 * @description Sets whether or not secondary (non-control) properties are hidden.
 * @param onOff - If true, secondary (non-control) properties will be set as hidden.
 * @attention This has no effect if getCreateControlProperty() is false.
*/
	setHideSecondaryProperties(onOff:Boolean):void {
	
	};
	/**
 * @description Sets the mode to load the morph for node.
 * @returns true if mode can be set for node, otherwise false.
 * @param mode - The mode to set for the morph being loaded.
 * @param node - The node with the geometry that the morph is being loaded for.
 * @attention If node is a "single skin" figure, only the SingleSkinFigure and SingleSkinFigureFromGraft modes are considered valid. If node is a figure, but not a "single skin" figure (e.g., a legacy figure), only the EntireFigure, SelectedNodes and PrimaryNode modes are considered valid. If node is a prop, only the PrimaryNode mode is considered valid.
*/
	setLoadMode(mode:LoadMode, node:DzNode):void {
	
	};
	/**
 * @description Sets the type of mirroring to apply to the morph.
 * @param type - The type of mirroring to apply to the morph.
*/
	setMorphMirroring(type:MirroringType):void {
	
	};
	/**
 * @description Sets the name of the morph(s) that will be created by this morph loader.
 * @param name - The name for the morph_dz object(s) that will be created by this loader.
*/
	setMorphName(name:String):DzMorph {
	
	};
	/**
 * @description Sets whether or not to override/replace existing morphs with the same name.
 * @param mode - If true, existing morphs on the node(s) with the same name will be replaced by the loaded morph.
*/
	setOverwriteExisting(mode:OverwriteMode):void {
	
	};
	/**
 * @description Sets whether or not to preserve existing deltas in a morph by the same name.
 * @param mode - If true, existing deltas in a morph by the same name will be preserved.
*/
	setPreserveExistingDeltas(onOff:Boolean):void {
	
	};
	/**
 * @description Sets the property group that morph value properties will be added to.
 * @param path - The path of the property group that value properties from the morph(s) created by this loader will be assigned to.
*/
	setPropertyGroupPath(path:String):void {
	
	};
	/**
 * @description Sets whether or not joint deformations and other modifiers will be reversed before calculating deltas.
 * @param onOff - If true, joint deformations and other modifiers will be reversed from the current world-space geometry to calculate the deltas. If false, the deltas will be calculated from the base geometry.
*/
	setReverseDeformations(onOff:Boolean):void {
	
	};
	/**
 * @description Sets the path of the pose file to apply to the figure before a morph is loaded.
 * @param filePath - The path of the pose file to be used.
*/
	setReverseDeformationsPose(filePath:String):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description TODO: Add Description
 * @signature `TODO: Add Description`
 * @event
*/
	applyAfterJointChanged(onOff:Boolean):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description TODO: Add Description
 * @signature `TODO: Add Description`
 * @event
*/
	attenuateChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description TODO: Add Description
 * @signature `TODO: Add Description`
 * @event
*/
	attenuateEdgeStrengthChanged(strength:Number):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description TODO: Add Description
 * @signature `TODO: Add Description`
 * @event
*/
	attenuateStrengthChanged(strength:Number):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description TODO: Add Description
 * @signature `TODO: Add Description`
 * @event
*/
	controlNodeChanged(node:DzNode):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description TODO: Add Description
 * @signature `TODO: Add Description`
 * @event
*/
	controlPropertyChanged(prop:DzNumericProperty):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description TODO: Add Description
 * @signature `TODO: Add Description`
 * @event
*/
	createControlPropertyChanged(onOff:Boolean):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description TODO: Add Description
 * @signature `TODO: Add Description`
 * @event
*/
	deltaToleranceChanged(val:Number):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description TODO: Add Description
 * @signature `TODO: Add Description`
 * @event
*/
	ercCustomValueChanged(val:Number):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the filename has changed.
 * @signature `"filenameChanged(const QString&)"`
 * @event
*/
	filenameChanged(name:String):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description TODO: Add Description
 * @signature `TODO: Add Description`
 * @event
*/
	hideSecondaryChanged(onOff:Boolean):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description TODO: Add Description
 * @signature `TODO: Add Description`
 * @event
*/
	mirroringChanged(mirroring:DzMorphLoader.MirroringType):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the morph name has changed.
 * @signature `"morphNameChanged(const QString&)"`
 * @event
*/
	morphNameChanged(name:String):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description TODO: Add Description
 * @signature `TODO: Add Description`
 * @event
*/
	overwriteExistingChanged(value:DzMorphLoader.OverwriteMode):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description TODO: Add Description
 * @signature `TODO: Add Description`
 * @event
*/
	preserveExistingDeltasChanged(onOff:Boolean):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the path of the property group has changed.
 * @signature `"propertyGroupPathChanged(const QString&)"`
 * @event
*/
	propertyGroupPathChanged(path:String):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description TODO: Add Description
 * @signature `TODO: Add Description`
 * @event
*/
	reverseDeformationsChanged(onOff:Boolean):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description TODO: Add Description
 * @signature `TODO: Add Description`
 * @event
*/
	secondaryLabelChanged(label:String):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description TODO: Add Description
 * @signature `TODO: Add Description`
 * @event
*/
	smoothCageChanged(onOff:Boolean):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description TODO: Add Description
 * @signature `TODO: Add Description`
 * @event
*/
	useErcCustomValueChanged(onOff:Boolean):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description TODO: Add Description
 * @signature `TODO: Add Description`
 * @event
*/
	useSecondaryLabelChanged(onOff:Boolean):void {
	
	};

}
/**
 * @classdesc This class implements a batch of morph loader objects that will be applied to the same node(s).
Since:
Attention:@attention Attention:
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/morphloaderbatch_dz} */
class DzMorphLoaderBatch extends QObject {
	/**
 * @description Default Constructor. Creates a morph loader batch that will be applied to the given node.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Adds a morph to the list to load.
 * @since 4.9.3.47
 * @param filename - The filename of the object configuration file to load.
 * @attention setNode() must be called before this is.
*/
	addFromConfigFile(filename:String):void {
	
	};
	/**
 * @description Adds a morph to the list to load.
 * @param file - The filename of the morph file to load.
 * @attention setNode() must be called before this is.
*/
	addFromFile(file:String):void {
	
	};
	/**
 * @description Adds a list of morphs to the list to load.
 * @param files - A list of the filenames of the morph files to load.
 * @attention setNode() must be called before this is.
*/
	addFromFiles(files:Array):void {
	
	};
	/**
 * @description Adds a morph to the list to load.
 * @param mesh - The vertex mesh with the morph to load.
 * @attention setNode() must be called before this is.
*/
	addFromMesh(mesh:vertexmesh_dz):DzVertexmesh {
	
	};
	/**
 * @description Adds a morph to the list to load.
 * @param morph - The morph to add.
*/
	addMorph(morph:DzMorphLoader):void {
	
	};
	/**
 * @description Clears the list of morphs to load.
*/
	clear():void {
	
	};
	/**
 * @description Creates morphs on the node provided from the given geometry. This function supports morph creation from vertex-only geometries.
 * @returns The log containing messages about the creation of the morphs.
 * @param mesh - The geometry for the morphs.
 * @param node - The node containing the geometry to create the morphs for.
 * @param onlyErrorsOrWarnings - If true (default), only errors and warnings will be returned.
 * @param plainText - If true (default), the returned string will be plain text, otherwise the returned string will contain HTML.
*/
	createMorphs(mesh:vertexmesh_dz, node:DzNode, onlyErrorsOrWarnings:Boolean, plainText:Boolean):String {
	
	};
	/**
 * @description Creates morphs on the node provided from the geometry loaded from the files. This function supports morph creation from vertex-only geometries.
 * @returns The log containing messages about the creation of the morph.
 * @param settings - The scale to apply to the geometry that is read from the file.
 * @param node - The node containing the geometry to create the morph for.
 * @param onlyErrorsOrWarnings - If true (default), only errors and warnings will be returned.
 * @param plainText - If true (default), the returned string will be plain text, otherwise the returned string will contain HTML.
*/
	createMorphs(settings:DzFileIOSettings, node:DzNode, onlyErrorsOrWarnings:Boolean, plainText:Boolean):String {
	
	};
	/**
 * @returns The index of the found morph (if any), otherwise -1.
 * @param morph - The morph to find.
*/
	findMorph(morph:DzMorphLoader):Number {
	
	};
	/**
 * @returns The morph in the list at the given index (if valid), otherwise Null.
 * @param index - The index of the morph to get.
*/
	getMorph(index:Number):DzMorphLoader {
	
	};
	/**
 * @returns The node with the object that morphs will be loaded for (if set), otherwise NULL.
*/
	getNode():DzNode {
	
	};
	/**
 * @returns The number of morphs in the list to load.
*/
	getNumMorphs():Number {
	
	};
	/**
 * @description Moves the position of a morph in the list.
 * @param morph - The morph to move.
 * @param upDown - If true, the morph is moved to the position earlier in the list. If false, the morph is moved to the position later in the list.
*/
	moveMorph(morph:DzMorphLoader, upDown:Boolean):void {
	
	};
	/**
 * @returns The filename of the preset configuration file to use (if any) to setup a morph added from file, otherwise an empty string.
*/
	presetConfigurationFile():String {
	
	};
	/**
 * @description Removes a morph from the list to load.
 * @param morph - The morph to remove.
*/
	removeMorph(morph:DzMorphLoader):void {
	
	};
	/**
 * @description Saves project (and potentially object) settings to configuration files (*.dsx).
 * @returns true if the save was successful, otherwise false. (since 4.15.0.4)
 * @since 4.9.3.47
 * @param filename - The full path of the file to write to.
 * @param saveRelative - If true, object settings files are saved relative to the project file. If false, object settings files are saved adjacent to their respective source.
 * @param saveObjects - If true, object settings will be saved to their respective files. If false, object settings files are not saved.
*/
	saveProjectSettingsToConfigFile(filename:String, saveRelative:Boolean, saveObjects:Boolean):Boolean {
	
	};
	/**
 * @description Sets the node with the object to load morphs for.
 * @param node - The node to set.
*/
	setNode(node:DzNode):void {
	
	};
	/**
 * @description Sets the filename of a preset configuration file to use to setup morphs that are added to the list from file.
 * @param filename - The filename of the preset configuration file to use.
*/
	setPresetConfigurationFile(filename:String):void {
	
	};
	/**
 * @description Sets whether or not a preset configuration file should be used to setup morphs that are added from file.
 * @param onOff - If true, a preset configuration file should be used.
*/
	setUsePresetConfiguration(onOff:Boolean):void {
	
	};
	/**
 * @returns true if a preset configuration file should be used to setup morphs that are added from file, otherwise false.
*/
	usePresetConfiguration():Boolean {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description TODO: Add Description
 * @signature `TODO: Add Description`
 * @event
*/
	morphAdded(morph:DzMorphLoader):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description TODO: Add Description
 * @signature `TODO: Add Description`
 * @event
*/
	morphListChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description TODO: Add Description
 * @signature `TODO: Add Description`
 * @event
*/
	morphMoved(srcIdx:Number, destIdx:Number):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description TODO: Add Description
 * @signature `TODO: Add Description`
 * @event
*/
	morphRemoved(morph:DzMorphLoader, formerIndex:Number):void {
	
	};

}
/**
 * @classdesc An asset save filter for saving Morph Support Asset(s) in the DSON format.
See Also:
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/morphsupportassetfilter_dz} */
class DzMorphSupportAssetFilter extends DzAssetFileOutFilter {
	/**
 * @description TODO:
Add description.
 * @constructor
*/
	constructor() {
	
	};

}
/**
 * @classdesc Responsible for the management of multimedia (audio/video) exporters/importers.
There is only one instance of this manager in an application. This instance is created and owned by DzApp. Request the instance via DzApp.getMultiMediaMgr().
See Also:
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/multimediamgr_dz} */
class DzMultiMediaMgr extends QObject {
	/**
 * @description Uses the filename extension to find an appropriate audio importer.
 * @returns An appropriate importer for the given file name, or NULL if none is found. The caller takes ownership of this object and is responsible for deleting it.
*/
	static findAudioImporter(filename:String):DzAudioImporter {
	
	};
	/**
 * @description Uses the filename extension to find an appropriate video exporter.
 * @returns An appropriate exporter for the given file name, or NULL if none is found. The caller takes ownership of this object and is responsible for deleting it.
*/
	static findVideoExporter(filename:String):DzVideoExporter {
	
	};
	/**
 * @returns A new instance of the i'th audio importer in the list. The caller takes ownership of this object and is responsible for deleting it.
*/
	static getAudioImporter(i:Number):DzAudioImporter {
	
	};
	/**
 * @returns The number of audio importers currently supported.
*/
	getNumAudioImporters():Number {
	
	};
	/**
 * @returns The number of video exporters currently supported.
*/
	getNumVideoExporters():Number {
	
	};
	/**
 * @returns A new instance of the i'th video exporter in the list. The caller takes ownership of this object and is responsible for deleting it.
 * @param i - The index of the exporter to create.
*/
	static getVideoExporter(i:Number):DzVideoExporter {
	
	};
	/**
 * @description Populates the given filter with all the audio types recognized by the multimedia manager.
 * @param filter - The filter to populate
 * @param defaultFilter - The filter to set as the default
 * @param makeAllFilesEntry - If true, and additional filter is created for all recognized file extensions.
*/
	static makeAudioImportFileFilter(filter:DzFileFilter, defaultFilter:String, makeAllFilesEntry:Boolean):void {
	
	};
	/**
 * @description Populates the given filter with all the video types recognized by the multimedia manager.
 * @param filter - The filter to populate
 * @param defaultFilter - The filter to set as the default
*/
	static makeVideoExportFileFilter(filter:DzFileFilter, defaultFilter:String):void {
	
	};
	/**
 * @description Export the clip to a video file.
 * @returns DZ_NO_ERROR if the file export was successful.
 * @param filename - The name of the file to export to.
 * @param clip - An instance of DzVideoClip containing the data to save.
 * @param exporterIndex - The index of the exporter class to use. If this is less than 0, then the extension of fileName is used to attempt to find an appropriate exporter.
*/
	exportVideoClip(fileName:String, clip:DzVideoClip, exporterIndex:Number):DzError {
	
	};
	/**
 * @returns Last directory that audio files were imported from.
*/
	getAudioClipLoadPath():String {
	
	};
	/**
 * @returns Last directory that video files were exported to.
*/
	getVideoClipSavePath():String {
	
	};
	/**
 * @description Import an audio clip from a file.
 * @returns DZ_NO_ERROR if the file import was successful.
 * @param filename - The name of the file to import from.
 * @param clip - A pointer to a DzAudioClip instance to import the data into.
 * @param importerIndex - The index of the importer class to use. If this is less than 0, then the extension of fileName is used to attempt to find an appropriate exporter.
*/
	importAudioClip(fileName:String, clip:DzAudioClip, importerIndex:Number):DzError {
	
	};

}
/**
 * @classdesc Deprecated
Exists only to keep code written prior to 4.6.2.23 working. Do not use in new code. Use DzTextureLayer.BlendMultiply instead.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/multiplyblend_dz} */
class DzMultiplyBlend extends  {
	/**
 * @description Default Constructor
 * @constructor
*/
	constructor() {
	
	};

}
/**
 * @classdesc DzNode objects all contain animatable position, rotation, and scale channels that can be set and accessed via the properties list in the DzElement class or through specialized calls in this class.
The transform order is Translate/Rotate/Scale. Non-uniform scaling is supported by implementing separate X, Y, and Z scale channels. All channels are independent internally and can have keys set on them independent of any other channel.
Note that channel independence holds exactly true for translations and scales, but does not hold true for rotations (which are represented to the user as Euler angle degrees for each axis channel). Euler angles are inherently inter-dependent and prone to numerical singularities ("gimbal lock") that make them less than perfect at representing rotations. For this reason, rotations are handled as DzQuat objects (quaternions) whenever possible. When setting keys on a DzNode, it is preferable to use the set*Rot() methods or set*Transform() methods that take DzQuat arguments. Setting rotations as a DzQuat will create keys on all three rotation channels but will assure that the values are reasonable.
Each node defines an order that axis rotations will be applied in for the node. The order defined is important as it serves to avoid numerical singularities ("gimbal lock"). The rotation order of a node should be defined such that the first axis in the order is the primary axis - the axis that the node will twist along. The second axis in the order should be defined as the axis where rotations are least likely to reach 90?. And the third axis in the order should be defined as the axis where rotations are most likely to reach 90?.
Nodes have an origin and an orientation that define the base position and rotation of its "local space," that is - a base from which a node's transformations can be expressed in relative terms. The origin defines the point around which a node rotates, the point around which a node is scaled, the point from which a node's translation is relative. In other words, the origin is the definition of an adjusted "center" point" (a positional offset) for the node. The origin of a node is defined in non-transformed world space coordinates. The orientation of a node defines the base rotation (a rotational offset) that a node's rotations are expressed as being relative to. Adjusting the orientation of a node only has an effect on the rotation of a node, it does not affect translation or scale transforms.
Several functions are provided for accessing the transformation data of a node. Below are descriptions of the groups of functions, and the transform space that they return data for.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/node_dz} */
class DzNode extends DzElement {
	/**
 * @description Holds the author of the file for this node. (Read Only)
	*/
	assetAuthor:DzAuthor;
	/**
 * @description Holds the revision version of the asset file for this node. (Read Only)
	*/
	assetFileRevision:DzVersion;
	/**
 * @description Holds the asset id for this node.
	*/
	assetId:String;
	/**
 * @description Holds the asset id aliases for this node.
	*/
	assetIdAliases:Array;
	/**
 * @description Holds the modified date of the asset file for this node. (Read Only)
	*/
	assetModifiedDate:Date;
	/**
 * @description Holds whether or not the asset for this node needs to be saved. (Read Only)
	*/
	assetNeedSave:Boolean;
	/**
 * @description Holds the URI of the asset source for this node; only valid when the asset is in an embedded state - i.e. modified. (Read Only)
	*/
	assetSource:DzUri;
	/**
 * @description Holds the asset URI for this node. (Read Only)
	*/
	assetUri:DzUri;
	/**
 * @description Holds the path relative to the node asset file folder to search for addons.
	*/
	extendedAddonsPath:String;
	/**
 * @description Holds additional ids that this node extends.
	*/
	extendedAssetIds:String;
	/**
 * @description Holds the name aliases for this node.
	*/
	nameAliases:Array;
	/**
 * @description Holds the render priority for this node. Render priority controls the order in which nodes are rendered. The higher the priority, the earlier the node will be rendered. If several nodes have the same render priority, those nodes will be rendered in an arbitrary order.


 The default render priority is RENDER_PRIORITY_NORMAL.
	*/
	renderPriority:DzRenderMgr;
	/**
 * @description Default Constructor.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @returns The (root) node (if any) that results from duplicating node, otherwise null.
 * @since 4.9.3.80
 * @param propagate - If true, the hierarchy of nodes that are children of node will also be duplicated.
*/
	static duplicate(node:DzNode, propagate:Boolean):DzNode {
	
	};
	/**
 * @description Adds a child to this node.
 * @param child - The node to add to this node's list of children. A child must be removed from one parent before it can be attached to another.
 * @param inPlace - If true, the necessary transforms to parent 'In Place' will be calculated and applied to the child.
*/
	addNodeChild(child:DzNode, inPlace:Boolean):DzError {
	
	};
	/**
 * @description Sets the end point for this node, adjusting for controllers.
 * @param endPnt - The end point for this node. This is the node's end point in relation to its geometry.
*/
	adjustEndPoint(endPnt:DzVec3):void {
	
	};
	/**
 * @description Sets the orientation for this node adjusting for controllers.
 * @param orientation - The orientation for this node. This defines the space in which node rotations occur.
*/
	adjustOrientation(orientation:DzQuat):void {
	
	};
	/**
 * @description Sets the orientation for this node adjusting for controllers.
 * @param angles - The orientation for this node in degrees. This defines the space in which node rotations occur.
*/
	adjustOrientationAngles(angles:DzVec3):void {
	
	};
	/**
 * @description Sets the origin for this node adjusting for controllers.
 * @param origin - The origin for this node. This is the node's center point in relation to its geometry.
*/
	adjustOrigin(origin:DzVec3):void {
	
	};
	/**
 * @returns The quaternion, based on the rotation order of this node, that would rotate this node in local-space according to the Euler angles passed.
 * @since 4.12.1.111
 * @param anglesRadians - The per axis Euler angles, in radians, to convert.
*/
	calcLocalRotation(anglesRadians:DzVec3):DzQuat {
	
	};
	/**
 * @description Get the current shadow-casting status of this node.
 * @returns true if the node is casting shadows or the active mode of the active renderer does not allow disabling shadows (and thus dynamically hides the property providing control to the user), otherwise false.
*/
	castsShadow():Boolean {
	
	};
	/**
 * @description Removes all local transform data.
*/
	clearAllTransformData():void {
	
	};
	/**
 * @description Clears the override color to be used to draw the node while using manipulation draw styles.
*/
	clearManipOverColor():void {
	
	};
	/**
 * @description Removes local transform data.
 * @param range - The time range to clear transform data across.
*/
	clearTransformData(range:DzTimeRange):void {
	
	};
	/**
 * @returns The (root) node (if any) that results from duplicating this node, otherwise null.
 * @since 4.9.3.80
 * @param propagate - If true, the hierarchy of nodes that are children of this node will also be duplicated.
*/
	duplicate(propagate:Boolean):DzNode {
	
	};
	/**
 * @description Finalizes the node's geometry cache.
 * @param isRender - If true, the geometry cache will be finalized for a render operation, otherwise, the geometry will be prepared for a drawing operation.
 * @param allowResChange - If true, the geometry is allowed to change resolution in the finalize. otherwise, the geometry will stay at it's current resolution.
*/
	finalize(isRender:Boolean, allowResChange:Boolean):void {
	
	};
	/**
 * @returns The index of node as a child of this node (if any), otherwise -1.
 * @param node - The node to find the index of.
*/
	findChildIndex(node:DzNode):Number {
	
	};
	/**
 * @description Get a child from this node by name.
 * @returns A child node having a matching name (if any), otherwise NULL.
 * @param name - The name of the child to find.
 * @param recurse - If true, this will be called recursively until a child with a matching name is found.
*/
	findNodeChild(name:String, recurse:Boolean):DzNode {
	
	};
	/**
 * @description Get a child from this node by asset id.
 * @returns A child node having a matching asset ID (if any), otherwise NULL.
 * @param assetID - The asset ID of the child to find.
 * @param recurse - If true, this will be called recursively until a child with a matching asset ID is found.
 * @param checkSource - If true, the asset's source will be checked for a match.
*/
	findNodeChildByAssetID(assetID:String, recurse:Boolean, checkSource:Boolean):DzNode {
	
	};
	/**
 * @description Get a child from this node by label.
 * @returns A child node having a matching label (if any), otherwise NULL.
 * @since 4.10.0.68
 * @param label - The label of the child to find.
 * @param recurse - If true, this will be called recursively until a child with a matching label is found.
*/
	findNodeChildByLabel(label:String, recurse:Boolean):DzNode {
	
	};
	/**
 * @description Get a child from this node by name (or alias).
 * @returns A child node having a matching name or alias (if any), otherwise NULL.
 * @param name - The name (or alias) of the child to find.
 * @param aliases - If true, consider name aliases.
 * @param recurse - If true, this will be called recursively until a child with a matching name (or alias) is found.
*/
	findNodeChildByNameOrAlias(name:String, aliases:Boolean, recurse:Boolean):DzNode {
	
	};
	/**
 * @returns The property referred to by the uri or null if the property cannot be found.
 * @since 4.9.2.20
 * @param uri - The URI path to the property.
*/
	findPropertyReference(uri:DzUri):DzProperty {
	
	};
	/**
 * @returns The property used for controlling whether or not the transform controls for this node, and the local transform, is overridden to be identity.
 * @since 4.11.0.300
*/
	getDisableTransformControl():DzBoolProperty {
	
	};
	/**
 * @returns The endpoint for this node.
 * @param defaultVal - If true, the default value for the end point is returned, otherwise the current value is.
*/
	getEndPoint(defaultVal:Boolean):DzVec3 {
	
	};
	/**
 * @returns The float property that controls the x position of the node's end point.
*/
	getEndXControl():DzFloatProperty {
	
	};
	/**
 * @returns The float property that controls the y position of the node's end point.
*/
	getEndYControl():DzFloatProperty {
	
	};
	/**
 * @returns The float property that controls the z position of the node's end point.
*/
	getEndZControl():DzFloatProperty {
	
	};
	/**
 * @returns The float property that controls local rotation of the node around the first axis of the rotation order.
 * @since 4.9.3.17
*/
	getFirstAxisRotControl():DzFloatProperty {
	
	};
	/**
 * @returns The property used for controlling whether or not the local transform for this node is ignored by any geometry associated with it.
 * @since 4.12.1.68
*/
	getIgnoreLocalTransformControl():DzBoolProperty {
	
	};
	/**
 * @returns A three dimensional box containing the current node (including associated geometry - if any) oriented to the cardinal axes of the world and represented in coordinates that are relative to the node origin.
*/
	getLocalBoundingBox():DzBox3 {
	
	};
	/**
 * @returns A three dimensional box containing the current node (including associated geometry - if any) oriented to the cardinal axes of the node and represented in coordinates that are relative to the node origin.
*/
	getLocalOrientedBox():DzOrientedBox3 {
	
	};
	/**
 * @returns The local-space position of the node at the current time.
*/
	getLocalPos():DzVec3 {
	
	};
	/**
 * @returns The local-space position of the node.
 * @param tm - The scene time at which to get the transform.
 * @param defaultVal - Use the default version of the origin, end point, and orientation instead of the current position.
*/
	getLocalPos(tm:DzTime, defaultVal:Boolean):DzVec3 {
	
	};
	/**
 * @returns The local-space rotation of the node at the current time.
*/
	getLocalRot():DzQuat {
	
	};
	/**
 * @returns The local-space rotation of the node.
 * @param tm - The scene time at which to get the transform.
 * @param defaultVal - Use the default version of the origin, end point, and orientation instead of the current position.
*/
	getLocalRot(tm:DzTime, defaultVal:Boolean):DzQuat {
	
	};
	/**
 * @returns The local-space scale of the node at the time.
*/
	getLocalScale():DzMatrix3 {
	
	};
	/**
 * @returns The local-space scale of the node.
 * @param tm - The scene time at which to get the transform.
 * @param defaultVal - Use the default version of the origin, end point, and orientation instead of the current position.
*/
	getLocalScale(tm:DzTime, defaultVal:Boolean):DzMatrix3 {
	
	};
	/**
 * @description Get the composed local transform info for this node at the current time.
 * @returns A matrix representing the composed local transform for this node.
*/
	getLocalTransform():DzMatrix3 {
	
	};
	/**
 * @description Get the composed local transform info for this node.
 * @returns A matrix representing the composed local transform for this node.
 * @param tm - The scene time at which to get the transform.
 * @param defaultVal - Use the default version of the origin, end point, and orientation instead of the current position.
*/
	getLocalTransform(tm:DzTime, defaultVal:Boolean):DzMatrix3 {
	
	};
	/**
 * @returns An object with properties named after the transform properties and their respective values.
 * @since 4.12.1.111
 * @param posLocal - The local-space position offset for this node.
 * @param rotLocal - The local-space rotation offset for this node.
 * @param scaleLocal - The local-space scale offset for this node.
*/
	getLocalTransformAxisValues(posLocal:DzVec3, rotLocal:DzQuat, scaleLocal:DzMatrix3):Object {
	
	};
	/**
 * @description Get the child at the given index.
 * @returns The i'th node attached to this node as a child. NULL if the index is invalid.
*/
	getNodeChild(i:Number):DzNode {
	
	};
	/**
 * @returns A list containing the children of this node.
 * @param recurse - If true, recursively collect all this node's children, scanning the hierarchy from this node down. If false (default), collect only this node's immediate children.
*/
	getNodeChildren(recurse:Boolean):Array {
	
	};
	/**
 * @description Get the parent of this node.
 * @returns The parent of this node in the scene hierarchy, NULL if this node is at root level.
*/
	getNodeParent():DzNode {
	
	};
	/**
 * @description Get the number of children attached to this node.
 * @returns The number of nodes attached to this node as children in the scene hierarchy.
*/
	getNumNodeChildren():Number {
	
	};
	/**
 * @description Get the object currently associated with this node.
 * @returns The object that is associated with this node. NULL if node has no object.
*/
	getObject():DzObject {
	
	};
	/**
 * @returns The orientation of the node.
 * @param defaultVal - Get the default or current values of the orientation. defaultVal defaults to false or current position.
*/
	getOrientation(defaultVal:Boolean):DzQuat {
	
	};
	/**
 * @returns The float property that controls the x rotation of the node's orientation.
*/
	getOrientXControl():DzFloatProperty {
	
	};
	/**
 * @returns The float property that controls the y rotation of the node's orientation.
*/
	getOrientYControl():DzFloatProperty {
	
	};
	/**
 * @returns The float property that controls the z rotation of the node's orientation.
*/
	getOrientZControl():DzFloatProperty {
	
	};
	/**
 * @returns The origin of the node.
 * @param defaultVal - Get the default or current values of the origin. Default is false for current.
*/
	getOrigin(defaultVal:Boolean):DzVec3 {
	
	};
	/**
 * @returns The float property that controls the x position of the node's origin.
*/
	getOriginXControl():DzFloatProperty {
	
	};
	/**
 * @returns The float property that controls the y position of the node's origin.
*/
	getOriginYControl():DzFloatProperty {
	
	};
	/**
 * @returns The float property that controls the z position of the node's origin.
*/
	getOriginZControl():DzFloatProperty {
	
	};
	/**
 * @returns The property used for tracking the point-at target.
*/
	getPointAtControl():DzNumericNodeProperty {
	
	};
	/**
 * @returns The value that determines how closely this node aims at its point-at target.
 * @since 4.12.1.68
*/
	getPointAtStrength():Number {
	
	};
	/**
 * @returns The point at target for this node (if any), otherwise null.
 * @since 4.12.1.68
*/
	getPointAtTarget():DzNode {
	
	};
	/**
 * @returns The presentation for this property or NULL if there is none.
*/
	getPresentation():DzPresentation {
	
	};
	/**
 * @returns If the preview box has been set, a three dimensional box that represents the current node (including associated geometry - if any) oriented to the cardinal axes of the node and represented in coordinates that are relative to the node origin. If a preview box has not been set, an invalid box.
 * @attention The preview box is typically set when assets are being loaded from file. If an asset referenced within the file cannot be found/loaded, the preview box is used to provide an indication to the user of where the node (including associated geometry - if any) would be located and oriented within the scene.
*/
	getPreviewBox():DzOrientedBox3 {
	
	};
	/**
 * @returns The enum property that controls the render priority of this node.
*/
	getRenderPriorityControl():DzEnumProperty {
	
	};
	/**
 * @returns The boolean property that controls render visibility of this node.
*/
	getRenderVisibilityControl():DzBoolProperty {
	
	};
	/**
 * @description Get the node rotation order.
 * @returns The order that the axis rotations are applied to this node.
*/
	getRotationOrder():DzRotationOrder {
	
	};
	/**
 * @returns The float property that controls general scale of the node.
*/
	getScaleControl():DzFloatProperty {
	
	};
	/**
 * @returns The float property that controls local rotation of the node around the second axis of the rotation order.
 * @since 4.9.3.17
*/
	getSecondAxisRotControl():DzFloatProperty {
	
	};
	/**
 * @returns The boolean property that controls selectability of this node.
*/
	getSelectabilityControl():DzBoolProperty {
	
	};
	/**
 * @returns The selection map for this node.
*/
	getSelectionMap():DzSelectionMap {
	
	};
	/**
 * @returns The node to be selected if selection is promoted, otherwise this node.
*/
	getSelectionNode():DzNode {
	
	};
	/**
 * @returns The boolean property that controls whether this light is casting shadows.
*/
	getShadowControl():DzBoolProperty {
	
	};
	/**
 * @returns The boolean property that controls simulation visibility of this node.
 * @since 4.9.4.25
*/
	getSimulationVisibilityControl():DzBoolProperty {
	
	};
	/**
 * @returns The singleton identifier for this node (if it is a singleton), otherwise an empty string.
 * @since 4.12.2.20
*/
	getSingletonIDString():String {
	
	};
	/**
 * @description Traverses up the node hierarchy and attempts to find a DzSkeleton.
 * @returns The first DzSkeleton node encountered. NULL if this node is not in the hierarchy of a skeleton.
*/
	getSkeleton():DzSkeleton {
	
	};
	/**
 * @returns The float property that controls local rotation of the node around the third axis of the rotation order.
 * @since 4.9.3.17
*/
	getThirdAxisRotControl():DzFloatProperty {
	
	};
	/**
 * @returns The float property that tools should use to control local rotation of the node around the first axis of the rotation order.
 * @since 4.9.3.17
*/
	getToolFirstAxisRotControl():DzFloatProperty {
	
	};
	/**
 * @returns The local-space rotation of the node at the current time, in the context of the current tool.
 * @since 4.9.3.16
*/
	getToolLocalRot():DzQuat {
	
	};
	/**
 * @returns The local-space rotation of the node, in the context of the current tool.
 * @since 4.8.1.13
 * @param tm - The scene time at which to get the transform.
 * @param defaultVal - Use the default version of the origin, end point, and orientation instead of the current position.
*/
	getToolLocalRot(tm:DzTime, defaultVal:Boolean):DzQuat {
	
	};
	/**
 * @returns The float property that tools should use to control local rotation of the node around the second axis of the rotation order.
 * @since 4.9.3.17
*/
	getToolSecondAxisRotControl():DzFloatProperty {
	
	};
	/**
 * @returns The float property that tools should use to control local rotation of the node around the third axis of the rotation order.
 * @since 4.9.3.17
*/
	getToolThirdAxisRotControl():DzFloatProperty {
	
	};
	/**
 * @returns The world-space rotation of the node, in the context of the current tool.
 * @since 4.8.1.13
 * @param tm - The scene time at which to get the transform.
 * @param defaultVal - Whether or not to use the default version of the origin, end point, and orientation instead of the current position.
*/
	getToolWSRot(tm:DzTime, defaultVal:Boolean):DzQuat {
	
	};
	/**
 * @returns The world-space rotation of the node at the current time, in the context of the current tool.
 * @since 4.9.3.16
*/
	getToolWSRot():DzQuat {
	
	};
	/**
 * @description Get the world-space transformation data for this node at the current time, in the context of the current tool.
 * @returns A matrix representing the composed world-space transform for this node.
 * @since 4.9.3.16
*/
	getToolWSTransform():DzMatrix3 {
	
	};
	/**
 * @description Get the world-space transformation data for this node, in the context of the current tool.
 * @returns A matrix representing the composed world-space transform for this node.
 * @since 4.8.1.13
 * @param tm - The scene time at which to get the transform.
 * @param defaultVal - Whether or not to use the default version of the origin, end point, and orientation instead of the current position.
*/
	getToolWSTransform(tm:DzTime, defaultVal:Boolean):DzMatrix3 {
	
	};
	/**
 * @returns The float property that tools should use to control local rotation of the node around the x axis.
*/
	getToolXRotControl():DzFloatProperty {
	
	};
	/**
 * @returns The float property that tools should use to control local rotation of the node around the y axis.
*/
	getToolYRotControl():DzFloatProperty {
	
	};
	/**
 * @returns The float property that tools should use to control local rotation of the node around the z axis.
*/
	getToolZRotControl():DzFloatProperty {
	
	};
	/**
 * @returns The boolean property that controls viewport visibility of this node.
 * @since 4.11.0.36
*/
	getViewportVisibilityControl():DzBoolProperty {
	
	};
	/**
 * @returns The boolean property that controls visibility (to viewports, to renders, to simulation) of this node.
*/
	getVisibilityControl():DzBoolProperty {
	
	};
	/**
 * @returns A three dimensional box containing the current node (including associated geometry - if any) oriented to the cardinal axes of the world and represented in coordinates that are relative to the world origin.
*/
	getWSBoundingBox():DzBox3 {
	
	};
	/**
 * @returns A three dimensional box containing the current node (including associated geometry - if any) oriented to the cardinal axes of the world and represented in coordinates that are relative to the node origin.
*/
	getWSOrientedBox():DzOrientedBox3 {
	
	};
	/**
 * @returns The world-space position of the node at the current time.
*/
	getWSPos():DzVec3 {
	
	};
	/**
 * @returns The world-space position of the node.
 * @param tm - The scene time at which to get the transform.
 * @param defaultVal - Whether or not to use the default version of the origin, end point, and orientation instead of the current position.
*/
	getWSPos(tm:DzTime, defaultVal:Boolean):DzVec3 {
	
	};
	/**
 * @returns The world-space rotation of the node at the current time.
*/
	getWSRot():DzQuat {
	
	};
	/**
 * @returns The world-space rotation of the node.
 * @param tm - The scene time at which to get the transform.
 * @param defaultVal - Whether or not to use the default version of the origin, end point, and orientation instead of the current position.
*/
	getWSRot(tm:DzTime, defaultVal:Boolean):DzQuat {
	
	};
	/**
 * @returns The world-space scale of the node at the current time.
*/
	getWSScale():DzMatrix3 {
	
	};
	/**
 * @returns The world-space scale of the node.
 * @param tm - The scene time at which to get the transform.
 * @param defaultVal - Whether or not to use the default version of the origin, end point, and orientation instead of the current position.
*/
	getWSScale(tm:DzTime, defaultVal:Boolean):DzMatrix3 {
	
	};
	/**
 * @description Get the world-space transformation data for this node at the current time.
 * @returns A matrix representing the composed world-space transform for this node.
*/
	getWSTransform():DzMatrix3 {
	
	};
	/**
 * @description Get the world-space transformation data for this node.
 * @returns A matrix representing the composed world-space transform for this node.
 * @param tm - The scene time at which to get the transform.
 * @param defaultVal - Whether or not to use the default version of the origin, end point, and orientation instead of the current position.
*/
	getWSTransform(tm:DzTime, defaultVal:Boolean):DzMatrix3 {
	
	};
	/**
 * @returns An object with properties named after the transform properties and their respective values, at the current time.
 * @since 4.12.1.111
*/
	getWSTransformAxisValues(posLocal:DzVec3, rotLocal:DzQuat, scaleLocal:DzMatrix3):Object {
	
	};
	/**
 * @returns An object with properties named after the transform properties and their respective values, at the specified time.
 * @since 4.12.1.111
 * @param tm - The scene time at which to get the transform.
 * @param posLocal - The local-space position offset for this node.
 * @param rotLocal - The local-space rotation offset for this node.
 * @param scaleLocal - The local-space scale offset for this node.
*/
	getWSTransformAxisValues(tm:DzTime, posLocal:DzVec3, rotLocal:DzQuat, scaleLocal:DzMatrix3):Object {
	
	};
	/**
 * @returns The float property that controls the local x position of the node.
*/
	getXPosControl():DzFloatProperty {
	
	};
	/**
 * @returns The float property that controls local rotation of the node around the x axis.
*/
	getXRotControl():DzFloatProperty {
	
	};
	/**
 * @returns The float property that controls scaling of the node along the x axis.
*/
	getXScaleControl():DzFloatProperty {
	
	};
	/**
 * @returns The float property that controls the local y position of the node.
*/
	getYPosControl():DzFloatProperty {
	
	};
	/**
 * @returns The float property that controls local rotation of the node around the y axis.
*/
	getYRotControl():DzFloatProperty {
	
	};
	/**
 * @returns The float property that controls scaling of the node along the y axis.
*/
	getYScaleControl():DzFloatProperty {
	
	};
	/**
 * @returns The float property that controls the local z position of the node.
*/
	getZPosControl():DzFloatProperty {
	
	};
	/**
 * @returns The float property that controls local rotation of the node around the z axis.
*/
	getZRotControl():DzFloatProperty {
	
	};
	/**
 * @returns The float property that controls scaling of the node along the z axis.
*/
	getZScaleControl():DzFloatProperty {
	
	};
	/**
 * @returns true if this node inherits scale from its parent, otherwise false.
*/
	inheritsScale():Boolean {
	
	};
	/**
 * @description Invalidates the bounding boxes for this node, causing them to be recalculated.
 * @param checkSkeleton - Whether or not to invalidate the bounding box for this node's skeleton, if it has one.
*/
	invalidateBoundingBoxes(checkSkeleton:Boolean):void {
	
	};
	/**
 * @returns true if this node is set invisible by a group node, otherwise false.
*/
	invisibleByGroup():Boolean {
	
	};
	/**
 * @returns true if this node is set invisible in render by a group node, otherwise false.
 * @since 4.9.4.73
*/
	invisibleInRenderByGroup():Boolean {
	
	};
	/**
 * @returns true if this node is set invisible in simulation by a group node, otherwise false.
 * @since 4.9.4.73
*/
	invisibleInSimulationByGroup():Boolean {
	
	};
	/**
 * @returns true if this node is set invisible in view by a group node, otherwise false.
 * @since 4.11.0.36
*/
	invisibleInViewportByGroup():Boolean {
	
	};
	/**
 * @returns true if the parent of this node, or any of its ancestors, is a DzBone and this node or any of its ancestors should redirect their viewport selection to their ancestors.
*/
	isBoneSelectingNode():Boolean {
	
	};
	/**
 * @returns true if this node is considered an editor node, otherwise false.
*/
	isEditorNode():Boolean {
	
	};
	/**
 * @returns true if this node should not be shown in the interface, otherwise false.
*/
	isHidden():Boolean {
	
	};
	/**
 * @returns true if the node is in the scene, otherwise false.
 * @since 4.6.4.67
*/
	isInScene():Boolean {
	
	};
	/**
 * @returns true if the local transform is disabled, otherwise false.
 * @since 4.12.1.68
*/
	isLocalTransformDisabled():Boolean {
	
	};
	/**
 * @returns true if the local transform is ignored, otherwise false.
 * @since 4.12.1.68
*/
	isLocalTransformIgnored():Boolean {
	
	};
	/**
 * @description Checks whether or not a given node is one of this node's ancestors in the scene hierarchy.
 * @returns true if the node is an ancestor of this node in the scene hierarchy, otherwise false.
 * @since 4.15.0.18
 * @param node - The node to look for.
 * @param recurse - Whether or not to ascend the hierarchy.
*/
	isNodeAncestorOf(node:DzNode, recurse:Boolean):Boolean {
	
	};
	/**
 * @description Checks to see if given node is one of this node's immediate children.
 * @returns true if the node is a child of this node in the scene hierarchy, otherwise false.
 * @param node - The node to look for in this node's hierarchy.
*/
	isNodeChild(node:DzNode):Boolean {
	
	};
	/**
 * @description Checks whether or not a given node is one of this node's descendants in the scene hierarchy.
 * @returns true if the node is a descendant of this node in the scene hierarchy, otherwise false.
 * @since 4.15.0.18
 * @param node - The node to look for.
 * @param recurse - Whether or not to descend this node's hierarchy.
*/
	isNodeDescendantOf(node:DzNode, recurse:Boolean):Boolean {
	
	};
	/**
 * @description Check to see if this is a root (top) level node.
 * @returns true if this node has no parent in the scene hierarchy, otherwise false.
*/
	isRootNode():Boolean {
	
	};
	/**
 * @returns true if this node is selectable via the 3D viewport, otherwise false.
*/
	isSelectable():Boolean {
	
	};
	/**
 * @description Get the current selection state of this node.
 * @returns true if the node is selected, otherwise false.
*/
	isSelected():Boolean {
	
	};
	/**
 * @returns true if this node should redirect its viewport selection to its parent, otherwise false.
*/
	isSelectionPromoted():Boolean {
	
	};
	/**
 * @description Get the current visibility status of this node.
 * @returns true if the node is visible, otherwise false.
*/
	isVisible():Boolean {
	
	};
	/**
 * @description Get the current render visibility status of this node.
 * @returns true if the node set to be visible in the render, otherwise false.
 * @since 4.11.0.300
*/
	isVisibleInRender():Boolean {
	
	};
	/**
 * @description Get the current simulation visibility status of this node.
 * @returns true if the node set to be visible in the simulation, otherwise false.
 * @since 4.11.0.300
*/
	isVisibleInSimulation():Boolean {
	
	};
	/**
 * @description Get the current view visibility status of this node.
 * @returns true if the node set to be visible in the viewport, otherwise false.
 * @since 4.11.0.300
*/
	isVisibleInViewport():Boolean {
	
	};
	/**
 * @description Marks the asset as being modified.
 * @returns true on success, otherwise false.
*/
	modifyAsset():Boolean {
	
	};
	/**
 * @description Marks the asset as being modified.
 * @returns true on success, otherwise false.
 * @param newUri - The new file URI for the asset.
*/
	modifyAsset(newUri:DzUri):Boolean {
	
	};
	/**
 * @returns DZ_NO_ERROR on success, otherwise an appropriate error code.
 * @param childIndex - The index for the child to move.
 * @param newChildIndex - The index to put the node at, -1 for end of list, 0 for beginning.
*/
	moveNodeChildToIndex(childIndex:Number, newChildIndex:Number):DzError {
	
	};
	/**
 * @returns DZ_NO_ERROR on success, otherwise an appropriate error code.
 * @param child - The node child to move.
 * @param index - The index to put the node at, -1 for end of list, 0 for beginning.
*/
	moveNodeChildToIndex(child:DzNode, index:Number):DzError {
	
	};
	/**
 * @description Removes all of the child nodes of this node.
*/
	removeAllNodeChildren():void {
	
	};
	/**
 * @description Removes a child from this node.
 * @param child - The node to remove from this node's list of children. A child must be removed from one parent before it can be attached to another.
 * @param inPlace - If true, the necessary transforms to unparent 'In Place' will be calculated and applied to the child.
*/
	removeNodeChild(child:DzNode, inPlace:Boolean):DzError {
	
	};
	/**
 * @description Sets the selection state of this node.
 * @param onOff - If true, sets selection on for this node. If false, sets selection off.
*/
	select(onOff:Boolean):void {
	
	};
	/**
 * @description Sets the end point for this node.
 * @param endPnt - The end point for this node. This is the node's end point in relation to its geometry.
 * @param makeDefault - Whether or not to set the default value as well as the current value.
*/
	setEndPoint(endPnt:DzVec3, makeDefault:Boolean):void {
	
	};
	/**
 * @description Hide or show this node in the interface.
 * @param onOff - If true, the node will not appear in the scene hierarchy. If false, the node will be displayed in the scene hierarchy.
*/
	setHidden(onOff:Boolean):void {
	
	};
	/**
 * @description Sets whether or not this node inherits the scale of its parent.
 * @param onOff - If true, scaling the parent of this node will scale this node also.
*/
	setInheritScale(onOff:Boolean):void {
	
	};
	/**
 * @description Sets whether this nodes visibility is controlled by a DzGroupNode.
*/
	setInvisibleByGroup(yesNo:Boolean):void {
	
	};
	/**
 * @description Sets whether or not this node's visibility to rendering is controlled by a group node.
 * @since 4.9.4.73
*/
	setInvisibleInRenderByGroup(yesNo:Boolean):void {
	
	};
	/**
 * @description Sets whether or not this node's visibility to simulation is controlled by a group node.
 * @since 4.9.4.73
*/
	setInvisibleInSimulationByGroup(yesNo:Boolean):void {
	
	};
	/**
 * @description Sets whether or not this node's visibility to viewport drawing is controlled by a group node.
 * @since 4.11.0.36
*/
	setInvisibleInViewportByGroup(yesNo:Boolean):void {
	
	};
	/**
 * @description Sets local-space translation for this node at the current time.
 * @param posLocal - The local-space translation for this node.
*/
	setLocalPos(posLocal:DzVec3):void {
	
	};
	/**
 * @description Sets local-space translation for this node.
 * @param tm - The scene time at which to set the transform for this node.
 * @param posLocal - The local-space translation for this node.
*/
	setLocalPos(tm:DzTime, posLocal:DzVec3):void {
	
	};
	/**
 * @description Sets local-space rotation for this node at the current time.
 * @param rotLocal - The local-space rotation for this node.
*/
	setLocalRot(rotLocal:DzQuat):void {
	
	};
	/**
 * @description Sets local-space rotation for this node.
 * @param tm - The scene time at which to set the transform for this node.
 * @param rotLocal - The local-space rotation for this node.
*/
	setLocalRot(tm:DzTime, rotLocal:DzQuat):void {
	
	};
	/**
 * @description Sets local-space scale for this node.
 * @param tm - The scene time at which to set the transform for this node.
 * @param scaleLocal - The local-space scale for this node.
*/
	setLocalScale(tm:DzTime, scaleLocal:DzMatrix3):void {
	
	};
	/**
 * @description Sets local-space scale for this node at the current time.
 * @param scaleLocal - The local-space scale for this node.
 * @param generalScale - The general scale factor for this node.
*/
	setLocalScale(scaleLocal:DzMatrix3, generalScale:Number):void {
	
	};
	/**
 * @description Sets local-space scale for this node.
 * @param tm - The scene time at which to set the transform for this node.
 * @param scaleLocal - The local-space scale for this node.
 * @param generalScale - The general scale factor for this node.
*/
	setLocalScale(tm:DzTime, scaleLocal:DzMatrix3, generalScale:Number):void {
	
	};
	/**
 * @description Sets local-space scale for this node at the current time.
 * @param scaleLocal - The local-space scale for this node.
*/
	setLocalScale(scaleLocal:DzMatrix3):void {
	
	};
	/**
 * @description Calculates the local transform matrix for this node at the current time.
 * @param posLocal - The local-space position offset for this node.
 * @param rotLocal - The local-space rotation for this node.
 * @param scaleLocal - The local-space scale for this node.
*/
	setLocalTransform(posLocal:DzVec3, rotLocal:DzQuat, scaleLocal:DzMatrix3):void {
	
	};
	/**
 * @description Calculates the local transform matrix for this node at the given time.
 * @param tm - The scene time at which to set the transform for this node.
 * @param posLocal - The local-space position offset for this node.
 * @param rotLocal - The local-space rotation for this node.
 * @param scaleLocal - The local-space scale for this node.
*/
	setLocalTransform(tm:DzTime, posLocal:DzVec3, rotLocal:DzQuat, scaleLocal:DzMatrix3):void {
	
	};
	/**
 * @description Calculates the local transform matrix for this node at the current time.
 * @param posLocal - The local-space position offset for this node.
 * @param rotLocal - The local-space rotation for this node.
 * @param scaleLocal - The local-space scale for this node.
 * @param generalScale - The general scale for the transform.
*/
	setLocalTransform(posLocal:DzVec3, rotLocal:DzQuat, scaleLocal:DzMatrix3, generalScale:Number):void {
	
	};
	/**
 * @description Calculates the local transform matrix for this node at the given time.
 * @param tm - The scene time at which to set the transform for this node.
 * @param posLocal - The local-space position offset for this node.
 * @param rotLocal - The local-space rotation for this node.
 * @param scaleLocal - The local-space scale for this node.
 * @param generalScale - The general scale for the transform.
*/
	setLocalTransform(tm:DzTime, posLocal:DzVec3, rotLocal:DzQuat, scaleLocal:DzMatrix3, generalScale:Number):void {
	
	};
	/**
 * @description Sets whether or not the local transform for this node is disabled.
 * @since 4.12.1.68
 * @param onOff - If true, the transform controls are disabled and the local transform for this node is overridden to be identity.
*/
	setLocalTransformDisabled(onOff:Boolean):void {
	
	};
	/**
 * @description Sets whether or not the local transform of this node is ignored.
 * @since 4.12.1.68
 * @param onOff - If true, the local transform for this node is not applied to any associated geometry.
*/
	setLocalTransformIgnored(onOff:Boolean):void {
	
	};
	/**
 * @description Sets the override color to be used to draw the node while using manipulation draw styles.
 * @param color - The value for the override color.
*/
	setManipOverColor(color:Color):void {
	
	};
	/**
 * @description Sets the object for this node.
 * @param object - The object that will be drawn by this node. The node takes ownership of this object and deletes it when it is no longer used.
*/
	setObject(object:DzObject):void {
	
	};
	/**
 * @description Sets the orientation for this node.
 * @param orientation - The orientation for this node. This defines the space in which node rotations occur.
 * @param makeDefault - Whether or not to set the default value as well as the current value.
*/
	setOrientation(orientation:DzQuat, makeDefault:Boolean):void {
	
	};
	/**
 * @description Sets the orientation for this node.
 * @param angles - The orientation for this node in degrees. This defines the space in which node rotations occur.
 * @param makeDefault - Whether or not to set the default value as well as the current value.
*/
	setOrientationAngles(angles:DzVec3, makeDefault:Boolean):void {
	
	};
	/**
 * @description Sets the origin for this node.
 * @param origin - The origin for this node. This is the node's center point in relation to its geometry.
 * @param makeDefault - Whether or not to set the default value as well as the current value.
*/
	setOrigin(origin:DzVec3, makeDefault:Boolean):void {
	
	};
	/**
 * @description Set the strength of the point at parameter.
 * @param strength - A value in the range [0.0, 1.0] that determines how closely this node aims at its point-at target.
*/
	setPointAtStrength(strength:Number):void {
	
	};
	/**
 * @description Set the target for this node to be pointed toward.
 * @param target - The node whose origin will serve as the target of point-at functionality.
*/
	setPointAtTarget(target:DzNode):DzNode {
	
	};
	/**
 * @description Sets the presentation for this node.
 * @param pres - The new presentation for this node.
*/
	setPresentation(pres:DzPresentation):void {
	
	};
	/**
 * @description Sets the preview box for this node.
 * @param box - The oriented box to set.
*/
	setPreviewBox(box:DzOrientedBox3):void {
	
	};
	/**
 * @description Sets whether or not to redirect selection.
 * @param onOff - If true, the node will redirect its selection to its parent.
*/
	setPromoteSelection(onOff:Boolean):void {
	
	};
	/**
 * @description Sets the node rotation order.
 * @param order - The order that the axis rotations will be applied in for this node.
*/
	setRotationOrder(order:DzRotationOrder):void {
	
	};
	/**
 * @description Sets whether or not this node is selectable via the 3D viewport.
 * @param onOff - If true, the node will be selectable (the default). If false, the node will not participate in the pick image.
*/
	setSelectable(onOff:Boolean):void {
	
	};
	/**
 * @description Sets the selection map to use for this node.
 * @param map - The selection map to use for this node.
*/
	setSelectionMap(map:DzSelectionMap):void {
	
	};
	/**
 * @description Sets the local-space rotation for this node, in the context of the current tool, at the current time.
 * @param tm - The scene time at which to set the transform for this node.
 * @param rotLocal - The local-space rotation for this node.
*/
	setToolLocalRot(tm:DzTime, rotLocal:DzQuat):void {
	
	};
	/**
 * @description Sets the local-space rotation for this node, in the context of the current tool.
 * @param rotLocal - The local-space rotation for this node.
*/
	setToolLocalRot(rotLocal:DzQuat):void {
	
	};
	/**
 * @description Calculates the local transform matrix for this node at the current time, in the context of the current tool.
 * @since 4.9.3.16
 * @param posLocal - The local-space position offset for this node.
 * @param rotLocal - The local-space rotation for this node.
 * @param scaleLocal - The local-space scale for this node.
 * @param generalScale - The general scale for the transform.
*/
	setToolLocalTransform(posLocal:DzVec3, rotLocal:DzQuat, scaleLocal:DzMatrix3, generalScale:Number):void {
	
	};
	/**
 * @description Calculates the local transform matrix for this node at the current time, in the context of the current tool.
 * @since 4.9.3.16
 * @param posLocal - The local-space position offset for this node.
 * @param rotLocal - The local-space rotation for this node.
 * @param scaleLocal - The local-space scale for this node.
*/
	setToolLocalTransform(posLocal:DzVec3, rotLocal:DzQuat, scaleLocal:DzMatrix3):void {
	
	};
	/**
 * @description Calculates the local transform matrix for this node at the given time, in the context of the current tool.
 * @since 4.8.1.13
 * @param tm - The scene time at which to set the transform for this node.
 * @param posLocal - The local-space position offset for this node.
 * @param rotLocal - The local-space rotation for this node.
 * @param scaleLocal - The local-space scale for this node.
 * @param generalScale - The general scale for the transform.
*/
	setToolLocalTransform(tm:DzTime, posLocal:DzVec3, rotLocal:DzQuat, scaleLocal:DzMatrix3, generalScale:Number):void {
	
	};
	/**
 * @description Calculates the local transform matrix for this node, in the context of the current tool, at the given time.
 * @since 4.8.1.13
 * @param tm - The scene time at which to set the transform for this node.
 * @param posLocal - The local-space position offset for this node.
 * @param rotLocal - The local-space rotation for this node.
 * @param scaleLocal - The local-space scale for this node.
*/
	setToolLocalTransform(tm:DzTime, posLocal:DzVec3, rotLocal:DzQuat, scaleLocal:DzMatrix3):void {
	
	};
	/**
 * @description Sets the world-space rotation for this node at the current time, in the context of the current tool.
 * @since 4.9.3.16
 * @param rotWS - The world-space rotation for this node.
*/
	setToolWSRot(rotWS:DzQuat):void {
	
	};
	/**
 * @description Sets the world-space rotation for this node, in the context of the current tool.
 * @since 4.9.3.16
 * @param tm - The scene time at which to set the rotation for this node.
 * @param rotWS - The world-space rotation for this node.
*/
	setToolWSRot(tm:DzTime, rotWS:DzQuat):void {
	
	};
	/**
 * @description Sets the world-space transform values for this node at the current time, in the context of the current tool.
 * @since 4.9.3.16
 * @param posWS - The world-space position offset for this node.
 * @param rotWS - The world-space rotation for this node.
 * @param scaleWS - The world-space scale for this node.
*/
	setToolWSTransform(posWS:DzVec3, rotWS:DzQuat, scaleWS:DzMatrix3):void {
	
	};
	/**
 * @description Sets the world-space transform values for this node, in the context of the current tool.
 * @since 4.9.3.16
 * @param tm - The scene time at which to set the transform for this node.
 * @param posWS - The world-space position offset for this node.
 * @param rotWS - The world-space rotation for this node.
 * @param scaleWS - The world-space scale for this node.
*/
	setToolWSTransform(tm:DzTime, posWS:DzVec3, rotWS:DzQuat, scaleWS:DzMatrix3):void {
	
	};
	/**
 * @description Sets whether or not this node's selectability is controlled by a group node.
*/
	setUnselectableByGroup(yesNo:Boolean):void {
	
	};
	/**
 * @description Sets whether or not this node is visible in the viewport, in renders and in simulations.
 * @param onOff - If true, the node will be visible (the default). If false, the node will not be drawn in the viewport, will not be rendered and will not be simulated.
*/
	setVisible(onOff:Boolean):void {
	
	};
	/**
 * @description Sets whether or not this node is visible during a render.
 * @param onOff - If true, the node is visible during a render, otherwise it is not.
*/
	setVisibleInRender(onOff:Boolean):void {
	
	};
	/**
 * @description Sets whether or not this node is visible during a simulation.
 * @since 4.9.4.25
 * @param onOff - If true, the node is visible during a simulation, otherwise it is not.
*/
	setVisibleInSimulation(onOff:Boolean):void {
	
	};
	/**
 * @description Sets whether or not this node is visible in the 3D viewport.
 * @since 4.11.0.36
 * @param onOff - If true, the node will be visible (the default). If false, the node will not be drawn in the 3D viewport.
*/
	setVisibleInViewport(onOff:Boolean):void {
	
	};
	/**
 * @description Sets the world-space translation for this node at the current time.
 * @param vec - The world-space translation for this node.
*/
	setWSPos(posWS:DzVec3):void {
	
	};
	/**
 * @description Sets the world-space translation for this node.
 * @param tm - The scene time at which to set the transform for this node.
 * @param vec - The world-space translation for this node.
*/
	setWSPos(tm:DzTime, posWS:DzVec3):void {
	
	};
	/**
 * @description Sets the world-space rotation for this node at the current time.
 * @param rotWS - The world-space rotation for this node.
*/
	setWSRot(rotWS:DzQuat):void {
	
	};
	/**
 * @description Sets the world-space rotation for this node.
 * @param tm - The scene time at which to set the transform for this node.
 * @param rotWS - The world-space rotation for this node.
*/
	setWSRot(tm:DzTime, rotWS:DzQuat):void {
	
	};
	/**
 * @description Sets the world-space scale for this node.
 * @param tm - The scene time at which to set the transform for this node.
 * @param scaleWS - The world-space scale for this node.
*/
	setWSScale(tm:DzTime, scaleWS:DzMatrix3):void {
	
	};
	/**
 * @description Sets the world-space scale for this node at the current time.
 * @param scaleWS - The world-space scale for this node.
*/
	setWSScale(scaleWS:DzMatrix3):void {
	
	};
	/**
 * @description Sets the world-space transform values for this node at the current time.
 * @param posWS - The world-space position offset for this node.
 * @param rotWS - The world-space rotation for this node.
 * @param scaleWS - The world-space scale for this node.
*/
	setWSTransform(posWS:DzVec3, rotWS:DzQuat, scaleWS:DzMatrix3):void {
	
	};
	/**
 * @description Sets the world-space transform values for this node.
 * @param tm - The scene time at which to set the transform for this node.
 * @param posWS - The world-space position offset for this node.
 * @param rotWS - The world-space rotation for this node.
 * @param scaleWS - The world-space scale for this node.
*/
	setWSTransform(tm:DzTime, posWS:DzVec3, rotWS:DzQuat, scaleWS:DzMatrix3):void {
	
	};
	/**
 * @returns true if this node is set unselectable by a group node, otherwise false.
*/
	unselectableByGroup():Boolean {
	
	};
	/**
 * @description Called to update any cached or display data for this object.
 * @param isRender - If true, the node should prepare itself for a render quality presentation.
*/
	update(isRender:Boolean):void {
	
	};
	/**
 * @description Update the orientation of the node.
*/
	updateOrientation():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted immediately before the node is removed from the scene.
 * @signature `"aboutToBeRemoved()"`
 * @event
*/
	aboutToBeRemoved():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the node is about to be deleted.
 * @signature `"aboutToDelete(DzNode*)"`
 * @event
*/
	aboutToDelete(node:DzNode):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the node is added to the scene.
 * @signature `"added()"`
 * @event
*/
	added():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the node has been modified.
 * @signature `"assetModified()"`
 * @event
*/
	assetModified():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted after the node has been saved.
 * @signature `"assetWasSaved()"`
 * @event
*/
	assetWasSaved():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted after the bounding box for this node has been invalidated.
 * @signature `"boundBoxInvalidated()"`
 * @event
*/
	boundBoxInvalidated():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when a child is added to the node.
 * @signature `"childAdded(DzNode*)"`
 * @event
*/
	childAdded(child:DzNode):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when a child is added to or removed from the node.
 * @signature `"childListChanged()"`
 * @event
*/
	childListChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted after the order of this node's children has changed.
 * @signature `"childListOrderChanged()"`
 * @event
*/
	childListOrderChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when a child is removed from the node.
 * @signature `"childRemoved(DzNode*)"`
 * @event
*/
	childRemoved(child:DzNode):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the visual representation of this node needs to be redrawn.
 * @signature `"drawnDataChanged()"`
 * @event
*/
	drawnDataChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the hidden state of this node is changed.
 * @signature `"hiddenChanged(bool)"`
 * @event
*/
	hiddenChanged(hidden:Boolean):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the state of this node's scale inheritance has changed.
 * @signature `"inheritScaleChanged()"`
 * @event
*/
	inheritScaleChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the list of materials for this node has changed.
 * @signature `"materialListChanged()"`
 * @event
*/
	materialListChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the list of selected materials for this node has changed.
 * @signature `"materialSelectionChanged()"`
 * @event
*/
	materialSelectionChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the material selection sets for this node has changed.
 * @signature `"materialSelectionSetsChanged()"`
 * @event
*/
	materialSelectionSetsChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when a different object becomes associated with this node.
 * @signature `"objectSwitched(DzNode*,DzObject*,DzObject*)"`
 * @event
*/
	objectChanged(node:DzNode, oldObject:DzObject, newObject:DzObject):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the parent of this node changes.
 * @signature `"parentChanged(DzNode*,DzNode*,DzNode*)"`
 * @event
*/
	parentChanged(node:DzNode, oldParent:DzNode, newParent:DzNode):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the parent hierarchy for this node has changed.
 * @signature `"parentHierarchyChanged(DzNode*)"`
 * @event
*/
	parentHierarchyChanged(node:DzNode):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when this node's selection promotion has changed.
 * @signature `"promoteSelectionChanged(bool)"`
 * @event
*/
	promoteSelectionChanged(promoteSelection:Boolean):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the node is removed from the scene.
 * @signature `"removed()"`
 * @event
*/
	removed():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the rotation order, orientation, center point, or end point for this node have changed.
 * @signature `"riggingChanged()"`
 * @event
*/
	riggingChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the rotation order of this node changes.
 * @signature `"rotationOrderChanged()"`
 * @event
*/
	rotationOrderChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the selectability of the node has changed.
 * @signature `"selectabilityChanged()"`
 * @event
*/
	selectabilityChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Eitted when the selection state of this node changes.
 * @signature `"selected(DzNode*,bool)"`
 * @event
*/
	selected(node:DzNode, onOff:Boolean):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the topology for this node has changed.
 * @signature `"topologyChanged()"`
 * @event
*/
	topologyChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when transformation properties of this node change.
 * @signature `"transformChanged()"`
 * @event
*/
	transformChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the current uv set for this node has changed.
 * @signature `"uvsChanged()"`
 * @event
*/
	uvsChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the visibility of the node has changed.
 * @signature `"visibilityChanged()"`
 * @event
*/
	visibilityChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the visibility of the node in renders has changed.
 * @signature `"visibilityInRenderChanged()"`
 * @event
*/
	visibilityInRenderChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the visibility of the node in simulations has changed.
 * @signature `"visibilityInSimulationChanged()"`
 * @event
*/
	visibilityInSimulationChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the visibility of the node in viewports has changed.
 * @signature `"visibilityInViewportChanged()"`
 * @event
*/
	visibilityInViewportChanged():void {
	
	};

}
/**
 * @classdesc See Also:
Attention:
Since:@attention Attention:
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/nodealigner_dz} */
class DzNodeAligner extends QObject {
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static NoneX;
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static AlignXLefts;
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static AlignXCenters;
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static AlignXOrigins;
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static AlignXRights;
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static StackXLefts;
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static StackXRights;
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static DistributeXLefts;
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static DistributeXCenters;
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static DistributeXOrigins;
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static DistributeXRights;
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static NoneY;
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static AlignYTops;
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static AlignYCenters;
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static AlignYOrigins;
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static AlignYBottoms;
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static StackYTops;
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static StackYBottoms;
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static DistributeYTops;
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static DistributeYCenters;
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static DistributeYOrigins;
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static DistributeYBottoms;
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static NoneZ;
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static AlignZFronts;
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static AlignZCenters;
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static AlignZOrigins;
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static AlignZBacks;
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static StackZFronts;
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static StackZBacks;
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static DistributeZFronts;
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static DistributeZCenters;
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static DistributeZOrigins;
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static DistributeZBacks;
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static UnitsM;
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static UnitsCM;
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static UnitsYD;
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static UnitsFT;
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static UnitsIN;
	/**
 * @description Default Constructor.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Adds a node to the list of node to be processed.
 * @returns DZ_NO_ERROR (0x00000000) if node was sucessfully added to the list, DZ_ALREADY_EXISTS_ERROR (0x00000050) if node is already in the list, and DZ_ILLEGAL_ARGUMENT_ERROR (0x00000060) if node is null.
 * @param node - The node to add to the list.
 * @attention The order that nodes are added to the list impacts the results of the alignment operation. The first node in the list is used as the basis for any Align, Stack or Distribute operations. The last node in the list is used to establish the range for Distribute operations. All other nodes in the list are processed in their respective order within the list.
*/
	addNode(node:DzNode):DzError {
	
	};
	/**
 * @returns true if the current list of nodes, in conjuction with the current option configuration, can be applied, otherwise false.
 * @attention At least one alignment axis must be set to a value other than "None." Aligning "To Grid" (UseInterval) requires at least one (1) node to be added. Aligning without using an interval requires at least two (2) nodes to be added. Distributing, with or without using an interval, requires at least three (3) nodes to be added. If any "UseInterval" option is active, the corresponding value must be greater than 0. No more than one (1) node within the hierarchy of a given skeleton can be added.
*/
	canAlign():Boolean {
	
	};
	/**
 * @description Clears the list of nodes to be processed.
*/
	clearNodes():void {
	
	};
	/**
 * @description Performs an alignment of nodes, based on the current options set.
 * @returns true if the alignment operation was successful, otherwise false.
*/
	doAlign():Boolean {
	
	};
	/**
 * @returns The list of nodes that alignment operations will be performed on (if any), otherwise an empty list.
*/
	getNodes():Array {
	
	};
	/**
 * @returns The align operation to perform along the X axis.
*/
	getXAlign():void {
	
	};
	/**
 * @returns The number of units along the X axis, in the specified size.
 * @param size - The size of units to get.
*/
	getXUnits(size:UnitSize):Number {
	
	};
	/**
 * @returns true if using an interval along the X axis is enabled, otherwise false.
*/
	getXUseInterval():Boolean {
	
	};
	/**
 * @returns The align operation to perform along the Y axis.
*/
	getYAlign():void {
	
	};
	/**
 * @returns The number of units along the Y axis, in the specified size.
 * @param size - The size of units to get.
*/
	getYUnits(size:UnitSize):Number {
	
	};
	/**
 * @returns true if using an interval along the Y axis is enabled, otherwise false.
*/
	getYUseInterval():Boolean {
	
	};
	/**
 * @returns The align operation to perform along the Z axis.
*/
	getZAlign():void {
	
	};
	/**
 * @returns The number of units along the Z axis, in the specified size.
 * @param size - The size of units to get.
*/
	getZUnits(size:UnitSize):Number {
	
	};
	/**
 * @returns true if using an interval along the Z axis is enabled, otherwise false.
*/
	getZUseInterval():Boolean {
	
	};
	/**
 * @description Sets the align operation to perform along the X axis.
 * @param align - The align operation to perform.
*/
	setXAlign(align:AlignX):void {
	
	};
	/**
 * @description Sets the interval to use along the X axis.
 * @param units - The number of units to set.
 * @param size - The size of the unit to set.
*/
	setXUnits(units:Number, size:UnitSize):void {
	
	};
	/**
 * @description Sets whether or not to use an interval along the X axis.
 * @param onOff - If true, the interval is used.
 * @attention Intervals can be used for Align (grid) and Stack (space) operations, but have no meaning for Distribute operations.
*/
	setXUseInterval(onOff:Boolean):void {
	
	};
	/**
 * @description Sets the align operation to perform along the Y axis.
 * @param align - The align operation to perform.
*/
	setYAlign(align:AlignY):void {
	
	};
	/**
 * @description Sets the interval to use along the Y axis.
 * @param units - The number of units to set.
 * @param size - The size of the unit to set.
*/
	setYUnits(units:Number, size:UnitSize):void {
	
	};
	/**
 * @description Sets whether or not to use an interval along the Y axis.
 * @param onOff - If true, the interval is used.
 * @attention Intervals can be used for Align (grid) and Stack (space) operations, but have no meaning for Distribute operations.
*/
	setYUseInterval(onOff:Boolean):void {
	
	};
	/**
 * @description Sets the align operation to perform along the Z axis.
 * @param align - The align operation to perform.
*/
	setZAlign(align:AlignZ):void {
	
	};
	/**
 * @description Sets the interval to use along the Z axis.
 * @param units - The number of units to set.
 * @param size - The size of the unit to set.
*/
	setZUnits(units:Number, size:UnitSize):void {
	
	};
	/**
 * @description Sets whether or not to use an interval along the Z axis.
 * @param onOff - If true, the interval is used.
 * @attention Intervals can be used for Align (grid) and Stack (space) operations, but have no meaning for Distribute operations.
*/
	setZUseInterval(onOff:Boolean):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the state of whether or not alignment is possible has changed.
 * @signature `"canAlignChanged(bool)"`
 * @event
*/
	canAlignChanged(onOff:Boolean):void {
	
	};

}
/**
 * @classdesc 
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/nodeproperty_dz} */
class DzNodeProperty extends DzProperty {
	/**
 * @description Constructor. Creates a non-animatable, non-user property.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @param name - The name of this property.
 * @param canAnimate - If true, creates an animatable property.
 * @param isUserProperty - If true, creates a user property; user properties are properties that can be added/deleted by users.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Excludes the given node from becoming the value of this property.
 * @param node - The node to exclude.
*/
	exclude(node:DzNode):void {
	
	};
	/**
 * @returns The default value of the property (if any), otherwise NULL.
*/
	getDefaultValue():DzNode {
	
	};
	/**
 * @returns The value of the property at the given key (if any), otherwise NULL.
 * @param index - The index of the key to get a value for.
*/
	getKeyValue(i:Number):DzNode {
	
	};
	/**
 * @returns The value of the property at the given time (if any), otherwise NULL.
 * @param tm - The scene time for which to get the value of the property.
*/
	getValue(tm:DzTime):DzNode {
	
	};
	/**
 * @returns The value of the property (if any), otherwise NULL.
*/
	getValue():DzNode {
	
	};
	/**
 * @returns true if the given node is excluded from becoming the value of this property, otherwise false.
 * @param node - The node to check for exclusion.
*/
	isExcluded(node:DzNode):Boolean {
	
	};
	/**
 * @description Set the default value of the property.
 * @param val - The default value for this property.
*/
	setDefaultValue(val:DzNode):void {
	
	};
	/**
 * @description Set the value of the property for the given key.
 * @param which - The index of the key to set a value for.
 * @param val - The node to associate with the given key.
*/
	setKeyValue(which:Number, val:DzNode):void {
	
	};
	/**
 * @description Set the value of the property.
 * @param val - The node to associate with this property.
*/
	setValue(val:DzNode):void {
	
	};
	/**
 * @description Set the value of the property at the given time.
 * @param tm - The scene time for which to set the value.
 * @param val - The node to associate with this property.
*/
	setValue(tm:DzTime, val:DzNode):void {
	
	};
	/**
 * @description Removes the given node from the list of excluded nodes.
 * @since 4.12.1.83
 * @param node - The node to unexclude.
*/
	unexclude(node:DzNode):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted immediately before the value of the property changes.
 * @signature `"aboutToChange()"`
 * @event
*/
	aboutToChange():void {
	
	};

}
/**
 * @classdesc Provides a DzComboBox like widget with a custom popup designed for choosing a DzNode.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/nodeselectioncombobox_dz} */
class DzNodeSelectionComboBox extends DzWidget {
	/**
 * @description Creates a node selection combobox as a child of the given parent widget.
 * @param parent - The widget parent for the combobox.
 * @param nodeType - The name of the DzNode [sub]class that root nodes must inherit to be shown in the list
 * @param allowNode - Whether or not to provide a "None" option in the list
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Clears the selection of any node(s).
 * @since 4.10.0.27
*/
	clearNodeSelection():void {
	
	};
	/**
 * @returns The list of nodes to be shown in the popup.
*/
	getNodes():Array {
	
	};
	/**
 * @returns The node selected in the popup.
*/
	getSelectedNode():DzNode {
	
	};
	/**
 * @description Hide the popup.
*/
	hidePopup():void {
	
	};
	/**
 * @description Sets the node from the scene to be shown in the popup.
 * @param node - The DzNode to show.
*/
	setNode(node:DzNode):void {
	
	};
	/**
 * @description Sets the nodes from the scene to be shown in the popup.
 * @param nodes - A list of the DzNode objects to show.
*/
	setNodes(nodes:Array):void {
	
	};
	/**
 * @description Sets the node from the scene to be selected.
 * @param node - The DzNode to select.
*/
	setSelectedNode(node:DzNode):void {
	
	};
	/**
 * @description Display the popup.
*/
	showPopup():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the selected DzNode changes.
 * @signature `"nodeSelectionChanged()"`
 * @event
*/
	nodeSelectionChanged():void {
	
	};

}
/**
 * @classdesc An asset save filter for saving Figure or Prop Support Assets in the DSON format.
See Also:
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/nodesupportassetfilter_dz} */
class DzNodeSupportAssetFilter extends DzAssetFileOutFilter {
	/**
 * @description TODO:
Add description.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @returns The node set (if any) on this save filter.
 * @attention If a node is not set on this save filter, the primary selection in the scene is used.
*/
	getSetNode():DzNode {
	
	};
	/**
 * @description Sets a node to save support assets for.
 * @param node - The node to set.
 * @attention If node is NULL or a node is not set on this save filter, the primary selection in the scene will be used.
*/
	setNode(node:DzNode):void {
	
	};

}
/**
 * @classdesc 
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/notinstalledproductasset_dz} */
class DzNotInstalledProductAsset extends DzRefCountedItem, DzAsset {
	/**
 * @description Installs the product via the cloud.
 * @since 4.11.0.193
*/
	installFromCloud():void {
	
	};
	/**
 * @description Loads the icon for the asset.
*/
	loadIcon():void {
	
	};

}
/**
 * @classdesc This is the base class for all controllers that can control the value of a DzNumericProperty-derived object. DzNumericProperty objects can have multiple controllers, these controllers are applied in the order they appear in the controller list.
The application of controllers in a DzNumeric-derived property begins with the keyed (raw) value of the property at the given time, this is the value that is passed to the apply() function of the first controller. The result returned by the apply() call to the first controller is then passed into the apply() function on the second controller, and so on. The result returned by the apply() function of the last controller on the property is then returned as the final value of the property for the given time.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/numericcontroller_dz} */
class DzNumericController extends DzController {
	/**
 * @description This function is called to apply the controller to the numeric property that it controls.
 * @returns The final value for the property
 * @param val - The raw value of the property
 * @param tm - The scene time at which the controller is being evaluated
*/
	apply(val:Number, tm:DzTime, local:Boolean):Number {
	
	};
	/**
 * @description This function is called to 'unapply' the controller to the numeric property that it controls.
 * @returns The raw value for the property
 * @param val - The final value of the property
 * @param tm - The scene time at which the controller is being evaluated
*/
	applyInverse(val:Number, tm:DzTime, local:Boolean):Number {
	
	};

}
/**
 * @classdesc This property tracks both a numeric value and a node value - it is essentially a combination of a DzFloatProperty and a DzNodeProperty in a single property. The main benefit of this is to display the settings to the user as a single parameter, it also provides several conveniences for the programmer in linking the two values together. Currently, this property is used by DzNode to implement the 'Point At' parameter.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/numericnodeproperty_dz} */
class DzNumericNodeProperty extends DzFloatProperty {
	/**
 * @description Default Constructor. Creates a non-animatable, non-user property.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @param name - The name of this property.
 * @param canAnimate - If true, creates an animatable property.
 * @param isUserProperty - If true, creates a user property; user properties are properties that can be added/deleted by users.
 * @param initVal - The initial value of the property.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @returns The node that is assigned to this property.
*/
	getNode():DzNode {
	
	};
	/**
 * @returns true if the value of this property is invalid unless a node is assigned, otherwise false.
*/
	isInvalidWithoutNode():Boolean {
	
	};
	/**
 * @description Sets whether or not this property value is valid when no node is assigned.
 * @param onOff - If true, this property must have a node associated with it.
*/
	setMustHaveNode(onOff:Boolean):void {
	
	};
	/**
 * @description Set the node for this property.
 * @param node - The node to associate with this property.
*/
	setNode(node:DzNode):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when this property's invalid without node state has changed.
 * @signature `"invalidWithoutNodeChanged(bool)"`
 * @event
*/
	invalidWithoutNodeChanged(onOff:Boolean):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the node associated with this property has changed.
 * @signature `"nodeChanged(DzNode*)"`
 * @event
*/
	nodeChanged(node:DzNode):void {
	
	};

}
/**
 * @classdesc TODO:
Add detailed description.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/numericproperty_dz} */
class DzNumericProperty extends DzProperty {
	/**
 * @description ENUMERATOR: Default - this property is not associated with an axis.
*/
	
	static NO_INTEREST;
	/**
 * @description ENUMERATOR: Value is used by an X Axis control.
*/
	
	static X_INTEREST;
	/**
 * @description ENUMERATOR: Value is used by an Y Axis control.
*/
	
	static Y_INTEREST;
	/**
 * @description ENUMERATOR: Value is used by an Z Axis control.
*/
	
	static Z_INTEREST;
	/**
 * @description ENUMERATOR: Value is used by the General Scale control.
*/
	
	static ALL_INTEREST;
	/**
 * @description Clear the image map for this property.
*/
	clearMap():void {
	
	};
	/**
 * @description Copies the map from another property to this one.
 * @since 4.9.2.61
 * @param otherProp - The property to copy the map from.
*/
	copyMapFrom(otherProp:DzNumericProperty):DzNumericProperty {
	
	};
	/**
 * @returns true if the clamp on this property changes its value, otherwise false.
 * @since 4.9.0.24
*/
	doesClampChangeValue():Boolean {
	
	};
	/**
 * @description Searches node for a property that matches the name of this property.
 * @param node - The node to search.
 * @param useStrictMatching - If true (default), any found property will only be considered a match if it is the same type as this property. If false, any found property will be considered a match if it inherits from DzNumericProperty.
*/
	findMatchingProperty(node:DzNode, useStrictMatching:Boolean):DzProperty {
	
	};
	/**
 * @returns The default map gamma.
 * @since 4.5.2.23
*/
	getDefaultMapGamma():Number {
	
	};
	/**
 * @returns The default map texture type.
 * @since 4.6.4.30
*/
	getDefaultMapTextureType():Number {
	
	};
	/**
 * @returns The default value of this property as a double precision value.
*/
	getDoubleDefaultValue():Number {
	
	};
	/**
 * @returns The value of this property, as a double precision number, at the given time.
 * @param tm - The scene time to get the value for.
*/
	getDoubleValue(tm:DzTime):Number {
	
	};
	/**
 * @returns The value of the property at the current time, as a double precision number.
*/
	getDoubleValue():Number {
	
	};
	/**
 * @returns The property that this property is connected to via auto-follow. If this property cannot auto-follow or is not connected to a property via auto-follow, then this method returns null.
*/
	getFollowProperty():DzNumericProperty {
	
	};
	/**
 * @returns The difference between the current value of the follow property and its default value at the current time. If no auto-follow property is set, or auto-follow is not enabled for this property, then this method returns 0.
*/
	getFollowValue():Number {
	
	};
	/**
 * @returns The difference between the current value of the follow property and this properties default value tm. If no auto-follow property is set, or auto-follow is not enabled for this property, then this method returns 0.
 * @param tm - The scene time for which to get the value.
*/
	getFollowValue(tm:DzTime):Number {
	
	};
	/**
 * @returns The property that this property is directly linked to (if any), otherwise NULL.
*/
	getLinkProperty():DzNumericProperty {
	
	};
	/**
 * @returns The image map at the current time (if any), otherwise null.
*/
	getMapValue():DzTexture {
	
	};
	/**
 * @returns The image map for the given time (if any), otherwise null.
 * @param time - The time at which to get the map value for this property.
*/
	getMapValue(time:DzTime):DzTexture {
	
	};
	/**
 * @returns A list of the values this property has.
 * @since 4.6.4.98
*/
	getNDoubleValue():Array {
	
	};
	/**
 * @returns A list of the values this property has.
 * @since 4.6.4.98
 * @param tm - The scene time at which to get the value.
*/
	getNDoubleValue(tm:DzTime):Array {
	
	};
	/**
 * @returns The number of values this property has.
 * @since 4.6.4.98
*/
	getNValueCount():Number {
	
	};
	/**
 * @returns The texture modifier for this property (if any), otherwise NULL.
 * @since 4.6.4.80
*/
	getTextureModifier():DzTextureModifier {
	
	};
	/**
 * @returns The texture modifier flags.
 * @since 4.6.4.82
*/
	getTextureModifierFlags():Number {
	
	};
	/**
 * @returns The value of this property as a DzFloatColor.
 * @since 4.7.1.56
 * @param tm - The scene time at which to get the value.
*/
	getValueAsFloatColor(tm:DzTime):DzFloatColor {
	
	};
	/**
 * @returns The value of this property as a float color.
 * @since 4.7.1.56
*/
	getValueAsFloatColor():DzFloatColor {
	
	};
	/**
 * @returns The value of this property as a DzInt2.
 * @since 4.7.1.56
*/
	getValueAsInt2():DzInt2 {
	
	};
	/**
 * @returns The value of this property as a DzInt2.
 * @since 4.7.1.56
 * @param tm - The scene time at which to get the value.
*/
	getValueAsInt2(tm:DzTime):DzInt2 {
	
	};
	/**
 * @returns The value of this property as a DzVec2.
 * @since 4.7.1.56
*/
	getValueAsVec2():DzVec2 {
	
	};
	/**
 * @returns The value of this property as a DzVec2.
 * @since 4.7.1.56
 * @param tm - The scene time at which to get the value.
*/
	getValueAsVec2(tm:DzTime):DzVec2 {
	
	};
	/**
 * @returns The value of this property as a DzVec3.
 * @since 4.7.1.56
*/
	getValueAsVec3():DzVec3 {
	
	};
	/**
 * @returns The value of this property as a DzVec3.
 * @since 4.7.1.56
 * @param tm - The scene time at which to get the value.
*/
	getValueAsVec3(tm:DzTime):DzVec3 {
	
	};
	/**
 * @returns The XYZ interest for this property (if any).
*/
	getXYZInterest():XYZInterest {
	
	};
	/**
 * @description Adds a controller to this property.
 * @param controller - The controller to insert.
 * @param idx - The index where the controller should be inserted.
*/
	insertController(controller:DzNumericController, idx:Number):void {
	
	};
	/**
 * @returns true if this property's value is clamped (for display purposes), otherwise false.
*/
	isClamped():Boolean {
	
	};
	/**
 * @returns true if the value of this property is invalid without a map assigned, otherwise false.
*/
	isInvalidWithoutMap():Boolean {
	
	};
	/**
 * @returns true if this property has a direct link to another property, otherwise false.
*/
	isLinked():Boolean {
	
	};
	/**
 * @returns true if this property is mappable (i.e., can have an associated image map), otherwise false.
*/
	isMappable():Boolean {
	
	};
	/**
 * @returns true if this property is currently mapped, otherwise false.
*/
	isMapped():Boolean {
	
	};
	/**
 * @returns true if this property is the master in a direct link between two properties.
*/
	isMaster():Boolean {
	
	};
	/**
 * @returns true if this property is modulo over min and max (i.e., the amount in which the value exceeds the min or max is applied as the value in the same direction from the opposite limit), otherwise false.
*/
	isModulo():Boolean {
	
	};
	/**
 * @description Establishes a direct link between this property and the given property.
 * @param master - The property to be linked with this property.
 * @attention This is the DAZ Studio equivalent of a LinkParm in Poser.
*/
	linkTo(master:DzNumericProperty):DzNumericProperty {
	
	};
	/**
 * @description Sets the default map gamma.
 * @since 4.5.2.23
 * @param gamma - The gamma value to set.
*/
	setDefaultMapGamma(gamma:Number):void {
	
	};
	/**
 * @description Sets the default map texture type.
 * @since 4.6.4.30
 * @param type - The map texture type to set.
*/
	setDefaultMapTextureType(type:Number):void {
	
	};
	/**
 * @description Sets the default value for this property.
 * @param val - The value to set as the default for this property.
*/
	setDoubleDefaultValue(val:Number):void {
	
	};
	/**
 * @description Sets the value for this property at the current time, or the default value if this property is not animatable, as a double precision number.
 * @param val - The value to set the property to.
*/
	setDoubleValue(val:Number):void {
	
	};
	/**
 * @description Sets the value for this property at the given time; or the default value if this property is not animatable.
 * @param tm - The scene time to set the value for.
 * @param val - The value to set for this property.
*/
	setDoubleValue(tm:DzTime, val:Number):void {
	
	};
	/**
 * @description Sets whether or not the value is clamped to its min and max.
 * @param val - If true, this property is clamped.
*/
	setIsClamped(val:Boolean):void {
	
	};
	/**
 * @description Sets whether or not this property is mappable.
 * @param val - If true, this property is mappable.
*/
	setIsMappable(val:Boolean):void {
	
	};
	/**
 * @description Sets whether or not the value is modulo over min and max; i.e., the amount in which the value exceeds the min or max is applied as the value in the same direction from the opposite limit.
 * @param val - If true, this value is modulo over min and max.
*/
	setIsModulo(val:Boolean):void {
	
	};
	/**
 * @description Set the image map for this property.
 * @param imgFile - The name of the file to use as an image map.
*/
	setMap(imgFile:String):void {
	
	};
	/**
 * @description Set the image map for this property.
 * @param img - The image map for this property.
*/
	setMap(img:DzTexture):void {
	
	};
	/**
 * @description Sets whether or not this property value is valid when no map is assigned.
 * @param val - If true, this property must have a map assigned.
*/
	setMustHaveMap(val:Boolean):void {
	
	};
	/**
 * @description Sets the texture modifier.
 * @since 4.6.4.80
 * @param txtMod - The texture modifier to set.
*/
	setTextureModifier(txtMod:DzTextureModifier):void {
	
	};
	/**
 * @description Sets texture modifier flags for this property.
 * @since 4.6.4.82
 * @param flags - The texture modifier flags to set.
*/
	setTextureModifierFlags(flags:Number):void {
	
	};
	/**
 * @description Set the XYZ interest for this property.
 * @param interest - The new XYZ interest for this property.
*/
	setXYZInterest(interest:XYZInterest):void {
	
	};
	/**
 * @description Unlinks this property.
*/
	unlink():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the clamped state for this property has changed.
 * @signature `"clampedChanged(bool)"`
 * @event
*/
	clampedChanged(onOff:Boolean):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the default map gamma for this property has changed.
 * @signature `"defaultMapGammaChanged()"`
 * @event
*/
	defaultMapGammaChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the default map texture type for this property has changed.
 * @signature `"defaultMapTextureTypeChanged()"`
 * @event
*/
	defaultMapTextureTypeChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the state of whether or not this property is mappable has changed.
 * @signature `"isMappableChanged()"`
 * @event
*/
	isMappableChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the property is linked to another property.
 * @signature `"linked()"`
 * @event
*/
	linked():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the image map for this property has changed.
 * @signature `"mapChanged()"`
 * @event
*/
	mapChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the min and/or max values for this property have changed.
 * @signature `"minMaxChanged()"`
 * @event
*/
	minMaxChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the texture modifier for this property has changed.
 * @signature `"textureModifierChanged()"`
 * @event
*/
	textureModifierChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the flags on the texture modifier for this property have changed.
 * @signature `"textureModifierFlagsChanged()"`
 * @event
*/
	textureModifierFlagsChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the property is unlinked from another property.
 * @signature `"unlinked()"`
 * @event
*/
	unlinked():void {
	
	};

}
/**
 * @classdesc 
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/object_dz} */
class DzObject extends DzElement {
	/**
 * @description Default Constructor.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Adds a modifier to the modifier stack.
 * @returns DZ_NO_ERROR on success, otherwise an appropriate error code.
 * @param modifier - The modifier to add to this object's modifier stack.
 * @param index - The position in the list to insert the modifer. If this is less than 0 (default), the modifier is appended to the end of the list.
*/
	addModifier(modifier:DzModifier, index:Number):DzError {
	
	};
	/**
 * @description Add a shape to this object.
 * @param shape - The shape that will be added to this object's list of possible shapes.
 * @param index - The position in the list to insert the shape. If this is less than 0 (default), the shape is appended to the end of the list.
*/
	addShape(shape:shape_dz, index:Number):DzError {
	
	};
	/**
 * @returns The modifier in the stack with the given name (if any), otherwise NULL.
 * @param name - The name of the modifier to get.
*/
	findModifier(name:String):DzModifier {
	
	};
	/**
 * @returns The index of the modifier in the modifier stack (if any), otherwise -1.
 * @param mod - The modifier to find the index for.
*/
	findModifierIndex(mod:DzModifier):Number {
	
	};
	/**
 * @returns The index of the modifier in the modifier stack (if any), otherwise -1.
 * @param mod - The modifier to find the index for.
*/
	findModifierIndexFromEnd(mod:DzModifier):Number {
	
	};
	/**
 * @description TODO:
Add description.
*/
	forceCacheUpdate(node:DzNode, isRender:Boolean):void {
	
	};
	/**
 * @returns A world space bounding box for this object.
*/
	getBoundingBox():DzBox3 {
	
	};
	/**
 * @returns The final world-space transformed mesh for the current shape.
 * @attention Re-evaluates the pipeline if necessary.
*/
	getCachedGeom():DzVertexmesh {
	
	};
	/**
 * @description Get the current shape.
 * @returns The current shape this object is caching/drawing.
*/
	getCurrentShape():DzShape {
	
	};
	/**
 * @returns The property that controls the current shape of this object.
*/
	getGeometryControl():DzEnumProperty {
	
	};
	/**
 * @returns A local space bounding box for this object; cached by the last call to evaluate().
*/
	getLocalBoundingBox():DzBox3 {
	
	};
	/**
 * @returns A local space oriented bounding box for this object; cached by the last call to evaluate().
*/
	getLocalOrientedBox():DzOrientedBox3 {
	
	};
	/**
 * @returns The modifier at the given position in the modifier stack (if any), otherwise NULL.
 * @param which - The index of the modifier in the stack to get.
*/
	getModifier(which:Number):DzModifier {
	
	};
	/**
 * @returns The number of modifiers in the local modifier stack for this object.
*/
	getNumModifiers():Number {
	
	};
	/**
 * @returns The number of possible shapes that this object can display.
*/
	getNumShapes():Number {
	
	};
	/**
 * @returns The shape at the given index (if any), otherwise NULL.
 * @param which - Index of the shape to get.
*/
	getShape(which:Number):DzShape {
	
	};
	/**
 * @description Flags this object to reevaluate its geometry pipeline the next time the cached shape is requested.
*/
	invalidateCache():void {
	
	};
	/**
 * @description Moves the modifier from its source obj to this modifier stack. DZ_ILLEGAL_ARGUMENT_ERROR is returned if there is not a modifier, the modifier's element parent is not an object, or the modifier is already an element child of this object. This move is not undo-able.
 * @returns DZ_NO_ERROR on success, otherwise an appropriate error code.
 * @param modifier - The modifier to add to this object's modifier stack.
 * @param index - The position in the list to insert the modifer. If this is less than 0 (default), the modifier is appended to the end of the list.
*/
	moveModifier(modifier:DzModifier, index:Number):DzError {
	
	};
	/**
 * @description Moves the given shape from its source object to this object. Operation fails if the shape's element parent is not a different dzobject with this shape in its shape list.
 * @returns DZ_NO_ERROR on success, otherwise an appropriate error code.
 * @param shape - The shape that will be added to this object's list of possible shapes.
 * @param index - The position in the list to insert the shape. If this is less than 0 (default), the shape is appended to the end of the list.
*/
	moveShape(shape:shape_dz, index:Number):DzError {
	
	};
	/**
 * @description Removes all the modifiers from the modifier stack.
 * @returns DZ_NO_ERROR on success, otherwise an appropriate error code.
*/
	removeAllModifiers():DzError {
	
	};
	/**
 * @description Remove all shapes from this object.
 * @returns DZ_NO_ERROR on success, otherwise an appropriate error code.
*/
	removeAllShapes():DzError {
	
	};
	/**
 * @description Removes a modifier from the modifier stack.
 * @returns DZ_NO_ERROR on success, otherwise an appropriate error code.
 * @param modifier - The modifier to remove from this object's modifier stack.
*/
	removeModifier(modifier:DzModifier):DzError {
	
	};
	/**
 * @description Remove a shape from this object.
 * @returns DZ_NO_ERROR on success, otherwise an appropriate error code.
 * @param index - The index of the shape to remove from this object's list of possible shapes.
*/
	removeShape(index:Number):DzError {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when a modifier is about to be added to this object.
 * @signature `"aboutToAddModifier(DzModifier*)"`
 * @event
*/
	aboutToAddModifier(mod:DzModifier):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when this object is about to be deleted.
 * @signature `"aboutToDelete()"`
 * @event
*/
	aboutToDelete():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the vertex mesh for this object is about to be finalized.
 * @signature `"aboutToFinalize(const DzVertexMesh*)"`
 * @event
*/
	aboutToFinalize(mesh:vertexmesh_dz):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the cached geometry for this object has been finalized.
 * @signature `"cachedGeomFinalized()"`
 * @event
*/
	cachedGeomFinalized():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the cached geometry for this object has been invalidated.
 * @signature `"cachedGeomInvalidated()"`
 * @event
*/
	cachedGeomInvalidated():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the cached geometry for this object has been updated.
 * @signature `"cachedGeomUpdated()"`
 * @event
*/
	cachedGeomUpdated():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the cached topology for this object has changed.
 * @signature `"cachedTopologyChanged()"`
 * @event
*/
	cachedTopologyChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the current shape is swapped out.
 * @signature `"currentShapeSwitched()"`
 * @event
*/
	currentShapeSwitched():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when this object needs to be redrawn.
 * @signature `"drawnDataChanged()"`
 * @event
*/
	drawnDataChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the material list for the current shape changes.
 * @signature `"materialListChanged()"`
 * @event
*/
	materialListChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the material selection state for the current shape changes.
 * @signature `"materialSelectionChanged()"`
 * @event
*/
	materialSelectionChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the material selection state for the current shape changes.
 * @signature `"materialSelectionSetsChanged()"`
 * @event
*/
	materialSelectionSetsChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when a modifier is added to this object.
 * @signature `"modifierAdded(DzModifier*)"`
 * @event
*/
	modifierAdded(mod:DzModifier):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when a modifier is removed from this object.
 * @signature `"modifierRemoved(DzModifier*)"`
 * @event
*/
	modifierRemoved(mod:DzModifier):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when a modifier is added to or removed from this object.
 * @signature `"modifierStackChanged()"`
 * @event
*/
	modifierStackChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when a shape is added to this object.
 * @signature `"shapeAdded(DzShape*)"`
 * @event
*/
	shapeAdded(shape:shape_dz):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when a shape is removed from this object.
 * @signature `"shapeRemoved(DzShape*)"`
 * @event
*/
	shapeRemoved(shape:shape_dz):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the topology of the current shape for this object has changed.
 * @signature `"shapeTopologyChanged()"`
 * @event
*/
	shapeTopologyChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the current uv set for the object has changed.
 * @signature `"uvsChanged()"`
 * @event
*/
	uvsChanged():void {
	
	};

}
/**
 * @classdesc This page exists in order to indicate the script accessible portions of QObject. QObject is the base type of all objects in the Daz Studio API.
See Also:
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/object_q} */
class QObject {
	/**
 * @description Holds the name of the object.
	*/
	objectName:String;
	/**
 * @description Holds the name of the object.
	*/
	name:String;
	/**
 * @description Schedules this object for deletion.
*/
	deleteLater():void {
	
	};
	/**
 * @returns The string representation of the object.
*/
	toString():String {
	
	};
	/**
 * @returns A string representation of the object classname.
*/
	className():String {
	
	};
	/**
 * @returns true if the object inherits classname, otherwise false.
 * @param classname - The name of the class to test for inheritance.
*/
	inherits(classname:String):Boolean {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted immediately before the object is destroyed.
 * @signature `"destroyed(QObject*)"`
 * @event
*/
	destroyed(obj:QObject):void {
	
	};

}
/**
 * @classdesc See Also:
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/objexporter_dz} */
class DzObjExporter extends DzExporter {
	/**
 * @description Default Constructor.
 * @constructor
*/
	constructor() {
	
	};

}
/**
 * @classdesc See Also:
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/objimporter_dz} */
class DzObjImporter extends DzGeometryImporter {
	/**
 * @description Default Constructor.
 * @constructor
*/
	constructor() {
	
	};

}
/**
 * @classdesc Deprecated
Exists only to keep code written prior to 4.6.2.23 working. Do not use in new code. Use DzTextureComponent instead.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/offsetmanip_dz} */
class DzOffsetManip extends  {
	/**
 * @description TODO:
Add description.
	*/
	xOffset:Number;
	/**
 * @description Holds the horizontal offset.
	*/
	yOffset:Number;
	/**
 * @description Holds the vertical offset.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Sets the offset for the image.
 * @param x - The offset for the image in x.
 * @param y - The offset for the image in y.
*/
	setOffset(x:Number, y:Number):void {
	
	};

}
/**
 * @classdesc Deprecated
Exists only to keep code written prior to 4.6.2.23 working. Do not use in new code. Use DzTextureComponent instead.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/opacitymanip_dz} */
class DzOpacityManip extends  {
	/**
 * @description TODO:
Add description.
	*/
	opacity:Number;
	/**
 * @description Holds the opacity value.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @returns The opacity value for the image.
*/
	getOpacity():Number {
	
	};
	/**
 * @description Sets the opacity for the image.
 * @param opacity - The new opacity value for the image. This should be in the range 0.0 - 1.0.
*/
	setOpacity(opacity:Number):void {
	
	};

}
/**
 * @classdesc You can access the global instance of DzOpenGL via the Global.OpenGL variable.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/opengl_dz} */
class DzOpenGL extends QObject {
	/**
 * @description ENUMERATOR: Lowest quality / Best performance. Texture sizes are clamped to a small size or the maximum size supported by the hardware, whichever is less.
*/
	
	static OGLLow;
	/**
 * @description ENUMERATOR: Medium quality / Better performance. Texture sizes are clamped to a medium size or the maximum size supported by the hardware, whichever is less.
*/
	
	static OGLMed;
	/**
 * @description ENUMERATOR: High quality / Good performance. Texture sizes are clamped to a large size or the maximum size supported by the hardware, whichever is less.
*/
	
	static OGLHigh;
	/**
 * @description ENUMERATOR: Best quality / Low performance. Texture sizes are clamped to the maximum size supported by the hardware.
*/
	
	static OGLBest;
	/**
 * @returns true if the OpenGL, and the DAZ-supported OpenGL extensions have been initialized. The other OpenGL support funtions will not return the correct result until initialization has occurred.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @returns the opacity value of the bounding box for active ( highlighted ) nodes.
*/
	getBoundingBoxActiveOpacity():Number {
	
	};
	/**
 * @returns the length of the edges of the bounding boxes.
*/
	getBoundingBoxEdgeLength():Number {
	
	};
	/**
 * @returns the opacity value of the bounding box for inactive nodes that are selected.
*/
	getBoundingBoxInactiveOpacity():Number {
	
	};
	/**
 * @returns The number of bit depth of the client depth buffer.
*/
	getDepthBufferBits():Number {
	
	};
	/**
 * @returns true if nodes should be drawn with a highlight
*/
	getDrawNodeHighlight():Boolean {
	
	};
	/**
 * @returns The major version number of OpenGL supported on the current hardware.
*/
	getMajorVersion():Number {
	
	};
	/**
 * @returns The maximim texture size supported by the client.
*/
	getMaxTextureSize():Number {
	
	};
	/**
 * @returns The maximim number of textures supported by the client.
*/
	getMaxTextureUnits():Number {
	
	};
	/**
 * @returns The minor version number of OpenGL supported on the current hardware.
*/
	getMinorVersion():Number {
	
	};
	/**
 * @returns The number auxiliary buffers supported by the client.
*/
	getNumAuxBuffers():Number {
	
	};
	/**
 * @returns The maximim number of lights supported by the client.
*/
	getNumLights():Number {
	
	};
	/**
 * @returns The number of supported OpenGL extensions
*/
	getNumOGLExtensions():Number {
	
	};
	/**
 * @returns The OpenGL major and minor version numbers supported on the current hardware.
*/
	getOpenGLVersion():Number {
	
	};
	/**
 * @returns A pointer to the application-wide global PBuffer object
*/
	getPBuffer():DzPbuffer {
	
	};
	/**
 * @returns The release number of OpenGL supported on the current hardware.
*/
	getReleaseNumber():Number {
	
	};
	/**
 * @returns the opacity value of the wireframe for the generated edges of a subdivided mesh.
*/
	getSubDivisionWireOpacity():Number {
	
	};
	/**
 * @returns The current quality setting for loading OpenGL textures
*/
	getTextureQuality():OGLTexQuality {
	
	};
	/**
 * @returns The maximum dimension for a texture map based on the current OpenGL texture quality setting.
*/
	getTextureQualityMaxSize():Number {
	
	};
	/**
 * @returns the opacity value of the wireframe for drawn triangulation of quads.
 * @since 4.9.3.142
*/
	getTriDivisionWireOpacity():Number {
	
	};
	/**
 * @returns the opacity value of the wireframe for the edges of a mesh.
*/
	getWireframeOpacity():Number {
	
	};
	/**
 * @returns true if the user has enabled display optimization and if its supported.
*/
	isDisplayOptimizationEnabled():Boolean {
	
	};
	/**
 * @returns true if the user has enabled hardware antialiasing.
*/
	isMultisampleEnabled():Boolean {
	
	};
	/**
 * @returns true if the client supports hardware antialiasing.
*/
	isMultisampleSupported():Boolean {
	
	};
	/**
 * @returns true if the given OpenGL extension is supported
 * @param extension - The extension to check
*/
	isOGLExtensionSupported(extension:String):Boolean {
	
	};
	/**
 * @description Checks for support of the four following extensions: GL_ARB_shader_objects, GL_ARB_fragment_shader, GL_ARB_vertex_shader, GL_ARB_shading_language_100. All four extensions must exist for this function to return true.
 * @returns true if OpenGL Shader Language is supported
*/
	isOGLShaderLanguageSupported():Boolean {
	
	};
	/**
 * @returns true if the client supports hardware shadow mapping.
*/
	isShadowingSupported():Boolean {
	
	};
	/**
 * @returns true if the client supports Vertex Buffer Objects.
*/
	isVBOSupported():Boolean {
	
	};
	/**
 * @description Sets the opacity of the bounding box for active ( highlighted ) nodes.
 * @param opacity - The opacity value to be used
*/
	setBoundingBoxActiveOpacity(opacity:Number):void {
	
	};
	/**
 * @description Sets the length of the edges of the bounding boxes.
 * @param length - The edge length to be used
*/
	setBoundingBoxEdgeLength(length:Number):void {
	
	};
	/**
 * @description Sets the opacity of the bounding box for inactive nodes that are selected.
 * @param opacity - The opacity value to be used
*/
	setBoundingBoxInactiveOpacity(opacity:Number):void {
	
	};
	/**
 * @description Sets whether or not display optimization is enabled in the OpenGL viewports
 * @param onOff - If true, display optimizations will be enabled
*/
	setDisplayOptimizationEnabled(onOff:Boolean):void {
	
	};
	/**
 * @param onOff - If true, nodes will be drawn with a highlight
*/
	setDrawNodeHighlight(onOff:Boolean):void {
	
	};
	/**
 * @description Sets whether or not multisampling is enabled in the OpenGL viewports
 * @param onOff - if true, multisampling is enabled
*/
	setMultisampleEnabled(onOff:Boolean):void {
	
	};
	/**
 * @description Sets the opacity of the wireframe for the generated edges of a subdivided mesh.
 * @param opacity - The opacity value
*/
	setSubDivisionWireOpacity(opacity:Number):void {
	
	};
	/**
 * @description Sets the quality setting for loading OpenGL textures
 * @param quality - The quality of the texture
*/
	setTextureQuality(quality:OGLTexQuality):void {
	
	};
	/**
 * @description Sets the opacity of the wireframe for the generated edges of a subdivided mesh.
 * @since 4.9.3.142
 * @param opacity - The opacity value
*/
	setTriDivisionWireOpacity(opacity:Number):void {
	
	};
	/**
 * @description Sets the opacity of the wireframe for the edges of a mesh.
 * @param opacity - The opacity value
*/
	setWireframeOpacity(opacity:Number):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description TODO: Add Description
 * @signature `TODO: Add Description`
 * @event
*/
	boundingBoxActiveOpacityChanged(value:Number):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description TODO: Add Description
 * @signature `TODO: Add Description`
 * @event
*/
	boundingBoxEdgeLengthChanged(value:Number):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description TODO: Add Description
 * @signature `TODO: Add Description`
 * @event
*/
	boundingBoxInactiveOpacityChanged(value:Number):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when display optimization is disabled or enabled.
 * @signature `"displayOptimizationEnabled(bool)"`
 * @event
*/
	displayOptimizationEnabled(onOff:Boolean):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when multisample is disabled or enabled.
 * @signature `"multisampleEnabled(bool)"`
 * @event
*/
	multisampleEnabled(onOff:Boolean):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description TODO: Add Description
 * @signature `TODO: Add Description`
 * @event
*/
	subDivisionWireOpacityChanged(value:Number):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description TODO: Add Description
 * @signature `TODO: Add Description`
 * @event
*/
	subWireframeOpacityChanged(value:Number):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the texture quality setting has changed.
 * @signature `"textureQualityChanged(DzOpenGL.OGLTexQuality)"`
 * @event
*/
	textureQualityChanged(quality:OGLTexQuality):void {
	
	};

}
/**
 * @classdesc 
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/orientedbox3_dz} */
class DzOrientedBox3 extends Object {
	/**
 * @description The box in 'local space' (without transforms applied)
	*/
	localBox:DzBox3;
	/**
 * @description The transform matrix of the box in 3D space
	*/
	transform:DzMatrix3;
	/**
 * @description Constructor. Creates an uninitialized box with an identity transform - the first point included in an uninitialized box will become the min and max for the box.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Creates an oriented box by parsing a string.
 * @param box - A string representation of the box in the form "[[ minX, minY, minZ ], [ maxX, maxY, maxZ ], [ m11, m21, m31, m12, m22, m32, m13, m23, m33, m14, m24, m34 ]]"
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Copy constructor.
 * @param box - The box to copy from.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Creates an uninitialized box with the given transform - the first point included in an uninitialized box will become the min and max for the box.
 * @param transform - The transformation to apply to this box
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Creates an oriented box that is the given box with the given transform.
 * @param box - The box to copy from.
 * @param transform - The transformation to apply to this box.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. Creates an oriented box that is the given box with the given transform.
 * @param box - The box to copy from.
 * @param translation - The translation to apply to this box.
 * @param rotation - The rotation to apply to this box.
 * @param scale - The scale to apply to this box.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Creates an uninitialized box with the given transform - the first point included in an uninitialized box will become the min and max for the box.
 * @param translation - The translation to apply to this box.
 * @param rotation - The rotation to apply to this box.
 * @param scale - The scale to apply to this box.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @returns A string representation of this oriented box in the form "[[ minX, minY, minZ ], [ maxX, maxY, maxZ ], [ m11, m21, m31, m12, m22, m32, m13, m23, m33, m14, m24, m34 ]]".
*/
	toString():String {
	
	};

}
/**
 * @classdesc This is the DAZScript counterpart to the QPalette type used in the DAZ Studio SDK.
Attention:@attention Attention:
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/palette} */
class Palette extends QObject {
	/**
 * @description The Palette for active windows (the window that has focus).
	*/
	active:active;
	/**
 * @description Used as the alternate background color in views with alternating row colors.
	*/
	alternateBase:Color;
	/**
 * @description Obsolete. Use window instead.
	*/
	background:Color;
	/**
 * @description Used as background color for text entry widgets, for example; usually white or another light color.
	*/
	base:Color;
	/**
 * @description A text color that is very different from windowText, and contrasts well with e.g. dark. Typically used for text that needs to be drawn where text or windowText would give poor contrast, such as on a pressed DzPushButton. Note that text colors can be used for things other than just words; text colors are usually used for text, but it's quite common to use the text color roles for lines, icons, etc.
	*/
	brightText:Color;
	/**
 * @description General button background color.
	*/
	button:Color;
	/**
 * @description A foreground color used with the button color.
	*/
	buttonText:Color;
	/**
 * @description Used for 3D bevel and shadow effects. Darker than button.
	*/
	dark:Color;
	/**
 * @description The Palette for disabled widgets.
	*/
	disabled:disabled;
	/**
 * @description Obsolete. Use windowText instead.
	*/
	foreground:Color;
	/**
 * @description A color to indicate a selected item or the current item.
	*/
	highlight:Color;
	/**
 * @description A text color that contrasts with highlight.
	*/
	highlightedText:Color;
	/**
 * @description The Palette for inactive windows (the other windows).
	*/
	inactive:inactive;
	/**
 * @description Used for 3D bevel and shadow effects. Lighter than button color.
	*/
	light:Color;
	/**
 * @description A text color used for unvisited hyperlinks. By default, the link color is blue.
	*/
	link:Color;
	/**
 * @description A text color used for already visited hyperlinks. By default, the link visited color is magenta.
	*/
	linkVisited:Color;
	/**
 * @description Used for 3D bevel and shadow effects. Between button and dark.
	*/
	mid:Color;
	/**
 * @description Used for 3D bevel and shadow effects. Between button and light.
	*/
	midlight:Color;
	/**
 * @description Used for 3D bevel and shadow effects. A very dark color.
	*/
	shadow:Color;
	/**
 * @description The foreground color used with base.
	*/
	text:Color;
	/**
 * @description Used as the background color for ToolTip and WhatsThis. Tool tips use the inactive Palette, because tool tips are not active windows.
	*/
	toolTipBase:Color;
	/**
 * @description Used as the foreground color for ToolTip and WhatsThis. Tool tips use the inactive Palette, because tool tips are not active windows.
	*/
	toolTipText:Color;
	/**
 * @description General background color.
	*/
	window:Color;
	/**
 * @description General foreground color.
	*/
	windowText:Color;
	/**
 * @description Default Constructor.
 * @param active - The Palette for the active state.
 * @param disabled - The Palette for the disabled state.
 * @param inactive - The Palette for the inactive state.
 * @constructor
*/
	constructor() {
	
	};

}
/**
 * @classdesc A "Pane" is the application's implementation of a persistent non-modal set of closely related widgets that can be stacked, ordered, docked, undocked, minimized, restored, shown, hidden, positioned and/or resized by the end-user.
Each pane has a label that is attached to the outer perimeter of the pane; whether the label appears as a tab/button/etc. to the user depends on the "style" that they currently has applied. A pane's label should briefly describe the concept (product, service, etc.) presented to the user within the pane.
Actions performed by the user that are closely related to the concept of a given pane, but do not warrant a persitent widget within the pane itself, or are more advanced in nature, should be considered for placement with the pane's option menu.
A pane is only ever displayed to the user within a DzPaneGroup; this is what gives the pane its ability to be stacked, ordered, docked, undocked, minimized, restored, shown, hidden, positioned and/or resized. A pane can only ever exist within one DzPaneGroup at a time.
Panes are singletons; there is only one instance of a given DzPane subclass. Panes are registered with DzPaneMgr and are available to access and modifiy via script. Use DzPaneMgr.findPane() to obtain a pointer to the single instance of the subclass, using its classname.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/pane_dz} */
class DzPane extends QWidget {
	/**
 * @description Sub classes must reimplement this function to generate a default options menu if they have one. This function is called when the pane is loaded for the first time or the interface is reset. Otherwise, the option menus are loaded from the user's interface settings file.
 * @param menu - The menu to add to.
*/
	buildOptionsMenu(menu:DzActionMenu):void {
	
	};
	/**
 * @returns The label of this pane.
*/
	getLabel():String {
	
	};
	/**
 * @returns The DzActionMenu for the pane.
 * @attention This function should not be used for adding a DzAction to a pane's option menu. Doing so defeats the user's ability to customize their interface settings. Instead, adding an action should be accomplished by reimplementing DzAction.getDefaultMenuPath().
*/
	getOptionsMenu():DzActionMenu {
	
	};
	/**
 * @description Sub classes must reimplement this function to provide the interface manager with the ability to update the user's settings file when the pane's default menu has changed. This function should return a value of 1 or greater if the pane provides a menu. Each time the default menu changes, this number should be incremented.
*/
	getOptionsMenuVersion():Number {
	
	};
	/**
 * @returns The DzPaneGroup parent that this pane belongs to.
*/
	getPaneGroup():DzPaneGroup {
	
	};
	/**
 * @description Hides this pane in the interface.
*/
	hidePane():void {
	
	};
	/**
 * @description Moves the DzPaneGroup that this pane is in, out of an undockable dialog.
 * @since 4.10.0.46
*/
	makeGroupDockable():void {
	
	};
	/**
 * @description Moves the DzPaneGroup that this pane resides in to a dialog.
*/
	makeGroupUndockable():void {
	
	};
	/**
 * @description Creates a DzPaneGroup in a dialog, and moves this pane into it.
 * @param minSize - The minimum size for the dialog (if any). This will be expanded to at least the minimum size of the pane.
*/
	makeUndockable(minSize:Size):void {
	
	};
	/**
 * @description Moves this pane from its current pane group into the given pane group.
 * @param group - The group to move this pane to.
*/
	moveToGroup(group:DzPaneGroup):void {
	
	};
	/**
 * @description Called to refresh internal pane data when scene contents, etc have changed.
*/
	refresh():void {
	
	};
	/**
 * @description Sub classes must reimplement this function to restore their saved settings.
 * @param settings - The settings to restore.
*/
	restoreSettings(settings:DzPaneSettings):void {
	
	};
	/**
 * @description Sub classes must reimplement this function to save their current settings.
 * @param settings - The settings that will be saved.
*/
	saveSettings(settings:DzPaneSettings):void {
	
	};
	/**
 * @description Sets the label for this pane.
 * @param label - The new label for this pane.
*/
	setLabel(label:String):void {
	
	};
	/**
 * @description Shows this pane in the interface.
*/
	showPane():void {
	
	};
	/**
 * @description Creates an undocked DzPaneGroup and moves this pane into it.
 * @since 4.10.0.47
 * @param pos - The position for the undocked pane group (if any).
 * @param size - The size for the undocked pane group (if any). This will be expanded to at least the minimum size of the pane.
*/
	undock(pos:Point, size:Size):void {
	
	};
	/**
 * @description Undocks the DzPaneGroup that this pane resides in.
 * @since 4.10.0.47
 * @param pos - The position for the undocked pane group (if any).
 * @param size - The size for the undocked pane group (if any). This will be expanded to at least the minimum size of the pane.
*/
	undockGroup(pos:Point, size:Size):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the pane's label has changed.
 * @signature `"labelChanged(const QString&)"`
 * @event
*/
	labelChanged(newLabel:String):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the options menu for the pane has changed.
 * @signature `"menuChanged()"`
 * @event
*/
	menuChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the the group the pane is in has changed.
 * @signature `"paneGroupChanged(DzPaneGroup*,DzPaneGroup*)"`
 * @event
*/
	paneGroupChanged(oldGroup:DzPaneGroup, newGroup:DzPaneGroup):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the visibility of the pane's tab bar is changed. When the tab bar is hidden, it's options menu is not visible. If desired, pane instances can listen to this signal to know when the menu is hidden in order to provide an alternate method of accessing the menu options.
 * @signature `"tabBarHiddenChanged(bool)"`
 * @event
*/
	tabBarHiddenChanged(hidden:Boolean):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the pane is shown or hidden.
 * @signature `"visibilityChanged(bool)"`
 * @event
*/
	visibilityChanged(onOff:Boolean):void {
	
	};

}
/**
 * @classdesc The dockable tabbed pane that is used to organize panes in the DAZ Studio interface.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/panegroup_dz} */
class DzPaneGroup extends DzDockWindow {
	/**
 * @returns The currently showing pane.
*/
	getCurrentPane():DzPane {
	
	};
	/**
 * @returns The offset, in pixels, from the point where a drag started to the top left corner (including extra for frame, titlebar, etc.)
*/
	getDragOffset():Point {
	
	};
	/**
 * @returns The number of panes in this group.
*/
	getNumPanes():Number {
	
	};
	/**
 * @returns The number of panes shown in this group.
*/
	getNumShownPanes():Number {
	
	};
	/**
 * @returns The pane in this group at the given index (if any), otherwise NULL.
 * @param i - The index of the pane to get.
*/
	getPane(i:Number):DzPane {
	
	};
	/**
 * @description Hides all panes without changing their group ownership.
*/
	hideAllPanes():void {
	
	};
	/**
 * @description Hides the given pane without changing its group ownership.
 * @param pane - The pane to be hidden.
*/
	hidePane(pane:DzPane):void {
	
	};
	/**
 * @description Sets whether this pane group's tab bar is hidden or not. Emits DzPane.tabBarHiddenChanged(). When the tab bar is hidden, the options menu for the current pane is not visible. If desired, DzPane instances should connect to it's DzPane.tabBarHiddenChanged() signal to be able to provide an alternate options menu when the tab bar is hidden.
 * @param hide - If true, hides the tab bar.
*/
	hideTabBar(hide:Boolean):void {
	
	};
	/**
 * @returns true if the group is undockable (is a child of a panegroupdlg_dz), otherwise false.
 * @since 4.10.0.46
*/
	isUndockable():Boolean {
	
	};
	/**
 * @description Enable or disabled the given pane in the interface, if it is a member of this group.
 * @param pane - The pane to be enabled or disabled.
 * @param enabled - If true, the pane will be enabled, otherwise the pane will be disabled.
*/
	setPaneEnabled(pane:DzPane, enabled:Boolean):void {
	
	};
	/**
 * @description Makes sure the given pane is showing (if it is a member of this group).
 * @param pane - The pane to be shown.
*/
	showPane(pane:DzPane):void {
	
	};
	/**
 * @returns true if this pane group's tab bar is hidden, otherwise false.
*/
	tabBarHidden():Boolean {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description TODO: Add Description
 * @signature `TODO: Add Description`
 * @event
*/
	emptyGroup():void {
	
	};

}
/**
 * @classdesc This class manages layouts, activity layouts, pane groups, panes, and toolbars.
There is only one instance of this manager in an application. This instance is created and owned by DzMainWindow. Request the instance via DzMainWindow.getPaneMgr().
See Also:
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/panemgr_dz} */
class DzPaneMgr extends QWidget {
	/**
 * @description ENUMERATOR: Not docked.
*/
	
	static NO_DOCKING;
	/**
 * @description ENUMERATOR: Docked on the left side.
*/
	
	static DOCK_LEFT;
	/**
 * @description ENUMERATOR: Docked on the top.
*/
	
	static DOCK_TOP;
	/**
 * @description ENUMERATOR: Docked on the right side.
*/
	
	static DOCK_RIGHT;
	/**
 * @description ENUMERATOR: Docked on the bottom.
*/
	
	static DOCK_BOTTOM;
	/**
 * @description Adds the activity layout to the list of layouts.
 * @param layout - The layout to be added.
*/
	addActivityLayout(layout:DzActivityLayout):void {
	
	};
	/**
 * @description Adds the given pane group dialog to the list of dialogs.
 * @param dlg - The pane group dialog to add.
*/
	addPaneGroupDlg(dlg:panegroupdlg_dz):DzPanegroupdlg {
	
	};
	/**
 * @description Removes all panes from all groups.
*/
	clearAllGroups():void {
	
	};
	/**
 * @description Closes all pane group dialogs.
*/
	closeAllPaneGroupDlgs():void {
	
	};
	/**
 * @description Creates a new activity layout and adds it to the list.
 * @returns The created activity layout.
 * @param name - The name of the activity layout.
 * @param description - The description of the activity layout.
*/
	createActivityLayout(name:String, description:String):DzActivityLayout {
	
	};
	/**
 * @returns A new pane group without any panes.
*/
	createEmptyPaneGroup():DzPaneGroup {
	
	};
	/**
 * @returns The tool bar with the given name (if any), otherwise creates a tool bar with the given name.
 * @param name - The name of the toolbar to create.
*/
	createToolBar(name:String):DzToolBar {
	
	};
	/**
 * @description Sets whether or not the activity bar is visible in the interface.
 * @param onOff - If true, enables the activity bar.
*/
	enableActivityBar(onOff:Boolean):void {
	
	};
	/**
 * @returns The activity layout with the given name (if any), otherwise NULL.
 * @param name - The name of the layout to find.
*/
	findActivityLayout(name:String):DzActivityLayout {
	
	};
	/**
 * @returns The dock bar with the given name, otherwise NULL.
 * @param className - The class name of the dock bar to find.
*/
	findDockBar(className:String):DzDockBar {
	
	};
	/**
 * @returns The dock bar with the given name (if any), otherwise NULL.
 * @param name - The name of the dock bar to find.
*/
	findDockBarByName(name:String):DzDockBar {
	
	};
	/**
 * @returns The pane with the classname specified (if any), otherwise NULL.
 * @param identifier - The classname of the pane to find.
*/
	findPane(identifier:String):DzPane {
	
	};
	/**
 * @returns The tool bar with the given name (if any), otherwise NULL.
 * @param name - The name of the tool bar to find.
*/
	findToolBar(name:String):DzToolBar {
	
	};
	/**
 * @returns The active activity layout.
*/
	getActiveActivityLayout():DzActivityLayout {
	
	};
	/**
 * @returns The index of the active activity layout.
*/
	getActiveActivityLayoutIndex():Number {
	
	};
	/**
 * @returns The name of the current activity bar image.
*/
	getActivityBarImage():String {
	
	};
	/**
 * @returns A list of possible activity bar images.
*/
	getActivityBarImageList():Array {
	
	};
	/**
 * @returns The activity layout at the given index (if valid), otherwise NULL.
 * @param i - The index of the desired activity layout.
*/
	getActivityLayout(i:Number):DzActivityLayout {
	
	};
	/**
 * @returns A list of all DzActivityLayout objects.
 * @since 4.11.0.220
*/
	getActivityLayoutList():Array {
	
	};
	/**
 * @returns The path to the file that is the advanced layout for the application.
*/
	getAdvancedLayout():String {
	
	};
	/**
 * @returns The path to the file that is the basic layout for the application.
*/
	getBasicLayout():String {
	
	};
	/**
 * @returns The path to the file that is the default layout for the application.
*/
	getDefaultLayout():String {
	
	};
	/**
 * @returns A list of default layout names included with the application.
*/
	getDefaultLayoutNames():Array {
	
	};
	/**
 * @returns The i'th dock bar in the application (if valid), otherwise NULL.
 * @param i - The index of the dock bar to return.
*/
	getDockBar(i:Number):DzDockBar {
	
	};
	/**
 * @returns A list of all DzDockBar objects.
 * @since 4.11.0.220
*/
	getDockBarList():Array {
	
	};
	/**
 * @returns The number of activity layouts currently available.
*/
	getNumActivityLayouts():Number {
	
	};
	/**
 * @returns The number of dock bars in the application.
*/
	getNumDockBars():Number {
	
	};
	/**
 * @returns The number of pane group dialogs.
*/
	getNumPaneGroupDlgs():Number {
	
	};
	/**
 * @returns The number of pane groups currently available in the interface; includes pane groups that are not currently showing.
*/
	getNumPaneGroups():Number {
	
	};
	/**
 * @returns The number of panes currently available in the interface; this includes panes that are not currently showing.
*/
	getNumPanes():Number {
	
	};
	/**
 * @returns The number of tool bars in the application.
*/
	getNumToolBars():Number {
	
	};
	/**
 * @returns true if the tabs for selecting a pane are oriented along the top of pane groups, otherwise false.
*/
	getOrientTabsAlongTop():Boolean {
	
	};
	/**
 * @returns The pane at the specified index (if valid), otherwise NULL.
 * @since 4.11.0.220
 * @param i - The index of the pane to get.
*/
	getPane(i:Number):DzPane {
	
	};
	/**
 * @returns The pane group at the given index (if valid), otherwise NULL.
 * @param i - The index of the desired pane group.
*/
	getPaneGroup(i:Number):DzPaneGroup {
	
	};
	/**
 * @returns The pane group dialog at the given index (if valid), otherwise NULL.
 * @param i - The index of the desired pane group dialog.
*/
	getPaneGroupDlg(i:Number):DzPanegroupdlg {
	
	};
	/**
 * @returns A list of all DzPaneGroup objects.
*/
	getPaneGroupList():Array {
	
	};
	/**
 * @returns A list of all DzPane objects.
*/
	getPaneList():Array {
	
	};
	/**
 * @returns The path to the file that is the pro layout for the application.
 * @since 4.7.0.3
*/
	getProLayout():String {
	
	};
	/**
 * @returns The path to the file that is the layout for this session of the application.
*/
	getSessionLayout():String {
	
	};
	/**
 * @returns true if the Lesson Strip is showing, otherwise false.
*/
	getShowLessonStrip():Boolean {
	
	};
	/**
 * @returns The path to the file that is the simple layout for the application.
*/
	getSimpleLayout():String {
	
	};
	/**
 * @returns The path to the file that is the standard layout for the application.
*/
	getStandardLayout():String {
	
	};
	/**
 * @returns The i'th tool bar in the application (if valid), otherwise NULL.
 * @param i - The index of the tool bar to return.
*/
	getToolBar(i:Number):DzToolBar {
	
	};
	/**
 * @returns A list of all DzToolBar objects.
 * @since 4.11.0.220
*/
	getToolBarList():Array {
	
	};
	/**
 * @returns true if workflow assistance is enabled, otherwise false.
*/
	getUseWorkflowAssistance():Boolean {
	
	};
	/**
 * @description Hide all panes from view in the interface.
*/
	hideAllPanes():void {
	
	};
	/**
 * @description Hides all the tool bars in the application.
*/
	hideAllToolBars():void {
	
	};
	/**
 * @description Hide the given pane from view in the interface.
*/
	hidePane(pane:DzPane):DzError {
	
	};
	/**
 * @description Hide the given pane from view in the interface.
 * @param identifier - The classname of the pane to hide.
*/
	hidePane(identifier:String):DzError {
	
	};
	/**
 * @description Hide a pane group in the interface.
 * @returns DZ_NO_ERROR if no error is encountered, otherwise an error code indicating the status of hiding the pane group.
 * @param i - The index of the pane group to hide.
*/
	hidePaneGroup(i:Number):DzError {
	
	};
	/**
 * @description Hide a pane group in the interface.
 * @returns DZ_NO_ERROR if no error is encountered, otherwise an error code indicating the status of hiding the pane group.
 * @param group - The pane group to hide.
*/
	hidePaneGroup(group:DzPaneGroup):DzError {
	
	};
	/**
 * @returns true if the activity bar appears in the interface, otherwise false.
*/
	isActivityBarEnabled():Boolean {
	
	};
	/**
 * @description Loads the next image from the directory and sets it for the activity bar.
*/
	loadNextActivityBarImage():void {
	
	};
	/**
 * @description Moves a group to a new dock location.
 * @returns DZ_NO_ERROR if no error is encountered, otherwise an error code indicating the status of moving the pane group.
 * @param group - The group to move.
 * @param dock - The dock location to move the group to.
*/
	movePaneGroup(group:DzPaneGroup, dock:DockSide):DzError {
	
	};
	/**
 * @description Moves a group to a new dock location.
*/
	movePaneGroup(group:DzPaneGroup, dock:DockSide, index:Number, newLine:Boolean):DzError {
	
	};
	/**
 * @description Removes the given layout.
 * @returns true if the layout existed and was removed, otherwise false.
 * @param i - The index of the layout to remove.
*/
	removeActivityLayout(i:Number):Boolean {
	
	};
	/**
 * @description Removes the given layout.
 * @returns true if the layout existed and was removed, otherwise false.
 * @param name - The name of the activity layout to be removed.
*/
	removeActivityLayout(name:String):Boolean {
	
	};
	/**
 * @description Removes all the current layouts.
*/
	removeAllActivityLayouts():void {
	
	};
	/**
 * @description Removes all tool bars from the application.
*/
	removeAllToolBars():void {
	
	};
	/**
 * @description Removes the given pane group.
 * @param group - The group to be removed.
*/
	removePaneGroup(group:DzPaneGroup):void {
	
	};
	/**
 * @description Removes the given pane group dialog from the list of dialogs.
 * @param dlg - The pane group dialog to remove.
*/
	removePaneGroupDlg(dlg:panegroupdlg_dz):DzPanegroupdlg {
	
	};
	/**
 * @description Removes a tool bar from the application.
 * @param name - The name of the tool bar to remove.
*/
	removeToolBar(name:String):void {
	
	};
	/**
 * @description Restores the activity layout from the given file.
 * @param filename - The name of the file to be read.
 * @param executeScript - Whether or not the companion layout script should be executed.
*/
	restoreLayout(filename:String, executeScript:Boolean):DzError {
	
	};
	/**
 * @description Saves the current activity layout to the given file.
 * @param filename - The name of the file to be saved.
 * @param description - The description for this layout.
*/
	saveLayout(filename:String, description:String):DzError {
	
	};
	/**
 * @description Selects the lesson at the given path.
 * @returns true if the lesson is found and selected, otherwise false.
*/
	selectLesson(path:String):Boolean {
	
	};
	/**
 * @description Sets the active activity layout.
 * @param i - The index of the activity to make active.
*/
	setActiveActivityLayout(i:Number):void {
	
	};
	/**
 * @description Sets the active layout.
 * @param layout - The layout to make active.
*/
	setActiveActivityLayout(layout:DzActivityLayout):void {
	
	};
	/**
 * @description Sets the image for the activity bar.
 * @param img - The name of the image to use in the activity bar; this should be one of the strings returned by getActivityImageList().
*/
	setActivityBarImage(img:String):void {
	
	};
	/**
 * @description Sets whether or not the position of tabs for selecting a pane are oriented along the top of the pane groups.
 * @param onOff - If true, the tabs will be displayed along the top of pane groups. If false, the tabs will be displayed along the sides of pane groups.
*/
	setOrientTabsAlongTop(onOff:Boolean):void {
	
	};
	/**
 * @description Enables or disables a given pane in the interface.
 * @returns DZ_NO_ERROR if no error is encountered, otherwise an error code indicating the status of enabling or disabling the pane.
 * @param identifier - The classname of the pane to enable or disable.
 * @param enabled - If true, the pane will be enabled.
*/
	setPaneEnabled(identifier:String, enabled:Boolean):DzError {
	
	};
	/**
 * @description Enables or disables a given pane in the interface.
 * @returns DZ_NO_ERROR if no error is encountered, otherwise an error code indicating the status of enabling or disabling the pane.
 * @param pane - The pane to be enabled or disabled.
 * @param enabled - If true, the pane will be enabled.
*/
	setPaneEnabled(pane:DzPane, enabled:Boolean):DzError {
	
	};
	/**
 * @description Sets the file that will be loaded and saved as the user's layout for the session.
 * @param filename - The name of the file to be saved.
*/
	setSessionLayout(filename:String):DzError {
	
	};
	/**
 * @description Sets the visibility of the Lesson Strip.
 * @param onOff - If true, the lesson strip is shown.
*/
	setShowLessonStrip(onOff:Boolean):void {
	
	};
	/**
 * @description Sets whether or not workflow assistance will be enabled.
 * @param onOff - If true, workflow assistance will be enabled.
*/
	setUseWorkflowAssistance(onOff:Boolean):void {
	
	};
	/**
 * @description Make all panes visible in the interface.
*/
	showAllPanes():void {
	
	};
	/**
 * @description Make the given pane visible in the interface.
 * @param identifier - The classname of the pane to show.
*/
	showPane(identifier:String):DzError {
	
	};
	/**
 * @description Make the given pane visible in the interface.
 * @param pane - The pane to be shown.
*/
	showPane(pane:DzPane):DzError {
	
	};
	/**
 * @description Show a pane group in the interface.
 * @returns DZ_NO_ERROR if no error is encountered, otherwise an error code indicating the status of showing the pane group.
 * @param group - The pane group to show.
*/
	showPaneGroup(group:DzPaneGroup):DzError {
	
	};
	/**
 * @description Show a pane group in the interface.
 * @returns DZ_NO_ERROR if no error is encountered, otherwise an error code indicating the status of showing the pane group.
 * @param i - The index of the pane group to show.
*/
	showPaneGroup(i:Number):DzError {
	
	};
	/**
 * @description Put the pane in its own pane group, if it's not already, and moves the pane group out of any dock area.
 * @returns DZ_NO_ERROR if no error is encountered, otherwise an error code indicating the status of tearing off the pane.
 * @param index - The index of the pane to tear off.
 * @param x - The x position to move to.
 * @param y - The y position to move to.
*/
	tearOffPane(index:Number, x:Number, y:Number):DzError {
	
	};
	/**
 * @description Put the pane in its own pane group, if it's not already, and moves the pane group out of any dock area.
 * @returns DZ_NO_ERROR if no error is encountered, otherwise an error code indicating the status of tearing off the pane.
 * @param pane - The pane to tear off.
 * @param x - The x position to move to.
 * @param y - The y position to move to.
*/
	tearOffPane(pane:DzPane, x:Number, y:Number):DzError {
	
	};
	/**
 * @description Put the pane in its own pane group, if it's not already, and moves the pane group out of any dock area.
 * @returns DZ_NO_ERROR if no error is encountered, otherwise an error code indicating the status of tearing off the pane.
 * @param identifier - The classname of the pane to tear off.
 * @param x - The x position to move to.
 * @param y - The y position to move to.
*/
	tearOffPane(identifier:String, x:Number, y:Number):DzError {
	
	};
	/**
 * @description Toggle the given pane's visibility in the interface.
 * @param pane - The pane whose visibility needs to be toggled.
*/
	togglePane(pane:DzPane):DzError {
	
	};
	/**
 * @description Toggle the given pane's visibility in the interface.
 * @param identifier - The classname of the pane to toggle.
*/
	togglePane(identifier:String):DzError {
	
	};
	/**
 * @description Toggle the given pane's visibility in the interface.
 * @param index - The index of the pane to be toggled.
*/
	togglePane(index:Number):DzError {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the active layout is about to change.
 * @signature `"activeLayoutAboutToChange(int)"`
 * @event
*/
	activeLayoutAboutToChange(newLayoutIdx:Number):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the active layout has changed.
 * @signature `"activeLayoutChanged(int)"`
 * @event
*/
	activeLayoutChanged(i:Number):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the activity bar is enabled/disabled.
 * @signature `"activityBarEnabled(bool)"`
 * @event
*/
	activityBarEnabled(onOff:Boolean):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the list of available layouts has changed.
 * @signature `"layoutListChanged()"`
 * @event
*/
	layoutListChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the layout is restored from a file.
 * @signature `"layoutRestored(const QString&)"`
 * @event
*/
	layoutRestored(filename:String):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the option controlling whether or not tabs are oriented along the top of a pane group has changed.
 * @signature `"orientTabsAlongTopChanged(bool)"`
 * @event
*/
	orientTabsAlongTopChanged(onOff:Boolean):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the list of available toolbars has changed.
 * @signature `"toolbarListChanged()"`
 * @event
*/
	toolbarListChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the state of whether or not the workflow assistant is enabled has changed.
 * @signature `"workflowAssistanceEnableStateChanged(bool)"`
 * @event
*/
	workflowAssistanceEnableStateChanged(onOff:Boolean):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the mode of the workflow assistant has changed.
 * @signature `"workflowAssistanceModeChanged()"`
 * @event
*/
	workflowAssistanceModeChanged():void {
	
	};

}
/**
 * @classdesc TODO:
Add detailed description.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/panesettings_dz} */
class DzPaneSettings extends DzSettings {
	/**
 * @description Default Constructor
 * @constructor
*/
	constructor() {
	
	};

}
/**
 * @classdesc 
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/parentproductcontainer_dz} */
class DzParentProductContainer extends DzRefCountedItem, DzAbstractAssetContainer {
	/**
 * @description Attempts to update the child containers of this container.
 * @returns true if the update was successful, otherwise false.
*/
	updateChildren():Boolean {
	
	};

}
/**
 * @classdesc A DzPathComboBox provides a DzComboBox like widget with a popup that is designed for choosing a path.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/pathcombobox_dz} */
class DzPathComboBox extends DzWidget {
	/**
 * @description Instantiates DzPathComboBox
 * @param parent - The widget parent for the path combobox.
 * @param useMarkableView - Whether or not to use a view with check boxes.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Clear selection
*/
	clearSelection():void {
	
	};
	/**
 * @returns current type
*/
	currentType():DzTypeAssetContainer {
	
	};
	/**
 * @returns current type
*/
	currentType():String {
	
	};
	/**
 * @description TODO:
Add description.
*/
	getRoot():DzTypeAssetContainer {
	
	};
	/**
 * @returns returns selected paths.
*/
	getSelectionPath(.Array):Array {
	
	};
	/**
 * @description Sets empty text
*/
	setEmptyText(text:String):void {
	
	};
	/**
 * @description sets the current selection
*/
	setSelection(idPath:Array):void {
	
	};
	/**
 * @returns current type
*/
	setTopLevelType(idPath:Array):void {
	
	};
	/**
 * @description Sets paths for the combobox.
*/
	setTypes(list:Array):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description TODO: Add Description
 * @signature `TODO: Add Description`
 * @event
*/
	pathSelectionChanged(path:String):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description TODO: Add Description
 * @signature `TODO: Add Description`
 * @event
*/
	viewAboutToShow():void {
	
	};

}
/**
 * @classdesc Persistant menus are registered with the DzActionMgr singleton and are available to access and modifiy via script.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/persistentmenu_dz} */
class DzPersistentMenu extends QObject {
	/**
 * @description Clear the active widget for this persistent menu.
*/
	clearActiveWgt():void {
	
	};
	/**
 * @returns The DzActionMenu that belongs to this persistent menu. If one does not exist, it is created.
 * @since 4.6.0.76
*/
	getActionMenu():DzActionMenu {
	
	};
	/**
 * @returns The widget that launched this persistent menu (if any), otherwise null.
*/
	getActiveWgt():QWidget {
	
	};
	/**
 * @description Sets the active widget for this persistent menu.
 * @param wgt - The widget that launches the persistent menu.
*/
	setActiveWgt(wgt:QWidget):void {
	
	};

}
/**
 * @classdesc This is the DAZScript counterpart to the QPixmap type used in the DAZ Studio SDK.
Attention:@attention Attention:
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/pixmap} */
class Pixmap extends QObject {
	/**
 * @description The color depth of the pixmap (Read-Only)
	*/
	depth:Number;
	/**
 * @description The height of the pixmap in pixels (Read-Only)
	*/
	height:Number;
	/**
 * @description The enclosing rectangle of the pixmap in pixels (Read-Only)
	*/
	rect:Rect;
	/**
 * @description The size of the pixmap (Read-Only)
	*/
	size:Size;
	/**
 * @description The width of the pixmap in pixels (Read-Only)
	*/
	width:Number;
	/**
 * @description Default Constructor.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Copy Constructor.
 * @param pixmap - The Pixmap to copy.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @param filename - The name of the file to load the pixmap's data from.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Fills the pixmap with color.
 * @param color - The color to set all the pixels in the pixmap.
*/
	fill(color:Color):void {
	
	};
	/**
 * @since 4.9.3.105
 * @param image - The image to convert.
*/
	fromImage(image:Image):void {
	
	};
	/**
 * @description Gets whether or not the pixmap is Null.
 * @returns true if this is a Null (empty) pixmap, false if the pixmap has data.
*/
	isNull():Boolean {
	
	};
	/**
 * @description Loads data into the pixmap from a file.
 * @returns true if the data was loaded, otherwise false. (since 4.11.0.155)
 * @param filename - The name of the file to load into the pixmap.
 * @param format - The file format of the bytes in file pointed to by filename; i.e. "PNG". (since 4.11.0.155)
*/
	load(filename:String, format:String):Boolean {
	
	};
	/**
 * @description Loads data into the pixmap from a byte array using the specified format.
 * @returns true if the data was loaded, otherwise false. (since 4.10.0.88)
 * @param data - The binary data to load into the pixmap.
 * @param format - The file format of the bytes in data; i.e. "PNG".
*/
	loadFromData(data:ByteArray, format:String):Boolean {
	
	};
	/**
 * @description Resizes the pixmap.
 * @param width - The new width for the pixmap.
 * @param height - The new height for the pixmap.
*/
	resize(width:Number, height:Number):void {
	
	};
	/**
 * @description Resizes the pixmap.
 * @param size - The new size for the pixmap.
*/
	resize(size:Size):void {
	
	};
	/**
 * @description Saves the pixmap to a file.
 * @param filename - The name of the file to save the pixmap to.
*/
	save(filename:String):void {
	
	};
	/**
 * @returns The pixmap converted to an image, or null if the conversion fails.
 * @since 4.9.3.105
*/
	toImage():Image {
	
	};

}
/**
 * @classdesc This class provides startup and shutdown functionality for DAZ Studio plug-ins and maintains the list of class types exported by the plug-in.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/plugin_dz} */
class DzPlugin extends QObject {
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static Loaded;
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static RequiresRestart;
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static ManuallyDisabled;
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static EvaluationInvalid;
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static Failed;
	/**
 * @returns The author of the plug-in.
*/
	getAuthor():String {
	
	};
	/**
 * @returns The author's description of the plug-in.
*/
	getDescription():String {
	
	};
	/**
 * @returns The evaluation information of the plug-in in string form.
*/
	getEvaluationInformation():String {
	
	};
	/**
 * @returns The absolute file path to the plug-in; set by DzApp when the plug-in is loaded.
*/
	getFilename():String {
	
	};
	/**
 * @returns true if the plug-in should load on application start, otherwise false.
*/
	getLoadOnStart():Boolean {
	
	};
	/**
 * @returns The name of the plug-in.
*/
	getName():String {
	
	};
	/**
 * @returns A list of prefixes that can be used to serialize this plugin (if any), otherwise an empty list.
 * @since 4.11.0.35
*/
	getPrefixes():Array {
	
	};
	/**
 * @returns The load state of the plug-in.
*/
	getStatus():void {
	
	};
	/**
 * @returns Additional information about the plug-in load state.
*/
	getStatusInformation():String {
	
	};
	/**
 * @returns The string representation of the plug-in load state.
*/
	getStatusString():String {
	
	};
	/**
 * @returns The version number of the plug-in.
*/
	getVersion():DzVersion {
	
	};
	/**
 * @returns The version number of the plug-in in string form.
*/
	getVersionString():String {
	
	};
	/**
 * @returns true if the plug-in is activated, otherwise false. A plug-in is considered activated if it has either been registered or it is within an evaluation period.
*/
	isActivated():Boolean {
	
	};
	/**
 * @returns true if the plug-in has been registered, otherwise false. A plug-in is considered registered if a valid serial number for the plug-in has been applied, or if the plug-in does not use serial number registration. A plug-in that is within an evaluation period is not considered registered.
*/
	isRegistered():Boolean {
	
	};
	/**
 * @returns true if the serial number is valid for the plug-in, otherwise false.
 * @param serialNumber - The serial number to validate.
 * @param saveIfValid - If true, the serial number will be saved if it is found to be valid.
*/
	validateSerialNumber(serialNumber:String, saveIfValid:Boolean):Boolean {
	
	};

}
/**
 * @classdesc Responsible for the management of dynamically loaded libraries (aka "plugins") that extend the features/functionality of the core application.
There is only one instance of this manager in an application. This instance is created and owned by DzApp. Request the instance via DzApp.getPluginMgr().
See Also:
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/pluginmgr_dz} */
class DzPluginMgr extends QObject {
	/**
 * @description Shows the "About Installed Plugins" dialog.
*/
	doAboutPluginsDlg():void {
	
	};
	/**
 * @returns The plug-in of the given type (if any), otherwise NULL.
 * @param pluginName - The name of the desired plugin.
*/
	findPlugin(pluginName:String):DzPlugin {
	
	};
	/**
 * @returns The number of plug-ins currently loaded by DAZ Studio.
*/
	getNumPlugins():Number {
	
	};
	/**
 * @returns The plug-in at the given index in the list (if valid), otherwise NULL.
 * @param which - The index of the plug-in to get.
*/
	getPlugin(which:Number):DzPlugin {
	
	};
	/**
 * @returns true if the configuration file was saved, otherwise false.
 * @since 4.11.0.35
*/
	saveConfiguration():Boolean {
	
	};
	/**
 * @description Sets whether or not the plug-in should load when the application starts.
 * @since 4.11.0.35
 * @param plugin - The plugin to set whether or not to load on startup.
 * @param onOff - If true, the plugin should load on startup. If false, the plugin should not load on startup.
*/
	setPluginLoadOnStartup(plugin:DzPlugin, onOff:Boolean):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description TODO: Add Description
 * @signature `TODO: Add Description`
 * @event
*/
	pluginAdded(plugin:DzPlugin):void {
	
	};

}
/**
 * @classdesc This is the DAZScript counterpart to the QPoint type used in the DAZ Studio SDK. A Point object is a two dimensional representation of a x (horizontal) and y (vertical) position.
Attention:@attention Attention:
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/point} */
class Point extends QObject {
	/**
 * @description Holds the point's x position.
	*/
	x:Number;
	/**
 * @description Holds the point's y position.
	*/
	y:Number;
	/**
 * @description Default constructor.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @param pnt - The point to copy.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @param x - The x coordinate for the point.
 * @param y - The y coordinate for the point.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @returns The position of the cursor in global screen coordinates.
 * @since 4.11.0.35
*/
	cursorPos():Point {
	
	};

}
/**
 * @classdesc TODO:
Add detailed description.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/pointlight_dz} */
class DzPointLight extends DzDistantLight {
	/**
 * @description Default Constructor. Creates a new point light.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @returns The amount of decay.
 * @since 4.9.3.145
*/
	getDecay():Number {
	
	};
	/**
 * @returns The property that controls the decay.
*/
	getDecayControl():DzFloatProperty {
	
	};
	/**
 * @returns true if the sphere will be displayed when the node is not selected, otherwise false.
 * @since 4.9.3.145
*/
	getDisplayPersistence():Boolean {
	
	};
	/**
 * @returns The property that controls the display persistence.
 * @since 4.9.3.145
*/
	getDisplayPersistenceControl():DzBoolProperty {
	
	};
	/**
 * @returns The distance at which the illumination from this light falls off.
 * @since 4.8.0.9
*/
	getFalloffDistance(lightPercent:Number):Number {
	
	};
	/**
 * @returns The path to the IES Light Profile (if any), or an empty string.
 * @since 4.8.0.18
*/
	getLightProfile():String {
	
	};
	/**
 * @returns The property that controls the IES profile of the light.
 * @since 4.8.0.18
*/
	getLightProfileControl():DzFileProperty {
	
	};
	/**
 * @returns true if the light contributes to the scene, otherwise false.
*/
	getLightVisibility():Boolean {
	
	};
	/**
 * @returns The opacity of the display sphere.
 * @since 4.9.3.145
*/
	getSphereOpacity():Number {
	
	};
	/**
 * @returns The property that controls the opacity of the sphere.
 * @since 4.9.3.145
*/
	getSphereOpacityControl():DzFloatProperty {
	
	};
	/**
 * @description Sets the amount of decay.
 * @since 4.9.3.145
 * @param decay - The amount of decay to set.
*/
	setDecay(decay:Number):void {
	
	};
	/**
 * @description Sets the persistance of the display sphere.
 * @since 4.9.3.145
 * @param persistence - If true, the sphere will be displayed when the node is not selected. If false, the sphere will not be displayed when the node is not selected.
*/
	setDisplayPersistence(persistence:Boolean):void {
	
	};
	/**
 * @description Sets the path of the IES light profile.
 * @since 4.9.3.145
 * @param profilePath - The path of the IES profile to set.
*/
	setLightProfile(profilePath:String):void {
	
	};
	/**
 * @description Sets the opacity of the display sphere.
 * @since 4.9.3.145
 * @param opacity - The opacity to set.
*/
	setSphereOpacity(opacity:Number):void {
	
	};

}
/**
 * @classdesc Provides a menu widget for use in context menus and other popup menus.
A menu consists of a list of items. There are three kinds of items: separators, items that show a submenu, and items that perform an action.
Submenu items and action items have an identifier (id) and a position (index). Separators have a position (index) and a common identifier (-1).
Separators are inserted with insertSeparator(). Submenus are inserted with insertSubmenuItem(), insertTextSubmenuItem(), or insertPixmapSubmenuItem(). All other items are considered action items, and are inserted with insertItem(), insertTextItem() or insertPixmapItem().
Submenu items and action items can have text, a pixmap, or both.
Clearing an entire menu is accomplished with clear() and removing individual items is accomplished with removeItem() or removeItemAt().
To make a menu visible on the screen, use exec() or popup() - do not use show().
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/popupmenu_dz} */
class DzPopupMenu extends DzWidget {
	/**
 * @description Holds whether or not the display of check marks on menu items is enabled. When true, the display of check marks on menu items is enabled. Checking is always enabled when in Windows-style.
	*/
	checkable:Boolean;
	/**
 * @description Holds whether or not the menu supports being torn off. When true, the menu contains a special tear-off item (often shown as a dashed line at the top of the menu) that creates a copy of the menu when it is triggered.
	*/
	tearOff:Boolean;
	/**
 * @description Creates a popup menu as a child of the given parent widget.
 * @param parent - The widget parent for the popup menu.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Removes all menu items.
*/
	clear():void {
	
	};
	/**
 * @description Connects the menu item with the specified identifier to a function.
 * @returns true if the connection is successfully established, otherwise false.
 * @param id - The identifier of the menu item to connect to.
 * @param receiver - The object that will receive the signal. Prior to 4.15.0.24, this must be a QObject (or derived).
 * @param function - The name of the function on receiver to execute when the menu item is activated. Prior to 4.15.0.24, the signature of this function must have no parameters, or a single parameter of the 'int' type.
*/
	connectItem(id:Number, receiver:Object, member:String):Boolean {
	
	};
	/**
 * @description Connects the menu item with the specified identifier to a function.
 * @returns true if the connection is successfully established, otherwise false.
 * @since 4.15.0.24
 * @param id - The identifier of the menu item to connect to.
 * @param thisObject - The object to bind to 'this' in the scope of functionRef if functionRef is a script-defined Function. If functionRef is a function on a QObject, this argument is not used.
 * @param functionRef - The function to execute when the menu item is activated.
*/
	connectItem(id:Number, thisObject:Object, functionRef:Function):Boolean {
	
	};
	/**
 * @description Disconnects the menu item with the specified identifier from a function.
 * @returns true if the connection is successfully removed, otherwise false.
 * @param id - The identifier of the menu item to disconnect from.
 * @param receiver - The object that is receiving the signal. Prior to 4.15.0.24, this must be a QObject (or derived).
 * @param function - The name of the function on receiver to disconnect from.
 * @attention All connections are automatically removed when this menu is destroyed.
*/
	disconnectItem(id:Number, receiver:Object, member:String):Boolean {
	
	};
	/**
 * @description Disconnects the menu item with the specified identifier from a function.
 * @returns true if the connection is successfully removed, otherwise false.
 * @since 4.15.0.24
 * @param id - The identifier of the menu item to disconnect from.
 * @param thisObject - The object bound to 'this' in the scope of functionRef if functionRef is a script-defined Function. If functionRef is a function on a QObject, this argument is not used.
 * @param functionRef - The function to disconnect from.
 * @attention All connections are automatically removed when this menu is destroyed.
*/
	disconnectItem(id:Number, thisObject:Object, functionRef:Function):Boolean {
	
	};
	/**
 * @description Executes this menu synchronously. In most situations you will want to specify the position yourself, for example at the current mouse position.
 * @returns The identifier of the menu item clicked, or -1 if a menu item was not clicked.
*/
	exec():Number {
	
	};
	/**
 * @description Executes this menu synchronously. Opens the popup menu so that the item number indexAtPoint will be at the specified global position pos.
 * @returns The identifier of the menu item clicked, or -1 if a menu item was not clicked.
 * @param pos - The global position to popup the menu.
 * @param indexAtPoint - The index of the menu item to position at pos.
*/
	exec(pos:Point, indexAtPoint:Number):Number {
	
	};
	/**
 * @returns The identifier for the menu item at the specified index position (if valid), otherwise -1.
 * @param index - The index position to get the identifier for.
*/
	idAt(index:Number):Number {
	
	};
	/**
 * @returns The identifier of the menu item at the specified index position (if any), otherwise -1.
 * @param pos - The position to to check.
*/
	idAt(pos:Point):Number {
	
	};
	/**
 * @description Inserts a menu item, with a pixamp, and text into this menu.
 * @returns The identifier assigned to the inserted menu item.
 * @since 4.15.0.16
 * @param pixmap - The pixmap to assign to this menu item.
 * @param text - The text to assign to the menu item.
 * @param id - The identifier to assign to the menu item.
 * @param index - The index position within the menu to insert the item. The item becomes the last menu item if this is a negative value (default).
*/
	insertItem(pixmap:Pixmap, text:String, id:Number, index:Number):Number {
	
	};
	/**
 * @description Inserts a menu item, with a pixmap, into this menu.
 * @returns The identifier assigned to the inserted menu item.
 * @since 4.15.0.16
 * @param pixmap - The pixmap to assign to the menu item.
 * @param id - The identifier to assign to the menu item.
 * @param index - The index position within the menu to insert the item. The item becomes the last menu item if this is a negative value (default).
*/
	insertPixmapItem(pixmap:Pixmap, id:Number, index:Number):Number {
	
	};
	/**
 * @description Inserts a submenu item, with a pixmap, into this menu.
 * @returns The identifier assigned to the inserted menu item.
 * @since 4.15.0.16
 * @param pixmap - The pixmap to assign to the menu item.
 * @param popup - The menu to popup when this menu item is hovered over.
 * @param id - The identifier to assign to the menu item.
 * @param index - The index position within the menu to insert the item. The item becomes the last menu item if this is a negative value (default).
*/
	insertPixmapSubmenuItem(pixmap:Pixmap, popup:DzPopupMenu, id:Number, index:Number):Number {
	
	};
	/**
 * @description Inserts a separator at the specified index position.
 * @returns The identifier assigned to the inserted menu item - i.e., -1.
 * @param index - The index position within the menu to insert the separator. The separator becomes the last menu item if this is a negative value (default).
*/
	insertSeparator(index:Number):Number {
	
	};
	/**
 * @description Inserts a submenu item, with a pixmap and text, into this menu.
 * @returns The identifier assigned to the inserted menu item.
 * @since 4.15.0.16
 * @param pixmap - The pixmap to assign to the menu item.
 * @param text - The text to assign to the menu item.
 * @param popup - The menu to popup when this menu item is hovered over.
 * @param id - The identifier to assign to the menu item.
 * @param index - The index position within the menu to insert the item. The item becomes the last menu item if this is a negative value (default).
*/
	insertSubmenuItem(pixmap:Pixmap, text:String, popup:DzPopupMenu, id:Number, index:Number):Number {
	
	};
	/**
 * @description Inserts a menu item, with text, into this menu.
 * @returns The identifier assigned to the inserted menu item.
 * @since 4.15.0.16
 * @param text - The text to assign to the menu item.
 * @param id - The identifier to assign to the menu item.
 * @param index - The index position within the menu to insert the item. The item becomes the last menu item if this is a negative value (default).
*/
	insertTextItem(text:String, id:Number, index:Number):Number {
	
	};
	/**
 * @description Inserts a submenu item, with text, into this menu.
 * @returns The identifier assigned to the inserted menu item.
 * @since 4.15.0.16
 * @param text - The text to assign to the menu item.
 * @param popup - The menu to popup when this menu item is hovered over.
 * @param id - The identifier to assign to the menu item.
 * @param index - The index position within the menu to insert the item. The item becomes the last menu item if this is a negative value (default).
*/
	insertTextSubmenuItem(text:String, popup:DzPopupMenu, id:Number, index:Number):Number {
	
	};
	/**
 * @returns true if the menu item with the specified identifier is checkable, otherwise false.
 * @since 4.12.1.93
 * @param id - The identifier of the menu item to get the checkable state of.
*/
	isItemCheckable(id:Number):Boolean {
	
	};
	/**
 * @returns true if the menu item with the specified identifier is checked, otherwise false.
 * @param id - The identifier of the menu item to get the checked state of.
*/
	isItemChecked(id:Number):Boolean {
	
	};
	/**
 * @returns true if the menu item with the specified identifier is enabled, otherwise false.
 * @param id - The identifier of the menu item to get the enabled state of.
*/
	isItemEnabled(id:Number):Boolean {
	
	};
	/**
 * @returns true if the menu item with the specified identifier is visible, otherwise false.
 * @param id - The identifier of the menu item to get the visible state of.
*/
	isItemVisible(id:Number):Boolean {
	
	};
	/**
 * @returns The parameter of the activation signal for the menu item specified (if any), otherwise id.
 * @param id - The identifier of the menu item to get the parameter of.
*/
	itemParameter(id:Number):Number {
	
	};
	/**
 * @returns The number of menu items in this menu.
 * @since 4.15.0.16
*/
	numItems():Number {
	
	};
	/**
 * @returns The pixmap of the menu item with the specified identifier (if any), otherwise null.
 * @param id - The identifier of the menu item to get the pixmap of.
*/
	pixmap(id:Number):Pixmap {
	
	};
	/**
 * @description Displays this menu synchronously.
 * @param pos - The global position to popup the menu.
 * @param indexAtPoint - The index of the menu item to position at pos.
*/
	popup(pos:Point, indexAtPoint:Number):void {
	
	};
	/**
 * @description Removes the menu item with the specified identifier from the menu.
 * @param id - The identifier of the menu item to remove.
*/
	removeItem(id:Number):void {
	
	};
	/**
 * @description Removes the menu item at the specified index position.
 * @param index - The index position of the menu item to remove.
*/
	removeItemAt(index:Number):void {
	
	};
	/**
 * @description Sets the currently active item to id and repaints as necessary.
*/
	setActiveItem(id:Number):void {
	
	};
	/**
 * @description Sets the checkable state of the menu item with the specified identifier.
 * @since 4.12.1.93
 * @param id - The identifier of the menu item to set.
 * @param yesNo - If true, the item is made checkable.
*/
	setItemCheckable(id:Number, yesNo:Boolean):void {
	
	};
	/**
 * @description Sets the checked state of the menu item with the specified identifier.
 * @param id - The identifier of the menu item to set.
 * @param yesNo - If true, the item is checked.
*/
	setItemChecked(id:Number, yesNo:Boolean):void {
	
	};
	/**
 * @description Sets the enabled state of the menu item with the specified identifier.
 * @param id - The identifier of the menu item to set.
 * @param yesNo - If true, the item is enabled.
*/
	setItemEnabled(id:Number, yesNo:Boolean):void {
	
	};
	/**
 * @description Sets the parameter of the activation signal for the menu item with the specified identifier.
 * @param id - The identifier of the menu item to set.
 * @param param - The value to set.
*/
	setItemParameter(id:Number, param:Number):Boolean {
	
	};
	/**
 * @description Sets the visible state of the menu item with the specified identifier.
 * @param id - The identifier of the menu item to set.
 * @param yesNo - If true, the item is made visible.
*/
	setItemVisible(id:Number, yesNo:Boolean):void {
	
	};
	/**
 * @description Sets the pixmap of the menu item with the specified identifier.
 * @since 4.15.0.16
 * @param id - The identifier of the menu item to change.
 * @param pixmap - The pixmap to set.
 * @attention If the item has text assigned, the text remains unchanged.
*/
	setPixmap(id:Number, pixmap:Pixmap):void {
	
	};
	/**
 * @description Sets the text of the menu item with the specified identifier.
 * @since 4.15.0.16
 * @param id - The identifier of the menu item to change.
 * @param text - The text to set.
 * @attention If the item has a pixmap assigned, the pixmap remains unchanged.
*/
	setText(id:Number, text:String):void {
	
	};
	/**
 * @description Sets the "What's This" help text for the menu item with the specified identifier.
 * @param id - The identifier of the menu item to set the "What's This" help text for.
 * @param text - The text to set.
*/
	setWhatsThis(id:Number, text:String):void {
	
	};
	/**
 * @returns The text of the menu item with the specified identifier (if any), otherwise an empty string.
 * @param id - The identifier of the menu item to get the text of.
*/
	text(id:Number):String {
	
	};
	/**
 * @returns The "What's This" help text for the item with the specified identifier (if any), otherwise an empty string.
 * @param id - The identifier of the menu item to get the "What's This" help text for.
*/
	whatsThis(id:Number):String {
	
	};
	/**
 * @description Deprecated
*/
	insertTearOffHandle():Number {
	
	};
	/**
 * @description Deprecated
*/
	insertItem(text:String, id:Number, index:Number):Number {
	
	};
	/**
 * @description Deprecated
*/
	insertItem(pixmap:Pixmap, id:Number, index:Number):Number {
	
	};
	/**
 * @description Deprecated
*/
	insertItem(text:String, popup:DzPopupMenu, id:Number, index:Number):Number {
	
	};
	/**
 * @description Deprecated
*/
	insertItem(pixmap:Pixmap, popup:DzPopupMenu, id:Number, index:Number):Number {
	
	};
	/**
 * @description Deprecated
*/
	changeItem(id:Number, text:String):void {
	
	};
	/**
 * @description Deprecated
*/
	changeItem(id:Number, pixmap:Pixmap):void {
	
	};
	/**
 * @description Deprecated
*/
	updateItem(id:Number):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description This signal is emitted just before the popup menu is hidden after it has been displayed.
 * @signature `"aboutToHide()"`
 * @event
*/
	aboutToHide():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description This signal is emitted just before the popup menu is displayed. You can connect it to any slot that sets up the menu contents (e.g. to ensure that the right items are enabled).
 * @signature `"aboutToShow()"`
 * @event
*/
	aboutToShow():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description This signal is emitted when a menu item is selected.
 * @signature `"activated(int)"`
 * @event
*/
	activated(id:Number):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when a menu item is highlighted.
 * @signature `"highlighted(int)"`
 * @event
*/
	highlighted(id:Number):void {
	
	};

}
/**
 * @classdesc An asset save filter for saving a Pose Preset in the DSON format.
See Also:
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/poseassetfilter_dz} */
class DzPoseAssetFilter extends DzAssetFileOutFilter {
	/**
 * @description TODO:
Add description.
 * @constructor
*/
	constructor() {
	
	};

}
/**
 * @classdesc See Also:
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/presentation_dz} */
class DzPresentation extends DzBase {
	/**
 * @description The auto fit base that this asset is.
	*/
	autoFitBase:String;
	/**
 * @description A color hint to be used in conjunction with colorB to define a 2 color linear gradient used by UI elements displayed to the user.
	*/
	colorA:Color;
	/**
 * @description A color hint to be used in conjunction with colorA to define a 2 color linear gradient used by UI elements displayed to the user.
	*/
	colorB:Color;
	/**
 * @description A human readable, end-user facing, description of the item that the presentation is attached to.
	*/
	description:String;
	/**
 * @description The other bases this item may be treated like.
	*/
	extendedBases:Array;
	/**
 * @description The relative path (uri) corresponding to a large image. For a DzFloatProperty that applies a morph_dz, this image is used for display as a "Card" (vertical slider). If iconSmall is not defined, the path defined here is also used (scaled) for the horizontal slider.
	*/
	iconLarge:String;
	/**
 * @description The relative path (uri) corresponding to a small image. For a DzFloatProperty that applies a morph_dz, this image is used for display in a horizontal slider. If this is not defined and a value is defined for iconLarge, its value will be used and the image will be scaled down.
	*/
	iconSmall:String;
	/**
 * @description A human readable label for the presentation.
	*/
	label:String;
	/**
 * @description The preferred base this item tries to follow. If this is does not match the autoFitBase of the conform target, auto-fit will try to convert the content.
	*/
	preferredBase:String;
	/**
 * @description A hint to the intended purpose of what the presentation is attached to. For a DzFloatProperty that applies a morph_dz intended to adjust the shape of the underlying structure of an object (e.g. "Nose Height" or "Eye Width"), this would be "Modifier/Shape". For a DzFloatProperty intended to be used for posing a DzBone of a figure, or to adjust a morph_dz that makes non-structural this would be "Modifier/Pose".
	*/
	type:String;
	/**
 * @description Default Constructor.
 * @constructor
*/
	constructor() {
	
	};

}
/**
 * @classdesc See Also:
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/process_dz} */
class DzProcess extends QObject {
	/**
 * @description Holds an Array of strings. The first being the program to execute, the rest being the command line arguments.
	*/
	arguments:Array;
	/**
 * @description Holds the communication for the process.
	*/
	communication:Communication;
	/**
 * @description Holds the exit status of the program when it has finished. 0 if the process is still running. (Read Only)
	*/
	exitStatus:Number;
	/**
 * @description Holds whether or not the process has exited normally. (Read Only)
	*/
	normalExit:Boolean;
	/**
 * @description Holds whether or not the process is currently running. (Read Only)
	*/
	running:Boolean;
	/**
 * @description Holds the working directory for the process.
	*/
	workingDirectory:String;
	/**
 * @description ENUMERATOR: Data can be written to the process' standard input.
*/
	
	static Stdin;
	/**
 * @description ENUMERATOR: Data can be read from the process' standard output.
*/
	
	static Stdout;
	/**
 * @description ENUMERATOR: Data can be read from the process' standard error.
*/
	
	static Stderr;
	/**
 * @description ENUMERATOR: Both, the process' standard error and its standard output are written to its standard output (which means nothing is sent to its standard error).
*/
	
	static DupStderr;
	/**
 * @description Default Constructor.
 * @attention This does NOT start the process.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Creates a DzProcess object specifying the program and any arguments.
 * @param args - The first element is the program to execute, the rest are the command line arguments.
 * @attention This does NOT start the process.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Creates a DzProcess object specifying only the program, without any arguments.
 * @param arg0 - The command to be executed.
 * @attention This does NOT start the process.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @returns true if it is possible to read an entire line of text from standard error, otherwise false.
*/
	canReadLineStderr():Boolean {
	
	};
	/**
 * @returns true if it is possible to read an entire line of text from standard output, otherwise false.
*/
	canReadLineStdout():Boolean {
	
	};
	/**
 * @description Closes the process' standard input and deletes any pending data that has not been written to standard input.
*/
	closeStdin():void {
	
	};
	/**
 * @description Terminates the process.
 * @attention This is not a safe way to end a process, as the process will not be able to perform any cleanup. tryTerminate() is safer, but process' can ignore it.
*/
	kill():void {
	
	};
	/**
 * @description Attempts to run the process, writing buffer to the process' standard input. Standard input is closed if all of the data in buffer is written to it.
 * @returns true if the process was able to start, otherwise false.
 * @param buffer - The buffer to write to standard input with writeToStdin() using the local 8-bit representation of the string.
 * @param env - The environment settings (if any), to set. If non-empty, values are expected to be in the form "NAME=VALUE", and the process is started with these environment settings. If empty (default), the process is started with the same environment settings as the starting process.
*/
	launch(buffer:String, env:Array):Boolean {
	
	};
	/**
 * @returns A line of text from standard error, minus any trailing newline or carriage return characters if canReadLineStderr() is true, otherwise an empty string.
*/
	readLineStderr():String {
	
	};
	/**
 * @returns A line of text from standard output, minus any trailing newline or carriage return characters if canReadLineStdout() is true, otherwise an empty string.
*/
	readLineStdout():String {
	
	};
	/**
 * @description Reads the data that the process has written to standard error. When new data is written, the readyReadStderr() signal is emitted.
 * @returns The data written to standard error, or an empty string if there is no such data.
 * @attention This method does not wait for there to be something to read.
*/
	readStderr():String {
	
	};
	/**
 * @description Reads the data that the process has written to standard output. When new data is written, the readyReadStdout() signal is emitted.
 * @returns The data written to standard output, or an empty string if there is no such data.
 * @attention This method does not wait for there to be something to read.
*/
	readStdout():String {
	
	};
	/**
 * @description Attempts to run the process for the program and arguments specified with the arguments property or as specified in the constructor.
 * @returns true if the process was able to start, otherwise false.
 * @param env - The environment settings (if any), to set. If non-empty, values are expected to be in the form "NAME=VALUE", and the process is started with these environment settings. If empty (default), the process is started with the same environment settings as the starting process.
*/
	start(env:Array):Boolean {
	
	};
	/**
 * @description Attempts to terminate the process.
 * @attention Process' can ignore this, if they choose to. If you want to be certain that the process is terminated, use kill() instead.
*/
	tryTerminate():void {
	
	};
	/**
 * @description Writes buffer to standard input. The process may, or may not, read the data. The wroteToStdin() signal is emitted once all data in buffer has been written to the process.
 * @param buffer - The buffer to write to.
*/
	writeToStdin(buffer:String):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the process is started with launch(). If starting the process is successful, this signal is emitted after the data passed in has been written to standard input. If starting the process fails, this signal is emitted immediately.
 * @signature `"launchFinished()"`
 * @event
*/
	launchFinished():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the process has exited.
 * @signature `"processExited()"`
 * @event
*/
	processExited():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the process has written data to standard error.
 * @signature `"readyReadStderr()"`
 * @event
*/
	readyReadStderr():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the process has written data to standard output.
 * @signature `"readyReadStdout()"`
 * @event
*/
	readyReadStdout():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted if the data sent to standard input (via writeToStdin()) was actually written to the process.
 * @signature `"wroteToStdin()"`
 * @event
*/
	wroteToStdin():void {
	
	};

}
/**
 * @classdesc The "Product" container type represents a collection of assets (and supporting files/metadata) that are presented as a single entity to the end-user. Each product is assigned a Globally Unique Identifier (GUID) that is used to identify that entity within the content ecosystem. Once a GUID has been assigned to a product (at creation), it does not (and should not) change.
While nearly all of the information that defines a product can be replicated into another, for logistical reasons a GUID can only be associated with one "Store" (source) at any single moment in its lifetime. This means that if more than one content package containing metadata that defines a given GUID is installed by an end-user, the last package installed will define the product in the database.
By default, all newly created assets are assigned to a "LOCAL USER" product. This product is represented by a GUID consisting entirely of zeros; i.e., "00000000-0000-0000-0000-000000000000"
The "LOCAL USER" product is associated with the "LOCAL USER" store (source); this cannot be modified.
See Also:
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/productassetcontainer_dz} */
class DzProductAssetContainer extends DzRefCountedItem, DzAbstractAssetContainer {
	/**
 * @description Holds the list of artist names associated with this product.
	*/
	artistNames:Array;
	/**
 * @description Holds the date this product was installed. Can be set (since 4.11.0.193) if isLocalUserStore is true (except where isLocalUser is true).
	*/
	dateInstalled:Date;
	/**
 * @description Holds the date this product was last updated. Can be set (since 4.11.0.193) if isLocalUserStore is true (except where isLocalUser is true).
	*/
	dateLastUpdated:Date;
	/**
 * @description Holds the date this product was purchased. Can be set (since 4.11.0.193) if isLocalUserStore is true (except where isLocalUser is true).
	*/
	datePurchased:Date;
	/**
 * @description Holds the date this product was released. Can be set (since 4.11.0.193) if isLocalUserStore is true (except where isLocalUser is true).
	*/
	dateReleased:Date;
	/**
 * @description Holds the vendor description of this product.
	*/
	description:String;
	/**
 * @description Holds the group identifier for the product. 0 = default, < 0 = app defined, > 0 = user defined.
	*/
	groupId:Number;
	/**
 * @description Holds the Globally Unique Identifier (GUID) associated with this product. (Read Only)
	*/
	guid:String;
	/**
 * @description Holds whether this product has metadata provided by the cloud. (Read Only)
	*/
	hasCloudMetadata:Boolean;
	/**
 * @description Holds whether this product should be hidden in product views.
	*/
	hidden:Boolean;
	/**
 * @description Holds the path of the icon for this product. (Read Only)
	*/
	iconPath:String;
	/**
 * @description Holds whether this product can be installed from the cloud. (Read Only)
	*/
	isCloudInstallable:Boolean;
	/**
 * @description Holds whether this product is installed from the cloud. (Read Only)
	*/
	isCloudInstalled:Boolean;
	/**
 * @description Holds whether a cloud operation is currently occurring for this product. (Read Only)
	*/
	isCloudOperationInProgress:Boolean;
	/**
 * @description Holds whether this product is managed by the cloud. (Read Only)
	*/
	isCloudOwned:Boolean;
	/**
 * @description Holds whether this product is currently downloading from the cloud. (Read Only)
	*/
	isDownloadingFromCloud:Boolean;
	/**
 * @description Holds whether this product is installed. (Read Only)
	*/
	isInstalled:Boolean;
	/**
 * @description Holds whether this product is the special product that holds locally created assets. (Read Only)
	*/
	isLocalUser:Boolean;
	/**
 * @description Holds whether this product's store is the special store for locally created products. (Read Only)
	*/
	isLocalUserStore:Boolean;
	/**
 * @description Holds whether the metadata for this product is valid. (Read Only)
	*/
	isMetadataValid:Boolean;
	/**
 * @description Holds whether this product is owned by a vendor or by the user. (Read Only)
	*/
	isVendor:Boolean;
	/**
 * @description Holds whether this product needs to be installed from the cloud. (Read Only)
	*/
	needsCloudInstall:Boolean;
	/**
 * @description Holds whether this product needs to be updated from the cloud. (Read Only)
	*/
	needsCloudUpdate:Boolean;
	/**
 * @description Holds the name of the store for this product. (Read Only)
	*/
	store:String;
	/**
 * @description Holds the title/name of this product.
	*/
	title:String;
	/**
 * @description Holds the token (i.e. SKU) for this product. (Read Only)
	*/
	token:String;
	/**
 * @description ENUMERATOR: Metadata that is created, owned and maintained by the user.
*/
	
	static User;
	/**
 * @description ENUMERATOR: Metadata that is created, owned and maintained by the vendor (originating source).
*/
	
	static Vendor;
	/**
 * @description ENUMERATOR: Metadata that is created, owned and maintained by the vendor (originating source) and/or the user.
*/
	
	static UserAndVendor;
	/**
 * @returns The default store icon size.
 * @since 4.9.3.110
*/
	getDefaultStoreIconSize():Size {
	
	};
	/**
 * @description Cancels any pending cloud operation on the product, if any.
 * @since 4.9.0.21
*/
	cancelFromCloud():void {
	
	};
	/**
 * @description Sets the product as belonging to the default group identifier; 0.
 * @since 4.9.0.11
*/
	clearGroup():void {
	
	};
	/**
 * @returns A list of the category paths associated with this product.
 * @since 4.9.0.54
 * @param metaType - The type of categories to get.
 * @param installedAssets - If true, only the categories of installed assets are included in the list, otherwise the categories of all assets regardless of installed state are included.
*/
	getCategories(metaType:ProductMetadataType, installedAssets:Boolean):Array {
	
	};
	/**
 * @returns The current icon size.
*/
	getIconSize():Size {
	
	};
	/**
 * @returns The image that is used to draw the icon for this product.
 * @since 4.11.0.193
*/
	getImage():Image {
	
	};
	/**
 * @returns The metadata for this product, in an XML string.
 * @since 4.9.0.11
 * @param metaType - The type of metadata to get.
*/
	getMetadataXML(metaType:ProductMetadataType):String {
	
	};
	/**
 * @returns The relative file path of the XML metadata file for this product.
 * @since 4.9.0.2
 * @param userData - If true, the basename of the file will reflect the user rather than the store.
*/
	getMetadataXMLPath(userData:Boolean):String {
	
	};
	/**
 * @returns The relative path that this product installs too.
 * @since 4.12.1.100
*/
	getRelativeInstallPath():String {
	
	};
	/**
 * @returns The list of files in this product that are not user facing.
 * @since 4.9.0.2
 * @param forceRefresh - If true, ignores any previously cached list of support files and causes the database to be queried explicitly.
*/
	getSupportFiles(forceRefresh:Boolean):Array {
	
	};
	/**
 * @returns The URL associated with this product.
*/
	getURL():String {
	
	};
	/**
 * @description Installs a product from the cloud if it is not currently installed. The user will be prompted to authenticate if necessary.
 * @since 4.9.0.2
*/
	installFromCloud():void {
	
	};
	/**
 * @returns true if the product is belongs to group, otherwise false.
 * @since 4.9.0.11
 * @attention 0 = default, < 0 = app defined, > 0 = user defined
*/
	isGroup(group:Number):Boolean {
	
	};
	/**
 * @description Loads the default icon for this product.
 * @returns true if the icon was loaded, otherwise false.
*/
	loadDefaultIcon():Boolean {
	
	};
	/**
 * @description Causes the product image to be loaded.
 * @returns true if the product image is loaded, otherwise false.
*/
	loadProductImage():Boolean {
	
	};
	/**
 * @description Pushes the metadata information into the database.
 * @returns true if the metadata was successfully pushed to the database, otherwise false.
 * @since 4.9.0.2
 * @attention This method retrieves data from the database immediately prior to updating the title, artist names, and description using locally set values and pushing the data back into the database.
*/
	pushMetadata():Boolean {
	
	};
	/**
 * @description Sets the icon size for this product container.
 * @param size - The new icon size.
*/
	setIconSize(size:Size):void {
	
	};
	/**
 * @description Sets the image that will be used to draw the icon for this product.
 * @since 4.11.0.193
 * @param img - The new image for this product.
*/
	setImage(img:Image):void {
	
	};
	/**
 * @description Sets the URL for this product.
 * @param url - The URL to use for this product.
*/
	setURL(url:String):void {
	
	};
	/**
 * @description Uninstalls the product if it is currently installed.
 * @since 4.9.0.2
*/
	uninstall():void {
	
	};
	/**
 * @description Uninstalls the product if it is currently installed.
 * @since 4.9.0.2
*/
	uninstallFromCloud():void {
	
	};
	/**
 * @description Updates the product if no other operations are currently being performed on it. The user will be prompted to authenticate if necessary.
 * @since 4.9.0.2
*/
	updateFromCloud():void {
	
	};
	/**
 * @description Updates the metadata for this product. The user will be prompted to authenticate if necessary.
 * @since 4.9.0.32
 * @param force - If true, any cached data will be discarded and force a connection to be made.
*/
	updateMetaDataFromCloud(force:Boolean):void {
	
	};

}
/**
 * @classdesc This container type does not directly support assets. The primary purpose of this container type is to collect results returned by a database query for products.
See Also:
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/productholdercontainer_dz} */
class DzProductHolderContainer extends DzRefCountedItem, DzTopLevelAssetContainer {
	/**
 * @description Attempts to insert the given container as a child to this container.
 * @returns true if the child was successfully added, otherwise false.
 * @param container - The container to insert as a child.
*/
	insertChildProductContainer(container:DzProductAssetContainer):Boolean {
	
	};

}
/**
 * @classdesc An asset save filter for saving a Properties Preset in the DSON format.
See Also:
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/propertiesassetfilter_dz} */
class DzPropertiesAssetFilter extends DzAssetFileOutFilter {
	/**
 * @description TODO:
Add description.
 * @constructor
*/
	constructor() {
	
	};

}
/**
 * @classdesc This is the base class for all properties that are owned or controlled by Elements. Properties can be keyable or not.
See Also:
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/property_dz} */
class DzProperty extends DzBase {
	/**
 * @description Holds the author of the file for this property. (Read Only)
	*/
	assetAuthor:DzAuthor;
	/**
 * @description Holds the revision version of the asset file for this property. (Read Only)
	*/
	assetFileRevision:DzVersion;
	/**
 * @description Holds the asset id for this property.
	*/
	assetId:String;
	/**
 * @description Holds the modified date of the asset file for this property. (Read Only)
	*/
	assetModifiedDate:Date;
	/**
 * @description Holds whether or not the asset for this property needs to be saved. (Read Only)
	*/
	assetNeedSave:Boolean;
	/**
 * @description Holds the URI of the asset source for this property; only valid when the asset is in an embedded state - i.e. modified. (Read Only)
	*/
	assetSource:DzUri;
	/**
 * @description Holds the asset URI for this property. (Read Only)
	*/
	assetUri:DzUri;
	/**
 * @description Holds whether or not the current value changed emits on scene clear.
	*/
	emitValueChangedOnSceneClear:Boolean;
	/**
 * @description ENUMERATOR: Linear interpolation between key values.
*/
	
	static InterpLinear;
	/**
 * @description ENUMERATOR: Constant interpolation between key values.
*/
	
	static InterpConstant;
	/**
 * @description ENUMERATOR: TCB (Kochanek-Bartels) Spline interpolation between key values.
*/
	
	static InterpTCB;
	/**
 * @description ENUMERATOR: Hermite Spline interpolation between key values.
*/
	
	static InterpHermite;
	/**
 * @description ENUMERATOR: Best for saving/loading; includes raw value; sets without adjusting.
*/
	
	static Standard;
	/**
 * @description ENUMERATOR: Include the default value.
*/
	
	static IncludeDefault;
	/**
 * @description ENUMERATOR: Includes the value instead of the raw value.
*/
	
	static CurrentValue;
	/**
 * @description ENUMERATOR: Best for setting.
*/
	
	static AdjustValue;
	/**
 * @description ENUMERATOR: Excludes images.
*/
	
	static SkipImages;
	/**
 * @description Adds a value to a settings.
 * @since 4.7.1.72
 * @param tm - The scene time to add the value for.
 * @param settings - The settings to add the data to.
 * @param flags - A bitwise OR of the flags for controlling the operation.
*/
	addValueToSettings(tm:DzTime, settings:DzSettings, flags:PropertyValueSettingsFlags):void {
	
	};
	/**
 * @description Adds a value to a settings.
 * @since 4.7.1.72
 * @param settings - The settings to add the data to.
 * @param flags - A bitwise OR of the flags for controlling the operation.
*/
	addValueToSettings(settings:DzSettings, flags:PropertyValueSettingsFlags):void {
	
	};
	/**
 * @description Creates an undo item for the property.
*/
	beginEdit():void {
	
	};
	/**
 * @returns A name path URI repersenting this property, relative to the root node.
 * @since 4.9.2.20
 * @param rootNode - The node the path should be relative too. If null (default) the skeleton will be used when parented to a skeleton, otherwise the property's own node will be used if it is not part of a skeleton hierarchy.
*/
	buildNameUriToRoot(rootNode:DzNode):DzUri {
	
	};
	/**
 * @returns true if it is legal to animate this property, otherwise false.
*/
	canAnimate():Boolean {
	
	};
	/**
 * @returns true if the property can automatically follow a property on a following figure, otherwise false.
*/
	canAutoFollow():Boolean {
	
	};
	/**
 * @description Finish the edit operation but cancel any changes.
*/
	cancelEdit():void {
	
	};
	/**
 * @description Clears the region associated with this property.
 * @param preservePath - If true (default), this property's path will not be affected, otherwise the region's path will be removed from this property's path.
*/
	clearRegion(preservePath:Boolean):void {
	
	};
	/**
 * @description Copies the value(s) of the given property into this property.
*/
	copyFrom(prop:DzProperty):void {
	
	};
	/**
 * @description Copies the value(s) of the property to a 'clipboard' so that they may be saved and applied (pasted) to another property; or to the same property.
 * @returns The 'clipboard' which holds a copy of the current property's value(s). These values are a snapshot of the current state of the property, and will remain unchanged even if the property is changed or deleted.
 * @attention The caller is responsible for deleting this object.
*/
	copyToClipboard():DzPropertyclipboard {
	
	};
	/**
 * @description Creates a new property that forwards all edits of its values to the property it is an alias of.
 * @returns The created property alias.
*/
	createAlias():void {
	
	};
	/**
 * @returns true if the current value of the property is the same as the default value, otherwise false.
*/
	currentValueIsDefaultValue():Boolean {
	
	};
	/**
 * @returns true if the current value of the property is the same as the value in the file definition, otherwise false.
*/
	currentValueIsDefinitionValue():Boolean {
	
	};
	/**
 * @description Deletes all keys on this property.
*/
	deleteAllKeys():void {
	
	};
	/**
 * @description Clears key values within the given range, including the endpoints.
 * @returns The number of keys actually deleted.
*/
	deleteKeys(interval:DzTimeRange):Number {
	
	};
	/**
 * @description Deletes all keys within a specified range.
 * @returns The number of keys deleted.
 * @param start - The key index to start from.
 * @param end - The key index to end at.
 * @attention You are responsible to ensure the key indices are within the valid range.
*/
	deleteKeys(start:Number, end:Number):Number {
	
	};
	/**
 * @description Deletes all selected keys.
 * @returns The number of keys actually removed.
*/
	deleteSelectedKeys():Number {
	
	};
	/**
 * @returns The index of the key if there is a key at the given time, otherwise -1.
 * @since 4.11.0.225
*/
	findKeyIndex(t:DzTime):Number {
	
	};
	/**
 * @description Searches node for a property that matches the name of this property.
 * @param node - The node to search.
*/
	findMatchingProperty(node:DzNode):void {
	
	};
	/**
 * @description Finalizes the undo item and pushes it on to the undo stack.
*/
	finishEdit():void {
	
	};
	/**
 * @returns The alias to this property at index (if valid), otherwise NULL.
 * @param index - The index of the alias to this property to get.
*/
	getAlias(index:Number):void {
	
	};
	/**
 * @returns The property that this property is an alias of, or NULL if none (default).
*/
	getAliasTarget():void {
	
	};
	/**
 * @description Populates the given settings object with the attributes of this property.
*/
	getAttributes(settings:DzPropertySettings):void {
	
	};
	/**
 * @returns The auto-follow target URI for this property.
 * @since 4.9.2.19
*/
	getAutoFollowTargetUri():DzUri {
	
	};
	/**
 * @returns The i'th controller on this property.
 * @param idx - The index of the controller on this property to get.
*/
	getController(idx:Number):DzController {
	
	};
	/**
 * @returns A list of the controllers on this property.
*/
	getControllerList():Array {
	
	};
	/**
 * @returns The property group that this property belongs to (if any), otherwise NULL.
*/
	getGroup():DzPropertyGroup {
	
	};
	/**
 * @returns The index of controllers that are slaved to this property (if any), otherwise -1.
*/
	getIndexOfSlaveControllers(cntrl:DzController):Number {
	
	};
	/**
 * @returns The type of interpolation performed for the i'th key in the property.
 * @since 4.11.0.210
 * @param i - The index of the key to get the interpolation values for.
*/
	getKeyInterpolationType(i:Number):InterpolationType {
	
	};
	/**
 * @returns A list of 4 values for the interpolation type performed for the i'th key in the property.
 * @since 4.11.0.210
 * @param i - The index of the key to get the interpolation values for.
 * @attention If getKeyInterpolationType() == InterpTCB, the return values will be InterpTCB, the T value, the C value, and the B value. If getKeyInterpolationType() == InterpHermite, the return values will be InterpHermite, the starting slope value, the ending slope value, and 0.0.
*/
	getKeyInterpolationTypeValues(i:Number):Array {
	
	};
	/**
 * @returns The total range of keys on this property.
*/
	getKeyRange():DzTimeRange {
	
	};
	/**
 * @returns The time of the i'th key within the current key range.
 * @param i - The index of the key time within the current key range.
*/
	getKeyTime(i:Number):DzTime {
	
	};
	/**
 * @returns The user-defined label for this property.
*/
	getLabel():String {
	
	};
	/**
 * @returns The number of aliases to this property that exist.
*/
	getNumAliases():Number {
	
	};
	/**
 * @returns The number of controllers for this property
*/
	getNumControllers():Number {
	
	};
	/**
 * @returns The total number of keys on this property.
*/
	getNumKeys():Number {
	
	};
	/**
 * @returns The number of keys that exist within the given range, including endpoints.
 * @param range - The range to get the number of keys in.
*/
	getNumKeys(range:DzTimeRange):Number {
	
	};
	/**
 * @returns The number of currently selected keys on this property.
*/
	getNumSelectedKeys():Number {
	
	};
	/**
 * @returns The number of controllers that are slaved to this property.
*/
	getNumSlaveControllers():Number {
	
	};
	/**
 * @returns The current owner of this property.
*/
	getOwner():DzElement {
	
	};
	/**
 * @returns The slash ('/') delimited hierarchical path of the group this property is assigned to.
*/
	getPath():String {
	
	};
	/**
 * @returns The presentation for this property (if any), otherwise NULL.
*/
	getPresentation():DzPresentation {
	
	};
	/**
 * @returns The geometry region for this property (if any), otherwise NULL.
*/
	getRegion():DzGeometryregion {
	
	};
	/**
 * @returns A range that encompasses all currently selected keys on this property.
*/
	getSelectedKeyRange():DzTimeRange {
	
	};
	/**
 * @returns The i'th controller that is slaved to this property.
*/
	getSlaveController(idx:Number):DzController {
	
	};
	/**
 * @returns A list of the controllers that are slaved to this property.
*/
	getSlaveControllerList():Array {
	
	};
	/**
 * @returns The classname of the widget to use for displaying this property to the user.
 * @param styled - If true, the returned classname should be the styled version (i.e., DS 4 vs DS 3). If false, the returned classname should be the base version.
*/
	getWidgetClass(styled:Boolean):String {
	
	};
	/**
 * @returns The name of the styled widget class, otherwise the name of the standard widget class; this will be an empty string if the corresponding value has not been set.
 * @since 4.6.4.88
 * @param styled - If true, the return value will be the name of the styled widget class.
*/
	getWidgetClassOverride(styled:Boolean):String {
	
	};
	/**
 * @returns true if this property has controllers, otherwise false.
*/
	hasControllers():Boolean {
	
	};
	/**
 * @returns true if this property has key data, otherwise false.
*/
	hasKeys():Boolean {
	
	};
	/**
 * @returns true if this property has controllers that are slaved to it, otherwise false.
*/
	hasSlaveControllers():Boolean {
	
	};
	/**
 * @returns true if an override for the widget class has been specified, otherwise false.
 * @since 4.6.4.88
 * @param styled - If true, the return value will be based on whether or not an override for the styled widget class has been specified.
*/
	hasWidgetClassOverride(styled:Boolean):Boolean {
	
	};
	/**
 * @returns true if this property is an alias to another property, otherwise false (default).
*/
	isAlias():Boolean {
	
	};
	/**
 * @returns true if this property and prop can be combined in the UI, otherwise false.
 * @param prop - The property in question.
*/
	isCombinable(prop:DzProperty):Boolean {
	
	};
	/**
 * @returns true if this property should [temporarily] auto-follow, otherwise false.
 * @since 4.8.0.23
*/
	isDynamicallyAutoFollow():Boolean {
	
	};
	/**
 * @returns true if this property should [temporarily] not be shown in the interface, otherwise false.
*/
	isDynamicallyHidden():Boolean {
	
	};
	/**
 * @returns true if the property is being edited, otherwise false.
*/
	isEditing():Boolean {
	
	};
	/**
 * @returns true if the property is a favorite, otherwise false.
*/
	isFavorite():Boolean {
	
	};
	/**
 * @returns true if the property is a global favorite, otherwise false.
*/
	isGlobalFavorite():Boolean {
	
	};
	/**
 * @returns true if this property should not be shown in the interface, otherwise false.
*/
	isHidden():Boolean {
	
	};
	/**
 * @returns true if the key at the given index is selected, otherwise false.
 * @param i - The index of the key in question.
*/
	isKeySelected(i:Number):Boolean {
	
	};
	/**
 * @returns true if this property is locked, otherwise false.
*/
	isLocked():Boolean {
	
	};
	/**
 * @returns true if the property will cause manipulation updates of the object in the viewport (default), otherwise false.
*/
	isManipulator():Boolean {
	
	};
	/**
 * @returns true if the property is new, otherwise false.
*/
	isNew():Boolean {
	
	};
	/**
 * @returns true if this property can be retrieved/set as a scalar numeric value, otherwise false.
*/
	isNumeric():Boolean {
	
	};
	/**
 * @returns true if the property is currently overriding its controllers, otherwise false.
*/
	isOverridingControllers():Boolean {
	
	};
	/**
 * @returns true if this property is private, otherwise false.
*/
	isPrivateProperty():Boolean {
	
	};
	/**
 * @returns true if this property is for rigging, otherwise false.
*/
	isRigProperty():Boolean {
	
	};
	/**
 * @returns true if the property is selected, otherwise false.
*/
	isSelected():Boolean {
	
	};
	/**
 * @returns true if this property can be deleted by the user, otherwise false.
*/
	isUserProperty():Boolean {
	
	};
	/**
 * @description Locks/Unlocks this property. When locked, a property will not accept new key values or changes to current key values.
 * @param onOff - If true, the property will be locked. If false, the property will be unlocked.
*/
	lock(onOff:Boolean):void {
	
	};
	/**
 * @description Marks the asset as being modified.
 * @returns true if the asset was successfully marked as being modified, otherwise false.
 * @param newUri - The URI for the asset.
*/
	modifyAsset():Boolean {
	
	};
	/**
 * @description Marks the asset as being modified.
 * @returns true if the asset was successfully marked as being modified, otherwise false.
 * @param newUri - The URI for the asset.
*/
	modifyAsset(newUri:DzUri):Boolean {
	
	};
	/**
 * @description Moves the controller at curIdx to newIdx
 * @returns true if the move was successful, otherwise false.
 * @param curIdx - The index of the controller to move. If < 0 or >= DzProperty.getNumControllers() this method will return false.
 * @param newIdx - The index to move the controller to. If < 0 the controller will be moved to the beginning of the list. If >= DzProperty.getNumControllers(), the controller will be moved to the end of the list.
*/
	moveControllerToIndex(curIdx:Number, newIdx:Number):Boolean {
	
	};
	/**
 * @description Moves the controller ctrl to location newIdx
 * @returns true if the move was successful, otherwise false.
 * @param ctrl - The controller to remove.
 * @param newIdx - The index to move the controller to. If < 0 the controller will be moved to the beginning of the list. If >= DzProperty.getNumControllers(), the controller will be moved to the end of the list.
*/
	moveControllerToIndex(ctrl:DzController, newIdx:Number):Boolean {
	
	};
	/**
 * @description Creates a copy of this property. The property will not have controllers, an owner, be in a region, or be linked.
 * @returns A duplicate of this property (if successful), otherwise null.
*/
	propertyDuplicate():void {
	
	};
	/**
 * @returns true if the raw value of the property is the same as the value in the file definition, otherwise false.
 * @since 4.9.2.1
*/
	rawValueIsDefinitionValue():Boolean {
	
	};
	/**
 * @description Removes all controllers from this property.
*/
	removeAllControllers():void {
	
	};
	/**
 * @description Removes the given controller from this property.
 * @param ctrl - The controller to remove.
*/
	removeController(ctrl:DzController):void {
	
	};
	/**
 * @description Removes the controller at the given index from this property.
 * @param idx - The index of the controller to remove.
*/
	removeController(idx:Number):void {
	
	};
	/**
 * @description Removes the controller that references the given property.
 * @param prop - The property to remove the controller for.
*/
	removeController(prop:DzProperty):void {
	
	};
	/**
 * @description Select or deselect all keys.
 * @returns The number of keys whose state was changed.
 * @param onOff - If true, the keys will be selected. If false, the keys will be deselected.
*/
	selectAllKeys(onOff:Boolean):Number {
	
	};
	/**
 * @description Selects/deselects the i'th key.
 * @param i - The index of the key to select/deselect.
 * @param onOff - If true, the key will be selected. If false, the key will be deselected.
*/
	selectKey(i:Number, onOff:Boolean):void {
	
	};
	/**
 * @description Sets the selection state of any keys in the given range.
 * @returns The number of keys whose selection state changed.
 * @param range - The range of keys to select/deselect.
 * @param onOff - If true, the keys will be selected. If false, the keys will be deselected.
*/
	selectKeys(range:DzTimeRange, onOff:Boolean):Number {
	
	};
	/**
 * @description Sets attributes for this property. "UserProperty" and "RigProperty" attributes are not copied from the settings unless a bool setting of "ForceSetUser" and/or "ForceSetRig" is set on the property settings object respectively.
 * @param settings - The settings to use to set attributes.
*/
	setAttributes(settings:DzPropertySettings):void {
	
	};
	/**
 * @description Sets a path to locate the property on the follow target to follow.
 * @since 4.9.2.19
 * @param path - The URI for the property to automatically follow. The node path is assumed to be relative to the target skeleton.
*/
	setAutoFollowTargetUri(path:DzUri):void {
	
	};
	/**
 * @description Sets whether this property is animatable.
 * @param yesNo - If true, the property is set to be animatable.
 * @attention This method should only called to set initial values on a property that has been created using the default constructor.
*/
	setCanAnimate(yesNo:Boolean):void {
	
	};
	/**
 * @description Sets whether or not the property can automatically follow properties on a following figure.
 * @param onOff - If true, the property will be considered during auto-follow.
 * @attention When associated with a figure that is a follow target, this value determines whether or not this property will be projected onto the follower (if this property is the control for an auto-follow modifier, e.g., morph_dz). When associated with a figure that is a follower, this value determines whether or not the name of this property (or the name of a modifier that owns this property) will be used to find a match in the follow target and if found add the found property's value (minus its default value) to this property's value (as possible depending on any constrains/controllers).
*/
	setCanAutoFollow(onOff:Boolean):DzMorph {
	
	};
	/**
 * @description Sets whether or not this property should [temporarily] auto-follow.
 * @since 4.8.0.23
 * @param yesNo - If true, the property dynamically auto-follows.
 * @attention The dynamically auto-follow state is not saved.
*/
	setDynamicallyAutoFollow(yesNo:Boolean):void {
	
	};
	/**
 * @description Sets whether or not this property should be [temporarily] hidden in the interfacee.
 * @since 4.8.0.23
 * @param yesNo - If true, the property is dynamically hidden.
 * @attention The dynamically hidden state is not saved.
*/
	setDynamicallyHidden(yesNo:Boolean):void {
	
	};
	/**
 * @description Sets whether or not this property is hidden in the interface.
 * @param yesNo - If true, the property is hidden.
*/
	setHidden(yesNo:Boolean):void {
	
	};
	/**
 * @description Sets whether or not the property is a favorite.
 * @param onOff - If true, the property will be set as a favorite.
*/
	setIsFavorite(onOff:Boolean):void {
	
	};
	/**
 * @description Sets whether or not the property is a global favorite.
 * @param onOff - If true, the property will be set as a global favorite.
*/
	setIsGlobalFavorite(onOff:Boolean):void {
	
	};
	/**
 * @description Sets whether or not the property is one that will cause manipulation updates of the object in the viewport.
 * @param onOff - If true, the property will be set as a manipulator.
*/
	setIsManipulator(onOff:Boolean):void {
	
	};
	/**
 * @description Sets whether this property is a rigging property.
 * @param yesNo - If true, the property is set to be a rigging-property.
 * @attention This method should only be called to set initial values on a property that has been created using the default constructor.
*/
	setIsRigProperty(yesNo:Boolean):void {
	
	};
	/**
 * @description Sets whether this property is a user property (i.e., can be deleted by the user).
 * @param yesNo - If true, the property is set to be a user-property.
 * @attention This method should only be called to set initial values on a property that has been created using the default constructor.
*/
	setIsUserProperty(yesNo:Boolean):void {
	
	};
	/**
 * @description Sets the interpolation method for the i'th key.
 * @since 4.11.0.210
 * @param i - The index of the key to change.
 * @param interp - The type of interpolation to perform between this keyframe and the next.
 * @param param0 - The 1st parameter for key interpolation; i.e., the T value for TCB interpolation, or the starting slope value for Hermite interpolation.
 * @param param1 - The 2nd parameter for key interpolation; i.e., the C value for TCB interpolation, or the ending slope value for Hermite interpolation.
 * @param param2 - The 3rd parameter for key interpolation; i.e., the B value for TCB interpolation, 0.0 for Hermite interpolation.
*/
	setKeyInterpolationType(i:Number, interp:InterpolationType, param0:Number, param1:Number, param2:Number):void {
	
	};
	/**
 * @description Sets the interpolation method for the i'th key.
 * @since 4.11.0.210
 * @param i - The index of the key to change.
 * @param interp - The type of interpolation to perform between this keyframe and the next.
*/
	setKeyInterpolationType(i:Number, interp:InterpolationType):void {
	
	};
	/**
 * @description Sets the label that the user sees in the interface for this property.
 * @param path - The label to set; should be unique among all the other properties of this property's owner.
*/
	setLabel(label:String):void {
	
	};
	/**
 * @description Sets whether or not the property is marked new.
 * @param onOff - If true, this property will be marked new.
*/
	setNew(onOff:Boolean):void {
	
	};
	/**
 * @description Sets whether or not this property will override its controllers.
 * @param onOff - If true, this property will override its controllers.
*/
	setOverrideControllers(onOff:Boolean):void {
	
	};
	/**
 * @description Sets the group that this property belongs to.
 * @param path - The slash ('/') delimited hierarchical path of the group to assign this property to.
*/
	setPath(path:String):void {
	
	};
	/**
 * @param pres - The presentation to set on this property.
*/
	setPresentation(pres:DzPresentation):void {
	
	};
	/**
 * @param reg - The geometry region to set.
*/
	setRegion(reg:geometryregion_dz):DzGeometryregion {
	
	};
	/**
 * @description Sets whether or not the property is selected.
 * @param onOff - If true, the property will be set as selected.
*/
	setSelected(onOff:Boolean):void {
	
	};
	/**
 * @description Sets the value using settings.
 * @since 4.7.1.72
 * @param settings - The settings with the data to set.
 * @param flags - A bitwise OR of the flags for controlling the operation.
*/
	setValueFromSettings(settings:DzSettings, flags:PropertyValueSettingsFlags):void {
	
	};
	/**
 * @description Sets the value using settings.
 * @since 4.7.1.72
 * @param tm - The scene time to set the value at.
 * @param settings - The settings with the data to set.
 * @param flags - A bitwise OR of the flags for controlling the operation.
*/
	setValueFromSettings(tm:DzTime, settings:DzSettings, flags:PropertyValueSettingsFlags):void {
	
	};
	/**
 * @description Sets the name of the widget class to override the default widget class for this property.
 * @returns DZ_NO_ERROR if no error occurs, otherwise an appropriate error code.
 * @since 4.6.4.88
 * @param styledWgtClassName - The name of the styled widget class.
 * @param wgtClassName - The name of the standard widget class.
*/
	setWidgetClassOverride(styledWgtClassName:String, wgtClassName:String):DzError {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the alias list for this property has changed.
 * @signature `"aliasListChanged()"`
 * @event
*/
	aliasListChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when this property has been modified.
 * @signature `"assetModified()"`
 * @event
*/
	assetModified():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted after this property has been saved.
 * @signature `"assetWasSaved()"`
 * @event
*/
	assetWasSaved():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the URI for the auto-follow target of this property has changed.
 * @signature `"autoFollowTargetUriChanged(const DzUri&)"`
 * @event
*/
	autoFollowTargetUriChanged(path:DzUri):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when animation for this property is enabled or disabled.
 * @signature `"canAnimateChanged(bool)"`
 * @event
*/
	canAnimateChanged(enabled:Boolean):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the state for whether this property can auto-follow changed.
 * @signature `"canAutoFollowChanged(bool)"`
 * @event
*/
	canAutoFollowChanged(canAutoFollow:Boolean):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the controller list for this property has changed.
 * @signature `"controllerListChanged()"`
 * @event
*/
	controllerListChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the value of this property at the current time has changed. If the current time changes and this property has animation data, this signal is emitted as appropriate. Subclasses of DzProperty should call emitCurrentValueChanged() when the value has changed.
 * @signature `"currentValueChanged()"`
 * @event
*/
	currentValueChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the dynamically auto-follow hidden state of this property is changed.
 * @signature `"dynamicallyAutoFollowChanged(bool)"`
 * @event
*/
	dynamicallyAutoFollowChanged(onOff:Boolean):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the dynamically hidden state of this property is changed.
 * @signature `"dynamicallyHiddenChanged(bool)"`
 * @event
*/
	dynamicallyHiddenChanged(hidden:Boolean):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when editing of this property has finished.
 * @signature `"editFinished()"`
 * @event
*/
	editFinished():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the group this property is in changed.
 * @signature `"groupChanged(DzPropertyGroup*)"`
 * @event
*/
	groupChanged(group:DzPropertyGroup):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the hidden state of this property is changed.
 * @signature `"hiddenChanged(bool)"`
 * @event
*/
	hiddenChanged(hidden:Boolean):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when this property is set or unset as a favorite.
 * @signature `"isFavoriteChanged(bool)"`
 * @event
*/
	isFavoriteChanged(onOff:Boolean):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when this property is set or unset as a global favorite.
 * @signature `"isGlobalFavoriteChanged(bool)"`
 * @event
*/
	isGlobalFavoriteChanged(onOff:Boolean):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when this property is set or unset as a manipulator.
 * @signature `"isManipulatorChanged(bool)"`
 * @event
*/
	isManipulatorChanged(isManip:Boolean):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when this property is set or unset as a user property.
 * @signature `"isUserPropertyChanged(bool)"`
 * @event
*/
	isUserPropertyChanged(isUserProp:Boolean):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the selection state of this property's keys has changed.
 * @signature `"keySelectionChanged(const DzTimeRange&)"`
 * @event
*/
	keySelectionChanged(range:DzTimeRange):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the label of this property is changed.
 * @signature `"labelChanged(const QString&)"`
 * @event
*/
	labelChanged(newLabel:String):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the lock state of this property has changed.
 * @signature `"lockStateChanged()"`
 * @event
*/
	lockStateChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the new state of this property has changed.
 * @signature `"newStateChanged()"`
 * @event
*/
	newStateChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the state for whether this property overrides its controllers changed.
 * @signature `"overridingControllersChanged(bool)"`
 * @event
*/
	overridingControllersChanged(overriding:Boolean):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the presentation icon for this property has changed.
 * @signature `"presentationIconChanged()"`
 * @event
*/
	presentationIconChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when this property is destroyed.
 * @signature `"propertyDeleted(DzProperty*)"`
 * @event
*/
	propertyDeleted(prop:DzProperty):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the region for this property has changed.
 * @signature `"regionChanged()"`
 * @event
*/
	regionChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when this property is removed.
 * @signature `"removed()"`
 * @event
*/
	removed():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when this property is selected or deselected.
 * @signature `"selectionStateChanged()"`
 * @event
*/
	selectionStateChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the slave controller list for this property has changed.
 * @signature `"slaveControllerListChanged()"`
 * @event
*/
	slaveControllerListChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the value of this property is changed.
 * @signature `"valueChanged(const DzTimeRange&)"`
 * @event
*/
	valueChanged(range:DzTimeRange):void {
	
	};

}
/**
 * @classdesc DzPropertyGroup objects are all owned and managed by DzElement objects. Do not create property groups yourself - they are automatically created as needed when you assign individual properties to a group. To iterate through the property groups for an element, use DzElement.getPropertyGroups() to get the property group tree that the element's properties are grouped in.
See Also:
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/propertygroup_dz} */
class DzPropertyGroup extends DzBase {
	/**
 * @returns The name of the default group.
 * @since 4.7.1.66
*/
	getDefaultGroupName():String {
	
	};
	/**
 * @returns The child with the given name (if any), otherwise NULL.
 * @param name - The name of the property group to look for.
*/
	findChild(name:String):void {
	
	};
	/**
 * @returns The property in this group with the given name (if any), otherwise null.
 * @since 4.7.1.34
 * @param propName - The name of the property to find.
 * @param traverse - If true, the siblings of this group will be checked.
 * @param recurse - If true, the children of this group will be checked.
*/
	findProperty(propName:String, traverse:Boolean, recurse:Boolean):DzProperty {
	
	};
	/**
 * @returns The property in this group with the given label (if any), otherwise null.
 * @since 4.9.3.11
 * @param propLabel - The label of the property to find.
 * @param traverse - If true, the siblings of this group will be checked.
 * @param recurse - If true, the children of this group will be checked.
*/
	findPropertyByLabel(propLabel:String, traverse:Boolean, recurse:Boolean):DzProperty {
	
	};
	/**
 * @returns The sibling with the given name (if any), otherwise NULL.
 * @param name - The name of the sibling to look for.
*/
	findSibling(name:String):void {
	
	};
	/**
 * @description Provided for convenience and DAZ Script access.
 * @returns A list of all property group paths begining with this group.
*/
	getAllPaths():Array {
	
	};
	/**
 * @returns A list of all properties in this group.
 * @since 4.9.4.101
*/
	getAllProperties():Array {
	
	};
	/**
 * @returns true if the group is collapsed, otherwise false.
*/
	getCollapsed():Boolean {
	
	};
	/**
 * @returns The first child group, if any.
*/
	getFirstChild():void {
	
	};
	/**
 * @returns The next sibling to this group (if any), otherwise NULL.
*/
	getNextSibling():void {
	
	};
	/**
 * @returns The number of properties in this group.
*/
	getNumProperties():Number {
	
	};
	/**
 * @returns The current parent of this group.
*/
	getParent():void {
	
	};
	/**
 * @returns The path of this group.
*/
	getPath():String {
	
	};
	/**
 * @returns The previous sibling (if any), otherwise NULL.
 * @since 4.7.1.66
*/
	getPreviousSibling():void {
	
	};
	/**
 * @returns The i'th property in this group.
 * @param i - The index of the property to return.
*/
	getProperty(i:Number):DzProperty {
	
	};
	/**
 * @returns The region associated with this property group (if any), otherwise NULL.
*/
	getRegion():DzGeometryregion {
	
	};
	/**
 * @returns The property group tree that this group belongs to.
*/
	getTree():DzPropertyGroupTree {
	
	};
	/**
 * @returns The index of prop in the group, or -1 if prop is not in the group.
*/
	indexOfProperty(prop:DzProperty):Number {
	
	};
	/**
 * @returns true if this group is associated with a geometryregion_dz, otherwise false.
*/
	isRegion():Boolean {
	
	};
	/**
 * @description Moves the specified property to a new position within the group.
 * @returns true if the move was successful, otherwise false.
 * @param prop - The property to move. This property must be in this group to be successful.
 * @param newIndex - The location to move prop to; if not a valid index, prop is moved to the end of the list.
*/
	movePropertyToIndex(prop:DzProperty, newIndex:Number):Boolean {
	
	};
	/**
 * @description Sets whether or not the group is displayed as collapsed in the interface.
 * @param onOff - If true, the group is collapsed. If false, the group is expanded.
*/
	setCollapsed(onOff:Boolean):void {
	
	};
	/**
 * @description Sets the label of prop to a unique version of itself.
 * @param prop - The property to set the label on.
*/
	setUniquePropertyLabel(prop:DzProperty):void {
	
	};
	/**
 * @description Alpha-numerically sorts the property groups, and the properties in them.
*/
	sort():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when a child has been added to the group.
 * @signature `"addedChild(DzPropertyGroup*)"`
 * @event
*/
	addedChild(newChild:DzPropertyGroup):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the child list of the group has changed.
 * @signature `"childListChanged()"`
 * @event
*/
	childListChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the parent of the group has changed.
 * @signature `"parentChanged(DzPropertyGroup*)"`
 * @event
*/
	parentChanged(newParent:DzPropertyGroup):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the visibility of a property in the group has changed.
 * @signature `"propertyVisiblityChanged(DzPropertyGroup*,DzProperty*)"`
 * @event
*/
	propertyVisiblityChanged(grp:DzPropertyGroup, prop:DzProperty):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when a child has been removed from the group.
 * @signature `"removedChild(DzPropertyGroup*)"`
 * @event
*/
	removedChild(child:DzPropertyGroup):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the tree has changed.
 * @signature `"treeChanged()"`
 * @event
*/
	treeChanged():void {
	
	};

}
/**
 * @classdesc See Also:
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/propertygrouptree_dz} */
class DzPropertyGroupTree extends DzBase {
	/**
 * @returns The child with the given path (if any), otherwise NULL.
 * @param name - The name of the property group to look for.
*/
	findChild(name:String):DzPropertyGroup {
	
	};
	/**
 * @description Attempts to find a property with a given name.
 * @returns The found property (if any), otherwise NULL.
 * @since 4.7.1.43
 * @param name - The name of the property to find.
*/
	findProperty(name:String):DzProperty {
	
	};
	/**
 * @description Attempts to find a property with a given label.
 * @returns The found property (if any), otherwise NULL.
 * @since 4.11.0.166
 * @param label - The label of the property to find.
*/
	findPropertyByLabel(label:String):DzProperty {
	
	};
	/**
 * @returns A list of all property group paths in this tree.
*/
	getAllPaths():Array {
	
	};
	/**
 * @returns A list of all properties in this tree.
 * @since 4.9.4.101
*/
	getAllProperties():Array {
	
	};
	/**
 * @returns The default property group for the tree; i.e., "General"
*/
	getDefaultGroup():DzPropertyGroup {
	
	};
	/**
 * @returns The first child group (if any), otherwise NULL.
*/
	getFirstChild():DzPropertyGroup {
	
	};
	/**
 * @returns The element that this property group tree belongs to.
*/
	getOwner():DzElement {
	
	};
	/**
 * @returns true if this property group tree is private, otherwise false.
*/
	isPrivate():void {
	
	};
	/**
 * @description Sets whether or not this property group tree is private.
 * @param onOff - If true, the property group tree is set private.
*/
	setIsPrivate(onoff:Boolean):void {
	
	};
	/**
 * @description Alpha-numerically sorts the property groups, keeping "General" at the top.
*/
	sortGroups():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the child list of the group has changed.
 * @signature `"childListChanged()"`
 * @event
*/
	childListChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the visibility of a property in the tree has changed.
 * @signature `"propertyVisiblityChanged(DzPropertyGroup*,DzProperty*)"`
 * @event
*/
	propertyVisiblityChanged(grp:DzPropertyGroup, prop:DzProperty):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the tree has changed.
 * @signature `"treeChanged()"`
 * @event
*/
	treeChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the tree is sorted.
 * @signature `"treeSorted()"`
 * @event
*/
	treeSorted():void {
	
	};

}
/**
 * @classdesc Provides a DzComboBox like widget with a custom popup designed for choosing a DzProperty.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/propertyselectioncombobox_dz} */
class DzPropertySelectionComboBox extends DzWidget {
	/**
 * @description Creates a property selection combobox as a child of the given parent widget.
 * @param parent - The widget parent for the combobox.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Clears the selection of any properties.
 * @since 4.10.0.27
*/
	clearPropertySelection():void {
	
	};
	/**
 * @returns A list of the properties to be excluded in the popup.
*/
	getExcludeList():Array {
	
	};
	/**
 * @returns A list of the nodes to be shown in the popup.
*/
	getNodes():Array {
	
	};
	/**
 * @returns The selected property.
*/
	getSelectedProperty():DzProperty {
	
	};
	/**
 * @description Hide the popup.
*/
	hidePopup():void {
	
	};
	/**
 * @description Sets whether or not the popup should display rigging properties, regardless of their existence in the exclude list.
*/
	setEditMode(onOff:Boolean):void {
	
	};
	/**
 * @description Sets the properties to be excluded in the popup.
 * @param properties - The list of properties to exclude.
*/
	setExcludeList(properties:Array):void {
	
	};
	/**
 * @description Sets whether or not the popup should filter non-morph properties from the list.
*/
	setMorphOnly(onOff:Boolean):void {
	
	};
	/**
 * @description Sets the node from the scene to be shown in the popup.
 * @param node - The DzNode to show properties for.
*/
	setNode(node:DzNode):void {
	
	};
	/**
 * @description Sets the nodes from the scene to be shown in the popup.
 * @param nodes - A list of the DzNode objects to show properties for.
*/
	setNodes(nodes:Array):void {
	
	};
	/**
 * @description Sets whether or not the popup should filter non-numeric properties from the list.
*/
	setNumericOnly(onOff:Boolean):void {
	
	};
	/**
 * @description Sets the height of the popup to height.
*/
	setPopUpHeight(height:Number):void {
	
	};
	/**
 * @description Sets the minimum width of the popup to width.
*/
	setPopUpMinWidth(width:Number):void {
	
	};
	/**
 * @description Sets whether or not the popup should filter non-private properties from the list.
 * @since 4.10.0.23
*/
	setPrivateOnly(onOff:Boolean):void {
	
	};
	/**
 * @description Sets whether or not the popup should filter non-public properties from the list.
 * @since 4.10.0.23
*/
	setPublicOnly(onOff:Boolean):void {
	
	};
	/**
 * @description Sets the property to be selected.
 * @param prop - The property to select.
*/
	setSelectedProperty(prop:DzProperty):void {
	
	};
	/**
 * @description Sets whether or not the popup should display hidden properties.
*/
	setShowHidden(onOff:Boolean):void {
	
	};
	/**
 * @description Sets whether or not the popup should filter non-transform properties from the list.
 * @since 4.10.0.23
*/
	setTransformOnly(onOff:Boolean):void {
	
	};
	/**
 * @description Display the popup.
*/
	showPopup():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the selected DzProperty changes.
 * @signature `"propertySelectionChanged()"`
 * @event
*/
	propertySelectionChanged():void {
	
	};

}
/**
 * @classdesc 
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/propertysettings_dz} */
class DzPropertySettings extends DzSettings {
	/**
 * @description Default Constructor - creates an empty set of options.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Copy constructor.
 * @param settings - The settings object to copy data from.
 * @constructor
*/
	constructor() {
	
	};

}
/**
 * @classdesc An asset save filter for saving a Puppeteer Preset in the DSON format.
See Also:
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/puppeteerassetfilter_dz} */
class DzPuppeteerAssetFilter extends DzAssetFileOutFilter {
	/**
 * @description TODO:
Add description.
 * @constructor
*/
	constructor() {
	
	};

}
/**
 * @classdesc 
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/pushbutton_dz} */
class DzPushButton extends DzButton {
	/**
 * @description Holds whether or not the button has the auto-default feature and responds to the [Enter] key when it has the focus; true by default for buttons that have a DzDialog parent, otherwise false.
	*/
	autoDefault:Boolean;
	/**
 * @description Holds the style that the button is drawn in.
	*/
	buttonStyle:ButtonStyle;
	/**
 * @description Holds the format that the button text is drawn in; DzWidget.AlignmentFlags and DzWidget.TextFlags OR'd together for the button label.
	*/
	buttonTextFormat:Number;
	/**
 * @description Holds whether or not the button will collapse empty space reserved for various parts of the button.
	*/
	collapseEmptySpace:Boolean;
	/**
 * @description Holds whether or not the button is the default button; false by default.
	*/
	default:Boolean;
	/**
 * @description Holds whether or not to display the arrow for this button.
	*/
	displayDownArrow:Boolean;
	/**
 * @description Holds the name of the pixel metric used to define the size of the arrow on this button (if any).
	*/
	downArrowMetric:String;
	/**
 * @description Holds the name of the primitive element used to draw the arrow on this button (if any).
	*/
	downArrowPrimitive:String;
	/**
 * @description Holds the elide mode to be used for the text on this button.
	*/
	elideMode:DzWidget;
	/**
 * @description Holds whether or not the border is disabled; false by default.
	*/
	flat:Boolean;
	/**
 * @description Holds the name of the pixel metric used to define the size of the icon on this button (if any).
	*/
	iconMetric:String;
	/**
 * @description Holds text used for size hint; if empty current text is used.
	*/
	minimumWidthText:String;
	/**
 * @description Holds the name of the primitive element used to draw this button.
	*/
	primitive:String;
	/**
 * @description Holds whether or not the button will be sized based on the size of its icon (if any). If true, this overrides iconMetric.
	*/
	sizedFromIcon:Boolean;
	/**
 * @description Holds the name of the text style used to draw the label on this button.
	*/
	textStyle:String;
	/**
 * @description ENUMERATOR: Deprecated See DzCheckBox.tristate and DzCheckBox.checked
*/
	
	static Off;
	/**
 * @description ENUMERATOR: Deprecated See DzCheckBox.tristate and DzCheckBox.checked
*/
	
	static NoChange;
	/**
 * @description ENUMERATOR: Deprecated See DzCheckBox.tristate and DzCheckBox.checked
*/
	
	static On;
	/**
 * @description ENUMERATOR: Deprecated See DzCheckBox.tristate
*/
	
	static SingleShot;
	/**
 * @description ENUMERATOR: Deprecated See DzCheckBox.tristate
*/
	
	static Toggle;
	/**
 * @description ENUMERATOR: Deprecated See DzCheckBox.tristate
*/
	
	static Tristate;
	/**
 * @description ENUMERATOR: The button is drawn as a typical Push Button.
*/
	
	static BCommand;
	/**
 * @description ENUMERATOR: The button is drawn as a typical Tool Button.
*/
	
	static BTool;
	/**
 * @description ENUMERATOR: The button is drawn as a Default Push Button.
*/
	
	static BDefault;
	/**
 * @description ENUMERATOR: The button is drawn with the style's Button Bevel.
*/
	
	static BBasic;
	/**
 * @description ENUMERATOR: The button is drawn without a frame.
*/
	
	static BNoFrame;
	/**
 * @description ENUMERATOR: The button is drawn with a custom style.
*/
	
	static BCustom;
	/**
 * @description Creates a push button as a child of the given parent widget
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Sets whether or not the button is a toggle button.
*/
	setCheckable(yesNo:Boolean):void {
	
	};
	/**
 * @description Deprecated
*/
	setToggleButton(yesNo:Boolean):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when buttonStyle on this button has changed.
 * @signature `"buttonStyleChanged(ButtonStyle)"`
 * @event
*/
	buttonStyleChanged(style:ButtonStyle):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when buttonTextFormat on this button has changed.
 * @signature `"buttonTextFormatChanged(int)"`
 * @event
*/
	buttonTextFormatChanged(format:Number):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when collapseEmptySpace on this button has changed.
 * @signature `"collapseEmptySpaceChanged(bool)"`
 * @event
*/
	collapseEmptySpaceChanged(onOff:Boolean):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when displayDownArrow on this button has changed.
 * @signature `"displayDownArrowChanged(bool)"`
 * @event
*/
	displayDownArrowChanged(displayArrow:Boolean):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when downArrowMetric on this button has changed.
 * @signature `"downArrowMetricChanged(const QString&)"`
 * @event
*/
	downArrowMetricChanged(name:String):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when downArrowPrimitive on this button has changed.
 * @signature `"downArrowPrimitiveChanged(const QString&)"`
 * @event
*/
	downArrowPrimitiveChanged(name:String):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when elideMode on this button has changed.
 * @signature `"textStyleChanged(int)"`
 * @event
*/
	elideModeChanged(mode:DzWidget.TextElideMode):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when iconMetric on this button has changed.
 * @signature `"iconMetricChanged(const QString&)"`
 * @event
*/
	iconMetricChanged(name:String):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when primitive on this button has changed.
 * @signature `"primitiveChanged(const QString&)"`
 * @event
*/
	primitiveChanged(name:String):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when sizedFromIcon on this button has changed.
 * @signature `"sizedFromIconChanged(bool)"`
 * @event
*/
	sizedFromIconChanged(onOff:Boolean):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when textStyle on this button has changed.
 * @signature `"textStyleChanged(const QString&)"`
 * @event
*/
	textStyleChanged(name:String):void {
	
	};

}
/**
 * @classdesc Class for importing files in Poser formats; .pz3, *.pz2, *.cr2, *.lt2, *.cm2, *.pp2, *.fc2, *.hd2, *.hr2, *.mc6, .pzz, *.p2z, *.crz, *.ltz, *.cmz, *.ppz, *.fcz, *.hdz, *.hrz, *.mcz
See Also:
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/pz3importer_dz} */
class DzPZ3Importer extends DzImporter {
	/**
 * @description Default Constructor.
 * @constructor
*/
	constructor() {
	
	};

}
/**
 * @classdesc TODO:
Add detailed description.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/quat_dz} */
class DzQuat extends Object {
	/**
 * @description Holds the w component of this quaternion.
	*/
	w:Number;
	/**
 * @description Holds the x component of this quaternion.
	*/
	x:Number;
	/**
 * @description Holds the y component of this quaternion.
	*/
	y:Number;
	/**
 * @description Holds the z component of this quaternion.
	*/
	z:Number;
	/**
 * @description Default Constructor. Creates an identity quaternion.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Creates a quaternion by parsing a string.
 * @param quat - A string representation of the quaternion in the form "[ x, y, z, w ]"
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Copy Constructor.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Initialize with a rotation matrix.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Initialize with a rotation matrix.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Initialize with an Euler angle rotation.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Initialize with a rotation around an axis of the given angle (in radians).
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Initialize with 4-component quaternion.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @returns true if this quaternion is considered equal to quat, otherwise false.
 * @since 4.9.3.121
 * @param quat - The quaternion to be compared.
 * @param tolerance - The maximum allowable deviation.
*/
	equals(quat:DzQuat, tolerance:Number):Boolean {
	
	};
	/**
 * @returns The angle of rotation for this quaternion (in radians).
 * @since 4.10.0.110
*/
	getAngleOfRotation():Number {
	
	};
	/**
 * @returns The axis of rotation for this quaternion.
 * @since 4.10.0.110
*/
	getAxisOfRotation():DzVec3 {
	
	};
	/**
 * @returns The Euler angles representing this rotation given the rotation order.
 * @param axis1 - The first axis in the rotation order.
 * @param axis2 - The second axis in the rotation order.
 * @param axis3 - The third axis in the rotation order.
*/
	getValue(axis1:Number, axis2:Number, axis3:Number):DzVec3 {
	
	};
	/**
 * @returns The X axis that corresponds to the local coordinate frame of this rotation (the rotated coordinate axes).
*/
	getXAxis():DzVec3 {
	
	};
	/**
 * @returns The Y axis that corresponds to the local coordinate frame of this rotation (the rotated coordinate axes).
*/
	getYAxis():DzVec3 {
	
	};
	/**
 * @returns The Z axis that corresponds to the local coordinate frame of this rotation (the rotated coordinate axes).
*/
	getZAxis():DzVec3 {
	
	};
	/**
 * @returns A null (identity) quaternion with components set to (0.0, 0.0, 0.0, 1.0).
 * @since 4.14.1.27
*/
	identity():DzQuat {
	
	};
	/**
 * @returns The inverse of the rotation.
*/
	inverse():DzQuat {
	
	};
	/**
 * @description Changes a rotation to be its inverse.
*/
	invert():void {
	
	};
	/**
 * @returns true if the quaternion is an identity rotation.
*/
	isIdentity():Boolean {
	
	};
	/**
 * @description Makes sure that this rotation lies on the same side of the hypersphere as the one given. If not, it is altered to do so.
*/
	makeClosest(quat:DzQuat):DzQuat {
	
	};
	/**
 * @description Sets the quaternion to the identity quaternion. Zero this rotation.
*/
	makeIdentity():void {
	
	};
	/**
 * @returns The result of post-multiplying this quaternion by quat.
 * @param quat - The quaternion to multiply by.
*/
	multiply(quat:DzQuat):DzQuat {
	
	};
	/**
 * @description Multiplies the given vector by the matrix of this rotation. Vector is forced to unit length.
 * @returns The result of multiplying the given vector through the rotation, as a unit vector.
 * @param vec - The vector to multiply.
*/
	multVec(vec:DzVec3):DzVec3 {
	
	};
	/**
 * @description Normalizes a rotation quaternion to unit 4D length
*/
	normalize():void {
	
	};
	/**
 * @description Keep the axis the same. Multiply the angle of rotation by the amount 'scaleFactor'
*/
	scaleAngle(val:Number):void {
	
	};
	/**
 * @description Sets the value to a rotation of radians around one of the primary axes (axis == 0:x, 1:y, 2:z)
*/
	setValue(axis:Number, radians:Number):void {
	
	};
	/**
 * @description Sets the quaternion to an Euler rotation of angles around each axis given the rotation order.
 * @param axis1 - The first axis in the rotation order.
 * @param axis2 - The second axis in the rotation order.
 * @param axis3 - The third axis in the rotation order.
 * @param angles - The angles of each axis, where axis == 1:x, 2:y, 3:z.
*/
	setValue(axis1:Number, axis2:Number, axis3:Number, angles:DzVec3):void {
	
	};
	/**
 * @description Sets the value based on the angle and axis of rotation.
*/
	setValue(axis:DzVec3, radians:Number):void {
	
	};
	/**
 * @description Sets the values of this quaternion.
 * @param x - The x component.
 * @param y - The y component.
 * @param z - The z component.
 * @param w - The w component.
 * @param doNormalize - If true, normalizes the set values.(since 4.9.3.121)
*/
	setValue(x:Number, y:Number, z:Number, w:Number, normalize:Boolean):void {
	
	};
	/**
 * @description Preforms spherical linear interpolation between two quaternions.
 * @returns As t goes from 0 to 1, the value goes from rot0 to rot1.
 * @since 4.9.3.121
 * @param rot0 - The from rotation.
 * @param rot1 - The to rotation.
 * @param t - The value to interpolate.
*/
	slerp(rot0:DzQuat, rot1:DzQuat, t:Number):DzQuat {
	
	};
	/**
 * @returns A string representation of this quaternion in the form "[ x, y, z, w ]".
*/
	toString():String {
	
	};

}
/**
 * @classdesc DzRadioButton and DzCheckBox are both option buttons (e.g. they can be checked or unchecked). They differ in how the available choices are restricted. A DzCheckBox is used to define several choices that can all co-exist at the same time (e.g. "many of many"). While a DzRadioButton is used to provide several choices, where only one can be ultimately chosen (e.g. "one of many").
The easiest way to implement a "one of many" type choice is to create radio buttons as children of a DzButtonGroup.Boolean : checked

### Example:
```
// Create a new dialog
var wDlg = new DzDialog;
wDlg.caption = "DzRadioButton Example";
 
// Create a layout for the dialog
var wLyt = new DzVBoxLayout( wDlg );
wLyt.autoAdd = true;
 
// Create a button group for the options
var wOptBG = new DzVButtonGroup( wDlg );
wOptBG.columns = 1;
 
// Create the options
var wOpt1Btn = new DzRadioButton( wOptBG );
wOpt1Btn.text = "Option 1";
wOpt1Btn.checked = true;
var wOpt2Btn = new DzRadioButton( wOptBG );
wOpt2Btn.text = "Option 2";
var wOpt3Btn = new DzRadioButton( wOptBG );
wOpt3Btn.text = "Option 3";
 
// Launch the dialog
wDlg.exec();
```
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/radiobutton_dz} */
class DzRadioButton extends DzButton {
	/**
 * @description Whether the button is checked
	*/
	checked:Boolean;
	/**
 * @description Creates a radio button as a child of the given parent widget
 * @constructor
*/
	constructor() {
	
	};

}
/**
 * @classdesc This is the DAZScript counterpart to the QRect type used in the DAZ Studio SDK. A Rect object is a two dimensional representation of a rectangle.
Attention:@attention Attention:
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/rect} */
class Rect extends QObject {
	/**
 * @description Holds the rectangle's bottom.
	*/
	bottom:Number;
	/**
 * @description Holds the rectangle's center.
	*/
	center:Point;
	/**
 * @description Holds the rectangle's height.
	*/
	height:Number;
	/**
 * @description Holds the rectangle's left.
	*/
	left:Number;
	/**
 * @description Holds the rectangle's right.
	*/
	right:Number;
	/**
 * @description Holds the rectangle's top.
	*/
	top:Number;
	/**
 * @description Holds the rectangle's width.
	*/
	width:Number;
	/**
 * @description Holds the rectangle's x position.
	*/
	x:Number;
	/**
 * @description Holds the rectangle's y position.
	*/
	y:Number;
	/**
 * @description Default Constructor.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @param rect - The rectangle to copy.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @param xVal - The x coordinate of the rectangle.
 * @param yVal - The y coordinate of the rectangle.
 * @param wVal - The width of the rectangle.
 * @param hVal - The height of the rectangle.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @returns true if this rectangle contains the given rectangle, otherwise false.
 * @param rect - The rectangle to test against this rectangle.
*/
	contains(rect:Rect):Boolean {
	
	};
	/**
 * @returns The intersection of this rectangle with the given rectangle, or an empty rectangle if the two do not intersect.
 * @param rect - The rectangle to intersect with this rectangle.
*/
	intersection(rect:Rect):Rect {
	
	};
	/**
 * @returns true if this rectangle intersects with the given rectangle, otherwise false.
 * @param rect - The rectangle to test against this rectangle.
*/
	intersects(rect:Rect):Boolean {
	
	};
	/**
 * @returns true if the rectangle is empty, i.e the width and height of the rectangle are negative, otherwise false.
*/
	isEmpty():Boolean {
	
	};
	/**
 * @returns true if the width and height of the rectangle are 0, otherwise false.
*/
	isNull():Boolean {
	
	};
	/**
 * @description Moves the rectangle so its bottom property is equal to pos.
 * @param pos - The new bottom boundary of the triangle.
*/
	moveBottom(pos:Number):void {
	
	};
	/**
 * @description Translates the rectangle by dx and dy, the width and height remain unchanged.
 * @param dx - The distance in x to move the rectangle.
 * @param dy - The distance in y to move the rectangle.
*/
	moveBy(dx:Number, dy:Number):void {
	
	};
	/**
 * @description Moves the rectangle so its left property is equal to pos.
 * @param pos - The new left boundary of the triangle.
*/
	moveLeft(pos:Number):void {
	
	};
	/**
 * @description Moves the rectangle so its right property is equal to pos.
 * @param pos - The new right boundary of the triangle.
*/
	moveRight(pos:Number):void {
	
	};
	/**
 * @description Moves the rectangle so its top property is equal to pos.
 * @param pos - The new top boundary of the triangle.
*/
	moveTop(pos:Number):void {
	
	};
	/**
 * @description Normalizes the rectangle - changes the prefix of width/height if they are negative. The rectangle will no longer be empty after it is normalized.
*/
	normalize():void {
	
	};
	/**
 * @description Normalizes the rectangle - changes the prefix of width/height if they are negative. The rectangle will no longer be empty after it is normalized.
*/
	normalize():void {
	
	};
	/**
 * @returns The union of this rectangle with the given rectangle, i.e. a rectangle that contains both rectangles.
 * @param rect - The rectangle to add to this rectangle.
*/
	union(rect:Rect):Rect {
	
	};

}
/**
 * @classdesc Instances of DzRefCountedItem are objects that are intended to be shared between multiple owners. Each owner references the object when taking ownership, and dereference the object when it no longer needs the object. The object keeps an internal reference count, and when no other objects are referencing the object (i.e. the reference count reaches zero) the object will delete itself.
Attention:@attention Attention:
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/refcounteditem_dz} */
class DzRefCountedItem {

}
/**
 * @classdesc 
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/renderer_dz} */
class DzRenderer extends DzBase {
	/**
 * @description Compiles the shader at the given path, if necessary, and returns the path to the compiled shader.
 * @returns The path to the compiled shader.
 * @param shaderPath - The path to the shader source to compile
*/
	compileShader(shaderPath:String):String {
	
	};
	/**
 * @description Renders a custom set of items.
 * @returns true if rendering was successful. false if rendering was canceled by user or there were errors during the render.
 * @param handler - The settings and handler for the render.
 * @param camera - The camera to render from.
 * @param lights - The list of lights for the render.
 * @param nodes - The list of items to be rendered.
 * @param opt - The options for this render.
*/
	customRender(handler:DzRenderHandler, camera:DzCamera, lights:Array, nodes:Array, opt:DzRenderOptions):Boolean {
	
	};
	/**
 * @returns The node that is currently being rendered.
*/
	getCurrentNode():DzNode {
	
	};
	/**
 * @returns The handler used for Interactive Progressive Rendering (IPR) on this renderer (if any). NULL if this renderer does not support IPR.
*/
	getIPRRenderHandler():DzIprrenderhandler {
	
	};
	/**
 * @returns The name of this renderer.
*/
	getName():String {
	
	};
	/**
 * @returns The camera being used for the render.
 * @since 4.11.0.119
*/
	getRenderCamera():DzCamera {
	
	};
	/**
 * @returns The renderer mode (feature set) for this renderer.
*/
	getRendererMode():DzRendererMode {
	
	};
	/**
 * @returns The path to the utility that compiles shaders for the renderer.
*/
	getShaderCompilerPath():String {
	
	};
	/**
 * @returns The file extension that this renderer uses for compiled shaders.
*/
	getShaderExtension():String {
	
	};
	/**
 * @returns The filename for the shader; the name of the shader with the shader extension for the renderer (e.g. "metal.sdl").
 * @param shaderName - The shader name to get the filename for (e.g. "metal").
*/
	getShaderFileName(shaderName:String):String {
	
	};
	/**
 * @description Gets the parameter information for the given shader.
 * @param shaderPath - The path to the compiled shader.
*/
	getShaderInfo(shaderPath:String):DzShaderDescription {
	
	};
	/**
 * @description Given a shader name (e.g. "metal"), looks in all the shader directories attempting to find the file for it.
 * @returns The full path of the shader with the specified name (if found), otherwise an empty string.
 * @param shaderName - The shader name to get the path for.
 * @param withExtension - If true, the extension for the renderer is included in the return value.
*/
	getShaderPath(shaderName:String, withExtension:Boolean):String {
	
	};
	/**
 * @returns A list of paths which are used to search for shaders while rendering.
*/
	getShaderSearchPaths():Array {
	
	};
	/**
 * @returns The path to the utility that converts textures for the renderer.
*/
	getTextureUtilityPath():String {
	
	};
	/**
 * @returns true if the application is currently rendering, otherwise false.
*/
	isRendering():Boolean {
	
	};
	/**
 * @description Stops the render.
*/
	killRender():void {
	
	};
	/**
 * @description Called by the framework to prepare/convert an image into a format that this renderer can understand/use when rendering. In derived classes, the function should result in a new image file being generated along with a path that the renderer can use to refer to the file. If the image could not be converted or is not usable by this renderer, the returned string should be empty.
 * @param img - The DzTexture object for which the image is being prepared.
 * @param filename - The path to the original image file that needs to be processed.
*/
	prepareImage(img:DzTexture, filename:String):void {
	
	};
	/**
 * @description Processes the given shader name into a form the renderer can use (i.e. appending file extensions, finding absolute paths, etc.).
 * @param shaderName - The shader name to process.
*/
	processShaderName(shaderName:String):String {
	
	};
	/**
 * @description Render the current scene.
 * @returns true if rendering was successful. false if rendering was canceled by user or there were errors during the render.
 * @param handler - Settings and handler for the render.
 * @param camera - Camera to render the scene from.
 * @param opt - Options for this render.
*/
	render(handler:DzRenderHandler, camera:DzCamera, opt:DzRenderOptions):Boolean {
	
	};
	/**
 * @description Converts a .bake file into an image file.
 * @param opt - Shader baker options.
 * @param wait - If true, this method is exited only when the conversion has ended. If false the method returns immediately after starting conversion; the baker's saveFileFinished() slot will be invoked after the conversion finishes.
*/
	saveBakeImage(opt:DzBakerOptions, wait:Boolean):DzTexturebakermgr {
	
	};
	/**
 * @description Sets the handler used for Interactive Progressive Rendering (IPR) on this renderer.
 * @param handler - The render handler to set.
*/
	setIPRRenderHandler(handler:iprrenderhandler_dz):DzIprrenderhandler {
	
	};
	/**
 * @description Sets the camera being used for the render.
 * @since 4.11.0.119
 * @param camera - The camera to set.
*/
	setRenderCamera(camera:DzCamera):void {
	
	};
	/**
 * @description Stops an active baking operation, if possible.
*/
	stopBaking():void {
	
	};
	/**
 * @description Performs texture conversion.
 * @returns true if the conversion succeeds, false if the conversion is cancelled or in case of error.
 * @param handler - The render handler to use for the conversion.
 * @param camera - The camera to use for the conversion.
 * @param opt - The options to use in the conversion.
*/
	textureConvert(handler:DzRenderHandler, camera:DzCamera, opt:textureconvertoroptions_dz):Boolean {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted just before the renderer begins rendering.
 * @signature `"aboutToRender(DzRenderer*)"`
 * @event
*/
	aboutToRender(renderer:DzRenderer):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the image preparation for img is finished.
 * @signature `"imagePrepared(const DzTexture*,const QString&)"`
 * @event
*/
	imagePrepared(img:DzTexture, filename:String):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the handler used for Interactive Progressive Rendering (IPR) on this renderer has changed.
 * @signature `"IPRRenderHandlerChanged(DzRenderer*,DzIPRRenderHandler*)"`
 * @event
*/
	IPRRenderHandlerChanged(renderer:DzRenderer, handler:iprrenderhandler_dz):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the mode of this renderer has changed.
 * @signature `"rendererModeChanged(DzRenderer*)"`
 * @event
*/
	rendererModeChanged(renderer:DzRenderer):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted just after the renderer finishes rendering.
 * @signature `"renderFinished(DzRenderer*)"`
 * @event
*/
	renderFinished(renderer:DzRenderer):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the renderer begins rendering a shape.
 * @signature `"shapeRenderBeginning(DzShape*)"`
 * @event
*/
	shapeRenderBeginning(shape:shape_dz):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted after the renderer finishes rendering a shape.
 * @signature `"shapeRenderFinished(DzShape*)"`
 * @event
*/
	shapeRenderFinished(shape:shape_dz):void {
	
	};

}
/**
 * @classdesc 
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/renderermode_dz} */
class DzRendererMode extends QObject {
	/**
 * @returns The name of the DzMaterial subclass that implements the default material for the renderer in the current mode.
 * @since 4.11.0.254
*/
	defaultMaterialClassName():String {
	
	};
	/**
 * @returns true if any features of the renderer are enabled for the current mode, otherwise false.
*/
	hasFeatures():Boolean {
	
	};
	/**
 * @returns true if the renderer is biased in the current mode, otherwise false.
*/
	isBiased():Boolean {
	
	};
	/**
 * @returns true if the renderer is physically based in the current mode, otherwise false.
*/
	isPhysicallyBased():Boolean {
	
	};
	/**
 * @returns true if the renderer is RenderMan compliant in the current mode, otherwise false.
*/
	isRenderManCompliant():Boolean {
	
	};
	/**
 * @returns A list of the languages supported by the renderer in the current mode.
 * @since 4.11.0.254
*/
	supportedLanguages():Array {
	
	};
	/**
 * @returns true if the renderer supports advanced camera options in the current mode, otherwise false.
 * @since 4.9.3.121
*/
	supportsAdvancedCamera():Boolean {
	
	};
	/**
 * @returns true if the renderer supports camera aperture blades in the current mode, otherwise false.
 * @since 4.9.3.121
*/
	supportsCameraBlades():Boolean {
	
	};
	/**
 * @returns true if the renderer supports the Catmark subdivision limit surface in the current mode, otherwise false.
*/
	usesCatmarkLimitSurface():Boolean {
	
	};

}
/**
 * @classdesc Render handler classes are responsible for the settings of a render, as well as collecting the final image data passed back from the renderer.
See Also:
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/renderhandler_dz} */
class DzRenderHandler extends QObject {
	/**
 * @returns The background color
*/
	getBackColor():Color {
	
	};
	/**
 * @returns The area of the view to render, if the whole view is not to be rendered
*/
	getCropWindow():Rect {
	
	};
	/**
 * @returns The number of frames to be rendered
*/
	getNumFrames():Number {
	
	};
	/**
 * @returns The width & height of the rendered image
*/
	getSize():Size {
	
	};
	/**
 * @returns The scene time at which rendering will begin
*/
	getStartingTime():DzTime {
	
	};
	/**
 * @returns true if only a portion of the view will be rendered
*/
	getUseCropWindow():Boolean {
	
	};
	/**
 * @description Set background color for the render
*/
	setBackColor(color:Color):void {
	
	};
	/**
 * @description Set the portion of the view to be rendered, if the whole view is not to be rendered
*/
	setCropWindow(window:Rect):void {
	
	};
	/**
 * @description Set the render to be limited to a portion of the view, or the whole view
*/
	setUseCropWindow(onOff:Boolean):void {
	
	};

}
/**
 * @classdesc Responsible for the management of renderers, and more generally the process of performing a render.
There is only one instance of this manager in an application. This instance is created and owned by DzApp. Request the instance via DzApp.getRenderMgr().
See Also:
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/rendermgr_dz} */
class DzRenderMgr extends DzBase {
	/**
 * @description ENUMERATOR: The lowest priority.
*/
	
	static RENDER_PRIORITY_LOWEST;
	/**
 * @description ENUMERATOR: A low priority.
*/
	
	static RENDER_PRIORITY_LOW;
	/**
 * @description ENUMERATOR: A below normal priority.
*/
	
	static RENDER_PRIORITY_BELOW_NORMAL;
	/**
 * @description ENUMERATOR: The normal priority.
*/
	
	static RENDER_PRIORITY_NORMAL;
	/**
 * @description ENUMERATOR: An above normal priority.
*/
	
	static RENDER_PRIORITY_ABOVE_NORMAL;
	/**
 * @description ENUMERATOR: A high priority.
*/
	
	static RENDER_PRIORITY_HIGH;
	/**
 * @description ENUMERATOR: The highest priority.
*/
	
	static RENDER_PRIORITY_HIGHEST;
	/**
 * @returns The suffix used for files generated as icons for renders to help improve performance and responsiveness.
*/
	getIconSuffix():String {
	
	};
	/**
 * @returns The name of the XML file that holds metadata for imageName.
 * @param imageName - The path of the rendered file to get the metadata file for.
 * @param shortname - If true, only the shortname of the file is returned, otherwise the full path of the file is returned.
*/
	static getMetaXmlFileName(imageName:String, basenameOnly:Boolean):String {
	
	};
	/**
 * @returns The base filename of the file for imageName.
 * @param imageName - The path of the rendered file to get a base filename for.
 * @param basename - If true, only the basename of the file is returned, otherwise the basename is preceded by the path.
*/
	static getRenderBaseFileName(imageName:String, basenameOnly:Boolean):String {
	
	};
	/**
 * @returns The name of the icon file for imageName.
 * @param imageName - The path of the rendered file to get the icon file for.
 * @param shortname - If true, only the shortname of the file is returned, otherwise the full path of the file is returned.
*/
	static getRenderIconFileName(imageName:String, basenameOnly:Boolean):String {
	
	};
	/**
 * @description Adds a directory to the list of known render directories.
 * @param directory - The path of the directory to add.
 * @param saveSetting - If true, saves the setting immediately. If false, waits until the application exits to save the setting.
*/
	addRenderDirectory(directory:String, saveSetting:Boolean):void {
	
	};
	/**
 * @description Interactively and progressively renders the scene with the given render settings, using the given handler from the given camera.
 * @returns true if the render was performed successfully, otherwise false.
 * @param opt - The render settings to use for the render. If NULL, the current user render settings are used.
 * @param renderHandler - The render handler to use for the render.
 * @param camera - The camera to use for the render.
*/
	doIPRRender(camera:DzCamera, renderHandler:DzRenderHandler, opt:DzRenderOptions):Boolean {
	
	};
	/**
 * @description Renders the scene with the given render settings. If no render settings are specified, then the current application render settings are used.
 * @param opt - The render settings to use for the render. If NULL, the current user render settings are used.
*/
	doRender(opt:DzRenderOptions):Boolean {
	
	};
	/**
 * @returns The renderer with the given class name (if any), otherwise null.
*/
	findRenderer(className:String):DzRenderer {
	
	};
	/**
 * @returns The active renderer for the application. This will be NULL if no renderers are available.
*/
	getActiveRenderer():DzRenderer {
	
	};
	/**
 * @returns A list where the first item is the base path and any additional items represent the relative portion of the path.
 * @param absPath - The absolute path to split into its base and relative parts.
*/
	getBaseAndRelativePath(absPath:String):Array {
	
	};
	/**
 * @returns The path to the last successfully saved render, otherwise an empty string.
*/
	getLastSavedRenderPath():String {
	
	};
	/**
 * @returns The number of render directories.
*/
	getNumRenderDirectories():Number {
	
	};
	/**
 * @returns The number of renderers available in the application.
*/
	getNumRenderers():Number {
	
	};
	/**
 * @description TODO:
Add description.
*/
	getOptionHelper():DzElement {
	
	};
	/**
 * @returns The given render directory.
 * @param which - The index of the render directory to be returned.
*/
	getRenderDirectoryPath(which:Number):String {
	
	};
	/**
 * @description TODO:
Add description.
*/
	getRenderElementObjects():Array {
	
	};
	/**
 * @returns If which is within the range [0, getNumRenderers() - 1], the renderer at the given index, otherwise null.
*/
	getRenderer(which:Number):DzRenderer {
	
	};
	/**
 * @returns A list of renderers available in the application.
*/
	getRendererList():Array {
	
	};
	/**
 * @returns The default render options object. This object stores the user's currently selected rendering options.
*/
	getRenderOptions():DzRenderOptions {
	
	};
	/**
 * @returns true if there is a render that can be saved, otherwise false.
*/
	hasRender():Boolean {
	
	};
	/**
 * @returns true if the application is currently rendering, otherwise false.
*/
	isRendering():Boolean {
	
	};
	/**
 * @description TODO:
Add description.
*/
	rebuildRenderElements():void {
	
	};
	/**
 * @description Removes all render directories.
*/
	removeAllRenderDirectories():void {
	
	};
	/**
 * @description Removes a directory from the list of known render directories.
 * @returns true if the directory was found in the list, otherwise false.
 * @param directory - The name of the render directory to remove.
*/
	removeRenderDirectory(directory:String):Boolean {
	
	};
	/**
 * @description TODO:
Add description.
*/
	restoreDefaultRenderOptions():void {
	
	};
	/**
 * @description Displays a dialog for saving the last render, and saves the image(s)/movie if the user does not cancel.
 * @returns The path to the file selected and successfully saved, otherwise an empty string.
*/
	saveLastRender():String {
	
	};
	/**
 * @description Sets the active renderer for the application.
 * @param renderer - The renderer to make active.
*/
	setActiveRenderer(renderer:DzRenderer):void {
	
	};
	/**
 * @description Displays the render options dialog to the user. This only works if the application is being run with the interface on, if the interface is off, this function does nothing.
*/
	showRenderDialog():void {
	
	};
	/**
 * @description TODO:
Add description.
*/
	stopIPRRender():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the active render engine has changed.
 * @signature `"activeRendererChanged(DzRenderer*)"`
 * @event
*/
	activeRendererChanged(renderer:DzRenderer):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description TODO: Add Description
 * @signature `TODO: Add Description`
 * @event
*/
	activeRendererIPRRenderHandlerChanged(renderer:DzRenderer, handler:iprrenderhandler_dz):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description TODO: Add Description
 * @signature `TODO: Add Description`
 * @event
*/
	doIPRRenderStop():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the value returned by DzRenderMgr.hasRender() has changed, signaling a new render operation. This signifies whether or not a call to saveLastRender() will be valid.
 * @signature `"hasRenderChanged(bool)"`
 * @event
*/
	hasRenderChanged(state:Boolean):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description TODO: Add Description
 * @signature `TODO: Add Description`
 * @event
*/
	IPRRenderStarted():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description TODO: Add Description
 * @signature `TODO: Add Description`
 * @event
*/
	IPRRenderStopped():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description TODO: Add Description
 * @signature `TODO: Add Description`
 * @event
*/
	renderDirectoryListChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description TODO: Add Description
 * @signature `TODO: Add Description`
 * @event
*/
	renderElementsListChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when a new render engine is added to the manager. This only occurs at startup as plug-ins are being loaded.
 * @signature `"rendererAdded(DzRenderer*)"`
 * @event
*/
	rendererAdded(renderer:DzRenderer):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description TODO: Add Description
 * @signature `TODO: Add Description`
 * @event
*/
	rendererIPRRenderHandlerChanged(renderer:DzRenderer, handler:iprrenderhandler_dz):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description TODO: Add Description
 * @signature `TODO: Add Description`
 * @event
*/
	rendererModeChanged(renderer:DzRenderer):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted just after a rendering operation is finished. This is only emitted when a render operation is performed by calling DzRenderMgr.doRender() - this includes all rendering operations that are started by the user from the interface. This may not include rendering operations performed by plug-ins, scripts, etc which do not call doRender().
 * @signature `"renderFinished(bool)"`
 * @event
*/
	renderFinished(succeeded:Boolean):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description TODO: Add Description
 * @signature `TODO: Add Description`
 * @event
*/
	renderFolderChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description TODO: Add Description
 * @signature `TODO: Add Description`
 * @event
*/
	renderOptionDefaultsRestored():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted just before a rendering operation begins. This is only emitted when a render operation is performed by calling DzRenderMgr.doRender() - this includes all rendering operations that are started by the user from the interface. This may not include rendering operations performed by plug-ins, scripts, etc which do not call doRender().
 * @signature `"renderStarting()"`
 * @event
*/
	renderStarting():void {
	
	};

}
/**
 * @classdesc 
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/renderoptions_dz} */
class DzRenderOptions extends QObject {
	/**
 * @description Holds the currently set aspect ratio (w / h). (Read Only)
	*/
	aspect:Number;
	/**
 * @description Holds the currently set aspect ratio height. (Read Only)
	*/
	aspectHeight:Number;
	/**
 * @description Holds the currently set aspect ratio width. (Read Only)
	*/
	aspectWidth:Number;
	/**
 * @description Holds whether or not to render polygons as double sided.
	*/
	doubleSided:Boolean;
	/**
 * @description Holds the scene time of the last frame to render.
	*/
	endTime:DzTime;
	/**
 * @description Holds the gain value.
	*/
	gain:Number;
	/**
 * @description Holds the gamma value.
	*/
	gamma:Number;
	/**
 * @description Holds whether or not gamma correction is enabled.
	*/
	gammaCorrection:GammaCorrection;
	/**
 * @description Holds the size of the image to render.
	*/
	imageSize:Size;
	/**
 * @description Holds whether or not to constrain the pixel dimensions of the render to the aspect ratio.
	*/
	isAspectConstrained:Boolean;
	/**
 * @description Holds whether or not to render only the current frame.
	*/
	isCurrentFrameRender:Boolean;
	/**
 * @description Holds the filename of the last image rendered. (Read Only)
	*/
	lastRenderImgFilename:String;
	/**
 * @description Holds the filename of the last movie rendered. (Read Only)
	*/
	lastRenderMovFilename:String;
	/**
 * @description Holds the base filename of the image series rendered. (Read Only)
	*/
	lastRenderSerFilename:String;
	/**
 * @description Holds the time offset for blurring.
	*/
	motionBlurOffset:Number;
	/**
 * @description Holds the amount of time between frames to blur across (0.0 - 1.0).
	*/
	motionBlurPct:Number;
	/**
 * @description Holds the number of samples for motion blur.
	*/
	motionBlurSamples:Number;
	/**
 * @description Holds the number of passes for rendering in OpenGL.
	*/
	openGLPasses:Number;
	/**
 * @description Holds the pixel filter to use.
	*/
	pixelFilter:PixelFilter;
	/**
 * @description Holds the raytrace depth.
	*/
	rayTraceDepth:Number;
	/**
 * @description Holds the filename to save individual images to.
	*/
	renderImgFilename:String;
	/**
 * @description Holds the target for rendering individual images.
	*/
	renderImgToId:RenderImgTarget;
	/**
 * @description Holds the filename to save movies to.
	*/
	renderMovFilename:String;
	/**
 * @description Holds the target for rendering animations.
	*/
	renderMovToId:RenderMovTarget;
	/**
 * @description Holds the base filename to use when saving image series.
	*/
	renderSerFilename:String;
	/**
 * @description Holds the style of the render.
	*/
	renderStyle:RenderStyle;
	/**
 * @description Holds the type of the render.
	*/
	renderType:RenderType;
	/**
 * @description Holds whether or not to use the aspect and size of the current viewport for the render.
	*/
	renderViewport:Boolean;
	/**
 * @description Holds the shading rate.
	*/
	shadingRate:Number;
	/**
 * @description Holds the number of samples when rendering shadows.
	*/
	shadowSamples:Number;
	/**
 * @description Holds whether or not to show a preview.
	*/
	showPreview:Boolean;
	/**
 * @description Holds the scene time of the first frame to render.
	*/
	startTime:DzTime;
	/**
 * @description Holds whether or not to use shaders when rendering in OpenGL.
	*/
	useGLSL:Boolean;
	/**
 * @description Holds whether or not to use motion blur.
	*/
	useMotionBlur:Boolean;
	/**
 * @description Holds the width of the pixel filter in x.
	*/
	xFilterWidth:Number;
	/**
 * @description Holds the number of samples per pixel in x.
	*/
	xPixelSamples:Number;
	/**
 * @description Holds the width of the pixel filter in y.
	*/
	yFilterWidth:Number;
	/**
 * @description Holds the number of samples per pixel in y.
	*/
	yPixelSamples:Number;
	/**
 * @description ENUMERATOR: Gamma correction off.
*/
	
	static GCOff;
	/**
 * @description ENUMERATOR: Gamma correction on.
*/
	
	static GCOn;
	/**
 * @description ENUMERATOR: The Box filter.
*/
	
	static Box;
	/**
 * @description ENUMERATOR: The triangle filter.
*/
	
	static Triangle;
	/**
 * @description ENUMERATOR: The Catmull-Rom filter.
*/
	
	static CatmullRom;
	/**
 * @description ENUMERATOR: The Gaussian filter.
*/
	
	static Gaussian;
	/**
 * @description ENUMERATOR: The Sinc filter.
*/
	
	static Sinc;
	/**
 * @description ENUMERATOR: Renders the image in the active viewport.
*/
	
	static ActiveView;
	/**
 * @description ENUMERATOR: Renders the image in a new window.
*/
	
	static NewWindow;
	/**
 * @description ENUMERATOR: Renders the image directly to a file.
*/
	
	static DirectToFile;
	/**
 * @description ENUMERATOR: A video file created/compressed by system specific video API's.
*/
	
	static MovieFile;
	/**
 * @description ENUMERATOR: A series of image files, one for each frame in the movie.
*/
	
	static ImageSeries;
	/**
 * @description ENUMERATOR: The shaders/materials for the objects will be used to render.
*/
	
	static Normal;
	/**
 * @description ENUMERATOR: The entire scene will be rendered with a cartoon style shader.
*/
	
	static Cartoon;
	/**
 * @description ENUMERATOR: Performs a 'viewport' render, grabbing a frame from the interactive viewport. See Also: DzDrawStyle
*/
	
	static ScreenShot;
	/**
 * @description ENUMERATOR: Performs a 'multi-pass' OpenGL render to produce a higher quality image.
*/
	
	static HardwareAssisted;
	/**
 * @description ENUMERATOR: Performs an 'offline' render with the active software renderer. See Also: DzRenderer
*/
	
	static Software;
	/**
 * @description Default Constructor. Initializes render options.
 * @since 4.9.3.57
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Writes render options via the settings manager.
*/
	applyChanges():void {
	
	};
	/**
 * @description Copies the settings from another render options object.
 * @since 4.9.3.57
*/
	copyFrom(opt:DzRenderOptions):DzRenderOptions {
	
	};
	/**
 * @returns If gamma correction is enabled, a linearized version of color. If gamma correction is off, color is returned unchanged.
 * @param color - The color to gamma correct.
*/
	gammaCorrectColor(color:DzFloatColor):DzFloatColor {
	
	};
	/**
 * @description Sets values for render options found in the stored settings.
*/
	resetOptions():void {
	
	};
	/**
 * @description Restores the applications default settings and replaces the stored values.
*/
	restoreDefaultSettings():void {
	
	};
	/**
 * @description Set current aspect width for this render. Represented as widthRatio : heightRatio.
*/
	setAspectRatio(widthRatio:Number, heightRatio:Number):void {
	
	};
	/**
 * @description Sets all options to the default values, but does not affect values of stored/remembered settings. Also, no "changed" signals are emitted when calling this method.
*/
	setToDefaults():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the aspect for the render has changed, or the viewport render status has changed.
 * @signature `"aspectChanged(double)"`
 * @event
*/
	aspectChanged(val:Number):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the aspect for the render has changed, or the viewport render status has changed.
 * @signature `"aspectChanged(float,float)"`
 * @event
*/
	aspectChanged(w:Number, h:Number):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the constrain aspect ratio setting has changed.
 * @signature `"aspectConstrainChanged(bool)"`
 * @event
*/
	aspectConstrainChanged(onOff:Boolean):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the default options have been restored.
 * @signature `"defaultsRestored()"`
 * @event
*/
	defaultsRestored():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the double sided setting has changed.
 * @signature `"doubleSidedChanged(bool)"`
 * @event
*/
	doubleSidedChanged(onOff:Boolean):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the end time has changed.
 * @signature `"endTimeChanged(DzTime)"`
 * @event
*/
	endTimeChanged(time:DzTime):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the gain value has changed.
 * @signature `"gainChanged(double)"`
 * @event
*/
	gainChanged(gain:Number):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the gamma value has changed.
 * @signature `"gammaChanged(double)"`
 * @event
*/
	gammaChanged(gamma:Number):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when gamma correction state has changed.
 * @signature `"gammaCorrectionChanged(DzRenderOptions.GammaCorrection)"`
 * @event
*/
	gammaCorrectionChanged(gc:DzRenderOptions.GammaCorrection):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the image size has changed.
 * @signature `"imageSizeChanged(const QSize&)"`
 * @event
*/
	imageSizeChanged(size:Size):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the motion blur offset has changed.
 * @signature `"motionBlurOffsetChanged(double)"`
 * @event
*/
	motionBlurOffsetChanged(offset:Number):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the motion blur percentage has changed.
 * @signature `"motionBlurPctChanged(int)"`
 * @event
*/
	motionBlurPctChanged(pct:Number):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the motion blur samples has changed.
 * @signature `"motionBlurSamplesChanged(int)"`
 * @event
*/
	motionBlurSamplesChanged(samples:Number):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the number of OpenGL passes has changed.
 * @signature `"openGLPassesChanged(int)"`
 * @event
*/
	openGLPassesChanged(passes:Number):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the pixel filter has changed.
 * @signature `"pixelFilterChanged(DzRenderOptions.PixelFilter)"`
 * @event
*/
	pixelFilterChanged(filter:DzRenderOptions.PixelFilter):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the ray trace depth has changed.
 * @signature `"rayTraceDepthChanged(int)"`
 * @event
*/
	rayTraceDepthChanged(depth:Number):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the render current frame setting has changed.
 * @signature `"renderCurrentFrameChanged(bool)"`
 * @event
*/
	renderCurrentFrameChanged(onOff:Boolean):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the image filename for the render has changed.
 * @signature `"renderImgFilenameChanged(const QString&)"`
 * @event
*/
	renderImgFilenameChanged(filename:String):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the image target type for the render has changed.
 * @signature `"renderImgTargetChanged(DzRenderOptions.RenderImgTarget)"`
 * @event
*/
	renderImgTargetChanged(id:DzRenderOptions.RenderImgTarget):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the movie filename for the render has changed.
 * @signature `"renderMovFilenameChanged(const QString&)"`
 * @event
*/
	renderMovFilenameChanged(filename:String):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the movie target type for the render has changed.
 * @signature `"renderMovTargetChanged(DzRenderOptions.RenderMovTarget)"`
 * @event
*/
	renderMovTargetChanged(id:DzRenderOptions.RenderMovTarget):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the image series filename for the render has changed.
 * @signature `"renderSerFilenameChanged(const QString&)"`
 * @event
*/
	renderSerFilenameChanged(filename:String):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the render type has changed.
 * @signature `"renderStyleChanged(DzRenderOptions.RenderStyle)"`
 * @event
*/
	renderStyleChanged(style:DzRenderOptions.RenderStyle):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the render type has changed.
 * @signature `"renderTypeChanged(DzRenderOptions.RenderType)"`
 * @event
*/
	renderTypeChanged(type:DzRenderOptions.RenderType):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the render to viewport setting has changed.
 * @signature `"renderViewportChanged(bool)"`
 * @event
*/
	renderViewportChanged(onOff:Boolean):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when any of the settings has changed.
 * @signature `"settingsChanged()"`
 * @event
*/
	settingsChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the shading rate has changed.
 * @signature `"shadingRateChanged(double)"`
 * @event
*/
	shadingRateChanged(rate:Number):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the number of shadow samples has changed.
 * @signature `"shadowSamplesChanged(int)"`
 * @event
*/
	shadowSamplesChanged(samples:Number):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the show preview setting has changed.
 * @signature `"showPreviewChanged(bool)"`
 * @event
*/
	showPreviewChanged(onoff:Boolean):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the start time has changed.
 * @signature `"startTimeChanged(DzTime)"`
 * @event
*/
	startTimeChanged(time:DzTime):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the use GLSL setting has changed.
 * @signature `"useGLSLChanged(bool)"`
 * @event
*/
	useGLSLChanged(onOff:Boolean):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the motion blur setting has changed.
 * @signature `"useMotionBlurChanged(bool)"`
 * @event
*/
	useMotionBlurChanged(onOff:Boolean):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the X-axis filter width has changed.
 * @signature `"xFilterWidthChanged(double)"`
 * @event
*/
	xFilterWidthChanged(width:Number):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the number of X-axis pixel samples has changed.
 * @signature `"xPixelSamplesChanged(int)"`
 * @event
*/
	xPixelSamplesChanged(samples:Number):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the Y-axis filter width has changed.
 * @signature `"yFilterWidthChanged(double)"`
 * @event
*/
	yFilterWidthChanged(width:Number):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the number of Y-axis pixel samples has changed.
 * @signature `"yPixelSamplesChanged(int)"`
 * @event
*/
	yPixelSamplesChanged(samples:Number):void {
	
	};

}
/**
 * @classdesc An asset save filter for saving a Render Settings Preset in the DSON format.
See Also:
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/rendersettingsassetfilter_dz} */
class DzRenderSettingsAssetFilter extends DzAssetFileOutFilter {
	/**
 * @description TODO:
Add description.
 * @constructor
*/
	constructor() {
	
	};

}
/**
 * @classdesc Deprecated
Exists only to keep code written prior to 4.6.2.23 working. Do not use in new code. Use DzTextureComponent instead.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/rotatemanip_dz} */
class DzRotateManip extends  {
	/**
 * @description TODO:
Add description.
	*/
	degrees:Number;
	/**
 * @description ENUMERATOR: No rotation is performed.
*/
	
	static RotNone;
	/**
 * @description ENUMERATOR: A 90 degree (clockwise) rotation is performed.
*/
	
	static Rot90;
	/**
 * @description ENUMERATOR: A 180 degree rotation is performed.
*/
	
	static Rot180;
	/**
 * @description ENUMERATOR: A 270 degree (clockwise) rotation is performed.
*/
	
	static Rot270;
	/**
 * @description Holds the amount of rotation, in degrees.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @returns The number of degrees the image will be rotated. Currently, the only possible values are 0, 90, 180, 270.
*/
	getDegrees():Number {
	
	};
	/**
 * @returns The type of rotation for the image.
*/
	getRotation():Rotation {
	
	};
	/**
 * @description Sets the amount of rotation for the image.
 * @param degrees - The number of degrees to rotate the image. Currently, the only supported values are 0, 90, 180, 270. All other values are ignored.
*/
	setDegrees(deg:Number):void {
	
	};
	/**
 * @description Sets the type of rotation for the image.
 * @param rot - The rotation to apply to the image.
*/
	setRotation(rot:Rotation):void {
	
	};

}
/**
 * @classdesc TODO:
Add detailed description.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/rotationorder_dz} */
class DzRotationOrder extends Object {
	/**
 * @description The index of the first axis of rotation. ( x = 0, y = 1, z = 2 )
	*/
	firstAxis:Number;
	/**
 * @description The enumerated representation of the order of rotation; XYZ = 0, XZY, YXZ, YZX, ZXY, ZYX.
	*/
	order:Number;
	/**
 * @description The index of the second axis of rotation. ( x = 0, y = 1, z = 2 )
	*/
	secondAxis:Number;
	/**
 * @description The index of the third axis of rotation. ( x = 0, y = 1, z = 2 )
	*/
	thirdAxis:Number;
	/**
 * @description Default Constructor. Creates a new rotation order and sets it to XYZ by default.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Creates a rotation order by parsing a string.
 * @param order - A string representation of the rotation order in the form "Axis1Axis2Axis3"
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Copy Constructor.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Creates a new rotation order with the given axis order
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Creates a new rotation order with the given enumerated representation.
 * @since 4.6.4.98
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Sets the order of rotation by the given axes.
 * @since 4.14.1.32
 * @param firstAxis - The first axis in the rotation order: x = 0, y = 1, z = 2
 * @param secondAxis - The second axis in the rotation order: x = 0, y = 1, z = 2
 * @param thirdAxis - Not used - value is implied.
*/
	setOrder(firstAxis:Number, secondAxis:Number, thirdAxis:Number):void {
	
	};
	/**
 * @returns A string representation of this rotation order - all uppercase letters.
*/
	toString():String {
	
	};

}
/**
 * @classdesc This class provides the ability to define RSL shaders for the elements that can use them (DzShaderMaterial, DzShaderLight, DzShaderCamera).
Optimizations:
Two methods in this class that should not be overlooked are setActiveInShadowPass() and setOnlyInShadowPass(), as they can have a significant impact on render times.
In the context of Surface shaders, the data members set by these methods are used to identify whether the shader participates during the shadow [map] pass - the pass for each contributing light in the scene that indicates the use of Deep Shadow Maps for shadows. This affords developers a couple of key benifits:
In the context of Light shaders, the data members set by these methods are used to identify whether this shader participates when the DzLight.ShadowType indicates shadowing is used. This affords developers the benifit of being able to use Light shaders that are optimized for either condition.
Property Naming:
Standard Shader and Materials Presets make an effort to copy as much as possible from one element to the next via DzElement.copyFrom(). In order for this to occur, the properties must match in both name and type. Provided below are the names and types used by DzDefaultMaterial, DzLight, DzDistantLight, DzSpotLight and DzPointLight in the event that you would like use properties that will work with the copyFrom() method.
Default Material:
Default Lights:
Default Camera:
Name
Type
Name
Type
Diffuse Color
DzColorProperty
Negative Bump
DzFloatProperty
Diffuse Strength
DzFloatProperty
Positive Bump
DzFloatProperty
Glossiness
DzFloatProperty
Displacement Strength
DzFloatProperty
Specular Color
DzColorProperty
Minimum Displacement
DzFloatProperty
Specular Strength
DzFloatProperty
Maximum Displacement
DzFloatProperty
Multiply Specular

 Through Opacity
DzBoolProperty
Reflection Color
DzColorProperty
Ambient Color
DzColorProperty
Reflection Strength
DzFloatProperty
Ambient Strength
DzFloatProperty
Refraction Color
DzColorProperty
Opacity Strength
DzFloatProperty
Refraction Strength
DzFloatProperty
Bump Strength
DzFloatProperty
Index of Refraction
DzFloatProperty
Name
Type
Color
DzColorProperty
Intensity
DzFloatProperty
Shadow Type
DzEnumProperty
Shadow Bias
DzFloatProperty
Shadow Softness
DzFloatProperty
Illumination
DzEnumProperty
Spread Angle
DzFloatProperty
Name
Type
Focal Length
DzFloatProperty
DOF
DzBoolProperty
Depth of Field
DzFloatProperty
Aperature
DzFloatProperty
Samples:
See Also:
Recommended Reading:
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/rslshader_dz} */
class DzRSLShader extends DzRefCountedItem, DzBase {
	/**
 * @description ENUMERATOR: Null
*/
	
	static None;
	/**
 * @description ENUMERATOR: Uses the RiSurfaceV API call when passed to the renderer.
*/
	
	static Surface;
	/**
 * @description ENUMERATOR: Uses the RiLightSourceV API call when passed to the renderer.
*/
	
	static Light;
	/**
 * @description ENUMERATOR: Uses the RiAreaLightSourceV API call when passed to the renderer.
*/
	
	static LightArea;
	/**
 * @description ENUMERATOR: Uses the RiAtmosphereV API call when passed to the renderer.
*/
	
	static VolumeAtmosphere;
	/**
 * @description ENUMERATOR: Uses the RiInteriorV API call when passed to the renderer.
*/
	
	static VolumeInterior;
	/**
 * @description ENUMERATOR: Uses the RiExteriorV API call when passed to the renderer.
*/
	
	static VolumeExterior;
	/**
 * @description ENUMERATOR: Uses the RiDisplacementV API call when passed to the renderer.
*/
	
	static Displacement;
	/**
 * @description ENUMERATOR: Uses the RiImagerV API call when passed to the renderer.
*/
	
	static Imager;
	/**
 * @description Default Constructor.
 * @attention Caution should be taken when instantiating this class. Until addShader(…) is called by DzShaderMaterial, DzShaderLight or DzShaderCamera, the object has no owner - which if you are not careful can lead to a memory leak. It is strongly suggested that the statement in the script immediately following that which instantiates this class add the object to the intended owner.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Adds a mappable numeric property to this shader object. DzColorProperty instances are passed as color type variables to the shader - all other DzNumericProperty derived instances are passed as float type variables. If the property is mapped, the absolute path of the image file is passed as a string type variable to the shader.
 * @returns true if prop was successfully added to the list of properties used by this shader (e.g. did not already exist), otherwise false.
 * @param prop - The property of which the value is passed to the shader for the param argument.
 * @param token - The name of the argument to the shader that the value of prop is passed to.
 * @param mapToken - The name of the argument to the shader that the path of prop 's map is passed to, if prop is mapped.
*/
	addMappableProperty(prop:DzNumericProperty, token:String, mapToken:String):Boolean {
	
	};
	/**
 * @description Adds a mappable numeric property to this shader object (intended for situations where the property itself is passed as an attribute via the render-time script, or simply for display purposes, but the associated map should be passed as an arg to the shader). If the property is mapped, the absolute path of the image file is passed as a string type variable to the shader.
 * @returns true if prop was successfully added to the list of properties used by this shader (e.g. did not already exist), otherwise false.
 * @param prop - The property of which the map path is passed to the shader for the mapParam argument.
 * @param mapToken - The name of the argument to the shader that the path of prop 's map is passed to, if prop is mapped.
*/
	addMapProperty(prop:DzNumericProperty, mapToken:String):Boolean {
	
	};
	/**
 * @description Adds a standard property to the list of properties used by this shader object, and adds the property to this shader object's owner if it does not already exist. DzColorProperty instances are passed as color type variables to the shader - all other DzNumericProperty derived instances are passed as float type variables. DzImageProperty instances are passed as string type variables (the value of which is the absolute path of the image file).
 * @returns true if prop was successfully added to the list of properties used by this shader (e.g. did not already exist), otherwise false.
 * @param prop - The property of which the value is passed to the shader for the param argument.
 * @param token - The name of the argument to the shader that the value of prop is passed to.
*/
	addShaderProperty(prop:DzProperty, token:String):Boolean {
	
	};
	/**
 * @returns The name of the argument to the shader that the map value of prop is passed to, if prop is mappable. Returns an empty string if prop is not found, or not mappable.
*/
	findMapTokenByProperty(prop:DzNumericProperty):String {
	
	};
	/**
 * @returns The property named name if name is found, otherwise NULL.
*/
	findProperty(name:String):DzProperty {
	
	};
	/**
 * @returns The property that passes a value to the shader via token, if token is found. Undefined by default.
*/
	findPropertyByToken(token:String):DzProperty {
	
	};
	/**
 * @returns The name of the argument to the shader that the value of prop is passed to. Returns an empty string if prop is not found.
*/
	findTokenByProperty(prop:DzProperty):String {
	
	};
	/**
 * @returns The path to the definition script for this shader object.
*/
	getDefinitionFile():String {
	
	};
	/**
 * @returns The number of properties currently used by this shader object.
*/
	getNumProperties():Number {
	
	};
	/**
 * @returns The owner (DzShaderMaterial, DzShaderLight, DzShaderCamera) of this object.
*/
	getOwner():DzElement {
	
	};
	/**
 * @description Get a property from this shader's property list.
 * @returns If which is within range, the property at the given index, otherwise NULL.
 * @since 4.9.0.46
 * @param which - Index of the property to return.
*/
	getProperty(which:Number):DzProperty {
	
	};
	/**
 * @returns A list of all the properties on this shader.
 * @since 4.9.0.46
*/
	getPropertyList():Array {
	
	};
	/**
 * @returns The relative path [from DzApp.getScriptsPath()] to the DAZ Script that is executed at render-time.
*/
	getRenderTimeFile():String {
	
	};
	/**
 * @returns The path to the RSL shader (sans-extension) for this shader object.
*/
	getShaderFile():String {
	
	};
	/**
 * @returns The RSL shader type for this object.
*/
	getShaderType():ShaderType {
	
	};
	/**
 * @returns true if this shader participates in the bake pass, otherwise false.
*/
	isActiveInBakePass():Boolean {
	
	};
	/**
 * @returns true if this shader participates in the beauty pass, otherwise false.
*/
	isActiveInBeautyPass():Boolean {
	
	};
	/**
 * @returns true if this shader participates in the shadow pass, otherwise false.
*/
	isActiveInShadowPass():Boolean {
	
	};
	/**
 * @returns true if this shader ONLY participates in the shadow pass, otherwise false. Same as isActiveInShadowPass() && !isActiveInBeautyPass().
*/
	isOnlyInShadowPass():Boolean {
	
	};
	/**
 * @description Removes the given property, if it can be found.
 * @returns true on success, otherwise false.
 * @param prop - The property to remove from the shader.
*/
	removeProperty(prop:DzProperty):Boolean {
	
	};
	/**
 * @description Removes the property named name, if it can be found.
 * @returns true on success, otherwise false.
 * @param name - The name of the property to remove from the shader.
*/
	removeProperty(name:String):Boolean {
	
	};
	/**
 * @description Sets whether this shader object participates in the baking pass; false by default. If this is set to true, the shader must have a string input variable named "BakeFileName" and another string input variable named "BakeType".
*/
	setActiveInBakePass(yesNo:Boolean):void {
	
	};
	/**
 * @description Sets whether this shader object participates in the beauty/final pass; true by default.
*/
	setActiveInBeautyPass(yesNo:Boolean):void {
	
	};
	/**
 * @description Sets whether this shader object participates in the shadow pass; false by default.
*/
	setActiveInShadowPass(yesNo:Boolean):void {
	
	};
	/**
 * @description Sets the relative path of the (DAZ Script) file that builds this shader object's property list.
 * @returns true if definitionFile is valid, otherwise false.
 * @param definitionFile - The relative path (from DzApp.getScriptsPath()) to the DAZ Script that creates this shader object's property list.
 * @param doOverride - Whether or not to override the setting of the definition file if it has already been set.
 * @param runScript - Whether or not to run the definition script upon setting it.
 * @attention definitionFile is executed the moment the call to this method is made. A global variable named Shader - referring to the current DzRSLShader being rendered, exists for the duration of definitionFile. Referencing this variable from outside definitionFile will result in an error.
*/
	setDefinitionFile(definitionFile:String, doOverride:Boolean, runScript:Boolean):Boolean {
	
	};
	/**
 * @description Sets whether this shader object ONLY participates in the shadow pass; false by default. This is the same as calling setActiveInBeautyPass( false ) and setActiveInShadowPass( true ).
*/
	setOnlyInShadowPass(yesNo:Boolean):void {
	
	};
	/**
 * @description Sets the relative path of the (DAZ Script) file that will be executed at render-time. This script can set attributes as well as shader parameters for the element, and implement custom logic for special effects.
 * @returns true if renderTimeFile is valid, otherwise false.
 * @param renderTimeFile - The relative path (from DzApp.getScriptsPath()) to the DAZ Script that sets any attributes or shader parameters at render time.
 * @attention When renderTimeFile is executed, a global variable named Shader - referring to the current DzRSLShader being rendered - exists for the duration of renderTimeFile. Referencing this variable from outside renderTimeFile will result in an error. See the Render Time Functions for a list of special functions only available to this script.
*/
	setRenderTimeFile(renderTimeFile:String):Boolean {
	
	};
	/**
 * @description Sets the shader file that this shader object calls when rendered.
 * @returns true if shaderFile plus the shader extension for the active renderer exists, otherwise false.
 * @param shaderFile - The relative path, from DzApp.getShadersPath(), to the shader that this shader object calls when rendered. The filename is expected to be sans-extension; e.g., "dzplastic", not "dzplastic.sl" or "dzplastic.sdl".
 * @attention Shaders built for use with DAZ Studio do not require any arguments in the main function. Surfaces, for instance, make use of the Standard Shading Attributes "Color" and "Opacity" and are set via the "Diffuse Color" and "Opacity Strength" properties, respectively. These properties are created by the DzShaderMaterial constructor. The values of these attributes are accessible in the shader via the Predefined Surface Shader Variables "Cs" and "Os", respectively.For Volume shaders the render option "standardatmosphere" is set to 0. See 3Delight documentations for more information on this option and its effect on volume shaders.
*/
	setShaderFile(shaderFile:String):Boolean {
	
	};
	/**
 * @description Sets the type for this shader object.
 * @param shaderType - The type of shader to set.
*/
	setShaderType(shaderType:ShaderType):Boolean {
	
	};
	/**
 * @returns The color as a DzVec3 gamma corrected if gamma correction is on and in the range of 0-1 for r, g, b. Alpha is ignored.
 * @param color - The color to gamma correct.
*/
	gammaCorrectColor(color:Color):DzVec3 {
	
	};
	/**
 * @description Adds a RiAttribute call with a float value.
 * @param attrib - The name of the attribute to set.
 * @param token - The name of the token to set.
 * @param val - The float value to set.
*/
	setFloatAttrib(attrib:String, token:String, val:Number):void {
	
	};
	/**
 * @description Adds a RiAttribute call with an integer value.
 * @param attrib - The name of the attribute to set.
 * @param token - The name of the token to set.
 * @param val - The integer value to set.
*/
	setIntegerAttrib(attrib:String, token:String, val:Number):void {
	
	};
	/**
 * @description Adds a RiAttribute call with a color value.
 * @param attrib - The name of the attribute to set.
 * @param token - The name of the token to set.
 * @param r - The value for the red color component.
 * @param g - The value for the green color component.
 * @param b - The value for the blue color component.
 * @param isFloat - A flag for indicating whether or not the values passed to r, g and b are floating point numbers (in the 0-1 range).
 * @attention If isFloat is false (the default), the values of r, g and b are assumed to be in the [0,255] range and will be converted to the [0,1] range prior to being passed on to the renderer. This allows for the values of the individual components to be driven beyond their normal range in cases where such an ability is needed, as with some subsurface scattering techniques.
*/
	setColorAttrib(attrib:String, token:String, r:Number, g:Number, b:Number, isFloat:Boolean):void {
	
	};
	/**
 * @description Adds a RiAttribute call with a string value.
 * @param attrib - The name of the attribute to set.
 * @param token - The name of the token to set.
 * @param val - The string value to set.
*/
	setStringAttrib(attrib:String, token:String, val:String):void {
	
	};
	/**
 * @description Adds a RiAttribute call with a point value.
 * @param attrib - The name of the attribute to set.
 * @param token - The name of the token to set.
 * @param vec - The point value (x, y, z) to set.
*/
	setPointAttrib(attrib:String, token:String, vec:DzVec3):void {
	
	};
	/**
 * @description Adds a RiAttribute call with a vector value.
 * @param attrib - The name of the attribute to set.
 * @param token - The name of the token to set.
 * @param vec - The vector value (x, y, z) to set.
*/
	setVectorAttrib(attrib:String, token:String, vec:DzVec3):void {
	
	};
	/**
 * @description Adds a RiAttribute call with a normal value.
 * @param attrib - The name of the attribute to set.
 * @param token - The name of the token to set.
 * @param vec - The normal value (x, y, z) to set.
*/
	setNormalAttrib(attrib:String, token:String, vec:DzVec3):void {
	
	};
	/**
 * @description Adds a RiAttribute call with a matrix value.
 * @param attrib - The name of the attribute to set.
 * @param token - The name of the token to set.
 * @param mtx - The matrix value to set.
*/
	setMatrixAttrib(attrib:String, token:String, mtx:DzMatrix4):void {
	
	};
	/**
 * @description Sets the value of a float token in the list of tokens passed to the shader.
 * @param token - The name of the token to set.
 * @param val - The float value to set.
*/
	setFloatToken(token:String, val:Number):void {
	
	};
	/**
 * @description Sets the value of an integer token in the list of tokens passed to the shader.
 * @param token - The name of the token to set.
 * @param val - The integer value to set.
*/
	setIntegerToken(token:String, val:Number):void {
	
	};
	/**
 * @description Sets the value of a color token in the list of tokens passed to the shader.
 * @param token - The name of the token to set.
 * @param val - The color value to set.
*/
	setColorToken(token:String, val:Color):void {
	
	};
	/**
 * @description Sets the value of a string token in the list of tokens passed to the shader.
 * @param token - The name of the token to set.
 * @param val - The string value to set.
*/
	setStringToken(token:String, val:String):void {
	
	};
	/**
 * @description Sets the value of a point token in the list of tokens passed to the shader.
 * @param token - The name of the token to set.
 * @param vec - The point value (x, y, z) to set.
*/
	setPointToken(token:String, vec:DzVec3):void {
	
	};
	/**
 * @description Sets the value of a vector token in the list of tokens passed to the shader.
 * @param token - The name of the token to set.
 * @param vec - The vector value (x, y, z) to set.
*/
	setVectorToken(token:String, vec:DzVec3):void {
	
	};
	/**
 * @description Sets the value of a normal token in the list of tokens passed to the shader.
 * @param token - The name of the token to set.
 * @param vec - The normal value (x, y, z) to set.
*/
	setNormalToken(token:String, vec:DzVec3):void {
	
	};
	/**
 * @description Sets the value of a matrix token in the list of tokens passed to the shader.
 * @param token - The name of the token to set.
 * @param mtx - The matrix value to set.
*/
	setMatrixToken(token:String, mtx:DzMatrix4):void {
	
	};
	/**
 * @description Convert six images representing six viewing directions into an environment map in the format required by the renderer.
 * @param px - The path of the image as viewed from the positive x direction.
 * @param nx - The path of the image as viewed from the negative x direction.
 * @param py - The path of the image as viewed from the positive y direction.
 * @param ny - The path of the image as viewed from the negative y direction.
 * @param pz - The path of the image as viewed from the positive z direction.
 * @param nz - The path of the image as viewed from the negative x direction.
 * @param tex - The path of the resultant image.
 * @param fov - The full horizontal field of view used to generate the input images.
 * @param filter - The pre-defined filter to use.
 * @param swidth - The filter width multiplier for the s direction.
 * @param twidth - The filter width multiplier for the t direction.
 * @param tokens - A list of additional String] tokens to set.
 * @param params - A list of the corresponding basic type to set for each token.
 * @attention In most cases, in DAZ Script 2, enumerated values are accessed like properties on the global object constructor (i.e. DzRenderOptions.Gaussian), but in this particular case the enumerations on DzRenderOptions for the filter argument are accessed like properties on an instance of the global object.
*/
	makeCubeFaceEnvironment(px:String, nx:String, py:String, ny:String, pz:String, nz:String, tex:String, fov:Number, filter:DzRenderOptions.PixelFilter, swidth:Number, twidth:Number, tokens:Array, params:Array):void {
	
	};
	/**
 * @description Convert an image representing a latitude-longitude map into an environment map in the format required by the renderer.
 * @param pic - The path of the source image.
 * @param tex - The path of the resultant image.
 * @param filter - The pre-defined filter to use.
 * @param swidth - The filter width multiplier for the s direction.
 * @param twidth - The filter width multiplier for the t direction.
 * @param tokens - A list of additional String] tokens to set.
 * @param params - A list of the corresponding basic type to set for each token.
 * @attention In most cases, in DAZ Script 2, enumerated values are accessed like properties on the global object constructor (i.e. DzRenderOptions.Gaussian), but in this particular case the enumerations on DzRenderOptions for the filter argument are accessed like properties on an instance of the global object.
*/
	makeLatLongEnvironment(pic:String, tex:String, filter:DzRenderOptions.PixelFilter, swidth:Number, twidth:Number, tokens:Array, params:Array):void {
	
	};
	/**
 * @description Convert a depth image into a shadow map in the format required by the renderer.
 * @param pic - The path of the source image.
 * @param tex - The path of the resultant image.
 * @param tokens - A list of additional String] tokens to set.
 * @param params - A list of the corresponding basic type to set for each token.
*/
	makeShadow(pic:String, tex:String, tokens:Array, params:Array):void {
	
	};
	/**
 * @description Convert an image map into a map in the format required by the renderer.
 * @param pic - The path of the source image.
 * @param tex - The path of the resultant image.
 * @param swrap - The wrapping behavior of s coordinate.
 * @param twrap - The wrapping behavior of t coordinate.
 * @param filter - The pre-defined filter to use.
 * @param swidth - The filter width multiplier for the s direction.
 * @param twidth - The filter width multiplier for the t direction.
 * @param tokens - A list of additional String] tokens to set.
 * @param params - A list of the corresponding basic type to set for each token.
 * @attention In most cases, in DAZ Script 2, enumerated values are accessed like properties on the global object constructor (i.e. DzRenderOptions.Gaussian), but in this particular case the enumerations on DzRenderOptions for the filter argument are accessed like properties on an instance of the global object.
*/
	makeTexture(pic:String, tex:String, swrap:String, twrap:String, filter:DzRenderOptions.PixelFilter, swidth:Number, twidth:Number, tokens:Array, params:Array):void {
	
	};
	/**
 * @description Convert a bump map into a map in the format required by the renderer.
 * @param pic - The path of the source image.
 * @param tex - The path of the resultant image.
 * @param swrap - The wrapping behavior of s coordinate.
 * @param twrap - The wrapping behavior of t coordinate.
 * @param filter - The pre-defined filter to use.
 * @param swidth - The filter width multiplier for the s direction.
 * @param twidth - The filter width multiplier for the t direction.
 * @param tokens - A list of additional String] tokens to set.
 * @param params - A list of the corresponding basic type to set for each token.
 * @attention In most cases, in DAZ Script 2, enumerated values are accessed like properties on the global object constructor (i.e. DzRenderOptions.Gaussian), but in this particular case the enumerations on DzRenderOptions for the filter argument are accessed like properties on an instance of the global object.
*/
	makeBump(pic:String, tex:String, swrap:String, twrap:String, filter:DzRenderOptions.PixelFilter, swidth:Number, twidth:Number, tokens:Array, params:Array):void {
	
	};
	/**
 * @description Adds a RiSpec RiTransformBegin() call.
 * @since 4.10.0.108
 * @attention Each call to this method must be matched with a call to addTransformEnd() or addScheduledTransformEnd().
*/
	addTransformBegin():void {
	
	};
	/**
 * @description Adds a RiSpec RiTransformEnd() call.
 * @since 4.10.0.108
 * @attention Each call to this method must be matched with an earlier call to addTransformBegin().
*/
	addTransformEnd():void {
	
	};
	/**
 * @description Adds a RiSpec RiTransformEnd() call after the owner.
 * @since 4.10.0.108
 * @attention Each call to this method must be matched with an earlier call to addTransformBegin().
*/
	addScheduledTransformEnd():void {
	
	};
	/**
 * @description Adds a RiSpec RiConcatTransform() call.
 * @since 4.10.0.108
 * @param transform - The transform to concatenate.
*/
	addConcatTransform(transform:DzMatrix4):void {
	
	};
	/**
 * @description Adds a RiSpec RiCoordinateSystem() call.
 * @since 4.10.0.108
 * @param space - The name for the coordinate system.
*/
	addCoordinateSystem(space:String):void {
	
	};
	/**
 * @description Adds a RiSpec RiCoordSysTransform() call.
 * @since 4.10.0.108
 * @param space - The name for the coordinate system.
*/
	addCoordSysTransform(space:String):void {
	
	};
	/**
 * @description Adds a RiSpec RiIdentity() call.
 * @since 4.10.0.108
*/
	addIdentity():void {
	
	};
	/**
 * @description Adds a RiSpec RiRotate() call.
 * @since 4.10.0.108
 * @param angle -
 * @param dx -
 * @param dy -
 * @param dz -
*/
	addRotate(angle:Number, dx:Number, dy:Number, dz:Number):void {
	
	};
	/**
 * @description Adds a RiSpec RiScale() call.
 * @since 4.10.0.108
 * @param dx -
 * @param dy -
 * @param dz -
*/
	addScale(dx:Number, dy:Number, dz:Number):void {
	
	};
	/**
 * @description Adds a RiSpec DDiScopedCoordinateSystem() call.
 * @since 4.10.0.108
 * @param space - The name for the coordinate system.
*/
	addScopedCoordinateSystem(space:String):void {
	
	};
	/**
 * @description Adds a RiSpec RiSkew() call.
 * @since 4.10.0.108
 * @param angle -
 * @param dx1 -
 * @param dy1 -
 * @param dz1 -
 * @param dx2 -
 * @param dy2 -
 * @param dz2 -
*/
	addSkew(angle:Number, dx1:Number, dy1:Number, dz1:Number, dx2:Number, dy2:Number, dz2:Number):void {
	
	};
	/**
 * @description Adds a RiSpec RiTransform() call.
 * @since 4.10.0.108
 * @param transform - The transform to set.
*/
	addTransform(transform:DzMatrix4):void {
	
	};
	/**
 * @description Adds a RiSpec RiTranslate() call.
 * @since 4.10.0.108
 * @param dx -
 * @param dy -
 * @param dz -
*/
	addTranslate(dx:Number, dy:Number, dz:Number):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Transmitted when a property is added to this element.
 * @signature `"propertyAdded(DzProperty*)"`
 * @event
*/
	propertyAdded(prop:DzProperty):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Transmitted when a property is added to or removed from this element.
 * @signature `"propertyListChanged()"`
 * @event
*/
	propertyListChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Transmitted when a property is removed from this element.
 * @signature `"propertyRemoved(DzProperty*)"`
 * @event
*/
	propertyRemoved(prop:DzProperty):void {
	
	};

}
/**
 * @classdesc Deprecated
Save filters save out a subset of scene settings such as poses, light sets, camera sets, etc. in DAZ Script format. Script based presets are deprecated in favor of those in the DAZ Scene Object Notation (DSON) format.
See Also:
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/savefilter_dz} */
class DzSaveFilter extends DzFileIO {
	/**
 * @description ENUMERATOR: If the file name extension is .dsb, the file is saved as DAZScriptFile, otherwise as TextScriptFile
*/
	
	static UseExtension;
	/**
 * @description ENUMERATOR: Plain text file - no Unicode support
*/
	
	static TextScriptFile;
	/**
 * @description ENUMERATOR: Binary DAZ file format - supports Unicode characters
*/
	
	static DAZScriptFile;
	/**
 * @description ENUMERATOR: Encrypted Binary DAZ file format - supports Unicode characters
*/
	
	static EncDAZScriptFile;
	/**
 * @returns The name of the filter.
*/
	getDescription():String {
	
	};
	/**
 * @description TODO:
Add description.
*/
	getLoadSavePath():String {
	
	};
	/**
 * @description TODO:
Add description.
*/
	setLoadSavePath(path:String):void {
	
	};
	/**
 * @description Saves to a file.
 * @returns DZ_NO_ERROR on success, otherwise an error code.
 * @param filename - Name of the file to export to.
 * @param mode - The type of file to save.
*/
	writeFile(filename:String, mode:ScriptFileMode):DzError {
	
	};
	/**
 * @description Saves to a file.
 * @returns DZ_NO_ERROR on success, otherwise an error code.
 * @param filename - Name of the file to export to.
 * @param mode - The type of file to save.
 * @param options - The options for the save filter.
*/
	writeFile(filename:String, mode:ScriptFileMode, options:DzFileIOSettings):DzError {
	
	};

}
/**
 * @classdesc Deprecated
This class is responsible for the management of save filters that produce script-based presets - DzSaveFilter (deprecated). Script based presets are deprecated in favor of those in the DAZ Scene Object Notation (DSON) format.
There is only one instance of this manager in an application. This instance is created and owned by DzApp. Request the instance via DzApp.getSaveFilterMgr().
See Also:
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/savefiltermgr_dz} */
class DzSaveFilterMgr extends QObject {
	/**
 * @description ENUMERATOR: If the file name extension is .dsb, the file is saved as DAZScriptFile, otherwise as TextScriptFile
*/
	
	static UseExtension;
	/**
 * @description ENUMERATOR: Plain text file - no Unicode support
*/
	
	static TextScriptFile;
	/**
 * @description ENUMERATOR: Binary DAZ file format - supports Unicode characters
*/
	
	static DAZScriptFile;
	/**
 * @description ENUMERATOR: Encrypted Binary DAZ file format - supports Unicode characters
*/
	
	static EncDAZScriptFile;
	/**
 * @returns The index of the save filter with the given class name.
 * @param className - The class name of the save filter to find.
*/
	static findFilter(className:String):Number {
	
	};
	/**
 * @returns A new instance of the i'th exporter in the list.
 * @param i - The index of the save filter to get.
*/
	static getFilter(deprecated):DzSaveFilter (deprecated) {
	
	};
	/**
 * @returns The name of the i'th filter.
 * @param i - The index of the save filter to get the name of.
*/
	static getFilterName(i:Number):String {
	
	};
	/**
 * @returns The number of save filters currently supported.
*/
	getNumFilters():Number {
	
	};
	/**
 * @description Save the scene contents to a file with the given save filter. Prompts the user for a file to save to.
 * @returns DZ_NO_ERROR if the file export was successful.
 * @param filterIndex - The index of the save filter class to use.
 * @param dir - The directory to start the file dialog in, if empty, the current load/save directory is used.
*/
	doSave(filterIndex:Number, dir:String):DzError {
	
	};
	/**
 * @returns Last directory that files were saved to.
*/
	getSavePath():String {
	
	};
	/**
 * @description Save the scene contents to a file with the given save filter.
 * @returns DZ_NO_ERROR if the file export was successfull.
 * @param mode - The file mode for saving the script
 * @param fileName - The name of the file to export to.
 * @param filterName - Optional argument. Class name of the filter to use, or no argument to show a choose filter dialog.
*/
	writeFile(mode:ScriptFileMode, fileName:String, filterName:String):DzError {
	
	};

}
/**
 * @classdesc Deprecated
Exists only to keep code written prior to 4.6.2.23 working. Do not use in new code. Use DzTextureComponent instead.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/scalemanip_dz} */
class DzScaleManip extends  {
	/**
 * @description Holds the scaling of the image across its width.
	*/
	heightScale:Number;
	/**
 * @description TODO:
Add description.
	*/
	widthScale:Number;
	/**
 * @description Holds the scaling of the image across its height.
 * @param w - The scaling of the image across its width. 1.0 is equivalent to 100%.
 * @param h - The scaling of the image across its height. 1.0 is equivalent to 100%.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Sets the scale for the image.
 * @param w - The scaling of the image across its width. 1.0 is equivalent to 100%.
 * @param h - The scaling of the image across its height. 1.0 is equivalent to 100%.
*/
	setScale(w:Number, h:Number):void {
	
	};

}
/**
 * @classdesc There is only one of these objects in the application. It is the communication hub between the core code and the interface, so it tracks all nodes, skeletons, lights, cameras, etc. that become part of the scene. This object is directly available using the Global.Scene variable.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/scene_dz} */
class DzScene extends DzBase {
	/**
 * @description Holds the asset id for the current scene.
	*/
	assetId:String;
	/**
 * @description Holds whether or not the asset for this modifier needs to be saved. (Read Only)
	*/
	assetNeedSave:Boolean;
	/**
 * @description Holds the asset URI for the current scene. (Read Only)
	*/
	assetUri:DzUri;
	/**
 * @description ENUMERATOR: DefaultMethod - If no nodes (or only the default camera) exist, this behaves as OpenNew. Otherwise, this behaves as MergeFile.
*/
	
	static DefaultMethod;
	/**
 * @description ENUMERATOR: OpenNew - Resets the scene to its initial, clean state. All scene data is deleted and the undo stack is cleared.
*/
	
	static OpenNew;
	/**
 * @description ENUMERATOR: MergeFile - Merges the file with any pre-existing elements in the scene.
*/
	
	static MergeFile;
	/**
 * @description ENUMERATOR: Only visible items with geometry that cast shadows will be included.
*/
	
	static DzObjectsOnly;
	/**
 * @description ENUMERATOR: Include lights in the bounding box.
*/
	
	static DzIncludeLightsFlag;
	/**
 * @description ENUMERATOR: Include cameras in the bounding box.
*/
	
	static DzIncludeCamerasFlag;
	/**
 * @description ENUMERATOR: Include items that do not cast shadows in the bounding box.
*/
	
	static DzIncludeNonShadowersFlag;
	/**
 * @description ENUMERATOR: Include items that are not visible in the bounding box.
*/
	
	static DzIncludeNonVisibleFlag;
	/**
 * @description ENUMERATOR: Include all nodes in the bounding box.
*/
	
	static DzIncludeAllFlag;
	/**
 * @description Executes the node post-create script; a script that considers the active renderer and makes adjustments to the specified node - e.g., replaces instances of the "default" material for the application with the default material for the active renderer.
 * @returns true if the node is valid, the node post-create script exists and can be loaded/executed without error, otherwise false.
 * @since 4.11.0.255
 * @param node - The node to execute the post-create script on; the node must have associated geometry.
 * @param settingsBase - The slash ("/") delimited base path of a DzAppSettings to look for a string value named after the classname of the active renderer - which is expected to hold the path to a file (can be relative to a mapped content directory, or absolute) to load if it exists.
 * @param materialIDs - An optional list of element IDs for the materials to limit the scope of the script to; if this list is empty (default), all materials on the current shape of the node are considered.
*/
	static executeNodePostCreateScript(node:DzNode, settingsBase:String):Boolean {
	
	};
	/**
 * @returns The number suffix (if any), otherwise an empty string.
 * @since 4.12.0.62
 * @param label - The string to get the number suffix from.
*/
	static getLabelNumber(label:String):String {
	
	};
	/**
 * @returns The number suffix (if any) in the name, otherwise an empty string.
 * @since 4.12.0.62
 * @param name - The string to get the number suffix from.
*/
	static getNameNumber(name:String):String {
	
	};
	/**
 * @returns label with the number suffix(es) removed (if any), otherwise label.
 * @param label - The string to remove the number suffix(es) from.
*/
	static stripLabelNumber(label:String):String {
	
	};
	/**
 * @returns name with the " #" suffix removed (if any), otherwise name.
 * @since 4.12.0.62
 * @param name - The string to remove the " #" suffix from.
*/
	static stripNameNumber(name:String):String {
	
	};
	/**
 * @description Adds a scene data item to the scene.
 * @returns DZ_NO_ERROR on success, or an error code if it failed.
 * @param item - The data item to add to the scene. The scene takes ownership of this object and deletes it when it is no longer used.
*/
	addDataItem(item:DzSceneData):DzError {
	
	};
	/**
 * @description Adds a node to the scene if it is not already in the scene.
 * @returns true if the node was added to the scene, otherwise false.
 * @param newNode - The node to add to the scene. The scene takes ownership of this object and deletes it when it is no longer used.
*/
	addNode(node:DzNode):Boolean {
	
	};
	/**
 * @description Adds a world-space modifier to the scene's modifier stack.
 * @returns DZ_NO_ERROR on success, otherwise an error code.
 * @param modifier - The world-space modifier to add to the scene. The scene takes ownership of this object and deletes it when it is no longer used.
 * @param index - The location in the list that where the modifier will be inserted. If index is less than 0, the modifier is appended to the end of the stack.
*/
	addWSModifier(modifier:wsmodifier_dz, index:Number):DzError {
	
	};
	/**
 * @description Starts a time-editing operation. All changes to scene time, play range, and animation range that occur between this call and a call to finishTimeEdit() will be wrapped into a single undo item.
*/
	beginTimeEdit():void {
	
	};
	/**
 * @description Resets the scene to its initial, clean state. All data is deleted and the undo stack is cleared.
*/
	clear():void {
	
	};
	/**
 * @description Attempts to find a camera with the given name in the scene.
 * @returns The first camera in the scene with the given name (if any), otherwise NULL.
 * @param name - The name of the camera to find.
*/
	findCamera(name:String):DzCamera {
	
	};
	/**
 * @description Attempts to find a camera with the given label in the scene.
 * @returns The first camera in the scene with the given label (if any), otherwise NULL.
 * @param label - The label of the camera to find.
*/
	findCameraByLabel(label:String):DzCamera {
	
	};
	/**
 * @returns The scene data item with the given name (if any), otherwise NULL.
*/
	findDataItem(name:String):DzSceneData {
	
	};
	/**
 * @description Attempts to find a light with the given name in the scene.
 * @returns The first light in the scene with the given name (if any), otherwise NULL.
 * @param name - The name of the light to find.
*/
	findLight(name:String):DzLight {
	
	};
	/**
 * @description Attempts to find a light with the given label in the scene.
 * @returns The first light in the scene with the given label (if any), otherwise NULL.
 * @param label - The label of the light to find.
*/
	findLightByLabel(label:String):DzLight {
	
	};
	/**
 * @returns The material with the matching element id (if any), otherwise NULL.
 * @param id - The number used to uniquely identify the material in the scene.
*/
	findMaterialByElementID(id:Number):DzMaterial {
	
	};
	/**
 * @returns The modifier with the matching element id (if any), otherwise NULL.
 * @param id - The number used to uniquely identify the modifier in the scene.
*/
	findModifierByElementID(id:Number):DzModifier {
	
	};
	/**
 * @description Attempts to find a node with the given name in the scene.
 * @returns The first node in the scene with the given name (if any), otherwise NULL.
 * @param name - The name of the node to find.
*/
	findNode(name:String):DzNode {
	
	};
	/**
 * @returns The node with the matching element id (if any), otherwise NULL.
 * @param id - The number used to uniquely identify the node in the scene.
*/
	findNodeByElementID(id:Number):DzNode {
	
	};
	/**
 * @description Attempts to find a node with the given label in the scene.
 * @returns The first node in the scene with the given label (if any), otherwise NULL.
 * @param label - The label of the node to find.
*/
	findNodeByLabel(label:String):DzNode {
	
	};
	/**
 * @returns The index of the node in the list, or -1 if not found.
 * @param node - The node to search for in the nodes list.
*/
	findNodeIndex(node:DzNode):Number {
	
	};
	/**
 * @returns The object with the matching element id (if any), otherwise NULL.
 * @param id - The number used to uniquely identify the object in the scene.
*/
	findObjectByElementID(id:Number):DzObject {
	
	};
	/**
 * @returns The shape with the matching element id (if any), otherwise NULL.
 * @param id - The number used to uniquely identify the shape in the scene.
*/
	findShapeByElementID(id:Number):DzShape {
	
	};
	/**
 * @description Attempts to find a singleton node with the given identifier in the scene.
 * @returns The singleton node in the scene with the given identifier (if any), otherwise NULL.
 * @since 4.12.2.20
 * @param guidStr - The GUID of the singleton node to find.
*/
	findSingletonNode(guidStr:String):DzNode {
	
	};
	/**
 * @description Attempts to find a skeleton with the given name in the scene.
 * @returns The first skeleton in the scene with the given name (if any), otherwise NULL.
 * @param name - The name of the skeleton to find.
*/
	findSkeleton(name:String):DzSkeleton {
	
	};
	/**
 * @description Attempts to find a skeleton with the given label in the scene.
 * @returns The first skeleton in the scene with the given label, otherwise NULL.
 * @param label - The label of the skeleton to find.
*/
	findSkeletonByLabel(label:String):DzSkeleton {
	
	};
	/**
 * @returns The index of the skeleton in the list, or -1 if not found.
 * @param skeleton - The skeleton to search for in the nodes list.
*/
	findSkeletonIndex(skeleton:DzSkeleton):Number {
	
	};
	/**
 * @description Ends a time editing operation started with a call to beginTimeEdit().
*/
	finishTimeEdit():void {
	
	};
	/**
 * @returns The current animation range.
*/
	getAnimRange():DzTimeRange {
	
	};
	/**
 * @returns The current asset load path of this scene.
*/
	getAssetLoadPath():String {
	
	};
	/**
 * @returns An editable copy of the current audio clip for the scene. This will be NULL if there is no audio for the scene.
*/
	getAudio():DzAudioClip {
	
	};
	/**
 * @returns The frame number on which the audio should start playing.
*/
	getAudioStartFrame():Number {
	
	};
	/**
 * @returns The author of the current scene (if any), otherwise NULL.
 * @since 4.8.1.19
*/
	getAuthor():DzAuthor {
	
	};
	/**
 * @returns The current backdrop object for the scene.
*/
	getBackdrop():DzBackdrop {
	
	};
	/**
 * @description Calculate the bounding box for the current scene.
 * @returns A world-space bounding box that encompasses all items in the scene (that match the criteria of the given flags).
 * @param flags - A set of flags that specify which types of nodes should be included.
*/
	getBoundingBox(flags:Number):DzBox3 {
	
	};
	/**
 * @returns The camera at the given index (if valid), otherwise NULL.
 * @param index - The index of the camera to return.
*/
	getCamera(index:Number):DzCamera {
	
	};
	/**
 * @returns A list containing all cameras in the scene.
*/
	getCameraList():Array {
	
	};
	/**
 * @returns The data item for the scene at the given index (if valid), otherwise NULL.
 * @param index - The index of the data item to return.
*/
	getDataItem(index:Number):DzSceneData {
	
	};
	/**
 * @returns A list of the data items attached to the scene.
*/
	getDataItemList():Array {
	
	};
	/**
 * @returns The filename that this scene was last saved to or read from (if any), otherwise an empty string.
*/
	getFilename():String {
	
	};
	/**
 * @returns The current time as a frame number based on the current time step.
*/
	getFrame():Number {
	
	};
	/**
 * @returns The currently highlighted node in the scene.
*/
	getHighlightNode():DzNode {
	
	};
	/**
 * @returns The light at the given index (if valid), otherwise NULL.
 * @param index - The index of the light to return.
*/
	getLight(index:Number):DzLight {
	
	};
	/**
 * @returns A list containing all lights in the scene.
*/
	getLightList():Array {
	
	};
	/**
 * @returns The node at the given index (if valid), otherwise NULL.
 * @param index - The index of the node to return.
*/
	getNode(index:Number):DzNode {
	
	};
	/**
 * @returns A list of all nodes in the scene.
*/
	getNodeList():Array {
	
	};
	/**
 * @returns The number of cameras in the scene.
*/
	getNumCameras():Number {
	
	};
	/**
 * @returns The number of data items attached to the scene
*/
	getNumDataItems():Number {
	
	};
	/**
 * @returns The number of lights in the scene.
*/
	getNumLights():Number {
	
	};
	/**
 * @returns The number of nodes in the scene.
*/
	getNumNodes():Number {
	
	};
	/**
 * @returns The number of currently selected cameras.
*/
	getNumSelectedCameras():Number {
	
	};
	/**
 * @returns The number of currently selected lights.
*/
	getNumSelectedLights():Number {
	
	};
	/**
 * @returns The number of currently selected nodes.
*/
	getNumSelectedNodes():Number {
	
	};
	/**
 * @returns The number of currently selected skeletons.
*/
	getNumSelectedSkeletons():Number {
	
	};
	/**
 * @returns The number of selected time ranges.
*/
	getNumSelectedTimeRanges():Number {
	
	};
	/**
 * @returns The number of skeletons in the scene.
*/
	getNumSkeletons():Number {
	
	};
	/**
 * @returns The number of storable_dz items in the scene.
*/
	getNumStorablesInScene():Number {
	
	};
	/**
 * @returns The number of world-space modifiers in the scene.
*/
	getNumWSModifiers():Number {
	
	};
	/**
 * @returns The current play range.
*/
	getPlayRange():DzTimeRange {
	
	};
	/**
 * @returns true if light preview is enabled, otherwise false.
*/
	getPreviewLights():Boolean {
	
	};
	/**
 * @returns The primary selected node in the scene, or NULL if there is no currently selected node. The primary selected node is the last node that was selected, or can be set via function calls.
*/
	getPrimarySelection():DzNode {
	
	};
	/**
 * @returns The camera at index in the list of selected cameras (if valid), otherwise NULL.
 * @param index - The index of the selected camera to return.
*/
	getSelectedCamera(index:Number):DzCamera {
	
	};
	/**
 * @returns A list containing all selected cameras in the scene.
*/
	getSelectedCameraList():Array {
	
	};
	/**
 * @returns The light at index in the list of selected lights (if valid), otherwise NULL.
 * @param index - The index of the selected light to return.
*/
	getSelectedLight(index:Number):DzLight {
	
	};
	/**
 * @returns A list containing all selected lights in the scene.
*/
	getSelectedLightList():Array {
	
	};
	/**
 * @returns The node at index in the list of selected nodes (if valid), otherwise NULL.
 * @param index - The index of the selected node to return.
*/
	getSelectedNode(index:Number):DzNode {
	
	};
	/**
 * @returns A list containing all selected nodes in the scene.
*/
	getSelectedNodeList():Array {
	
	};
	/**
 * @returns The skeleton at index in the list of selected skeletons (if valid), otherwise NULL.
 * @param index - The index of the selected skeleton to return.
*/
	getSelectedSkeleton(index:Number):DzSkeleton {
	
	};
	/**
 * @returns A list containing all selected skeletons in the scene.
*/
	getSelectedSkeletonList():Array {
	
	};
	/**
 * @returns The skeleton at the given index (if valid), otherwise NULL.
 * @param index - The index of the skeleton to return.
*/
	getSkeleton(index:Number):DzSkeleton {
	
	};
	/**
 * @returns A list containing all skeletons in the scene.
*/
	getSkeletonList():Array {
	
	};
	/**
 * @returns A list containing all lights in the scene sorted by render priority.
*/
	getSortedLightList():Array {
	
	};
	/**
 * @returns The current scene time as a DzTime.
*/
	getTime():DzTime {
	
	};
	/**
 * @returns The time step the animation is incremented by at each frame.
*/
	getTimeStep():DzTime {
	
	};
	/**
 * @returns label if the value provided is already unique, otherwise label with a suffix that causes it to be unique.
 * @param label - The node label to make unique; stripLabelNumber() is called on this value.
 * @param node - The top-level node that the label is intended for; may be null; this node will be ignored when validating uniqueness.
 * @attention Bones and hidden nodes that are parented to nodes within a skeleton's hierarchy are not taken into account when ensuring uniqueness.
*/
	getUniqueTopLevelLabel(label:String, node:DzNode):String {
	
	};
	/**
 * @returns name if the value provided is already unique, otherwise name with a suffix that causes it to be unique.
 * @since 4.12.0.61
 * @param name - The node name to make unique; stripNameNumber() is called on this value.
 * @param node - The top-level node that the name is intended for; may be null; this node will be ignored when validating uniqueness.
 * @attention Bones and hidden nodes that are parented to nodes within a skeleton's hierarchy are not taken into account when ensuring uniqueness.
*/
	getUniqueTopLevelName(name:String, node:DzNode):String {
	
	};
	/**
 * @returns The world-space modifier at the given index (if valid), otherwise NULL.
 * @param index - The index of the world-space modifier to return.
*/
	getWSModifier(index:Number):DzWsmodifier {
	
	};
	/**
 * @returns A list containing all world-space modifiers in the scene.
*/
	getWSModifierList():Array {
	
	};
	/**
 * @description Invalidates the scene, flagging it as needing to be redrawn.
*/
	invalidate():void {
	
	};
	/**
 * @description TODO:
Add description.
*/
	invalidateLightSorting():void {
	
	};
	/**
 * @returns true if the scene is currently in a clearing operation, otherwise false.
*/
	isClearing():Boolean {
	
	};
	/**
 * @returns true if the scene is currently in a loading from a .daz native scene.
*/
	isDAZLoading():Boolean {
	
	};
	/**
 * @returns true if the scene is currently in a loading operation, otherwise false.
*/
	isLoading():Boolean {
	
	};
	/**
 * @returns true if the looping of playback is enabled, otherwise false.
*/
	isLoopingEnabled():Boolean {
	
	};
	/**
 * @returns true if the animation is currently playing, otherwise false.
*/
	isPlaying():Boolean {
	
	};
	/**
 * @description Deprecated
 * @returns DZ_NO_ERROR on success, otherwise an error code.
 * @param filename - The name of the native format file to load.
 * @param method - The method for combining the contents of the file with the current scene contents.
 * @attention Prior to 4.12.2.39, only the deprecated .daz format was supported by this function.
*/
	loadScene(filename:String, method:DzOpenMethod):DzError {
	
	};
	/**
 * @description Sets looping of playback on/off.
 * @param onOff - If true, playback of animation will continue until the user stops it, looping back to the first frame each time the end of the animation is reached. If false, playback of the animation will stop when the end of the animation is reached.
*/
	loopPlayback(onOff:Boolean):void {
	
	};
	/**
 * @description Indicate that the scene has changed since the last save.
*/
	markChanged():void {
	
	};
	/**
 * @returns true if the scene needs to be saved, otherwise false.
*/
	needsSave():Boolean {
	
	};
	/**
 * @description Pauses playback of the current animation.
*/
	pause():void {
	
	};
	/**
 * @description Start playback of the current play range.
 * @param realtime - If true, frames will be dropped or paused as needed to keep the animation playing in realtime. Otherwise, the animation is played frame by frame as it can be drawn.
*/
	play(realtime:Boolean):void {
	
	};
	/**
 * @description Removes all cameras from the scene.
*/
	removeAllCameras():void {
	
	};
	/**
 * @description Removes all lights from the scene.
*/
	removeAllLights():void {
	
	};
	/**
 * @description Removes the scene data item from the scene.
 * @returns DZ_NO_ERROR if the item was successfully removed, otherwise an error code.
 * @param item - The data item to remove from the scene.
*/
	removeDataItem(item:DzSceneData):DzError {
	
	};
	/**
 * @description Removes the given node from the scene.
 * @returns true if the node was in the scene and was successfully removed, otherwise false.
 * @param node - The node to remove from the scene.
*/
	removeNode(node:DzNode):Boolean {
	
	};
	/**
 * @description Removes all nodes that have items in their hierarchy that are currently selected.
*/
	removeSelected():void {
	
	};
	/**
 * @description Removes the modifier from the scene's modifier stack if it exists.
 * @returns DZ_NO_ERROR on success, otherwise an error code.
 * @param modifier - The world-space modifier to remove from the scene.
*/
	removeWSModifier(modifier:wsmodifier_dz):DzError {
	
	};
	/**
 * @description Deprecated
 * @returns DZ_NO_ERROR on success, otherwise an error code.
 * @param filename - The file to save the scene to. If empty, the scene will be saved to the filename that it was last saved to, if any. If no prior file name exists, DZ_ILLEGAL_ARGUMENT_ERROR is returned. If a filename is passed, it becomes the save filename that will be used for future saves. If the file cannot be opened or saved, DZ_OPERATION_FAILED_ERROR is returned.
*/
	saveScene(filename:String):DzError {
	
	};
	/**
 * @description Saves a thumbnail-size OpenGL render of the current viewport to the given file name.
 * @param filename - The filename to save the thumbnail to. This should have an extension that is supported by the image manager.
*/
	saveThumbnail(filename:String):void {
	
	};
	/**
 * @description Sets the selection state for all nodes in the scene.
 * @param onOff - If true all nodes in the scene will be selected. If false, all nodes will be deselected.
*/
	selectAllNodes(onOff:Boolean):void {
	
	};
	/**
 * @description Sets the selection state for all skeletons in the scene.
 * @param onOff - If true all skeletons in the scene will be selected. If false, all skeletons will be deselected.
*/
	selectAllSkeletons(onOff:Boolean):void {
	
	};
	/**
 * @description Selects/Deselects all time range.
 * @param onOff - If true, all ranges are selected. If false, all ranges are deselected.
*/
	selectAllTime(onOff:Boolean):void {
	
	};
	/**
 * @description Sets the animation range for the scene.
 * @param range - The time range to set for the entire animation.
*/
	setAnimRange(range:DzTimeRange):void {
	
	};
	/**
 * @description Sets the asset load path of this scene.
 * @param absolutePath - The absolute path to set.
*/
	setAssetLoadPath(absolutePath:String):void {
	
	};
	/**
 * @description Sets the current audio object and the frame on which it should start playing.
 * @param audio - The new audio clip for the scene. Pass in NULL to clear the current audio clip.
 * @param startFrame - The frame at which the audio should begin playing.
*/
	setAudio(audio:DzAudioClip, startFrame:Number):void {
	
	};
	/**
 * @description Sets the backdrop object.
 * @param backdrop - The new backdrop for the scene. The scene takes ownership of this object and deletes it when it is no longer needed.
*/
	setBackdrop(backdrop:DzBackdrop):void {
	
	};
	/**
 * @description Set the scene time to the given frame based on current time step.
 * @param frame - The frame to set as the current scene time.
*/
	setFrame(frame:Number):void {
	
	};
	/**
 * @description Sets the currently highlighted node. This is typically called from DzViewTool-derived classes.
 * @param node - The node that will become the currently highlighted node.
*/
	setHighlightNode(node:DzNode):void {
	
	};
	/**
 * @description Sets the play range for the scene.
 * @param range - The time range to set for animation playback.
*/
	setPlayRange(range:DzTimeRange):void {
	
	};
	/**
 * @description Sets whether or not light preview is enabled or disabled.
 * @param onOff - If true, the light preview is enabled.
*/
	setPreviewLights(onoff:Boolean):void {
	
	};
	/**
 * @description Sets the node to use as the primary selection.
 * @returns true if the node was made the new primary selection, otherwise false.
 * @param node - The selected node that should be flagged as the primary selection. The node must already be selected.
*/
	setPrimarySelection(node:DzNode):Boolean {
	
	};
	/**
 * @description Set the scene time to the given time.
 * @param time - The time to set as the current scene time.
*/
	setTime(time:DzTime):void {
	
	};
	/**
 * @description Sets the Frame rate for the scene.
 * @param tm - The number of time ticks per frame.
*/
	setTimeStep(time:DzTime):void {
	
	};
	/**
 * @description Step time forward/back by number of frames.
 * @param nFrames - The number of frames to step from the current position.
 * @param forward - If true, current frame count is increased nFrames. If false, current frame count is decreased.
*/
	stepTime(nFrames:Number, forward:Boolean):void {
	
	};
	/**
 * @description Recursively updates all nodes in the scene.
*/
	update():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Transmitted immediately before a node is removed from the scene.
 * @signature `"aboutToRemoveNode(DzNode*)"`
 * @event
*/
	aboutToRemoveNode(node:DzNode):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted just before the scene is rendered.
 * @signature `"aboutToRender(DzRenderer*)"`
 * @event
*/
	aboutToRender(r:DzRenderer):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Transmitted after the scene play range is changed.
 * @signature `"animRangeChanged(const DzTimeRange&)"`
 * @event
*/
	animRangeChanged(range:DzTimeRange):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Transmitted just after the scene has been modified.
 * @signature `"assetModified()"`
 * @event
*/
	assetModified():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Transmitted just after the scene has been saved.
 * @signature `"assetWasSaved()"`
 * @event
*/
	assetWasSaved():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Transmitted just after the backdrop has changed.
 * @signature `"backdropChanged()"`
 * @event
*/
	backdropChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Transmitted when cameras are added to the scene.
 * @signature `"cameraAdded(DzCamera*)"`
 * @event
*/
	cameraAdded(node:DzCamera):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Transmitted when cameras are added to or removed from the scene.
 * @signature `"cameraListChanged()"`
 * @event
*/
	cameraListChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Transmitted when cameras are removed from the scene.
 * @signature `"cameraRemoved(DzCamera*)"`
 * @event
*/
	cameraRemoved(node:DzCamera):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Transmitted after the camera selection list changes.
 * @signature `"cameraSelectionListChanged()"`
 * @event
*/
	cameraSelectionListChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Transmitted after the scene time is changed.
 * @signature `"currentTimeChanged( DzTime, DzTime )"`
 * @event
*/
	currentTimeChanged(oldTime:DzTime, newTime:DzTime):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Transmitted if the scene has changed and needs to be redrawn.
 * @signature `"drawnDataChanged()"`
 * @event
*/
	drawnDataChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Transmitted when the highlight node changes.
 * @signature `"highlightNodeChanged(DzNode*)"`
 * @event
*/
	highlightNodeChanged(node:DzNode):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Transmitted when lights are added to the scene.
 * @signature `"lightAdded(DzLight*)"`
 * @event
*/
	lightAdded(node:DzLight):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Transmitted when lights are added to or removed from the scene.
 * @signature `"lightListChanged()"`
 * @event
*/
	lightListChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Transmitted when lights are removed from the scene.
 * @signature `"lightRemoved(DzLight*)"`
 * @event
*/
	lightRemoved(node:DzLight):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Transmitted after the light selection list changes.
 * @signature `"lightSelectionListChanged()"`
 * @event
*/
	lightSelectionListChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Transmitted when the enabled state of playback looping changes.
 * @signature `"loopPlaybackChanged(bool)"`
 * @event
*/
	loopPlaybackChanged(onOff:Boolean):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the material list of a node in the scene has changed.
 * @signature `"materialListChanged()"`
 * @event
*/
	materialListChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the material selection in the scene has changed.
 * @signature `"materialSelectionChanged()"`
 * @event
*/
	materialSelectionChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Transmitted when nodes are added to the scene.
 * @signature `"nodeAdded(DzNode*)"`
 * @event
*/
	nodeAdded(node:DzNode):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Transmitted when nodes are added to or removed from the scene.
 * @signature `"nodeListChanged()"`
 * @event
*/
	nodeListChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Transmitted when nodes are removed from the scene.
 * @signature `"nodeRemoved(DzNode*)"`
 * @event
*/
	nodeRemoved(node:DzNode):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Transmitted after the node selection list changes.
 * @signature `"nodeSelectionListChanged()"`
 * @event
*/
	nodeSelectionListChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Transmitted when playback of the scene stops.
 * @signature `"playbackFinished()"`
 * @event
*/
	playbackFinished():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Transmitted when playback of the scene begins.
 * @signature `"playbackStarted()"`
 * @event
*/
	playbackStarted():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Transmitted after the scene play range is changed.
 * @signature `"playRangeChanged(const DzTimeRange&)"`
 * @event
*/
	playRangeChanged(range:DzTimeRange):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Transmitted when the primary node selection changes.
 * @signature `"primarySelectionChanged(DzNode*)"`
 * @event
*/
	primarySelectionChanged(node:DzNode):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted just after the scene is rendered.
 * @signature `"renderFinished(DzRenderer*)"`
 * @event
*/
	renderFinished(r:DzRenderer):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Transmitted after the scene gets cleared.
 * @signature `"sceneCleared()"`
 * @event
*/
	sceneCleared():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted just before the scene is cleared.
 * @signature `"sceneClearStarting()"`
 * @event
*/
	sceneClearStarting():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Transmitted when the name of the current scene file has changed.
 * @signature `"sceneFilenameChanged(const QString&)"`
 * @event
*/
	sceneFilenameChanged(newName:String):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Transmitted after loading a scene file. This may not always be emitted after every sceneLoadStarting() signal if there were errors during file loading.
 * @signature `"sceneLoaded()"`
 * @event
*/
	sceneLoaded():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Transmitted just before loading a scene.
 * @signature `"sceneLoadStarting()"`
 * @event
*/
	sceneLoadStarting():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Transmitted after saving a scene file. This may not always be emitted after every sceneSaveStarting() signal if there were errors during file saving.
 * @signature `"sceneSaved( String )"`
 * @event
*/
	sceneSaved(filename:String):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Transmitted just before saving a scene.
 * @signature `"sceneSaveStarting( String )"`
 * @event
*/
	sceneSaveStarting(filename:String):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Transmitted just after the scene topology has changed.
 * @signature `"sceneTopologyChanged()"`
 * @event
*/
	sceneTopologyChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted as single node is being added to the scene.
 * @signature `"singletonNodeAdded(DzNode*)"`
 * @event
*/
	singletonNodeAdded(node:DzNode):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Transmitted when skeletons are added to the scene.
 * @signature `"skeletonAdded(DzSkeleton*)"`
 * @event
*/
	skeletonAdded(node:DzSkeleton):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Transmitted when skeletons are added to or removed from the scene.
 * @signature `"skeletonListChanged()"`
 * @event
*/
	skeletonListChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Transmitted when skeletons are removed from the scene.
 * @signature `"skeletonRemoved(DzSkeleton*)"`
 * @event
*/
	skeletonRemoved(node:DzSkeleton):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Transmitted after the skeleton selection list changes.
 * @signature `"skeletonSelectionListChanged()"`
 * @event
*/
	skeletonSelectionListChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Transmitted after the scene time is changed.
 * @signature `"timeChanged(DzTime)"`
 * @event
*/
	timeChanged(time:DzTime):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Transmitted when time is about to change.
 * @signature `"timeChanging(DzTime)"`
 * @event
*/
	timeChanging(newTime:DzTime):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Transmitted after the scene time selection is changed.
 * @signature `"timeSelectionChanged()"`
 * @event
*/
	timeSelectionChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Transmitted after the scene time step is changed.
 * @signature `"timeStepChanged(DzTime)"`
 * @event
*/
	timeStepChanged(time:DzTime):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Transmitted when world-space modifiers are added to the scene.
 * @signature `"wsModifierAdded(DzWSModifier*)"`
 * @event
*/
	wsModifierAdded(modifier:wsmodifier_dz):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Transmitted when world-space modifiers are removed from the scene.
 * @signature `"wsModifierRemoved(DzWSModifier*)"`
 * @event
*/
	wsModifierRemoved(modifier:wsmodifier_dz):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Transmitted when world-space modifiers are added to or removed from the scene.
 * @signature `"wsModifierStackChanged()"`
 * @event
*/
	wsModifierStackChanged():void {
	
	};

}
/**
 * @classdesc An asset save filter for saving a Scene in the DSON format.
See Also:
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/sceneassetfilter_dz} */
class DzSceneAssetFilter extends DzAssetFileOutFilter {
	/**
 * @description TODO:
Add description.
 * @constructor
*/
	constructor() {
	
	};

}
/**
 * @classdesc See Also:
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/scenedata_dz} */
class DzSceneData extends DzCustomData {

}
/**
 * @classdesc TODO:
Add detailed description.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/scenehelper_dz} */
class DzSceneHelper extends QObject {
	/**
 * @description Default Constructor
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @returns An list of the collected unique nodes.
 * @param selectedOnly - Whether or not to limit the nodes to only those that are selected.
 * @param boneTopSelected - Whether or not to climb the lineage of any DzBone encountered, and instead collect the top-most selected.
 * @param boneSkeleton - Whether or not to collect the DzSkeleton when a DzBone is encountered; overrides boneTopSelected.
*/
	collectNodes(selectedOnly:Boolean, boneTopSelected:Boolean, boneSkeleton:Boolean):Array {
	
	};
	/**
 * @returns The ERC link created, or NULL.
 * @param node - The DzNode with the DzNumericProperty to be controlled.
 * @param propertyName - The name of the DzNumericProperty to be controlled.
 * @param controlNode - The DzNode with the DzNumericProperty used to control.
 * @param controllerName - The name of the DzNumericProperty used to control.
 * @param type - The type of calculation this link performs.
 * @param scalar - The value of the multiplier for the link.
 * @param addend - The value of the additive offset for the link.
*/
	createLink(bone:DzNode, propertyName:String, controlBone:DzNode, controllerName:String, type:Number, scalar:Number, addend:Number):DzERCLink {
	
	};
	/**
 * @returns The morph created, or NULL if the morph could not be created.
 * @param node - The DzNode with the DzObject to create the morph_dz on.
 * @param name - The name of the morph_dz to create.
 * @param deltas - A two dimensional Array, an array of 4 element arrays, where the first element of each array is the index of the vertex to set delta values for, the second element is the X-axis value for the delta, the third element is the Y-axis value for the delta, and the fourth element is the Z-axis value for the delta.
 * @param overwrite - Whether or not to replace a morph_dz named name.
*/
	createMorph(bone:DzNode, name:String, deltas:Array, overwrite:Boolean):DzMorph {
	
	};
	/**
 * @returns The first control property of the property with the given internal name, or NULL.
 * @param propertyName - The name of the property to find the control property for.
 * @param node - The node to find propertyName on.
 * @param recurse - If node is a DzSkeleton and propertyName cannot be found using findPropertyInGroup(), determines whether to attempt locating propertyName on one of the DzBone owned by the skeleton.
 * @param nameLabelMatch - Whether the name and label of the property must match propertyName.
*/
	findControlProperty(propertyName:String, node:DzNode, recurse:Boolean, nameLabelMatch:Boolean):DzProperty {
	
	};
	/**
 * @returns The first property with the given internal name, otherwise NULL.
 * @since 4.11.0.232
 * @param propName - The name of the property to find.
 * @param elem - The element to search.
*/
	findProperty(propName:String, elem:DzElement):DzProperty {
	
	};
	/**
 * @returns The first property with the given internal name, otherwise NULL.
 * @since 4.11.0.232
 * @param internalName - The internal name of the property to find.
 * @param elem - The element to search.
*/
	findPropertyByInternalName(internalName:String, elem:DzElement):DzProperty {
	
	};
	/**
 * @returns The first property with the given label, otherwise NULL.
 * @since 4.11.0.232
 * @param label - The label of the property to find.
 * @param elem - The element to search.
*/
	findPropertyByLabel(label:String, elem:DzElement):DzProperty {
	
	};
	/**
 * @returns The first property with the given internal name, or NULL.
 * @param propertyName - The name of the property to find.
 * @param group - The DzPropertyGroup to find propertyName in.
 * @param traverse - If propertyName cannot be found in group, determines whether to attempt locating propertyName in the DzPropertyGroup siblings of group.
 * @param recurse - If propertyName cannot be found in group, determines whether to attempt locating propertyName in the DzPropertyGroup children of group.
 * @param nameLabelMatch - Whether the name and label of the property must match propertyName.
*/
	findPropertyInGroup(propertyName:String, group:DzPropertyGroup, traverse:Boolean, recurse:Boolean, nameLabelMatch:Boolean):DzProperty {
	
	};
	/**
 * @returns The first property with the given internal name, or NULL.
 * @since 4.11.0.233
 * @param propName - The name of the property to find.
 * @param material - The material to search.
*/
	findPropertyOnMaterial(propName:String, material:DzMaterial):DzProperty {
	
	};
	/**
 * @returns The first property with the given internal name, or NULL.
 * @since 4.11.0.233
 * @param internalName - The internal name of the property to find.
 * @param material - The material to search.
*/
	findPropertyOnMaterialByInternalName(internalName:String, material:DzMaterial):DzProperty {
	
	};
	/**
 * @returns The first property with the given label, or NULL.
 * @since 4.11.0.233
 * @param label - The label of the property to find.
 * @param material - The material to search.
*/
	findPropertyOnMaterialByLabel(label:String, material:DzMaterial):DzProperty {
	
	};
	/**
 * @returns The first property with the given internal name, or NULL.
 * @param propName - The name of the property to find.
 * @param node - The node to search.
*/
	findPropertyOnNode(propName:String, node:DzNode):DzProperty {
	
	};
	/**
 * @returns The first property with the given internal name, or NULL.
 * @param internalName - The internal name of the property to find.
 * @param node - The node to search.
*/
	findPropertyOnNodeByInternalName(internalName:String, node:DzNode):DzProperty {
	
	};
	/**
 * @returns The first property with the given label, or NULL.
 * @param label - The label of the property to find.
 * @param node - The node to search.
*/
	findPropertyOnNodeByLabel(label:String, node:DzNode):DzProperty {
	
	};
	/**
 * @returns The DzMaterial associated with the display of prop.
 * @since 4.11.0.233
 * @param prop - The property in question.
*/
	getDisplayMaterial(prop:DzProperty):DzMaterial {
	
	};
	/**
 * @returns The DzNode associated with the display of prop.
 * @since 4.6.3.45
 * @param prop - The property in question.
*/
	getDisplayNode(prop:DzProperty):DzNode {
	
	};
	/**
 * @returns The ERC controller for controlledProp that has the same property as controllingProp. If either parameter is null, or controlledProp does not have a controller that has the same property as controllingProp, NULL.
 * @param controlledProp - The property whose controller will be returned.
 * @param controllingProp - The property to determine which controller is returned.
*/
	getErcController(controlledProp:DzProperty, controllingProp:DzProperty):DzERCLink {
	
	};
	/**
 * @returns The internal name of prop (or its alias target), or "Unknown".
 * @param prop - The property in question.
*/
	getInternalName(prop:DzProperty):String {
	
	};
	/**
 * @returns The label of prop, or an empty string.
 * @param prop - The property in question.
*/
	getLabel(prop:DzProperty):String {
	
	};
	/**
 * @returns The DzMaterial associated with prop.
 * @since 4.11.0.233
 * @param prop - The property in question.
*/
	getMaterial(prop:DzProperty):DzMaterial {
	
	};
	/**
 * @returns The name of the DzMaterial associated with prop, or "Unknown" if it has no associated DzMaterial.
 * @since 4.11.0.233
 * @param prop - The property in question.
*/
	getMaterialName(prop:DzProperty):String {
	
	};
	/**
 * @returns A string representation of the property type of prop; "General", "Simulation Settings" or "Unknown".
 * @since 4.11.0.233
 * @param prop - The property in question.
*/
	getMaterialType(prop:DzProperty):String {
	
	};
	/**
 * @description Gets the maximum value for prop.
 * @returns If prop is non-null and inherits either DzFloatProperty or DzIntProperty, the max value of prop.
 * @param prop - The property to get the max value for.
*/
	getMax(prop:DzProperty):Number {
	
	};
	/**
 * @description Gets the minimum value for prop.
 * @returns If prop is non-null and inherits either DzFloatProperty or DzIntProperty, the min value of prop.
 * @param prop - The property to get the min value for.
*/
	getMin(prop:DzProperty):Number {
	
	};
	/**
 * @returns The DzNode associated with prop.
 * @param prop - The property in question.
*/
	getNode(prop:DzProperty):DzNode {
	
	};
	/**
 * @returns The name of the DzNode associated with prop, or "Unknown" if it has no associated DzNode.
 * @param prop - The property in question.
*/
	getNodeName(prop:DzProperty):String {
	
	};
	/**
 * @returns A string representation of the property type of prop; "Transform", "General", "Morph", "DFormer", "Poser Joint" or "Unknown".
 * @param prop - The property in question.
*/
	getNodeType(prop:DzProperty):String {
	
	};
	/**
 * @returns All private properties associated with the DzNode that prop is associated with.
 * @since 4.6.3.45
 * @param prop - The property to get the DzNode from.
*/
	getPrivatePropertiesOnNode(prop:DzProperty):Array {
	
	};
	/**
 * @returns All private properties associated with node.
 * @since 4.6.3.45
 * @param node - The node to get the properties from.
*/
	getPrivatePropertiesOnNode(node:DzNode):Array {
	
	};
	/**
 * @returns The properties that are on elem.
 * @since 4.6.3.45
 * @param elem - The DzElement to get the list of properties from.
*/
	getPropertiesOnElement(elem:DzElement):Array {
	
	};
	/**
 * @returns All properties associated with the material that prop is associated with.
 * @since 4.11.0.223
 * @param prop - The property to get the material from.
 * @param includeProviders - Whether or not to include the properties of settings providers.
*/
	getPropertiesOnMaterial(prop:DzProperty, includeProviders:Boolean):Array {
	
	};
	/**
 * @returns All properties associated with the material.
 * @since 4.11.0.223
 * @param material - The material to get the properties from.
 * @param includeProviders - Whether or not to include the properties of settings providers.
*/
	getPropertiesOnMaterial(material:DzMaterial, includeProviders:Boolean):Array {
	
	};
	/**
 * @returns All properties associated with the DzNode that prop is associated with.
 * @since 4.6.3.45
 * @param prop - The property to get the DzNode from.
 * @param includeModifiers - Whether or not to include the properties of DzModifiers.
*/
	getPropertiesOnNode(prop:DzProperty, includeModifiers:Boolean):Array {
	
	};
	/**
 * @returns All properties associated with the node.
 * @since 4.6.3.45
 * @param node - The node to get the properties from.
 * @param includeModifiers - Whether or not to include the properties of DzModifiers.
*/
	getPropertiesOnNode(node:DzNode, includeModifiers:Boolean):Array {
	
	};
	/**
 * @returns All region properties associated with node.
 * @since 4.6.3.45
 * @param node - The node to get the properties from.
*/
	getRegionPropertiesOnNode(node:DzNode):Array {
	
	};
	/**
 * @returns All region properties associated with region.
 * @since 4.6.3.45
 * @param node - The geometryregion_dz to get the properties from.
*/
	getRegionPropertiesRecurse(region:geometryregion_dz):Array {
	
	};
	/**
 * @returns The unique name for the morph.
 * @param node - The DzNode with the DzObject that has the morph_dz.
 * @param name - The name to make unique.
*/
	getUniqueMorphName(node:DzNode, name:String):String {
	
	};
	/**
 * @returns true if the the helper can remove prop, otherwise false.
 * @since 4.6.3.45
 * @param prop - The property to check whether the helper can remove.
*/
	helperCanRemove(prop:DzProperty):Boolean {
	
	};
	/**
 * @returns true if the helper successfully removed the property, otherwise false.
 * @since 4.6.3.45
 * @param prop - The property to remove.
*/
	helperRemoveProperty(prop:DzProperty):Boolean {
	
	};
	/**
 * @returns true if prop inherits DzNumericProperty and its raw and default values are the same, otherwise false.
 * @param prop - The property in question.
*/
	isAtDefaultValue(prop:DzProperty):Boolean {
	
	};
	/**
 * @returns true if prop is controlled by a transform property, otherwise false.
 * @since 4.9.4.86
 * @param prop - The property in question.
 * @param recurse - If true (default), the controller hierarchy is recursed.
*/
	isControlledByTransform(prop:DzProperty, recurse:Boolean):Boolean {
	
	};
	/**
 * @returns The given property (or its alias target) if it's owner is a dformmodifier_dz, otherwise NULL.
 * @param prop - The property in question.
*/
	isDFormModProperty(prop:DzProperty):DzProperty {
	
	};
	/**
 * @returns The given property (or its alias target) if it's owner is a legacyjoint_dz, otherwise NULL.
 * @param prop - The property in question.
*/
	isLegacyJointProperty(prop:DzProperty):DzProperty {
	
	};
	/**
 * @returns true if the given property (or its alias target) is a legacy property (internal name begins with PBMCC or PBMDC), otherwise false.
 * @param prop - The property in question.
*/
	isLegacyProperty(prop:DzProperty):Boolean {
	
	};
	/**
 * @returns The given property (or its alias target) if it's owner is a DzMaterial, otherwise NULL.
 * @since 4.11.0.233
 * @param prop - The property in question.
*/
	isMaterialProperty(prop:DzProperty):DzProperty {
	
	};
	/**
 * @returns The given property (or its alias target) if it's owner is a DzModifier, otherwise NULL.
 * @param prop - The property in question.
*/
	isModifierProperty(prop:DzProperty):DzProperty {
	
	};
	/**
 * @returns The given property (or its alias target) if it's owner is a morph_dz, otherwise NULL.
 * @param prop - The property in question.
*/
	isMorphProperty(prop:DzProperty):DzProperty {
	
	};
	/**
 * @returns The given property (or its alias target) if it's owner is a DzNode, otherwise NULL.
 * @param prop - The property in question.
*/
	isNodeProperty(prop:DzProperty):DzProperty {
	
	};
	/**
 * @returns The given property (or its alias target) if it's owner is a simulationsettingsprovider_dz, otherwise NULL.
 * @since 4.11.0.233
 * @param prop - The property in question.
*/
	isSimulationSettingsProviderProperty(prop:DzProperty):DzProperty {
	
	};
	/**
 * @returns true if the given property is a transform property, otherwise false.
 * @since 4.9.4.86
 * @param prop - The property in question.
*/
	isTransform(prop:DzProperty):Boolean {
	
	};
	/**
 * @returns The given property (or its alias target) if it is a transform property, otherwise NULL.
 * @param prop - The property in question.
*/
	isTransformProperty(prop:DzProperty):DzProperty {
	
	};
	/**
 * @description Attempts to rename prop to name. If the property is a morph property or a DForm modifier property then the modifier is renamed to name. If any other property associated with the node that this property is associated with has the same internal name as name, this method returns false.
 * @returns true if the rename was successful, otherwise false.
 * @param prop - The property to change.
 * @param name - The new internal name for the property.
*/
	setInternalName(prop:DzProperty, name:String):Boolean {
	
	};
	/**
 * @description Sets the maximum value for prop. This method only applies if prop is non-null and inherits either DzFloatProperty or DzIntProperty. Otherwise this method has no effect.
 * @param prop - The property whose maximum value is to be set.
 * @param max - The value to set. If prop inherits DzIntProperty, max is truncated (not rounded).
*/
	setMax(prop:DzProperty, max:Number):void {
	
	};
	/**
 * @description Sets the minimum value for prop. This method only applies if prop is non-null and inherits either DzFloatProperty or DzIntProperty. Otherwise this method has no effect.
 * @param prop - The property whose minimum value is to be set.
 * @param min - The value to set. If prop inherits DzIntProperty, min is truncated (not rounded).
*/
	setMin(prop:DzProperty, min:Number):void {
	
	};
	/**
 * @description Essentially behaves the same as calling both DzSceneHelper.setMin() and DzSceneHelper.setMax().
 * @param prop - The property to set min and max values for.
 * @param min - The new min value for the given property.
 * @param max - The new max value for the given property.
*/
	setMinMax(prop:DzProperty, min:Number, max:Number):void {
	
	};
	/**
 * @description Sets the DzPropertyGroup path (and appropriate geometryregion_dz) for the given property.
 * @param prop - The property to change the path of.
 * @param inPath - The new path for the given property.
*/
	setPropertyPath(prop:DzProperty, inPath:String):DzGeometryregion {
	
	};
	/**
 * @description Sets the name of node to a unique version of name.
 * @param node - The node to set the unique name of.
 * @param name - The name to make unique.
*/
	setUniqueName(node:DzNode, name:String):void {
	
	};

}
/**
 * @classdesc An asset save filter for saving a Scene Subset in the DSON format.
See Also:
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/scenesubsetassetfilter_dz} */
class DzSceneSubsetAssetFilter extends DzAssetFileOutFilter {
	/**
 * @description TODO:
Add description.
 * @constructor
*/
	constructor() {
	
	};

}
/**
 * @classdesc An asset save filter for saving Figure/Prop Assets, or Dynamic Cloth Assets, for each object in the scene, in the DSON format.
See Also:
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/scenesupportassetfilter_dz} */
class DzSceneSupportAssetFilter extends DzSceneAssetFilter {
	/**
 * @description TODO:
Add description.
 * @constructor
*/
	constructor() {
	
	};

}
/**
 * @classdesc TODO:
Add detailed description.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/script_dz} */
class DzScript extends DzBase {
	/**
 * @description ENUMERATOR: If the file extension is .dsb, the file is saved as DAZScriptFile, otherwise as TextScriptFile
*/
	
	static UseExtension;
	/**
 * @description ENUMERATOR: Plain text file - no Unicode support
*/
	
	static TextScriptFile;
	/**
 * @description ENUMERATOR: Binary DAZ file format - supports Unicode characters
*/
	
	static DAZScriptFile;
	/**
 * @description ENUMERATOR: Encrypted Binary DAZ file format - supports Unicode characters
*/
	
	static EncDAZScriptFile;
	/**
 * @description ENUMERATOR: Unknown language.
*/
	
	static Unknown;
	/**
 * @description ENUMERATOR: DAZ Script 1 (QSA) language.
*/
	
	static DAZScript1;
	/**
 * @description ENUMERATOR: DAZ Script 2 (QtScript) language.
*/
	
	static DAZScript2;
	/**
 * @description Default constructor.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Copy Constructor.
 * @param script - The script to copy.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @param filter - The filter to add the binary extensions to.
*/
	static addScriptBinaryExtensionsAsMultipleFilters(filter:DzFileFilter):void {
	
	};
	/**
 * @param filter - The filter to add the binary extensions to.
*/
	static addScriptBinaryExtensionsToFilter(filter:DzFileFilter):void {
	
	};
	/**
 * @param filter - The filter to add the open extensions to.
*/
	static addScriptOpenExtensionsAsMultipleFilters(filter:DzFileFilter):void {
	
	};
	/**
 * @param filter - The filter to add the open extensions to.
*/
	static addScriptOpenExtensionsToFilter(filter:DzFileFilter):void {
	
	};
	/**
 * @param filter - The filter to add the save extensions to.
*/
	static addScriptSaveExtensionsAsMultipleFilters(filter:DzFileFilter):void {
	
	};
	/**
 * @param filter - The filter to add the save extensions to.
*/
	static addScriptSaveExtensionsToFilter(filter:DzFileFilter):void {
	
	};
	/**
 * @param filter - The filter to add the plain text extensions to.
 * @param includeDeprecated - Whether or not to include the deprecated extension(s).
*/
	static addScriptTextExtensionsAsMultipleFilters(filter:DzFileFilter, includeDeprecated:Boolean):void {
	
	};
	/**
 * @param filter - The filter to add the plain text extensions to.
 * @param includeDeprecated - Whether or not to include the deprecated extension(s).
*/
	static addScriptTextExtensionsToFilter(filter:DzFileFilter, includeDeprecated:Boolean):void {
	
	};
	/**
 * @description This function is provided as a quick method of evaluating DAZ Script statements without needing to create a DAZ Script object.
 * @returns The value returned from the script's execution.
 * @param code - The text string to evaluate as a script.
 * @param context - The QObject instance (if any) that will provide the script's context.
*/
	static evaluate(code:String, context:QObject):Object {
	
	};
	/**
 * @returns A list of the script file extensions supported by the application.
*/
	getScriptExtensions():Array {
	
	};
	/**
 * @returns The path of the file, with extension, of the script found. Otherwise, an empty String.
 * @param filenameWithoutExtension - The path to the file, minus the '.' and the extension.
*/
	static getScriptFile(filenameWithoutExtension:String):String {
	
	};
	/**
 * @returns true if extension is a supported binary script extension, otherwise false.
 * @param extension - The file extension (minus the '.') to check.
*/
	static isScriptBinaryExtension(extension:String):Boolean {
	
	};
	/**
 * @returns true if filename ends with a supported binary script extension, otherwise false.
 * @param filename - The name of the file to check.
*/
	static isScriptBinaryFile(filename:String):Boolean {
	
	};
	/**
 * @returns true if extension is a supported script extension, otherwise false.
 * @param extension - The file extension (minus the '.') to check.
*/
	static isScriptExtension(extension:String):Boolean {
	
	};
	/**
 * @returns true if filename ends with a supported script extension, otherwise false.
 * @param filename - The name of the file to check.
*/
	static isScriptFile(filename:String):Boolean {
	
	};
	/**
 * @returns true if extension is a supported [ascii] plain text script extension, otherwise false.
 * @param extension - The file extension (minus the '.') to check.
*/
	static isScriptTextExtension(extension:String):Boolean {
	
	};
	/**
 * @returns true if filename ends with a supported [ascii] plain text script extension, otherwise false.
 * @param filename - The name of the file to check.
*/
	static isScriptTextFile(filename:String):Boolean {
	
	};
	/**
 * @returns A converted version of a string (which may contain special characters) that would be legal as a variable name in script. If the string contains no special characters, the result will be identical to the input.
*/
	static legalizeName(str:String):String {
	
	};
	/**
 * @description Appends the given code to the end of the current script.
 * @param code - The text to append to the current script.
*/
	addCode(code:String):void {
	
	};
	/**
 * @description Appends the given string and a newline character to the script.
 * @param line - The text to add to the script.
 * @param indentLevel - The number of tab characters to insert in front of the line.
*/
	addLine(line:String, indentLevel:Number):void {
	
	};
	/**
 * @description Appends the given code to the end of the current script.
 * @param code - The text to append to the current script.
 * @param indentLevel - The number of tab characters to insert in front of each line.
*/
	addLines(code:String, indentLevel:Number):void {
	
	};
	/**
 * @description Calls a function in the script.
 * @returns true if the function was called successfully, false if there was an error.
 * @param function - The name of the function to call.
 * @param args - A list of arguments to pass to the function.
 * @attention The entire script is evaluated before the function call is made.
*/
	call(function:String, args:Array):Boolean {
	
	};
	/**
 * @description Checks the syntax of the script for errors using the current interpreter.
 * @returns true if the syntax is valid, otherwise false.
*/
	checkSyntax():Boolean {
	
	};
	/**
 * @description Clears any code in the current script, and clears the encryption state if the script was read from an encrypted file.
*/
	clear():void {
	
	};
	/**
 * @description Converts the script to DAZ Script 2 syntax.
*/
	convertToDAZScript2():Boolean {
	
	};
	/**
 * @returns The line number that the last error occurred on.
*/
	errorLine():Number {
	
	};
	/**
 * @returns The last error message gathered from a call to execute(). An empty string if no error has been encountered for this script.
*/
	errorMessage():String {
	
	};
	/**
 * @description Execute the script.
 * @returns true if the script was executed successfully, false if there was an error.
 * @attention This can be called from a thread outside of the GUI thread, however the script will not be executed until the GUI thread processes events. It returns when execution is complete.
*/
	execute():Boolean {
	
	};
	/**
 * @description Execute the script with an argument list.
 * @returns true if the script was executed successfully, false if there was an error.
 * @param args - The list of arguments to pass to the script.
 * @attention This can be called from a thread outside of the GUI thread, however the script will not be executed until the GUI thread processes events. It returns when execution is complete.
*/
	execute(args:Array):Boolean {
	
	};
	/**
 * @returns The author of this script if it was loaded from a file that provides authorship information.
*/
	getAuthor():DzAuthor {
	
	};
	/**
 * @returns The code of the current script.
*/
	getCode():String {
	
	};
	/**
 * @returns The name and path of the file associated with this script. An empty string is returned if this script is not associated with a file.
*/
	getFilename():String {
	
	};
	/**
 * @returns true if the last execution was successful, otherwise false.
*/
	getLastStatus():Boolean {
	
	};
	/**
 * @returns An enumerated value indicating the scripting language of the script.
*/
	getScriptLanguage():ScriptLanguage {
	
	};
	/**
 * @returns A string describing the kind of script that this script is
*/
	getScriptType():String {
	
	};
	/**
 * @returns The version of DAZ Studio that this script was saved from. The current version if the script was not loaded from a file.
*/
	getScriptVersion():DzVersion {
	
	};
	/**
 * @returns true if the same context is used between uses of call(); otherwise false (default).
*/
	getShouldReuseInterpreter():Boolean {
	
	};
	/**
 * @returns true if the script is empty; otherwise false.
*/
	isEmpty():Boolean {
	
	};
	/**
 * @returns true if the contents of the script are encrypted (i.e. read from an encrypted file); otherwise false.
 * @attention If the script is encrypted, getCode() returns '[Content Encrypted]', addLine(), addCode(), and setCode() have no effect, saveToFile() and saveFile() save nothing and will return DZ_OPERATION_FAILED_ERROR. Calling clear() will clear the encryption state and the code from the script.
*/
	isEncrypted():Boolean {
	
	};
	/**
 * @description Loads the script from a file.
 * @returns true if the script was successfully loaded, otherwise false.
 * @param filename - The path of the script file to load.
 * @param convert - If true (default), converts the file to DAZ Script 2.
*/
	loadFromFile(filename:String, convert:Boolean):Boolean {
	
	};
	/**
 * @description Sets the script to be encrypted.
 * @attention This process is not reversible!!! Once a script has been encrypted its original text cannot be extracted. Encrypted scripts can not be edited or modified.
*/
	makeEncrypted():void {
	
	};
	/**
 * @returns The result of the last script execution.
*/
	result():Object {
	
	};
	/**
 * @description Save the script to a file.
 * @returns DZ_NO_ERROR on success, otherwise an appropriate error code.
 * @since 4.11.0.129
 * @param filename - The filename of the file to save to.
 * @param mode - The type of file to save.
 * @param filetype - The filetype that is saved as part of the file information.
 * @param version - The version of the file to be written.
 * @attention It is the developer's responsibility to ensure that the data being written to file is compatible with the version specified.
*/
	saveFile(filename:String, mode:ScriptFileMode, filetype:String, version:DzVersion):DzError {
	
	};
	/**
 * @description Save the script to a file.
 * @since 4.11.0.129
 * @param filename - The filename of the file to save to.
*/
	saveFile(filename:String):DzError {
	
	};
	/**
 * @description Replaces the existing code of the script with code.
 * @param code - The new text for the script.
*/
	setCode(code:String):void {
	
	};
	/**
 * @description Sets whether the same context is used between uses of call().
 * @param onOff - If true, the same context is used between calls. If false a new context is used for each call.
 * @attention Use of this function clears the context, regardless of whether onOff is set to true or false.
*/
	setReuseInterpreter(onoff:Boolean):void {
	
	};
	/**
 * @returns The stack trace for the last time an error was reported during a call to execute(). An empty list if no error has been encountered.
*/
	stackTrace():Array {
	
	};
	/**
 * @description Access to whether or not the script was converted from the enumerated value specified.
 * @returns true if the script was converted
*/
	wasConverted(language:DzScript.ScriptLanguage):Boolean {
	
	};
	/**
 * @description Deprecated
*/
	saveToFile(filename:String, mode:ScriptFileMode, filetype:String):DzError {
	
	};

}
/**
 * @classdesc Since:
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/scriptaction_dz} */
class DzScriptAction extends DzAction {

}
/**
 * @classdesc All DzScripts are executed in the context of a DzScriptContext instance - therefore, all the properties and methods on DzScriptContext are accessible to a script as global functions and variables. It will usually not be necessary for a script to create or use this class directly.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/scriptcontext_dz} */
class DzScriptContext extends DzBase {
	/**
 * @description Accept and finish a hold on the undo stack started by calling beginUndo().
*/
	acceptUndo(caption:String):void {
	
	};
	/**
 * @returns true if there is an active background progress operation in the application, otherwise false.
*/
	backgroundProgressIsActive():Boolean {
	
	};
	/**
 * @returns true if the user canceled the current background progress operation in the application, otherwise false.
*/
	backgroundProgressIsCancelled():Boolean {
	
	};
	/**
 * @description Captures a view of scene seletion.
 * @since 4.9.4.109
*/
	beginNodeSelectionHold():void {
	
	};
	/**
 * @description Starts a hold on the undo stack.
*/
	beginUndo():void {
	
	};
	/**
 * @description Cancel a hold on the undo stack started by calling beginUndo().
*/
	cancelUndo():void {
	
	};
	/**
 * @description Clears the application-standard busy cursor and returns the mouse cursor to the previous cursor. Match every call to setBusyCursor() with a call to this function.
*/
	clearBusyCursor():void {
	
	};
	/**
 * @description Clears all selection holds without restoring the selection.
 * @since 4.9.4.109
*/
	clearNodeSelectionHolds():void {
	
	};
	/**
 * @description Clears the override cursor stack.
 * @since 4.6.4.30
*/
	clearOverrideCursor():void {
	
	};
	/**
 * @description Clears the undo stack.
*/
	clearUndoStack():void {
	
	};
	/**
 * @description Removes a scene node selection hold on scene selection without restoring the selection.
 * @since 4.9.4.109
*/
	dropNodeSelectionHold():void {
	
	};
	/**
 * @description Drops a hold on the undo stack started by calling beginUndo().
*/
	dropUndo():void {
	
	};
	/**
 * @description Ends the current background progress operation in the application from script.
*/
	finishBackgroundProgress():void {
	
	};
	/**
 * @description Ends the current progress operation in the application from script.
*/
	finishProgress():void {
	
	};
	/**
 * @returns The list of arguments for the current script execution.
*/
	getArguments():Array {
	
	};
	/**
 * @description This function converts an error code into a string message.
 * @returns A user-readable message that describes the error represented by the error code.
*/
	getErrorMessage(errCode:Number):String {
	
	};
	/**
 * @returns The QObject parent of obj.
*/
	getObjectParent(obj:QObject):QObject {
	
	};
	/**
 * @returns The author of the current script (if any), otheriwse and empty string.
*/
	getScriptAuthor():DzAuthor {
	
	};
	/**
 * @returns The file name of the current script (if any), otherwise an empty string.
*/
	getScriptFileName():String {
	
	};
	/**
 * @returns The file type that this script was saved out as.
*/
	getScriptType():String {
	
	};
	/**
 * @returns The version of the current script (if any).
*/
	getScriptVersionString():String {
	
	};
	/**
 * @description This function allows a script to test if two QObject-derived variables point to the same instance.
 * @returns true if the pointers point to the same object, otherwise false.
*/
	pointersAreEqual(ptr1:QObject, ptr2:QObject):Boolean {
	
	};
	/**
 * @description Pauses execution of the script and allows the GUI thread time to process events.
*/
	processEvents():void {
	
	};
	/**
 * @returns true if there is an active progress operation in the application, otherwise false.
*/
	progressIsActive():Boolean {
	
	};
	/**
 * @returns true if the user cancelled the current progress operation in the application, otherwise false.
*/
	progressIsCancelled():Boolean {
	
	};
	/**
 * @description Restores the scene selection to the view at last call to beginNodeSelectionHold().
 * @since 4.9.4.109
*/
	restoreNodeSelectionHold():void {
	
	};
	/**
 * @description Sets the application-standard busy cursor. Match every call to this function with a call to clearBusyCursor() to restore the previous cursor.
*/
	setBusyCursor():void {
	
	};
	/**
 * @description Pauses the script for the specified number of milliseconds without blocking the application event loop.
 * @since 4.8.0.45
*/
	sleep(milliseconds:Number):void {
	
	};
	/**
 * @description Starts a background progress operation in the application from script.
*/
	startBackgroundProgress(info:String, totalSteps:Number, isCancellable:Boolean):void {
	
	};
	/**
 * @description Starts a progress operation in the application from script.
*/
	startProgress(info:String, totalSteps:Number, isCancellable:Boolean, showTimeElapsed:Boolean):void {
	
	};
	/**
 * @description Steps the current background progress operation in the application from script.
*/
	stepBackgroundProgress(numSteps:Number):void {
	
	};
	/**
 * @description Steps the current progress operation in the application from script.
*/
	stepProgress(numSteps:Number):void {
	
	};
	/**
 * @description Updates the background current progress operation in the application from script.
*/
	updateBackgroundProgress(position:Number):void {
	
	};
	/**
 * @description Updates the current progress operation in the application from script.
*/
	updateProgress(position:Number):void {
	
	};
	/**
 * @description Deprecated
*/
	shiftPressed():Boolean {
	
	};
	/**
 * @description Deprecated
*/
	ctrlPressed():Boolean {
	
	};
	/**
 * @description Deprecated
*/
	getDesktop(deprecated):QDesktopWidget (deprecated) {
	
	};

}
/**
 * @classdesc Implements a script-able RenderMan interface for the scene to render itself through the 3Delight renderer.
See Also:
Attention:@attention Attention:
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/scriptedrenderer_dz} */
class DzScriptedRenderer extends DzRenderer {
	/**
 * @description Default Constructor.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Builds an environment space transform that can be used by shaders to account for differences between the application and the 3Delight render engine.
 * @since 4.10.0.55
*/
	buildEnvironmentSpaceTransform():void {
	
	};
	/**
 * @description Sets up the camera for the pass.
 * @param camera - The camera to use.
 * @param width - The width of the render.
 * @param height - The height of the render.
*/
	cameraProject(camera:DzCamera, width:Number, height:Number):void {
	
	};
	/**
 * @returns true if the renderer should use the call to RiSurface, RiDisplace, RiLight, or RiAreaLight, otherwise false.
*/
	continueAfterPreProcess():Boolean {
	
	};
	/**
 * @description Creates a light in the stream.
 * @param light - The light to create.
 * @param shadowMap - The shadow map for the light.
*/
	createLight(light:DzLight, shadowMap:String):void {
	
	};
	/**
 * @description Deletes a list of files.
 * @param files - A list of the file paths to delete.
*/
	deleteFiles(files:Array):void {
	
	};
	/**
 * @description Causes the renderer to call the same display as the standard 3Delight renderer.
*/
	doDefaultDisplay():void {
	
	};
	/**
 * @returns The name of the generated shadow map.
 * @param options - The render options for the shadow maps.
 * @param camera - The camera to use for the shadow pass.
 * @param light - The light to generate shadow map for.
 * @param dir - The directory to generate the shadow map in.
 * @param reuse - If true and a shadow map already exists, it is reused.
*/
	doDefaultShadowPass(options:DzRenderOptions, camera:DzCamera, light:DzLight, dir:String, reuse:Boolean):String {
	
	};
	/**
 * @returns The list of names for the generated shadow maps.
 * @param options - The render options for the shadow maps.
 * @param camera - The camera to generate the shadow map for.
 * @param dir - The directory to generate the shadow maps in.
 * @param reuse - If true and a shadow map exists by the the same label of a light exists, the shadow map is reused instead of being generated.
*/
	doDefaultShadowPass(options:DzRenderOptions, camera:DzCamera, dir:String, reuse:Boolean):Array {
	
	};
	/**
 * @description Cleans up after doDefaultShadowPassPrep().
 * @param options - The render options for the pass.
 * @param camera - The camera for the shadow pass.
 * @param light - The light the shadow map was generated for.
 * @attention This call must be proceeded by a call to doDefaultShadowPassPrep().
*/
	doDefaultShadowPassEnd(options:DzRenderOptions, camera:DzCamera, light:DzLight):void {
	
	};
	/**
 * @returns The name of the shadow map for the light.
 * @param options - The render options for the pass.
 * @param camera - The camera for the shadow pass.
 * @param light - The light to generate shadow map for.
 * @param dir - The directory to put the shadow map in.
 * @param reuse - If true and the map already exists, it is reused.
 * @attention This call must be followed by a call to doDefaultShadowPassEnd().
*/
	doDefaultShadowPassPrep(options:DzRenderOptions, camera:DzCamera, light:DzLight, dir:String, reuse:Boolean):String {
	
	};
	/**
 * @description Script implementation of the RiSpec RiShutter() function.
 * @param opts - The render options for the shutter; whether or not motion blur is enabled and the amount of blur if enabled.
*/
	doShutter(opts:DzRenderOptions):void {
	
	};
	/**
 * @description Sets up the camera for the pass, ensuring all render-able objects are in view.
 * @param camera - The camera to use.
 * @param width - The width of the render.
 * @param height - The height of the render.
*/
	fullSceneCameraProject(camera:DzCamera, width:Number, height:Number):void {
	
	};
	/**
 * @returns The default search path for shaders and DSO shadeops, as a string in the format expected by 3Delight (which is mostly a list of paths separated by semicolons). The getShaderSearchPaths() method is called to get the list of paths to use.
*/
	getDefaultShaderSearchPath():String {
	
	};
	/**
 * @returns The path to the script that is run in order to define the renderer.
*/
	getDefinitionFile():String {
	
	};
	/**
 * @returns The path to the script that is run in the Displacement pre-process step.
*/
	getDisplacementPreProcessScript():String {
	
	};
	/**
 * @returns The current render handler (if any), otherwise NULL.
 * @attention This call is only valid during a render.
*/
	getHandler():DzRenderHandler {
	
	};
	/**
 * @returns The light in the render list at index (if valid), otherwise NULL.
 * @param index - The index of the light to get.
*/
	getLight(index:Number):DzLight {
	
	};
	/**
 * @returns The number of lights to render.
*/
	getLightCount():Number {
	
	};
	/**
 * @returns The path to the script that is run in the Light pre-process step.
*/
	getLightPreProcessScript():String {
	
	};
	/**
 * @returns The list of lights to render.
*/
	getLightsToRender():Array {
	
	};
	/**
 * @returns The node in the render list at index (if valid), otherwise NULL.
 * @param index - The index of the node to get.
*/
	getNode(index:Number):DzNode {
	
	};
	/**
 * @returns The number of nodes to render.
*/
	getNodeCount():Number {
	
	};
	/**
 * @returns The list of nodes to render.
*/
	getNodesToRender():Array {
	
	};
	/**
 * @returns The number of light handles.
 * @attention These handles are used in the riIlluminate() call to turn lights on/off.
*/
	getNumIlluminateHandels():Number {
	
	};
	/**
 * @returns The element that holds the properties for this scripted render pass.
 * @attention When applying a new pass to the renderer, the properties on this element should be cleared and the properties to use during the render pass should be added.
*/
	getPropertyHolder():DzElement {
	
	};
	/**
 * @returns The path of the script that controls the rendering process.
*/
	getRenderScript():String {
	
	};
	/**
 * @returns The path to the script that is run in the Surface pre-process step.
*/
	getSurfacePreProcessScript():String {
	
	};
	/**
 * @description Prepares motion samples for all nodes to render.
*/
	prepareMotionSamples():void {
	
	};
	/**
 * @description Prepares motion samples for a list of nodes.
 * @param nodes - The list of nodes to prepare motion samples for.
*/
	prepareMotionSamples(nodes:Array):void {
	
	};
	/**
 * @description Prepares motion samples for node.
 * @param node - The node to prepare motion samples for.
*/
	prepareNodeMotionSamples(node:DzNode):void {
	
	};
	/**
 * @description Removes a light from the render list.
 * @param index - The index of the light to remove.
*/
	removeLight(index:Number):void {
	
	};
	/**
 * @description Removes a node from the render list.
 * @param index - The index of the node to remove.
*/
	removeNode(index:Number):void {
	
	};
	/**
 * @description Renders the backdrop for the scene.
 * @param backdrop - The backdrop for the scene.
 * @param width - The width of the render.
 * @param height - The height of the render.
*/
	renderBackDrop(backdrop:DzBackdrop, width:Number, height:Number):void {
	
	};
	/**
 * @description Adds a node to the list of nodes to be rendered.
 * @param node - The node to render.
*/
	renderNode(node:DzNode):void {
	
	};
	/**
 * @description Adds a node to the list of nodes to be rendered.
 * @param nodes - The list of nodes to render.
*/
	renderNodes(nodes:Array):void {
	
	};
	/**
 * @description Script implementation of the RiSpec RiAreaLightSource() function.
 * @returns The light handle index for this light source
 * @param name - The name of the light shader.
 * @param tokens - A list of token names passed to the shader.
 * @param params - A list of corresponding values for tokens.
*/
	riAreaLightSource(name:String, tokens:Array, params:Array):Number {
	
	};
	/**
 * @description Script implementation of the RiSpec RiAtmosphere() function.
 * @param name - The name of the volume shader.
 * @param tokens - A list of token names passed to the shader.
 * @param params - A list of corresponding values for tokens.
*/
	riAtmosphere(name:String, tokens:Array, params:Array):void {
	
	};
	/**
 * @description Script implementation of the RiSpec RiAttribute() function.
 * @param name - The name of the attribute to set.
 * @param tokens - A list of parameter names for the attribute.
 * @param params - A list of corresponding values for tokens.
*/
	riAttribute(name:String, tokens:Array, params:Array):void {
	
	};
	/**
 * @description Script implementation of the RiSpec RiAttributeBegin() function.
*/
	riAttributeBegin():void {
	
	};
	/**
 * @description Script implementation of the RiSpec RiAttributeEnd() function.
*/
	riAttributeEnd():void {
	
	};
	/**
 * @description Script implementation of the RiSpec RiBegin() function.
 * @param ribPath -
*/
	riBegin(ribPath:String):void {
	
	};
	/**
 * @description Script implementation of the RiSpec RiCamera() function.
 * @param camera - The name of the camera.
 * @param tokens - A list of token names passed to the camera.
 * @param params - A list of corresponding values for tokens.
*/
	riCamera(camera:String, tokens:Array, params:Array):void {
	
	};
	/**
 * @description Script implementation of the RiSpec RiClipping() function.
 * @param hither -
 * @param yon -
*/
	riClipping(hither:Number, yon:Number):void {
	
	};
	/**
 * @description Script implementation of the RiSpec RiClipping() function.
 * @param x -
 * @param y -
 * @param z -
 * @param nx -
 * @param ny -
 * @param nz -
*/
	riClippingPlane(x:Number, y:Number, z:Number, nx:Number, ny:Number, nz:Number):void {
	
	};
	/**
 * @description Script implementation of the RiSpec RiColor() function.
 * @param Cs - The color to set.
*/
	riColor(Cs:Color):void {
	
	};
	/**
 * @description Script implementation of the RiSpec RiConcatTransform() function.
 * @param transform - The transform to concatenate.
*/
	riConcatTransform(transform:DzMatrix4):void {
	
	};
	/**
 * @description Script implementation of the RiSpec RiCoordinateSystem() function.
 * @param space - The name for the coordinate system.
*/
	riCoordinateSystem(space:String):void {
	
	};
	/**
 * @description Script implementation of the RiSpec RiCoordSysTransform() function.
 * @param space - The name for the coordinate system.
*/
	riCoordSysTransform(space:String):void {
	
	};
	/**
 * @description Script implementation of the RiSpec RiCropWindow() function.
 * @param xmin -
 * @param xmax -
 * @param ymin -
 * @param ymax -
*/
	riCropWindow(xmin:Number, xmax:Number, ymin:Number, ymax:Number):void {
	
	};
	/**
 * @description Script implementation of the RiSpec RiDeclare() function.
 * @param name -
 * @param declaration -
*/
	riDeclare(name:String, declaration:String):void {
	
	};
	/**
 * @description Script implementation of the RiSpec RiDepthOfField() function.
 * @param fstop -
 * @param focallength -
 * @param focaldistance -
*/
	riDepthOfField(fstop:Number, focallength:Number, focaldistance:Number):void {
	
	};
	/**
 * @description Script implementation of the RiSpec RiDetailRange() function.
 * @param minvis -
 * @param lowtran -
 * @param uptran -
 * @param maxvis -
*/
	riDetailRange(minvis:Number, lowtran:Number, uptran:Number, maxvis:Number):void {
	
	};
	/**
 * @description Script implementation of the RiSpec RiDisplacement() function.
 * @param name - The name of the displacement shader.
 * @param tokens - A list of token names passed to the shader.
 * @param params - A list of corresponding values for tokens.
*/
	riDisplacement(name:String, tokens:Array, params:Array):void {
	
	};
	/**
 * @description Script implementation of the RiSpec RiDisplay() function.
 * @param name - The name of the display.
 * @param type - The type of the display.
 * @param mode - The mode of the display.
 * @param tokens - A list of token names passed to the display.
 * @param params - A list of corresponding values for tokens.
*/
	riDisplay(name:String, type:String, mode:String, tokens:Array, params:Array):void {
	
	};
	/**
 * @description Script implementation of the RiSpec RiDisplayChannel() function.
 * @param name - The name of the channel.
 * @param tokens - A list of token names passed to the channel.
 * @param params - A list of corresponding values for tokens.
*/
	riDisplayChannel(channel:String, tokens:Array, params:Array):void {
	
	};
	/**
 * @description Script implementation of the RiSpec RiElse() function.
*/
	riElse():void {
	
	};
	/**
 * @description Script implementation of the RiSpec RiElseIf() function.
 * @param expression - The expression for the condition.
 * @param tokens - A list of token names.
 * @param params - A list of corresponding values for tokens.
*/
	riElseIf(expression:String, tokens:Array, params:Array):void {
	
	};
	/**
 * @description Attempts to finish the render.
 * @param message - The message to display in the progress dialog.
*/
	riEndWorld(message:String):void {
	
	};
	/**
 * @description Script implementation of the RiSpec RiExposure() function.
 * @param gain - The gain value to set.
 * @param gamma - The gamma value to set.
*/
	riExposure(gain:Number, gamma:Number):void {
	
	};
	/**
 * @description Script implementation of the RiSpec RiExterior() function.
 * @param name - The name of the volume shader.
 * @param tokens - A list of token names passed to the shader.
 * @param params - A list of corresponding values for tokens.
*/
	riExterior(name:String, tokens:Array, params:Array):void {
	
	};
	/**
 * @description Script implementation of the RiSpec RiFormat() function.
 * @param xres - The horizontal resolution of the image.
 * @param yres - The vertical resolution of the image.
 * @param aspect - The ratio of the width to the height of a single pixel.
*/
	riFormat(xres:Number, yres:Number, aspect:Number):void {
	
	};
	/**
 * @description Script implementation of the RiSpec RiFrameAspectRatio() function.
 * @param aspect - The ratio of the width to the height of the desired image.
*/
	riFrameAspectRatio(aspect:Number):void {
	
	};
	/**
 * @description Script implementation of the RiSpec RiGeometricApproximation() function.
 * @param type -
 * @param value -
*/
	riGeometricApproximation(type:String, value:Number):void {
	
	};
	/**
 * @description Script implementation of the RiSpec RiHider() function.
 * @param type - The type of the hider.
 * @param tokens - A list of token names passed to the hider.
 * @param params - A list of corresponding values for tokens.
*/
	riHider(type:String, tokens:Array, params:Array):void {
	
	};
	/**
 * @description Script implementation of the RiSpec RiIdentity() function.
*/
	riIdentity():void {
	
	};
	/**
 * @description Script implementation of the RiSpec RiIfBegin() function.
 * @param expression - The expression for the condition.
 * @param tokens - A list of token names passed to the shader.
 * @param params - A list of corresponding values for tokens.
*/
	riIfBegin(expression:String, tokens:Array, params:Array):void {
	
	};
	/**
 * @description Script implementation of the RiSpec RiIfEnd() function.
*/
	riIfEnd():void {
	
	};
	/**
 * @description Script implementation of the RiSpec RiIlluminate() function.
 * @param light - The index of the light in the list.
 * @param onOff - If true, adds the light to the list. If false, removes the light from the list.
*/
	riIlluminate(light:Number, onOff:Boolean):void {
	
	};
	/**
 * @description Script implementation of the RiSpec RiImager() function.
 * @param name - The name of the imager shader.
 * @param tokens - A list of token names passed to the shader.
 * @param params - A list of corresponding values for tokens.
*/
	riImager(name:String, tokens:Array, params:Array):void {
	
	};
	/**
 * @description Script implementation of the RiSpec RiInterior() function.
 * @param name - The name of the volume shader.
 * @param tokens - A list of token names passed to the shader.
 * @param params - A list of corresponding values for tokens.
*/
	riInterior(name:String, tokens:Array, params:Array):void {
	
	};
	/**
 * @description Script implementation of the RiSpec RiLightSource() function.
 * @returns The light handle index for this light source
 * @param name - The name of the light shader.
 * @param tokens - A list of token names passed to the shader.
 * @param params - A list of corresponding values for tokens.
*/
	riLightSource(name:String, tokens:Array, params:Array):Number {
	
	};
	/**
 * @description Script implementation of the RiSpec RiMakeBump() function.
 * @param pic -
 * @param tex -
 * @param swrap -
 * @param twrap -
 * @param filterType -
 * @param swidth -
 * @param twidth -
 * @param tokens - A list of token names passed to the shader.
 * @param params - A list of corresponding values for tokens.
*/
	riMakeBump(pic:String, tex:String, swrap:String, twrap:String, filterType:Number, swidth:Number, twidth:Number, tokens:Array, params:Array):void {
	
	};
	/**
 * @description Script implementation of the RiSpec RiMakeCubeFaceEnvironment() function.
 * @param px -
 * @param nx -
 * @param py -
 * @param ny -
 * @param pz -
 * @param nz -
 * @param tex -
 * @param fov -
 * @param filterType -
 * @param swidth -
 * @param twidth -
 * @param tokens - A list of token names passed to the shader.
 * @param params - A list of corresponding values for tokens.
*/
	riMakeCubeFaceEnvironment(px:String, nx:String, py:String, ny:String, pz:String, nz:String, tex:String, fov:Number, filterType:Number, swidth:Number, twidth:Number, tokens:Array, params:Array):void {
	
	};
	/**
 * @description Script implementation of the RiSpec RiMakeLatLongEnvironment() function.
 * @param pic -
 * @param tex -
 * @param filterType -
 * @param swidth -
 * @param twidth -
 * @param tokens - A list of token names passed to the shader.
 * @param params - A list of corresponding values for tokens.
*/
	riMakeLatLongEnvironment(pic:String, tex:String, filterType:Number, swidth:Number, twidth:Number, tokens:Array, params:Array):void {
	
	};
	/**
 * @description Script implementation of the RiSpec RiMakeShadow() function.
 * @param pic -
 * @param tex -
 * @param tokens - A list of token names passed to the shader.
 * @param params - A list of corresponding values for tokens.
*/
	riMakeShadow(pic:String, tex:String, tokens:Array, params:Array):void {
	
	};
	/**
 * @description Script implementation of the RiSpec RiMakeTexture() function.
 * @param pic -
 * @param tex -
 * @param swrap -
 * @param twrap -
 * @param filterType -
 * @param swidth -
 * @param twidth -
 * @param tokens - A list of token names passed to the shader.
 * @param params - A list of corresponding values for tokens.
*/
	riMakeTexture(pic:String, tex:String, swrap:String, twrap:String, filterType:Number, swidth:Number, twidth:Number, tokens:Array, params:Array):void {
	
	};
	/**
 * @description Script implementation of the RiSpec RiMatte() function.
 * @param onOff -
*/
	riMatte(onoff:Boolean):void {
	
	};
	/**
 * @description Script implementation of the RiSpec RiMultiplyShadingRate() function.
 * @param ratemultiplier -
*/
	riMultiplyShadingRate(ratemultiplier:Number):void {
	
	};
	/**
 * @description Script implementation of the RiSpec RiOpacity() function.
 * @param Os - The color to set.
*/
	riOpacity(Os:Color):void {
	
	};
	/**
 * @description Script implementation of the RiSpec RiOption() function.
 * @param type - The name of the option.
 * @param tokens - A list of token names passed to the option.
 * @param params - A list of corresponding values for tokens.
*/
	riOption(name:String, tokens:Array, params:Array):void {
	
	};
	/**
 * @description Script implementation of the RiSpec RiOrientation() function.
 * @param orientation -
*/
	riOrientation(orientation:String):void {
	
	};
	/**
 * @description Script implementation of the RiSpec RiPerspective() function.
 * @param fov - The full horizontal field of view angle.
*/
	riPerspective(fov:Number):void {
	
	};
	/**
 * @description Script implementation of the RiSpec RiPixelFilter() function.
 * @param filterType -
 * @param xwidth -
 * @param ywidth -
*/
	riPixelFilter(filterType:Number, xwidth:Number, ywidth:Number):void {
	
	};
	/**
 * @description Script implementation of the RiSpec RiPixelSamples() function.
 * @param xsamples -
 * @param ysamples -
*/
	riPixelSamples(xsamples:Number, ysamples:Number):void {
	
	};
	/**
 * @description Script implementation of the RiSpec RiPixelVariance() function.
 * @param variation -
*/
	riPixelVariance(variation:Number):void {
	
	};
	/**
 * @description Script implementation of the RiSpec RiProjection() function.
 * @param name - The name of the projection.
 * @param tokens - A list of token names passed to the projection.
 * @param params - A list of corresponding values for tokens.
*/
	riProjection(name:String, tokens:Array, params:Array):void {
	
	};
	/**
 * @description Script implementation of the RiSpec RiWQuantize() function.
 * @param type -
 * @param one -
 * @param qmin -
 * @param qmax -
 * @param ampl -
*/
	riQuantize(type:String, one:Number, qmin:Number, qmax:Number, ampl:Number):void {
	
	};
	/**
 * @description Script implementation of the RiSpec RiRelativeDetail() function.
 * @param relativedetail -
*/
	riRelativeDetail(relativedetail:Number):void {
	
	};
	/**
 * @description Script implementation of the RiSpec RiReverseOrientation() function.
*/
	riReverseOrientation():void {
	
	};
	/**
 * @description Script implementation of the RiSpec RiRotate() function.
 * @param angle -
 * @param dx -
 * @param dy -
 * @param dz -
*/
	riRotate(angle:Number, dx:Number, dy:Number, dz:Number):void {
	
	};
	/**
 * @description Script implementation of the RiSpec RiScale() function.
 * @param dx -
 * @param dy -
 * @param dz -
*/
	riScale(dx:Number, dy:Number, dz:Number):void {
	
	};
	/**
 * @description Script implementation of the RiSpec DDiScopedCoordinateSystem() function.
 * @param space - The name for the coordinate system.
*/
	riScopedCoordinateSystem(space:String):void {
	
	};
	/**
 * @description Script implementation of the RiSpec RiScreenWindow() function.
 * @param left -
 * @param right -
 * @param bot -
 * @param top -
*/
	riScreenWindow(left:Number, right:Number, bot:Number, top:Number):void {
	
	};
	/**
 * @description Script implementation of the RiSpec RiShader() function.
 * @param name - The name of the shader.
 * @param handle -
 * @param tokens - A list of token names passed to the shader.
 * @param params - A list of corresponding values for tokens.
*/
	riShader(name:String, handle:String, tokens:Array, params:Array):void {
	
	};
	/**
 * @description Script implementation of the RiSpec RiShadingInterpolation() function.
 * @param type -
*/
	riShadingInterpolation(type:String):void {
	
	};
	/**
 * @description Script implementation of the RiSpec RiShadingRate() function.
 * @param size -
*/
	riShadingRate(size:Number):void {
	
	};
	/**
 * @description Script implementation of the RiSpec RiShutter() function.
 * @param smin -
 * @param smax -
*/
	riShutter(smin:Number, smax:Number):void {
	
	};
	/**
 * @description Script implementation of the RiSpec RiSides() function.
 * @param nsides -
*/
	riSides(nsides:Number):void {
	
	};
	/**
 * @description Script implementation of the RiSpec RiSkew() function.
 * @param angle -
 * @param dx1 -
 * @param dy1 -
 * @param dz1 -
 * @param dx2 -
 * @param dy2 -
 * @param dz2 -
*/
	riSkew(angle:Number, dx1:Number, dy1:Number, dz1:Number, dx2:Number, dy2:Number, dz2:Number):void {
	
	};
	/**
 * @description Script implementation of the RiSpec RiSurface() function.
 * @param name - The name of the surface shader.
 * @param tokens - A list of token names passed to the shader.
 * @param params - A list of corresponding values for tokens.
*/
	riSurface(name:String, tokens:Array, params:Array):void {
	
	};
	/**
 * @description Script implementation of the RiSpec RiTransform() function.
 * @param transform - The transform to set.
*/
	riTransform(transform:DzMatrix4):void {
	
	};
	/**
 * @description Script implementation of the RiSpec RiTransformBegin() function.
*/
	riTransformBegin():void {
	
	};
	/**
 * @description Script implementation of the RiSpec RiTransformEnd() function.
*/
	riTransformEnd():void {
	
	};
	/**
 * @description Script implementation of the RiSpec RiTranslate() function.
 * @param dx -
 * @param dy -
 * @param dz -
*/
	riTranslate(dx:Number, dy:Number, dz:Number):void {
	
	};
	/**
 * @description Script implementation of the RiSpec RiWorldBegin() function.
*/
	riWorldBegin():void {
	
	};
	/**
 * @description Sets the background color.
 * @param color - The color to set.
*/
	setBackgroundColor(color:Color):void {
	
	};
	/**
 * @description Sets the path of the script to be run when the script definition is called.
 * @param filename - The path of the script.
 * @attention Global transient variables named Renderer that refers to the current DzRenderer, SurfaceName that refers to the name of the current surface, and Material that refers to the current DzMaterial, exist for the duration of filename. Referencing these variables from outside filename will result in an error.
*/
	setCleanUpScript(filename:String):void {
	
	};
	/**
 * @description Sets whether or not the Ri call that launches a pre-process script should execute.
 * @param shouldContinue - If true, the ri* call will be executed. If false, the ri* call will not be executed.
*/
	setContinueAfterPreProcess(shouldContinue:Boolean):void {
	
	};
	/**
 * @description Sets the crop window from the handler for the render.
 * @param handler - The render handler to set.
*/
	setCropWindow(handler:DzRenderHandler):void {
	
	};
	/**
 * @description Sets the path of the script to run in order to define the renderer. Causes the renderer to be cleared, the cleanup script (if any) to be run and then the render script, clean up script, surface pre-process script, light pre-process script and displacement pre-process script to be cleared.
 * @param definitionFile - The path of the script to run.
 * @attention filename is executed the moment the call to this method is made. A global transient variable named Renderer that referrs to the current DzRenderer, exists for the duration of filename. Referencing this variable from outside filename will result in an error.
*/
	setDefinitionFile(definitionFile:String):void {
	
	};
	/**
 * @description Sets the path of the script to be run before a material displacement is processed.
 * @param filename - The path of the script.
 * @attention Global transient variables named Renderer that refers to the current DzRenderer, DisplacementName that refers to the name of the current displacement, and Material that refers to the current DzMaterial, exist for the duration of filename. Referencing these variables from outside filename will result in an error.
*/
	setDisplacementPreProcessScript(filename:String):void {
	
	};
	/**
 * @description Set whether or not this is a shadow pass.
 * @param onOff - If true, this pass will be marked as a shadow pass.
*/
	setIsShadowPass(onOff:Boolean):void {
	
	};
	/**
 * @description Sets the path of the script to be run before riLightSource() and riAreaLightSource() are processed.
 * @param filename - The path of the script.
 * @attention Global transient variables named Renderer that refers to the current DzRenderer, and LightName that refers to the name of the current DzLight, exist for the duration of filename. Referencing these variables from outside filename will result in an error.
*/
	setLightPreProcessScript(filename:String):void {
	
	};
	/**
 * @description Sets whether or not the renderer is biased in the current mode.
 * @since 4.11.0.257
*/
	setModeBiased(yesNo:Boolean):Boolean {
	
	};
	/**
 * @description TODO:
Add description.
*/
	setModeDefaultMaterialClassname(classname:String):Boolean {
	
	};
	/**
 * @description Sets whether or not the renderer is physically based in the current mode.
 * @since 4.11.0.257
*/
	setModePhysicallyBased(yesNo:Boolean):Boolean {
	
	};
	/**
 * @description Sets whether or not the renderer supports advance camera properties in the current mode.
 * @since 4.11.0.257
*/
	setModeSupportsAdvancedCamera(yesNo:Boolean):Boolean {
	
	};
	/**
 * @description Sets whether or not the renderer supports blades on the camera in the current mode.
 * @since 4.11.0.257
*/
	setModeSupportsCameraBlades(yesNo:Boolean):Boolean {
	
	};
	/**
 * @description Sets the path of the script that controls the rendering process.
 * @param filename - The path of the script.
 * @attention filename is executed the moment the call to this method is made. Global transient variables named Renderer that refers to the current DzRenderer, Camera that refers to the current DzCamera, BackDrop that refers to the current DzBackDrop, and RenderOptions that refers to the current DzRenderOptions, exist for the duration of filename. Referencing these variables from outside filename will result in an error.
*/
	setRenderScript(filename:String):void {
	
	};
	/**
 * @description Sets the path of the script to be run before riSurface is processed.
 * @param filename - The path of the script.
 * @attention Global transient variables named Renderer that refers to the current DzRenderer, SurfaceName that refers to the name of the current surface, and Material that refers to the current DzMaterial, exist for the duration of filename. Referencing these variables from outside filename will result in an error.
*/
	setSurfacePreProcessScript(filename:String):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the definition file has changed.
 * @signature `"defintionFileChanged()"`
 * @event
*/
	defintionFileChanged():void {
	
	};

}
/**
 * @classdesc A reference counted object (DzRefCountedItem) is an object that is intended to be shared between multiple owners - each owner registers an interest in the object when taking ownership, and dereferences the object when it is no longer needed. This mechanism serves to ensure that the referenced object is not deleted while in use and automatically deleted when no longer in use. There are cases, however, where it is desirable to keep one of these objects from being deleted even though it is not referenced by another object in the scene. These cases are where DzScriptHandle becomes useful - its purpose is to provide a mechanism by which a reference counted object is ensured to exist for at least the lifetime of the DzScriptHandle that references it.
The lifetime of a DzScriptHandle depends on the scope of the script variable that contains it (e.g., function scope, global scope), but is ultimately limited to the lifetime of the script.
Since:
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/scripthandle_dz} */
class DzScriptHandle extends QObject {
	/**
 * @description Holds the object whose lifetime is being controlled.
	*/
	handle:Object;
	/**
 * @description Used to accesses the value of handle as a QObject. (Read Only)
	*/
	object:Object;
	/**
 * @description Holds whether or not handle can be used to retrieve a valid QObject. (Read Only)
	*/
	valid:Boolean;
	/**
 * @description Default constructor.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Copy constructor.
 * @constructor
*/
	constructor() {
	
	};

}
/**
 * @classdesc 
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/scrollarea_dz} */
class DzScrollArea extends DzWidget {
	/**
 * @description Holds the alignment of the widget.
	*/
	alignment:DzWidget;
	/**
 * @description Holds the size of the viewport as if the scroll bars had no valid scrolling range. (Read Only)
	*/
	maximumViewportSize:Size;
	/**
 * @description Holds whether or not the scroll area should resize the view widget.
	*/
	widgetResizable:Boolean;
	/**
 * @description Creates a scroll area as a child of the given parent widget.
 * @param parent - The widget parent for the scroll area.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Scrolls the contents of the scroll area so that childWidget is visible inside the viewport with margins specified in pixels by xmargin and ymargin. If the specified point cannot be reached, the contents are scrolled to the nearest valid position.
 * @param x - The x coordinate.
 * @param y - The y coordinate.
 * @param xmargin - The margin in the horizontal direction.
 * @param ymargin - The margin in the vertical direction.
*/
	ensureVisible(x:Number, y:Number, xmargin:Number, ymargin:Number):void {
	
	};
	/**
 * @description Scrolls the contents of the scroll area so that childWidget is visible inside the viewport with margins specified in pixels by xmargin and ymargin. If the specified point cannot be reached, the contents are scrolled to the nearest valid position.
 * @param childWidget - The child to scroll to.
 * @param xmargin - The margin in the horizontal direction.
 * @param ymargin - The margin in the vertical direction.
*/
	ensureWidgetVisible(childWidget:DzWidget, xmargin:Number, ymargin:Number):void {
	
	};
	/**
 * @description Hides the frame around the scroll area.
*/
	hideFrame():void {
	
	};
	/**
 * @description Sets whether or not to display the horizontal scrollbar.
 * @param onOff - If true, the horizontal scrollbar is always displayed. If false, the horizontal scrollbar is never displayed.
*/
	setHorizontalScrollbarDisplay(onOff:Boolean):void {
	
	};
	/**
 * @description Sets whether or not to display the vertical scrollbar.
 * @param onOff - If true, the vertical scrollbar is always displayed. If false, the vertical scrollbar is never displayed.
*/
	setVerticalScrollbarDisplay(onOff:Boolean):void {
	
	};
	/**
 * @description Sets the contents of the scroll area to a widget.
 * @param widget - The widget to set as a child of the scroll area; this widget will be destroyed when the scroll area is deleted or when a new widget is set.
*/
	setWidget(widget:DzWidget):void {
	
	};

}
/**
 * @classdesc Provides a scrolling area with on-demand scroll bars.
Deprecated
Exists only to keep old code working. Do not use in new code. Use DzScrollArea where possible instead.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/scrollview_dz} */
class DzScrollView extends DzWidget {
	/**
 * @description Creates a scroll view as a child of the given parent widget.
 * @param parent - The widget parent for the scroll view.
 * @constructor
*/
	constructor() {
	
	};

}
/**
 * @classdesc The primary purpose of this container type is to collect results returned by a database query for assets.
See Also:
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/searchcontainer_dz} */
class DzSearchContainer extends DzRefCountedItem, DzTopLevelAssetContainer {
	/**
 * @returns true if this container has more search results, otherwise false.
*/
	hasMoreSearchResults():Boolean {
	
	};

}
/**
 * @classdesc This class provides a mapping between the names of the facegroup_dz objects associated with a facetmesh_dz and the DzNode objects that are likewise associated with that mesh. This mapping plays a part in the mechanism that allows a user to click on different areas of the mesh in the viewport and have that translate to the selection of a node.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/selectionmap_dz} */
class DzSelectionMap extends DzBase {
	/**
 * @description Default Constructor.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Adds a new face group/node mapping to the selection map.
 * @returns DZ_NO_ERROR on success, otherwise an error code.
 * @param faceGroupName - The name of the face group that will map to the given node.
 * @param node - The node that will be selected when the face group is clicked on in the viewport.
 * @param replaceIfExists - If true, checks to see if the face group is already mapped, and replaces the mapped node with the given node. If false, the operation will fail if the face group is already mapped.
*/
	addPair(faceGroupName:String, node:DzNode, replaceIfExists:Boolean):DzError {
	
	};
	/**
 * @description Clears all pairs in the map.
*/
	clearAll():void {
	
	};
	/**
 * @description Clears the missing groups based on the face groups on mesh.
 * @param mesh - The reference mesh.
*/
	clearMissingGroups(mesh:facetmesh_dz):DzFacetmesh {
	
	};
	/**
 * @description Searches for the first group for a node.
 * @returns The name of the group for node.
 * @param node - The node to find the group for.
*/
	findGroupForNode(node:DzNode):String {
	
	};
	/**
 * @description Searches for the first node for a group.
 * @returns null if it fails, else the found node for group.
 * @param groupName - The name of the group to find.
*/
	findNodeForGroup(groupName:String):DzNode {
	
	};
	/**
 * @description Searches for the first pair.
 * @returns The index of the mapping for the node, or -1 if no mapping for the node exists.
 * @param node - The node to find the mapping for.
*/
	findPair(node:DzNode):Number {
	
	};
	/**
 * @description Searches for the first pair.
 * @returns The index of the mapping for the face group, or -1 if no mapping for the face group exists.
 * @param groupName - The name of the face group to find the mapping for.
*/
	findPair(groupName:String):Number {
	
	};
	/**
 * @returns The number of face group/node mappings in the selection map.
*/
	getNumPairs():Number {
	
	};
	/**
 * @returns The name of the face group for the mapping.
 * @param index - The index of the face group/node mapping to look up.
*/
	getPairGroup(index:Number):String {
	
	};
	/**
 * @returns The node for the mapping.
 * @param index - The index of the face group/node mapping to look up.
*/
	getPairNode(index:Number):DzNode {
	
	};
	/**
 * @description Removes a face group/node mapping from the selection map.
 * @returns DZ_NO_ERROR on success, otherwise an error code.
 * @param index - The index of the mapping to remove.
*/
	removePair(index:Number):DzError {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the map changes.
 * @signature `"mapModified()"`
 * @event
*/
	mapModified():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the visibility of the node in a given pair changes.
 * @signature `"visibilityChanged()"`
 * @event
*/
	visibilityChanged():void {
	
	};

}
/**
 * @classdesc TODO:
Add detailed description.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/settings_dz} */
class DzSettings extends QObject {
	/**
 * @description ENUMERATOR: A string value.
*/
	
	static StringValue;
	/**
 * @description ENUMERATOR: An integer (whole number) value.
*/
	
	static IntValue;
	/**
 * @description ENUMERATOR: A boolean (true/false) value.
*/
	
	static BoolValue;
	/**
 * @description ENUMERATOR: A floating-point (decimal) value.
*/
	
	static FloatValue;
	/**
 * @description ENUMERATOR: A nested settings value.
*/
	
	static SettingsValue;
	/**
 * @description Default constructor.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Copy constructor.
 * @param settings - The settings object to copy data from.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Clears all values from this settings object.
*/
	clear():void {
	
	};
	/**
 * @description Copies the setting with the given index to the specified settings object.
 * @param which - The index of the setting to copy.
 * @param copyTo - The settings object to copy the setting to.
*/
	copySetting(which:Number, copyTo:DzSettings):DzSettings {
	
	};
	/**
 * @description Copies the setting with the given index to the specified settings object.
 * @param key - The key of the setting to copy.
 * @param copyTo - The settings object to copy the setting to.
*/
	copySetting(key:String, copyTo:DzSettings):DzSettings {
	
	};
	/**
 * @description Populates this settings object with the data encoded in a string.
 * @returns true if the data was read successfully, otherwise false.
 * @param settings - The encoded string to load the data from.
*/
	fromString(settings:String):Boolean {
	
	};
	/**
 * @description Gets a boolean value from the settings.
 * @returns The value of the setting.
 * @param key - The key for the value to get.
 * @param defaultVal - The value to return if the key does not exist.
*/
	getBoolValue(key:String, def:Boolean):Boolean {
	
	};
	/**
 * @returns The value of the setting.
 * @param key - The key for the value to get.
 * @param defaultVal - The value to return if the key does not exist.
*/
	getFloatValue(key:String, def:Number):Number {
	
	};
	/**
 * @description Gets an integer value from the settings.
 * @returns The value of the setting.
 * @param key - The key for the value to get.
 * @param defaultVal - The value to return if the key does not exist.
*/
	getIntValue(key:String, def:Number):Number {
	
	};
	/**
 * @returns The key for the setting at the given index (if valid), otherwise an empty string.
 * @param which - The index of the value to get the key for.
*/
	getKey(which:Number):String {
	
	};
	/**
 * @returns The number of values stored in the settings.
*/
	getNumValues():Number {
	
	};
	/**
 * @returns The index of the setting with the given key (if any), otherwise NULL.
 * @param key - The key of the value to find.
 * @attention The returned index is only valid while this object remains unchanged. Once a value is added or removed, this index may become invalid.
*/
	getSettingIndex(key:String):Number {
	
	};
	/**
 * @returns The setting if key is found and is a SettingsValue, otherwise NULL.
 * @param key - The key for the value to get.
*/
	getSettingsValue(key:String):DzSettings {
	
	};
	/**
 * @description Gets a string value from the settings.
 * @returns The value of the setting.
 * @param key - The key for the value to get.
 * @param defaultVal - The value to return if the key does not exist.
*/
	getStringValue(key:String, def:String):String {
	
	};
	/**
 * @returns The value of the setting at the given index in string form (if valid), otherwise an empty string.
 * @param which - The index of the value to get.
*/
	getValue(which:Number):String {
	
	};
	/**
 * @returns The type of the setting at the given index (if valid), otherwise StringValue.
 * @param which - The index of the value to get the type of.
*/
	getValueType(which:Number):Type {
	
	};
	/**
 * @returns The index of the key (if any), otherwise -1.
 * @param key - The name of the key to find.
*/
	hasKey(key:String):Number {
	
	};
	/**
 * @description Removes a value.
 * @param key - The key for the value to remove.
*/
	removeValue(key:String):void {
	
	};
	/**
 * @description Replaces the settings of this object with the settings of the specified object.
 * @param settings - The object with the settings to replace this one with.
*/
	replaceWithSettings(settings:DzSettings):DzSettings {
	
	};
	/**
 * @description Adds a boolean value.
 * @param key - The key for the value to set.
 * @param value - The boolean value for the setting.
*/
	setBoolValue(key:String, value:Boolean):void {
	
	};
	/**
 * @description Adds a float value.
 * @param key - The key for the value to set.
 * @param value - The floating point value for the setting.
*/
	setFloatValue(key:String, value:Number):void {
	
	};
	/**
 * @description Adds an integer value.
 * @param key - The key for the value to set.
 * @param value - The integer value for the setting.
*/
	setIntValue(key:String, value:Number):void {
	
	};
	/**
 * @description Adds a nested settings value.
 * @returns The created settings object (if any), otherwise NULL.
 * @param key - The key for the value to set.
 * @param settings - The sub-setting value to add; a local copy is made.
*/
	setSettingsValue(key:String, settings:DzSettings):DzSettings {
	
	};
	/**
 * @description Adds a nested (empty) settings value.
 * @returns An empty settings object with the given key.
 * @param key - The key for the value to set.
*/
	setSettingsValue(key:String):DzSettings {
	
	};
	/**
 * @description Adds a string value.
 * @param key - The key for the value to set.
 * @param value - The string value for the setting.
*/
	setStringValue(key:String, value:String):void {
	
	};
	/**
 * @returns A JSON object representation of the data.
 * @since 4.8.1.23
*/
	toJson():Object {
	
	};
	/**
 * @returns A JSON encoded string representation of the data.
 * @since 4.8.1.23
*/
	toJsonString():String {
	
	};
	/**
 * @description Appends lines of code to a script object that will reconstruct this DzSettings object.
 * @param varName - The identifier for the variable in the script that holds the settings object.
 * @param script - The script object to generate the settings lines in.
 * @param indent - The indention level for the generated lines.
 * @param define - If true, prepends a variable definition statement to the lines generated in script. If false, it is the caller's responsibility to ensure that varName is already defined in script and holds a valid DzSettings object.
*/
	toScript(varName:String, script:DzScript, indent:Number, define:Boolean):void {
	
	};
	/**
 * @returns An XML encoded string representation of the data.
*/
	toString():String {
	
	};

}
/**
 * @classdesc 
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/settingshelper_dz} */
class DzSettingsHelper extends QObject {
	/**
 * @description Default Constructor
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Retrieves a value from the subkey at the given key.
 * @returns The object that represents the value at the specified path/name
 * @param path - The path of the key to retrieve the named value from; similar to a folder in the file system
 * @param name - The name of the value to retrieve; the "key" in a key/value pair
 * @param value - The default value to return if the name is not found; the "value" in a key/value pair
*/
	get(path:String, name:String, value:Object):Object {
	
	};
	/**
 * @description Retrieves whether a value exists at the given key.
 * @returns true if path/key exists, otherwise false.
 * @param path - The path of the key to check for its existence; similar to a folder in the file system
 * @param name - The name of the value to check for its existence; the "key" in a key/value pair
*/
	hasValue(path:String, name:String):Boolean {
	
	};
	/**
 * @description Removes a named value at the given path.
 * @returns true if path/key exists, otherwise false.
 * @since 4.9.0.38
 * @param path - The path of the key to remove; similar to a folder in the file system
 * @param name - The name of the value to remove; the "key" in a key/value pair
*/
	removeValue(path:String, name:String):Boolean {
	
	};
	/**
 * @description Records a named value to the path specified.
 * @param path - The path of the key to place the named value at; similar to a folder in the file system
 * @param name - The name of the value to record; the "key" in a key/value pair
 * @param value - The value to record; i.e. a Number, String, Boolean or Color; the "value" in a key/value pair
*/
	set(path:String, name:String, value:Object):void {
	
	};

}
/**
 * @classdesc An asset save filter for saving a Shader Preset in the DSON format.
See Also:
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/shaderassetfilter_dz} */
class DzShaderAssetFilter extends DzAssetFileOutFilter {

}
/**
 * @classdesc This class provides a DzBasicCamera derived object with creator-defined properties that will be passed to the RSL Shader at render-time. Properties intended to be used to pass values as arguments to a shader attached to the camera must be added using DzRSLShader. Properties for the camera that will be used by the render-time scripts to set attributes must be added via DzElement.addProperty().
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/shadercamera_dz} */
class DzShaderCamera extends DzBasicCamera {
	/**
 * @description Default Constructor.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.
 * @param definitionFile - The relative [to DzApp.getScriptsPath()] path to the script file that creates this camera's property list.
 * @param renderTimeFile - The relative path [from DzApp.getScriptsPath()] to the DAZ Script that executes at render time.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.
 * @param definitionFile - The relative [to DzApp.getScriptsPath()] path to the script file that creates this camera's property list.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Adds shader to this camera's internal list of shaders and sets shader 's owner to this camera.
 * @returns true if shader is successfully added to the list (e.g. does not already exist), otherwise false.
*/
	addShader(shader:DzRSLShader):Boolean {
	
	};
	/**
 * @returns The internal name of the camera. This is not the same as the QObject.name property.
*/
	getCameraName():String {
	
	};
	/**
 * @returns The relative path [from DzApp.getScriptsPath()] to the DAZ Script that creates this camera's property list.
*/
	getDefinitionFile():String {
	
	};
	/**
 * @returns The number of DzRSLShaders on this camera.
*/
	getNumShaders():Number {
	
	};
	/**
 * @returns The relative path [from DzApp.getScriptsPath()] to the DAZ Script that is executed at render-time.
*/
	getRenderTimeFile():String {
	
	};
	/**
 * @returns The DzRSLShader at index or NULL if no shader exists at that index.
*/
	getShader(index:Number):DzRSLShader {
	
	};
	/**
 * @description Removes shader from this camera's internal list of shaders.
 * @returns true if shader is successfully removed from the list, otherwise false.
*/
	removeShader(shader:DzRSLShader):Boolean {
	
	};
	/**
 * @description Sets the internal name of the camera; this is not the same as the QObject.name property. By default, this is "Custom".
*/
	setCameraName(name:String):void {
	
	};
	/**
 * @description Sets the relative path of the [DAZ Script] file that builds this camera's property list.
 * @param definitionFile - The relative path [from DzApp.getScriptsPath()] to the DAZ Script that creates this camera's property list
 * @attention definitionFile is executed the moment the call to this method is made. A global transient variable named Camera - referring to the current DzShaderCamera, exists for the duration of definitionFile. Referencing this variable from outside definitionFile will result in an error.
*/
	setDefinitionFile(definitionFile:String, doOverride:Boolean, runScript:Boolean):void {
	
	};
	/**
 * @description Sets the relative path of the [DAZ Script] file that will be executed at render-time. This script can declare variables, set displays, hiders, and/or options as well as shader parameters for the element, and implement custom logic for special effects.
 * @returns true if renderTimeFile is valid, otherwise false.
 * @param renderTimeFile - The relative path [from DzApp.getScriptsPath()] to the DAZ Script that executes at render time.
 * @attention When renderTimeFile is executed, a global variable named Camera - referring to the current DzShaderCamera - exists for the duration of renderTimeFile. Referencing this variable from outside filename will result in an error. See the Render Time Functions for a list of special functions only available to this script.
*/
	setRenderTimeFile(renderTimeFile:String):Boolean {
	
	};
	/**
 * @description Sets the global graphic state by adding a series of RiDeclare calls before RiWorldBegin.
 * @param tokens - An Array of the String] token names to set
 * @param types - An Array of the corresponding String] type to set for each token
*/
	declare(tokens:Array, types:Array):void {
	
	};
	/**
 * @description Sets the global graphic state by adding a RiDisplayV call before RiWorldBegin.
 * @param name - The name of the file or framebuffer to set, depending on type
 * @param type - The type of display to set; i.e. file, tiff, etc
 * @param mode - The mode to set; i.e. rgb, rgba, etc
 * @param tokens - An Array of the String] tokens to set
 * @param params - An Array of the corresponding basic type to set for each token
*/
	setDisplay(name:String, type:String, mode:String, tokens:Array, params:Array):void {
	
	};
	/**
 * @description Sets the global graphic state by adding a RiHiderV call before RiWorldBegin.
 * @param type - The type of hider to set; i.e. hidden, raytrace, photonmap, etc
 * @param tokens - An Array of the String] tokens to set
 * @param params - An Array of the corresponding basic type to set for each token
*/
	setHider(type:String, tokens:Array, params:Array):void {
	
	};
	/**
 * @description Sets the global graphic state by adding a RiOptionV call before RiWorldBegin.
 * @param option - The name of the option to set
 * @param tokens - An Array of the String] tokens to set
 * @param params - An Array of the corresponding basic type to set for each token
*/
	setOption(option:String, tokens:Array, params:Array):void {
	
	};

}
/**
 * @classdesc DzShaderDescription contains information about a RenderMan shader - this includes the type of the shader, and a list of its parameters.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/shaderdescription_dz} */
class DzShaderDescription extends QObject {
	/**
 * @description The type of the shader
	*/
	type:DzShaderType;
	/**
 * @description ENUMERATOR: Surface shader.
*/
	
	static SurfaceShader;
	/**
 * @description ENUMERATOR: Light Shader.
*/
	
	static LightShader;
	/**
 * @description ENUMERATOR: Displacement Shader.
*/
	
	static DisplacementShader;
	/**
 * @description ENUMERATOR: Volume Shader.
*/
	
	static VolumeShader;
	/**
 * @description ENUMERATOR: Image Shader.
*/
	
	static ImageShader;
	/**
 * @returns The number of parameters in the shader.
*/
	getNumParameters():Number {
	
	};
	/**
 * @returns The i'th parameter in the shader.
*/
	getParameter(i:Number):DzShaderParameter {
	
	};

}
/**
 * @classdesc This class provides a DzLight derived object with creator-defined properties that will be passed to the RSL Shader at render-time. By default, the light only has two properties - Color and Intensity. The values of these properties are not sent to the shader by default, nor are any attributes set representing the value of these properties. Unless put to use via DzRSLShader, these properties are purely for OpenGL purposes. These properties are not mappable by default, but can be made so by using DzRSLShader.addMapProperty() or DzRSLShader.addMappableProperty(). All other properties for the light must be added using DzRSLShader in order to be used to pass values as arguments to the shader. Properties for the light that will be used by the render-time scripts to set attributes must be added via DzElement.addProperty().
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/shaderlight_dz} */
class DzShaderLight extends DzLight {
	/**
 * @description ENUMERATOR: Null - Only in the scene to provide access to properties.
*/
	
	static NullLight;
	/**
 * @description ENUMERATOR: Emits global light.
*/
	
	static AmbientLight;
	/**
 * @description ENUMERATOR: Emits light in all directions.
*/
	
	static PointLight;
	/**
 * @description ENUMERATOR: Emits parallel light.
*/
	
	static DistantLight;
	/**
 * @description ENUMERATOR: Emits light in a pattern.
*/
	
	static SpotLight;
	/**
 * @description Default Constructor.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @param definitionFile - The relative [from DzApp.getScriptsPath()] path to the script file that creates this light's property list.
 * @param lightType - The enumerated type for the light. This controls certain aspects of the light, for instance whether or not the user can view through the light, the icon displayed in the Scene pane, the avatar representing the light in the viewport.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Adds shader to this light's internal list of shaders and sets shader 's owner to this light.
 * @returns true if shader is successfully added to the list (e.g. does not already exist), otherwise false.
*/
	addShader(shader:DzRSLShader):Boolean {
	
	};
	/**
 * @returns The property that controls the color of this light.
*/
	getColorControl():DzColorProperty {
	
	};
	/**
 * @returns The relative path [from DzApp.getScriptsPath()] to the DAZ Script that creates this light's property list.
*/
	getDefinitionFile():String {
	
	};
	/**
 * @returns The value of the property that controls the intensity of this light.
*/
	getIntensity():Number {
	
	};
	/**
 * @returns The property that controls the intensity of this light.
*/
	getIntensityControl():DzFloatProperty {
	
	};
	/**
 * @returns The internal name of the light. This is not the same as the QObject.name property.
*/
	getLightName():String {
	
	};
	/**
 * @returns The type of the light.
*/
	getLightType():LightType {
	
	};
	/**
 * @returns The number of DzRSLShaders on this light.
*/
	getNumShaders():Number {
	
	};
	/**
 * @returns The DzRSLShader at index or NULL if no shader exists at that index.
*/
	getShader(index:Number):DzRSLShader {
	
	};
	/**
 * @returns The path to the generated shadow map for this light.
*/
	getShadowMapPath():String {
	
	};
	/**
 * @description Removes shader from this light's internal list of shaders.
 * @returns true if shader is successfully removed from the list, otherwise false.
*/
	removeShader(shader:DzRSLShader):Boolean {
	
	};
	/**
 * @description Sets the relative path of the [DAZ Script] file that builds this light's property list.
 * @param definitionFile - The relative path [from DzApp.getScriptsPath()] to the DAZ Script that creates this light's property list
 * @attention definitionFile is executed the moment the call to this method is made. A global transient variable named Light - referring to the current DzShaderLight being rendered, exists for the duration of definitionFile. Referencing this variable from outside definitionFile will result in an error.
*/
	setDefinitionFile(definitionFile:String, doOverride:Boolean, runScript:Boolean):void {
	
	};
	/**
 * @description Sets the internal name of the light; this is not the same as the QObject.name property. By default, this is "Custom".
*/
	setLightName(name:String):void {
	
	};
	/**
 * @description Sets the type of a light. A light's type determines the OpenGL representation.
*/
	setLightType(type:LightType):void {
	
	};
	/**
 * @description Sets a flag so that transforms are applied to the coordinate space that the light is in, greatly simplifying shader math.
*/
	setUseLocalShaderSpace(onOff:Boolean):void {
	
	};
	/**
 * @returns Whether transforms are applied to the coordinate space that the light is in. false by default
*/
	usesLocalShaderSpace():Boolean {
	
	};

}
/**
 * @classdesc This class provides a DzMaterial derived object with creator-defined properties that will be passed to the RSL Shader at render-time. By default, the material only has two properties - Diffuse Color (Cs) and Opacity Strength (Os) - which are not passed as tokens to the shader, rather they are attributes sent directly to the renderer, via RiColor() and RiOpacity() respectively. These properties are not mappable by default, but can be made so by using DzRSLShader.addMapProperty(). All other properties for the material must be added using DzRSLShader.addShaderProperty() and DzRSLShader.addMappableProperty() in order to be used to pass values as arguments to the shader. Properties for the material that will be used by the render-time scripts to set attributes must be added via DzElement.addProperty().
Samples:
See Also:
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/shadermaterial_dz} */
class DzShaderMaterial extends DzRefCountedItem, DzMaterial {
	/**
 * @description Default Constructor.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.
 * @param mat - The DzShaderMaterial to copy
 * @param duplicateMissingProps - Whether or not to duplicate missing properties
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.
 * @param definitionFile - The relative path [from DzApp.getScriptsPath()] to the DAZ Script that creates this material's property list.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Adds shader to this material's internal list of shaders and sets shader 's owner to this material.
 * @returns true if shader is successfully added to the list (e.g. does not already exist), otherwise false.
*/
	addShader(shader:DzRSLShader):Boolean {
	
	};
	/**
 * @returns The relative path [from DzApp.getScriptsPath()] to the DAZ Script that creates this material's property list.
*/
	getDefinitionFile():String {
	
	};
	/**
 * @returns The Diffuse Color property of this material
*/
	getDiffuseProperty():DzColorProperty {
	
	};
	/**
 * @returns The number of DzRSLShaders on this material
*/
	getNumShaders():Number {
	
	};
	/**
 * @returns The Opacity property of this material
*/
	getOpacityProperty():DzFloatProperty {
	
	};
	/**
 * @returns The DzRSLShader at index or NULL if no shader exists at that index.
*/
	getShader(index:Number):DzRSLShader {
	
	};
	/**
 * @description Removes shader from this material's internal list of shaders.
 * @returns true if shader is successfully removed from the list, otherwise false.
*/
	removeShader(shader:DzRSLShader):Boolean {
	
	};
	/**
 * @description Sets the relative path of the [DAZ Script] file that defines this material.
 * @param definitionFile - The relative path [from DzApp.getScriptsPath()] to the DAZ Script that defines this material
 * @param doOverride - Whether or not to override the setting of the definition file if it has already been set
 * @param runScript - Whether or not to run the definition script upon setting it
 * @attention definitionFile is executed the moment the call to this method is made. A global transient variable named Material - refering to the current DzShaderMaterial being rendered, exists for the duration of definitionFile. Referencing this variable from outside definitionFile will result in an error.
*/
	setDefinitionFile(definitionFile:String, doOverride:Boolean, runScript:Boolean):void {
	
	};
	/**
 * @description Sets the name of the material type that will be returned by getMaterialName(). By default, this is "Custom"
 * @param name - The name to assign to this material
*/
	setMaterialName(name:String):void {
	
	};
	/**
 * @description Sets whether this material needs the Tangent Space Params: varying vector dPds and varying float dPdsM. dPds is the tangent vector along the surface. dPdsM is the handedness of the bitangent vector on the surface. The bitangent can be reconstructed using:
 * @param onoff - Whether or not this material needs the Tangent Space Params
*/
	setNeedsTangentSpaceParams(onoff:Boolean):void {
	
	};

}
/**
 * @classdesc TODO:
Add detailed description.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/shaderparameter_dz} */
class DzShaderParameter extends QObject {
	/**
 * @description The type of the parameter
	*/
	type:DzShaderParamType;
	/**
 * @description ENUMERATOR: Unknown Parameter type.
*/
	
	static UnknownType;
	/**
 * @description ENUMERATOR: Point type parameter.
*/
	
	static PointType;
	/**
 * @description ENUMERATOR: Normal type parameter.
*/
	
	static NormalType;
	/**
 * @description ENUMERATOR: Vector type parameter.
*/
	
	static VectorType;
	/**
 * @description ENUMERATOR: Color type parameter.
*/
	
	static ColorType;
	/**
 * @description ENUMERATOR: Scalar type parameter.
*/
	
	static ScalarType;
	/**
 * @description ENUMERATOR: String type parameter.
*/
	
	static StringType;
	/**
 * @description ENUMERATOR: Matrix type parameter.
*/
	
	static MatrixType;

}
/**
 * @classdesc An asset save filter for saving a Shader Definition Support Asset in the DSON format.
See Also:
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/shadersupportassetfilter_dz} */
class DzShaderSupportAssetFilter extends DzAssetFileOutFilter {
	/**
 * @description TODO:
Add description.
 * @constructor
*/
	constructor() {
	
	};

}
/**
 * @classdesc See Also:
Attention:
Since:@attention Attention:
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/shaperiggingadjuster_dz} */
class DzShapeRiggingAdjuster extends QObject {
	/**
 * @description Default Constructor. Creates a shape rigging adjuster that can be used to adjust bone positions and orientations of the selected figure, based on the current shape.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Performs the rigging adjustment based on the current shape.
 * @returns true if the adjustment was successful, false if the adjustment could not be completed.
*/
	doAdjustments():Boolean {
	
	};
	/**
 * @description Sets whether or not center points of bones being ajusted are allowed to be modified.
 * @param yesNo - If true (default), the center points of bones are permitted to be modified.
*/
	setAdjustCenterPoints(yesNo:Boolean):void {
	
	};
	/**
 * @description Sets whether or not end points of bones being ajusted are allowed to be modified.
 * @param yesNo - If true (default), the end points of bones are permitted to be modified.
*/
	setAdjustEndPoints(yesNo:Boolean):void {
	
	};
	/**
 * @description Sets whether or not the orientations of bones being ajusted are allowed to be modified.
 * @param yesNo - If true, the orientations of bones are permitted to be modified.
*/
	setAdjustOrientation(yesNo:Boolean):void {
	
	};
	/**
 * @description Sets the list of bones to exclude when adjusting.
 * @param boneNames - The list of bone names to exclude.
*/
	setExcludedBones(boneNames:Array):void {
	
	};
	/**
 * @description Sets the list of facet groups to exclude when calculating adjustments to make.
 * @param groupNames - The list of facet group names to exclude.
*/
	setExcludedFacetGroups(groupNames:Array):void {
	
	};
	/**
 * @description Sets the target asset to be the geometry contained by the given node.
 * @param figure - The figure to adjust the rigging on.
*/
	setFigure(figure:DzFigure):void {
	
	};

}
/**
 * @classdesc An asset save filter for saving a Shaping Preset in the DSON format.
See Also:
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/shapingassetfilter_dz} */
class DzShapingAssetFilter extends DzAssetFileOutFilter {
	/**
 * @description TODO:
Add description.
 * @constructor
*/
	constructor() {
	
	};

}
/**
 * @classdesc TODO:
Add detailed description.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/simpleelementdata_dz} */
class DzSimpleElementData extends DzElementData {
	/**
 * @description Default constructor.
 * @param name - The name for the data item. This must be unique for all data items on a given element - i.e. an element can not have two data items with the same name.
 * @param persistent - If true, the data item will be saved with the element to the native file format.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @returns The settings owned by this element data item.
*/
	getSettings():DzSettings {
	
	};

}
/**
 * @classdesc Implements a custom data item that causes a specified script to be executed after the element that owns the data item has been loaded into the scene.
A global transient variable named DataItem, which refers to the DzSimpleElementScriptData that invoked the execution of the script, is provided to the script in the global context at runtime. Attempts to use this global variable outside of the associated script will result in a ReferenceError.
A global transient variable named FileIOSettings, which refers to the DzFileIOSettings that was used when the element that owns the data item was loaded, is provided to the script in the global context at runtime. Attempts to use this global variable outside of the associated script will result in a ReferenceError. (since 4.9.4.109)
If the DzSettings for this data item contains a boolean setting named RunOnce set to true, the specified script will be run once and then the data item will be deleted from the element.
Attention:@attention Attention:
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/simpleelementscriptdata_dz} */
class DzSimpleElementScriptData extends DzSimpleElementData {
	/**
 * @description Default constructor.
 * @param name - The name for the data item. This must be unique for all data items on a given element - i.e. an element can not have two data items with the same name.
 * @param persistent - If true, the data item will be saved with the element to the native file format.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @returns The file path of the script for this data item (if any), otherwise an empty string.
*/
	getScriptFilePath():String {
	
	};
	/**
 * @description Sets the file path of the script for this data item.
 * @param script - The file path of the script.
*/
	setScriptFilePath(script:String):void {
	
	};

}
/**
 * @classdesc TODO:
Add detailed description.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/simplescenedata_dz} */
class DzSimpleSceneData extends DzSceneData {
	/**
 * @description Default constructor.
 * @param name - The name for the data item. This must be unique for all data items on a given element - i.e. an element can not have two data items with the same name.
 * @param persistent - If true, the data item will be saved with the element to the native file format.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @returns The settings owned by this scene data item.
*/
	getSettings():DzSettings {
	
	};

}
/**
 * @classdesc Implements a custom data item that causes a specified script to be executed after the scene has been loaded.
A global transient variable named DataItem, which refers to the DzSimpleSceneScriptData that invoked the execution of the script, is provided to the script in the global context at runtime. Attempts to use this global variable outside of the associated script will result in a ReferenceError.
A global transient variable named FileIOSettings, which refers to the DzFileIOSettings that was used when the scene was loaded, is provided to the script in the global context at runtime. Attempts to use this global variable outside of the associated script will result in a ReferenceError. (since 4.9.4.109)
If the DzSettings for this data item contains a boolean setting named RunOnce set to true, the specified script will be run once and then the data item will be deleted from the scene.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/simplescenescriptdata_dz} */
class DzSimpleSceneScriptData extends DzSimpleSceneData {
	/**
 * @description Default constructor.
 * @param name - The name for the data item. This must be unique for all data items on the scene - i.e. a scene can not have two data items with the same name.
 * @param persistent - If true, the data item will be saved with the scene to the native file format.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @returns The file path of the script for this data item (if any), otherwise an empty string.
*/
	getScriptFilePath():String {
	
	};
	/**
 * @description Sets the file path of the script for this data item.
 * @param script - The file path of the script.
*/
	setScriptFilePath(script:String):void {
	
	};

}
/**
 * @classdesc Implements a simulation engine.
Since:
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/simulationengine_dz} */
class DzSimulationEngine extends DzBase {
	/**
 * @description Clears all simulation data in the scene for this engine.
*/
	clearSimulation():DzError {
	
	};
	/**
 * @description Starts a custom simulation on the list of nodes specified, using this engine.
 * @param nodes - The list of nodes to perform the simulation on.
*/
	customSimulate(nodes:Array):DzError {
	
	};
	/**
 * @returns A list of elements that hold the properties for controlling this engine.
*/
	getSimulationElements(list:Array):Array {
	
	};
	/**
 * @description Starts a simulation using this engine.
*/
	simulate():DzError {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted just before the engine begins simulating.
 * @signature `"aboutToSimulate(DzSimulationEngine*)"`
 * @event
*/
	aboutToSimulate(engine:DzSimulationEngine):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted just after the engine finishes simulating.
 * @signature `"simulateFinished(DzSimulationEngine*)"`
 * @event
*/
	simulateFinished(engine:DzSimulationEngine):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when an error occurs while the engine is simulating.
 * @signature `"simulationError(const QString&)"`
 * @event
*/
	simulationError(errorMsg:String):void {
	
	};

}
/**
 * @classdesc Responsible for the management of simulation engines, and more generally the process of performing a simulation.
There is only one instance of this manager in an application. This instance is created and owned by DzApp. Request the instance via DzApp.getSimulationMgr().
See Also:
Since:
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/simulationmgr_dz} */
class DzSimulationMgr extends DzBase {
	/**
 * @description Clears all simulation data in the scene for the active simulation engine.
 * @returns DZ_NO_ERROR if the operation is successful, otherwise an appropriate error code.
*/
	clearSimulation():DzError {
	
	};
	/**
 * @returns The simulation engine with the given class name (if any), otherwise null.
*/
	findSimulationEngine(className:String):DzSimulationEngine {
	
	};
	/**
 * @returns The active simulation engine for the application. This will be NULL if no simulation engines are available.
*/
	getActiveSimulationEngine():DzSimulationEngine {
	
	};
	/**
 * @returns The number of simulation engines available to the application.
*/
	getNumSimulationEngines():Number {
	
	};
	/**
 * @returns If which is within the range [0, getNumSimulationEngines() - 1], the simulation engine at the given index, otherwise null.
*/
	getSimulationEngine(which:Number):DzSimulationEngine {
	
	};
	/**
 * @returns A list of simulation engines available in the application.
*/
	getSimulationEngineList():Array {
	
	};
	/**
 * @returns true if the application is currently simulating, otherwise false.
*/
	isSimulating():Boolean {
	
	};
	/**
 * @description Sets the active simulation engine for the application.
 * @param engine - The simulation engine to make active.
*/
	setActiveSimulationEngine(engine:DzSimulationEngine):void {
	
	};
	/**
 * @description Performs a simulation on the scene with the given simulation settings. If no simulation settings are specified, then the current application simulation settings are used.
 * @returns DZ_NO_ERROR if the operation is successful, otherwise an appropriate error code.
*/
	simulate():DzError {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the active simulation engine has changed.
 * @signature `"activeSimulationEngineChanged(DzSimulationEngine*)"`
 * @event
*/
	activeSimulationEngineChanged(engine:DzSimulationEngine):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when a new simulation engine is added to the manager. This only occurs at startup as plug-ins are being loaded.
 * @signature `"simulationEngineAdded(DzSimulationEngine*)"`
 * @event
*/
	simulationEngineAdded(engine:DzSimulationEngine):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when an error occurs while the active simulation engine is simulating.
 * @signature `"simulationError(const QString&)"`
 * @event
*/
	simulationError(errorMsg:String):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted just after a simulation operation is finished. This is only emitted when a simulation operation is performed by calling simulate() - this includes all simulation operations that are started by the user from the interface. This may not include simulation operations performed by plug-ins, scripts, etc which do not call simulate().
 * @signature `"simulationFinished(bool)"`
 * @event
*/
	simulationFinished(succeeded:Boolean):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the default options for the active simulation engine have been restored.
 * @signature `"simulationOptionDefaultsRestored()"`
 * @event
*/
	simulationOptionDefaultsRestored():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted just before a simulation operation begins. This is only emitted when a simulation operation is performed by calling simulate() - this includes all simulation operations that are started by the user from the interface. This may not include simulation operations performed by plug-ins, scripts, etc which do not call simulate().
 * @signature `"simulationStarting()"`
 * @event
*/
	simulationStarting():void {
	
	};

}
/**
 * @classdesc An asset save filter for saving a Simulation Settings Preset in the DSON format.
See Also:
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/simulationsettingsassetfilter_dz} */
class DzSimulationSettingsAssetFilter extends DzAssetFileOutFilter {
	/**
 * @description TODO:
Add description.
 * @constructor
*/
	constructor() {
	
	};

}
/**
 * @classdesc This is the DAZScript counterpart to the QSize type used in the DAZ Studio SDK. A Size object is a two dimensional representation of a width and height.
Attention:@attention Attention:
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/size} */
class Size extends QObject {
	/**
 * @description Holds the height of the size.
	*/
	height:Number;
	/**
 * @description Holds the width of the size.
	*/
	width:Number;
	/**
 * @description Default constructor.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Copy Constructor.
 * @param size - The Size to copy.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @param width - The width for the size.
 * @param height - The height for the size.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Swaps the width and height of the size.
*/
	translate():void {
	
	};

}
/**
 * @classdesc See Also:
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/skeleton_dz} */
class DzSkeleton extends DzNode {
	/**
 * @description ENUMERATOR: Temporarily redirects ERC links established between properties associated with this skeleton to the same named properties in the follow target (if any), while this skeleton is following said target.

 See Also:

 DzProperty.getNumControllers()

 DzProperty.getController()

 DzERCLink
*/
	
	static fmRedirect;
	/**
 * @description ENUMERATOR: Matches the names of properties associated with this skeleton (that are configured to allow auto-follow) to the same named properties in the follow target (if any), in order to replicate their respective values, while this skeleton is following said target.

 See Also:

 DzProperty.canAutoFollow()
*/
	
	static fmAutoFollow;
	/**
 * @description Default Constructor.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Converts an articulate figure to a static prop.
 * @param srcSkeleton - The skeleton to convert.
 * @param nodeName - The name to assign to the new prop.
*/
	static convertFigureToProp(skeleton:DzSkeleton, nodeName:String):DzNode {
	
	};
	/**
 * @description Clears the generated morphs.
*/
	clearGeneratedMorphs():void {
	
	};
	/**
 * @returns The bone in this skeleton's hierarchy with a matching name (if any), otherwise NULL.
 * @param name - The name of the bone to look for.
*/
	findBone(name:String):DzBone {
	
	};
	/**
 * @returns The bone in this skeleton's hierarchy with a matching label (if any), otherwise NULL.
 * @param label - The label of the bone to look for.
*/
	findBoneByLabel(label:String):DzBone {
	
	};
	/**
 * @returns A list containing all bones that are part of this skeleton.
*/
	getAllBones():Array {
	
	};
	/**
 * @returns true if OpenGL bones will draw in the viewport, otherwise false.
*/
	getDrawGLBones():Boolean {
	
	};
	/**
 * @returns The boolean property that controls bone drawing in the viewport.
*/
	getDrawGLBonesControl():DzBoolProperty {
	
	};
	/**
 * @returns The float property that controls the figure identifier.
 * @since 4.6.2.42
*/
	getFigureIDControl():DzFloatProperty {
	
	};
	/**
 * @returns The property that controls which skeleton this skeleton will follow.
*/
	getFollowControl():DzSkeletonProperty {
	
	};
	/**
 * @returns The following projection options for this skeleton.
*/
	getFollowingProjectionOptions():DzFollowingProjectionOptions {
	
	};
	/**
 * @returns The current follow mode of this skeleton.
 * @since 4.8.0.23
*/
	getFollowMode():FollowMode {
	
	};
	/**
 * @returns The enum property that controls the follow mode of this skeleton.
 * @since 4.8.0.23
*/
	getFollowModeControl():DzEnumProperty {
	
	};
	/**
 * @returns The i'th skeleton following this one.
*/
	getFollowSkeleton(which:Number):DzSkeleton {
	
	};
	/**
 * @returns The skeleton that this skeleton is currently following (if any), otherwise NULL.
*/
	getFollowTarget():DzSkeleton {
	
	};
	/**
 * @returns The color property that controls bone color in the viewport.
*/
	getGLBonesColorControl():DzColorProperty {
	
	};
	/**
 * @returns The float property that controls bone edge opacity in the viewport.
*/
	getGLBonesEdgeOpacityControl():DzFloatProperty {
	
	};
	/**
 * @returns The enum property that controls bone edge style in the viewport.
*/
	getGLBonesEdgeStyleControl():DzEnumProperty {
	
	};
	/**
 * @returns The float property that controls bone fill opacity in the viewport.
*/
	getGLBonesFillOpacityControl():DzFloatProperty {
	
	};
	/**
 * @returns The number of skeletons following this one.
*/
	getNumFollowSkeletons():Number {
	
	};
	/**
 * @returns label if the value provided is already unique, otherwise label with a suffix that causes it to be unique.
 * @since 4.12.0.66
 * @param label - The bone label to make unique; any trailing space/digits will automatically be stripped.
 * @param bone - The bone that the label is intended for; may be null; this bone will be ignored when validating uniqueness.
*/
	getUniqueBoneLabel(label:String, bone:DzBone):String {
	
	};
	/**
 * @returns name if the value provided is already unique, otherwise name with a suffix that causes it to be unique.
 * @since 4.12.0.66
 * @param name - The bone name to make unique; any trailing space/digits will automatically be stripped.
 * @param bone - The bone that the name is intended for; may be null; this bone will be ignored when validating uniqueness.
*/
	getUniqueBoneName(name:String, bone:DzBone):String {
	
	};
	/**
 * @description Invalidates the bounding boxes for this node, causing them to be recalculated.
 * @param checkSkeleton - Whether or not to invalidate the bounding box for this node's skeleton, if it has one.
*/
	invalidateBoundingBoxes(checkSkeleton:Boolean):void {
	
	};
	/**
 * @description Sets whether or not OpenGL bones will draw in the viewport.
 * @param onOff - If true, bones will be drawn in the viewport.
*/
	setDrawGLBones(onOff:Boolean):void {
	
	};
	/**
 * @description Sets the figure that we are currently following.
 * @param skeleton - The new follow target for this skeleton. If NULL, clears the figure that this skeleton is following.
*/
	setFollowTarget(skeleton:DzSkeleton):DzSkeleton {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the follow target for this skeleton has changed.
 * @signature `"followTargetChanged(DzSkeleton*)"`
 * @event
*/
	followTargetChanged(skeleton:DzSkeleton):void {
	
	};

}
/**
 * @classdesc A specialized subclass of DzNodeProperty which will only allow the user to select nodes that are skeletons from the scene. This is currently used by skeletons for the 'Fit To' property.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/skeletonproperty_dz} */
class DzSkeletonProperty extends DzNodeProperty {
	/**
 * @description Default Constructor. Creates a non-animatable, non-user property.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @param name - The name of this property.
 * @param canAnimate - If true, create an animatable property. If false, a non-animatable property is created.
 * @param isUserProperty - If true, creates a user property; user properties are properties that can be added/deleted by users.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @returns The value of the property, NULL if no skeleton is selected.
*/
	getSkeletonValue():DzSkeleton {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted immediately before the value of the property changes.
 * @signature `"aboutToChange()"`
 * @event
*/
	aboutToChange():void {
	
	};

}
/**
 * @classdesc This class is mainly used by the framework to store source paths for imported Poser content. The class can be used as follows to retrieve the path of the CR2 file from which a figure was loaded:
Todo
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/sourcefiledata_dz} */
class DzSourceFileData extends DzElementData {
	/**
 * @description The path to the source file.
	*/
	sourceFilePath:String;
	/**
 * @description Creates a new Source File Data object that stores the given file path.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @returns true if the source geometry has changed, otherwise false.
*/
	getGeometryChanged():Boolean {
	
	};
	/**
 * @description Tries to convert the source path into a "Poser" style Runtime-relative path (i.e. ":Runtime:Libraries:Character:FileName.cr2"). Returns the converted path if successful, and an empty string if unsuccessful.
 * @returns The source path.
*/
	getPoserRuntimeRelativePath():String {
	
	};
	/**
 * @description Sets whether or not the source geometry has changed.
*/
	setGeometryChanged(onoff:Boolean):void {
	
	};

}
/**
 * @classdesc A DzSplitter provides the user with the ability to control the size of child widgets by dragging the boundary between the children.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/splitter_dz} */
class DzSplitter extends DzWidget {
	/**
 * @description Holds whether or not the children widgets of the splitter are collapsible.
	*/
	childrenCollapsible:Boolean;
	/**
 * @description Holds the width of the splitter handle.
	*/
	handleWidth:Number;
	/**
 * @description Holds whether or not resizing is opaque.
	*/
	opaqueResize:Boolean;
	/**
 * @description Holds the orientation of the splitter.
	*/
	orientation:DzWidget;
	/**
 * @description Creates a splitter widget as a child of the given parent widget.
 * @param parent - The widget parent for the splitter.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description TODO:
Add description.
*/
	addWidget(widget:DzWidget):void {
	
	};
	/**
 * @description TODO:
Add description.
*/
	count():Number {
	
	};
	/**
 * @description TODO:
Add description.
*/
	indexOf(widget:DzWidget):Number {
	
	};
	/**
 * @description TODO:
Add description.
*/
	insertWidget(index:Number, widget:DzWidget):void {
	
	};
	/**
 * @description TODO:
Add description.
*/
	isCollapsible(index:Number):Boolean {
	
	};
	/**
 * @description TODO:
Add description.
*/
	restoreState(state:ByteArray):Boolean {
	
	};
	/**
 * @description TODO:
Add description.
*/
	saveState():ByteArray {
	
	};
	/**
 * @description TODO:
Add description.
*/
	setCollapsible(index:Number, collapse:Boolean):void {
	
	};
	/**
 * @description TODO:
Add description.
*/
	setStretchFactor(index:Number, stretch:Number):void {
	
	};
	/**
 * @description TODO:
Add description.
*/
	widget(index:Number):DzWidget {
	
	};

}
/**
 * @classdesc TODO:
Add detailed description.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/spotlight_dz} */
class DzSpotLight extends DzDistantLight {
	/**
 * @description Default Constructor. Creates a new spotlight.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @returns The (scaled) base opacity.
 * @since 4.9.3.145
*/
	getBaseOpacity():Number {
	
	};
	/**
 * @returns The property that controls the base opacity.
 * @since 4.9.3.145
*/
	getBaseOpacityControl():DzFloatProperty {
	
	};
	/**
 * @returns The beam distribution.
 * @since 4.9.3.145
*/
	getBeamDistribution():Number {
	
	};
	/**
 * @returns The property that controls beam distribution.
*/
	getBeamDistributionControl():DzFloatProperty {
	
	};
	/**
 * @returns The decay of the light.
 * @since 4.9.3.145
*/
	getDecay():Number {
	
	};
	/**
 * @returns The property used to control decay.
*/
	getDecayControl():DzFloatProperty {
	
	};
	/**
 * @returns true if the cone will be displayed when the node is not selected, otherwise false.
 * @since 4.9.3.145
*/
	getDisplayPersistence():Boolean {
	
	};
	/**
 * @returns The property that controls the display persistence.
 * @since 4.9.3.145
*/
	getDisplayPersistenceControl():DzBoolProperty {
	
	};
	/**
 * @returns The (scaled) edge opacity.
 * @since 4.9.3.145
*/
	getEdgeOpacity():Number {
	
	};
	/**
 * @returns The property that controls the edge opacity.
 * @since 4.9.3.145
*/
	getEdgeOpacityControl():DzFloatProperty {
	
	};
	/**
 * @description TODO:
Add description.
*/
	getFalloffDistance(lightPercent:Number):Number {
	
	};
	/**
 * @returns The exponent (rate of decay from center to edge) of the light.
 * @since 4.8.0.18
*/
	getLightExponent():Number {
	
	};
	/**
 * @returns The property that controls the beam exponent of the light.
 * @since 4.8.0.18
*/
	getLightExponentControl():DzFloatProperty {
	
	};
	/**
 * @description TODO:
Add description.
*/
	getLightVisibility():Boolean {
	
	};
	/**
 * @description TODO:
Add description.
*/
	getLineOpacity():Number {
	
	};
	/**
 * @returns The opacity scale.
 * @since 4.9.3.145
*/
	getOpacityScale():Number {
	
	};
	/**
 * @returns The property that controls the opacity scale.
 * @since 4.9.3.145
*/
	getOpacityScaleControl():DzFloatProperty {
	
	};
	/**
 * @returns The ray length.
 * @since 4.9.3.145
*/
	getRayLength():Number {
	
	};
	/**
 * @returns The property that controls the ray length.
 * @since 4.9.3.145
*/
	getRayLengthControl():DzFloatProperty {
	
	};
	/**
 * @returns The (scaled) ray opacity.
 * @since 4.9.3.145
*/
	getRayOpacity():Number {
	
	};
	/**
 * @returns The property that controls the ray opacity.
 * @since 4.9.3.145
*/
	getRayOpacityControl():DzFloatProperty {
	
	};
	/**
 * @returns true if the base should be shown, otherwise false.
 * @since 4.9.3.145
*/
	getShowBase():Boolean {
	
	};
	/**
 * @returns The property that controls whether or not to show the base control.
 * @since 4.9.3.145
*/
	getShowBaseControl():DzBoolProperty {
	
	};
	/**
 * @returns true if the edge should be shown, otherwise false.
 * @since 4.9.3.145
*/
	getShowEdge():Boolean {
	
	};
	/**
 * @returns The property that controls whether or not to show the edge control.
 * @since 4.9.3.145
*/
	getShowEdgeControl():DzBoolProperty {
	
	};
	/**
 * @returns The spread angle of the light.
 * @since 4.9.3.145
*/
	getSpreadAngle():Number {
	
	};
	/**
 * @returns The property that controls the outer spread angle of the light.
*/
	getSpreadAngleControl():DzFloatProperty {
	
	};
	/**
 * @description Sets the base opacity.
 * @since 4.9.3.145
 * @param opacity - The opacity to set.
*/
	setBaseOpacity(opacity:Number):void {
	
	};
	/**
 * @description Sets beam distribution.
 * @since 4.9.3.145
 * @param distribution - The beam distribution to set.
*/
	setBeamDistribution(distribution:Number):void {
	
	};
	/**
 * @description Sets the amount of decay.
 * @since 4.9.3.145
 * @param decay - The decay to set.
*/
	setDecay(decay:Number):void {
	
	};
	/**
 * @description Sets the persistance of the display cone.
 * @since 4.9.3.145
 * @param persistence - If true, the cone will be displayed when the node is not selected. If false, the cone will not be displayed when the node is not selected.
*/
	setDisplayPersistence(persistence:Boolean):void {
	
	};
	/**
 * @description Sets the edge opacity.
 * @since 4.9.3.145
 * @param opacity - The opacity to set.
*/
	setEdgeOpacity(opacity:Number):void {
	
	};
	/**
 * @description Sets the exponent (rate of decay from center to edge) of the light.
 * @since 4.9.3.145
 * @param exponent - The exponent to set.
*/
	setLightExponent(exponent:Number):void {
	
	};
	/**
 * @description Sets the opacity scale.
 * @since 4.9.3.145
 * @param scale - The scale to set.
*/
	setOpacityScale(scale:Number):void {
	
	};
	/**
 * @description Sets the ray length.
 * @since 4.9.3.145
 * @param length - The length to set.
*/
	setRayLength(length:Number):void {
	
	};
	/**
 * @description Sets the ray opacity.
 * @since 4.9.3.145
 * @param opacity - The opacity to set.
*/
	setRayOpacity(opacity:Number):void {
	
	};
	/**
 * @description Sets whether or not to show the base.
 * @since 4.9.3.145
 * @param yesNo - If true, the base will be shown.
*/
	setShowBase(yesNo:Boolean):void {
	
	};
	/**
 * @description Sets whether or not to show the edge.
 * @since 4.9.3.145
 * @param yesNo - If true, the edge will be shown.
*/
	setShowEdge(yesNo:Boolean):void {
	
	};
	/**
 * @description Sets the spread angle.
 * @since 4.9.3.145
 * @param spreadAngle - The angle to set.
*/
	setSpreadAngle(spreadAngle:Number):void {
	
	};

}
/**
 * @classdesc TODO:
Add detailed description.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/stringhelper_dz} */
class DzStringHelper extends QObject {
	/**
 * @description Default Constructor
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @returns A copy of the input string, with each occurence of a special character replaced by chars
 * @param text - The string to inspect for special characters; using the regular expression "[/\\\\:*?\"<>|!. ]"
 * @param chars - The character(s) to replace each occurence of a special character with
*/
	changeSpecialChars(text:String, chars:String):String {
	
	};
	/**
 * @returns An array of strings, where each element is a match
 * @param text - The string to check for matches
 * @param expression - The regular expression to use
*/
	getMatches(text:String, expression:String):Array {
	
	};
	/**
 * @returns An array of strings, where each element is a word from the input string
 * @param text - The string to split at each space
 * @param removeEmpties - Whether or not to remove empty entries that result from multiple adjacent spaces
*/
	getWords(text:String, removeEmpties:Boolean):Array {
	
	};
	/**
 * @returns A copy of the input string indented the specified number of times
 * @param text - The string to indent
 * @param level - The number of tabs (\t) to prepend to the input string
*/
	indentString(text:String, level:Number):String {
	
	};
	/**
 * @returns A copy of the input string, with chars prepended if it began with a numeric character
 * @param text - The string to inspect for numeric characters; using the regular expression "^[0-9]"
 * @param chars - The character(s) to prepend to the input string if it begines with a numeric character
*/
	prependCharsIfNumeric(text:String, chars:String):String {
	
	};
	/**
 * @returns A copy of the input string with all occurrences of findText replaced by replaceText
 * @param source - The string to replace the specified character(s) in
 * @param findText - The character(s) to replace
 * @param replaceText - The character(s) to replace with
*/
	replaceAll(source:String, findText:String, replaceText:String):String {
	
	};
	/**
 * @returns A copy of the input string with all carriage return and linefeed characters removed
 * @param text - The string to strip all carriage return (\r) and linefeed (\n) characters from
*/
	stripCRLF(text:String):String {
	
	};
	/**
 * @returns A copy of the input string with all spaces removed
 * @param text - The string to strip spaces from
*/
	stripSpaces(text:String):String {
	
	};

}
/**
 * @classdesc TODO:
Add detailed description.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/stringproperty_dz} */
class DzStringProperty extends DzProperty {
	/**
 * @description Default Constructor. Creates a non-user property.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @param name - The name of this property.
 * @param isUserProperty - If true, creates a user property; user properties are properties that can be added/deleted by users.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @returns The string value of this property.
*/
	getValue():String {
	
	};
	/**
 * @description Sets the string value.
 * @param str - The string value to set.
*/
	setValue(val:String):Boolean {
	
	};

}
/**
 * @classdesc Interface Colors
Interface Numbers
Text Styles
Pixel Metrics
Style Hints
Standard Pixmaps
Primitive Elements
Action IconsReset the current style colors to their default values.

### Example:
```
var oStyle = App.getStyle();
for( var i = 0, n = oStyle.getNumInterfaceColors(); i < n; i += 1 ){
	oStyle.setInterfaceColor( i, oStyle.getInterfaceColorDefault( i ) );
}
```
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/style_dz} */
class DzStyle extends QObject {
	/**
 * @description ENUMERATOR: The mode when the user is not interacting with the pixmap, but the item represented by the pixmap is available.
*/
	
	static Normal;
	/**
 * @description ENUMERATOR: The mode when the item represented by the pixmap is not available.
*/
	
	static Disabled;
	/**
 * @description ENUMERATOR: The mode when the item represented by the pixmap is available and the user is interacting with it.
*/
	
	static Active;
	/**
 * @description ENUMERATOR: The mode when the item represented by the pixmap is selected.
*/
	
	static Selected;
	/**
 * @description ENUMERATOR: The pixmap when the widget is in the On state.
*/
	
	static On;
	/**
 * @description ENUMERATOR: The pixmap when the widget is in the Off state.
*/
	
	static Off;
	/**
 * @description Compiles a text-based style definition and its images into a single binary style definition file.
 * @returns true on success, otherwise false.
 * @param infile - The name of the XML-based text style description.
 * @param outfile - The name of the DAZ Studio style definition file to create.
*/
	static compileStyleDefinition(infile:String, outfile:String):DzError {
	
	};
	/**
 * @returns The index of the pixel metric with the given name (if any), otherwise -1.
 * @param name - The name of the pixel metric to find the index of.
*/
	static findPixelMetric(name:String):Number {
	
	};
	/**
 * @returns The index of the primitive element with the given name (if any), otherwise -1.
 * @param name - The name of the primitive element to find the index of.
*/
	static findPrimitiveElement(name:String):Number {
	
	};
	/**
 * @returns The index of the standard pixmap with the given name (if any), otherwise -1.
 * @param name - The name of the standard pixmap to find the index of.
*/
	static findStandardPixmap(name:String):Number {
	
	};
	/**
 * @returns The index of the style hint with the given name (if any), otherwise -1.
 * @param name - The name of the style hint to find the index of.
*/
	static findStyleHint(name:String):Number {
	
	};
	/**
 * @returns The index of the text style with the given name (if any), otherwise -1.
 * @param name - The name of the text style to find the index of.
*/
	static findTextStyle(name:String):Number {
	
	};
	/**
 * @returns The number of pixel metrics.
*/
	getNumPixelMetrics():Number {
	
	};
	/**
 * @returns The number of primitive elements.
*/
	getNumPrimitiveElements():Number {
	
	};
	/**
 * @returns The number of standard pixmaps.
*/
	getNumStandardPixmaps():Number {
	
	};
	/**
 * @returns The number of style hints.
*/
	getNumStyleHints():Number {
	
	};
	/**
 * @returns The number of text styles.
*/
	getNumTextStyles():Number {
	
	};
	/**
 * @returns The name of the pixel metric at the given index (if any), otherwise an empty string.
 * @param which - The index of the pixel metric to get the name of.
*/
	static getPixelMetricName(which:Number):String {
	
	};
	/**
 * @returns The name of the primitive element at the given index (if any), otherwise an empty string.
 * @param which - The index of the primitive element to get the name of.
*/
	static getPrimitiveElementName(which:Number):String {
	
	};
	/**
 * @returns The name of the standard pixmap at the given index (if any), otherwise an empty string.
 * @param which - The index of the standard pixmap to get the name of.
*/
	static getStandardPixmapName(which:Number):String {
	
	};
	/**
 * @returns The name of the style hint at the given index (if any), otherwise an empty string.
 * @param which - The index of the style hint to get the name of.
*/
	static getStyleHintName(which:Number):String {
	
	};
	/**
 * @returns The name of the text style at the given index (if any), otherwise an empty string.
 * @param which - The index of the text style to get the name of.
*/
	static getTextStyleName(which:Number):String {
	
	};
	/**
 * @returns A pixmap from the DzAction with the class name.
*/
	actionPixmap(className:String, mode:PixmapMode, state:PixmapState):Pixmap {
	
	};
	/**
 * @returns The index of the given interface color, or -1 if the color cannot be found.
*/
	findInterfaceColor(name:String):Number {
	
	};
	/**
 * @returns The index of the given interface number, or -1 if the number cannot be found.
 * @since 4.9.0.43
*/
	findInterfaceNumber(name:String):Number {
	
	};
	/**
 * @returns The current value of the given interface color.
*/
	getInterfaceColor(name:String):Color {
	
	};
	/**
 * @returns The current value of the given interface color.
*/
	getInterfaceColor(which:Number):Color {
	
	};
	/**
 * @returns The default value of the given interface color.
*/
	getInterfaceColorDefault(which:Number):Color {
	
	};
	/**
 * @returns A user-readable description for the given interface color.
*/
	getInterfaceColorDescription(which:Number):String {
	
	};
	/**
 * @since 4.9.0.43
*/
	getInterfaceColorDisplaySettings(which:Number, settings:DzSettings):void {
	
	};
	/**
 * @returns The name for the given interface color.
*/
	getInterfaceColorName(which:Number):String {
	
	};
	/**
 * @returns The current value of the given interface number.
 * @since 4.9.0.43
*/
	getInterfaceNumber(name:String, defaultValue:Number):Number {
	
	};
	/**
 * @returns The current value of the given interface number.
 * @since 4.9.0.43
*/
	getInterfaceNumber(which:Number):Number {
	
	};
	/**
 * @returns The default value of the given interface number.
 * @since 4.9.0.43
*/
	getInterfaceNumberDefault(which:Number):Number {
	
	};
	/**
 * @returns A user-readable description for the given interface number.
 * @since 4.9.0.43
*/
	getInterfaceNumberDescription(which:Number):String {
	
	};
	/**
 * @since 4.9.0.43
*/
	getInterfaceNumberDisplaySettings(which:Number, settings:DzSettings):void {
	
	};
	/**
 * @returns The name for the given interface number.
 * @since 4.9.0.43
*/
	getInterfaceNumberName(which:Number):String {
	
	};
	/**
 * @returns The number of user-customizable interface colors for the current style
*/
	getNumInterfaceColors():Number {
	
	};
	/**
 * @returns The number of user-customizable interface numbers for the current style.
 * @since 4.9.0.43
*/
	getNumInterfaceNumbers():Number {
	
	};
	/**
 * @returns The name of the currently active style definition.
*/
	getStyleDefinition():String {
	
	};
	/**
 * @returns The value of the pixel metric with the given name.
 * @param metricName - The name of the pixel metric to get; the name must match one of the pixel metric names from the style definition.
*/
	pixelMetric(metricName:String):Number {
	
	};
	/**
 * @description Sets the given interface color to the new value. The interface will not automatically update - the current style must be reloaded before the changes will take affect.
*/
	setInterfaceColor(which:Number, color:Color):void {
	
	};
	/**
 * @description Sets the given interface number to the new value. The interface will not automatically update - the current style must be reloaded before the changes will take affect.
 * @since 4.9.0.43
*/
	setInterfaceNumber(which:Number, value:Number):void {
	
	};
	/**
 * @returns true if the button icon was set, otherwise false.
 * @param button - The button to set the icon on.
 * @param pixmapName - The name of the pixmap to convert into an icon; the name must match one of the standard pixmap names from the style definition.
*/
	setStyledIcon(button:QAbstractButton, pixmapName:String):Boolean {
	
	};
	/**
 * @returns A pixmap with the given name (if any), otherwise NULL.
 * @param pixmapName - The name of the pixmap to get; the name must match one of the standard pixmap names from the style definition.
*/
	standardPixmap(pixmapName:String):Pixmap {
	
	};
	/**
 * @returns The font of the text style with the given name.
 * @param styleName - The name of the text style to get the font of; the name must match one of the text style names from the style definition.
*/
	textStyle(styleName:String):Font {
	
	};
	/**
 * @returns The color of the text style with the given name.
 * @param styleName - The name of the text style to get the color of; the name must match one of the text style names from the style definition.
*/
	textStyleColor(styleName:String):Color {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description TODO: Add Description
 * @signature `interfaceColorsChanged()`
 * @event
*/
	interfaceColorsChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description TODO: Add Description
 * @signature `interfaceNumbersChanged()`
 * @event
*/
	interfaceNumbersChanged():void {
	
	};

}
/**
 * @classdesc Deprecated
Exists only to keep code written prior to 4.6.2.23 working. Do not use in new code. Use DzTextureLayer.BlendSubtract instead.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/subtractblend_dz} */
class DzSubtractBlend extends  {
	/**
 * @description Default Constructor
 * @constructor
*/
	constructor() {
	
	};

}
/**
 * @classdesc This object provides functions to access and manipulate environment variables. It is accessible via the Global.System variable.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/system_dz} */
class DzSystem extends QObject {
	/**
 * @returns The String stored in environmentVariable.
 * @param environmentVariable - The name of the environment variable to retrieve. The 'environment' only exists within the context of the script process, for the duration of said process.
*/
	getenv(environmentVariable:String):String {
	
	};
	/**
 * @description Deprecated
*/
	print(expression:String):void {
	
	};
	/**
 * @description Deprecated
*/
	println(expression:String):void {
	
	};
	/**
 * @description Sets the value of an environment variable. If the environment variable does not exist, it is created. The environment is only changed within the context of the script process, for the duration of said process.
 * @param environmentVariable - The environment variable to set the value of.
 * @param value - The new value of the environment variable.
*/
	setenv(environmentVariable:String, value:String):void {
	
	};

}
/**
 * @classdesc A DzTabWidget provides a stack of tabbed widgets.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/tabwidget_dz} */
class DzTabWidget extends DzWidget {
	/**
 * @description The number of tabs in the tab stack. (Read-Only)
	*/
	count:Number;
	/**
 * @description The index position of the current tab page.
	*/
	currentIndex:Number;
	/**
 * @description Whether or not the widget is rendered in a mode suitable for document pages, without a frame.
	*/
	documentMode:Boolean;
	/**
 * @description Whether or not the tabs can be reordered.
	*/
	movable:Boolean;
	/**
 * @description Holds which side of the widget the tab row is drawn on.
	*/
	tabPosition:TabPosition;
	/**
 * @description Whether or not close buttons are automatically added to each tab.
	*/
	tabsClosable:Boolean;
	/**
 * @description Whether or not a tab bar should use buttons to scroll tabs when it has many tabs.
	*/
	usesScrollButtons:Boolean;
	/**
 * @description ENUMERATOR: The top of the widget.
*/
	
	static North;
	/**
 * @description ENUMERATOR: The bottom of the widget.
*/
	
	static South;
	/**
 * @description ENUMERATOR: The left of the widget.
*/
	
	static West;
	/**
 * @description ENUMERATOR: The right of the widget.
*/
	
	static East;
	/**
 * @description Creates a tab widget as a child of the given parent widget.
 * @param parent - The widget parent for the tab widget.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Adds page as a new tab with the given label.
 * @returns The index of the added tab
*/
	addTab(page:DzWidget, label:String):Number {
	
	};
	/**
 * @description Removes all the pages, but does not delete them.
*/
	clear():void {
	
	};
	/**
 * @returns The widget shown in the corner of the tab widget or null.
*/
	cornerWidget():DzWidget {
	
	};
	/**
 * @returns The widget for the page currently being displayed.
*/
	currentWidget():DzWidget {
	
	};
	/**
 * @returns The index position of the page occupied by widget, or -1 if widget cannot be found.
*/
	indexOf(page:DzWidget):Number {
	
	};
	/**
 * @description Inserts page as a new tab with the label label at position index.
 * @returns The index of the inserted tab.
*/
	insertTab(index:Number, page:DzWidget, label:String):Number {
	
	};
	/**
 * @returns true if the page at position index is enabled, otherwise false.
*/
	isTabEnabled(index:Number):void {
	
	};
	/**
 * @description Removes the page at index from the tab widget.
 * @attention The widget itself is not deleted.
*/
	removeTab(index:Number):void {
	
	};
	/**
 * @description Sets widget to be shown in the corner of the tab widget.
*/
	setCornerWidget(widget:DzWidget):void {
	
	};
	/**
 * @description Makes widget the current page.
*/
	setCurrentWidget(page:DzWidget):void {
	
	};
	/**
 * @description Sets the enabled state of the page at position index.
*/
	setTabEnabled(index:Number, enable:Boolean):void {
	
	};
	/**
 * @description Sets the label of the page at position index.
*/
	setTabText(index:Number, label:String):void {
	
	};
	/**
 * @description Sets the tool tip text for the page at position index.
*/
	setTabToolTip(index:Number, tip:String):void {
	
	};
	/**
 * @description Sets the what's this text for the page at position index.
*/
	setTabWhatsThis(index:Number, text:String):void {
	
	};
	/**
 * @returns The label of the page at position index.
*/
	tabText(index:Number):String {
	
	};
	/**
 * @returns The tool tip for the page at position index.
*/
	tabToolTip(index:Number):String {
	
	};
	/**
 * @returns The whats this text for the page at position index.
*/
	tabWhatsThis(index:Number):String {
	
	};
	/**
 * @returns The widget for the page at position index.
*/
	widget(index:Number):DzWidget {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted whenever the current page index changes.
 * @signature `"currentChanged(int)"`
 * @event
*/
	currentChanged(index:Number):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the close button on a tab is clicked.
 * @signature `"tabCloseRequested(int)"`
 * @event
*/
	tabCloseRequested(index:Number):void {
	
	};

}
/**
 * @classdesc Extends DzTextEdit (in read-only mode), adding functionality that allows users to navigate hyper-linked documents.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/textbrowser_dz} */
class DzTextBrowser extends DzTextEdit {
	/**
 * @description Holds the number of locations backward in the history. (Read Only)
	*/
	backwardCount:Number;
	/**
 * @description Holds the number of locations forward in the history. (Read Only)
	*/
	forwardCount:Number;
	/**
 * @description Holds whether or not the browser can go backward in the document history. (Read Only)
	*/
	isBackwardAvailable:Boolean;
	/**
 * @description Holds whether or not the browser can go forward in the document history. (Read Only)
	*/
	isForwardAvailable:Boolean;
	/**
 * @description Holds whether or not the browser should open links to external sources using App.showUrl() instead of emitting the anchorClicked signal. Links are considered external if their scheme is not 'file://'. (since 4.9.3.93)
	*/
	openExternalLinks:Boolean;
	/**
 * @description Holds whether or not the browser should automatically open links the user tries to activate by mouse or keyboard.
	*/
	openLinks:Boolean;
	/**
 * @description Holds the search paths used by the browser to find supporting content.
	*/
	searchPaths:Array;
	/**
 * @description Holds the name of the displayed document. This will be empty if the URL is invalid, if no document is displayed, or if the source is unknown.
	*/
	source:String;
	/**
 * @description Creates a text browser widget as a child of the given parent widget.
 * @param parent - The widget parent for the text browser.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Changes the document displayed to the previous document in the list built by navigating links. Does nothing if there is no previous document.
*/
	backward():void {
	
	};
	/**
 * @description Clears the history of visited documents and disables the forward and backward navigation.
 * @since 4.9.3.93
*/
	clearHistory():void {
	
	};
	/**
 * @description Changes the document displayed to the next document in the list built by navigating links. Does nothing if there is no next document.
*/
	forward():void {
	
	};
	/**
 * @returns The DzTextEdit.documentTitle of the history item.
 * @since 4.9.3.93
 * @param index - The zero-based index of the history item.    * index < 0 : backward() history

 index == 0 : current

 index > 0 : forward() history
*/
	historyTitle(index:Number):String {
	
	};
	/**
 * @returns The URL of the history item.
 * @since 4.9.3.93
 * @param index - The zero-based index of the history item.    * index < 0 : backward() history

 index == 0 : current, see source

 index > 0 : forward() history
*/
	historyUrl(index:Number):String {
	
	};
	/**
 * @description Changes the current document displayed to be the first document displayed.
*/
	home():void {
	
	};
	/**
 * @description Reloads the current document.
*/
	reload():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the user clicks an anchor.
 * @signature `"anchorClicked(const QString&,const QString&)"`
 * @event
*/
	anchorClicked(name:String, link:String):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the availability of backward() changes.
 * @signature `"backwardAvailable(bool)"`
 * @event
*/
	backwardAvailable(available:Boolean):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the availability of forward() changes.
 * @signature `"forwardAvailable(bool)"`
 * @event
*/
	forwardAvailable(available:Boolean):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the user selects a link but does not activate it.
 * @signature `"highlighted(const QString&)"`
 * @event
*/
	highlighted(link:String):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the history changes.
 * @signature `"historyChanged()"`
 * @event
*/
	historyChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the user clicks a link.
 * @signature `"linkClicked(const QString&)"`
 * @event
*/
	linkClicked(link:String):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the mime source of the browser changes.
 * @signature `"sourceChanged(const QString&)"`
 * @event
*/
	sourceChanged(src:String):void {
	
	};

}
/**
 * @classdesc A DzTextEdit provides a powerful single-page rich text editor widget.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/textedit_dz} */
class DzTextEdit extends DzWidget {
	/**
 * @description Holds whether or not the text edit accepts rich text insertions by the user.
	*/
	acceptRichText:Boolean;
	/**
 * @description Holds the enabled set of auto formatting features.
	*/
	autoFormatting:AutoFormattingFlag;
	/**
 * @description Holds the number of text blocks (e.g., paragraphs) in the document. (Read-Only)
	*/
	blockCount:Number;
	/**
 * @description Holds whether or not the font of the current format is bold.
	*/
	bold:Boolean;
	/**
 * @description Holds the number of characters in the text. (Read-Only)
	*/
	characterCount:Number;
	/**
 * @description Holds the width of the cursor in pixels.
	*/
	cursorWidth:Number;
	/**
 * @description Holds the title of the document.
	*/
	documentTitle:String;
	/**
 * @description Holds the font family of the current format.
	*/
	family:String;
	/**
 * @description Holds the font of the current format.
	*/
	font:Font;
	/**
 * @description Holds the editor's contents as HTML.
	*/
	html:String;
	/**
 * @description Holds whether or not the font of the current format is italic.
	*/
	italic:Boolean;
	/**
 * @description Holds the number of lines in the text. (Read-Only)
	*/
	lineCount:Number;
	/**
 * @description Holds the position (in pixels or columns depending on the lineWrapMode) where text will be wrapped.
	*/
	lineWrapColumnOrWidth:Number;
	/**
 * @description Holds the mode the editor will use when wrapping text within words.
	*/
	lineWrapMode:LineWrapMode;
	/**
 * @description Holds whether or not the text in the editor has been modified.
	*/
	modified:Boolean;
	/**
 * @description Holds whether or not text entered by the user will overwrite existing text.
	*/
	overwriteMode:Boolean;
	/**
 * @description Holds the editor's contents as plain text.
	*/
	plainText:String;
	/**
 * @description Holds the point size of the font of the current format.
	*/
	pointSize:Number;
	/**
 * @description Holds whether or not the text in the editor can be edited by the user.
	*/
	readOnly:Boolean;
	/**
 * @description Holds whether or not a redo operation is available. (Read Only)
	*/
	redoAvailable:Boolean;
	/**
 * @description Holds the selected text (if any) of the editor.
	*/
	selectedText:String;
	/**
 * @description Holds whether or not pressing the Tab key changes focus or is accepted as input.
	*/
	tabChangesFocus:Boolean;
	/**
 * @description Holds the tab stop width in pixels; default is 80.
	*/
	tabStopWidth:Number;
	/**
 * @description Holds the text of the editor.
	*/
	text:String;
	/**
 * @description Holds the text background color of the current format.
	*/
	textBackgroundColor:Color;
	/**
 * @description Holds the text color of the current format.
	*/
	textColor:Color;
	/**
 * @description Holds the value that is used to determine how the label reacts to user input.
	*/
	textInteractionFlags:DzWidget;
	/**
 * @description Holds whether or not the font of the current format is underlined.
	*/
	underline:Boolean;
	/**
 * @description Holds whether or not an undo operation is available. (Read Only)
	*/
	undoAvailable:Boolean;
	/**
 * @description Holds whether or not undo and redo are enabled.
	*/
	undoRedoEnabled:Boolean;
	/**
 * @description Holds the font weight of the current format. 25 = Light, 50 = Normal, 63 = DemiBold, 75 = Bold, 87 = Black.
	*/
	weight:Number;
	/**
 * @description Holds the mode the editor will use when wrapping text by words.
	*/
	wordWrapMode:WrapMode;
	/**
 * @description ENUMERATOR: Do not perform any automatic formatting.
*/
	
	static AutoNone;
	/**
 * @description ENUMERATOR: Only automatically format bullet lists.
*/
	
	static AutoBulletList;
	/**
 * @description ENUMERATOR: Apply all available auto-formatting.
*/
	
	static AutoAll;
	/**
 * @description ENUMERATOR: Do not wrap the text.
*/
	
	static NoLineWrap;
	/**
 * @description ENUMERATOR: Wrap the text at the current width of the widget.
*/
	
	static WidgetWidth;
	/**
 * @description ENUMERATOR: Wrap the text at a fixed number of pixels from the widget's left side.
*/
	
	static FixedPixelWidth;
	/**
 * @description ENUMERATOR: Wrap the text at a fixed number of character columns from the widget's left side.
*/
	
	static FixedColumnWidth;
	/**
 * @description ENUMERATOR: Do not wrap the text at all.
*/
	
	static NoWrap;
	/**
 * @description ENUMERATOR: Wrap the text at word boundaries.
*/
	
	static WordWrap;
	/**
 * @description ENUMERATOR: Same as NoWrap.
*/
	
	static ManualWrap;
	/**
 * @description ENUMERATOR: Wrap the text at any point on a line, even if it occurs in the middle of a word.
*/
	
	static WrapAnywhere;
	/**
 * @description ENUMERATOR: If possible, WordWrap, otherwise WrapAnywhere.
*/
	
	static WrapAtWordBoundaryOrAnywhere;
	/**
 * @description Creates a text edit widget as a child of the given parent widget.
 * @param parent - The widget parent for the text edit.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @returns The name of the anchor at position pos, or an empty string if no anchor exists at that point.
 * @since 4.9.3.93
 * @param pos - The position to get the anchor at.
*/
	anchorAt(pos:Point):String {
	
	};
	/**
 * @description Adds text as a new paragraph to the end of the editor.
 * @since 4.9.3.93
 * @param text - The text to add.
*/
	append(text:String):void {
	
	};
	/**
 * @description If text is currently selected, it will be deleted and the cursor moved to the beginning of the selection. If no text is selected, the cursor will be moved one character to the left and the character will be deleted.
 * @since 4.9.3.93
*/
	backspace():void {
	
	};
	/**
 * @description If a word is currently selected, it will be deleted and the cursor moved to the beginning of the selection. If no word is selected, the cursor will be moved one word to the left and the word will be deleted.
 * @since 4.9.3.93
*/
	backspaceWord():void {
	
	};
	/**
 * @description Removes all text from the editor.
 * @since 4.9.3.93
*/
	clear():void {
	
	};
	/**
 * @description Copies the selected text into the clipboard.
 * @since 4.9.3.93
*/
	copy():void {
	
	};
	/**
 * @description Moves the cursor backward the given number of characters.
 * @since 4.9.3.93
 * @param mark - If true, each character that is stepped over will be added to the current selection.
 * @param steps - The number of characters to move the cursor.
*/
	cursorBackward(mark:Boolean, steps:Number):void {
	
	};
	/**
 * @description Moves the cursor forward the given number of characters.
 * @since 4.9.3.93
 * @param mark - If true, each character that is stepped over will be added to the current selection.
 * @param steps - The number of characters to move the cursor.
*/
	cursorForward(mark:Boolean, steps:Number):void {
	
	};
	/**
 * @description Moves the cursor backward one word.
 * @since 4.9.3.93
 * @param mark - If true, the word will be added to the current selection.
 * @param steps - The number of words to move the cursor.
*/
	cursorWordBackward(mark:Boolean, steps:Number):void {
	
	};
	/**
 * @description Moves the cursor forward one word.
 * @since 4.9.3.93
 * @param mark - If true, the word will be added to the current selection.
 * @param steps - The number of words to move the cursor.
*/
	cursorWordForward(mark:Boolean, steps:Number):void {
	
	};
	/**
 * @description Copies the selected text into the clipboard, and removes it from the editor.
 * @since 4.9.3.93
*/
	cut():void {
	
	};
	/**
 * @description If text is currently selected, it will be deleted and the cursor moved to the beginning of the selection. If no text is selected, the character to the right of the cursor will be deleted.
 * @since 4.9.3.93
*/
	del():void {
	
	};
	/**
 * @description If a word is currently selected, it will be deleted and the cursor moved to the beginning of the selection. If no word is selected, the word to the right of the cursor will be deleted.
 * @since 4.9.3.93
*/
	deleteWord():void {
	
	};
	/**
 * @description Moves the cursor to the line below the current line.
 * @since 4.9.3.93
 * @param mark - If true, the text from the position of the cursor in the line below the current line to the cursor's previous position will be added to the current selection.
 * @param steps - The number of lines to move the cursor.
*/
	down(mark:Boolean, steps:Number):void {
	
	};
	/**
 * @description Moves the cursor to the end of the document.
 * @since 4.9.3.93
 * @param mark - If true, the text from the cursor's previous position to the end of the document will be added to the current selection.
*/
	end(mark:Boolean):void {
	
	};
	/**
 * @description Ensures that the cursor is visible by scrolling the editor if necessary.
 * @since 4.9.3.93
*/
	ensureCursorVisible():void {
	
	};
	/**
 * @description Finds the next occurrence of expression using the given options and changes the cursor to select the match.
 * @returns true if expression was found, otherwise false.
 * @since 4.9.3.93
 * @param expression - The expression to find.
 * @param caseSensitive - If true, the search is case sensitive.
 * @param wholeWord - If true, the search looks for whole words.
 * @param backward - If true, the search is performed in the reverse direction.
*/
	find(expression:String, caseSensitive:Boolean, wholeWord:Boolean, backward:Boolean):Boolean {
	
	};
	/**
 * @returns true if text is selected, otherwise false.
*/
	hasSelectedText():Boolean {
	
	};
	/**
 * @description Moves the cursor to the beginning of the document.
 * @since 4.9.3.93
 * @param mark - If true, the text from the beginning of the document to the cursor's previous position will be added to the current selection.
*/
	home(mark:Boolean):void {
	
	};
	/**
 * @description Splits the block (paragraph) at the cursor position.
 * @since 4.9.3.93
*/
	insertBlock():void {
	
	};
	/**
 * @description Inserts text, which is assumed to be HTML formatted, at the current cursor position.
 * @since 4.9.3.93
 * @param text - The HTML formatted text to insert.
*/
	insertHtml(text:String):void {
	
	};
	/**
 * @description Inserts text at the current cursor position.
 * @since 4.9.3.93
 * @param text - The text to insert.
*/
	insertPlainText(text:String):void {
	
	};
	/**
 * @description Moves the cursor to the end of the line.
 * @since 4.9.3.93
 * @param mark - If true, the text from the cursor's previous position to the end of the line will be added to the current selection.
*/
	lineEnd(mark:Boolean):void {
	
	};
	/**
 * @description Moves the cursor to the beginning of the line.
 * @since 4.9.3.93
 * @param mark - If true, the text from the beginning of the line to the cursor's previous position will be added to the current selection.
*/
	lineStart(mark:Boolean):void {
	
	};
	/**
 * @description Moves the cursor a page down in the document.
 * @since 4.9.3.93
 * @param mark - If true, the text from the cursor's previous position to a page down in the document will be added to the current selection.
*/
	pageDown(mark:Boolean):void {
	
	};
	/**
 * @description Moves the cursor a page up in the document.
 * @since 4.9.3.93
 * @param mark - If true, the text from a page up in the document to the cursor's previous position will be added to the current selection.
*/
	pageUp(mark:Boolean):void {
	
	};
	/**
 * @description Inserts any text on the clipboard into the line at the cursor's current position.
 * @since 4.9.3.93
*/
	paste():void {
	
	};
	/**
 * @description If redoAvailable is true, redoes the next operation in the editor.
 * @since 4.9.3.93
*/
	redo():void {
	
	};
	/**
 * @description Scrolls the editor to make the text at the anchor name visible, if it can be found in the document. If the anchor isn't found no scrolling will occur. An anchor is defined using the HTML anchor tag, e.g., <a name="target">.
 * @since 4.9.3.93
 * @param name - The name of the anchor to scroll to.
*/
	scrollToAnchor(name:String):void {
	
	};
	/**
 * @description Selects all the text in the editor.
 * @since 4.9.3.93
*/
	selectAll():void {
	
	};
	/**
 * @returns The selected text (if any), or an empty string.
*/
	selectedText():String {
	
	};
	/**
 * @returns The character position at which the current selection ends.
*/
	selectionEnd():Number {
	
	};
	/**
 * @returns The character position at which the current selection begins.
*/
	selectionStart():Number {
	
	};
	/**
 * @returns If blockIdx is in range, the text of the block at blockIdx, otherwise an empty string.
 * @param blockIdx - The index of the block to get the text of.
*/
	text(blockIdx:Number):String {
	
	};
	/**
 * @description If undoAvailable is true, undoes the last operation in the editor.
 * @since 4.9.3.93
*/
	undo():void {
	
	};
	/**
 * @description Moves the cursor to the line above the current line.
 * @since 4.9.3.93
 * @param mark - If true, the text from the position of the cursor in the line above the current line to the cursor's previous position will be added to the current selection.
 * @param steps - The number of lines to move the cursor.
*/
	up(mark:Boolean, steps:Number):void {
	
	};
	/**
 * @description Zooms in on the text by making the base font size range points larger and recalculating all font sizes to be the new size.
 * @since 4.9.3.93
 * @param range - The number of points to increase the fonts sizes by.
*/
	zoomIn(range:Number):void {
	
	};
	/**
 * @description Zooms out on the text by making the base font size range points smaller and recalculating all font sizes to be the new size.
 * @since 4.9.3.93
 * @param range - The number of points to decrease the fonts sizes by.
*/
	zoomOut(range:Number):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when text is selected or de-selected in the editor.
 * @signature `"copyAvailable(bool)"`
 * @event
*/
	copyAvailable(yesNo:Boolean):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the position of the cursor has changed.
 * @signature `"cursorPositionChanged()"`
 * @event
*/
	cursorPositionChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the availability of redo changes. If yesNo is true, redo() will work until redoAvailable(false) is next emitted.
 * @signature `"redoAvailable(bool)"`
 * @event
*/
	redoAvailable(yesNo:Boolean):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the selection changes.
 * @signature `"selectionChanged()"`
 * @event
*/
	selectionChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the text in the editor changes.
 * @signature `"textChanged()"`
 * @event
*/
	textChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the availability of undo changes. If yesNo is true, undo() will work until undoAvailable(false) is next emitted.
 * @signature `"undoAvailable(bool)"`
 * @event
*/
	undoAvailable(yesNo:Boolean):void {
	
	};

}
/**
 * @classdesc This is a sharable object that stores information for a texture (image map) that is used in OpenGL. Do not create a texture, rather, request one from DzImageMgr - this insures that there is only one instance of a given image in memory at a time, and also ensures that necessary conversions for rendering the image via OpenGL and offline renderers occurs correctly.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/texture_dz} */
class DzTexture extends DzRefCountedItem, QObject {
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static Standard;
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static LatLong;
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static LightProbe;
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static CustomTexture;
	/**
 * @returns The source file name for this image.
*/
	getFilename():String {
	
	};
	/**
 * @returns The gamma of the source file for this image.
 * @attention This is used for gamma correction; gamma ⇐ 0 - do best guess of the image gamma; gamma == 1 - no gamma correction needed; gamma > 0 != 1 - the image is at the specified gamma.
*/
	getGamma():Number {
	
	};
	/**
 * @returns The actual size of the OpenGL texture alpha image.
*/
	getGLAlphaTextureSize():Size {
	
	};
	/**
 * @returns The actual size of the OpenGL texture image.
*/
	getGLTextureSize():Size {
	
	};
	/**
 * @returns The size of the original image that was the source of this texture.
*/
	getOriginalImageSize():Size {
	
	};
	/**
 * @returns A preview pixmap of this texture with the specified size.
 * @param size - The size for the pixmap.
*/
	getPreviewPixmap(size:Size):Pixmap {
	
	};
	/**
 * @returns A preview pixmap of this texture with the specified dimensions.
 * @param width - The width for the pixmap.
 * @param height - The height for the pixmap.
*/
	getPreviewPixmap(width:Number, height:Number):Pixmap {
	
	};
	/**
 * @returns The revision of this texture.
 * @since 4.12.0.75
*/
	getRevision():Number {
	
	};
	/**
 * @returns The temporary file name for this image.
*/
	getTempFilename():String {
	
	};
	/**
 * @returns The texture type of this texture.
*/
	getTextureType():Number {
	
	};
	/**
 * @since 4.12.0.75
 * @param emitDataChanged - wether or not to emit drawnDataChanged signal
*/
	incrementRevision(Boolean):void {
	
	};
	/**
 * @description Loads the image data from the specified image into this texture.
 * @returns true if the image data was loaded, false if there was an error or the image could not be loaded.
 * @since 4.6.2.23
 * @param image - The image to load the data from.
*/
	loadImageData(image:Image):Boolean {
	
	};
	/**
 * @description Reloads the image if its source file has changed.
*/
	refresh():void {
	
	};
	/**
 * @param gamma - The gamma to set; gamma ⇐ 0 - do best guess of the image gamma; gamma == 1 - no gamma correction needed; gamma > 0 != 1 - the image is at the specified gamma.
*/
	setGamma(gamma:Number):void {
	
	};
	/**
 * @description Sets the texture type for this texture.
 * @param val - The texture type to set.
*/
	setTextureType(val:Number):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the data of the texture has changed - e.g. after a call to refresh()
 * @signature `"drawnDataChanged()"`
 * @event
*/
	drawnDataChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the temporary filename for the image has changed.
 * @signature `"tempFilenameChanged(const QString&)"`
 * @event
*/
	tempFilenameChanged(filename:String):void {
	
	};

}
/**
 * @classdesc See Also:
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/texturecomponent_dz} */
class DzTextureComponent extends QObject {
	/**
 * @description Holds the color of the component.
	*/
	color:Color;
	/**
 * @description Holds whether or not the component is enabled.
	*/
	enabled:Boolean;
	/**
 * @description Holds whether or not the component is flipped horizontally.
	*/
	flippedHorizontal:Boolean;
	/**
 * @description Holds whether or not the component is flipped vertically.
	*/
	flippedVertical:Boolean;
	/**
 * @description Holds the path of the image file for the component.
	*/
	imageFile:String;
	/**
 * @description Holds whether or not the color channels of the component are inverted.
	*/
	invert:Boolean;
	/**
 * @description Holds the label of the component.
	*/
	label:String;
	/**
 * @description Holds the offset of the component.
	*/
	offset:Point;
	/**
 * @description Holds the opacity of the component. This should be in the range 0.0 - 1.0.
	*/
	opacity:Number;
	/**
 * @description Holds the rotation of the component.
	*/
	rotation:Rotation;
	/**
 * @description Holds the horizontal offset of the component.
	*/
	xOffset:Number;
	/**
 * @description Holds the scale of the component across its width.
	*/
	xScale:Number;
	/**
 * @description Holds the vertical offset of the component.
	*/
	yOffset:Number;
	/**
 * @description Holds the scale of the component across its height.
	*/
	yScale:Number;
	/**
 * @description ENUMERATOR: No rotation is performed.
*/
	
	static RotNone;
	/**
 * @description ENUMERATOR: A 90 degree (clockwise) rotation is performed.
*/
	
	static Rot90;
	/**
 * @description ENUMERATOR: A 180 degree rotation is performed.
*/
	
	static Rot180;
	/**
 * @description ENUMERATOR: A 270 degree (clockwise) rotation is performed.
*/
	
	static Rot270;
	/**
 * @description Copies another texture component into this one.
 * @param comp - The texture component to copy from.
*/
	copyFrom(comp:DzTextureComponent):DzTextureComponent {
	
	};
	/**
 * @description Flips the image horizontally and/or vertically.
 * @param horizontal - If true, the image is flipped horizontally.
 * @param vertical - If true, the image is flipped vertically.
*/
	flip(horizontal:Boolean, vertical:Boolean):void {
	
	};
	/**
 * @description Loads image data from the specified image.
 * @returns true if image data is loaded, otherwise false.
 * @param image - The image to load data from.
*/
	loadImageData(image:Image):Boolean {
	
	};
	/**
 * @returns true if this texture component has been modified on disk since it was last loaded/updated, otherwise false.
*/
	needsImageRefresh():Boolean {
	
	};
	/**
 * @description Sets the scale of the component.
 * @since 4.11.0.225
 * @param xScale - The scale of the component across its width. 1.0 is equivalent to 100%.
 * @param yScale - The scale of the component across its height. 1.0 is equivalent to 100%.
*/
	setScale(xScale:Number, yScale:Number):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the color of the texture component has changed.
 * @signature `"colorChanged(const QColor&)"`
 * @event
*/
	colorChanged(color:Color):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the data of the texture component has changed.
 * @signature `"dataChanged()"`
 * @event
*/
	dataChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the enabled state of the texture component has changed.
 * @signature `"enabledChanged(bool)"`
 * @event
*/
	enabledChanged(onOff:Boolean):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the state of whether or not the texture component has been flipped horizontally has changed.
 * @signature `"flippedHorizontalChanged(bool)"`
 * @event
*/
	flippedHorizontalChanged(onOff:Boolean):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the state of whether or not the texture component has been flipped vertically has changed.
 * @signature `"flippedVerticalChanged(bool)"`
 * @event
*/
	flippedVerticalChanged(onOff:Boolean):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the filename of the image for the texture component has changed.
 * @signature `"imageChanged(const QString&)"`
 * @event
*/
	imageChanged(filename:String):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the state of whether or not the texture component has been inverted has changed.
 * @signature `"invertedChanged(bool)"`
 * @event
*/
	invertedChanged(onOff:Boolean):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the label of the texture component has changed.
 * @signature `"labelChanged(const QString&)"`
 * @event
*/
	labelChanged(label:String):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the offset position of the texture component has changed.
 * @signature `"offsetChanged(const QPoint&)"`
 * @event
*/
	offsetChanged(offset:Point):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the opacity of the texture component has changed.
 * @signature `"opacityChanged(float)"`
 * @event
*/
	opacityChanged(opacity:Number):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the rotation of the texture component has changed.
 * @signature `"rotationChanged(DzTextureComponent.Rotation)"`
 * @event
*/
	rotationChanged(rotation:Rotation):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the scale of the texture component has changed.
 * @signature `"scaleChanged(float,float)"`
 * @event
*/
	scaleChanged(x:Number, y:Number):void {
	
	};

}
/**
 * @classdesc Layers are used in image editing to manipulate the final values of pixels in an image, in a non-destructive way. Layers exist in a stack. Layers that are higher in the stack impact layers that are lower in the stack. Transparent and/or translucent pixels in one layer allow the pixels in the next lower layer to be revealed.
Layers can also be used to blend the values of pixels together in various ways.
See Also:
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/texturelayer_dz} */
class DzTextureLayer extends DzTextureComponent {
	/**
 * @description Holds the blend mode of the texture layer.
	*/
	blendMode:BlendMode;
	/**
 * @description ENUMERATOR: A blending operation that uses the alpha channel of the layer to blend it into the values of the lower layers.
*/
	
	static BlendAlpha;
	/**
 * @description ENUMERATOR: An additive image blending operation; the values of the layer are added to the values of the lower layers.
*/
	
	static BlendAdd;
	/**
 * @description ENUMERATOR: A subtractive image blending operation; the values of the layer are subtracted from the values of the lower layers.
*/
	
	static BlendSubtract;
	/**
 * @description ENUMERATOR: A multiplicative image blending operation; the values of the layer are multiplied with the values of the lower layers.
*/
	
	static BlendMultiply;
	/**
 * @description Removes any mask that may be on this layer.
*/
	clearMask():void {
	
	};
	/**
 * @description Creates a mask for this texture layer.
 * @returns The mask on this layer, otherwise null. If a mask already exists on this layer, the mask's label is changed to the label specified. If a mask does not exist on this layer, a new mask is created and assigned the label specified.
 * @param maskLabel - The label of the mask.
*/
	createMask(maskLabel:String):DzTextureMask {
	
	};
	/**
 * @returns The mask on this layer (if any), otherwise null.
*/
	getMask():DzTextureMask {
	
	};
	/**
 * @returns true if this texture layer has a mask that needs to be refreshed or this layer has been modified on disk since it was last loaded/updated, otherwise false.
*/
	needsRefresh():Boolean {
	
	};
	/**
 * @description Sets a mask on this texture layer.
 * @param mask - The mask to set.
*/
	setMask(mask:DzTextureMask):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted just before the mask for the texture layer is changed.
 * @signature `"aboutToChangeMask(DzTextureMask*,DzTextureMask*)"`
 * @event
*/
	aboutToChangeMask(oldMask:DzTextureMask, newMask:DzTextureMask):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the blend mode the texture layer has changed.
 * @signature `"blendModeChanged(DzTextureLayer.BlendMode)"`
 * @event
*/
	blendModeChanged(mode:BlendMode):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the mask for the texture layer has changed.
 * @signature `"maskChanged(DzTextureMask*,DzTextureMask*)"`
 * @event
*/
	maskChanged(oldMask:DzTextureMask, newMask:DzTextureMask):void {
	
	};

}
/**
 * @classdesc A texture mask is used in a non-destructive process to hide some portions of a texture layer and reveal others. White values in the mask allow the full value of the underlying texture layer to be shown, and black values in the mask completely block the underlying texture layer from being shown. The range of values between white and black gradually transition between completely shown and completely blocked. When color values are used in the mask, the value of each RGB channel in the color has the same effect on whether or not that channel is shown or blocked.
See Also:
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/texturemask_dz} */
class DzTextureMask extends DzTextureComponent {

}
/**
 * @classdesc See Also:
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/texturemodifier_dz} */
class DzTextureModifier extends DzRefCountedItem, DzBase {
	/**
 * @description Holds the grayscale mode of this texture modifier.
	*/
	grayscaleMode:GrayscaleMode;
	/**
 * @description Holds the number of horizontal tiles for this texture modifier.
	*/
	horizontalTiles:Number;
	/**
 * @description Holds the horizontal tiling offset of this texture modifier.
	*/
	horizontalTilingOffset:Number;
	/**
 * @description Holds whether or not this texture modifier inverts colors.
	*/
	invert:Boolean;
	/**
 * @description Holds the offset of this texture modifier.
	*/
	offset:Number;
	/**
 * @description Holds the scale of this texture modifier.
	*/
	scale:Number;
	/**
 * @description Holds the number of vertical tiles for this texture modifier.
	*/
	verticalTiles:Number;
	/**
 * @description Holds the vertical tiling offset of this texture modifier.
	*/
	verticalTilingOffset:Number;
	/**
 * @description ENUMERATOR: Uses the alpha channel from the texture as the grayscale value.
*/
	
	static Alpha;
	/**
 * @description ENUMERATOR: Uses the average of the R, G and B values for a given pixel in the texture as the grayscale value.
*/
	
	static Average;
	/**
 * @description ENUMERATOR: Use the luminance as calculated from the R, G and B values for a given pixel in the texture as the grayscale value.
*/
	
	static Luminance;
	/**
 * @description ENUMERATOR: Uses the maximum as calculated from the R, G and B values for a given pixel in the texture as the grayscale value.
*/
	
	static Maximum;
	/**
 * @description ENUMERATOR: Uses the R value for a given pixel in the texture as the grayscale value. Since: 4.14.0.2
*/
	
	static RedChannel;
	/**
 * @description ENUMERATOR: Uses the G value for a given pixel in the texture as the grayscale value. Since: 4.14.0.2
*/
	
	static GreenChannel;
	/**
 * @description ENUMERATOR: Uses the B value for a given pixel in the texture as the grayscale value. Since: 4.14.0.2
*/
	
	static BlueChannel;
	/**
 * @description ENUMERATOR: The same as Average.
*/
	
	static GrayscaleDefault;
	/**
 * @description ENUMERATOR: Does not modify the texture.
*/
	
	static NoModification;
	/**
 * @description ENUMERATOR: Modifies the scale of the texture.
*/
	
	static Scale;
	/**
 * @description ENUMERATOR: Modifies the position of the texture.
*/
	
	static Offset;
	/**
 * @description ENUMERATOR: Inverts the colors of the texture.
*/
	
	static Invert;
	/**
 * @description ENUMERATOR: Modifies the grayscale mode of the texture.
*/
	
	static Grayscale;
	/**
 * @description ENUMERATOR: Modifies the local tiling of the texture.
*/
	
	static LocalTiling;
	/**
 * @description ENUMERATOR: The modification is invalid.
*/
	
	static InvalidModification;
	/**
 * @description Default constructor.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @returns The calculated offset based on the specified modification flags.
 * @param modificationFlags - A bitwise OR of the modification flags to calaculate the offset from.
*/
	calcOffset(modificationFlags:Modifications):Number {
	
	};
	/**
 * @returns The calculated offset based on the specified modification flags.
 * @since 4.14.1.8
 * @param modificationFlags - A bitwise OR of the modification flags to calaculate the offset from.
 * @param flipPolarity - Whether values in the image should be flipped or not (ie black = 1, white = 0)
*/
	calcOffset(modificationFlags:Modifications, flipPolarity:Boolean):Number {
	
	};
	/**
 * @returns The calculated scale based on the specified modification flags.
 * @param modificationFlags - A bitwise OR of the modification flags to calaculate the scale from.
*/
	calcScale(modificationFlags:Modifications):Number {
	
	};
	/**
 * @returns The calculated scale based on the specified modification flags.
 * @since 4.14.1.8
 * @param modificationFlags - A bitwise OR of the modification flags to calaculate the scale from.
 * @param flipPolarity - Whether values in the image should be flipped (black = 1, white = 0) or not
*/
	calcScale(modificationFlags:Modifications, flipPolarity:Boolean):Number {
	
	};
	/**
 * @returns A deep copy of this texture modifier.
*/
	duplicate():DzTextureModifier {
	
	};
	/**
 * @description Populates the given settings object with the attributes of this texture modifier.
 * @param settings - The settings object to populate.
 * @param modFlags - A bitwise OR of the modifier flags to set.
*/
	getAttributes(settings:DzSettings, modFlags:Modifications):void {
	
	};
	/**
 * @returns The grayscale mode based on the specified modification flags.
 * @param modificationFlags - A bitwise OR of the modification flags to get the grayscale mode from.
*/
	getGrayscaleMode(modificationFlags:Modifications):Number {
	
	};
	/**
 * @returns The number of horizontal tiles for the specified modification flags.
 * @param modificationFlags - A bitwise OR of the modification flags to get the number of horizontal tiles from.
*/
	getHorizontalTiles(modificationFlags:Modifications):Number {
	
	};
	/**
 * @returns The horizontal tiling offset based on the specified modification flags.
 * @param modificationFlags - A bitwise OR of the modification flags to get the horizontal tiling offset from.
*/
	getHorizontalTilingOffset(modificationFlags:Modifications):Number {
	
	};
	/**
 * @returns The offset based on the specified modification flags.
 * @param modificationFlags - A bitwise OR of the modification flags to get the offset from.
*/
	getOffset(modificationFlags:Modifications):Number {
	
	};
	/**
 * @returns The scale based on the specified modification flags.
 * @param modificationFlags - A bitwise OR of the modification flags to get the scale from.
*/
	getScale(modificationFlags:Modifications):Number {
	
	};
	/**
 * @returns The number of vertical tiles for the specified modification flags.
 * @param modificationFlags - A bitwise OR of the modification flags to get the number of vertical tiles from.
*/
	getVerticalTiles(modificationFlags:Modifications):Number {
	
	};
	/**
 * @returns The vertical tiling offset based on the specified modification flags.
 * @param modificationFlags - A bitwise OR of the modification flags to get the vertical tiling offset from.
*/
	getVerticalTilingOffset(modificationFlags:Modifications):Number {
	
	};
	/**
 * @returns true if this texture modifier is in its default state, otherwise false.
 * @param modificationFlags - A bitwise OR of the modification flags that define 'default.'
*/
	isDefault(modificationFlags:Modifications):Boolean {
	
	};
	/**
 * @returns The inverted state based on the specified modification flags.
 * @since 4.14.1.8
 * @param modificationFlags - A bitwise OR of the modification flags to get the inverted state from.
 * @param flipPolarity - Whether values in the image should be flipped or not (ie black = 1, white = 0)
*/
	isInverted(modificationFlag:Modifications, flipPolaritys:Boolean):Boolean {
	
	};
	/**
 * @returns The inverted state based on the specified modification flags.
 * @param modificationFlags - A bitwise OR of the modification flags to get the inverted state from.
*/
	isInverted(modificationFlags:Modifications):Boolean {
	
	};
	/**
 * @description Resets this texture modifier.
*/
	reset():void {
	
	};
	/**
 * @description Sets the attributes of this texture modifier using settings.
 * @param settings - The settings with the data to set.
 * @param modFlags - A bitwise OR of the modifier flags to set.
 * @param oldMod - The texture modifier (if any) to use for default values if a named value cannot be found in settings.
*/
	setAttributes(settings:DzSettings, modFlags:Modifications, oldMod:DzTextureModifier):DzTextureModifier {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the grayscale mode of the texture modifier has changed.
 * @signature `"grayscaleModeChanged()"`
 * @event
*/
	grayscaleModeChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the number of horizontal tiles for the texture modifier has changed.
 * @signature `"horizontalTilesChanged()"`
 * @event
*/
	horizontalTilesChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the horizontal tiling offset of the texture modifier has changed.
 * @signature `"horizontalTilingOffsetChanged()"`
 * @event
*/
	horizontalTilingOffsetChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the inversion of the texture modifier has changed.
 * @signature `"invertedChanged()"`
 * @event
*/
	invertedChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the offset of the texture modifier has changed.
 * @signature `"offsetChanged()"`
 * @event
*/
	offsetChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the scale of the texture modifier has changed.
 * @signature `"scaleChanged()"`
 * @event
*/
	scaleChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the settings of the texture modifier have changed.
 * @signature `"settingsChanged()"`
 * @event
*/
	settingsChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the number of vertical tiles for the texture modifier has changed.
 * @signature `"verticalTilesChanged()"`
 * @event
*/
	verticalTilesChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the vertical tiling offset of the texture modifier has changed.
 * @signature `"verticalTilingOffsetChanged()"`
 * @event
*/
	verticalTilingOffsetChanged():void {
	
	};

}
/**
 * @classdesc DzTime is used for storing and passing time values. Time references in DAZ Studio are stored in 'ticks' - there are 4800 ticks per second. This number was chosen because of its divisibility by typical frame rates. For example, at 60 fps (frames per second) there are 80 ticks between each frame; at 30 fps, 160 ticks; at 20 fps, 180 ticks; etc.
Attention:@attention Attention:Number : valueOf()

### Example:
```
var oTimeStep = Scene.getTimeStep();
print( typeof oTimeStep );
 
var nTimeStep = oTimeStep.valueOf();
print( nTimeStep );
 
var oTime = Scene.getTime();
print( typeof oTime );
 
var nTime = oTime.valueOf();
print( nTime );
 
Scene.setTime( nTimeStep * 2 );
 
oTime = Scene.getTime();
print( typeof oTime );
 
nTime = oTime.valueOf();
print( nTime );
```
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/time_dz} */
class DzTime {
	/**
 * @returns The value of the DzTime as a Number.
*/
	valueOf():Number {
	
	};

}
/**
 * @classdesc A DzTimeEdit provides a time editor.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/timeedit_dz} */
class DzTimeEdit extends DzDateTimeEdit {
	/**
 * @description Holds the maximum value for the widget.
	*/
	max:Date;
	/**
 * @description Holds the minimum value for the widget.
	*/
	min:Date;
	/**
 * @description Holds the separator used by the widget.
	*/
	separator:String;
	/**
 * @description Creates a time edit widget as a child of the given parent widget.
 * @param parent - The widget parent for the time edit.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the time in the widget has changed, passes the new time.
 * @signature `"valueChanged(const QTime&)"`
 * @event
*/
	valueChanged(DzTime):void {
	
	};

}
/**
 * @classdesc 
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/timer_dz} */
class DzTimer extends QObject {
	/**
 * @description Holds whether the timer is running. (Read Only)
	*/
	active:Boolean;
	/**
 * @description Holds the timeout interval in milliseconds; default is 0 - will time out as soon as all events in the window system's event queue have been processed.
	*/
	interval:Number;
	/**
 * @description Holds whether the timer is the type that runs only once; if false, timer runs every interval milliseconds.
	*/
	singleShot:Number;
	/**
 * @description Construct a timer with the given parent.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Starts, or restarts, the timer with a timeout interval of msec milliseconds. If the timer is already running, it will be stopped and restarted. If singleShot is true, the timer will be started only once.
 * @param msec - The duration, in milliseconds, for the timer to run.
*/
	start(msec:Number):void {
	
	};
	/**
 * @description Starts, or restarts, the timer with a timeout interval of interval milliseconds. If the timer is already running, it will be stopped and restarted. If singleShot is true, the timer will be started only once.
*/
	start():void {
	
	};
	/**
 * @description Stops the timer.
*/
	stop():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the timer times out.
 * @signature `"timeout()"`
 * @event
*/
	timeout():void {
	
	};

}
/**
 * @classdesc TODO:
Add detailed description.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/timerange_dz} */
class DzTimeRange extends Object {
	/**
 * @description The end of this time range.
	*/
	end:DzTime;
	/**
 * @description The start of this time range.
	*/
	start:DzTime;
	/**
 * @description Default Constructor. Creates the time range [DZ_MIN_TIME,DZ_MAX_TIME]
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Creates a time range by parsing a string.
 * @param range - A string representation of the time range in the form "[ start, end ]"
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Adds the given amount of time to both ends of this range.
 * @param time - The amount of time to add.
*/
	add(time:DzTime):void {
	
	};
	/**
 * @description Extends the ends of this time range by the given amount of time, effectively expanding it by 2 * the specified time.
 * @param time - The amount of time to extend by - must be non-negative.
*/
	extendEndsBy(time:DzTime):void {
	
	};
	/**
 * @returns The length of this time range (end - start).
*/
	getDuration():DzTime {
	
	};
	/**
 * @description Expands this time range to include the given time.
 * @param time - The time to include.
*/
	include(time:DzTime):void {
	
	};
	/**
 * @description Expands this time range to include the given time range.
 * @param range - The time range to include.
*/
	include(range:DzTimeRange):DzTimeRange {
	
	};
	/**
 * @description Sets this time range to the intersection with the given time range.
 * @param range - The time range to intersect.
*/
	intersect(range:DzTimeRange):DzTimeRange {
	
	};
	/**
 * @returns true if this time range is length 0, otherwise false.
*/
	isEmpty():Boolean {
	
	};
	/**
 * @returns true if the given time falls inside this range, otherwise false.
*/
	isIncluded(time:DzTime):Boolean {
	
	};
	/**
 * @returns true if the given range falls inside this range, otherwise false.
*/
	isIncluded(range:DzTimeRange):Boolean {
	
	};
	/**
 * @description Sets this time range to be empty.
*/
	makeEmpty():void {
	
	};
	/**
 * @returns true if the given range overlaps this range, otherwise false.
*/
	overlaps(range:DzTimeRange):Boolean {
	
	};
	/**
 * @description Subtracts the given amount of time from both ends of this range.
 * @param time - The amount of time to subtract.
*/
	subtract(time:DzTime):void {
	
	};
	/**
 * @returns A string representation of this time range in the form "[ start, end ]".
*/
	toString():String {
	
	};

}
/**
 * @classdesc This class provides access to a toolbar within the interface. This class is not intended to be constructed directly, rather an instance of the class is created using DzPaneMgr.createToolBar().
See Also:
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/toolbar_dz} */
class DzToolBar extends QWidget {
	/**
 * @description Holds whether or not the bar is docked. (Read Only)
	*/
	floating:Boolean;
	/**
 * @description ENUMERATOR: The dock area at the top of a DzActivityLayout.
*/
	
	static ToolBarTop;
	/**
 * @description ENUMERATOR: The dock area at the bottom of a DzActivityLayout.
*/
	
	static ToolBarBottom;
	/**
 * @description ENUMERATOR: The dock area on the left side of a DzActivityLayout.
*/
	
	static ToolBarLeft;
	/**
 * @description ENUMERATOR: The dock area on the right side of a DzActivityLayout.
*/
	
	static ToolBarRight;
	/**
 * @description ENUMERATOR: No dock area. The toolbar cannot be docked.
*/
	
	static NoToolBarArea;
	/**
 * @description Removes all items from the bar.
*/
	clear():void {
	
	};
	/**
 * @description Docks the toolbar in the specified area on the DzActivityLayout, and shows the toolbar if it is hidden.
 * @param area - The DockArea to dock the toolbar to.
 * @param beforeBar - The name of the bar in the area to dock before.
*/
	dock(area:DzToolBar.DockArea, beforeBar:String):DzToolBar {
	
	};
	/**
 * @returns The dock area that the toolbar is docked in.
*/
	dockedArea():DockArea {
	
	};
	/**
 * @returns The toolbar item at the given index (if valid), otherwise null.
 * @param which - The index of the item in the toolbar.
*/
	getItem(which:Number):DzToolBarItem {
	
	};
	/**
 * @description This function is provided for DAZ Script access. Plugin developers are encouraged to use the much more efficient itemListIterator() method.
 * @returns A list of all the items in this toolbar.
*/
	getItemList():Array {
	
	};
	/**
 * @returns The number of items in the toolbar.
*/
	getNumItems():Number {
	
	};
	/**
 * @returns true if there are items in this toolbar, false if the toolbar is empty.
*/
	hasItems():Boolean {
	
	};
	/**
 * @description Adds the given action to the toolbar.
 * @param action - The DzAction that will be added to the toolbar.
 * @param before - The DzAction to insert action before.
*/
	insertAction(action:DzAction, before:DzAction):void {
	
	};
	/**
 * @description Adds the given action to the toolbar.
 * @param action - The class name of the DzAction that will be added to the toolbar.
 * @param index - The index at which to insert the item, if the index is invalid (the default) the item is appended to the end of the menu.
*/
	insertAction(action:String, index:Number):void {
	
	};
	/**
 * @description Adds the given custom action to the toolbar.
 * @param action - The name (GUID) of the custom action that will be added to the toolbar.
 * @param index - The index at which to insert the item, if the index is invalid (the default) the item is appended to the end of the menu.
*/
	insertCustomAction(action:String, index:Number):void {
	
	};
	/**
 * @description Adds a custom widget to the toolbar.
 * @param uiScript - A path to the DAZ Script that loads the QtDesigner .ui file for the custom widget. A global function named getWidget() is provided to uiScript that returns a DzWidget which should be used as the parent argument in a DzUiLoader.load() call.
 * @param index - The index at which to insert the item, if the index is invalid (the default) the item is appended to the end of the menu.
*/
	insertCustomWidget(uiScript:String, index:Number):void {
	
	};
	/**
 * @description Inserts the given item into the toolbar at the given location.
 * @param item - The item to insert into the toolbar.
 * @param index - The index at which to insert the item, if the index is invalid (the default) the item is appended to the end of the toolbar.
*/
	insertItem(item:DzToolBarItem, index:Number):void {
	
	};
	/**
 * @description Adds a separator to the toolbar.
 * @param index - The index at which to insert the item, if the index is invalid (the default) the item is appended to the end of the menu.
*/
	insertSeparator(index:Number):void {
	
	};
	/**
 * @description Adds a spacer to the toolbar which adjusts itself so that items added after it are aligned over the application viewport.
 * @param alignment - The alignment to use for toolbar items. Currently supports Qt.AlignLeft and Qt.AlignCenter
 * @param index - The index at which to insert the spacer. If the index is invalid (the default) the item is appended to the end of the menu.
*/
	insertViewportAlignmentSpacer(alignment:Number, index:Number):void {
	
	};
	/**
 * @description Adds a spacer to the toolbar which adjusts itself so that any items after it are centered over the application viewport.
 * @param index - The index at which to insert the spacer. If the index is invalid (the default) the item is appended to the end of the menu.
*/
	insertViewportCenterAlignSpacer(index:Number):void {
	
	};
	/**
 * @description Adds a spacer to the toolbar which adjusts itself so that any items after it are left aligned over the application viewport.
 * @param index - The index at which to insert the spacer. If the index is invalid (the default) the item is appended to the end of the menu.
*/
	insertViewportLeftAlignSpacer(index:Number):void {
	
	};
	/**
 * @returns true if the toolbar is closed (not displayed), false if the toolbar is open (displayed).
*/
	isClosed():Boolean {
	
	};
	/**
 * @param index - The index of the item to remove.
*/
	removeItem(index:Number):void {
	
	};
	/**
 * @param item - The item to remove.
*/
	removeItem(item:DzToolBarItem):void {
	
	};
	/**
 * @description Sets whether the toolbar is closed (not displayed), or open (displayed).
*/
	setClosed(onOff:Boolean):void {
	
	};
	/**
 * @description Undocks the toolbar, moves it to the given global coordinates, and shows the toolbar if it is hidden.
*/
	undock(pos:Point):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when items are added to or removed from this toolbar
 * @signature `"itemListChanged()"`
 * @event
*/
	itemListChanged():void {
	
	};

}
/**
 * @classdesc This class provides access to toolbar items within the interface. This class is not intended to be constructed directly, rather an instance of the class is created using one of the following:
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/toolbaritem_dz} */
class DzToolBarItem extends QObject {
	/**
 * @description If the item type is Action, holds the QObject.className() of the DzAction which is activated by this item. If the item type is CustomAction, holds the name (GUID) of the Custom Action that is activated by this item.
	*/
	action:String;
	/**
 * @description The type of the toolbar item. (Read Only)
	*/
	type:Type;
	/**
 * @description If the item type is CustomWidget, holds the path to the script to execute in order to create the UI of the widget for this item. The path can be absolute, relative to the application resources path, or relative to the resources folder in the application data path.
	*/
	uiScript:String;
	/**
 * @description ENUMERATOR: A toolbar separator (i.e. divider)
*/
	
	static Separator;
	/**
 * @description ENUMERATOR: An action item - a toolbar item that activates a DzAction
*/
	
	static Action;
	/**
 * @description ENUMERATOR: A toolbar item that activates a Custom Action. See DzActionMgr for more information about custom actions.
*/
	
	static CustomAction;
	/**
 * @description ENUMERATOR: A toolbar item that provides a non-standard widget.
*/
	
	static CustomWidget;
	/**
 * @description ENUMERATOR: A toolbar item that adjusts itself so that any items after it are left aligned over the application viewport.
*/
	
	static ViewportLeftAlignSpacer;
	/**
 * @description ENUMERATOR: A toolbar item that adjusts itself so that any items after it are centered over the application viewport.
*/
	
	static ViewportCenterAlignSpacer;

}
/**
 * @classdesc 
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/toplevelassetcontainer_dz} */
class DzTopLevelAssetContainer extends DzRefCountedItem, DzAbstractAssetContainer {
	/**
 * @description ENUMERATOR: The container is idle.
*/
	
	static csNone;
	/**
 * @description ENUMERATOR: The container is busy with an update.
*/
	
	static csBusy;
	/**
 * @description ENUMERATOR: The update operation completed without errors.
*/
	
	static csFinished;
	/**
 * @description ENUMERATOR: The update operation was canceled.
*/
	
	static csCanceled;
	/**
 * @description ENUMERATOR: An error occured during the update operation.
*/
	
	static csError;
	/**
 * @returns The current state of the containter.
 * @since 4.9.1.17
*/
	getState():ContainerState {
	
	};
	/**
 * @description Sets the state of this container.
 * @since 4.9.1.17
 * @param state - The state to set.
 * @attention Generally this should not be called from script.
*/
	setState(state:ContainerState):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the state of this container has changed.
 * @signature `"stateChanged(int)"`
 * @event
*/
	stateChanged(state:ContainerState):void {
	
	};

}
/**
 * @classdesc Attention:
Since:@attention Attention:
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/transferutility_dz} */
class DzTransferUtility extends QObject {
	/**
 * @description ENUMERATOR: The type of the asset is not defined.
*/
	
	static NoAsset;
	/**
 * @description ENUMERATOR: The type of the asset is a shape_dz.
*/
	
	static GeometryAsset;
	/**
 * @description ENUMERATOR: The type of the asset is a DzNode.
*/
	
	static NodeAsset;
	/**
 * @description ENUMERATOR: The unmodified base geometry.
*/
	
	static BaseGeom;
	/**
 * @description ENUMERATOR: The base geometry as modified by a morph target.
*/
	
	static BaseMorph;
	/**
 * @description ENUMERATOR: The current world-space cached geometry.
*/
	
	static BaseCurrent;
	/**
 * @description ENUMERATOR: No morphs.
*/
	
	static NoMorphs;
	/**
 * @description ENUMERATOR: A specific list of named morphs.
*/
	
	static NameList;
	/**
 * @description ENUMERATOR: The morphs in which their respective value control properties are marked as a favorite.
*/
	
	static Favorites;
	/**
 * @description ENUMERATOR: Same as Favorites, plus the properties that are controlled by them via DzERCLink.
*/
	
	static FavoritesAndSubComponets;
	/**
 * @description ENUMERATOR: The morphs that have their respective control property in the "Modifier/Shape" or "Modifier/Pose" property groups.
*/
	
	static ShapingAndPoseType;
	/**
 * @description ENUMERATOR: All morphs.
*/
	
	static AllMorphs;
	/**
 * @description Default Constructor. Creates a Transfer Utility that can be used to transfer weights, morph, maps, etc using projection.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Performs the projection transfer based on the current settings.
 * @returns true if the transfer was successful, otherwise false.
*/
	doTransfer():Boolean {
	
	};
	/**
 * @returns The adaptive tolerance factor for calculating the projection.
 * @since 4.8.1.78
*/
	getAdaptiveTolerance():Number {
	
	};
	/**
 * @returns true if a smoothing modifier will be added to the target figure, otherwise false.
*/
	getAddSmoothModifier():Boolean {
	
	};
	/**
 * @returns true if the target geometry will be adjusted to the source base geometry, otherwise false.
 * @attention Provides access to the "Reverse Source Shape From Target" option in the Transfer Utility dialog.
*/
	getAdjustTargetBase():Boolean {
	
	};
	/**
 * @returns true if polylines are projected as rigid topology, otherwise false.
 * @since 4.11.0.66
*/
	getConsiderLinesAsRigid():Boolean {
	
	};
	/**
 * @returns The content type to be set on the presentation of the figure.
*/
	getContentType():String {
	
	};
	/**
 * @returns The distance squared tolerance for calculating the projection.
 * @since 4.10.0.50
*/
	getDistanceSquaredTolerance():void {
	
	};
	/**
 * @returns true if the target figure will be fit to the source figure once the projection has been performed, otherwise false.
*/
	getFitToFigure():Boolean {
	
	};
	/**
 * @returns true if the view will be locked during the transfer, otherwise false.
*/
	getLockViewOnTransfer():Boolean {
	
	};
	/**
 * @returns true if node hierarchies will be merged on the target figure, otherwise false.
*/
	getMergeHierarchies():Boolean {
	
	};
	/**
 * @returns A list of morph names that will be transfered (if any).
*/
	getMorphTransferList():Array {
	
	};
	/**
 * @returns The nearness factor for calculating the projection.
*/
	getNearness():Number {
	
	};
	/**
 * @returns true if existing morphs on the target figure will be replaced, otherwise false.
*/
	getOverrideExistingMorphs():Boolean {
	
	};
	/**
 * @returns true if the target figure will be parented to the source figure once the projection has been performed, otherwise false.
 * @since 4.10.0.50
*/
	getParentToFigure():Boolean {
	
	};
	/**
 * @returns The path to a template figure to use for projection.
 * @since 4.9.3.48
*/
	getProjectionTemplatePath():String {
	
	};
	/**
 * @returns true if unused bones should be removed from the target after skin binding is transfered, otherwise false.
*/
	getRemoveUnusedTargetBones():Boolean {
	
	};
	/**
 * @returns true if the transfer of weightmaps will respect hidden facets on the target figure, otherwise false.
*/
	getRespectHiddenFacets():Boolean {
	
	};
	/**
 * @returns true if smart left/right handling will be used during projection calculation, otherwise false.
*/
	getSmartLeftRightHandling():Boolean {
	
	};
	/**
 * @returns The type of projection base that will be used for the source asset.
*/
	getSourceBase():BaseType {
	
	};
	/**
 * @returns The morph that will be used for the source projection base, or NULL if a different base type will be used.
*/
	getSourceBaseMorph():DzMorph {
	
	};
	/**
 * @returns The shape containing the source asset if the source asset type is GeometryAsset, otherwise null.
*/
	getSourceGeom():DzShape {
	
	};
	/**
 * @returns The node containing the source asset if the source asset type is NodeAsset, otherwise null.
*/
	getSourceNode():DzNode {
	
	};
	/**
 * @returns The type of asset currently set for the projection source.
*/
	getSourceType():AssetType {
	
	};
	/**
 * @returns The type of projection base that will be used for the target asset.
*/
	getTargetBase():BaseType {
	
	};
	/**
 * @returns The morph that will be used for the target projection base, or NULL if a different base type will be used.
*/
	getTargetBaseMorph():DzMorph {
	
	};
	/**
 * @returns The shape containing the target asset if the target asset type is GeometryAsset, otherwise null.
*/
	getTargetGeom():DzShape {
	
	};
	/**
 * @returns The node containing the target asset if the target asset type is NodeAsset, otherwise null.
*/
	getTargetNode():DzNode {
	
	};
	/**
 * @returns The target output figure.
*/
	getTargetOutputFigure():DzFigure {
	
	};
	/**
 * @returns true if the target will replace the source in the scene, otherwise false.
 * @attention Provides access to the "Replace Source With Target" option in the Transfer Utility dialog.
*/
	getTargetReplacesSource():Boolean {
	
	};
	/**
 * @returns The type of asset currently set for the projection target.
*/
	getTargetType():AssetType {
	
	};
	/**
 * @returns true if skin binding will be projected, otherwise false.
 * @attention Provides access to the "Weight Maps" option in the Transfer Utility dialog.
*/
	getTransferBinding():Boolean {
	
	};
	/**
 * @returns true if face grouping will be projected, otherwise false.
*/
	getTransferFaceGroups():Boolean {
	
	};
	/**
 * @returns true if material grouping will be projected, otherwise false.
 * @attention Provides access to the "Surface Groups" option in the Transfer Utility dialog.
*/
	getTransferMaterialGroups():Boolean {
	
	};
	/**
 * @returns true if morphs will be projected, otherwise false.
*/
	getTransferMorphs():Boolean {
	
	};
	/**
 * @returns true if region grouping will be projected, otherwise false.
*/
	getTransferRegionGroups():Boolean {
	
	};
	/**
 * @returns true if the selection map will be projected, otherwise false.
*/
	getTransferSelectionMap():Boolean {
	
	};
	/**
 * @returns Which morphs are projected from the source figure.
*/
	getTransferSourceMorphs():SourceMorphTransferType {
	
	};
	/**
 * @returns true if morphs should be projected from the template figure, otherwise false.
 * @since 4.9.3.48
*/
	getTransferTemplateMorphs():Boolean {
	
	};
	/**
 * @returns true if UV maps will be projected, otherwise false.
*/
	getTransferUVs():Boolean {
	
	};
	/**
 * @returns true if near vertices will be used for calculation of the projection, otherwise false.
*/
	getUseNearness():Boolean {
	
	};
	/**
 * @returns true if the specified content type should be used to set the target content type, otherwise false.
*/
	getUseSpecifiedContentType():Boolean {
	
	};
	/**
 * @returns true if UV space will be used during projection calculation, otherwise false.
 * @since 4.9.3.1
*/
	getUVSpaceProjection():Boolean {
	
	};
	/**
 * @returns true if vertices are looked at first on the source for projection, false if facets are looked at first.
 * @since 4.9.3.38
*/
	getVertexFirstProjection():Boolean {
	
	};
	/**
 * @returns true if the morph that will be used for the source projection base is "Modifier/Clone", otherwise false.
 * @since 4.9.4.84
*/
	isSourceBaseMorphClone():Boolean {
	
	};
	/**
 * @description Removes unused bones from the given figure; unused bones are those whose bone binding weight maps are all filled with zero.
 * @param figure - The figure to remove the unused bones from.
*/
	removeUnusedBones(figure:DzFigure):void {
	
	};
	/**
 * @description Sets the adaptive tolerance factor if near vertices will be used to calculate the projection.
 * @since 4.8.1.78
 * @param val - The adaptive tolerance factor to set.
*/
	setAdaptiveTolerance(val:Number):void {
	
	};
	/**
 * @description Sets whether or not to add a smoothing modifier to the target figure.
*/
	setAddSmoothModifier(yesNo:Boolean):void {
	
	};
	/**
 * @description Sets whether or not the target will be adjusted to the unmodified base geometry of the source.
 * @param onOff - If true, the target geometry will be adjusted. If false, the target geometry will not be changed.
 * @attention Provides access to the "Reverse Source Shape From Target" option in the Transfer Utility dialog.
*/
	setAdjustTargetBase(onOff:Boolean):void {
	
	};
	/**
 * @description Sets whether or not polylines are projected as rigid topology; whether or not all vertices of a given polyline transform based on the relative position of its first vertex, or individually based on their own respective positions.
 * @since 4.11.0.66
 * @param onOff - If true, polylines are projected as rigid topology. If false, polylines are projected as non-rigid topology.
*/
	setConsiderLinesAsRigid(onOff:Boolean):void {
	
	};
	/**
 * @description Sets the content type to be set on the presentation of the figure.
 * @param conType - The content type to set.
*/
	setContentType(conType:String):void {
	
	};
	/**
 * @description Sets the distance squared tolerance to use for calculating the projection.
 * @since 4.10.0.50
 * @param val - The distance squared tolerance value to set.
*/
	setDistanceSquaredTolerance(val:Number):void {
	
	};
	/**
 * @description Sets whether or not the target figure will be fit to the source figure once the projection has been performed.
 * @param yesNo - If true, the target figure will be fit to the source figure.
*/
	setFitToFigure(yesNo:Boolean):void {
	
	};
	/**
 * @description Sets whether or not the view will be locked during the transfer.
 * @param onOff - If true, the view will be locked during the transfer.
*/
	setLockViewOnTransfer(onOff:Boolean):void {
	
	};
	/**
 * @description Sets whether or not node hierarchies will be merged on the target figure.
 * @param onOff - If true, node hierarchies will be merged.
*/
	setMergeHierarchies(onOff:Boolean):void {
	
	};
	/**
 * @description Sets the list of morph names to transfer.
 * @param list - The list of morph names to set.
*/
	setMorphTransferList(list:Array):void {
	
	};
	/**
 * @description Sets the nearness factor if near vertices will be used to calculate the projection.
 * @param val - The nearness factor to set.
*/
	setNearness(val:Number):void {
	
	};
	/**
 * @description Sets whether or not to override morphs that already exist onthe target figure.
 * @param onOff - If true (default), existing morphs on the target figure will be replaced.
*/
	setOverrideExistingMorphs(onOff:Boolean):void {
	
	};
	/**
 * @description Sets whether or not the target figure will be parented to the source figure once the projection has been performed.
 * @since 4.10.0.50
 * @param yesNo - If true, the target figure will be parented to the source figure.
*/
	setParentToFigure(yesNo:Boolean):void {
	
	};
	/**
 * @description Sets the path to a template figure to use for projection.
 * @since 4.9.3.48
 * @param path - The path of the projection template to set.
*/
	setProjectionTemplatePath(path:String):void {
	
	};
	/**
 * @description Sets whether or not unused bones should be removed from the target after skin binding is transfered.
 * @param onOff - If true, unused bones will be removed from the target after skin binding is transfered. If false, unused bones will not be removed from the target.
*/
	setRemoveUnusedTargetBones(onOff:Boolean):void {
	
	};
	/**
 * @description Sets whether or not the transfer of weightmaps will respect hidden facets on the target figure.
 * @param onOff - If true, the transfer of weightmaps will respect hidden facets on the target figure.
*/
	setRespectHiddenFacets(onOff:Boolean):void {
	
	};
	/**
 * @description Sets whether importers that may need to be invoked should run silently, or with user input. Currently this only affects transfers using DzTransferPoserFigureAssets. This needs to be called before setSource() or setTarget() are called.
*/
	setSilentImporters(onOff:Boolean):void {
	
	};
	/**
 * @description Sets whether or not smart left/right handling will be used during projection calculation.
 * @param onOff - If true, smart left/right handling will be used. If false, smart left/right handling will not be used.
*/
	setSmartLeftRightHandling(onOff:Boolean):void {
	
	};
	/**
 * @description Sets the source asset to be the geometry contained by the given node.
 * @param node - The node to use as a projection source.
*/
	setSource(node:DzNode):Boolean {
	
	};
	/**
 * @description Sets the source asset to be the geometry contained by the given shape.
 * @param shape - The shape containing the geometry to use as a projection source.
*/
	setSource(geom:shape_dz):Boolean {
	
	};
	/**
 * @description Sets the Transfer Utility to use the current world-space cached geometry of the source asset for the projection base instead of a morph or the unmodified base geometry. Only valid if the source asset is a node.
 * @returns false if the source asset is not a node, otherwise true.
*/
	setSourceBaseCurrent():Boolean {
	
	};
	/**
 * @description Sets the morph that will be applied to the source geometry before the projection is calculated. Only valid if the source asset is a node.
 * @returns true if the morph will be used, false if the morph is invalid or the source asset is not a node.
 * @param morph - The morph that will act as the projection base.
*/
	setSourceBaseMorph(morph:morph_dz):Boolean {
	
	};
	/**
 * @description Sets the target asset to be the geometry contained by the given node.
 * @param node - The node to use as a projection target.
*/
	setTarget(node:DzNode):Boolean {
	
	};
	/**
 * @description Sets the target asset to be the geometry contained by the given shape.
 * @param shape - The shape containing the geometry to use as a projection target.
*/
	setTarget(geom:shape_dz):Boolean {
	
	};
	/**
 * @description Sets the Transfer Utility to use the current world-space cached geometry of the target asset for the projection base instead of a morph or the unmodified base geometry. Only valid if the target asset is a node.
 * @returns false if the target asset is not a node, otherwise true.
*/
	setTargetBaseCurrent():Boolean {
	
	};
	/**
 * @returns The morph that will be used for the target projection base, or NULL if a different base type will be used.
*/
	setTargetBaseMorph(morph:morph_dz):Boolean {
	
	};
	/**
 * @description ets whether or not the target will replace the source in the scene.
 * @param onOff - If true, the source will be replaced by the target. If false, the source will not be replaced by the target.
 * @attention Provides access to the "Replace Source With Target" option in the Transfer Utility dialog.
*/
	setTargetReplacesSource(onOff:Boolean):void {
	
	};
	/**
 * @description Sets whether or not skin binding will be projected to the target.
 * @param onOff - If true, the skin binding weights will be projected. If false, the skin binding weights will not be projected.
 * @attention Provides access to the "Weight Maps" option in the Transfer Utility dialog.
*/
	setTransferBinding(onOff:Boolean):void {
	
	};
	/**
 * @description Sets whether or not face grouping will be projected to the target.
 * @param onOff - If true, the face groups will be projected. If false, the face groups will not be projected.
*/
	setTransferFaceGroups(onOff:Boolean):void {
	
	};
	/**
 * @description Sets whether or not material grouping will be projected to the target.
 * @param onOff - If true, the material groups will be projected. If false, the material groups will not be projected.
 * @attention Provides access to the "Surface Groups" option in the Transfer Utility dialog.
*/
	setTransferMaterialGroups(onOff:Boolean):void {
	
	};
	/**
 * @description Sets whether or not morphs will be projected to the target.
 * @param onOff - If true, the morphs will be projected. If false, no morphs will be projected.
*/
	setTransferMorphs(onOff:Boolean):void {
	
	};
	/**
 * @description Sets whether or not region grouping will be projected to the target.
 * @param onOff - If true, the face groups will be projected. If false, the face groups will not be projected.
*/
	setTransferRegionGroups(onOff:Boolean):void {
	
	};
	/**
 * @description Sets whether or not the selection map will be created on the target.
 * @param onOff - If true, the selection map will be projected. If false, the selection map will not be projected.
*/
	setTransferSelectionMap(onOff:Boolean):void {
	
	};
	/**
 * @description Sets which type of morphs to project from the source figure.
 * @param type - The type of morphs on the source figure to project.
*/
	setTransferSourceMorphs(type:SourceMorphTransferType):void {
	
	};
	/**
 * @description Sets whether or not morphs should be projected from the template figure.
 * @since 4.9.3.48
 * @param onOff - If true, morphs will be projected from the template figure.
*/
	setTransferTemplateMorphs(onOff:Boolean):void {
	
	};
	/**
 * @description Sets whether or not UV maps will be projected to the target.
 * @param onOff - If true, the UV maps will be projected. If false, the UV maps will not be projected.
*/
	setTransferUVs(onOff:Boolean):void {
	
	};
	/**
 * @description Sets whether or not face near vertices will be used to calculate the projection.
 * @param onOff - If true, near vertices will be used, otherwise only the closest mesh location will be used.
*/
	setUseNearness(onOff:Boolean):void {
	
	};
	/**
 * @description Sets whether or not the specified content type should be used to set the target content type.
 * @param yesNo - If true, the specified content type will be used to set the target content type. If false, the specified content type will not be used to set the target content type.
*/
	setUseSpecifiedContentType(yesNo:Boolean):void {
	
	};
	/**
 * @description Sets whether or not UV space will be used during projection calculation.
 * @since 4.9.3.1
 * @param onOff - If true, UV space will be used during projection calculation. If false, UV space will not be used during projection calculation.
*/
	setUVSpaceProjection(onOff:Boolean):void {
	
	};
	/**
 * @description Sets whether vertices or facets on the source are looked at first for projection.
 * @since 4.9.3.38
 * @param onOff - If true, vertices are looked at first. If false, facets are looked at first.
*/
	setVertexFirstProjection(onOff:Boolean):void {
	
	};

}
/**
 * @classdesc 
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/typeassetcontainer_dz} */
class DzTypeAssetContainer extends DzRefCountedItem, DzAbstractAssetContainer {
	/**
 * @description Holds the data associated with this container; type depends on the type of the data assigned.
	*/
	data:Object;
	/**
 * @description Adds a new container with the given name, if one doesn't already exist.
 * @returns The index of the newly inserted container. If a container of the same type already exists, the index of that container will be returned.
 * @param typePath - The slash ('/') delimited path of a container to add.
*/
	addChildContainer(typePath:String):Number {
	
	};
	/**
 * @description Adds the given container if one of the same type name doesn't exist.
 * @returns The index of the newly added container or, if a container already exists with the same name, the index of that container.
 * @param container - The child container to be inserted.
*/
	addChildContainer(container:DzTypeAssetContainer):Number {
	
	};
	/**
 * @description Clears all the child containers and assets associated with this container. Emits endAssetRemove() and endChildContainerRemove().
*/
	clear():void {
	
	};
	/**
 * @returns The container with the given type name, if it exists, otherwise null.
 * @param typePath - The path of the container to find.
*/
	findChildContainer(typePath:String):DzTypeAssetContainer {
	
	};
	/**
 * @returns The displayed text path of this container.
 * @param ignoreRoot - If true, the root item will not be included in the path.
*/
	getTextPath(ignoreRoot:Boolean):String {
	
	};
	/**
 * @returns The type name for this container.
*/
	getTypeName():String {
	
	};
	/**
 * @description Attempts to insert the asset to a specific type.
 * @returns true if successful, otherwise false.
 * @param asset - The asset to be inserted.
 * @param typePath - The slash ('/') delimited path of the type for the asset.
*/
	insertToSpecificType(asset:DzAsset, typePath:String):Boolean {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when this container is about to be cleared.
 * @signature `"aboutToClear()"`
 * @event
*/
	aboutToClear():void {
	
	};

}
/**
 * @classdesc See Also:
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/u3dexporter_dz} */
class DzU3DExporter extends DzExporter {
	/**
 * @description Default Constructor.
 * @constructor
*/
	constructor() {
	
	};

}
/**
 * @classdesc Provides functionality that allows QtDesigner to be used in the creation of graphical user interfaces used by scripts.
See Also:
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/uiloader_dz} */
class DzUiLoader extends QObject {
	/**
 * @description Default Constructor.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Adds a path to the list of paths the .ui loader searches when locating QtDesigner plug-ins.
 * @param path - The path to add.
*/
	addPluginPath(path:String):void {
	
	};
	/**
 * @returns A list of the names of layouts that can be built using createLayout().
*/
	availableLayouts():Array {
	
	};
	/**
 * @returns A list of the names of widgets that can be built using createWidget().
*/
	availableWidgets():Array {
	
	};
	/**
 * @description Clears the list of paths the .ui loader searches when locating QtDesigner plug-ins.
*/
	clearPluginPaths():void {
	
	};
	/**
 * @description Creates a new layout.
 * @returns The created layout (if any), otherwise null.
 * @param className - The name of the class to create an instance of.
 * @param parent - The object to parent the layout to.
 * @param name - The name to assign to the layout.
*/
	createLayout(className:String, parent:QObject, name:String):DzLayout {
	
	};
	/**
 * @description Creates a new widget.
 * @returns The created widget (if any), otherwise null.
 * @param className - The name of the class to create an instance of.
 * @param parent - The widget to parent the widget to.
 * @param name - The name to assign to the widget.
*/
	createWidget(className:String, parent:DzWidget, name:String):DzWidget {
	
	};
	/**
 * @description Loads a QtDesigner form (*.ui) and creates a new widget.
 * @returns A widget parented to parent that holds the contents of the loaded form (if any), otherwise null.
 * @param filename - The path of the .ui file to load.
 * @param parent - The widget to parent the contents of the file to.
*/
	load(filePath:String, parent:DzWidget):DzWidget {
	
	};
	/**
 * @returns A list of the paths the .ui loader searches when locating custom QtDesigner widget plug-ins.
*/
	pluginPaths():Array {
	
	};
	/**
 * @description Sets the base directory of the .ui loader. The .ui loader looks for other resources, such as icons and resource files, in paths relative to this directory.
 * @param dir - The path to use as the base directory for other resources.
*/
	setWorkingDirectory(dir:String):void {
	
	};
	/**
 * @returns The working directory of the .ui loader.
*/
	workingDirectory():String {
	
	};

}
/**
 * @classdesc TODO:
Add detailed description.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/uipopupwgt_dz} */
class DzUIPopUpWgt extends QWidget {
	/**
 * @description Default Constructor. Creates a new ui popup widget.
 * @param parent - The parent widget for the popup
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @returns The filename that was used to load the ui file.
*/
	getFileName():String {
	
	};
	/**
 * @returns The current main QWidget.
*/
	getUIWidget():QWidget {
	
	};
	/**
 * @returns The current working directory for the ui file.
*/
	getWorkingDirectory():String {
	
	};
	/**
 * @description Sets the main widget for this popup from the ui file.
 * @param filename - The path to the ui file to show in the widget.
*/
	loadUI(filename:String):void {
	
	};
	/**
 * @description Moves the popup to the point defined.
 * @param newPos - The position to move the popup widget to
*/
	movePopUp(newPos:Point):void {
	
	};
	/**
 * @description Sets the widget for the ui popup widget.
 * @param widget - The widget for the popup
*/
	setWidget(widget:QWidget):void {
	
	};
	/**
 * @param str - The working directory for the ui loader.
*/
	setWorkingDirectory(str:String):void {
	
	};

}
/**
 * @classdesc Encapsulates a widget loaded from a QtDesigner (*.ui) file. Do not create an instance of this class, request an instance via DzUiLoader.
See Also:
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/uiwidget_dz} */
class DzUiWidget extends DzWidget {

}
/**
 * @classdesc There is only one undo stack in the application, which is created and owned by DzApp. This object is directly available using the Global.UndoStack variable.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/undostack_dz} */
class DzUndoStack extends QObject {
	/**
 * @description It is recommended that you use Global.acceptUndo() instead of calling this function directly to avoid leaving the undo stack open.
 * @param caption - A descriptive string to display for the undo list.
*/
	accept(caption:String):void {
	
	};
	/**
 * @description It is recommended that you use Global.beginUndo() instead of calling this function directly to avoid leaving the undo stack open.
*/
	beginHold():void {
	
	};
	/**
 * @description It is recommended that you use Global.cancelUndo() instead of calling this function directly to avoid leaving the undo stack open.
*/
	cancel():void {
	
	};
	/**
 * @returns true if undo items can be pushed onto the stack, otherwise false.
*/
	canPushItems():Boolean {
	
	};
	/**
 * @returns true if redo() can be called, otherwise false.
*/
	canRedo():Boolean {
	
	};
	/**
 * @returns true if undo() can be called, otherwise false.
*/
	canUndo():Boolean {
	
	};
	/**
 * @description Clears the undo stack. This must be called at least whenever the list changes.
*/
	clearAll():void {
	
	};
	/**
 * @description It is recommended that you use Global.dropUndo() instead of calling this function directly to avoid leaving the undo stack open.
*/
	drop():void {
	
	};
	/**
 * @returns If getCurrentIndex() + offset is within the [0, getNumItems() - 1] range, the caption assigned to the item at the index, otherwise an empty string.
 * @since 4.9.3.61
 * @param offset - The number of positions from the current position.
*/
	getCaption(offset:Number):String {
	
	};
	/**
 * @returns The index of the current position in the stack.
 * @since 4.9.3.61
 * @attention Each time an item is added or removed from the stack, each time undo() or redo() is called, each time accept() or clearAll() is called, the current index is changed.
*/
	getCurrentIndex():Number {
	
	};
	/**
 * @returns The total number of items in the undo stack.
*/
	getNumItems():Number {
	
	};
	/**
 * @returns The total number of list items on the redo stack.
*/
	getNumRedoItems():Number {
	
	};
	/**
 * @returns The total number of list items on the undo stack.
*/
	getNumUndoItems():Number {
	
	};
	/**
 * @returns The caption assigned to the redo item at the top of the stack.
*/
	getRedoCaption():String {
	
	};
	/**
 * @returns The caption assigned to the undo item at the top of the stack.
*/
	getUndoCaption():String {
	
	};
	/**
 * @returns true if there are items on the undo stack, otherwise false.
*/
	hasItems():Boolean {
	
	};
	/**
 * @returns true if the undo stack is currently engaged in an undo/redo operation. This is useful for items that need to perform certain operations if the undo stack is not the one effecting data changes.
*/
	isInUndoRedo():Boolean {
	
	};
	/**
 * @description Disables items from being pushed onto the stack. This will be toggled by items to prevent undo operations from creating new undo items during an undo. Every call to lock() must be matched by a call to unlock().
*/
	lock():void {
	
	};
	/**
 * @description Calls redo on the item at the top of the stack, then moves the pointer to the next item in the stack.
 * @returns true on success, false on error or if the stack is empty.
*/
	redo():Boolean {
	
	};
	/**
 * @description Calls undo on the item at the top of the stack, then moves the pointer to the previous item in the stack.
 * @returns true if successful, false on error or if the stack is empty.
*/
	undo():Boolean {
	
	};
	/**
 * @description Enables items to be pushed onto the stack after a lock() call.
*/
	unlock():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the availability of the redo stack changes.
 * @signature `"redoAvailable(bool)"`
 * @event
*/
	redoAvailable(yesNo:Boolean):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the caption of the redo stack changes.
 * @signature `"redoCaptionChanged(const QString&)"`
 * @event
*/
	redoCaptionChanged(caption:String):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the availability of the undo stack changes.
 * @signature `"undoAvailable(bool)"`
 * @event
*/
	undoAvailable(yesNo:Boolean):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the caption of the undo stack changes.
 * @signature `"undoCaptionChanged(const QString&)"`
 * @event
*/
	undoCaptionChanged(caption:String):void {
	
	};

}
/**
 * @classdesc Represents a URI as it is used for the DSON file format. DzUri provides functionality in addition to standard URI/URL representations that is specific to the DSON file format.
DzUri provides for a traditional URI with path and fragment portions. In addition, it further divides the fragment into 1 to 3 parts for ease of use in the DSON file format. The following is an example of a URI as represented by the DzURI class:
/Converted/Victoria4/Victoria4.dsf.rCollar?rotation/x
The file path portion of this URI is: "/Converted/Victoria4/Victoria4.dsf"
The fragment portion of this URI is: "rCollar?rotation/x"
The fragment is further divided into an identifier and a property path. In this case the identifier is "rCollar" and the property path is "rotation/x".
All the sections of the fragment are optional, however, to be valid, each section in the fragment requires the preceding section to also be valid. So, the following URIs are valid:
And the following URIs are not valid:
Since:
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/uri_dz} */
class DzUri extends Object {
	/**
 * @description Holds the file path portion of the URI, if any.
	*/
	filePath:String;
	/**
 * @description Holds the file version of this URI, as a 64 bit unsigned integer. If not read from a file, this will be invalid.
	*/
	fileVersion:DzVersion;
	/**
 * @description Holds the identifier portion of this URI's fragment, if any.
	*/
	id:String;
	/**
 * @description Holds whether or not this URI was points to a cloud asset.
	*/
	isCloudFileUri:Boolean;
	/**
 * @description Holds the modifier path portion of the URI, if any.
	*/
	modifierPath:Array;
	/**
 * @description Holds the node path portion of this URI, if any.
	*/
	nodePath:Array;
	/**
 * @description Holds the property portion of the URI, if any.
	*/
	propertyPath:Array;
	/**
 * @description Holds the scheme type for this URI. Default is SchemeType.ID.
	*/
	schemeType:schemeType;
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static NoPart;
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static Scheme;
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static NodePath;
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static ModifierPath;
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static PropertyPath;
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static IDPart;
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static FilePath;
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static AllParts;
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static NoScheme;
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static ID;
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static Name;
	/**
 * @description Default constructor. Creates an empty URI.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Copy constructor. Creates a URI as a copy of another URI.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Constructor. Creates a URI from its string representation.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Escapes any reserved characters in the in the given string.
 * @returns URI escape sequences.
 * @param str - The string to replace reserved characters in.
 * @param exclude - The list of characters to not be escaped from the resultant string
 * @param include - The list of characters to be escaped from the resultant string
*/
	static escape(str:String, exclude:ByteArray, closer:ByteArray):String {
	
	};
	/**
 * @description Converts the string list into an escaped path string.
 * @returns URI path escape sequences.
 * @param list - The string list to replace reserved characters in.
 * @param exclude - The list of characters to not be escaped from the resultant string
 * @param include - The list of characters to be escaped from the resultant string
*/
	static escapedPath(list:Array, exclude:ByteArray, include:ByteArray):String {
	
	};
	/**
 * @description Creates a new URI using the path of a local file.
 * @param filePath - A local file path.
*/
	static fromLocalFilename(filePath:String):DzUri {
	
	};
	/**
 * @description Converts any escape sequences in the given string back to the corresponding character.
 * @returns The given string with any escape sequences replaced with the appropriate character.
 * @param str - The string to convert escape sequences in.
*/
	static unescape(str:String):String {
	
	};
	/**
 * @description Converts the string into a string list of unescaped path pieces.
 * @param path - The path to convert escape sequences in.
*/
	static unescapePath(path:String):Array {
	
	};
	/**
 * @description Clears the current values of this URI.
*/
	clear():void {
	
	};
	/**
 * @description Clears internal cache of the last place toLocalFilename/toLocalFilenameByPreferredPath returned.
*/
	clearFoundLocalFilename():void {
	
	};
	/**
 * @description Detaches this URI from any shared data. Makes the underlying data in this URI unique from all other URIs.
*/
	detach():void {
	
	};
	/**
 * @returns true if this URI is empty, otherwise false.
*/
	isEmpty():Boolean {
	
	};
	/**
 * @returns true if this URI is null, otherwise false. A DzUri may be empty without being Null, but a Null uri is always empty.
 * @since 4.9.2.12
*/
	isNull():Boolean {
	
	};
	/**
 * @description Sets the value of this URI from a string representation of the full URI.
 * @param uri - The string containing the full URI.
*/
	setUri(uri:String):void {
	
	};
	/**
 * @description Attempts to convert the URI to the path of a local file.
 * @returns A string representation of the URI converted to a local file path.
 * @param preferredPath - The path to attempt resolving against before other local drive paths are checked.
*/
	toLocalFilename(preferredPath:String):String {
	
	};
	/**
 * @description Attempts to convert the URI to the path of a local file.
 * @returns A string representation of the path of the URI converted to a local file path.
*/
	toLocalFilename():String {
	
	};
	/**
 * @description Attempts to convert the URI to the path of a local file.
 * @returns A string representation of the URI converted to a file path. If the file represented by the URI exists, the string will be an absolute file path. If the file represented by the URI does not exist, the string will be a relative path.
 * @since 4.9.1.26
 * @param preferredPath - The path to attempt resolving against before other local drive paths are checked.
*/
	toPath(preferredPath:String):String {
	
	};
	/**
 * @returns A string representation of the full URI.
*/
	toString():String {
	
	};
	/**
 * @returns A string representation of the URI containing the parts specified by flags.
*/
	toString(flags:PartFlags):String {
	
	};

}
/**
 * @classdesc 
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/userdrawstyle_dz} */
class DzUserDrawStyle extends DzRefCountedItem, DzDrawStyle {
	/**
 * @description Whether or not the user style is available for use (Read Only).
	*/
	isEnabled:Boolean;
	/**
 * @returns A description/label for the DrawStyle; used for display in the viewport menu.
*/
	getDescription():String {
	
	};
	/**
 * @returns A representative icon for the DrawStyle; used for display in the viewport menu.
*/
	getPixmap():Pixmap {
	
	};

}
/**
 * @classdesc TODO:
Add detailed description.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/uvset_dz} */
class DzUVSet extends DzRefCountedItem, DzVertexMap {
	/**
 * @description Holds the author of the file for this vertex map. (Read Only)
	*/
	assetAuthor:DzAuthor;
	/**
 * @description Holds the revision version of the asset file for this vertex map. (Read Only)
	*/
	assetFileRevision:DzVersion;
	/**
 * @description Holds the asset id for this vertex map.
	*/
	assetId:String;
	/**
 * @description Holds the modified date of the asset file for this vertex map. (Read Only)
	*/
	assetModifiedDate:Date;
	/**
 * @description Holds whether or not the asset for this UV set needs to be saved. (Read Only)
	*/
	assetNeedSave:Boolean;
	/**
 * @description Holds the URI of the asset source for this vertex map; only valid when the asset is in an embedded state - i.e. modified. (Read Only)
	*/
	assetSource:DzUri;
	/**
 * @description Holds the asset URI for this vertex map. (Read Only)
	*/
	assetUri:DzUri;
	/**
 * @description Default Constructor
 * @constructor
*/
	constructor() {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the UV set has been modified.
 * @signature `"assetModified()"`
 * @event
*/
	assetModified():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted after the UV set has been saved.
 * @signature `"assetWasSaved()"`
 * @event
*/
	assetWasSaved():void {
	
	};

}
/**
 * @classdesc An asset save filter for saving a UV Set Definition Support Asset in the DSON format.
See Also:
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/uvsupportassetfilter_dz} */
class DzUVSupportAssetFilter extends DzAssetFileOutFilter {
	/**
 * @description TODO:
Add description.
 * @constructor
*/
	constructor() {
	
	};

}
/**
 * @classdesc Provided as a convenience for creating a DzBoxLayout where the direction is automatically initially set to DzBoxLayout.TopToBottom.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/vboxlayout_dz} */
class DzVBoxLayout extends DzBoxLayout {
	/**
 * @description Creates a vertical box layout that manages the children widgets of the given parent widget
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Creates a vertical box layout as a sub-layout of the given layout
 * @constructor
*/
	constructor() {
	
	};

}
/**
 * @classdesc Provides a DzButtonGroup with a vertical layout.
Deprecated
Exists only to keep old code working. Do not use in new code. Use DzButtonGroup for state management and DzGroupBox in conjunction with DzVBoxLayout for visual representation instead.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/vbuttongroup_dz} */
class DzVButtonGroup extends DzButtonGroup {
	/**
 * @description Creates a button group as a child of the given parent widget
 * @constructor
*/
	constructor() {
	
	};

}
/**
 * @classdesc See Also:
Since:
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/vec2_dz} */
class DzVec2 extends Object {
	/**
 * @description Holds the x component of this vector.
	*/
	x:Number;
	/**
 * @description Holds the y component of this vector.
	*/
	y:Number;
	/**
 * @description Default Constructor. Creates an uninitialized vector.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Creates a vector by parsing a string.
 * @param vec - A string representation of the vector in the form "[ x, y ]"
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Copy Constructor.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Copy Constructor.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Creates and initializes this vector with an array of 2 float values.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Creates and initializes this vector with 2 float values.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Sets the value of each component to its respective absolute value.
*/
	abs():void {
	
	};
	/**
 * @returns A vector that is the result of adding vec to this vector.
 * @param vec - The vector to add to this vector.
*/
	add(vec:DzVec2):DzVec2 {
	
	};
	/**
 * @returns The average of each component of this vector.
 * @since 4.9.3.118
*/
	average():Number {
	
	};
	/**
 * @description Clamps each component of this vector.
 * @since 4.9.3.118
 * @param min - The minimum value.
 * @param max - The maximum value.
*/
	clamp(min:Number, max:Number):void {
	
	};
	/**
 * @returns A copy of this vector where each component has been clamped to min and max.
 * @since 4.9.3.118
 * @param min - The minimum value.
 * @param max - The maximum value.
*/
	clamped(min:Number, max:Number):DzVec2 {
	
	};
	/**
 * @returns A copy of this vector where each component has been clamped to max.
 * @since 4.9.3.118
 * @param max - The maximum value.
*/
	clampedMax(max:Number):DzVec2 {
	
	};
	/**
 * @returns A copy of this vector where each component has been clamped to min.
 * @since 4.9.3.118
 * @param min - The minimum value.
*/
	clampedMin(min:Number):DzVec2 {
	
	};
	/**
 * @description Clamps the maximum value for each component of this vector.
 * @since 4.9.3.118
 * @param max - The maximum value.
*/
	clampMax(max:Number):void {
	
	};
	/**
 * @description Clamps the minimum value for each component of this vector.
 * @since 4.9.3.118
 * @param min - The minimum value.
*/
	clampMin(min:Number):void {
	
	};
	/**
 * @returns The cross product of this vector and another vector.
 * @param vec - The target vector.
*/
	cross(vec:DzVec2):DzVec2 {
	
	};
	/**
 * @returns A vector that is the result of dividing vec by this vector.
 * @param vec - The vector to divide by this vector.
*/
	divide(vec:DzVec2):DzVec2 {
	
	};
	/**
 * @returns The dot product of this vector and another vector.
 * @param vec - The target vector.
*/
	dot(vec:DzVec2):Number {
	
	};
	/**
 * @description Tests if this vector and another vector are considered equal, within a tolerance.
 * @returns true if all components are within tolerance of the components of the given vector.
 * @since 4.9.3.118
 * @param vec - The vector to compare this vector against.
 * @param tolerance - The amount of deviation allowed.
*/
	equals(vec:DzVec2, tolerance:Number):Boolean {
	
	};
	/**
 * @returns The angle between this vector and a target vector. The sign of the angle is such that, when applied, it will swing this vector to the target vector.
 * @param vec - The target vector.
*/
	getAngleTo(vec:DzVec2):Number {
	
	};
	/**
 * @returns A vector with components set to (1.0, 1.0).
 * @since 4.14.1.27
*/
	identity():DzVec2 {
	
	};
	/**
 * @returns The length of this vector.
*/
	length():Number {
	
	};
	/**
 * @returns The length of this vector, squared.
*/
	lengthSquared():Number {
	
	};
	/**
 * @description Performs a linear interpolation between v1 and v2 based on the value of t.
 * @returns v1 if t = 0.0. v2 if t = 1.0. Values outside the 0.0 ⇐ t ⇐ 1.0 range may also be used to return an extrapolated vector.
 * @since 4.9.3.118
 * @param t - The value to evaluate.
 * @param vec1 - The first vector.
 * @param vec2 - The second vector.
*/
	linearInterp(t:Number, v1:DzVec2, v2:DzVec2):DzVec2 {
	
	};
	/**
 * @description Sets the components of this vector to (1.0, 1.0).
*/
	makeIdentity():void {
	
	};
	/**
 * @description Sets the components of this vector to (0.0, 0.0).
*/
	makeZero():void {
	
	};
	/**
 * @returns A copy of this vector where each component has been modulated by min and max.
 * @since 4.9.3.118
 * @param min - The minimum value.
 * @param max - The maximum value.
*/
	modulate(min:Number, max:Number):DzVec2 {
	
	};
	/**
 * @description Modulates each component of this vector.
 * @since 4.9.3.118
 * @param min - The minimum value.
 * @param max - The maximum value.
*/
	modulo(min:Number, max:Number):void {
	
	};
	/**
 * @returns A vector that is the result of multiplying vec by this vector.
 * @param vec - The vector to multiply by this vector.
*/
	multiply(vec:DzVec2):DzVec2 {
	
	};
	/**
 * @description Negates each component of this vector.
*/
	negate():void {
	
	};
	/**
 * @description Modifies this vector to be its unit length.
*/
	normalize():void {
	
	};
	/**
 * @returns A copy of this vector that has been normalized.
*/
	normalized():DzVec2 {
	
	};
	/**
 * @description Sets this vector to have a specific length in the current direction.
 * @param newLength - The length to set.
*/
	setLength(length:Number):void {
	
	};
	/**
 * @description Sets the value of each component to its respective squared value.
*/
	square():void {
	
	};
	/**
 * @returns A vector that is the result of subtracting vec from this vector.
 * @param vec - The vector to subtract from this vector.
*/
	subtract(vec:DzVec2):DzVec2 {
	
	};
	/**
 * @returns A string representation of this vector in the form "[ x, y ]".
*/
	toString():String {
	
	};
	/**
 * @returns A vector with components set to (0.0, 0.0).
 * @since 4.14.1.27
*/
	zero():DzVec2 {
	
	};

}
/**
 * @classdesc See Also:
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/vec3_dz} */
class DzVec3 extends Object {
	/**
 * @description Holds the x component of this vector.
	*/
	x:Number;
	/**
 * @description Holds the y component of this vector.
	*/
	y:Number;
	/**
 * @description Holds the z component of this vector.
	*/
	z:Number;
	/**
 * @description Default Constructor. Creates an uninitialized vector.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Creates a vector by parsing a string.
 * @param vec - A string representation of the vector in the form "[ x, y, z ]"
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Copy Constructor.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Creates and initializes this vector with an array of 3 float values.
 * @since 4.6.4.88
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Creates and initializes this vector with 3 float values.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Sets the value of each component to its respective absolute value.
*/
	abs():void {
	
	};
	/**
 * @returns A vector that is the result of adding vec to this vector.
 * @param vec - The vector to add to this vector.
*/
	add(vec:DzVec3):DzVec3 {
	
	};
	/**
 * @returns The average of each component of this vector.
 * @since 4.9.3.118
*/
	average():Number {
	
	};
	/**
 * @description Clamps each component of this vector.
 * @since 4.9.3.118
 * @param min - The minimum value.
 * @param max - The maximum value.
*/
	clamp(min:Number, max:Number):void {
	
	};
	/**
 * @returns A copy of this vector where each component has been clamped to min and max.
 * @since 4.9.3.118
 * @param min - The minimum value.
 * @param max - The maximum value.
*/
	clamped(min:Number, max:Number):DzVec3 {
	
	};
	/**
 * @returns A copy of this vector where each component has been clamped to max.
 * @since 4.9.3.118
 * @param max - The maximum value.
*/
	clampedMax(max:Number):DzVec3 {
	
	};
	/**
 * @returns A copy of this vector where each component has been clamped to min.
 * @since 4.9.3.118
 * @param min - The minimum value.
*/
	clampedMin(min:Number):DzVec3 {
	
	};
	/**
 * @description Clamps the maximum value for each component of this vector.
 * @since 4.9.3.118
 * @param max - The maximum value.
*/
	clampMax(max:Number):void {
	
	};
	/**
 * @description Clamps the minimum value for each component of this vector.
 * @since 4.9.3.118
 * @param min - The minimum value.
*/
	clampMin(min:Number):void {
	
	};
	/**
 * @returns The cross product of this vector and another vector.
 * @param vec - The target vector.
*/
	cross(vec:DzVec3):DzVec3 {
	
	};
	/**
 * @returns A vector that is the result of dividing vec by this vector.
 * @param vec - The vector to divide by this vector.
*/
	divide(vec:DzVec3):DzVec3 {
	
	};
	/**
 * @returns The dot product of this vector and another vector.
 * @param vec - The target vector.
*/
	dot(vec:DzVec3):Number {
	
	};
	/**
 * @description Tests if this vector and another vector are considered equal, within a tolerance.
 * @returns true if all components are within tolerance of the components of the given vector.
 * @since 4.9.3.118
 * @param vec - The vector to compare this vector against.
 * @param tolerance - The amount of deviation allowed.
*/
	equals(vec:DzVec3, tolerance:Number):Boolean {
	
	};
	/**
 * @returns The angle between this vector and a target vector. The sign of the angle is such that, when applied, it will swing this vector to the target vector.
 * @param vec - The target vector.
*/
	getAngleTo(vec:DzVec3):Number {
	
	};
	/**
 * @returns The rotation that will swing this vector to the target vector.
 * @param vec - The target vector.
*/
	getRotationTo(vec:DzVec3):DzQuat {
	
	};
	/**
 * @returns A vector with components set to (1.0, 1.0, 1.0).
 * @since 4.14.1.27
*/
	identity():DzVec3 {
	
	};
	/**
 * @returns The length of this vector.
*/
	length():Number {
	
	};
	/**
 * @returns The length of this vector, squared.
*/
	lengthSquared():Number {
	
	};
	/**
 * @description Performs a linear interpolation between v1 and v2 based on the value of t.
 * @returns v1 if t = 0.0. v2 if t = 1.0. Values outside the 0.0 ⇐ t ⇐ 1.0 range may also be used to return an extrapolated vector.
 * @since 4.9.3.118
 * @param t - The value to evaluate.
 * @param vec1 - The first vector.
 * @param vec2 - The second vector.
*/
	linearInterp(t:Number, v1:DzVec3, v2:DzVec3):DzVec3 {
	
	};
	/**
 * @description Sets the components of this vector to (1.0, 1.0, 1.0).
*/
	makeIdentity():void {
	
	};
	/**
 * @description Sets the components of this vector to (0.0, 0.0, 0.0).
*/
	makeZero():void {
	
	};
	/**
 * @returns A copy of this vector where each component has been modulated by min and max.
 * @since 4.9.3.118
 * @param min - The minimum value.
 * @param max - The maximum value.
*/
	modulate(min:Number, max:Number):DzVec3 {
	
	};
	/**
 * @description Modulates each component of this vector.
 * @since 4.9.3.118
 * @param min - The minimum value.
 * @param max - The maximum value.
*/
	modulo(min:Number, max:Number):void {
	
	};
	/**
 * @returns A vector that is the result of multiplying vec by this vector.
 * @param vec - The vector to multiply by this vector.
*/
	multiply(vec:DzVec3):DzVec3 {
	
	};
	/**
 * @description Negates each component of this vector.
*/
	negate():void {
	
	};
	/**
 * @description Modifies this vector to be its unit length.
*/
	normalize():void {
	
	};
	/**
 * @returns A copy of this vector that has been normalized.
*/
	normalized():DzVec3 {
	
	};
	/**
 * @description Sets this vector to have a specific length in the current direction.
 * @param newLength - The length to set.
*/
	setLength(length:Number):void {
	
	};
	/**
 * @description Sets the value of each component to its respective squared value.
*/
	square():void {
	
	};
	/**
 * @returns A vector that is the result of subtracting vec from this vector.
 * @param vec - The vector to subtract from this vector.
*/
	subtract(vec:DzVec3):DzVec3 {
	
	};
	/**
 * @returns A string representation of this vector in the form "[ x, y, z ]".
*/
	toString():String {
	
	};
	/**
 * @returns A vector with components set to (0.0, 0.0, 0.0).
 * @since 4.14.1.27
*/
	zero():DzVec3 {
	
	};

}
/**
 * @classdesc This class was added to DAZ Studio 4.x to make it easier to work with 64-bit version numbers and to facilitate compatibility with the old 32-bit version numbers.
Version numbers are typically displayed to the user as short version strings, e.g. 4.0, or long version strings, e.g. 4.0.0.0.
The version number consists of 4 components: The Major version number, the Minor version number, the Revision number, and the Build number. This is displayed in the following order: Major.Minor.Revision.Build.
In DAZ Studio, version numbers are typically stored as 64-bit unsigned integers with 16 bits for each number. This means that each number has a valid range of 0-65535. The most significant 16 bits are the Major version number, the next most significant 16 bits are the Minor version number, the next most significant 16 bits are the Revision number and the least significant 16 bits are the Build number. So, a packed version number in hexadecimal notation might look like: 0x1111222233334444 where 1111 is the Major version number, 2222 is the Minor version number 3333 is the Revision number and 4444 is the build number.
It is recommended that this class be used when possible to reduce confusion when dealing with version numbers in code.
This class provides methods for all of the numerical comparison operators (<, >, ⇐, >=, ==, !=) to make it easy to compare version numbers without directly using the packed value, or the individual components.
Since:
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/version_dz} */
class DzVersion extends Object {
	/**
 * @description Default constructor. Creates an empty version number - i.e. 0.0.0.0
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Creates a version number by parsing a version string.
 * @param version - A string representation of the version number in the form "major.minor.revision.build"
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Creates a version number from the 4 16-bit components.
 * @param major - The major version number.
 * @param minor - The minor version number.
 * @param revision - The revision number.
 * @param build - The build number.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Compatibility constructor. Creates a 64-bit version number from an old 32-bit version number.
 * @param version - The 32-bit version number to convert.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Copy constructor. Creates a version that is a copy of the given number.
 * @param version - The version number to create a copy of.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Parses a version string into a version number.
 * @returns The version number that was created from the string.
 * @param versionStr - A string representation of the version number in the form "major.minor.revision.build"
*/
	static fromString(versionStr:String):DzVersion {
	
	};
	/**
 * @returns true if the version numbers are the same, otherwise false.
 * @param version - The version to compare.
*/
	equal(version:DzVersion):Boolean {
	
	};
	/**
 * @returns The Build number.
*/
	getBuildNumber():Number {
	
	};
	/**
 * @returns A string containing all four version numbers separated with a dot, e.g. "4.0.0.0"
*/
	getLongVersionString():String {
	
	};
	/**
 * @returns The Major version number.
*/
	getMajorVersion():Number {
	
	};
	/**
 * @returns The Minor version number.
*/
	getMinorVersion():Number {
	
	};
	/**
 * @returns The Revision number.
*/
	getRevisionNumber():Number {
	
	};
	/**
 * @returns The 64-bit packed representation of the version number.
*/
	getVersionNumber():Number {
	
	};
	/**
 * @returns A 32-bit packed representation of the version number.
 * @attention For backwards compatibility with old 32-bit version numbers - this function should only be used if absolutely necessary. It is highly recommended that all functionality be ported to the new 64-bit version number system. Using this function will result in inaccurate version numbering if one of the version numbers is greater than 255.
*/
	getVersionNumber32():Number {
	
	};
	/**
 * @returns A string containing the Major and Minor version numbers separated with a dot, e.g. "4.0"
*/
	getVersionString():String {
	
	};
	/**
 * @returns true if the version number is greater than (newer than) this version number, otherwise false.
 * @param version - The version to compare.
*/
	greaterThan(version:DzVersion):Boolean {
	
	};
	/**
 * @returns true if the version number is greater than or equal (newer than or the same as) this version number, otherwise false.
 * @param version - The version to compare.
*/
	greaterThanOrEqual(version:DzVersion):Boolean {
	
	};
	/**
 * @returns true if the version number has been initialized, otherwise false.
*/
	isValid():Boolean {
	
	};
	/**
 * @returns true if the version number is less than (older than) this version number, otherwise false.
 * @param version - The version to compare.
*/
	lessThan(version:DzVersion):Boolean {
	
	};
	/**
 * @returns true if the version number is less than or equal (older than or the same as) this version number, otherwise false.
 * @param version - The version to compare.
*/
	lessThanOrEqual(version:DzVersion):Boolean {
	
	};
	/**
 * @returns true if the version numbers are different, otherwise false.
 * @param version - The version to compare.
*/
	notEqual(version:DzVersion):Boolean {
	
	};
	/**
 * @description Sets the 64-bit version number from an old 32-bit version number.
 * @param version - The old 32-bit version number.
*/
	setVersionNumber(version:Number):void {
	
	};
	/**
 * @description Sets the version number from the 4 16-bit components.
 * @param major - The major version number.
 * @param minor - The minor version number.
 * @param revision - The revision number.
 * @param build - The build number.
*/
	setVersionNumber(major:Number, minor:Number, revision:Number, build:Number):void {
	
	};
	/**
 * @returns A string representation of this version in the form "major.minor.revision.build".
*/
	toString():String {
	
	};

}
/**
 * @classdesc 
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/vertexmap_dz} */
class DzVertexMap extends DzRefCountedItem, DzMap {
	/**
 * @description Creates a new vertex map of the given type.
 * @param mapType - The type of data that will be stored in this map.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Adds a discontinuous data item to the map.
 * @param vertexIdx - The index of the vertex that this data is for.
 * @param facetIdx - The index of the facet that this data is for.
 * @param val - The data value to add to the map.
*/
	addDctFloatValue(vertexIdx:Number, facetIdx:Number, val:Number):void {
	
	};
	/**
 * @description Adds a discontinuous data item to the map.
 * @param vertexIdx - The index of the vertex that this data is for.
 * @param facetIdx - The index of the facet that this data is for.
 * @param val - The data value to add to the map.
*/
	addDctIntValue(vertexIdx:Number, facetIdx:Number, val:Number):void {
	
	};
	/**
 * @description Adds a discontinuous data item to the map.
 * @param vertexIdx - The index of the vertex that this data is for.
 * @param facetIdx - The index of the facet that this data is for.
 * @param val - The data value to add to the map.
*/
	addDctPnt2Vec(vertexIdx:Number, facetIdx:Number, val:DzVec3):void {
	
	};
	/**
 * @description Adds a discontinuous data item to the map.
 * @param vertexIdx - The index of the vertex that this data is for.
 * @param facetIdx - The index of the facet that this data is for.
 * @param val - The data value to add to the map.
*/
	addDctPnt3Vec(vertexIdx:Number, facetIdx:Number, val:DzVec3):void {
	
	};
	/**
 * @description Adds a discontinuous data item to the map.
 * @param vertexIdx - The index of the vertex that this data is for.
 * @param facetIdx - The index of the facet that this data is for.
 * @param val - The data value to add to the map.
*/
	addDctShortValue(vertexIdx:Number, facetIdx:Number, val:Number):void {
	
	};
	/**
 * @description Removes all the discontinuous values from the map
*/
	clearDiscontinuousData():void {
	
	};
	/**
 * @returns The index of the data item in the map for the given facet vertex.
 * @param vertexIdx - The index of the vertex to get data for
 * @param facetIdx - The index of the facet to get data for
*/
	getMapIndex(vertexIdx:Number, facetIdx:Number):Number {
	
	};
	/**
 * @returns The number of discontinuous vertices in the map.
*/
	getNumDiscontinuousVerts():Number {
	
	};
	/**
 * @returns The number of vertices in the geometry that this vertex map is for.
 * @since 4.9.3.137
*/
	getTargetVertexCount():Number {
	
	};
	/**
 * @description Pre-sizes the discontinuous data for better memory performance.
*/
	preSizeDiscontinuous(disconCount:Number):void {
	
	};
	/**
 * @description Sets the facet vertex to have discontinuous data which points to the given map index. This function will update existing data for the facet vertex, or will create new data if necessary.
 * @param vertexIdx - The index of the vertex that this data is for.
 * @param facetIdx - The index of the facet to set the discontinuous map index for.
 * @param mapIdx - The index of the map item that this facet vertex will use.
*/
	setDctIndex(vertexIdx:Number, facetIdx:Number, mapIdx:Number):void {
	
	};
	/**
 * @description Sets the vertex count of this vertex map.
 * @since 4.9.3.137
 * @param vertCount - The number of vertices in the mesh that this map is for.
*/
	setTargetVertexCount(vertCount:Number):void {
	
	};
	/**
 * @description Reduces discontinuous data down to the minimum space required.
*/
	squeezeDiscontinuous():void {
	
	};
	/**
 * @description Updates a discontinuous value for a given facet and oldIdx. This does not remove any values from the map, it may add a new discontinuous value if the newIdx and oldIdx have different map values.
*/
	updateDctValue(oldIdx:Number, newIdx:Number, facetIdx:Number):void {
	
	};

}
/**
 * @classdesc Provides a DzGroupBox with a vertical layout.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/vgroupbox_dz} */
class DzVGroupBox extends DzGroupBox {
	/**
 * @description Creates a group box as a child of the given parent widget.
 * @param parent - The widget parent for the group box.
 * @constructor
*/
	constructor() {
	
	};

}
/**
 * @classdesc TODO:
Add detailed description.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/videoclip_dz} */
class DzVideoClip extends QObject {
	/**
 * @description Default Constructor.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Adds a frame to the end of the clip
 * @param img - Image to add as a frame.
*/
	appendFrame(img:Image):void {
	
	};
	/**
 * @description Adds a frame to the end of the clip
 * @param filename - Image file to add as a frame.
*/
	appendFrameFile(imgFilename:String):void {
	
	};
	/**
 * @returns The audio (if any) that is associated with the video.
*/
	getAudio():DzAudioClip {
	
	};
	/**
 * @returns The time offset from the beginning of the video that the audio clip begins. This can be negative (the beginning of the video starts part way into the audio clip).
*/
	getAudioStartTime():DzTime {
	
	};
	/**
 * @returns The i'th frame in still image form
*/
	getFrame(i:Number):Image {
	
	};
	/**
 * @returns The number of frames per second for the clip
*/
	getFrameRate():Number {
	
	};
	/**
 * @returns The height of the video clip.
*/
	getHeight():Number {
	
	};
	/**
 * @returns The number of frames in the video clip.
*/
	getNumFrames():Number {
	
	};
	/**
 * @returns The width of the video clip.
*/
	getWidth():Number {
	
	};
	/**
 * @description Set the audio that accompanies the video clip
 * @param audio - The audio clip for the video.
 * @param audioStartTime - The time offset from the beginning of the video that the audio clip begins. This can be negative (the beginning of the video starts part way into the audio clip).
*/
	setAudio(audio:DzAudioClip, audioStartTime:DzTime):void {
	
	};
	/**
 * @description Set the frame rate of the clip
 * @param rate - The number of frames per second for the clip
*/
	setFrameRate(rate:Number):void {
	
	};

}
/**
 * @classdesc TODO:
Add detailed description.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/videoexporter_dz} */
class DzVideoExporter extends DzFileIO {
	/**
 * @returns A description of the exporter that can be placed in a file type selection combo box (e.g. "AVI Format")
*/
	getDescription():String {
	
	};
	/**
 * @returns The extension that this exporter will force filenames to (excluding the preceeding '.').
*/
	getExtension():String {
	
	};
	/**
 * @returns true if this exporter writes to a 'real' file. Derived classes should override this to indicate whether or not they are writing out to a real file. Exporters can, if they want to, write to entities other than files (e.g. sockets, pipes, etc.)
*/
	isFileExporter():Boolean {
	
	};
	/**
 * @description Writes the file.
 * @returns DZ_NO_ERROR on success, otherwise an error code.
 * @param filename - The name of the file to save the video to.
 * @param clip - Video clip to save to file.
*/
	saveClip(filename:String, clip:DzVideoClip):DzError {
	
	};
	/**
 * @description Writes the file.
 * @returns DZ_NO_ERROR on success, otherwise an error code.
 * @param filename - The name of the file to save the video to.
 * @param clip - Video clip to save to file.
*/
	saveClip(filename:String, clip:DzVideoClip, options:DzFileIOSettings):DzError {
	
	};

}
/**
 * @classdesc A DzView is a widget that consists of a toolbar (for providing access to associated camera controls) and a veiw selection menu button (for selecting which camera to view through), that can be displayed to the user within a DzViewport.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/view_dz} */
class DzView extends QWidget {
	/**
 * @returns A user-readable description of the view.
*/
	getDescription():String {
	
	};
	/**
 * @returns A pixmap icon to represent the view.
*/
	getIcon():Pixmap {
	
	};

}
/**
 * @classdesc A DzViewport is a widget that consists of a Dz3DViewport, an optional alternate DzView, and an indicator of the viewport's active state (for cases where multiple instances are displayed to the user at the same time).
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/viewport_dz} */
class DzViewport extends QWidget {
	/**
 * @returns The embedded 3D viewport that this viewport encapsulates.
*/
	get3DViewport():Dz3DViewport {
	
	};
	/**
 * @returns The manager of this viewport.
*/
	getManager():DzViewportMgr {
	
	};
	/**
 * @returns The alternate view currently being displayed in the viewport; NULL if an alternate view is not displayed (i.e., the 3D viewport is active).
*/
	getView():DzView {
	
	};
	/**
 * @returns true if this viewport is custom; otherwise false.
 * @since 4.7.1.104
*/
	isCustom():Boolean {
	
	};
	/**
 * @description Sets the alternate view for the viewport; this replaces the 3D viewport while active. Pass in NULL to clear the alternate view and restore the 3D viewport.
 * @param view - The view to display in the viewport.
*/
	setView(view:DzView):void {
	
	};
	/**
 * @description Sets the visible state of the alternate view for this viewport, if an alternate view has been set.
 * @param onOff - If true, the alternate view (if any) is displayed.
*/
	setViewVisible(onOff:Boolean):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the dimensions of the viewport has changed.
 * @signature `"dimensionsChanged()"`
 * @event
*/
	dimensionsChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the dimensions of the encapsulated 3D viewport has changed.
 * @signature `"view3dCurrentDimensionsChanged()"`
 * @event
*/
	view3dCurrentDimensionsChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the view has changed (e.g., when switched between the 3D viewport and an alternate view).
 * @signature `"viewChanged(DzView*)"`
 * @event
*/
	viewChanged(view:DzView):void {
	
	};

}
/**
 * @classdesc Responsible for the management of viewports, general options related to how viewports (or the items within them) are drawn or operated on, and the tools that operate within the context of a viewport.
There is only one instance of this manager in an application. This instance is created and owned by DzMainWindow. Request the instance via DzMainWindow.getViewportMgr().
See Also:
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/viewportmgr_dz} */
class DzViewportMgr extends QWidget {
	/**
 * @description ENUMERATOR: No visible viewports.
*/
	
	static NO_PANES;
	/**
 * @description ENUMERATOR: A single visible viewport.
*/
	
	static SINGLE_PANE;
	/**
 * @description ENUMERATOR: 2 visible viewports; split the view area into right and left.
*/
	
	static LEFT_RIGHT;
	/**
 * @description ENUMERATOR: 2 visible viewports; split the view area into top and bottom.
*/
	
	static TOP_BOTTOM;
	/**
 * @description ENUMERATOR: 3 visible viewports; 2 on the left side and 1 on the right.
*/
	
	static LEFT2_RIGHT;
	/**
 * @description ENUMERATOR: 4 visible viewports; 3 on the left side and 1 on the right.
*/
	
	static LEFT3_RIGHT;
	/**
 * @description ENUMERATOR: 3 visible viewports; 2 on the right side and 1 on the left.
*/
	
	static LEFT_RIGHT2;
	/**
 * @description ENUMERATOR: 4 visible viewports; 3 on the right side and 1 on the left.
*/
	
	static LEFT_RIGHT3;
	/**
 * @description ENUMERATOR: 3 visible viewports; 2 on the top side and 1 on the bottom.
*/
	
	static TOP2_BOTTOM;
	/**
 * @description ENUMERATOR: 4 visible viewports; 3 on the top side and 1 on the bottom.
*/
	
	static TOP3_BOTTOM;
	/**
 * @description ENUMERATOR: 3 visible viewports; 2 on the bottom side and 1 on the top.
*/
	
	static TOP_BOTTOM2;
	/**
 * @description ENUMERATOR: 4 visible viewports; 3 on the bottom side and 1 on the top.
*/
	
	static TOP_BOTTOM3;
	/**
 * @description ENUMERATOR: 4 visible viewports; one in each corner.
*/
	
	static FOUR_PANE;
	/**
 * @description ENUMERATOR: Total number of layouts.
*/
	
	static NUM_LAYOUTS;
	/**
 * @description ENUMERATOR: Clicking a node in the viewport causes that node to become selected (or deselected).
*/
	
	static Node;
	/**
 * @description ENUMERATOR: Clicking any node of a figure in the viewport, which does not already have a node selected, causes the skeleton for that node to become selected. Each subsequent click on a node in the same figure causes the clicked node to become selected (or deselected). All other node types behave the same as described in Node.
*/
	
	static SkeletonThenNode;
	/**
 * @description ENUMERATOR: Clicking any node of a figure in the viewport causes the skeleton for that node to become selected (or deselected). All other node types behave the same as described in Node.
*/
	
	static Skeleton;
	/**
 * @description ENUMERATOR: Quick drawing is disabled; objects will be drawn using the current DrawStyle for the viewport.
*/
	
	static QDOff;
	/**
 * @description ENUMERATOR: Objects will be drawn using a "Wire Bounding Box" representation.
*/
	
	static QDWire;
	/**
 * @description ENUMERATOR: Objects will be drawn using a "Solid Bounding Box" representation.
*/
	
	static QDSmooth;
	/**
 * @description ENUMERATOR: Clicking a region in the viewport causes interaction with that region in a hierarchical manner; each click provides access to sibling and immediate child regions of the region that was clicked; double-click ascends to the root region.
*/
	
	static Nested;
	/**
 * @description ENUMERATOR: Clicking a region in the viewport causes interaction with that region directly; region hierarchy is ignored; double-click ascends to the root region.
*/
	
	static Flat;
	/**
 * @description ENUMERATOR: No accelerator.
*/
	
	static NoAccel;
	/**
 * @description ENUMERATOR: The left button on the mouse is pressed.
*/
	
	static LeftClick;
	/**
 * @description ENUMERATOR: The right button on the mouse is pressed.
*/
	
	static RightClick;
	/**
 * @description ENUMERATOR: The middle button on the mouse is pressed.
*/
	
	static MidClick;
	/**
 * @description ENUMERATOR: The [Alt] key on the keyboard is pressed and the left button on the mouse is pressed.
*/
	
	static AltLeftClick;
	/**
 * @description ENUMERATOR: The [Alt] key on the keyboard is pressed and the right button on the mouse is pressed.
*/
	
	static AltRightClick;
	/**
 * @description ENUMERATOR: The [Alt] key on the keyboard is pressed and the middle button on the mouse is pressed.
*/
	
	static AltMidClick;
	/**
 * @description ENUMERATOR: The [Ctrl] key on the keyboard is pressed and the left button on the mouse is pressed.
*/
	
	static CtrlLeftClick;
	/**
 * @description ENUMERATOR: The [Ctrl] key on the keyboard is pressed and the right button on the mouse is pressed.
*/
	
	static CtrlRightClick;
	/**
 * @description ENUMERATOR: The [Ctrl] key on the keyboard is pressed and the middle button on the mouse is pressed.
*/
	
	static CtrlMidClick;
	/**
 * @description ENUMERATOR: The [Shift] key on the keyboard is pressed and the left button on the mouse is pressed.
*/
	
	static ShiftLeftClick;
	/**
 * @description ENUMERATOR: The [Shift] key on the keyboard is pressed and the right button on the mouse is pressed.
*/
	
	static ShiftRightClick;
	/**
 * @description ENUMERATOR: The [Shift] key on the keyboard is pressed and the middle button on the mouse is pressed.
*/
	
	static ShiftMidClick;
	/**
 * @description ENUMERATOR: The [Ctrl] and [Alt] keys on the keyboard are pressed and the left button on the mouse is pressed.
*/
	
	static CtrlAltLeftClick;
	/**
 * @description ENUMERATOR: The [Ctrl] and [Alt] keys on the keyboard are pressed and the right button on the mouse is pressed.
*/
	
	static CtrlAltRightClick;
	/**
 * @description ENUMERATOR: The [Ctrl] and [Alt] keys on the keyboard are pressed and the middle button on the mouse is pressed.
*/
	
	static CtrlAltMidClick;
	/**
 * @description ENUMERATOR: The [Ctrl] and [Shift] keys on the keyboard are pressed and the left button on the mouse is pressed.
*/
	
	static CtrlShiftLeftClick;
	/**
 * @description ENUMERATOR: The [Ctrl] and [Shift] keys on the keyboard are pressed and the right button on the mouse is pressed.
*/
	
	static CtrlShiftRightClick;
	/**
 * @description ENUMERATOR: The [Ctrl] and [Shift] keys on the keyboard are pressed and the middle button on the mouse is pressed.
*/
	
	static CtrlShiftMidClick;
	/**
 * @description ENUMERATOR: The [Alt] and [Shift] keys on the keyboard are pressed and the left button on the mouse is pressed.
*/
	
	static AltShiftLeftClick;
	/**
 * @description ENUMERATOR: The [Alt] and [Shift] keys on the keyboard are pressed and the right button on the mouse is pressed.
*/
	
	static AltShiftRightClick;
	/**
 * @description ENUMERATOR: The [Alt] and [Shift] keys on the keyboard are pressed and the middle button on the mouse is pressed.
*/
	
	static AltShiftMidClick;
	/**
 * @description ENUMERATOR: The [Ctrl], [Alt] and [Shift] keys on the keyboard are pressed and the left button on the mouse is pressed.
*/
	
	static CtrlAltShiftLeftClick;
	/**
 * @description ENUMERATOR: The [Ctrl], [Alt] and [Shift] keys on the keyboard are pressed and the right button on the mouse is pressed.
*/
	
	static CtrlAltShiftRightClick;
	/**
 * @description ENUMERATOR: The [Ctrl], [Alt] and [Shift] keys on the keyboard are pressed and the middle button on the mouse is pressed.
*/
	
	static CtrlAltShiftMidClick;
	/**
 * @description ENUMERATOR: No modifier is pressed.
*/
	
	static NoModifier;
	/**
 * @description ENUMERATOR: The [Alt] key on the keyboard is pressed.
*/
	
	static Alt;
	/**
 * @description ENUMERATOR: The [Shift] key on the keyboard is pressed.
*/
	
	static Shift;
	/**
 * @description ENUMERATOR: The [Ctrl] key on the keyboard is pressed.
*/
	
	static Ctrl;
	/**
 * @description ENUMERATOR: The [Ctrl] and [Alt] keys on the keyboard are pressed.
*/
	
	static CtrlAlt;
	/**
 * @description ENUMERATOR: The [Ctrl] and [Shift] keys on the keyboard are pressed.
*/
	
	static CtrlShift;
	/**
 * @description ENUMERATOR: The [Ctrl], [Alt] and [Shift] keys on the keyboard are pressed.
*/
	
	static CtrlAltShift;
	/**
 * @description ENUMERATOR: The [Shift] and [Alt] keys on the keyboard are pressed.
*/
	
	static ShiftAlt;
	/**
 * @description ENUMERATOR: Do nothing.
*/
	
	static NoOperation;
	/**
 * @description ENUMERATOR: Rotate the camera about its focal point.
*/
	
	static OrbitCamera;
	/**
 * @description ENUMERATOR: Rotate the camera about its origin.
*/
	
	static RotateCamera;
	/**
 * @description ENUMERATOR: Translate the camera on its relative XY plane; i.e., left-right, up-down.
*/
	
	static PanCamera;
	/**
 * @description ENUMERATOR: Translate the camera on its relative XZ plane; i.e., left-right, toward-away.
*/
	
	static DollyCamera;
	/**
 * @description ENUMERATOR: Rotate the camera about its relative Z axis; i.e., tilt.
*/
	
	static BankCamera;
	/**
 * @description ENUMERATOR: Translate the camera on its relative XZ plane; i.e., left-right, toward-away.
*/
	
	static ZoomDCamera;
	/**
 * @description ENUMERATOR: Adjust the focal distance and/or translate the camera on its relative X axis.
*/
	
	static ZoomFCamera;
	/**
 * @returns The number of user selectable DrawStyles.
*/
	getNumUserDrawStyles():Number {
	
	};
	/**
 * @returns The number of available views.
*/
	getNumViews():Number {
	
	};
	/**
 * @returns A new instance of the DrawStyle at the given index (if valid), otherwise null.
 * @param i - The index of the DrawStyle to get.
*/
	static getUserDrawStyle(i:Number):DzUserDrawStyle {
	
	};
	/**
 * @returns A new instance of the view at the given index (if valid), otherwise null.
 * @param i - The index of the view to get.
*/
	static getView(i:Number):DzView {
	
	};
	/**
 * @returns The description for the view at the given index (if valid), otherwise an empty string.
 * @param i - The index of the view to get the description of.
*/
	static getViewDescription(i:Number):String {
	
	};
	/**
 * @description Sets the next tool in the list after the currently active tool to be the currently active tool.
*/
	activateNextTool():void {
	
	};
	/**
 * @description Sets the tool in the list before the currently active tool to be the currently active tool.
*/
	activatePrevTool():void {
	
	};
	/**
 * @description Causes the color of each viewport to be set to their respective values, if the color is defined in the current style.
*/
	applyStyleColors():void {
	
	};
	/**
 * @description Clears any view tool that was temporarily overriding the active view tool.
 * @since 4.8.0.10
*/
	clearOverrideTool():void {
	
	};
	/**
 * @returns The tool with the given class name (if any), otherwise null.
 * @param className - The classname of the tool to find.
*/
	findTool(className:String):DzViewTool {
	
	};
	/**
 * @returns A new instance of the DrawStyle found (if any), otherwise null.
 * @param description - The description of the DrawStyle to find.
*/
	findUserDrawStyle(description:String):DzUserDrawStyle {
	
	};
	/**
 * @returns The active view tool.
*/
	getActiveTool():DzViewTool {
	
	};
	/**
 * @returns The currently active viewport.
*/
	getActiveViewport():DzViewport {
	
	};
	/**
 * @returns The custom viewport at the given index (if valid), otherwise null.
 * @since 4.7.1.104
*/
	getCustomViewport(i:Number):DzViewport {
	
	};
	/**
 * @returns The default viewport at the given index (if valid), otherwise null.
 * @since 4.7.1.104
*/
	getDefaultViewport(i:Number):DzViewport {
	
	};
	/**
 * @returns A list of elements with properites that control the DrawStyle for the active 3D viewport.
 * @since 4.11.0.44
*/
	getDrawSettingsElementList():Array {
	
	};
	/**
 * @returns true if mouse wheel response in the viewports is currently inverted, otherwise false.
*/
	getInvertMouseWheel():Boolean {
	
	};
	/**
 * @returns Current view layout.
*/
	getLayout():Layout {
	
	};
	/**
 * @returns The mouse button accelerator for the given operation (if any), otherwise NoAccel.
 * @param operation - The operation to get the mouse button accelerator for.
*/
	getMouseBtnAccelerator(operation:ViewOperation):ViewMouseBtnAccelerator {
	
	};
	/**
 * @returns The mouse button accelerator for the given mouse button and keyboard modifier states (if any), otherwise NoAccel.
 * @param modifiers - The keyboard modifiers to include.
*/
	getMouseBtnAccelerator(button:Qt.MouseButton, modifiers:Qt.KeyboardModifiers):ViewMouseBtnAccelerator {
	
	};
	/**
 * @returns The mouse button accelerator for the given mouse button and keyboard modifier states (if any), otherwise NoAccel.
 * @param mouseBtn - If 0, the left mouse button. If 1, the middle mouse button. If 2, the right mouse button.
 * @param ctrl - If true, the Ctrl key will be included.
 * @param alt - If true, the Alt key will be included.
 * @param shift - If true, the Shift key will be included.
*/
	getMouseBtnAccelerator(mouseBtn:Number, ctrl:Boolean, alt:Boolean, shift:Boolean):ViewMouseBtnAccelerator {
	
	};
	/**
 * @returns The mouse button accelerator for the given string (if any), otherwise NoAccel.
 * @param str - The string to convert.
*/
	getMouseBtnAccelerator(str:String):ViewMouseBtnAccelerator {
	
	};
	/**
 * @returns A string representation of the given mouse button accelerator (if any), otherwise an empty string.
 * @param accel - The mouse button accelerator to get the string for.
*/
	getMouseBtnAcceleratorString(accel:ViewMouseBtnAccelerator):String {
	
	};
	/**
 * @returns A string representation of the mouse button accelerator for the given operation (if any), otherwise an empty string.
 * @param operation - The operation to get the string for.
*/
	getMouseBtnAcceleratorString(operation:ViewOperation):String {
	
	};
	/**
 * @returns The sensitivity of the mouse move response in the viewports.
 * @since 4.11.0.159
*/
	getMouseDragScalar():Number {
	
	};
	/**
 * @returns The mouse modifier for the given string (if any), otherwise NoModifier.
 * @param str - The string to convert.
*/
	getMouseModifier(str:String):ViewMouseModifier {
	
	};
	/**
 * @returns The mouse modifier for the given keyboard modifier states (if any), otherwise NoModifier.
 * @param modifiers - The keyboard modifiers to include.
*/
	getMouseModifier(modifiers:Qt.KeyboardModifiers):ViewMouseModifier {
	
	};
	/**
 * @returns The mouse modifier for the given keyboard modifier states (if any), otherwise NoModifier.
 * @param ctrl - If true, the Ctrl key will be included.
 * @param alt - If true, the Alt key will be included.
 * @param shift - If true, the Shift key will be included.
*/
	getMouseModifier(ctrl:Boolean, alt:Boolean, shift:Boolean):ViewMouseModifier {
	
	};
	/**
 * @returns A string representation of the given mouse modifier (if any), otherwise an empty string.
 * @param accel - The mouse modifier to get the string for.
*/
	getMouseModifierString(accel:ViewMouseModifier):String {
	
	};
	/**
 * @returns The sensitivity of the mouse wheel response in the viewports.
 * @since 4.11.0.159
*/
	getMouseWheelScalar():Number {
	
	};
	/**
 * @returns The node click mode for pick tools.
*/
	getNodeClickMode():Number {
	
	};
	/**
 * @returns The number of custom viewports.
 * @since 4.7.1.104
*/
	getNumCustomViewports():Number {
	
	};
	/**
 * @returns The number of default (non-custom) viewports.
 * @since 4.7.1.104
*/
	getNumDefaultViewports():Number {
	
	};
	/**
 * @returns The number of view tools.
*/
	getNumTools():Number {
	
	};
	/**
 * @returns The number of view cameras.
*/
	getNumViewCameras():Number {
	
	};
	/**
 * @returns The total number of viewports.
*/
	getNumViewports():Number {
	
	};
	/**
 * @returns The number of custom viewports currently showing.
 * @since 4.7.1.104
*/
	getNumVisibleCustomViewports():Number {
	
	};
	/**
 * @returns The number of default viewports currently showing.
 * @since 4.7.1.104
*/
	getNumVisibleDefaultViewports():Number {
	
	};
	/**
 * @returns The total number of viewports currently showing.
*/
	getNumVisibleViewports():Number {
	
	};
	/**
 * @returns The operation for the given accelerator (if any), otherwise NoOperation.
 * @param accel - The accelerator to get the operation for.
*/
	getOperation(accel:ViewMouseBtnAccelerator):ViewOperation {
	
	};
	/**
 * @returns The override tool (if any), otherwise NULL.
 * @since 4.8.0.10
 * @attention An override tool is a view tool that temporarily overrides the active view tool.
*/
	getOverrideTool():DzViewTool {
	
	};
	/**
 * @returns Whether or not to propagate a background color change to all viewports.
*/
	getPropagateBackgroundColor():Boolean {
	
	};
	/**
 * @returns The current quick draw mode.
 * @since 4.11.0.159
*/
	getQuickDrawMode():QDMode {
	
	};
	/**
 * @returns The region click mode for pick tools.
*/
	getRegionClickMode():Number {
	
	};
	/**
 * @returns The view tool at the given index (if valid), otherwise null.
*/
	getTool(i:Number):DzViewTool {
	
	};
	/**
 * @returns true if illumination calculations for each pixel in the viewport is enabled, otherwise false.
*/
	getUsePerPixelLighting():Boolean {
	
	};
	/**
 * @returns The View (non-animatable) camera of the given type.
*/
	getViewCamera(type:DzCamera.CameraType):DzCamera {
	
	};
	/**
 * @returns The View (non-animatable) camera at the given index.
*/
	getViewCamera(i:Number):DzCamera {
	
	};
	/**
 * @returns The viewport at the given index.
 * @attention An index outside the default range (i.e., getNumDefaultViewports() - 1) will overflow to getCustomViewport().
*/
	getViewport(i:Number):DzViewport {
	
	};
	/**
 * @returns true if manipulation binding will be used on TriAx weighted figures during manipulation, otherwise false.
 * @since 4.11.0.159
*/
	isManipulationBindingOn():Boolean {
	
	};
	/**
 * @returns true if SubDivision Manipulation is enabled, otherwise false..
 * @since 4.11.0.159
*/
	isSubDManipulationOn():Boolean {
	
	};
	/**
 * @description A convenience method that forces a repaint of the currently active 3D viewport.
*/
	repaintActive3DViewport():void {
	
	};
	/**
 * @description Resets all the view cameras to their defaults.
*/
	resetViewCameras():void {
	
	};
	/**
 * @description Sets the currently active 3D tool.
 * @param i - The index of the tool to set as being the active tool.
*/
	setActiveTool(i:Number):void {
	
	};
	/**
 * @description Sets the currently active 3D tool.
 * @param tool - The tool to set as being the active tool.
*/
	setActiveTool(tool:DzViewTool):void {
	
	};
	/**
 * @description Set the active DzViewport. The given DzViewport must already be attached as an interface to this Scene.
 * @param activeView - The viewport to set.
*/
	setActiveViewport(activeView:DzViewport):void {
	
	};
	/**
 * @description Sets whether mouse wheel response in the viewports is inverted.
 * @param onOff - If true, the mouse wheel will be inverted in the viewports. If false, mouse wheel response in the viewports will be standard.
*/
	setInvertMouseWheel(onOff:Boolean):void {
	
	};
	/**
 * @description Set the current layout. If we are in single pane mode, the new layout will take effect after single pane mode is switched off.
 * @param val - The layout to set.
*/
	setLayout(val:Layout):void {
	
	};
	/**
 * @description Sets whether or not manipulation binding will be used on TriAx weighted figures during manipulation.
 * @since 4.11.0.159
 * @param onOff - If true, manipulation binding will be used on TriAx weighted figures during manipulation.
*/
	setManipulationBindingOn(onOff:Boolean):void {
	
	};
	/**
 * @description Sets the mouse button accelerator for the given view operation.
 * @param operation - The view operation to set the accelerator for.
 * @param accel - The accelerator to set for the view operation.
*/
	setMouseBtnAccelerator(operation:ViewOperation, accel:ViewMouseBtnAccelerator):void {
	
	};
	/**
 * @description Sets the sensitivity of the mouse move response in the viewports.
 * @since 4.11.0.159
 * @param val - The scalar value to set.
*/
	setMouseDragScalar(val:Number):void {
	
	};
	/**
 * @description Sets the sensitivity of the mouse wheel response in the viewports.
 * @since 4.11.0.159
 * @param val - The scalar value to set.
*/
	setMouseWheelScalar(val:Number):void {
	
	};
	/**
 * @description Set the click mode for node selection tools.
 * @param mode - The mode to set.
*/
	setNodeClickMode(mode:Number):void {
	
	};
	/**
 * @description Sets a temporary view tool that overrides the active view tool.
 * @since 4.8.0.10
 * @param viewTool - The view tool to override with.
*/
	setOverrideTool(viewTool:DzViewTool):void {
	
	};
	/**
 * @description Set whether or not a background color change of a single viewport should be propagated to the other viewports.
 * @param onOff - If true, setting the background color of one veiwport sets the background color for all viewports.
*/
	setPropagateBackgroundColor(onOff:Boolean):void {
	
	};
	/**
 * @description Sets the current quick draw mode.
 * @since 4.11.0.159
*/
	setQuickDrawMode(mode:QDMode):void {
	
	};
	/**
 * @description Set the click mode for region selection tools.
 * @param mode - The mode to set.
*/
	setRegionClickMode(mode:Number):void {
	
	};
	/**
 * @description Sets whether or not SubD models are subdivided during manipulation.
 * @since 4.11.0.159
 * @param onOff - If true, SubD models are subdivided during manipulation.
*/
	setSubDManipulationOn(onOff:Boolean):void {
	
	};
	/**
 * @description Sets whether or not to enable illumination calculations for each pixel in the viewport.
 * @param onOff - If true, per pixel lighting is enabled.
*/
	setUsePerPixelLighting(onOff:Boolean):void {
	
	};
	/**
 * @description Sets the ratios that are used to layout the viewports inside the view area. Each value is a percentage of the available area that will be allocated to the given viewport(s). The values passed in are clamped to valid ranges before applying them. The values should be specified in decimal notation - i.e. 0.0 is 0%, 0.5 is 50%, and 1.0 is 100%. The minimum percentage of the area allocated to any viewport on any axis is 20% (0.2). Therefore, any values that are below this value will be increased to this value, and any values that would result in a remainder less than this value will be decreased.
 * @param hSingle - The percentage of the height taken by the top viewport(s) when the area has a single horizontal division.
 * @param h1 - The percentage of the height taken by the top view port when the area has two horizontal divisions.
 * @param h2 - The percentage of the height taken by the center view port when the area has two horizontal divisions.
 * @param vSingle - The percentage of the width taken by the left viewport(s) when the area has a single vertical division.
 * @param v1 - The percentage of the width taken by the left view port when the area has two vertical divisions.
 * @param v2 - The percentage of the width taken by the center view port when the area has two vertical divisions.
*/
	setViewRatios(hSingle:Number, h1:Number, h2:Number, vSingle:Number, v1:Number, v2:Number):void {
	
	};
	/**
 * @returns true if accel is not already assigned, otherwise false.
 * @param accel - The accelerator to test.
*/
	validateMouseBtnAccelerator(accel:ViewMouseBtnAccelerator):Boolean {
	
	};
	/**
 * @returns Always returns true; currently no wheel events on the viewport to conflict with.
 * @param accel - The accelerator to test.
*/
	validateMouseWheelAccelerator(accel:ViewMouseModifier):Boolean {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when an accelerator (keyboard shortcut) for navigating the scene changes.
 * @signature `"accelChanged(ViewOperation,ViewMouseBtnAccelerator)"`
 * @event
*/
	accelChanged(operation:ViewOperation, accel:ViewMouseBtnAccelerator):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when an accelerator (keyboard shortcut) for navigating the scene changes.
 * @signature `"acceleratorsChanged()"`
 * @event
*/
	acceleratorsChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the dimensions of the active 3D viewport changes.
 * @signature `"acitve3DViewCurrentDimensionsChanged()"`
 * @event
*/
	acitve3DViewCurrentDimensionsChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the drawn data for the active tool changes.
 * @signature `"activeToolDrawnDataChanged()"`
 * @event
*/
	activeToolDrawnDataChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the active tool changes.
 * @signature `"activeToolSwitched()"`
 * @event
*/
	activeToolSwitched():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the active view changes size.
 * @signature `"activeViewResized()"`
 * @event
*/
	activeViewResized():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the active view changes.
 * @signature `"activeViewSwitched()"`
 * @event
*/
	activeViewSwitched():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the active viewport is about to display a context menu. Other objects can connect to this signal to add custom items to the menu that is displayed to the user.
 * @signature `"contextMenuAboutToShow(DzMenu*,Dz3DViewport*,QPoint)"`
 * @event
*/
	contextMenuAboutToShow(menu:DzMenu, view:Dz3DViewport, pos:Point):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the list of elements that hold properties for controlling a DrawStyle changes; e.g., when the active DrawStyle changes.
 * @signature `"drawElementsListChanged()"`
 * @event
*/
	drawElementsListChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the state of whehter or not Geo-Grafted objects are drawn as grafted changes.
 * @signature `"graftDrawingChanged()"`
 * @event
*/
	graftDrawingChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the state of whether or not to invert the behavior of scrolling the mouse wheel changes.
 * @signature `"invertMouseWheelChanged(bool)"`
 * @event
*/
	invertMouseWheelChanged(onOff:Boolean):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when a quick draw operation is finished.
 * @signature `"manipFinished()"`
 * @event
*/
	manipFinished():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when a quick draw operation is started.
 * @signature `"manipStarted()"`
 * @event
*/
	manipStarted():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the manipulation binding state changes.
 * @signature `"manipulationBindingChanged(bool)"`
 * @event
*/
	manipulationBindingChanged(onOff:Boolean):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the scalar for mouse movement changes.
 * @signature `"mouseDragScalarChanged(float)"`
 * @event
*/
	mouseDragScalarChanged(scalar:Number):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the scalar for the mouse wheel changes.
 * @signature `"mouseWheelScalarChanged(float)"`
 * @event
*/
	mouseWheelScalarChanged(scalar:Number):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the mode for what happens when a node is clicked changes.
 * @signature `"nodeClickModeChanged(int)"`
 * @event
*/
	nodeClickModeChanged(mode:Number):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when whether or not to propagate background color changes has changed.
 * @signature `"propagateBackgroundColorChanged(bool)"`
 * @event
*/
	propagateBackgroundColorChanged(onOff:Boolean):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the quick draw mode changes.
 * @signature `"quickDrawModeChanged(QDMode)"`
 * @event
*/
	quickDrawModeChanged(mode:QDMode):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the redraw lock state changes.
 * @signature `"redrawsLocked(bool)"`
 * @event
*/
	redrawsLocked(onOff:Boolean):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the mode for what happens when a region is clicked changes.
 * @signature `"regionClickModeChanged(int)"`
 * @event
*/
	regionClickModeChanged(mode:Number):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the subD manipulation state changes.
 * @signature `"subDManipulationChanged(bool)"`
 * @event
*/
	subDManipulationChanged(onOff:Boolean):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the tool list changes.
 * @signature `"toolListChanged()"`
 * @event
*/
	toolListChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the layout of the viewports changes.
 * @signature `"viewLayoutChanged()"`
 * @event
*/
	viewLayoutChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the global list of available cameras changes.
 * @signature `"viewportCameraListChanged()"`
 * @event
*/
	viewportCameraListChanged():void {
	
	};

}
/**
 * @classdesc TODO:
Add detailed description.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/viewrenderhandler_dz} */
class DzViewRenderHandler extends DzImageRenderHandler {
	/**
 * @description Create a new view render handler for rendering a single frame.
 * @param size - The width & height of the rendered image.
 * @param time - The time to render the frame at.
 * @param filename - The filename to save the image to.
 * @param isSoftware - If true, the window shows itself at the beginning of rendering so that the user can see the progress of the render. If false, the window stays hidden until the render is complete so that it does not interfere with the OpenGL viewport.
 * @constructor
*/
	constructor() {
	
	};

}
/**
 * @classdesc A DzViewTool is a tool that functions in concert with a 3D viewport. View tools are registered with the DzViewportMgr singleton and can be accessed/modified via script.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/viewtool_dz} */
class DzViewTool extends DzBase {
	/**
 * @description Derived classes can return a popup menu that will be displayed when the user selects the options menu for the "Tool Settings" pane.
 * @returns The option menu for the tool.
*/
	getOptionsMenu():DzActionMenu {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the view tool becomes the active tool in the viewport.
 * @signature `"activated()"`
 * @event
*/
	activated():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the view tool stops being the active tool in the viewport.
 * @signature `"deactivated()"`
 * @event
*/
	deactivated():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the view tool needs to be redrawn in the viewport.
 * @signature `"drawnDataChanged()"`
 * @event
*/
	drawnDataChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the option menu for the "Tool Settings" pane should be rebuilt to reflect options for the active tool.
 * @signature `"rebuildMenu()"`
 * @event
*/
	rebuildMenu():void {
	
	};

}
/**
 * @classdesc An asset save filter for saving a Wearable(s) Preset in the DSON format.
See Also:
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/wearablesassetfilter_dz} */
class DzWearablesAssetFilter extends DzAssetFileOutFilter {
	/**
 * @description TODO:
Add description.
 * @constructor
*/
	constructor() {
	
	};

}
/**
 * @classdesc TODO:
Add detailed description.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/weightmap_dz} */
class DzWeightMap extends DzRefCountedItem, DzElement {
	/**
 * @description Constrictor. Creates a new weight map.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Clears the values of affected weights in this map.
*/
	clearAffectedWeights():void {
	
	};
	/**
 * @description After making a shallow copy with the copy() method, this method can be used to "detach" the shallow copy, making it a deep copy that no longer shares its weight map values.
*/
	detach():void {
	
	};
	/**
 * @description Empties this weight map and frees the data for the vertex weight array.
*/
	empty():void {
	
	};
	/**
 * @returns The floating point equivalent (0.0 - 1.0) of the weight at the given index in the map.
 * @param idx - The index of the vertex to get the weight for.
*/
	getFloatWeight(idx:Number):Number {
	
	};
	/**
 * @returns The number of vertices in this weight map that are affected.
*/
	getNumAffected():Number {
	
	};
	/**
 * @returns The number of weights for this map.
*/
	getNumWeights():Number {
	
	};
	/**
 * @returns true if this weight map contains any non-zero weights, otherwise false.
*/
	hasNonZeroWeight():Boolean {
	
	};
	/**
 * @returns true if this weight map has no data, otherwise false.
*/
	isEmpty():Boolean {
	
	};
	/**
 * @returns true if the weight values in this map should be considered non-editable when normalization examines this map.
*/
	isLocked():Boolean {
	
	};
	/**
 * @returns true if the weight values need to be stored in the file, otherwise false.
*/
	isPersistent():Boolean {
	
	};
	/**
 * @description Merges the given weight map with this weight map.
 * @param map - The weight map to merge.
*/
	merge(map:DzWeightMap):DzWeightMap {
	
	};
	/**
 * @since 4.15.0.4
 * @param idx - The index of the vertex to set the weight for.
 * @param weight - The floating point equivalent (0.0 - 1.0) of the weight at the given index in the map.
*/
	setFloatWeight(idx:Number, weight:Number):void {
	
	};
	/**
 * @description Sets whether or not the weight values should be considered locked when normalization examines this map.
 * @param onOff - If true, the weight values should be considered non-editable when normalization examines this map.
*/
	setLocked(onOff:Boolean):void {
	
	};
	/**
 * @description Sets the number of weights for the map, and resizes the data array.
 * @param nWeights - The new number of weights (vertices) for the map.
 * @param keepExisting - Whether or not to keep existing weights within the specified range.
*/
	setNumWeights(nWeights:Number, keepExisting:Boolean):void {
	
	};
	/**
 * @description Sets whether or not the weight values need to be stored in the file.
 * @param onOff - If true, the weight values need to be stored in the file.
*/
	setPersistent(onOff:Boolean):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the weights in this map have changed.
 * @signature `"weightValuesChanged()"`
 * @event
*/
	weightValuesChanged():void {
	
	};

}
/**
 * @classdesc TODO:
Add detailed description.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/weld_dz} */
class DzWeld extends DzBase {
	/**
 * @description Creates a new weld operation.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Creates a new weld operation that welds the given bones.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @returns The bone whose geometry is not modified by the weld operation.
*/
	getTargetBone():DzBone {
	
	};
	/**
 * @returns The bone whose geometry is modified by the weld operation.
*/
	getWeldBone():DzBone {
	
	};
	/**
 * @description Sets the bone that will be welded to - the welding operation will not modify this bone's geometry, only the normals on the border.
*/
	setTargetBone(targetBone:DzBone):void {
	
	};
	/**
 * @description Sets the bone that will be welded - the welding operation will move boundary points in this bone's geometry, and recalculate the affected normals.
*/
	setWeldBone(weldBone:DzBone):void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the target bone has changed.
 * @signature `"targetBoneChanged()"`
 * @event
*/
	targetBoneChanged():void {
	
	};
	/**
 * **THIS IS A NOT AN ACTUAL FUNCTION**, THIS IS A `signal`! USE ONLY THE `signature`.
  * @description Emitted when the weld bone has changed.
 * @signature `"weldBoneChanged()"`
 * @event
*/
	weldBoneChanged():void {
	
	};

}
/**
 * @classdesc 
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/widget_dz} */
class DzWidget extends QObject {
	/**
 * @description Holds the number of different colors available for the widget. (Read Only)
	*/
	colorCount:Number;
	/**
 * @description Holds the bit depth (number of bit planes) of the widget. (Read Only)
	*/
	depth:Number;
	/**
 * @description Holds whether or not the widget is enabled.
	*/
	enabled:Boolean;
	/**
 * @description Holds the Font for the widget and all child widgets that do not have a custom font of their own.
	*/
	font:Font;
	/**
 * @description Holds the x position of the widget, relative to the desktop. (Read Only)
	*/
	globalX:Number;
	/**
 * @description Holds the y position of the widget, relative to the desktop. (Read Only)
	*/
	globalY:Number;
	/**
 * @description Holds the height of the widget.
	*/
	height:Number;
	/**
 * @description Holds the height of the widget in millimeters. (Read Only)
	*/
	heightMM:Number;
	/**
 * @description Holds the horizontal resolution of the widget in dots per inch. (Read Only)
	*/
	logicalDpiX:Number;
	/**
 * @description Holds the vertical resolution of the widget in dots per inch. (Read Only)
	*/
	logicalDpiY:Number;
	/**
 * @description Holds the maximum height of the widget.
	*/
	maxHeight:Number;
	/**
 * @description Holds the maximum width of the widget.
	*/
	maxWidth:Number;
	/**
 * @description Holds the minimum height of the widget.
	*/
	minHeight:Number;
	/**
 * @description Holds the minimum width of the widget.
	*/
	minWidth:Number;
	/**
 * @description Holds the Palette for the widget and all child widgets that do not have a custom palette of their own.
	*/
	palette:Palette;
	/**
 * @description Holds the background color of the widget.
	*/
	paletteBackgroundColor:Color;
	/**
 * @description Holds the background Pixmap of the widget.
	*/
	paletteBackgroundPixmap:Pixmap;
	/**
 * @description Holds the foreground color of the widget.
	*/
	paletteForegroundColor:Color;
	/**
 * @description Holds the horizontal resolution of the widget in dots per inch. (Read Only)
	*/
	physicalDpiX:Number;
	/**
 * @description Holds the vertical resolution of the widget in dots per inch. (Read Only)
	*/
	physicalDpiY:Number;
	/**
 * @description Holds the tool tip text for the widget and all child widgets that do not have a custom tool tip text of their own.
	*/
	toolTip:String;
	/**
 * @description Holds the "Whats This" text for the widget and all child widgets that do not have a custom "Whats This" text of their own.
	*/
	whatsThis:String;
	/**
 * @description Holds the width of the widget.
	*/
	width:Number;
	/**
 * @description Holds the width of the widget in millimeters. (Read Only)
	*/
	widthMM:Number;
	/**
 * @description Holds the x position of the widget, relative to its parent.
	*/
	x:Number;
	/**
 * @description Holds the y position of the widget, relative to its parent.
	*/
	y:Number;
	/**
 * @description ENUMERATOR: Aligns horizontally with the left edge.
*/
	
	static AlignLeft;
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static AlignLeading;
	/**
 * @description ENUMERATOR: Aligns horizontally with the right edge.
*/
	
	static AlignRight;
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static AlignTrailing;
	/**
 * @description ENUMERATOR: Aligns horizontally in the center.
*/
	
	static AlignHCenter;
	/**
 * @description ENUMERATOR: Justifies the text in the available space.
*/
	
	static AlignJustify;
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static AlignAbsolute;
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static AlignHorizontal_Mask;
	/**
 * @description ENUMERATOR: Aligns vertically with the top edge.
*/
	
	static AlignTop;
	/**
 * @description ENUMERATOR: Aligns vertically with the bottom edge.
*/
	
	static AlignBottom;
	/**
 * @description ENUMERATOR: Aligns vertically in the center.
*/
	
	static AlignVCenter;
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static AlignVertical_Mask;
	/**
 * @description ENUMERATOR: Aligns in the center in both dimensions.
*/
	
	static AlignCenter;
	/**
 * @description ENUMERATOR: Aligns horizontally according to the language (left for most).
*/
	
	static AlignAuto;
	/**
 * @description ENUMERATOR: Horizontal orientation (Left to Right).
*/
	
	static Horizontal;
	/**
 * @description ENUMERATOR: Vertical orientation (Top to Bottom).
*/
	
	static Vertical;
	/**
 * @description ENUMERATOR: Sort in ascending order.
*/
	
	static AscendingOrder;
	/**
 * @description ENUMERATOR: Sort in descending order.
*/
	
	static DescendingOrder;
	/**
 * @description ENUMERATOR: Provided for backward compatibility.
*/
	
	static Ascending;
	/**
 * @description ENUMERATOR: Provided for backward compatibility.
*/
	
	static Descending;
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static ElideLeft;
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static ElideRight;
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static ElideMiddle;
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static ElideNone;
	/**
 * @description ENUMERATOR: Treat all whitespace as spaces and print one line.
*/
	
	static TextSingleLine;
	/**
 * @description ENUMERATOR: If it is impossible to stay within the bounds, print outside.
*/
	
	static TextDontClip;
	/**
 * @description ENUMERATOR: Makes the ASCII tab character move to the next tab stop.
*/
	
	static TextExpandTabs;
	/**
 * @description ENUMERATOR: Displays the string "&P" as P. For an ampersand, use "&&".
*/
	
	static TextShowMnemonic;
	/**
 * @description ENUMERATOR: Break lines at appropriate points, e.g., word boundaries.
*/
	
	static TextWordWrap;
	/**
 * @description ENUMERATOR: Break lines anywhere, even within words.
*/
	
	static TextWrapAnywhere;
	/**
 * @description ENUMERATOR: Treat this text as "hidden" and do not print it.
*/
	
	static TextDontPrint;
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static TextIncludeTrailingSpaces;
	/**
 * @description ENUMERATOR: Same as TextShowMnemonic but does not draw the underlines.
*/
	
	static TextHideMnemonic;
	/**
 * @description ENUMERATOR: Ensures that text lines are justified.
*/
	
	static TextJustificationForced;
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static TextForceLeftToRight;
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static TextForceRightToLeft;
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static TextLongestVariant;
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static TextBypassShaping;
	/**
 * @description ENUMERATOR: TODO: Add description.
*/
	
	static NoTextInteraction;
	/**
 * @description ENUMERATOR: No interaction with the text is possible.
*/
	
	static TextSelectableByMouse;
	/**
 * @description ENUMERATOR: Text can be selected with the mouse and copied to the clipboard using a context menu or standard keyboard shortcuts.
*/
	
	static TextSelectableByKeyboard;
	/**
 * @description ENUMERATOR: Text can be selected with the cursor keys on the keyboard. A text cursor is shown.
*/
	
	static LinksAccessibleByMouse;
	/**
 * @description ENUMERATOR: Links can be highlighted and activated with the mouse.
*/
	
	static LinksAccessibleByKeyboard;
	/**
 * @description ENUMERATOR: Links can be focused using tab and activated with enter.
*/
	
	static TextEditable;
	/**
 * @description ENUMERATOR: The text is fully editable.
*/
	
	static TextEditorInteraction;
	/**
 * @description ENUMERATOR: The default for a DzTextEdit.
*/
	
	static TextBrowserInteraction;
	/**
 * @description Creates a new widget as a child of the given parent widget.
 * @param parent - The widget parent for the widget.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @returns The child widget named name, otherwise undefined.
*/
	findChildOfWidget(name:String):DzWidget {
	
	};
	/**
 * @returns A list of this widget's children.
*/
	getChildrenOfWidget(name:String):Array {
	
	};
	/**
 * @returns The layout managing this widget.
*/
	getLayout():DzLayout {
	
	};
	/**
 * @returns The wrapped QWidget.
*/
	getWidget():QWidget {
	
	};
	/**
 * @description Paints the widget, restricted by the given rectangle, into a pixmap. If the widget has any children, they are also painted in the appropriate positions.
 * @returns If the rectangle doesn't overlap the widget's rectangle, or an error occurs, the pixmap will be null. If the rectangle is a superset of the widget, the areas outside the widget are covered with the widget's background.
 * @since 4.9.3.105
 * @param rectangle - The rectangle, relative to the top left corner of the widget, to capture.
*/
	grab(rectangle:Rect):Pixmap {
	
	};
	/**
 * @description Paints the widget, restricted by the given rectangle, into a pixmap. If the widget has any children, they are also painted in the appropriate positions.
 * @returns If the rectangle defined by x, y, w, and h doesn't overlap the widget's rectangle, or an error occurs, the pixmap will be null. If the rectangle is a superset of the widget, the areas outside the widget are covered with the widget's background.
 * @since 4.9.3.105
 * @param x - The relative x position of the rectangle to capture.
 * @param y - The relative y position of the rectangle to capture.
 * @param w - The width of the rectangle to capture.
 * @param h - The height of the rectangle to capture.
*/
	grab(x:Number, y:Number, width:Number, height:Number):Pixmap {
	
	};
	/**
 * @description Hide the widget; make it invisible.
*/
	hide():void {
	
	};
	/**
 * @description Translates the widget coordinate pos from the coordinate system of parent to this widget's coordinate system. parent must not be undefined and must be a parent of the calling widget.
 * @since 4.9.0.9
 * @param parent - The widget in the parent chain to map from.
 * @param pos - The position to map.
*/
	mapFrom(parent:DzWidget, pos:Point):Point {
	
	};
	/**
 * @description Translates the global screen coordinate pos to widget coordinates.
 * @since 4.9.0.9
 * @param pos - The position to map.
*/
	mapFromGlobal(pos:Point):Point {
	
	};
	/**
 * @description Translates the widget coordinate pos from the coordinate system of the parent widget to this widget's coordinate system.
 * @since 4.9.0.9
 * @param pos - The position to map.
*/
	mapFromParent(pos:Point):Point {
	
	};
	/**
 * @description Translates the widget coordinate pos to the coordinate system of parent. parent must not be undefined and must be a parent of the calling widget.
 * @since 4.9.0.9
 * @param parent - The widget in the parent chain to map to.
 * @param pos - The position to map.
*/
	mapTo(parent:DzWidget, pos:Point):Point {
	
	};
	/**
 * @description Translates the widget coordinate pos to global screen coordinates. For example, mapToGlobal( Point(0, 0) ) would give the global coordinates of the top-left pixel of the widget.
 * @since 4.9.0.9
 * @param pos - The position to map.
*/
	mapToGlobal(pos:Point):Point {
	
	};
	/**
 * @description Translates the widget coordinate pos to a coordinate in the parent widget.
 * @since 4.9.0.9
 * @param pos - The position to map.
*/
	mapToParent(pos:Point):Point {
	
	};
	/**
 * @description Reparents the widget.
 * @param parent - The new parent widget for this widget.
 * @param pnt - The location in the new parent widget to place this widget.
 * @param showIt - If true, show() is called on the widget after it is reparented.
*/
	reparent(parent:DzWidget, pnt:Point, showIt:Boolean):DzWidget {
	
	};
	/**
 * @description Sets a fixed height for the widget.
*/
	setFixedHeight(height:Number):void {
	
	};
	/**
 * @description Sets a fixed width and height for the widget.
*/
	setFixedSize(width:Number, height:Number):void {
	
	};
	/**
 * @description Sets a fixed width for the widget.
*/
	setFixedWidth(width:Number):void {
	
	};
	/**
 * @description Sets the position and size for the widget (relative to its parent).
*/
	setGeometry(x:Number, y:Number, w:Number, h:Number):void {
	
	};
	/**
 * @description Show the widget; make it visible if its parent is visible.
*/
	show():void {
	
	};

}
/**
 * @classdesc This pages exists in order to indicate the DAZScript accessible properties and signals of the Qt native QWidget class.
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/widget_q} */
class QWidget extends QObject {
	/**
 * @description See QWidget.acceptDrops.
	*/
	acceptDrops:Boolean;
	/**
 * @description See QWidget.accessibleDescription.
	*/
	accessibleDescription:String;
	/**
 * @description See QWidget.accessibleName.
	*/
	accessibleName:String;
	/**
 * @description See QWidget.autoFillBackground.
	*/
	autoFillBackground:Boolean;
	/**
 * @description See QWidget.baseSize.
	*/
	baseSize:Size;
	/**
 * @description See QWidget.childrenRect.
	*/
	childrenRect:Rect;
	/**
 * @description See QWidget.enabled.
	*/
	enabled:Boolean;
	/**
 * @description See QWidget.focus.
	*/
	focus:Boolean;
	/**
 * @description See QWidget.font.
	*/
	font:Font;
	/**
 * @description See QWidget.frameGeometry.
	*/
	frameGeometry:Rect;
	/**
 * @description See QWidget.frameSize.
	*/
	frameSize:Size;
	/**
 * @description See QWidget.fullScreen.
	*/
	fullScreen:Boolean;
	/**
 * @description See QWidget.geometry.
	*/
	geometry:Rect;
	/**
 * @description See QWidget.height.
	*/
	height:Number;
	/**
 * @description See QWidget.isActiveWindow.
	*/
	isActiveWindow:Boolean;
	/**
 * @description See QWidget.maximized.
	*/
	maximized:Boolean;
	/**
 * @description See QWidget.maximumHeight.
	*/
	maximumHeight:Number;
	/**
 * @description See QWidget.maximumSize.
	*/
	maximumSize:Size;
	/**
 * @description See QWidget.maximumWidth.
	*/
	maximumWidth:Number;
	/**
 * @description See QWidget.minimized.
	*/
	minimized:Boolean;
	/**
 * @description See QWidget.minimumHeight.
	*/
	minimumHeight:Number;
	/**
 * @description See QWidget.minimumSize.
	*/
	minimumSize:Size;
	/**
 * @description See QWidget.minimumSizeHint.
	*/
	minimumSizeHint:Size;
	/**
 * @description See QWidget.minimumWidth.
	*/
	minimumWidth:Number;
	/**
 * @description See QWidget.mouseTracking.
	*/
	mouseTracking:Boolean;
	/**
 * @description See QWidget.normalGeometry.
	*/
	normalGeometry:Rect;
	/**
 * @description See QWidget.palette.
	*/
	palette:Palette;
	/**
 * @description See QWidget.pos.
	*/
	pos:Point;
	/**
 * @description See QWidget.rect.
	*/
	rect:Rect;
	/**
 * @description See QWidget.size.
	*/
	size:Size;
	/**
 * @description See QWidget.sizeHint.
	*/
	sizeHint:Size;
	/**
 * @description See QWidget.sizeIncrement.
	*/
	sizeIncrement:Size;
	/**
 * @description See QWidget.statusTip.
	*/
	statusTip:String;
	/**
 * @description See QWidget.styleSheet.
	*/
	styleSheet:String;
	/**
 * @description See QWidget.toolTip.
	*/
	toolTip:String;
	/**
 * @description See QWidget.updatesEnabled.
	*/
	updatesEnabled:Boolean;
	/**
 * @description See QWidget.visible.
	*/
	visible:Boolean;
	/**
 * @description See QWidget.whatsThis.
	*/
	whatsThis:String;
	/**
 * @description See QWidget.width.
	*/
	width:Number;
	/**
 * @description See QWidget.windowFilePath.
	*/
	windowFilePath:String;
	/**
 * @description See QWidget.windowIconText.
	*/
	windowIconText:String;
	/**
 * @description See QWidget.windowModified.
	*/
	windowModified:Boolean;
	/**
 * @description See QWidget.windowOpacity.
	*/
	windowOpacity:Number;
	/**
 * @description See QWidget.windowTitle.
	*/
	windowTitle:String;
	/**
 * @description See QWidget.x.
	*/
	x:Number;
	/**
 * @description See QWidget.y.
	*/
	y:Number;
	/**
 * @description See QWidget.close().
*/
	close():Boolean {
	
	};
	/**
 * @description See QWidget.hide().
*/
	hide():void {
	
	};
	/**
 * @description See QWidget.lower().
*/
	lower():void {
	
	};
	/**
 * @description See QWidget.raise().
*/
	raise():void {
	
	};
	/**
 * @description See QWidget.repaint().
*/
	repaint():void {
	
	};
	/**
 * @description See QWidget.setDisabled().
*/
	setDisabled(disable:Boolean):void {
	
	};
	/**
 * @description See QWidget.setEnabled().
*/
	setEnabled(enabled:Boolean):void {
	
	};
	/**
 * @description See QWidget.setFocus().
*/
	setFocus():void {
	
	};
	/**
 * @description See QWidget.setHidden().
*/
	setHidden(hidden:Boolean):void {
	
	};
	/**
 * @description See QWidget.setStyleSheet().
*/
	setStyleSheet(styleSheet:String):void {
	
	};
	/**
 * @description See QWidget.setVisible().
*/
	setVisible(visible:Boolean):void {
	
	};
	/**
 * @description See QWidget.setWindowModified().
*/
	setWindowModified(modified:Boolean):void {
	
	};
	/**
 * @description See QWidget.setWindowTitle.
*/
	setWindowTitle(title:String):void {
	
	};
	/**
 * @description See QWidget.show().
*/
	show():void {
	
	};
	/**
 * @description See QWidget.showFullScreen().
*/
	showFullScreen():void {
	
	};
	/**
 * @description See QWidget.showMaximized().
*/
	showMaximized():void {
	
	};
	/**
 * @description See QWidget.showMinimized().
*/
	showMinimized():void {
	
	};
	/**
 * @description See QWidget.showNormal().
*/
	showNormal():void {
	
	};
	/**
 * @description See QWidget.update().
*/
	update():void {
	
	};

}
/**
 * @classdesc 
 *  For more information, go to: {@link http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/object_index/zipfile_dz} */
class DzZipFile extends DzFileInfo {
	/**
 * @description ENUMERATOR: Open the file for reading only.
*/
	
	static ReadOnly;
	/**
 * @description ENUMERATOR: Open the file for writing only.
*/
	
	static WriteOnly;
	/**
 * @description ENUMERATOR: The file is opened in append mode, so that all data is written to the end of the file.
*/
	
	static Append;
	/**
 * @description Creates a zip file with the given file name.
 * @param file - The path of the *.zip file.
 * @constructor
*/
	constructor() {
	
	};
	/**
 * @description Compresses all the files in the given directory.
 * @since 4.9.3.149
 * @param pathOnDisk - The path of the directory that contains the directory to compress.
 * @param pathInZip - The path of the directory to compress to within the zip.
*/
	addDirToZip(pathOnDisk:String, pathInZip:String):Boolean {
	
	};
	/**
 * @description Compresses the file into the zip.
 * @since 4.9.3.149
 * @param pathOnDisk - The path of the directory that contains the file to compress.
 * @param pathInZip - The path of the file to compress to within the zip.
*/
	addFileToZip(pathOnDisk:String, pathInZip:String):Boolean {
	
	};
	/**
 * @description Close the file.
*/
	close():void {
	
	};
	/**
 * @description Compresses all the files in the given directory.
 * @param path - The path to the directory to compress files from.
 * @param recursive - If true, path represents the base path of the directory tree to compress (i.e., the contents of the directory, all subdirectories, and the contents of those directories, recursively). If false, only files in the given path are compressed.
*/
	compressAll(path:String, recursive:Boolean):Boolean {
	
	};
	/**
 * @description Extracts all the files from the zip file. The relative path of the files are appended to the specified base path.
 * @param basePath - The base path to extract the files to.
*/
	extractAll(basePath:String):Boolean {
	
	};
	/**
 * @description Extracts the current file from the zip file. The relative path of the current file is appended to the specified base path.
 * @since 4.9.3.149
 * @param basePath - The base path to extract to.
*/
	extractCurrentFile(basePath:String):Boolean {
	
	};
	/**
 * @returns The number of the entry in the current file (if any).
 * @since 4.9.3.149
*/
	getCurrentFileAtributes():Number {
	
	};
	/**
 * @returns The comment for the current file (if any).
*/
	getCurrentFileComment():String {
	
	};
	/**
 * @returns The compressed size of the current file.
 * @since 4.9.3.149
*/
	getCurrentFileCompressedSize():Number {
	
	};
	/**
 * @returns The compression method of the current file.
 * @since 4.9.3.149
*/
	getCurrentFileCompressionMethod():String {
	
	};
	/**
 * @returns The ratio of compression on the current file.
 * @since 4.9.3.149
*/
	getCurrentFileCompressionRatio():Number {
	
	};
	/**
 * @returns The CRC value of the current file.
 * @since 4.9.3.149
*/
	getCurrentFileCRC():String {
	
	};
	/**
 * @returns true if the current entry is a folder, otherwise false.
 * @since 4.9.3.149
*/
	getCurrentFileIsFolder():Boolean {
	
	};
	/**
 * @returns The name of the current file.
*/
	getCurrentFileName():String {
	
	};
	/**
 * @returns The compressed size of the current file.
 * @since 4.9.3.149
*/
	getCurrentFileUncompressedSize():Number {
	
	};
	/**
 * @returns A list of the file names in the zip file.
*/
	getFileNames():Array {
	
	};
	/**
 * @returns The global comment for the zip file.
*/
	getGlobalComment():String {
	
	};
	/**
 * @returns The number of entries in the zip file.
*/
	getNumEntries():Number {
	
	};
	/**
 * @description Set the current file of the zip file to the first file.
*/
	goToFirstFile():Boolean {
	
	};
	/**
 * @description Set the current file of the zip file to the next file.
*/
	goToNextFile():Boolean {
	
	};
	/**
 * @description Attempts to locate an entry in the zip file.
 * @returns true if the file was found, otherwise false.
 * @param pathInZip - The path of the entry to locate within the zip.
 * @attention If the entry is found, it becomes the current.
*/
	locateFile(pathInZip:String):Boolean {
	
	};
	/**
 * @description Open the file with the given mode.
 * @returns true if the file was opened successfully, otherwise false.
*/
	open(mode:AccessMode):Boolean {
	
	};
	/**
 * @description The global comment for the zip file.
 * @returns true if the comment was set, otherwise false.
 * @since 4.9.3.149
*/
	setGlobalComment(comment:String):Boolean {
	
	};

}
