/**
 * A Dz3DViewport is a widget for displaying three dimensional objects using OpenGL and interacting with those objects using DzViewTool subclasses.
 * See Also:
 */
class Dz3DViewport extends QWidget {
	/**
	 * @description Holds whether or not the aspect frame is drawn in the viewport.
	 * @type {Boolean}
	 */
	aspectOn;
	/**
	 * @description Holds whether or not the origin axes are drawn in the viewport.
	 * @type {Boolean}
	 */
	axesOn;
	/**
	 * @description Holds the background color of the viewport
	 * @type {Color}
	 */
	background;
	/**
	 * @description Holds the style of the floor that is drawn in the viewport.
	 * @type {FloorStyle}
	 */
	floorStyle;
	/**
	 * @description Holds the shading style of the viewport.
	 * @type {ShadeStyle}
	 */
	shadeStyle;
	/**
	 * @description Holds whether or not the Pose Tool is shown.
	 * @type {Boolean}
	 */
	showPoseTool;
	/**
	 * @description Holds whether or not the thirds guide is drawn in the viewport.
	 * @type {Boolean}
	 */
	thirdsGuideOn;
	/**
	 * @description Holds the mode for the viewport display of toolbars/camera cube
	 * @type {ToolBarMode}
	 */
	toolBarMode;
	/**
	 * @description ENUM: No floor is drawn.
	 */
	NoFloor;
	/**
	 * @description ENUM: A grid floor is drawn.
	 */
	WireFloor;
	/**
	 * @description ENUM: A solid floor is drawn. (not currently implemented)
	 */
	SolidFloor;
	/**
	 * @description ENUM: Draws unlit wire-frame bounding boxes.
	 */
	WireBox;
	/**
	 * @description ENUM: Draws smooth-shaded bounding boxes.
	 */
	SolidBox;
	/**
	 * @description ENUM: Draws unlit wire-frames.
	 */
	Wireframe;
	/**
	 * @description ENUM: Draws lit wire-frames.
	 */
	LitWireframe;
	/**
	 * @description ENUM: Draws unlit wire-frames, front geometry facing only.
	 */
	HiddenLine;
	/**
	 * @description ENUM: Draws lit smooth shaded objects with wireframes imposed.
	 */
	WireShaded;
	/**
	 * @description ENUM: Draws lit smooth shaded objects.
	 */
	SmoothShaded;
	/**
	 * @description ENUM: Draws lit smooth shaded objects with any texture/transparency maps applied and wireframes imposed.
	 */
	WireTextured;
	/**
	 * @description ENUM: Draws lit smooth shaded objects with any texture/transparency maps applied.
	 */
	Textured;
	/**
	 * @description ENUM: A mode that docks the toolbar along the top edge of the viewport.
	 */
	DockedToolBar;
	/**
	 * @description ENUM: A mode that uses a Camera Cube HUD in the top right corner of the viewport.
	 */
	CameraCubeHUD;
	/**
	 * @description Aim the viewport's active camera at the selected nodes in the scene. If the scene does not have any select nodes, all nodes in the scene are aimed. Note that the viewport's active camera is excluded, as are any nodes that are parented to the viewport's active camera.
	 */
	aimCamera() {};
	/**
	 * @description Aim the viewport's active camera at the given box. If the box is invalid, this function does nothing.
	 * @param {DzBox3} box - The box to aim the viewport's active camera at.
	 */
	aimCameraAtBox(box) {};
	/**
	 * @description Aim the viewport's active camera at the selected nodes in the scene. If the scene does not have any select nodes, all nodes in the scene are aimed. Note that the viewport's active camera is excluded, as are any nodes that are parented to the viewport's active camera.
	 */
	aimCameraAtPrimaryNode() {};
	/**
	 * @description Captures the current contents from the OpenGL frame buffer as an image.
	 * @returns Image A snap shot of the OpenGL frame buffer.
	 */
	captureImage() {};
	/**
	 * @returns DzInt2 The current dimensions of the viewport.
	 * @since 4.6.4.100
	 */
	currentDimensions() {};
	/**
	 * @description Stops any camera operations that are currently active.
	 * @since 4.11.0.161
	 */
	endNavigation() {};
	/**
	 * @description Frame the viewport's active camera at the selected nodes in the scene. If the scene does not have any select nodes, all nodes in the scene are framed. Note that the viewport's active camera is excluded, as are any nodes that are parented to the viewport's active camera.
	 */
	frameCamera() {};
	/**
	 * @description Frame the viewport's active camera at the given box. If the box is invalid this function does nothing.
	 * @param {DzBox3} box - The box to frame the viewport's active camera on.
	 */
	frameCameraOnBox(box) {};
	/**
	 * @description Frame the viewport's active camera at the selected nodes in the scene. If the scene does not have any select nodes, all nodes in the scene are framed. Note that the viewport's active camera is excluded, as are any nodes that are parented to the viewport's active camera.
	 */
	frameCameraOnSelectedNodes() {};
	/**
	 * @returns Rect A rect describing the aspect frame for this viewport.
	 */
	getAspectFrameRect() {};
	/**
	 * @returns DzCamera The currently active camera for this viewport.
	 */
	getCamera() {};
	/**
	 * @returns DzCameracube The persistent Camera Cube view tool for this viewport; displayed when the toolBarMode is set to CameraCubeHUD.
	 * @since 4.9.3.107
	 */
	getCameraCube() {};
	/**
	 * @returns DzDrawStyle The current drawstyle for the viewport.
	 * @since 4.14.1.27
	 */
	getDrawStyle() {};
	/**
	 * @returns String The description of the DrawStyle (if the current DrawStyle is a DzUserDrawStyle), otherwise an empty string.
	 * @since 4.9.2.22
	 */
	getUserDrawStyle() {};
	/**
	 * @returns DzViewport This 3D view's parent viewport.
	 */
	getViewport() {};
	/**
	 * @description Performs a hardware assisted OpenGL render in this viewport with the given settings.
	 * @returns Boolean true if the scene was rendered successfully, otherwise false.
	 * @param {DzRenderHandler} handler - The render handler for the rendering operation.
	 */
	hardwareRender(handler) {};
	/**
	 * @description Performs a hardware assisted OpenGL render in this viewport with the given settings.
	 * @returns Boolean true if the scene was rendered successfully, otherwise false.
	 * @since 4.9.3.57
	 * @param {DzRenderHandler} handler - The render handler for the rendering operation.
	 * @param {DzRenderOptions} options - The render options to use. (since 4.9.3.61)
	 * @param {DzCamera} camera - The camera to render through, set to null to render from current view. (since 4.9.3.61)
	 * @param {DzDrawStyle} style - The draw style to use, null to use standard render draw style. (since 4.9.3.61)
	 */
	hardwareRenderWithOptions(handler, options, camera = null, style = null) {};
	/**
	 * @returns Boolean true if this viewport supports rendering via OpenGL, otherwise false.
	 */
	isHardwareRenderable() {};
	/**
	 * @returns Boolean true if a mouse operation is active, otherwise false.
	 * @since 4.11.0.161
	 */
	isNavigating() {};
	/**
	 * @description Performs a facet picking operation on the scene through this viewport.
	 * @returns Number The index of the facet that was hit (if any), otherwise -1.
	 * @param {Point} pnt - The pixel coordinates of the point in the viewport to pick on.
	 */
	pickOnFacet(pnt) {};
	/**
	 * @description Performs a gizmo picking operation through this viewport. View tools (see DzViewTool) can draw a 'gizmo' in the viewport for the user to interact with. The tool can assign different parts of the gizmo to specific indices, so as to tell what part of the gizmo was clicked by the user.
	 * @returns Number The gizmo index that was hit (if any), otherwise 0.
	 * @param {Point} pnt - The point in the viewport to pick on.
	 */
	pickOnGizmo(pnt) {};
	/**
	 * @description Performs a material picking operation on the scene through this viewport. This example shows the mousePress() implementation from a view tool (see DzViewTool) that sets the color of any material that the user clicks in the viewport.
	 * @returns DzMaterial The material that was hit (if any), otherwise null.
	 * @param {Point} pnt - The pixel coordinates of the point in the viewport to pick on.
	 */
	pickOnMaterial(pnt) {};
	/**
	 * @description Performs a node picking operation on the scene through this viewport.
	 * @returns DzNode The node that was hit (if any), otherwise null.
	 * @param {Point} pnt - The pixel coordinates of the point in the viewport to pick on.
	 */
	pickOnNode(pnt) {};
	/**
	 * @description Performs a node picking operation on the scene through this viewport.
	 * @returns DzNode The node that was hit (if any), otherwise null.
	 * @param {Point} pnt - The pixel coordinates of the point in the viewport to pick on.
	 * @param {Boolean} useSelectionMaps - If true, selection maps are used to perform the picking operation.
	 */
	pickOnNode(pnt, useSelectionMaps) {};
	/**
	 * @description Performs a quick render of the scene suitable for a thumbnail image.
	 * @returns Boolean true if the scene was successfully rendered, otherwise false.
	 * @param {DzRenderHandler} handler - The render handler for the rendering operation.
	 */
	renderThumbnail(handler) {};
	/**
	 * @description Resets the viewport's active camera to its default state.
	 */
	resetCamera() {};
	/**
	 * @description Set the camera for the view. If a matching camera is not found, this function does nothing.
	 * @param {String} cam - The name (not label) of a view camera, or a scene camera.
	 */
	setCamera(cam) {};
	/**
	 * @description Set the camera for the view. The camera passed in must be a camera in the scene, or one of the view cameras from DzViewportMgr.
	 * @param {DzCamera} cam - The camera to use for viewing in the viewport.
	 */
	setCamera(cam) {};
	/**
	 * @description Set the draw style for the viewport. DzDrawStyle objects are ref counted, so the viewport refs the style when it is set, and unrefs it when it is no longer using the style. The draw style will then delete itself when its ref count reaches zero.
	 * @param {DzDrawStyle} style - The new draw style for the viewport.
	 */
	setDrawStyle(style) {};
	/**
	 * @description Attempts to set the DrawStyle for the viewport.
	 * @returns Boolean true if a DzUserDrawStyle that matches the description could be found, otherwise false.
	 * @since 4.9.2.22
	 * @param {String} description - The description of the DzUserDrawStyle to set.
	 */
	setUserDrawStyle(description) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when a new active camera has been changed for this viewport.
	 * @signature `"activeCameraChanged(DzCamera*)"`
	 * @event
	 */
	activeCameraChanged(cam) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the projection of the active camera of this viewport has changed.
	 * @signature `"activeCameraProjectionChanged()"`
	 * @event
	 */
	activeCameraProjectionChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the transform of the active camera of this viewport has changed.
	 * @signature `"activeCameraTransformChanged()"`
	 * @event
	 */
	activeCameraTransformChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the draw state for the aspect frame changes.
	 * @signature `"aspectOnChanged(bool)"`
	 * @event
	 */
	aspectOnChanged(onOff) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the draw state for the origin axes changes.
	 * @signature `"axesOnChanged(bool)"`
	 * @event
	 */
	axesOnChanged(onOff) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the background color of the viewport changes.
	 * @signature `"backgroundColorChanged(const QColor&)"`
	 * @event
	 */
	backgroundColorChanged(color) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the viewport is about to display a context menu. Other objects can connect to this signal to add custom items to the menu that is displayed to the user. Only connect to this signal if you only want to affect this particular viewport - otherwise connect to DzViewportMgr.contextMenuAboutToShow().
	 * @signature `"contextMenuAboutToShow(DzMenu*,QPoint)"`
	 * @event
	 */
	contextMenuAboutToShow(menu, pos) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the current dimensions of this viewport has changed.
	 * @signature `"currentDimensionsChanged()"`
	 * @event
	 */
	currentDimensionsChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the dimensions of this viewport has changed.
	 * @signature `"dimensionsChanged()"`
	 * @event
	 */
	dimensionsChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the draw style of the viewport has changed.
	 * @signature `"drawStyleChanged(DzDrawStyle*)"`
	 * @event
	 */
	drawStyleChanged(style) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the floor style of the viewport changes.
	 * @signature `"floorStyleChanged(FloorStyle)"`
	 * @event
	 */
	floorStyleChanged(style) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the draw state for the thirds guide changes.
	 * @signature `"thirdsGuideOnChanged(bool)"`
	 * @event
	 */
	thirdsGuideOnChanged(onOff) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the view tool bar is docked or undocked.
	 * @signature `"toolBarDocked(bool)"`
	 * @event
	 */
	toolBarDocked(onOff) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the toolbar mode has been changed for this viewport.
	 * @signature `"toolModeChanged(ToolBarMode)"`
	 * @event
	 */
	toolModeChanged(mode) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the area this viewport displays has changed.
	 * @signature `"viewChanged()"`
	 * @event
	 */
	viewChanged() {};

}
/**
 * This render handler is a DzImageRenderHandler that is the size of the aspect frame for the given viewport, and paints all data passed to it over the current view.
 */
class Dz3DViewRenderHandler extends DzImageRenderHandler {
	/**
	 * @description Constructor. Creates a render handler that will render to the given viewport.
	 * @param {DzViewport} view - The viewport to render in.
	 * @param {DzTime} startTime - The starting scene time for the render.
	 * @param {String} filename - The name of the file to save the render to.
	 */
	constructor(view, startTime, filename) {};
	/**
	 * @returns Number The offset for this handler, from the left of the view
	 * @since 4.6.4.18
	 */
	getLeftOffset() {};
	/**
	 * @returns Number The offset for this handler, from the top of the view
	 * @since 4.6.4.18
	 */
	getTopOffset() {};
	/**
	 * @returns DzRenderview The render view for this handler
	 * @since 4.6.4.18
	 */
	getView() {};
	/**
	 * @returns DzViewport The viewport for this handler
	 * @since 4.6.4.18
	 */
	getViewport() {};

}
/**
 * TODO:
 * Add detailed description.
 */
class DzAbstractAssetContainer extends DzRefCountedItem, QObject {
	/**
	 * @description Holds whether or not sub-containers can be copied. (Read Only)
	 * @type {Boolean}
	 */
	canCopyContainers;
	/**
	 * @description Holds whether or not this container can be deleted. (Read Only)
	 * @type {Boolean}
	 */
	canDeleteContainer;
	/**
	 * @description Holds whether or not sub-containers can be added to this container. (Read Only)
	 * @type {Boolean}
	 */
	canInsertSubContainer;
	/**
	 * @description Holds whether or not the assets in this container can be modified. (Read Only)
	 * @type {Boolean}
	 */
	canModifyAssets;
	/**
	 * @description Holds whether or not this container can be renamed. (Read Only)
	 * @type {Boolean}
	 */
	canRenameContainer;
	/**
	 * @description Holds the id for this container. (Read Only)
	 * @type {Object}
	 */
	id;
	/**
	 * @description Holds whether or not removing an asset from this container will result in that asset's file being deleted. (Read Only)
	 * @type {Boolean}
	 */
	removeAssetCausesDelete;
	/**
	 * @description Holds the tooltip for this container. (Read Only)
	 * @type {String}
	 */
	tooltip;
	/**
	 * @description Holds the use count for this container.
	 * @type {Number}
	 */
	useCount;
	/**
	 * @description Attempts to clear out the assets that can be rebuilt.
	 * @returns Boolean The current implementation does nothing and always returns false
	 */
	clearRebuildableAssets() {};
	/**
	 * @description Attempts to create a new child container.
	 * @returns Boolean true if the container was successfully created, otherwise false.
	 * @param {String} containerName - The name of the new child container.
	 */
	createNewChildContainer(containerName) {};
	/**
	 * @returns DzAsset The asset at the specified index (if valid), otherwise null.
	 * @param {Number} index - The index of the asset to be returned.
	 */
	getAsset(index) {};
	/**
	 * @returns Array A list of assets for this container.
	 */
	getAssets() {};
	/**
	 * @returns DzAbstractAssetContainer The child container at the given index (if valid), otherwise null.
	 * @param {Number} index - The index of the child container to get.
	 */
	getChildContainer(index) {};
	/**
	 * @returns Array A list of child containers for this container.
	 */
	getChildContainers() {};
	/**
	 * @returns Size The size of the icon associated with child containers.
	 */
	getChildIconSize() {};
	/**
	 * @returns String The name of this container.
	 */
	getContainerName() {};
	/**
	 * @returns Array The ID path for this container.
	 */
	getIDPath() {};
	/**
	 * @returns Number The number of assets associated with this container.
	 */
	getNumAssets() {};
	/**
	 * @returns Number The number of child containers this container has.
	 */
	getNumChildContainers() {};
	/**
	 * @returns DzAbstractAssetContainer The owner of this container.
	 */
	getOwner() {};
	/**
	 * @returns Size The small icon size of the icon associated with child containers.
	 */
	getSmallChildIconSize() {};
	/**
	 * @returns String The support file for this asset container. Base implementation returns an empty string.
	 */
	getSupportFile() {};
	/**
	 * @returns Boolean true if this container has the given asset, otherwise false.
	 * @param {DzAsset} asset - The asset to check for.
	 */
	hasAsset(asset) {};
	/**
	 * @returns Boolean true if thic container has child containers, otherwise false.
	 */
	hasChildContainers() {};
	/**
	 * @description Boolean DzAbstractAssetContainer.ingoreAssetConflicts()
	 * @returns Boolean true if asset conflicts in this container will be ignored, otherwise false.
	 */
	ignoreAssetConflicts() {};
	/**
	 * @description Initializes this containers child containers.
	 * @returns Boolean true if the containers were successfully initialized, otherwise false.
	 */
	initChildren() {};
	/**
	 * @description Attempts to insert the given asset into this container.
	 * @returns Boolean true if the asset was successfully inserted, otherwise false.
	 * @param {DzAsset} asset - The asset to add to this container.
	 */
	insertAsset(asset) {};
	/**
	 * @description Attempts to insert container as a child of this container.
	 * @returns Boolean true if the container was successfully inserted, otherwise false.
	 * @param {DzAbstractAssetContainer} container - The container to insert.
	 */
	insertChildContainer(container) {};
	/**
	 * @returns Boolean true if this container is based on a filesystem, otherwise false.
	 */
	isFileSystemBased() {};
	/**
	 * @description Attempts to move the given container from its parent.
	 * @returns Boolean true if the container was successfully moved, otherwise false.
	 * @param {DzAbstractAssetContainer} child - The container to move from its parent.
	 */
	moveFromParent(child) {};
	/**
	 * @description Attempts to remove the given asset from this container.
	 * @returns Boolean true if the asset was successfully removed, otherwise false.
	 * @param {DzAsset} asset - The asset to remove.
	 */
	removeAsset(asset) {};
	/**
	 * @returns Boolean true if assets moved to toContainer should be removed from this container, otherwise false.
	 * @param {DzAbstractAssetContainer} toContainer - The container to check.
	 */
	removeAssetOnCut(toContainer) {};
	/**
	 * @description Attempts to remove the given container.
	 * @returns Boolean true if the container was successfully removed, otherwise false.
	 * @param {DzAbstractAssetContainer} container - The container to remove.
	 */
	removeChildContainer(container) {};
	/**
	 * @description Attempts to rename this container.
	 * @returns Boolean true if the rename was successful, otherwise false.
	 * @param {String} name - The new name for this container.
	 */
	rename(name) {};
	/**
	 * @description Attempts to rename the given asset.
	 * @returns Boolean true if the asset was successfully renamed, otherwise false.
	 * @param {DzAsset} asset - The asset to rename.
	 * @param {String} newAssetName - The new name for the asset.
	 */
	renameAsset(asset, newAssetName) {};
	/**
	 * @description Attempts to rename the given child container.
	 * @returns Boolean true if the container was successfully renamed, otherwise false.
	 * @param {String} container - The container to rename.
	 * @param {String} name - The new name for the container.
	 */
	renameChildContainer(container, name) {};
	/**
	 * @description Sets the name for this container.
	 * @param {String} name - The new name for this container.
	 */
	setContainerName(name) {};
	/**
	 * @description Attemps to update this container.
	 * @returns Boolean true if the update was successful, otherwise false.
	 */
	update() {};
	/**
	 * @description Attempts to update the assets associated with this container.
	 * @returns Boolean true if the update was successful, otherwise false.
	 */
	updateAssets() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted the icon for an asset has changed.
	 * @signature `"assetIconChanged(DzAsset*)"`
	 * @event
	 */
	assetIconChanged(asset) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when an asset has been renamed.
	 * @signature `"assetRenamed(DzAsset*,int)"`
	 * @event
	 */
	assetRenamed(asset, index) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted before assets are added.
	 * @signature `"beginAssetAdd(int,int)"`
	 * @event
	 */
	beginAssetAdd(start, end) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted before assets are removed.
	 * @signature `"beginAssetRemove(int,int)"`
	 * @event
	 */
	beginAssetRemove(start, end) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted before a child container is added.
	 * @signature `"beginChildContainerAdd(DzAbstractAssetContainer*,int,int)"`
	 * @event
	 */
	beginChildContainerAdd(container, start, end) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted before a child container is removed.
	 * @signature `"beginChildContainerRemove(DzAbstractAssetContainer*,int,int)"`
	 * @event
	 */
	beginChildContainerRemove(container, start, end) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted just before a child container is removed.
	 * @signature `"childContainerAboutToBeRemoved(DzAbstractAssetContainerPtr)"`
	 * @event
	 */
	childContainerAboutToBeRemoved(childContainer) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted after a child container has been removed.
	 * @signature `"childContainerRemoved(DzAbstractAssetContainerPtr)"`
	 * @event
	 */
	childContainerRemoved(childContainer) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted after assets have been added.
	 * @signature `"endAssetAdd()"`
	 * @event
	 */
	endAssetAdd() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted after assets have been removed.
	 * @signature `"endAssetRemove()"`
	 * @event
	 */
	endAssetRemove() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted after a child container has been added.
	 * @signature `"endChildContainerAdd()"`
	 * @event
	 */
	endChildContainerAdd() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted after a child container has been removed.
	 * @signature `"endChildContainerRemove()"`
	 * @event
	 */
	endChildContainerRemove() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted after the icon for the container has changed.
	 * @signature `"iconChanged(DzAbstractAssetContainer*)"`
	 * @event
	 */
	iconChanged(container) {};

}
/**
 * TODO:
 * Add detailed description.
 */
class DzAbstractNodeEditorPane extends DzPane {
	/**
	 * @returns Boolean true if each selected node is displayed separately in the navigation list, otherwise false.
	 */
	displaySeparate() {};
	/**
	 * @returns DzContenttab The Presets page widget for this pane.
	 */
	getContentTab() {};
	/**
	 * @returns DzGuidePage The guide page displayed for the editor page when no property group or property is selected.
	 */
	getEditorGuidePage() {};
	/**
	 * @returns DzInfoDivider The information divider for this pane.
	 */
	getInfoDivider() {};
	/**
	 * @returns DzPropertysidenavhierarchy The Editor page widget for this pane.
	 */
	getNodeEditor() {};
	/**
	 * @returns DzGuidePage The guide page displayed for the presets page when no category is selected.
	 */
	getPresetGuidePage() {};
	/**
	 * @description Sets the current page to the index specified by which; 0 based.
	 */
	setCurrentTab(which) {};
	/**
	 * @description Sets whether or not hidden properties are displayed in the pane.
	 * @param {Boolean} onOff - If true, hidden properties will be visible in the parameters list, otherwise hidden properties will not be displayed in the parameters list.
	 */
	showHidden(onOff) {};
	/**
	 * @returns Boolean true if hidden properties are shown in the parameters list, false if hidden parameters are not being displayed in the parameters list.
	 */
	showingHidden() {};
	/**
	 * @description Toggle between whether each selected node is displayed separately in the navigation list or not.
	 */
	toggleDisplaySeparate() {};
	/**
	 * @description Toggle between whether hidden properties are shown in the list or not.
	 */
	toggleShowHidden() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the user hovers the cursor over an asset on the Presets page
	 * @signature `"assetHoverChanged(const DzAssetPtr&)"`
	 * @event
	 */
	assetHoverChanged(asset) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the current page changes
	 * @signature `"currentTabChanged(int)"`
	 * @event
	 */
	currentTabChanged(which) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the option to show hidden properties changes
	 * @signature `"showingHiddenChanged(bool)"`
	 * @event
	 */
	showingHiddenChanged(onOff) {};

}
/**
 * This class represents an action that the user can perform in the interface via pressing a hot key or clicking on a menu/toolbar item.
 * All action items are added to a list of interface actions which the user can customize. The user can specify their own keyboard `shortcut` or 'Hot Key' for the action, and any action item can be moved into a custom toolbar, as well as appear in the DAZ Studio main menu.
 * See Also:
 */
class DzAction extends QObject {
	/**
	 * @description The action group that this action belongs to (Read Only)
	 * @type {String}
	 */
	actionGroup;
	/**
	 * @description TODO:
	 * Add description.
	 * @type {Boolean}
	 */
	autoRepeat;
	/**
	 * @description TODO:
	 * Add description.
	 * @type {Boolean}
	 */
	checkable;
	/**
	 * @description TODO:
	 * Add description.
	 * @type {Boolean}
	 */
	checked;
	/**
	 * @description The primary menu that this action is added to by default, if the user has not chosen a custom location (Read Only)
	 * @type {String}
	 */
	defaultMenu;
	/**
	 * @description The menus that this action is added to by default, if the user has not chosen a custom location (Read Only).
	 * @type {Array}
	 */
	defaultMenus;
	/**
	 * @description The default keyboard shortcut (hotkey) that is associated with this action (Read Only before 4.6.4.48)
	 * @type {String}
	 */
	defaultShortcut;
	/**
	 * @description The primary toolBar that this action is added to by default, if the user has not chosen a custom location (Read Only)
	 * @type {String}
	 */
	defaultToolBar;
	/**
	 * @description The toolBars that this action is added to by default, if the user has not chosen a custom location (Read Only).
	 * @type {Array}
	 */
	defaultToolBars;
	/**
	 * @description The user-readable description of the action.
	 * @type {String}
	 */
	description;
	/**
	 * @description Emitted when an action is enabled or disabled. onOff is true if the action was enabled, false if it was disabled.
	 * @type {Boolean}
	 */
	enabled;
	/**
	 * @description The image file that is used as the icon for this action (if any).
	 * @type {String}
	 */
	iconFile;
	/**
	 * @description TODO:
	 * Add description.
	 * @type {String}
	 */
	iconText;
	/**
	 * @description TODO:
	 * Add description.
	 * @type {Boolean}
	 */
	iconVisibleInMenu;
	/**
	 * @description TODO:
	 * Add description.
	 * @type {String}
	 */
	shortcut;
	/**
	 * @description TODO:
	 * Add description.
	 * @type {String}
	 */
	statusTip;
	/**
	 * @description The standard pixmap that is used as the icon for this action (if any).
	 * @type {Number}
	 */
	styleIcon;
	/**
	 * @description TODO:
	 * Add description.
	 * @type {String}
	 */
	text;
	/**
	 * @description TODO:
	 * Add description.
	 * @type {String}
	 */
	toolTip;
	/**
	 * @description TODO:
	 * Add description.
	 * @type {Boolean}
	 */
	visible;
	/**
	 * @description TODO:
	 * Add description.
	 * @type {String}
	 */
	whatsThis;
	/**
	 * @description Activates the action in the 'Hover' state programatically.
	 */
	hover() {};
	/**
	 * @description Sets the action's toggle state.
	 * @param {Boolean} onOff - If true, the action's toggle state is set on, otherwise, its toggle state is set off.
	 */
	setChecked(onOff) {};
	/**
	 * @description Disables/Enables the action in the interface.
	 * @param {Boolean} onOff - If true, the action will be 'grayed out' in menus, and the user will be unable to activate it. If false, the action will be enabled.
	 */
	setDisabled(onOff) {};
	/**
	 * @description Enables/Disables the action in the interface.
	 * @param {Boolean} onOff - If true, the action will be displayed normally in menus, and the user will be able to activate it. If false, the action will be disabled.
	 */
	setEnabled(onOff) {};
	/**
	 * @description The same as calling setChecked( !onOff ). This method is provided for convenience when connecting this slot to a signal that emits a value that is the inverse of the desired onOff state.
	 * @param {Boolean} onOff - If true, the action's toggle state is set off, otherwise, its toggle state is set on.
	 */
	setOff(onOff) {};
	/**
	 * @description Sets whether the action is visible in the interface.
	 * @param {Boolean} onOff - If true, the action will be displayed in menus and toolbars that it has been added to. If false, the action will not be displayed in any menus or toolbars.
	 */
	setVisible(onOff) {};
	/**
	 * @description Toggles the action programatically.
	 */
	toggle() {};
	/**
	 * @description Activates the action programatically.
	 */
	trigger() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when an action has changed.
	 * @signature `"changed()"`
	 * @event
	 */
	changed() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description TODO: Add Description
	 * @signature `TODO: Add Description`
	 * @event
	 */
	enabled(onOff) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when an action is highlighted by the user; for example, when the user pauses with the cursor over a menu option, toolbar button, or presses an action's shortcut key combination.
	 * @signature `"hovered()"`
	 * @event
	 */
	hovered() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted immediately before executeAction() is called.
	 * @signature `"preExecute()"`
	 * @event
	 */
	preExecute() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when a toggle action changes state. checked is the new action state, true for on, false for off.
	 * @signature `"toggled(bool)"`
	 * @event
	 */
	toggled(checked) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when an action is activated by the user; for example, when the user clicks a menu option, toolbar button, or presses an action's shortcut key combination, or when trigger() was called. Notably, it is not emitted when setChecked() or toggle() is called. checked is true if the action is checked, or false if the action is unchecked.
	 * @signature `"triggered(bool)"`
	 * @event
	 */
	triggered(checked) {};

}
/**
 * See Also:
 */
class DzActionMenu extends QObject {
	/**
	 * @description Holds whether or not the menu is considered to be created by the application (true) or created by the user (false).
	 * @type {Boolean}
	 */
	isDefault;
	/**
	 * @description Holds the type of the menu (Read Only until 4.6.0.74)
	 * @type {Number}
	 */
	menuType;
	/**
	 * @description ENUM: A menu where each DzActionMenuItem is explicitly defined.
	 */
	CustomMenu;
	/**
	 * @description ENUM: A menu where each DzActionMenuItem is implicitly defined; built dynamically from paneaction_dz subclasses.
	 */
	PaneMenu;
	/**
	 * @description ENUM: A menu where each DzActionMenuItem is implicitly defined; built dynamically from viewtoolaction_dz subclasses.
	 */
	ViewToolMenu;
	/**
	 * @description ENUM: A menu where each DzActionMenuItem is implicitly defined; built dynamically from assetiofilteraction_dz and savefilteraction_dz subclasses.
	 */
	SaveAsMenu;
	/**
	 * @description ENUM: A menu where each DzActionMenuItem is implicitly defined; built dynamically from the return value of DzContentMgr.getRecentFileList(). Since: 4.6.0.44
	 */
	OpenRecentMenu;
	/**
	 * @description Removes all items from the menu.
	 */
	clear() {};
	/**
	 * @description Displays the menu to the user.
	 */
	exec() {};
	/**
	 * @description Displays the menu to the user at the given position.
	 * @param {Point} pos - The global window coordinates at which to display the popup menu.
	 */
	exec(pos) {};
	/**
	 * @returns DzActionMenu The submenu at the given path; if a menu along the path does not already exist, it is created.
	 * @since 4.11.0.164
	 * @param {String} path - The slash ('/') delimited path of the submenu to find or create.
	 * @param {Boolean} asDefault - If true, any menus that are created will be marked as a default menu; created/placed by the application. If false (default), any menus created will be marked as a custom menu; created/placed by the user.
	 */
	findOrCreateSubMenu(path, asDefault = false) {};
	/**
	 * @returns DzActionMenu The submenu with the given path (if any), otherwise null.
	 * @param {String} path - The slash ('/') delimited path of the submenu to find.
	 */
	findSubMenu(path) {};
	/**
	 * @returns DzActionMenuItem The menu item at the given index (if valid), otherwise null.
	 * @param {Number} i - The index of the item to return.
	 */
	getItem(i) {};
	/**
	 * @returns Array A list of DzActionMenuItem in this menu.
	 */
	getItemList() {};
	/**
	 * @returns Number The number of items in the menu.
	 */
	getNumItems() {};
	/**
	 * @returns DzActionMenuItem The item in a parent menu (if any) that causes this menu to be displayed, otherwise null.
	 * @since 4.11.0.164
	 */
	getParentItem() {};
	/**
	 * @returns String The slash ('/') delimited path of this action menu (if any), otherwise an empty string.
	 * @since 4.11.0.205
	 */
	getPath() {};
	/**
	 * @returns Boolean true if there are items in this menu, otherwise false.
	 */
	hasItems() {};
	/**
	 * @description Inserts the given action into the menu at the given location.
	 * @param {Number} identifier - The name of the DzAction subclass to insert into the menu.
	 * @param {Number} i - The index at which to insert the item, if the index is invalid (the default) the item is appended to the end of the menu.
	 */
	insertAction(identifier, i = -1) {};
	/**
	 * @description Inserts the given custom action into the menu at the given location.
	 * @param {Number} guid - The globally unique identifier for the custom action to insert into the menu.
	 * @param {Number} i - The index at which to insert the item, if the index is invalid (the default) the item is appended to the end of the menu.
	 */
	insertCustomAction(guid, i = -1) {};
	/**
	 * @description Inserts the given file merge action into the menu at the given location.
	 * @since 4.6.0.76
	 * @param {Number} fileName - The path of the file to insert into the menu.
	 * @param {Number} label - The label to display within the interface; defaults to fileName if not specified.
	 * @param {Number} i - The index at which to insert the item, if the index is invalid (the default) the item is appended to the end of the menu.
	 */
	insertFileMergeAction(fileName, label = "", i = -1) {};
	/**
	 * @description Inserts the given file open action into the menu at the given location.
	 * @since 4.6.0.76
	 * @param {Number} fileName - The path of the file to insert into the menu.
	 * @param {Number} label - The label to display within the interface; defaults to fileName if not specified
	 * @param {Number} i - The index at which to insert the item, if the index is invalid (the default) the item is appended to the end of the menu.
	 */
	insertFileOpenAction(fileName, label = "", i = -1) {};
	/**
	 * @description Inserts the given item into the menu at the given location.
	 * @param {Number} item - The item to insert into the menu.
	 * @param {Number} i - The index at which to insert the item, if the index is invalid (the default) the item is appended to the end of the menu.
	 */
	insertItem(item, i = -1) {};
	/**
	 * @description Deprecated
	 * @returns DzActionMenu
	 */
	insertMenu(label, menu, i = -1) {};
	/**
	 * @description Inserts a separator into the menu at the given location.
	 * @param {Number} i - The index at which to insert the item, if the index is invalid (the default) the item is appended to the end of the menu.
	 */
	insertSeparator(i = -1) {};
	/**
	 * @description Inserts the given menu into the menu at the given location as a submenu.
	 * @returns DzActionMenu
	 * @since 4.11.0.164
	 * @param {Number} label - The label to display in this menu for the submenu item; the "/" character cannot be used.
	 * @param {Number} menu - The submenu to insert into this menu; if null, a new menu is created at the given index.
	 * @param {Number} asDefault - If true, the menu is inserted as a default menu. If false (default) the menu is inserted as a custom menu.
	 * @param {Number} i - The index at which to insert the item, if the index is invalid (the default) the item is appended to the end of the menu.
	 */
	insertSubMenu(label, menu, asDefault = false, i = -1) {};
	/**
	 * @description Remove the given item from the menu.
	 * @param {DzActionMenuItem} item - The item to remove from the menu.
	 */
	removeItem(item) {};
	/**
	 * @description Removes any duplicate separators from the menu by replacing two or more adjacent separators with a single separator.
	 */
	simplifySeparators() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the default state of this menu has been changed.
	 * @signature `"defaultChanged(bool)"`
	 * @event
	 */
	defaultChanged(yesNo) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when items are added to or removed from this menu.
	 * @signature `"itemListChanged()"`
	 * @event
	 */
	itemListChanged() {};

}
/**
 * Action Menu Items are registered with a DzActionMenu and are available to access via methods on that class.
 */
class DzActionMenuItem extends QObject {
	/**
	 * @description Holds the identifier for the Action (classname), CustomAction (GUID), FileOpenAction or FileMergeAction (file path) to perform.
	 * @type {String}
	 */
	action;
	/**
	 * @description Holds whether or not the menu item is considered to be placed by the application (true) or placed by the user (false).
	 * @type {Boolean}
	 */
	isDefault;
	/**
	 * @description Holds the label displayed for the item.
	 * @type {String}
	 */
	label;
	/**
	 * @description Holds the type of the menu item (Read Only)
	 * @type {Type}
	 */
	type;
	/**
	 * @description ENUM: A menu separator (i.e., horizontal divider).
	 */
	Separator;
	/**
	 * @description ENUM: A menu item that activates a DzAction object.
	 */
	Action;
	/**
	 * @description ENUM: A menu item that activates a custom action. See Also: DzActionMgr - for more about custom actions.
	 */
	CustomAction;
	/**
	 * @description ENUM: A menu item that opens a submenu.
	 */
	SubMenu;
	/**
	 * @description ENUM: A menu item that opens a file, replacing the contents of the current scene. See Also: DzContentMgr.openFile() - for more about opening a file.
	 */
	FileOpenAction;
	/**
	 * @description ENUM: A menu item that merges a file with the current scene. See Also: DzContentMgr.openFile() - for more about merging a file.
	 */
	FileMergeAction;
	/**
	 * @returns DzActionMenu The menu that this item is in.
	 * @since 4.11.0.164
	 */
	getParentMenu() {};
	/**
	 * @returns DzActionMenu The submenu that is displayed by this menu item (if any), otherwise null.
	 */
	getSubMenu() {};
	/**
	 * @description Causes the file for a FileOpenAction or FileMergeAction item to load.
	 * @since 4.6.0.44
	 */
	loadFile() {};
	/**
	 * @description Sets the menu that is displayed as the submenu when this menu item is activated. This call has no effect unless the type of this item is SubMenu.
	 * @param {DzActionMenu} menu - The menu that is displayed as a submenu when this menu item is activated. The menu item takes ownership of the menu - the menu will be deleted when this item is destroyed.
	 */
	setSubMenu(menu) {};

}
/**
 * Responsible for the management of actions that the user can perform in the interface by pressing the key combination specified by its shortcut or by clicking on a menu/toolbar item.
 * There is only one instance of this manager in an application. This instance is created and owned by DzMainWindow. Request the instance via DzMainWindow.getActionMgr().
 * See Also:
 */
class DzActionMgr extends QWidget {
	/**
	 * @description Uses the regular expression "([A-z]+[A-z0-9]*)" to strip characters/symbols/etc from a string in order to 'legalize' it.
	 * @returns A 'legalized' version of name.
	 * @since 4.6.2.102
	 * @param {String} name - The name to 'legalize.'
	 */
	constructor(name) {};
	/**
	 * @description Adds a custom action to the action manager.
	 * @returns String The globally unique identifier for the newly created custom action.
	 * @param {String} text - The text of the action. This is displayed in menus the action is added to unless a different menu text is specified.
	 * @param {String} desc - The description of the action.
	 * @param {String} script - The filename of the script to execute, or the actual text of the script to execute.
	 * @param {Boolean} isFile - If true, then script is assumed to contain a filename, otherwise script is assumed to be the actual script.
	 * @param {String} shortcut - The default keyboard shortcut for the action.
	 * @param {String} iconFile - The path of an image file that will be the icon for the action.
	 */
	addCustomAction(text, desc, script, isFile = true, shortcut = "", iconFile = "") {};
	/**
	 * @description Clears the active menu.
	 */
	clearActiveMenu() {};
	/**
	 * @returns DzAction A pointer to the action object of the given class type.
	 * @param {String} identifier - The classname of the DzAction subclass to find the action for.
	 */
	findAction(identifier) {};
	/**
	 * @returns Array The list of actions whose shortcuts start with the specified sequence (if any), otherwise an empty list.
	 * @since 4.12.1.63
	 * @param {String} shortcut - The shortcut to find actions for.
	 */
	findActionsForShortcut(shortcut) {};
	/**
	 * @returns Number The index of the custom action with the given identifier (if any), otherwise -1.
	 * @param {String} guid - The globally unique identifier (name) of the custom action to find.
	 */
	findCustomAction(guid) {};
	/**
	 * @returns DzAction The action that toggles visibility of the given DzPane (if any), otherwise NULL.
	 * @since 4.8.1.18
	 * @param {String} identifier - The classname of the DzPane, or in the case of a custom pane the globally unique identifier, to find the action for.
	 */
	findPaneAction(identifier) {};
	/**
	 * @returns DzPersistentMenu The persistent menu of the given class type (if any), otherwise NULL.
	 * @param {String} className - The class name of the persistent menu to find.
	 */
	findPersistentMenu(className) {};
	/**
	 * @returns DzAction The action that activates the given DzViewTool subclass (if any), otherwise NULL.
	 * @since 4.8.1.18
	 * @param {String} className - The class name of the DzViewTool to find the action for.
	 */
	findViewToolAction(className) {};
	/**
	 * @returns DzAction The action at the given index (if any), otherwise NULL.
	 * @param {Number} i - The index of the action to return.
	 */
	getAction(i) {};
	/**
	 * @returns DzActionMenu The currently set active menu (if any), otherwise NULL.
	 */
	getActiveMenu() {};
	/**
	 * @returns Number The index of the custom action with the given GUID; creates a custom action if one does not already exist.
	 * @param {String} guid - The globally unique identifier (name) of the custom action to get.
	 */
	getCustomAction(guid) {};
	/**
	 * @returns DzAction The custom action at the given index (if any), otherwise NULL.
	 * @since 4.12.1.63
	 * @param {Number} i - The index of the custom action to return.
	 * @attention The return object (if any) will inherit DzCustomAction.
	 */
	getCustomActionByIndex(i) {};
	/**
	 * @returns String The description for the custom action at the given index (if any), otherwise an empty string.
	 * @since 4.11.0.164
	 * @param {Number} i - The index of the custom action to get the description of.
	 */
	getCustomActionDescription(i) {};
	/**
	 * @returns String The path to the file for the custom action at the given index (if any) if the custom action refers a file, otherwise an empty string.
	 * @param {Number} i - The index of the custom action to get the filename for.
	 */
	getCustomActionFile(i) {};
	/**
	 * @returns String The icon file for the custom action at the given index.
	 * @param {Number} i - The index of the custom action to get the icon file for.
	 */
	getCustomActionIcon(i) {};
	/**
	 * @returns String The globally unique identifier for the custom action at the given index (if any), otherwise an empty string.
	 * @param {Number} i - The index of the custom action to get the name of.
	 */
	getCustomActionName(i) {};
	/**
	 * @returns String The script code executed by the custom action or an empty string if the custom action refers to a file (if any), otherwise an empty string.
	 * @param {Number} i - The index of the custom action to get information for.
	 */
	getCustomActionScript(i) {};
	/**
	 * @returns String The keyboard shortcut for the custom action at the given index (if any), otherwise an empty string.
	 * @param {Number} i - The index of the custom action to return the shortcut for.
	 */
	getCustomActionShortcut(i) {};
	/**
	 * @returns String The text for the custom action at the given index (if any), otherwise an empty string.
	 * @param {Number} i - The index of the custom action to get the text for.
	 */
	getCustomActionText(i) {};
	/**
	 * @returns DzActionMenu The Main Menu for the application.
	 */
	getMenu() {};
	/**
	 * @returns Number The number of action items in the application.
	 */
	getNumActions() {};
	/**
	 * @returns Number The number of custom actions in the action manager.
	 */
	getNumCustomActions() {};
	/**
	 * @returns Number The number of persistent menus in the application.
	 */
	getNumPersistentMenus() {};
	/**
	 * @returns DzPersistentMenu The persistent menu at the specified index (if any), otherwise NULL.
	 * @param {Number} i - The index of the persistent menu to return.
	 */
	getPersistentMenu(i) {};
	/**
	 * @description Builds the main menu, pane menus and tool bars from the given file.
	 * @returns Boolean true if the file was successfully loaded, otherwise false.
	 * @since 4.6.0.78
	 * @param {String} filename - The name of the interface file to load.
	 * @param {Boolean} overrideDefaults - Whether or not default triggers (i.e. version numbers on menus) cause certain items to be rebuilt using their defaults.
	 */
	loadInterfaceFile(filename, overrideDefaults) {};
	/**
	 * @description Removes all custom actions from the application.
	 */
	removeAllCustomActions() {};
	/**
	 * @description Removes the custom action at the given index.
	 * @param {Number} i - The index of the custom action to remove.
	 */
	removeCustomAction(i) {};
	/**
	 * @description Saves the actions to the given file.
	 * @returns Boolean true if the file was saved successfully, otherwise false.
	 * @param {String} filename - The name of the file to save the interface settings to.
	 */
	saveActionsFile(filename) {};
	/**
	 * @description Saves the actions to the given file.
	 * @returns Boolean true if the file was saved successfully, otherwise false.
	 * @param {String} filename - The name of the file to save the interface settings to.
	 */
	saveCustomActionsFile(filename) {};
	/**
	 * @description Saves the actions, menus and toolbars to their respective files in the default location.
	 * @returns Boolean true if the files were saved successfully, otherwise false.
	 */
	saveInterfaceFiles() {};
	/**
	 * @description Saves the main menu, pane menus to the given file.
	 * @returns Boolean true if the file was saved successfully, otherwise false.
	 * @param {String} filename - The name of the file to save the interface settings to.
	 */
	saveMenusFile(filename) {};
	/**
	 * @description Saves the tool bars to the given file.
	 * @returns Boolean true if the file was saved successfully, otherwise false.
	 * @param {String} filename - The name of the file to save the interface settings to.
	 */
	saveToolBarsFile(filename) {};
	/**
	 * @param {String} className - The name of the action class to set the accelerator for.
	 * @param {String} key - The string representation of the accelerator.
	 */
	setAccel(className, key) {};
	/**
	 * @description Sets the active menu, so that actions relying on the active menu can get it. This may be called before the menu exec() call to allow context for script actions.
	 * @param {DzActionMenu} menu - The menu to set as the active menu.
	 */
	setActiveMenu(menu) {};
	/**
	 * @description Sets the description for the custom action at the given index.
	 * @since 4.11.0.164
	 * @param {String} i - The index of the custom action to set the description for.
	 * @param {String} desc - The description of the custom action.
	 */
	setCustomActionDescription(i, desc) {};
	/**
	 * @description Sets the icon for the custom action at the given index.
	 * @param {Number} i - The index of the custom action to set the icon file for.
	 * @param {String} iconFile - The path of the image file that will be loaded for the action's icon. The path can be absolute, or relative to DzApp.getResourcesPath().
	 */
	setCustomActionIcon(i, iconFile) {};
	/**
	 * @description Sets the script for the custom action at the given index.
	 * @param {String} i - The index of the custom action to set the script for.
	 * @param {String} script - The script to set as the Custom action's script.
	 * @param {Boolean} isFile - If true, script contains the name of a script file that should be loaded. If false, script contains the code for the action's script.
	 */
	setCustomActionScript(i, script, isFile = true) {};
	/**
	 * @description Sets the keyboard shortcut for the custom action at the given index.
	 * @since 4.9.4.102
	 * @param {String} i - The index of the custom action to set the shortcut for.
	 * @param {String} shortcut - The string representation of the shortcut.
	 */
	setCustomActionShortcut(i, shortcut) {};
	/**
	 * @description Sets whether or not the text of the action is displayed with the icon for the custom action at the given index.
	 * @param {Number} i - The index of the custom action to set.
	 * @param {Boolean} onOff - If true, the text of the action is always displayed with the icon (e.g., in toolbars).
	 */
	setCustomActionShowTextWithIcon(i, onOff) {};
	/**
	 * @description Sets the text for the custom action at the given index.
	 * @param {String} i - The index of the custom action to set the text for.
	 * @param {String} text - The new text for the action.
	 */
	setCustomActionText(i, text) {};
	/**
	 * @param {String} key - The accelerator to remove from actions in the app.
	 */
	unsetAccel(key) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when a custom action is added to the action manager.
	 * @signature `"customActionAdded(const QString&)"`
	 * @event
	 */
	customActionAdded(name) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when custom actions are added to or removed from the action manager.
	 * @signature `"customActionListChanged()"`
	 * @event
	 */
	customActionListChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when a custom action is removed from the action manager.
	 * @signature `"customActionRemoved(const QString&)"`
	 * @event
	 */
	customActionRemoved(name) {};

}
/**
 * Defines the layout of Toolbars, Pane Groups, Panes, Viewports and the active View Tool within an Activity of the interface.
 * See Also:
 */
class DzActivityLayout extends DzRefCountedItem, QObject {
	/**
	 * @description Default Constructor. Creates a new activity layout with the given name and description.
	 * @param {String} label - The label that the user will see for this layout in the activity tabs
	 * @param {String} description - The description of the layout.
	 */
	constructor(label, desc) {};
	/**
	 * @description The description of the activity
	 * @type {String}
	 */
	description;
	/**
	 * @description The label of the activity
	 * @type {String}
	 */
	label;
	/**
	 * @description Clears the memorized state of the activity.
	 */
	clearMemorizedState() {};
	/**
	 * @returns Boolean Whether or not the toolbar with the given name is enabled for this activity layout.
	 */
	isToolBarEnabled(toolbar) {};
	/**
	 * @description Sets whether or not the toolbar with the given name is enabled.
	 */
	setToolbarEnabled(toolbar, onOff) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the layout's label has changed.
	 * @signature `"labelChanged(const QString&)"`
	 * @event
	 */
	labelChanged(label) {};

}
/**
 * Deprecated
 * Exists only to keep code written prior to 4.6.2.23 working. Do not use in new code. Use DzTextureLayer.BlendAdd instead.
 */
class DzAddBlend {
	/**
	 * @description Default Constructor.
	 */
	constructor() {};

}
/**
 * See Also:
 * Attention:@attention Attention:
 */
class DzAlembicExporter extends DzExporter {
	/**
	 * @description Default Constructor.
	 */
	constructor() {};

}
/**
 * Deprecated
 * Exists only to keep code written prior to 4.6.2.23 working. Do not use in new code. Use DzTextureLayer.BlendAlpha instead.
 */
class DzAlphaBlend {
	/**
	 * @description Default Constructor
	 */
	constructor() {};

}
/**
 * Derived from QApplication, this class embodies the main event loop, and owns application-wide settings and objects not directly related to the user interface.
 */
class DzApp extends QObject {
	/**
	 * @description Holds the name of the application; i.e., "DAZ Studio". (Read Only)
	 * @type {String}
	 */
	appName;
	/**
	 * @description Holds the name of the cloud service; i.e., "Daz Connect". (Read Only)
	 * @type {String}
	 */
	cloudName;
	/**
	 * @description Holds the exit code returned by the application. (Read Only)
	 * @type {Number}
	 */
	exitCode;
	/**
	 * @description Holds the size, in bytes, of the log file.
	 * @type {Number}
	 */
	logSize;
	/**
	 * @description Holds a string representation of the full product version number; i.e., major.minor.revision.build. (Read Only)
	 * @type {String}
	 */
	longVersionString;
	/**
	 * @description Holds the name of the organization; i.e., "DAZ 3D". (Read Only)
	 * @type {String}
	 */
	orgName;
	/**
	 * @description Holds the arguments passed to the application on launch. (Read Only)
	 * @type {Array}
	 */
	scriptArgs;
	/**
	 * @description Holds the full product version number as an encoded 32-bit integer. (Read Only)
	 * Deprecated
	 * @type {Number}
	 */
	version;
	/**
	 * @description Holds the full product version number as an encoded 64-bit integer. (Read Only)
	 * @type {Number}
	 */
	version64;
	/**
	 * @description Holds a string representation of the product version number; i.e., major.minor. (Read Only)
	 * @type {String}
	 */
	versionString;
	/**
	 * @description ENUM: No interface or graphical subsystem is initialized.
	 */
	NoInterface;
	/**
	 * @description ENUM: The OpenGL subsystem is initialized without a user interface.
	 */
	NoInterfaceWithOpenGL;
	/**
	 * @description ENUM: The user interface and all graphical subsystems are initialized.
	 */
	FullInterface;
	/**
	 * @description ENUM: An unknown operating system. Since: 4.11.0.235
	 */
	OS_Unknown;
	/**
	 * @description ENUM: An unknown version of the Windows operating system. Since: 4.11.0.235
	 */
	Windows_Unknown;
	/**
	 * @description ENUM: The "Windows 95" (Windows 4.0) operating system. Since: 4.11.0.235
	 */
	Windows_95;
	/**
	 * @description ENUM: The "Windows 98" (Windows 4.1) operating system. Since: 4.11.0.235
	 */
	Windows_98;
	/**
	 * @description ENUM: The "Windows Millennium Edition" aka "ME" (Windows 4.9) operating system. Since: 4.11.0.235
	 */
	Windows_Me;
	/**
	 * @description ENUM: The "Windows 2000" (Windows NT 5.0) operating system. Since: 4.11.0.235
	 */
	Windows_2000;
	/**
	 * @description ENUM: The "Windows XP" (Windows NT 5.1) operating system. Since: 4.11.0.235
	 */
	Windows_XP;
	/**
	 * @description ENUM: The "Windows 2003" (Windows NT 5.2) operating system. Since: 4.11.0.235
	 */
	Windows_2003;
	/**
	 * @description ENUM: The "Windows Vista" (Windows NT 6.0) operating system. Since: 4.11.0.235
	 */
	Windows_Vista;
	/**
	 * @description ENUM: The "Windows 7" (Windows NT 6.1) operating system. Since: 4.11.0.235
	 */
	Windows_7;
	/**
	 * @description ENUM: The "Windows 8" (Windows NT 6.2) operating system. Since: 4.11.0.235
	 */
	Windows_8;
	/**
	 * @description ENUM: The "Windows 8.1" (Windows NT 6.3) operating system. Since: 4.11.0.235
	 */
	Windows_8_1;
	/**
	 * @description ENUM: The "Windows 10" (Windows NT 10) operating system. Since: 4.11.0.235
	 */
	Windows_10;
	/**
	 * @description ENUM: An unknown version of the Mac OS X/OS X/macOS operating system. Since: 4.11.0.235
	 */
	Mac_Unknown;
	/**
	 * @description ENUM: The "Mac OS X 10.0" (aka "Cheetah") operating system. Since: 4.11.0.235
	 */
	Mac_10_0;
	/**
	 * @description ENUM: The "Mac OS X 10.1" (aka "Puma") operating system. Since: 4.11.0.235
	 */
	Mac_10_1;
	/**
	 * @description ENUM: The "Mac OS X 10.2" (aka "Jaguar") operating system. Since: 4.11.0.235
	 */
	Mac_10_2;
	/**
	 * @description ENUM: The "Mac OS X Panther" (version 10.3) operating system. Since: 4.11.0.235
	 */
	Mac_10_3;
	/**
	 * @description ENUM: The "Mac OS X Tiger" (version 10.4) operating system. Since: 4.11.0.235
	 */
	Mac_10_4;
	/**
	 * @description ENUM: The "Mac OS X Leopard" (version 10.5) operating system. Since: 4.11.0.235
	 */
	Mac_10_5;
	/**
	 * @description ENUM: The "Mac OS X Snow Leopard" (version 10.6) operating system. Since: 4.11.0.235
	 */
	Mac_10_6;
	/**
	 * @description ENUM: The "Mac OS X Lion" (version 10.7) operating system. Since: 4.11.0.235
	 */
	Mac_10_7;
	/**
	 * @description ENUM: The "OS X Mountain Lion" (version 10.8) operating system. Since: 4.11.0.235
	 */
	Mac_10_8;
	/**
	 * @description ENUM: The "OS X Mavericks" (version 10.9) operating system. Since: 4.11.0.235
	 */
	Mac_10_9;
	/**
	 * @description ENUM: The "OS X Yosemite" (version 10.10) operating system. Since: 4.11.0.235
	 */
	Mac_10_10;
	/**
	 * @description ENUM: The "OS X El Capitan" (version 10.11) operating system. Since: 4.11.0.235
	 */
	Mac_10_11;
	/**
	 * @description ENUM: The "macOS Sierra" (version 10.12) operating system. Since: 4.11.0.235
	 */
	Mac_10_12;
	/**
	 * @description ENUM: The "macOS High Sierra" (version 10.13) operating system. Since: 4.11.0.235
	 */
	Mac_10_13;
	/**
	 * @description ENUM: The "macOS Mojave" (version 10.14) operating system. Since: 4.11.0.235
	 */
	Mac_10_14;
	/**
	 * @description ENUM: The "macOS Catalina" (version 10.15) operating system. Since: 4.12.1.16
	 */
	Mac_10_15;
	/**
	 * @description ENUM: The Windows hardware/software environment.
	 */
	Windows;
	/**
	 * @description ENUM: The Mac OS X|OS X|macOS hardware/software environment.
	 */
	MacOSX;
	/**
	 * @description ENUM: A build of the application that is considered stable, and has been made available to the general public.
	 */
	GeneralRelease;
	/**
	 * @description ENUM: A build of the application that is not considered stable yet, but has been made available to the general public for testing.
	 */
	PublicBuild;
	/**
	 * @description ENUM: A build of the application that is not considered ready for the general public, but is considered stable enough to introduce into a production environment by early adopters; typically only made available to our Published Artists.
	 */
	PublishingBuild;
	/**
	 * @description ENUM: A build of the application that is not considered stable yet, but has been made available to a select group of individuals that serve as the "front line" or the "canary in a coal mine" for a time before the build is promoted to a channel that is less restricted.
	 */
	PrivateBuild;
	/**
	 * @description ENUM: A build that is used by developers of the application during the development process.
	 */
	DevBuild;
	/**
	 * @description ENUM: An edition of the application that provides the "Free" set of features.
	 */
	Free;
	/**
	 * @description ENUM: An edition of the application that provides the "Standard" set of features.
	 */
	Standard;
	/**
	 * @description ENUM: An edition of the application that provides the "Advanced" set of features.
	 */
	Advanced;
	/**
	 * @description ENUM: An edition of the application that provides the "Professional" set of features.
	 */
	Pro;
	/**
	 * @description ENUM: An edition of the application that provides the "Alpha" set of features.
	 */
	Alpha;
	/**
	 * @description ENUM: An edition of the application that provides the "Beta" set of features.
	 */
	Beta;
	/**
	 * @returns DzVersion The current version of the application.
	 * @since 4.11.0.230
	 */
	static getVersion() {};
	/**
	 * @returns Boolean true if a modal widget (i.e., dialog) is currently displayed, otherwise false.
	 * @since 4.12.1.116
	 */
	static hasActiveModalWidget() {};
	/**
	 * @returns Number A numeric representation of the bit architecture the application was compiled for.
	 */
	bitArchitecture() {};
	/**
	 * @returns String A user-friendly string representation of the bit architecture the application was compiled for.
	 */
	bitArchitectureString() {};
	/**
	 * @returns String A string representation of the byte size.
	 * @param {Number} bytes - The numeric value to convert into a string.
	 */
	byteSizeToString(bytes) {};
	/**
	 * @returns Boolean true if the Scene Builder dialog would be displayed, otherwise false.
	 * @since 4.6.2.69
	 * @param {Object} definition - If empty, the default SceneBuilder.json file (if any) in getResourcesPath() will be checked. If a string, the full path of a Scene Builder configuration file to check is expected. If an object, a map of Scene Builder configuration data is expected. (since 4.6.4.62)
	 */
	canShowSceneBuilder(definition = undefined) {};
	/**
	 * @description Forces a deletion of all objects currently waiting to be deleted to free up more memory. If you are using this to clear memory you will generally want to clear the Undo Stack first.
	 * @param {Boolean} doProgress - If true, a progress dialog will be shown to the user while the operation is taking place.
	 */
	clearDelayedDeleteStack(doProgress) {};
	/**
	 * @description Clears application wide cache of pixmaps.
	 * @since 4.11.0.34
	 */
	clearPixmapCache() {};
	/**
	 * @returns String A string representing a message digest. The string is formatted as 36 characters, in which 32 are hexadecimal and distributed across five groups of 8-4-4-4-12 separated by a hyphen ('-', i.e. "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx" where each 'x' is a hexadecimal digit).
	 * @param {ByteArray} data - The byte array to create a digest of.
	 */
	createDigest(data) {};
	/**
	 * @returns String A string representing a message digest. The string is formatted as 36 characters, in which 32 are hexadecimal and distributed across five groups of 8-4-4-4-12 separated by a hyphen ('-', i.e. "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx" where each 'x' is a hexadecimal digit).
	 * @param {Array} tokens - The list of strings to create a digest of.
	 */
	createDigest(tokens) {};
	/**
	 * @returns String A string representing a randomly generated Universally Unique Identifier (UUID). The string is formatted as 38 characters, in which 32 are hexadecimal and distributed across five groups of 8-4-4-4-12 separated by a hyphen ('-') and enclosed by a pair of curly braces (i.e. "{xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx}" where each 'x' is a hexadecimal digit).
	 */
	createUuid() {};
	/**
	 * @description Writes a debug message to the application log.
	 * @param {String} message - The message to write.
	 */
	debug(message) {};
	/**
	 * @description Posts an event that causes the application to exit.
	 * @since 4.6.2.55
	 * @param {Number} exitCode - The exit code to set. (since 4.9.3.51)
	 */
	delayedExit(exitCode = 0) {};
	/**
	 * @param {Boolean} onOff - If true, multi-threaded features are enabled, otherwise multi-threaded features are disabled.
	 */
	enableMultiThreading(onOff) {};
	/**
	 * @description Writes any currently buffered log messages to the log file. This is automatically called whenever the log buffer has more than 512 characters of data, but can be called at any time to force all messages to be written out.
	 * @returns Boolean
	 */
	flushLogBuffer() {};
	/**
	 * @description Searches in default locations for a script file of the given name.
	 * @returns String The absolute path of the found script file (if any), otherwise an empty string.
	 * @param {String} scriptName - The name/path of a script file to find. This can be a file name, a relative file path, or an absolute file path.
	 */
	getAbsoluteScriptPath(scriptName) {};
	/**
	 * @returns String The absolute path of the application data directory for the current machine user, the current major version, the current release cycle and the current instance of the application.
	 * @since 4.12.1.23
	 * @attention This path is dynamically constructed using calls to the underlying operating system. If the call to the OS fails, getHomePath() is used as a fallback.
	 */
	getAppDataInstancePath() {};
	/**
	 * @returns String The absolute path of the application data directory for the current machine user, the current major version and the current release cycle of the application.
	 * @attention This path is dynamically constructed using calls to the underlying operating system. If the call to the OS fails, getHomePath() is used as a fallback.
	 */
	getAppDataPath() {};
	/**
	 * @returns String The base name of the application; e.g., "Studio".
	 * @since 4.9.2.33
	 */
	getApplicationBaseName() {};
	/**
	 * @returns String The name of the application settings; e.g., "Studio4 Public Build [1]".
	 * @since 4.12.1.26
	 */
	getApplicationDataName() {};
	/**
	 * @description Deprecated
	 * @returns DzAppSettingsMgr The application-wide persistent Settings Manager - used to set and retrieve application settings.
	 */
	getAppSettingsMgr() {};
	/**
	 * @returns DzAssetIOMgr The application-wide Asset I/O Manager in charge of native format assets.
	 */
	getAssetIOMgr() {};
	/**
	 * @returns DzAssetMgr The application-wide Asset Manager.
	 */
	getAssetMgr() {};
	/**
	 * @returns DzAuthenticationMgr The application-wide Authentication Manager - responsible for tracking user authentication.
	 */
	getAuthenticationMgr() {};
	/**
	 * @returns DzCallBackMgr The application-wide Call Back Manager - responsible for tracking call back objects.
	 */
	getCallBackMgr() {};
	/**
	 * @returns String The filename for the file that logs messages from the application that pertains to the cloud service.
	 * @since 4.12.1.26
	 */
	getCloudLogFilename() {};
	/**
	 * @returns String The absolute path of the public/shared user documents folder.
	 * @attention This path is dynamically constructed using calls to the underlying operating system. If the call to the OS fails, getHomePath() is used as a fallback.
	 */
	getCommonUserDocumentPath() {};
	/**
	 * @returns DzContentMgr The application-wide Content Manager.
	 */
	getContentMgr() {};
	/**
	 * @returns DzAuthor The current author (user that is currently running the app).
	 */
	getCurrentAuthor() {};
	/**
	 * @returns String The name of the data folder under the content directory.
	 */
	getDataFolderName() {};
	/**
	 * @returns String The full path for the location where data is stored.
	 */
	getDataFolderPath() {};
	/**
	 * @returns String The base path for the location where data is stored.
	 */
	getDataFolderPathBase() {};
	/**
	 * @returns String The absolute path of the data directory for the organization.
	 * @attention This path is dynamically constructed using calls to the underlying operating system. If the call to the OS fails, getHomePath() is used as a fallback.
	 */
	getDAZDataPath() {};
	/**
	 * @returns DzDeviceMgr The application-wide Device Manager - responsible for devices supported by the application.
	 */
	getDeviceMgr() {};
	/**
	 * @returns QWidget The active modal widget or the application main window if one exists.
	 */
	getDialogParent() {};
	/**
	 * @returns String The absolute path of the directory where application documentation files are stored.
	 */
	getDocumentationPath() {};
	/**
	 * @returns String The absolute path of the user documents folder for the application.
	 * @attention This path is dynamically constructed using calls to the underlying operating system. If the call to the OS fails, getHomePath() is used as a fallback.
	 */
	getDocumentsPath() {};
	/**
	 * @returns DzExportMgr The application-wide Export Manager in charge of file exporters.
	 */
	getExportMgr() {};
	/**
	 * @returns DzFileIOPresetMgr The application-wide File I/O Preset Manager.
	 */
	getFileIOPresetMgr() {};
	/**
	 * @returns String The absolute path of the directory where support script files that are automatically generated are stored.
	 */
	getGeneratedScriptsPath() {};
	/**
	 * @returns String The absolute path of the application data directory for automatically generated shaders.
	 */
	getGeneratedShadersPath() {};
	/**
	 * @returns GraphicsMode An enumerated value representing the current graphics mode.
	 */
	getGraphicsMode() {};
	/**
	 * @returns DzHelpMgr The application-wide Help Manager.
	 */
	getHelpMgr() {};
	/**
	 * @returns String The absolute path of the directory that contains the application executable.
	 */
	getHomePath() {};
	/**
	 * @returns DzImageMgr The application-wide Image Manager - responsible for image I/O and tracking of currently loaded images.
	 */
	getImageMgr() {};
	/**
	 * @returns DzImportMgr The application-wide Import Manager in charge of file importers.
	 */
	getImportMgr() {};
	/**
	 * @returns DzMainWindow The main interface widget if the application is running with an interface, otherwise NULL.
	 */
	getInterface() {};
	/**
	 * @description Last directory that files were loaded or saved to/from.
	 * @returns String
	 */
	getLoadSavePath() {};
	/**
	 * @returns String The filename for the file that logs messages from the application that pertains to the core application and any plugins.
	 * @since 4.12.1.26
	 */
	getLogFilename() {};
	/**
	 * @returns DzMultiMediaMgr The application-wide Video and Audio Manager - responsible for video and audio I/O.
	 */
	getMultiMediaMgr() {};
	/**
	 * @returns DzPluginMgr The application-wide Plug-in Manager - responsible for tracking plug-ins.
	 */
	getPluginMgr() {};
	/**
	 * @returns String The absolute path of the base directory where plug-ins are loaded from.
	 */
	getPluginsPath() {};
	/**
	 * @returns String The absolute path of the machine's global program data directory for the organization, the current major version, the current release cycle, and the current instance of the application.
	 * @since 4.12.1.23
	 * @attention This path is dynamically constructed using calls to the underlying operating system. If the call to the OS fails, getHomePath() is used as a fallback.
	 */
	getProgramDataAppInstancePath() {};
	/**
	 * @returns String The absolute path of the machine's global program data directory for the organization, the current major version, and the current release cycle of the application.
	 * @attention This path is dynamically constructed using calls to the underlying operating system. If the call to the OS fails, getHomePath() is used as a fallback.
	 */
	getProgramDataAppPath() {};
	/**
	 * @returns String The absolute path of the machine's global program data directory for the organization.
	 * @attention This path is dynamically constructed using calls to the underlying operating system. If the call to the OS fails, getHomePath() is used as a fallback.
	 */
	getProgramDataPath() {};
	/**
	 * @returns DzRenderMgr The application-wide Render Manager.
	 */
	getRenderMgr() {};
	/**
	 * @returns String The absolute path of the directory where application resource files are stored.
	 */
	getResourcesPath() {};
	/**
	 * @returns DzSaveFilterMgr (deprecated) The application-wide Save Filter Manager in charge of save filters.
	 */
	getSaveFilterMgr() {};
	/**
	 * @returns String The absolute path of the directory where support script files are stored.
	 */
	getScriptsPath() {};
	/**
	 * @returns String The absolute path of the base directory for all shaders.
	 */
	getShadersPath() {};
	/**
	 * @returns DzSimulationMgr The application-wide Simulation Manager.
	 * @since 4.9.3.140
	 */
	getSimulationMgr() {};
	/**
	 * @returns DzStyle The application-wide style object; subject to becoming invalid if the application style changes.
	 */
	getStyle() {};
	/**
	 * @returns String The name of the style definition currently in use.
	 */
	getStyleDefinition() {};
	/**
	 * @returns Array A list of the available style definitions.
	 */
	getStyleDefinitionList() {};
	/**
	 * @description Get a filename for temporary storage.
	 * @returns String A unique filename (with no extension) whose path will be in the current temporary working folder.
	 * @attention All files in this folder will be deleted when shutdown() is called.
	 */
	getTempFilename() {};
	/**
	 * @returns String The absolute path of the directory where temporary files are stored.
	 */
	getTempPath() {};
	/**
	 * @description Get a filename for temporary storage of rendered images.
	 * @returns String A filename (with no extension) whose path will be in the current temporary working folder.
	 * @attention All files in this folder will be deleted when shutdown() is called.
	 */
	getTempRenderFilename() {};
	/**
	 * @returns String The absolute path of the temporary directory for automatically generated shaders.
	 */
	getTempShadersPath() {};
	/**
	 * @returns String The absolute path of the base directory for all binary utilities.
	 */
	getUtilitiesPath() {};
	/**
	 * @returns String A user-friendly string indicating the name of the application instance (of the release cycle).
	 * @since 4.12.1.19
	 */
	instanceName() {};
	/**
	 * @returns String A string indicating the name of the application instance (of the release cycle).
	 * @since 4.12.1.23
	 */
	instanceNameSuffix() {};
	/**
	 * @returns Boolean true if the application is in the process of shutting down, otherwise false.
	 */
	isClosing() {};
	/**
	 * @returns Boolean true if key is currently pressed, otherwise false.
	 * @param {Number} key - The Qt.Key value for the key to check. Since 4.11.0.263, any value < 0 (default) is interpreted as "any key" rather than a specific key.
	 */
	isKeyDown(key = -1) {};
	/**
	 * @returns Boolean true if sequence is currently pressed, otherwise false.
	 * @param {String} sequence - A string consistent with QKeySequence.fromString(), in the PortableText format. Since 4.11.0.263, "any" is interpreted as "any key" rather than a specific key sequence.
	 */
	isKeySequenceDown(sequence = "Any") {};
	/**
	 * @returns Boolean true if the user has chosen to enable multi-threaded features, otherwise false.
	 */
	isMultiThreadingEnabled() {};
	/**
	 * @returns Boolean true if a valid serial number has been provided, otherwise false.
	 */
	isRegistered() {};
	/**
	 * @returns Boolean true if the main event loop is running and events that are posted can be expected to be delivered, otherwise false.
	 */
	isRunning() {};
	/**
	 * @returns Boolean true if the application is running as a slave to another application, otherwise false.
	 */
	isSlave() {};
	/**
	 * @returns Boolean true if the application is in the process of starting up, otherwise false.
	 */
	isStarting() {};
	/**
	 * @returns Boolean true if data consists of 32 hexadecimal characters (i.e. "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx" where 'x' represents a hexadecimal value in the range [0-9a-f]), or 36 characters in which 32 are hexadecimal values distributed across five groups of 8-4-4-4-12 separated by a hyphen ('-', i.e. "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"), or 38 characters where the previous description is enclosed by curly braces (i.e. "{xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx}"), otherwise false.
	 * @since 4.12.1.63
	 * @param {String} data - The string to test whether or not it is a valid GUID.
	 */
	isValidGuid(data) {};
	/**
	 * @description Writes a normal operational message to the application log.
	 * @param {String} message - The message to write.
	 */
	log(message) {};
	/**
	 * @returns Number The current modifier key state; this value is a bitwise OR of the Qt.KeyboardModifier flags for the active keys (if any).
	 */
	modifierKeyState() {};
	/**
	 * @returns OperatingSystem The enumerated value associated with the OperatingSystem that the application is running under.
	 */
	operatingSystem() {};
	/**
	 * @returns String A user-readable string that describes the current Operating System.
	 */
	operatingSystemString() {};
	/**
	 * @description The application is intended to be as platform independent as possible, but there are cases where something needs to be done differently on one platform or another. This function provides a simple way to check which platform the application is running under.
	 * @returns Platform The enumerated value associated with the Platform that the application is running under.
	 */
	platform() {};
	/**
	 * @description Posts an event that causes execution of a script as it is encountered in the event stack.
	 * @since 4.10.0.101
	 * @param {String} evaluate - If script is actual code, set this to true, otherwise set this to false.
	 * @param {String} script - This can be a file name, a relative file path, an absolute file path or code. If passed a file name or path, getAbsoluteScriptPath() is used to resolve it. If passed actual code, evaluate must also be set to true.
	 * @param {Array} args - The list of arguments to pass to the script.
	 */
	postScriptEvent(evaluate, script, args = []) {};
	/**
	 * @returns ReleaseCycle The enumerated value associated with the ReleaseCycle of the application.
	 */
	releaseCycle() {};
	/**
	 * @returns String A user-friendly string describing the release cycle (and optionally, the instance) of the application.
	 * @since 4.12.1.19
	 */
	releaseCycleInstanceString() {};
	/**
	 * @returns String A user-friendly string describing the release cycle (and optionally, the instance) of the application.
	 * @since 4.12.1.19
	 */
	releaseCycleInstanceSuffix() {};
	/**
	 * @returns String A string describing the release cycle (and optionally, the instance) of the application, without any space characters.
	 * @since 4.12.1.19
	 */
	releaseCycleInstanceSuffixStripped() {};
	/**
	 * @returns String A user-friendly string describing the release cycle of the application.
	 */
	releaseCycleString() {};
	/**
	 * @returns String A user-friendly string describing the release cycle of the application.
	 */
	releaseCycleSuffix() {};
	/**
	 * @returns String A string describing the release cycle of the application, without any space characters.
	 */
	releaseCycleSuffixStripped() {};
	/**
	 * @returns ReleaseEdition The enumerated value associated with the ReleaseEdition of the application.
	 */
	releaseEdition() {};
	/**
	 * @returns String A user-friendly string describing the release edition of the application.
	 */
	releaseEditionString() {};
	/**
	 * @description Restores the temporary files directory to the default location.
	 */
	restoreDefaultTempPath() {};
	/**
	 * @description Sets the default directory for loading or saving files.
	 * @param {String} path - The absolute path of the (default) directory to load/save files from/to.
	 */
	setLoadSavePath(path) {};
	/**
	 * @description Sets the current style for the application.
	 * @returns Boolean true if the application switched to the given style, otherwise false.
	 * @param {String} name - The name of the style definition to use.
	 */
	setStyleDefinition(name) {};
	/**
	 * @description Sets the directory path where temporary files are stored. The path provided needs to be an absolute path. A directory will be created at the new location if it does not already exist.
	 * @returns Boolean true if the path provided is valid and changing the temporary path succeeded. false if any errors occurred.
	 * @param {String} tempPath - The path of the new temporary files directory.
	 */
	setTempPath(tempPath) {};
	/**
	 * @description A convenience method for opening a showing a file/directory in the OS file browser.
	 * @returns Boolean true if the file exists and the OS file browser could be launched, otherwise false.
	 * @param {String} absFilePath - The absolute file path to a file or folder to show.
	 */
	showInNativeBrowser(absFilePath) {};
	/**
	 * @returns Boolean true if the application should prompt the user for input, otherwise false.
	 */
	showPrompts() {};
	/**
	 * @description Displays the Scene Builder dialog.
	 * @returns Array If asEvent is false, a list of the selections made by the user in the Scene Builder dialog, otherwise an empty list. (since 4.6.4.62)
	 * @since 4.6.2.69
	 * @param {Object} definition - If empty, the default SceneBuilder.json file (if any) in getResourcesPath() will be used. If a string, the full path of a Scene Builder configuration file to check is expected. If an object, a map of Scene Builder configuration data is expected. (since 4.6.4.62)
	 * @param {Boolean} asEvent - If false (default), the Scene Builder configuration data is processed immediately. If false, the Scene Builder configuration data is posted to an event and processed as it is encountered in the event stack. (since 4.6.4.62)
	 */
	showSceneBuilder(definition = undefined, asEvent = false) {};
	/**
	 * @description A convenience method for browsing to a given URL.
	 * @param {String} url - The url to open in the system's default browser. Be sure to specify the scheme of the url (e.g., 'http:' or 'file:').
	 */
	showURL(url) {};
	/**
	 * @description Display a message in the current status interface.
	 * @param {String} message - The string to be displayed (and logged if logging is enabled)
	 * @param {Boolean} addToLog - If true (default), the message will also be added to the log.
	 */
	statusLine(message, addToLog = true) {};
	/**
	 * @returns Boolean true if the application is using a user interface, otherwise false.
	 */
	usingInterface() {};
	/**
	 * @description Writes a warning message to the application log.
	 * @param {String} message - The message to write.
	 */
	warning(message) {};
	/**
	 * @description Saves out a user configuration script to the given filename. If no filename is given, the script is saved to the same file read from in startup(). The run() function calls this at the end of each execution.
	 * @returns Boolean true if the file was written successfully, otherwise false.
	 * @param filename - The name of the file to save a configuration script to. If empty (default), the default configuration script for the running application instance is used - i.e., getAppDataInstancePath() + '/' + "StartupScript.dsa" is used.
	 */
	writeConfigScript(configScriptFilename = "") {};
	/**
	 * @description Write a message to the application log.
	 * @since 4.14.0.4
	 * @param {String} message - The message to write.
	 * @param {Boolean} immediate - If true, the message (and any others in the log buffer) will be immediately written to the log file. If false, the message will be written to the log buffer - the log buffer will be automatically flushed (written to file) if it exceeds the maximum defined buffer size.
	 */
	writeToLog(message, immediate) {};
	/**
	 * @description Writes a message to the application log.
	 * @since 4.14.0.4
	 * @param {String} message - The message to write.
	 */
	writeToLog(message) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted immediately after the main event loop exits.
	 * @signature `"closing()"`
	 * @event
	 */
	closing() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when a debug message is sent to the application.
	 * @signature `"debugMsg(const QString&)"`
	 * @event
	 */
	debugMsg(msg) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the event loop is started on the application.
	 * @signature `"eventLoopStarted()"`
	 * @event
	 */
	eventLoopStarted() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when a MouseButtonDblClick or MouseButtonRelease event occurs on the application.
	 * @signature `"mouseEvent()"`
	 * @event
	 */
	mouseEvent() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when multi-threading has changed on the application.
	 * @signature `"multiThreadingChanged(bool)"`
	 * @event
	 */
	multiThreadingChanged(onOff) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the Scene Builder dialog has been rejected by the user, or when none of the files specified in the Scene Builder definition can be found.
	 * @signature `"sceneBuilderAccepted(const QStringList&)"`
	 * @event
	 */
	sceneBuilderAccepted(selections) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the Scene Builder dialog has been rejected by the user, or when none of the files specified in the Scene Builder definition can be found.
	 * @signature `"sceneBuilderRejected()"`
	 * @event
	 */
	sceneBuilderRejected() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted after the application has finished its startup just before the main event loop begins.
	 * @signature `"starting()"`
	 * @event
	 */
	starting() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when a the style is about to change on the application.
	 * @signature `"styleAboutToChange()"`
	 * @event
	 */
	styleAboutToChange() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the application wide style has changed.
	 * @signature `"styleChanged(DzStyle*)"`
	 * @event
	 */
	styleChanged(newStyle) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when a warning message is sent to the application.
	 * @signature `"warningMsg(const QString&)"`
	 * @event
	 */
	warningMsg(msg) {};

}
/**
 * Application Settings are used to store and retrieve settings that persist from one execution of the appliction to the next. On Windows, the settings are saved in the registry. On Mac, these settings are saved via Mac preference plist files.
 * You can create an instance of this class any time you need to read or write persistent settings. This class is a replacement for DzAppSettingsMgr as it is easier and safer to use. Since each instance is separate, the current path of one instance will not affect the rest of the application. It is also not necessary to call popPath() to put this class back into its previous state.
 */
class DzAppSettings extends DzBase {
	/**
	 * @description Default Constructor - creates a new settings object that starts out at the default application path.
	 */
	constructor() {};
	/**
	 * @description Constructor - creates a new settings object that pushes the given path onto the default application path. This is the same as using the default constructor and then calling pushPath() with the given path.
	 */
	constructor(startPath) {};
	/**
	 * @returns Boolean true if this settings contains the named value, otherwise false.
	 * @param {String} key - The name of the value to check.
	 */
	containsValue(key) {};
	/**
	 * @description Read a boolean value from the given key.
	 * @returns Boolean The value of the requested key.
	 * @param {String} key - The name of the value to read.
	 * @param {Boolean} def - Default value - this value is returned if the named value fails to be read.
	 */
	getBoolValue(key, def = false) {};
	/**
	 * @description Read a color value from the given key.
	 * @returns Color The value of the requested key.
	 * @param {String} key - The name of the value to read.
	 * @param {Color} def - Default value - this value is returned if the named value fails to be read.
	 */
	getColorValue(key, def = Color) {};
	/**
	 * @description Read a float color value from the given key.
	 * @returns DzFloatColor The value of the requested key.
	 * @param {String} key - The name of the value to read.
	 * @param {DzFloatColor} def - Default value - this value is returned if the named value fails to be read.
	 */
	getFloatColorValue(key, def = DzFloatColor) {};
	/**
	 * @description Read a floating point value from the given key.
	 * @returns Number The value of the requested key.
	 * @param {String} key - The name of the value to read.
	 * @param {Number} def - Default value - this value is returned if the named value fails to be read.
	 */
	getFloatValue(key, def = 0.0) {};
	/**
	 * @description Read a integer value from the given key.
	 * @returns Number The value of the requested key.
	 * @param {String} key - The name of the value to read.
	 * @param {Number} def - Default value - this value is returned if the named value fails to be read.
	 */
	getIntValue(key, def = 0) {};
	/**
	 * @description Read a string value from the given key.
	 * @returns String The value of the requested key.
	 * @param {String} key - The name of the value to read.
	 * @param {String} def - Default value - this value is returned if the named value fails to be read.
	 */
	getStringValue(key, def = "") {};
	/**
	 * @description Pops a temporary key path off the top of the stack.
	 */
	popPath() {};
	/**
	 * @description Sets the current key path temporarily to the given path; popPath() can be called to remove this path.
	 * @param {String} path - The sub-path to add to the current key path.
	 */
	pushPath(path) {};
	/**
	 * @description Removes a setting by name.
	 * @returns Boolean true if the key/value existed and was successfully removed, otherwise false.
	 * @param {String} key - The name of the key to remove.
	 */
	removeValue(key) {};
	/**
	 * @description Sets a key with a boolean value.
	 * @returns Boolean true if the key/value was successfully set, otherwise false.
	 * @param {String} key - The name of the key to write.
	 * @param {Boolean} setting - The value to set.
	 */
	setBoolValue(key, setting) {};
	/**
	 * @description Sets a key with a color value.
	 * @returns Boolean true if the key/value was successfully set, otherwise false.
	 * @param {String} key - The name of the key to write.
	 * @param {Color} setting - The value to set.
	 */
	setColorValue(key, setting) {};
	/**
	 * @description Sets a key with a float color value.
	 * @returns Boolean true if the key/value was successfully set, otherwise false.
	 * @param {String} key - The name of the key to write.
	 * @param {DzFloatColor} setting - The value to set.
	 */
	setFloatColorValue(key, setting) {};
	/**
	 * @description Sets a key with a floating point value.
	 * @returns Boolean true if the key/value was successfully set, otherwise false.
	 * @param {String} key - The name of the key to write.
	 * @param {Number} setting - The value to set.
	 */
	setFloatValue(key, setting) {};
	/**
	 * @description Sets a key with a integer value.
	 * @returns Boolean true if the key/value was successfully set, otherwise false.
	 * @param {String} key - The name of the key to write.
	 * @param {Number} setting - The value to set.
	 */
	setIntValue(key, setting) {};
	/**
	 * @description Sets a key with a string value.
	 * @returns Boolean true if the key/value was successfully set, otherwise false.
	 * @param {String} key - The name of the key to write.
	 * @param {String} setting - The value to set.
	 */
	setStringValue(key, setting) {};

}
/**
 * TODO:
 * Add detailed description.
 */
class DzArrayHelper extends QObject {
	/**
	 * @description Default Constructor
	 */
	constructor() {};
	/**
	 * @returns Array A copy of list with object appended if object did not already exist in list
	 * @param {Array} list - The Array to append object to
	 * @param {Object} value - The Object to append to list
	 */
	addToArray(list, value) {};
	/**
	 * @returns Number The index into list if object was found, otherwise -1
	 * @param {Array} list - The Array to check for object
	 * @param {Object} value - The Object to check list for
	 */
	isInArray(list, value) {};
	/**
	 * @returns Number The index into list if object was found, otherwise -1
	 * @param {Object} list - The Array to check for object
	 * @param {Object} value - The Object to check list for; using the objects .name property
	 */
	isInArrayByName(list, obj) {};

}
/**
 * An "Asset" serves as an abstraction between the presentation of a content file and the actual file that resides on disk; it is a "container" for information about a content file.
 * At a minimum, an asset contains a reference to the relative path and filename of a file.
 * Metadata
 * When the Content Management System (CMS) is active, an asset provides an interface to its metadata within the content database. This metadata includes information such as what type of asset it is, what it is used for, what it is compatible with, which category(ies) it is presented to the user in, etc.
 * Conceptually, each asset belongs to exactly one "Product". By default, and until/unless modified, all newly created assets are assigned to the "LOCAL USER" product. An asset is uniquely identified within a product by the combination of its relative path and filename. While any number of products can reference a file with the same relative path and filename combination, each product's concept of that combination is unique (even if their metadata is identical).
 * The metadata for a given asset is divided into 2 distinct types; that which is owned and/or maintained by the vendor (the originating source), and that which is owned and/or maintained by the end-user. Unless the metadata component (e.g., `userKeywords,` userNotes, etc), the product (e.g., "LOCAL USER"), or the store (e.g., "LOCAL USER") indicate "user" in their name, any assumption (if there is to be one) about which type the data is should be that which is owned and/or maintained by the vendor.
 * The metadata for an asset that is "installed" and which belongs to a product associated with a "Store" (source) other than the "LOCAL USER" store is owned by the vendor. Conversely, the metadata for an asset that is created by the user and/or belongs to a product associated with the "LOCAL USER" store is owned by the user. The exceptions to this are those attributes which integrate "user" into their name; which in fact always belong to the user.
 * The significance of the distinction between the 2 types of metadata comes down to how the data is handled during an update and whether or not an effort is made to preserve it. Metadata that is owned and/or maintained by the vendor can be summarily purged during an update. This provides a vendor with the means to clean up all potential prior versions of the metadata without being faced with complex bookkeeping tasks.
 * See Also:
 */
class DzAsset extends DzRefCountedItem, QObject {
	/**
	 * @description Holds the asset identifier for this asset. (Read Only)
	 * @type {Object}
	 */
	assetID;
	/**
	 * @description Holds the name for this asset. (Read Only)
	 * @type {String}
	 */
	assetName;
	/**
	 * @description Holds the vendor intended audience for this asset.
	 * @type {Number}
	 */
	audience;
	/**
	 * @description Holds a list of all categories that this asset is in. (Read Only)
	 * @type {Array}
	 */
	categories;
	/**
	 * @description Holds whether the companion file (if any) is a DAZ Script. (Read Only)
	 * @type {Boolean}
	 */
	companionIsScript;
	/**
	 * @description Holds the full path to the folder the companion file is in. (Read Only)
	 * @type {String}
	 */
	companionPath;
	/**
	 * @description Holds a list of all compatibility bases that this asset is compatible with. (Read Only)
	 * @type {Array}
	 */
	compatibilities;
	/**
	 * @description Holds the [vendor] compatibility base for this asset.
	 * @type {String}
	 */
	compatibilityBase;
	/**
	 * @description Holds the [vendor] content type for this asset.
	 * @type {String}
	 */
	contentType;
	/**
	 * @description Holds the date this asset was created. (Read Only)
	 * @type {Date}
	 */
	dateCreated;
	/**
	 * @description Holds the date this asset was last modified. (Read Only)
	 * @type {Date}
	 */
	dateLastModified;
	/**
	 * @description Holds the vendor description for this asset.
	 * @type {String}
	 */
	description;
	/**
	 * @description Holds the name displayed to the user for this asset. (Read Only)
	 * @type {String}
	 */
	displayName;
	/**
	 * @description Holds the group identifier for this asset. 0 = default, < 0 = app defined, > 0 = user defined.
	 * @type {Number}
	 */
	groupId;
	/**
	 * @description Holds whether this asset has metadata provided by the cloud. (Read Only)
	 * @type {Boolean}
	 */
	hasCloudMetadata;
	/**
	 * @description Holds whether this asset is a non-native file and a DAZ Script or native file with the same basename exists in the same directory. (Read Only)
	 * @type {Boolean}
	 */
	hasCompanion;
	/**
	 * @description Holds whether this asset is a non-native file and a DAZ Script with the same basename exists in the same directory. (Read Only)
	 * @type {Boolean}
	 */
	hasCompanionScript;
	/**
	 * @description Holds whether this asset should be hidden in asset views.
	 * @type {Boolean}
	 */
	hidden;
	/**
	 * @description Holds the icon path for this asset. (Read Only)
	 * @type {Pixmap}
	 */
	icon;
	/**
	 * @description Holds whether this asset can be installed from the cloud. (Read Only)
	 * @type {Boolean}
	 */
	isCloudInstallable;
	/**
	 * @description Holds whether this asset is installed from the cloud. (Read Only)
	 * @type {Boolean}
	 */
	isCloudInstalled;
	/**
	 * @description Holds whether this asset is managed by the cloud. (Read Only)
	 * @type {Boolean}
	 */
	isCloudOwned;
	/**
	 * @description Holds whether this asset is installed in the database. (Read Only)
	 * @type {Boolean}
	 */
	isInstalled;
	/**
	 * @description Holds whether the metadata for this asset is valid. (Read Only)
	 * @type {Boolean}
	 */
	isMetadataValid;
	/**
	 * @description Holds whether this asset is a native DAZ Studio file. (Read Only)
	 * @type {Boolean}
	 */
	isNative;
	/**
	 * @description Holds whether this asset is a native DAZ Studio script file. (Read Only)
	 * @type {Boolean}
	 */
	isScript;
	/**
	 * @description Holds whether this asset is a symbolic link. (Read Only)
	 * @type {Boolean}
	 */
	isSymLink;
	/**
	 * @description Holds whether this asset is owned by a vendor or by the user. (Read Only)
	 * @type {Boolean}
	 */
	isVendor;
	/**
	 * @description Holds whether this asset needs to be installed from the cloud. (Read Only)
	 * @type {Boolean}
	 */
	needsCloudInstall;
	/**
	 * @description Holds whether this asset needs to be updated from the cloud. (Read Only)
	 * @type {Boolean}
	 */
	needsCloudUpdate;
	/**
	 * @description Holds the user notes for this asset.
	 * @type {String}
	 */
	notes;
	/**
	 * @description Holds the original filename for this asset. (Read Only)
	 * @type {String}
	 */
	originalFilename;
	/**
	 * @description Holds the original path for this asset. (Read Only)
	 * @type {String}
	 */
	originalPath;
	/**
	 * @description Holds the Globally Unique Identifier (GUID) for the product this asset belongs to. (Read Only)
	 * @type {String}
	 */
	productGUID;
	/**
	 * @description Holds the product identifier for the product that this asset belongs to. (Read Only)
	 * @type {String}
	 */
	productID;
	/**
	 * @description Holds the name of the product this asset belongs to. (Read Only)
	 * @type {String}
	 */
	productName;
	/**
	 * @description Holds the base of the product path in the cloud folder for cloud assets. (Read Only)
	 * @type {String}
	 */
	productPath;
	/**
	 * @description Holds the icon path for this asset. (Read Only)
	 * @type {Pixmap}
	 */
	smallIcon;
	/**
	 * @description Holds the store identifier for the product that this asset belongs to. (Read Only)
	 * @type {String}
	 */
	storeID;
	/**
	 * @description Holds the path that the symbolic link is referencing (if any).
	 * @type {String}
	 */
	symLinkPath;
	/**
	 * @description Holds the URL for this asset. (Read Only)
	 * @type {String}
	 */
	url;
	/**
	 * @description Holds the encoded URL for this asset. (Read Only)
	 * @type {String}
	 */
	urlEncoded;
	/**
	 * @description Holds a list of user owned categories that this asset is in. (Read Only)
	 * @type {Array}
	 */
	userCategories;
	/**
	 * @description Holds a list of user owned compatibility bases that this asset is compatible with. (Read Only)
	 * @type {Array}
	 */
	userCompatibilities;
	/**
	 * @description Holds the user keywords for this asset.
	 * @type {Array}
	 */
	userKeywords;
	/**
	 * @description Holds a list of vendor owned categories that this asset is in. (Read Only)
	 * @type {Array}
	 */
	vendorCategories;
	/**
	 * @description Holds a list of vendor owned compatibility bases that this asset is compatible with. (Read Only)
	 * @type {Array}
	 */
	vendorCompatibilities;
	/**
	 * @description Holds the vendor keywords for this asset.
	 * @type {Array}
	 */
	vendorKeywords;
	/**
	 * @description Sets the compatibility bases that this asset is compatible with.
	 * @since 4.9.0.2
	 * @param {Array} bases - The list of compatibility bases this asset is compatible with.
	 * @param {Boolean} create - If true, creates compatibility bases that do not exist. If false, compatibility will only be established for compatibility bases that already exist.
	 */
	addCompatibilities(bases, create = false) {};
	/**
	 * @description Sets the categories for this asset.
	 * @since 4.9.0.2
	 * @param {Array} categories - The list of categories to add this asset to.
	 * @param {Boolean} create - If true, creates categories that do not exist. If false, only categories that already exist will be assigned.
	 */
	addToCategories(categories, create = false) {};
	/**
	 * @description Sets this asset as belonging to the default group identifier; 0.
	 * @since 4.9.0.11
	 */
	clearGroup() {};
	/**
	 * @description Forces the icon for this asset to reload.
	 */
	forceImageReload() {};
	/**
	 * @returns String The url of this asset as a local file path.
	 */
	getAsLocalFile() {};
	/**
	 * @returns String The base file extension for this asset; without any encryption extension.
	 */
	getBaseExtension() {};
	/**
	 * @returns String The extension to use for DAZ Studio file link.
	 * @since 4.9.0.30
	 */
	getDSLinkExtension() {};
	/**
	 * @returns String The text that is placed inside a DAZ Studio file link.
	 * @since 4.9.0.30
	 */
	getDSLinkText() {};
	/**
	 * @returns DzAbstractAssetContainer The asset container that owns this asset.
	 */
	getOwner() {};
	/**
	 * @returns DzProductAssetContainer The product that this asset belongs to (if any), otherwise null.
	 * @since 4.9.0.2
	 */
	getProduct() {};
	/**
	 * @returns String The relative file path for this asset.
	 */
	getRelativeFilePath() {};
	/**
	 * @returns Boolean true if this asset is a member of group, otherwise false.
	 * @since 4.9.0.11
	 * @attention 0 = default, < 0 = app defined, > 0 = user defined
	 */
	isGroup(id) {};
	/**
	 * @description Loads the default icon for this asset.
	 * @returns Boolean true if the default icon for this asset is successfully loaded, otherwise false.
	 * @param {Boolean} delayLoad - If true, loading of the icon is delayed.
	 */
	loadDefaultIcon(delayLoad) {};
	/**
	 * @returns Object A map of the key value pairs in a DAZ Studio link file.
	 * @since 4.9.0.30
	 * @param {String} linkPath - The path of the file to read from.
	 */
	readLinkData(linkPath) {};
	/**
	 * @description Removes the compatibility bases that this asset is compatible with.
	 * @since 4.9.2.53
	 * @param {Array} bases - The list of compatibilities to remove from this asset.
	 * @param {Boolean} isVender - If true, the compatibilities being looked up are owned by the vendor.
	 */
	removeCompatibilities(bases, isVender = false) {};
	/**
	 * @description Removes this asset from the categories.
	 * @since 4.9.2.53
	 * @param {Array} categories - The list of categories to remove this asset from.
	 * @param {Boolean} isVender - If true, the categories being looked up are owned by the vendor.
	 */
	removeFromCategories(categories, isVender = false) {};
	/**
	 * @description Changes the name of this asset.
	 * @returns Boolean true if the operation is successful, otherwise false.
	 * @param {String} name - The new name for this asset.
	 */
	rename(name) {};
	/**
	 * @returns Boolean true if a DAZ Studio file link to this asset is saved, otherwise false.
	 * @since 4.9.0.30
	 * @param {String} linkSavePath - The path of the file to save to.
	 * @attention Will overwrite and add correct extension if possible.
	 */
	saveDSLink(linkSavePath) {};
	/**
	 * @description Sets whether existence of this asset should be ignored.
	 */
	setIgnoreExists(onOff) {};
	/**
	 * @returns DzUri This asset expressed as a DzUri.
	 * @since 4.9.0.40
	 */
	toUri() {};
	/**
	 * @returns Boolean true if this asset is updated, otherwise false.
	 * @since 4.9.2.69
	 * @param {String} guid - The Globally Unique Identifier (GUID) for the product to update from. Leave empty to update using the current product if an association is already made.
	 */
	updateFromMetadata(guid = "") {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the image for this asset has changed.
	 * @signature `"assetImageChanged(DzAsset*)"`
	 * @event
	 */
	assetImageChanged(asset) {};

}
/**
 * An asset save filter for saving a file in the DSON format.
 */
class DzAssetFileOutFilter extends DzAssetIOFilter {

}
/**
 * Save filter classes save out a subset of scene settings such as poses, light sets, camera sets, etc. in the DSON format.
 * See Also:
 */
class DzAssetIOFilter extends DzFileIO {
	/**
	 * @description Saves to a file.
	 * @returns DzError DZ_NO_ERROR on success, otherwise an error code.
	 * @param filePath - The full path of the file to save to.
	 * @param {String} startingDir - The initial directory to start the save dialog in.
	 */
	doSave(filename, startingDir) {};
	/**
	 * @description Saves to a file.
	 * @returns DzError DZ_NO_ERROR on success, otherwise an error code.
	 * @param {DzFileIOSettings} options - The options for the save.
	 * @param filePath - The path of the file to save to.
	 * @param {String} startingDir - The initial directory to start the file browse.
	 */
	doSave(options, filename, startingDir) {};
	/**
	 * @returns DzUri The URI to use when referring to the given asset from a definition.
	 */
	getAssetDefinitionUri(base) {};
	/**
	 * @returns DzUri The URI to use when referring to the given asset from an instance.
	 */
	getAssetInstanceUri(base) {};
	/**
	 * @returns String The compatibility base of the saved file.
	 */
	getCompatiblityBase() {};
	/**
	 * @returns String The content type of the saved file.
	 */
	getContentType() {};
	/**
	 * @returns String The name of the filter.
	 */
	getDescription() {};
	/**
	 * @returns String The path of the saved file.
	 */
	getDoSavePath() {};
	/**
	 * @returns String The last path used to load/save files with the filter.
	 */
	getLoadSavePath() {};
	/**
	 * @returns String The default relative path for saving files with this filter.
	 */
	getStandardSaveRelativePath() {};
	/**
	 * @returns Boolean true if this filter saves support files, otherwise false.
	 */
	isSupportAssetFilter() {};
	/**
	 * @description Sets the path to use for loading/saving files with this filter.
	 * @param {String} path - The path to set.
	 */
	setLoadSavePath(path) {};

}
/**
 * Responsible for the management of the filters that load/save assets in the native DAZ Scene Object Notation (DSON) format.
 * There is only one instance of this manager in an application. This instance is created and owned by DzApp. Request the instance via DzApp.getAssetIOMgr().
 * See Also:
 */
class DzAssetIOMgr extends QObject {
	/**
	 * @description ENUM: If no nodes (or only the default camera) exist, this behaves as OpenNew. Otherwise, this behaves as MergeFile.
	 */
	DefaultMethod;
	/**
	 * @description ENUM: Resets the scene to its initial, clean state. All scene data is deleted and the undo stack is cleared.
	 */
	OpenNew;
	/**
	 * @description ENUM: Merges the file with any pre-existing elements in the scene.
	 */
	MergeFile;
	/**
	 * @returns DzAssetIOFilter The current save filter (if any), otherwise null.
	 * @since 4.15.0.16
	 */
	static currentSaveFilter() {};
	/**
	 * @returns Number The index of the asset filter with the given classname (if any), otherwise -1.
	 * @since 4.11.0.225
	 * @param {String} className - The classname of the asset filter to find.
	 */
	static findAssetFilterIndex(className) {};
	/**
	 * @description Deprecated
	 * @returns Number
	 */
	static findFilter(className) {};
	/**
	 * @returns QObject The object for the specified URI (if any), otherwise null.
	 * @since 4.9.4.111
	 * @param {DzUri} uri - The URI of an asset instance to find during file load.
	 */
	static findObjectInstance(uri) {};
	/**
	 * @returns DzAssetIOFilter A new instance of the i'th asset filter in the list (if valid), otherwise null.
	 * @since 4.11.0.225
	 * @param {Number} i - The index of the asset filter to get.
	 * @attention You are responsible for deleting the returned instance (if any).
	 */
	static getAssetFilter(i) {};
	/**
	 * @returns String The name of the i'th asset filter (if valid), otherwise an empty string.
	 * @since 4.11.0.225
	 * @param {Number} i - The index of the asset filter to get the name of.
	 */
	static getAssetFilterName(i) {};
	/**
	 * @description Deprecated
	 * @returns DzAssetIOFilter
	 */
	static getFilter(i) {};
	/**
	 * @description Deprecated
	 * @returns String
	 */
	static getFilterName(i) {};
	/**
	 * @returns Number The number of save filters currently supported.
	 * @since 4.11.0.225
	 */
	static getNumAssetFilters() {};
	/**
	 * @description Deprecated
	 * @returns Number
	 */
	static getNumFilters() {};
	/**
	 * @returns Boolean if data is currently being read, otherwise false.
	 * @since 4.15.0.16
	 */
	static isReading() {};
	/**
	 * @returns Boolean if data is currently being read or written, otherwise false.
	 * @since 4.15.0.16
	 */
	static isReadingOrWriting() {};
	/**
	 * @returns Boolean if data is currently being written, otherwise false.
	 * @since 4.15.0.16
	 */
	static isWriting() {};
	/**
	 * @description Loads an asset file.
	 * @returns DzError DZ_NO_ERROR if the file load was successful, otherwise an appropriate error code.
	 * @param {String} filename - The full name of the file to load.
	 * @param {DzOpenMethod} method - The method to use for loading.
	 * @param {DzFileLoadFilter} filter - The filter to use.
	 */
	doLoad(filename, method = DefaultMethod, filter = null) {};
	/**
	 * @description Save the scene contents to a file with the given asset filter. Prompts the user for a file to save to.
	 * @returns DzError DZ_NO_ERROR if the file save was successful, otherwise an appropriate error code.
	 * @param {Number} filterIndex - The index of the asset filter to use.
	 */
	doSave(filterIndex) {};
	/**
	 * @description Save the scene contents to a file with the given asset filter. Prompts the user for a file to save to.
	 * @returns DzError DZ_NO_ERROR if the file save was successful, otherwise an appropriate error code.
	 * @param {DzAssetIOFilter} filter - The filter to use.
	 * @param {DzFileIOSettings} options - The options to use.
	 * @param {Boolean} saveOnly - Whether to only save the file, or to also create an associated icon and assign metadata.
	 * @param {String} filename - The full name of the file to save to.
	 * @param {String} startingDir - The path of the directory to start the save dialog in.
	 * @param {String} category - The category to assign the saved file to.
	 */
	doSaveWithOptions(filter, options, saveOnly = false, filename = "", startingDir = "", category = "") {};
	/**
	 * @description Save the scene contents to a file. Prompts the user for a file to save to.
	 * @returns DzError DZ_NO_ERROR if the file save was successful, otherwise an appropriate error code.
	 */
	doSceneSaveAs() {};
	/**
	 * @returns DzAuthor If isReadingOrWriting() is false, an invalid DzAuthor. If isReading() is true, the contributor for the file being read. If isWriting() is true, the contributor for the file being written.
	 * @since 4.15.0.16
	 */
	getCurrentAssetContributor() {};
	/**
	 * @returns String If isReadingOrWriting() is false, an empty string. If isReading() is true, the asset identifier for the file being read. If isWriting() is true, the asset identifier for the file being written.
	 * @since 4.15.0.16
	 */
	getCurrentAssetId() {};
	/**
	 * @returns DzVersion If isReadingOrWriting() is false, an invalid DzVersion. If isReading() is true, the revision for the file being read. If isWriting() is true, the revision for the file being written.
	 * @since 4.15.0.16
	 */
	getCurrentAssetRevision() {};
	/**
	 * @returns String If isReadingOrWriting() is false, an empty string. If isReading() is true, the asset type for the file being read. If isWriting() is true, the asset type for the file being written.
	 * @since 4.15.0.16
	 */
	getCurrentAssetType() {};
	/**
	 * @returns Object If isReadingOrWriting() is false, an empty object. If isReading() is true, an object containing "file_version" and "asset_info" for the file being read. If isWriting() is true, an object containing "file_version" and "asset_info" for the file being written.
	 * @since 4.15.0.16
	 */
	getCurrentFileInfo() {};
	/**
	 * @returns String The full name of the file that is currently being read from or written to (if any), otherwise an empty string.
	 * @since 4.15.0.16
	 */
	getCurrentFilename() {};
	/**
	 * @returns DzVersion If isReadingOrWriting() is false, an invalid DzVersion. If isReading() is true, the "file_version" for the file being read. If isWriting() is true, the "file_version" for the file being written.
	 * @since 4.15.0.16
	 */
	getCurrentFileVersion() {};
	/**
	 * @returns String The default path for the DSON assets cache.
	 */
	getDefaultDSONAssetCachePath() {};
	/**
	 * @returns String The path that the DSON assets cache resides in.
	 */
	getDSONAssetCachePath() {};
	/**
	 * @returns DzAuthor The "asset_info" contributor embedded in an asset file (if any), otherwise an invalid DzAuthor.
	 * @since 4.15.0.16
	 * @param {String} filename - The full name of the file to retrieve the information from.
	 */
	getFileAssetContributor(filename) {};
	/**
	 * @returns String The "asset_info" type embedded in an asset file (if any), otherwise an empty string.
	 * @since 4.15.0.16
	 * @param {String} filename - The full name of the file to retrieve the information from.
	 */
	getFileAssetType(filename) {};
	/**
	 * @returns Object An object containing the "file_version" and "asset_info" embedded in the specified asset file (if any), otherwise an empty object. The "asset_info" only contains "type" and "contributor" values - it does not include the "id", "revision", or "modified" values.
	 * @since 4.15.0.16
	 * @param {String} filename - The full name of the file to retrieve the information from.
	 */
	getFileInfo(filename) {};
	/**
	 * @returns DzVersion The "file_version" embedded in an asset file (if any), otherwise an invalid DzVersion.
	 * @since 4.15.0.16
	 * @param {String} filename - The full name of the file to retrieve the information from.
	 */
	getFileVersion(filename) {};
	/**
	 * @returns String The path of the last directory that files were loaded from.
	 */
	getLoadPath() {};
	/**
	 * @returns String The path of the last directory that files were saved to.
	 */
	getSavePath() {};
	/**
	 * @description Loads an asset from URI.
	 * @returns DzError DZ_NO_ERROR if the file load was successful, otherwise an appropriate error code.
	 * @param {DzUri} fileUri - The URI of the file to load.
	 * @param {DzOpenMethod} method - The method to use for loading.
	 * @param {DzFileLoadFilter} filter - The filter to use.
	 */
	loadFromUri(fileUri, method = DefaultMethod, filter = null) {};
	/**
	 * @description Sets the path for the DSON asset cache.
	 * @param {String} cacheFullPath - The path to set.
	 */
	setDSONAssetCachePath(cacheFullPath) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when an asset has been loaded.
	 * @signature `"assetImported()"`
	 * @event
	 */
	assetImported() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when an asset load is starting.
	 * @signature `"assetImportStarting()"`
	 * @event
	 */
	assetImportStarting() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when an asset load error occures.
	 * @signature `"assetLoadError(const QString&)"`
	 * @event
	 */
	assetLoadError(filename) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when an asset load is finished.
	 * @signature `"assetLoadFinished(const QString&)"`
	 * @event
	 */
	assetLoadFinished(filename) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when an asset load has started.
	 * @signature `"assetLoadStarted(const QString&)"`
	 * @event
	 */
	assetLoadStarted(filename) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when an asset has been saved.
	 * @signature `"assetSaved()"`
	 * @event
	 */
	assetSaved() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when an asset save error occurs.
	 * @signature `"assetSaveError(const QString&)"`
	 * @event
	 */
	assetSaveError(filename) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when an asset save is finished.
	 * @signature `"assetSaveFinished(const QString&)"`
	 * @event
	 */
	assetSaveFinished(filename) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when an asset save has started.
	 * @signature `"assetSaveStarted(const QString&)"`
	 * @event
	 */
	assetSaveStarted(filename) {};

}
/**
 * Responsible for the management of database records associated with "content" (digital assets).
 * There is only one instance of this manager in an application. This instance is created and owned by DzApp. Request the instance via DzApp.getAssetMgr().
 * See Also:
 */
class DzAssetMgr extends DzBase {
	/**
	 * @description ENUM: No options
	 */
	None;
	/**
	 * @description ENUM: A whole word search. Only works with file system based searches.
	 */
	WholeWord;
	/**
	 * @description ENUM: A Regular Expression search. Only works with file system based searches.
	 */
	RegExp;
	/**
	 * @description ENUM: Include native scene files (*.duf, *.dsf, *.daz) in the search.
	 */
	NativeScenes;
	/**
	 * @description ENUM: Include native script files (*.ds, *.dsa, *.dsb, *.dse) in the search.
	 */
	NativeScripts;
	/**
	 * @description ENUM: Include Poser Character files (*.cr2, *.crz) in the search.
	 */
	PoserFigures;
	/**
	 * @description ENUM: Include Poser Pose files (*.pz2, *.p2z) in the search.
	 */
	PoserPoses;
	/**
	 * @description ENUM: Include Poser Prop files (*.pp2, *.ppz) in the search.
	 */
	PoserProps;
	/**
	 * @description ENUM: Include Poser Hair files (*.hr2, *.hrz) in the search.
	 */
	PoserHair;
	/**
	 * @description ENUM: Include Poser Face (Expression) files (*.fc2,*.fcz) in the search.
	 */
	PoserFaces;
	/**
	 * @description ENUM: Include Poser Light files (*.lt2, *.ltz) in the search.
	 */
	PoserLights;
	/**
	 * @description ENUM: Include Poser Camera files (*.cm2, *.cmz) in the search.
	 */
	PoserCameras;
	/**
	 * @description ENUM: Include Poser Hand files (*.hd2, *.hdz) in the search.
	 */
	PoserHands;
	/**
	 * @description ENUM: Include Poser Material Collection files (*.mc6, *.mcz) in the search.
	 */
	PoserMaterials;
	/**
	 * @description ENUM: Include Poser Scene files (*.pz3, *.pzz) in the search.
	 */
	PoserScenes;
	/**
	 * @description ENUM: Include general import files in the search.
	 */
	ImportFiles;
	/**
	 * @description ENUM: Include all native files (*.duf, *.dsf, *.daz, *.ds, *.dsa, *.dsb, *.dse) in the search.
	 */
	AllNativeFiles;
	/**
	 * @description ENUM: Mask for no native files in the search.
	 */
	NoNativeFilesMask;
	/**
	 * @description ENUM: Include all Poser files in the search.
	 */
	AllPoserFiles;
	/**
	 * @description ENUM: Mask for no Poser files in the search.
	 */
	NoPoserFilesMask;
	/**
	 * @description ENUM: Search through all files.
	 */
	AllFiles;
	/**
	 * @description ENUM: Same as AllFiles.
	 */
	DefaultOptions;
	/**
	 * @description ENUM: Waits for all active clients to disconnect and any online backup to finish. If the service is in hot standby, recovery and streaming replication will be terminated once all clients have disconnected.
	 */
	SM_Smart;
	/**
	 * @description ENUM: Does not wait for clients to disconnect and terminates an online backup in progress. All active transactions are rolled back and clients are forcibly disconnected, then the service is shut down.
	 */
	SM_Fast;
	/**
	 * @description ENUM: Aborts all service processes immediately, without a clean shutdown.
	 */
	SM_Immediate;
	/**
	 * @returns String An escaped version of searchTerm
	 * @param {String} searchTerm - The search term to be escaped.
	 */
	static escapeSearchTerm(searchTerm) {};
	/**
	 * @returns String A string representing the portion of categoryPaths that is common.
	 * @since 4.9.2.68
	 * @param {Array} categoryPaths - The list of category paths to find a common path in. This can be a list of strings, or a list of lists of strings.
	 * @param {Boolean} flatten - If true, the categories are processed as if they are a single list. If false (default), the deepest path common to all lists will be chosen. In either case, non-default categorization is preferred over default categorization.
	 */
	static findCommonBaseCategoryPath(categoryPaths, flatten = false) {};
	/**
	 * @returns String The asset URI for node, or an empty string if node is null.
	 * @param {DzNode} node - The node to get the asset URI for.
	 */
	static getAssetUriForNode(node) {};
	/**
	 * @returns String An identifier for the top level categories container.
	 */
	static getCategoriesID() {};
	/**
	 * @returns String A slash ("/") delimited string version of the node's compatibility base path (if any), otherwise an empty string.
	 * @param {DzNode} node - The node to get compatibility base for.
	 */
	static getCompatibilityBasePathForNode(node) {};
	/**
	 * @returns String An identifier for the top level compatibility bases container.
	 * @since 4.11.0.93
	 */
	static getCompatibilityBasesID() {};
	/**
	 * @returns String An identifier for the top level import formats container.
	 */
	static getImportDirID() {};
	/**
	 * @returns String An identifier for the top level Poser formats container.
	 */
	static getPoserDirID() {};
	/**
	 * @returns Array The identifier for the virtual folder container within the top level Poser formats container.
	 * @since 4.9.2.68
	 */
	static getPoserVirtualDirID() {};
	/**
	 * @description Prompts the user for a valid product name.
	 * @returns String A string that represents a valid product name (if allowEmpty is false - default), otherwise an empty string.
	 * @since 4.12.1.100
	 * @param {String} name - The product name (if any) to use if a product with the same name does not already exist in the database. An empty string, or a non-unique name, will cause the user to be prompted for a unique name.
	 * @param {Array} choices - A list of pre-defined choices (if any) to provide the user.
	 * @param {Boolean} allowEmpty - If true, an empty value is considered acceptable.
	 */
	static getProductName(name, choices = [], allowEmpty = false) {};
	/**
	 * @returns String An identifier for the top level products container.
	 */
	static getProductsID() {};
	/**
	 * @returns String A string path/search combination or empty string if search is not in path.
	 * @param {String} path - The path to the file/folder that real, on disk, casing is desired for.
	 * @param {String} search - A file/folder in the path to get the on disk casing for.
	 */
	static getRealPathCasing(path, search) {};
	/**
	 * @returns String The relative metadata file path.
	 * @since 4.9.4.31
	 * @param {String} store - The store ID for the product.
	 * @param {String} token - The token for the product.
	 * @param {String} title - The title of the product.
	 * @param {String} extension - The extension of the meta file.
	 */
	static getRelativeProductMetafilePath(store, token, title, extension = "dsx") {};
	/**
	 * @returns Array A list of the folder names that are considered special, and thus handled in specific ways, in a Poser runtime.
	 */
	static getSpecialPoserFolders() {};
	/**
	 * @returns String An identifier for the top level DAZ Studio formats container.
	 */
	static getStudioDirID() {};
	/**
	 * @returns Array A list of the folder names excluded when building the native user-facing folder structure.
	 */
	static getStudioExcludes() {};
	/**
	 * @returns Array The identifier for the virtual folder container within the top level DAZ Studio formats container.
	 * @since 4.9.2.68
	 */
	static getStudioVirtualDirID() {};
	/**
	 * @returns String A normalized version of type.
	 * @param {String} type - The path/type to be normalized.
	 * @param {Boolean} relative - Whether or not this is a relative (or absolute) path.
	 */
	static normalizePath(type, relative = true) {};
	/**
	 * @description Saves user owned metadata to an XML file (or a series of XML files).
	 * @returns DzError DZ_NO_ERROR on success, otherwise an error code.
	 * @param {String} dirPath - The path to save user metadata files in.
	 * @param {String} filePrefix - The prefix for the filename sequence.
	 */
	static saveUserDBData(dirPath, filePrefix) {};
	/**
	 * @description Sets the compatibility base for a URI.
	 * @returns Boolean true if the compatibility base is set, otherwise false.
	 * @since 4.11.0.183
	 * @param {String} uri - The asset URI to set the compatibility base for.
	 * @param {Number} id - The 64-bit integer used to identify the compatibility base.
	 * @param {Boolean} markAsVendor - If true, the compatibility base is marked as being owned by a vendor.
	 */
	static setCompatibilityBaseID(uri, id, markAsVendor) {};
	/**
	 * @description Sets the compatibility base for a URI.
	 * @returns Boolean true if the compatibility base is set, otherwise false.
	 * @since 4.11.0.183
	 * @param {String} uri - The asset URI to set the compatibility base for.
	 * @param {String} compatibilityBasePath - The slash ("/") delimited path of the compatibility base to set.
	 * @param {Boolean} markAsVendor - If true, the compatibility base is marked as being owned by a vendor.
	 * @param {Boolean} create - If true, creates the compatibility base if it does not already exist.
	 */
	static setCompatibilityBasePath(uri, compatibility, markAsVendor, create = false) {};
	/**
	 * @description Sets the metadata associated with a file.
	 * @since 4.9.0.17
	 * @param {String} filepath - The path of the file to set the metadata on.
	 * @param {String} contentType - The content type to set.
	 * @param {String} compatibleWith - The compatibility base the asset is an add-on for.
	 * @param {String} category - The category to put the asset in.
	 * @param {DzNode} assetNode - The node to get the compatibility base from.
	 * @param {String} compatibilityBase - The compatibility base to set; for add-ons to target.
	 */
	static setFileMetadata(filepath, contentType, compatibleWith, category, assetNode = null, compatibilityBase = "") {};
	/**
	 * @returns Boolean true if the currently connected Content Management Service (CMS) is of the type that can be started and stopped, otherwise false.
	 */
	canStartAndStopCMS() {};
	/**
	 * @description Checks for new metadata scripts within the RunOnce directories.
	 */
	checkforNewMetadataScripts() {};
	/**
	 * @description Removes all groups from all assets.
	 * @param {Boolean} notify - If true, causes product and category containers to update.
	 */
	clearAllGroupIDs(notify = true) {};
	/**
	 * @description Clears the metadata queue.
	 */
	clearDBMetaFileQueue() {};
	/**
	 * @description Creates a compatibility base.
	 * @returns Number An integer used to identify base.
	 * @param {String} base - The compatibility base to create.
	 */
	createCompatibilityBase(base) {};
	/**
	 * @description Creates a new product.
	 * @returns DzProductAssetContainer The product named name, from store storeID, with the token token. If a product with the storeID and token already exists, a new product will not be created and the existing product will be returned instead.
	 * @since 4.9.3.39
	 * @param {String} name - The name for the product - used if a product with the storeID and token specified does not already exist in the database to name the product.
	 * @param {String} storeID - The ID of the store for the product. If the store does not exist in the database or this argument is an empty string (default), the "LOCAL USER" store will be used.
	 * @param {String} token - The token (i.e., SKU) used to identify the product in the storeID store.
	 */
	createProduct(name, storeID = "", token = "") {};
	/**
	 * @description Creates a new product from a list of assets.
	 * @returns DzProductAssetContainer
	 * @since 4.9.3.41
	 * @param {Array} assets - The list of assets to create the product from.
	 * @param {String} name - The name for the product. If empty (default), the user will be prompted to provide a name.
	 */
	createProductFromAssets(assets, name = "") {};
	/**
	 * @description Creates a new product from container and its children.
	 * @returns DzProductAssetContainer
	 * @since 4.9.3.39
	 * @param {DzAbstractAssetContainer} container - The asset container to create the product from.
	 * @param {String} name - The name for the product. If empty (default), the user will be prompted to provide a name.
	 */
	createProductFromContainer(container, name = "") {};
	/**
	 * @description Attempts to create a store in the database.
	 * @returns Boolean true if the store is successfully created, otherwise false.
	 * @param {String} storeID - The identifier for the store.
	 * @param {String} token - The value used within url to be replaced by a product's token.
	 * @param {String} url - The URL for the store.
	 * @attention The "DAZ 3D" and "LOCAL USER" storeIDs are reserved. Attempting to create a store with either ID will fail immediately and return a value of false.
	 */
	createStore(storeID, token, url) {};
	/**
	 * @description Creates a content type.
	 * @returns Number An integer used to identify type.
	 * @param {String} type - The content type to create.
	 * @param {String} defaultOpen - If true, assets that the type is assigned to will be opened by default; the contents of the scene will be cleared prior to loading the asset. If false , assets that the type is assigned to will be merged by default; the asset will be added to the existing scene.
	 */
	createType(type, defaultLoad) {};
	/**
	 * @description Causes the category identified by idPath to update.
	 * @param {Array} idPath - The id path of the category to update.
	 */
	emitCategoryChanged(idPath) {};
	/**
	 * @returns String If fileName can be found, the physical path of the asset on disk, otherwise an empty string.
	 * @param {String} fileName - The short name of the file to find the asset path for.
	 */
	findAssetPathFromShortFilename(fileName) {};
	/**
	 * @returns Array A list of assets that relativePath refers to.
	 * @since 4.9.2.69
	 * @param {String} relativePath - The relative path of a file to find assets for.
	 * @param {Boolean} userFacing - Whether or not the file is user-facing.
	 * @param {Boolean} installed - Whether or not the file is installed.
	 */
	findAssetsForFile(relativePath, userFacing, installed) {};
	/**
	 * @returns Number The id used to identify audience.
	 */
	findAudienceID(audience) {};
	/**
	 * @description Attempts to find a compatibility base, and potentially create it if it does not already exist.
	 * @returns Number An integer used to identify base.
	 * @param {Boolean} base - The compatibility base to find (or create).
	 * @param {Boolean} create - If true, the compatibility base is created if it cannot be found.
	 */
	findCompatibilityBaseID(base, create = true) {};
	/**
	 * @returns DzProductAssetContainer The product with the globally unique identifier guid, otherwise NULL.
	 * @since 4.9.2.69
	 * @param {String} guid - The Globally Unique Identifier (GUID) of the product to find.
	 */
	findProductByGuid(guid) {};
	/**
	 * @returns DzProductAssetContainer The product from store storeID with the token token, otherwise NULL.
	 * @since 4.9.3.39
	 * @param {String} storeID - The identifier of the store for the product.
	 * @param {String} token - The token (i.e., SKU) used to identify the product in the store storeID.
	 */
	findProductByStoreToken(storeID, token) {};
	/**
	 * @returns Array A list of products (if any) that are named name.
	 * @since 4.9.3.39
	 * @param {String} name - The name of the products to find.
	 */
	findProductsByName(name) {};
	/**
	 * @returns Array A list of products that contain relativePath in their respective list of assets.
	 * @since 4.8.1.73
	 * @param {String} relativePath - The relative path of a file to find products that contain it.
	 */
	findProductsForFile(relativePath) {};
	/**
	 * @description Attempts to find the identifier used to identify a content type.
	 * @returns Number An integer used to identify type.
	 * @param {String} type - The content type to find.
	 * @param {Boolean} create - If true, the content type is created if it cannot be found.
	 * @param {String} defaultOpen - If true, assets that the type is assigned to will be opened by default; the contents of the scene will be cleared prior to loading the asset. If false , assets that the type is assigned to will be merged by default; the asset will be added to the existing scene.
	 */
	findTypeID(type, create = false, defaultLoad = false) {};
	/**
	 * @returns String The audience identified by id.
	 * @param {Number} id - The unsigned 32-bit integer used to identify the audience.
	 */
	getAudience(id) {};
	/**
	 * @returns Array The list of available audiences.
	 */
	getAudiences() {};
	/**
	 * @returns DzCategoryAssetContainer A top-level container with child containers that match the hierarchy of categories in the content database.
	 */
	getCategories() {};
	/**
	 * @returns String The full slash ("/") delimited path of the category (if any), otherwise an empty string.
	 * @since 4.9.3.11
	 * @param {Number} id - The 64-bit integer used to identify the category.
	 */
	getCategoryPath(id) {};
	/**
	 * @returns Object A JSON object consisting of options for the currently connected Content Management Service (CMS).
	 */
	getCMSOptions() {};
	/**
	 * @returns String The compatibility base identified by id.
	 * @param {Number} id - The integer used to identify the compatibility base.
	 */
	getCompatibilityBase(id) {};
	/**
	 * @returns DzCompatibilityBaseAssetContainer A top-level container (if the content database is active) with child containers that match the hierarchy of compatibility bases in the content database, otherwise NULL.
	 * @since 4.11.0.94
	 * @param {Boolean} includeFilters - If true (default), child containers for filters (filter) will be included.
	 */
	getCompatibilityBases(includeFilters = true) {};
	/**
	 * @returns DzTopLevelAssetContainer A top-level container with all of the mapped native content directories.
	 */
	getContentDirs() {};
	/**
	 * @returns String The Data Source Name (DSN) -i.e. "connection string"- for the PostgreSQL server if the server version is valid, otherwise an empty string.
	 * @since 4.9.0.17
	 */
	getDatabaseDsn() {};
	/**
	 * @returns String The path on disk where database files are located; for backup purposes.
	 */
	getDatabaseFilePath() {};
	/**
	 * @returns Array A list of metadata files queued for processing.
	 */
	getDBMetaFileQueue() {};
	/**
	 * @returns String The full path of the first category that the file at assetPath is assigned to.
	 * @param {String} assetPath - The path of the asset to find the first category for.
	 * @param {String} preferredCategory - The path of the category preferred if it exists and the asset at assetPath is assigned to it.
	 * @param {Boolean} installed - If true, assetPath is only tested against files that are installed. If false , assetPath is only tested against files that are not installed. (since 4.11.0.88)
	 */
	getFirstCategory(assetPath, preferredCategory, installed = true) {};
	/**
	 * @returns Boolean true if new products should be assigned to the "New" group, otherwise false.
	 * @since 4.9.0.23
	 */
	getGroupNewProductsAsNew() {};
	/**
	 * @returns DzTopLevelAssetContainer A top-level container with all of the mapped import content directories.
	 */
	getImportDirs() {};
	/**
	 * @returns Number The maximum number of items returned by a file search.
	 * @since 4.9.0.15
	 */
	getMaxFileSearchResultSize() {};
	/**
	 * @returns Number The maximum number of items to show per page.
	 */
	getNumMaxItemsPerPage() {};
	/**
	 * @returns DzTopLevelAssetContainer A top-level container with all of the mapped Poser directories.
	 */
	getPoserDirs() {};
	/**
	 * @returns DzTopLevelAssetContainer A top-level container with child containers for intermediate alpha-numeric organization of products by name. Each intermediate container then has its respective children for the products in the content database.
	 */
	getProducts() {};
	/**
	 * @description Attempts to shorten absolutePath to a list of paths that are relative to one of the mapped content directories.
	 * @returns Array A list of relative paths to the file if one can be made, otherwise and empty list
	 * @param {String} absolutePath - The path to make relative.
	 * @param {Boolean} useImportFolders - If true, the mapped import folders will also be searched.
	 */
	getRelativePaths(absolutePath, useImportFolders) {};
	/**
	 * @returns Array A list of root category paths.
	 */
	getRootCategoryStrings() {};
	/**
	 * @returns Boolean true if hidden vendor categorizations are shown, otherwise false.
	 * @since 4.9.3.4
	 */
	getShowHiddenVendorCategorization() {};
	/**
	 * @returns Array A list of store identifiers.
	 */
	getStoresIDs() {};
	/**
	 * @returns String The token used in the URL for the store with the given storeID, to be replaced by a product's token.
	 */
	getStoreToken(storeID) {};
	/**
	 * @returns String The URL for the store with the given storeID.
	 */
	getStoreUrl(storeID) {};
	/**
	 * @returns String The content type identified by id.
	 * @param {Number} id - The integer used to identify the content type.
	 */
	getType(id) {};
	/**
	 * @description Performs a database lookup on a user-facing content file to get its content type.
	 * @returns String The content type of the file if the file is in the content database and is user-facing, otherwise an empty string.
	 * @param {String} path - The path of the file to get the content type for.
	 */
	getTypeForContentFile(path) {};
	/**
	 * @description Checks the given node for content type in its presentation (if any), falls back to a source file data item and performs a content database lookup on the path it specifies (if any), and finally falls back to the content file path of the node (if any) to find its content type.
	 * @returns String The content type for the node (if any), otherwise an empty string.
	 * @param {DzNode} node - The node in the scene to get the content type of.
	 */
	getTypeForNode(node) {};
	/**
	 * @returns Array A list of hierarchical, slash ("/") delimited, content types
	 */
	getTypes() {};
	/**
	 * @returns Boolean true if the PostgreSQL server version is valid and the DSN is non-empty, otherwise false.
	 * @since 4.9.0.17
	 */
	haveDatabase() {};
	/**
	 * @description Causes metadata files at absoluteProductPaths to be imported.
	 * @returns Array
	 * @param {Array} absoluteProductPaths - The list of absolute paths to import product metadata from.
	 * @param {Boolean} runSilent - If true, the progress dialog will not be shown.
	 * @param {Boolean} markAsVendor - If true, the data is considered vendor owned.
	 */
	importMetadataFiles(absoluteProductPaths, runSilent = false, markAsVendor = false) {};
	/**
	 * @description Installs the assets specified if a product they belong to can be found.
	 * @returns Boolean A JSON object consisting of a list of any products that were found to contain the missing files, a list of the files that were not found in any product, and a list of the products that were selected for installation.
	 * @since 4.11.0.116
	 * @param {Array} filenames - The list of relative file names to install. It is the developer's responsibility to verify that the file names passed in are not already in a mapped content directory.
	 * @param {Boolean} noPrompt - If true, installation of any product(s) found begins immediately without prompting the user; this does not prevent progress from being reported. The default is false , which prompts the user and waits for a response.
	 * @param {String} productMsg - The message to display above the installable products list. If this is an empty string (default), a default string will be used.
	 * @param {String} fileMsg - The message to display above the unknown files list. If this is an empty string (default), a default string will be used.
	 */
	installMissingAssets(filenames, noPrompt = false, productMsg = "", fileMsg = "") {};
	/**
	 * @returns Boolean true if type is of the base type of Clothing, otherwise false.
	 * @param {String} type - The content type to test.
	 */
	isClothingType(type) {};
	/**
	 * @returns Boolean true if the Content Management Service (CMS) is currently connected, otherwise false.
	 */
	isConnectedToCMS() {};
	/**
	 * @returns Boolean true if type is of the base type of Figure, otherwise false.
	 * @param {String} type - The content type to test.
	 */
	isFigureType(type) {};
	/**
	 * @returns Boolean true if type is of a following type, otherwise false.
	 * @param {String} type - The content type to test.
	 */
	isFollowingType(type) {};
	/**
	 * @returns Boolean true if type is of the base type of Hair, otherwise false.
	 * @param {String} type - The content type to test.
	 */
	isHairType(type) {};
	/**
	 * @returns Boolean true if type is of a type that needs a base figure, otherwise false.
	 * @param {String} type - The content type to test.
	 */
	isNeedsBaseFigureType(type) {};
	/**
	 * @returns Boolean true if type is a Preset for a Figure, otherwise false.
	 * @param {String} type - The content type to test.
	 */
	isPresetForFigureType(type) {};
	/**
	 * @returns Boolean true if type is of the base type of Preset, otherwise false.
	 * @param {String} type - The content type to test.
	 */
	isPresetType(type) {};
	/**
	 * @returns Boolean true if type is of the base type of Prop, otherwise false.
	 * @param {String} type - The content type to test.
	 */
	isPropType(type) {};
	/**
	 * @returns Boolean true if type is of a replaceable type, otherwise false.
	 * @param {String} type - The content type to test.
	 */
	isReplaceableType(type) {};
	/**
	 * @returns Boolean true if the connected PostgreSQL database is currently being reset, otherwise false.
	 * @since 4.9.0.17
	 */
	isResettingDatabase() {};
	/**
	 * @returns Boolean true if the database is currently synchronizing, otherwise false.
	 */
	isSynchronizing() {};
	/**
	 * @description Signals that categories need to be updated.
	 */
	markCategoriesChanged() {};
	/**
	 * @description Signals that products need to be updated.
	 */
	markProductsChanged() {};
	/**
	 * @description Causes the metadata file at productRelativePath to be processed and category containers to update.
	 * @returns Array
	 * @param {String} productRelativePath - The relative product path to import metadata from.
	 * @param {Boolean} runSilent - If true, the progress dialog will not be shown.
	 * @param {Boolean} markAsVendor - If true, the data is considered vendor owned.
	 * @param {Boolean} groupAsNew - If true, the product/assets are grouped as "New".
	 */
	processDBMetaFile(productRelativePath, runSilent = false, markAsVendor = false, groupAsNew = true) {};
	/**
	 * @description Causes the metadata file at productRelativePath to be processed, without causing category containers to update.
	 * @returns Array
	 * @param {String} productRelativePath - The relative product path to import metadata from.
	 * @param {Boolean} runSilent - If true, the progress dialog will not be shown.
	 * @param {Boolean} markAsVendor - If true, the data is considered vendor owned.
	 * @param {Boolean} groupAsNew - If true, the assets are grouped as "New".
	 */
	processDBMetaFileNoEmit(productRelativePath, runSilent = false, markAsVendor = false, groupAsNew = true) {};
	/**
	 * @description If metadata files are queued, causes the metadata import dialog to be displayed and allows the user to select which products to process metadata for, then starts the import process on the selected products.
	 */
	processDBMetaFileQueue() {};
	/**
	 * @description Adds the file at productRelativePath to the metadata queue.
	 */
	queueDBMetaFile(productRelativePath) {};
	/**
	 * @description Causes the internal list of root categories to be rebuilt.
	 */
	refreshCategoryRoots() {};
	/**
	 * @description Causes the internal list of stores to be rebuilt.
	 */
	refreshStores() {};
	/**
	 * @description Causes the internal list of content types to be rebuilt
	 */
	refreshTypes() {};
	/**
	 * @description Causes all *.dsx metadata files in the "./Runtime/Support" folder of each mapped native and Poser content directory to be queued, and then imported.
	 */
	reimportDBMetaFiles() {};
	/**
	 * @description Removes assets in list that have been orphaned (no longer exist) from the database.
	 * @since 4.9.0.17
	 * @param {Array} list - The list of DzAsset to check whether the files still exist.
	 */
	removeOrphanedAssetReferences(list) {};
	/**
	 * @description Attempts to remove a store from the database.
	 * @returns Boolean true if the store is successfully removed, otherwise false.
	 * @since 4.9.1.24
	 * @param {String} storeID - The identifier for the store to remove.
	 * @attention The "DAZ 3D" and "LOCAL USER" storeIDs are reserved. Attempting to remove a store with either ID will fail immediately and return a value of false.
	 */
	removeStore(storeID) {};
	/**
	 * @description Triggers the connected PostgreSQL server to reset (delete) the current database and re-establish the default content types, compatibility bases, and categories.
	 * @since 4.9.0.17
	 * @attention Stops all running searches and logs the current user out, if needed.
	 */
	resetDatabase() {};
	/**
	 * @description Performs a user-facing file scan, ultimately mapping any directories found to contain compatible content.
	 * @param {SearchOptions} options - A bitwise OR of the options to use for filtering the file scan.
	 * @param {Boolean} assignToGroup - If true, groups any found files as "New".
	 * @param {Boolean} addToCategory - If true, found files are assigned to the "Scan Results" category.
	 * @param {Boolean} onlyNewToCategory - If true, only "new" files are assigned to the "Scan Results" category.
	 */
	scanFiles(options, assignToGroup, addToCategory, onlyNewToCategory) {};
	/**
	 * @description Performs a user-facing file search on the mapped content directories.
	 * @returns DzSearchContainer A container consisting of DzAsset instances for any files found during the search.
	 * @param {String} filename - The name of the file to search for.
	 * @param {SearchOptions} options - A bitwise OR of the options to use for filtering the results.
	 */
	searchFiles(filename, options) {};
	/**
	 * @description Performs a user-facing asset search on the content database, where the results are confined to those that indicate they are compatible with the compatibility base of the specified asset.
	 * @returns DzSearchContainer A container consisting of any DzAsset instances found during the search.
	 * @since 4.9.0.32
	 * @param {DzAsset} asset - The context asset; the asset to find addons for.
	 * @param {String} filterText - The text to use for filtering the results.
	 * @param {Array} categories - A list of category paths to use for filtering the results.
	 * @param {Number} sorting - The sorting filter index to use for ordering the results.
	 * 
	 *  0 = None,
	 * 
	 *  1 = Name,
	 * 
	 *  2 = Date Purchased,
	 * 
	 *  3 = Date Installed,
	 * 
	 *  4 = Date Created,
	 * 
	 *  5 = Release Date,
	 * 
	 *  6 = Last Update,
	 * 
	 *  7 = Group ID,
	 * 
	 *  8 = Product ID (SKU),
	 * 
	 *  For Descending add 0x80000000 to the value
	 */
	searchForAssetAddOns(asset, filterText, categories, sorting) {};
	/**
	 * @description Performs a user-facing asset search on the content database.
	 * @returns DzSearchContainer A container consisting of any DzAsset instances found during the search.
	 * @since 4.9.0.32
	 * @param {String} filterText - The text to use for filtering the results.
	 * @param {Array} categories - A list of category paths to use for filtering the results.
	 * @param {Array} compatibilityBases - A list of compatibility bases to use for filtering the results.
	 * @param {Array} contentTypes - A list of content types to use for filtering the results.
	 * @param {Number} sorting - The sorting filter index to use for ordering the results.
	 * 
	 *  0 = None,
	 * 
	 *  1 = Name,
	 * 
	 *  2 = Date Purchased,
	 * 
	 *  3 = Date Installed,
	 * 
	 *  4 = Date Created,
	 * 
	 *  5 = Release Date,
	 * 
	 *  6 = Last Update,
	 * 
	 *  7 = Group ID,
	 * 
	 *  8 = Product ID (SKU),
	 * 
	 *  For Descending add 0x80000000 to the value
	 */
	searchForAssets(filterText, categories, compatibilityBases, contentTypes, sorting) {};
	/**
	 * @description Performs a user-facing asset search on the content database.
	 * @returns DzSearchContainer A container consisting of any DzAsset instances found during the search.
	 * @since 4.9.0.32
	 * @param {String} keywords - The keywords to use for filtering the results.
	 * @param {SearchOptions} options - A bitwise OR of the options to use for filtering the results.
	 * @param {Number} sorting - The sorting filter index to use for ordering the results.
	 * 
	 *  0 = None,
	 * 
	 *  1 = Name,
	 * 
	 *  2 = Date Purchased,
	 * 
	 *  3 = Date Installed,
	 * 
	 *  4 = Date Created,
	 * 
	 *  5 = Release Date,
	 * 
	 *  6 = Last Update,
	 * 
	 *  7 = Group ID,
	 * 
	 *  8 = Product ID (SKU),
	 * 
	 *  For Descending add 0x80000000 to the value
	 */
	searchForAssetsByKeywords(keywords, options, sorting) {};
	/**
	 * @returns DzSearchContainer A search container containing the assets matching the criteria specified.
	 * @since 4.9.1.17
	 * @param {String} categoryPath - The full path of the category to search for assets.
	 * @param {Boolean} userFacing - Whether or not to limit the search to user-facing assets. (since 4.9.3.56)
	 * @param {Boolean} installed - Whether or not to limit the search to installed assets. (since 4.9.3.56)
	 */
	searchForAssetsInCategory(categoryPath, userFacing = true, installed = true) {};
	/**
	 * @description Performs a user-facing asset search on the content database, where the results are confined to those that indicate they are the compatibility base of the specified asset.
	 * @returns DzSearchContainer A container consisting of any DzAsset instances found during the search.
	 * @since 4.9.0.32
	 * @param {DzAsset} asset - The context asset; the asset to find targets for.
	 * @param {String} filterText - The text to use for filtering the results.
	 * @param {Array} categories - A list of category paths to use for filtering the results.
	 * @param {Number} sorting - The sorting filter index to use for ordering the results.
	 * 
	 *  0 = None,
	 * 
	 *  1 = Name,
	 * 
	 *  2 = Date Purchased,
	 * 
	 *  3 = Date Installed,
	 * 
	 *  4 = Date Created,
	 * 
	 *  5 = Release Date,
	 * 
	 *  6 = Last Update,
	 * 
	 *  7 = Group ID,
	 * 
	 *  8 = Product ID (SKU),
	 * 
	 *  For Descending add 0x80000000 to the value
	 */
	searchForAssetTargets(asset, filterText, categories, sorting) {};
	/**
	 * @description Performs a user-facing asset search on the content database, where the results are confined to a specified product.
	 * @returns DzSearchContainer A container consisting of any DzAsset instances found during the search.
	 * @since 4.9.0.32
	 * @param {DzProductAssetContainer} product - The context product; the product to filter results by.
	 * @param {String} filterText - The text to use for filtering the results.
	 * @param {Array} categories - A list of category paths to use for filtering the results.
	 * @param {Array} compatibilityBases - A list of compatibility bases to use for filtering the results.
	 * @param {Array} contentTypes - A list of content types to use for filtering the results.
	 * @param {Number} sorting - The sorting filter index to use for ordering the results.
	 * 
	 *  0 = None,
	 * 
	 *  1 = Name,
	 * 
	 *  2 = Date Purchased,
	 * 
	 *  3 = Date Installed,
	 * 
	 *  4 = Date Created,
	 * 
	 *  5 = Release Date,
	 * 
	 *  6 = Last Update,
	 * 
	 *  7 = Group ID,
	 * 
	 *  8 = Product ID (SKU),
	 * 
	 *  For Descending add 0x80000000 to the value
	 */
	searchForProductAssets(product, filterText, categories, compatibilityBases, contentTypes, sorting) {};
	/**
	 * @returns DzProductHolderContainer A container consisting of any DzProductAssetContainer instances found during the search.
	 * @since 4.9.0.32
	 * @param {String} filterText - The text to use for filtering the results.
	 * @param {Array} categories - A list of category paths to use for filtering the results.
	 * @param {Array} compatibilityBases - A list of compatibility bases to use for filtering the results.
	 * @param {Array} contentTypes - A list of content types to use for filtering the results.
	 * @param {Number} installStateFlags - The install state flags to use for filtering the results.
	 * 
	 *  None = 0x0,
	 * 
	 *  Installed = 0x1,
	 * 
	 *  NotInstalled = 0x2,
	 * 
	 *  Damaged = 0x4,
	 * 
	 *  NeedsUpdate = 0x8,
	 * 
	 *  Pending = 0x10,
	 * 
	 *  Any = Installed | NotInstalled | Damaged | NeedsUpdate | Pending
	 * @param {Number} sorting - The sorting filter index to use for ordering the results.
	 * 
	 *  0 = None,
	 * 
	 *  1 = Name,
	 * 
	 *  2 = Date Purchased,
	 * 
	 *  3 = Date Installed,
	 * 
	 *  4 = Date Created,
	 * 
	 *  5 = Release Date,
	 * 
	 *  6 = Last Update,
	 * 
	 *  7 = Group ID,
	 * 
	 *  8 = Product ID (SKU),
	 * 
	 *  For Descending add 0x80000000 to the value
	 */
	searchForProducts(filterText, categories, compatibilityBases, contentTypes, installStateFlags, sorting) {};
	/**
	 * @description Sets the options for the Content Management Service (CMS), if it is of the type that can accept options.
	 * @param {String} clusterDirectory - The path of the directory that contains the database files.
	 * @param {Number} port - The port number to use for connecting to the database server.
	 */
	setCMSOptions(clusterDirectory, port) {};
	/**
	 * @since 4.9.0.23
	 * @param {Boolean} onOff - If true, new products will be assigned to the "New" group.
	 */
	setGroupNewProductsAsNew(onOff) {};
	/**
	 * @since 4.9.0.15
	 * @param {Number} maxNum - The maximum number of items to return from a standard file search.
	 */
	setMaxFileSearchResultSize(maxNum) {};
	/**
	 * @param {Number} maxNum - The maximum number of items to show on a page in the content view
	 */
	setMaxItemsPerPage(maxNum) {};
	/**
	 * @description Sets the group identifier on products and/or files, for a list of products.
	 * @since 4.9.0.25
	 * @param {Array} guids - A list of guids for the products to set the group identifier on.
	 * @param {Number} groupId - The group identifier to set.
	 * @param {Boolean} groupProduct - If true, sets the group identifier on the product.
	 * @param {Boolean} groupFiles - If true, sets the group identifier on the user-facing files in the product.
	 */
	setProductGroupIDs(guids, groupId, groupProduct = true, groupFiles = true) {};
	/**
	 * @param {Boolean} onOff - Whether or not to show tool tips on assets.
	 */
	setShowAssetToolTip(onOff) {};
	/**
	 * @param {Boolean} onOff - Whether or not to show extensions on assets.
	 */
	setShowExtensions(onOff) {};
	/**
	 * @description Sets whether or not hidden vendor categorizations are shown.
	 * @since 4.9.3.4
	 * @param {Boolean} shown - If true, hidden vendor categorizations are shown.
	 */
	setShowHiddenVendorCategorization(shown) {};
	/**
	 * @param {Boolean} onOff - Whether or not to show large icons.
	 */
	setShowLargeIcons(onOff) {};
	/**
	 * @returns Boolean true if showing asset tool tips, otherwise false.
	 */
	showAssetToolTip() {};
	/**
	 * @description Causes the Content DB Editor to be displayed, allowing the user to view/edit metadata for products and/or assets all within a centralized dialog.
	 * @returns Boolean true if the dialog is accepted, otherwise false.
	 * @param {DzAbstractAssetContainer} assetContainer - The asset container to load into the editor. If the asset container is a DzProductAssetContainer, the dialog will display two pages: one for the product specific data, and one for the asset specific data. If the asset container is any other type, only the page for the asset specific data is displayed.
	 */
	showDatabaseEditor(assetContainer) {};
	/**
	 * @returns Boolean true if showing asset file extensions, otherwise false.
	 */
	showExtensions() {};
	/**
	 * @returns Boolean true if showing large asset icons, otherwise false.
	 */
	showLargeIcons() {};
	/**
	 * @description Executes a script named after the store associated with product, in the ./resources/stores directory. A single anonymous JSON object is passed to the script, which can be retrieved using the global "getArguments()" function. The properties on the Object consist of values stored in the content database.
	 * @since 4.8.1.70
	 * @param {DzProductAssetContainer} product - The product to show more information for.
	 */
	showMoreProductInfo(product) {};
	/**
	 * @description Starts the Content Management Service (CMS), if it is not already running.
	 */
	startCMS() {};
	/**
	 * @description Stops all searches that were started by any of the search* methods on DzAssetMgr.
	 */
	stopAllSearches() {};
	/**
	 * @description Stops the Content Management Service (CMS), if it is running and is of the type that can be stopped.
	 * @param {StopModeCMS} mode - The mode to use to stop the service.
	 * @param {Boolean} wait - Whether or not to wait for the CMS to stop before continuing.
	 * @param {Number} timeout - The number of seconds to wait for the service to stop before continuing.
	 */
	stopCMS(mode, wait, timeout = 0) {};
	/**
	 * @description Stops any searches that were started by DzAssetMgr.scanFiles().
	 */
	stopFileScan() {};
	/**
	 * @description Stops any searches that were started by DzAssetMgr.searchFiles().
	 */
	stopFileSearch() {};
	/**
	 * @description Stops any searches that were started by DzAssetMgr.searchForAssetAddOns().
	 */
	stopSearchForAssetAddOns() {};
	/**
	 * @description Stops any searches that were started by DzAssetMgr.searchForAssets(), DzAssetMgr.searchForAssetsByKeywords() or DzAssetMgr.searchForProductAssets().
	 */
	stopSearchForAssets() {};
	/**
	 * @description Stops any searches that were started by DzAssetMgr.searchForAssetTargets().
	 */
	stopSearchForAssetTargets() {};
	/**
	 * @description Stops any searches that were started by DzAssetMgr.searchForProducts().
	 */
	stopSearchForProducts() {};
	/**
	 * @description Triggers an update to asset containers within the Categories top-level container.
	 * @since 4.8.1.65
	 */
	updateCategoryContainers() {};
	/**
	 * @description Triggers an update to asset containers within the native formats top-level container.
	 * @since 4.8.1.65
	 */
	updateContentContainers() {};
	/**
	 * @description Triggers an update to asset containers within the folder based top-level containers.
	 * @since 4.8.1.65
	 */
	updateFolderBasedContainers() {};
	/**
	 * @description Triggers an update to asset containers within the other import formats top-level container.
	 * @since 4.8.1.65
	 */
	updateImportContainers() {};
	/**
	 * @description Triggers an update to asset containers within the Poser formats top-level container.
	 * @since 4.8.1.65
	 */
	updatePoserContainers() {};
	/**
	 * @description Triggers an update to asset containers within the Products top-level container.
	 */
	updateProductContainers() {};
	/**
	 * @description Reclaims space in the database previously occupied by deleted or updated data.
	 * @returns Boolean true if the operation was successful, otherwise false.
	 */
	vacuumDatabase() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the base paths list has changed.
	 * @signature `"basePathsChanged()"`
	 * @event
	 */
	basePathsChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when a category has been changed.
	 * @signature `"categoryUpdate(QVariantList)"`
	 * @event
	 */
	categoryUpdate(idPath) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the Data Source Name (DSN) for the Content Management Service (CMS) has changed.
	 * @signature `"cmsDSNChanged()"`
	 * @event
	 */
	cmsDSNChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the Content Management Service (CMS) has started.
	 * @signature `"cmsStarted()"`
	 * @event
	 */
	cmsStarted() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the Content Management Service (CMS) has stopped.
	 * @signature `"cmsStopped()"`
	 * @event
	 */
	cmsStopped() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the compatibility base list has changed.
	 * @signature `"compatibilityBaseListChanged()"`
	 * @event
	 */
	compatibilityBaseListChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when a container has been changed.
	 * @signature `"containerUpdate(QVariantList)"`
	 * @event
	 */
	containerUpdate(idPath) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when itemsPerPage() will return a new value.
	 * @signature `"itemsPerPageChanged(int)"`
	 * @event
	 */
	itemsPerPageChanged(newPerPage) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the maximum file search result size has changed.
	 * @signature `"maxFileSearchResultSizeChanged(int)"`
	 * @event
	 */
	maxFileSearchResultSizeChanged(maxFileSearchResultSize) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when a product has been created.
	 * @signature `"productCreated(const QString &)"`
	 * @event
	 */
	productCreated(guid) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when showAssetToolTipChanged() will return a new value.
	 * @signature `"showAssetToolTipChanged()"`
	 * @event
	 */
	showAssetToolTipChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when showExtensions() will return a new value.
	 * @signature `"showExtensionsChanged()"`
	 * @event
	 */
	showExtensionsChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when showLargeIcons() will return a new value.
	 * @signature `"showLargeIconsChanged()"`
	 * @event
	 */
	showLargeIconsChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the store list has changed.
	 * @signature `"storeListChanged()"`
	 * @event
	 */
	storeListChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the type list has changed.
	 * @signature `"typeListChanged()"`
	 * @event
	 */
	typeListChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the user interface is about to perform a database query.
	 * @signature `"uiAboutToSearch(int)"`
	 * @event
	 */
	uiAboutToSearch(sender, text, categories, compatibilityBases, contentTypes) {};

}
/**
 * This class is implemented by platform specific audioclip classes, winaudioclip_dz and macaudioclip_dz.
 * See Also:
 */
class DzAudioClip extends DzBase, DzRefCountedItem {
	/**
	 * @description The current position of the audio clip from the start.
	 * @type {DzTime}
	 */
	currentPosition;
	/**
	 * @description The name of the file the audio clip was loaded from (Read Only)
	 * @type {String}
	 */
	filename;
	/**
	 * @description The length of the audio clip (Read Only)
	 * @type {DzTime}
	 */
	length;
	/**
	 * @description The current rate multiplier for the audio clip
	 * @type {Number}
	 */
	rate;
	/**
	 * @description Opens the file specified by filename and sets up the audio clip.
	 * @returns DzError true if the file was successfully opened, false otherwise;
	 * @param {String} filename - The name of the audio file to load.
	 */
	openFile(filename) {};
	/**
	 * @description Pauses the audio clip without resetting current position.
	 */
	pause() {};
	/**
	 * @description Plays the audio clip from current position.
	 */
	play() {};
	/**
	 * @description Resets the current position of the audio clip to the beginning.
	 */
	reset() {};

}
/**
 * See Also:
 */
class DzAudioImporter extends DzFileIO {
	/**
	 * @returns String A description of the importer that can be placed in a file type selection combo box (e.g. "WAV Format").
	 */
	getDescription() {};
	/**
	 * @returns String The file extension (excluding the preceding dot) supported by this importer.
	 */
	getExtension() {};
	/**
	 * @description TODO:
	 * Add description.
	 * @returns DzError
	 */
	loadAudio(filename, clip, options) {};
	/**
	 * @description Reads the file.
	 * @returns DzError DZ_NO_ERROR on success, otherwise an error code.
	 * @param {String} filename - Name of the file to be read.
	 * @param {DzAudioClip} clip - Audio clip to read data into.
	 */
	loadAudio(filename, clip) {};
	/**
	 * @description Test the given filename and file contents to see if this importer can read it.
	 * @returns Boolean true if the importer can import the file, otherwise false.
	 * @param {String} filename - The name of the file to test.
	 */
	recognize(filename) {};

}
/**
 * This class does not provide access to any Daz 3D user account information which could be considered an invasion of the user's privacy. This class does provide plugins and scripts with an ability to check if a user has authenticated (logged in to) a Daz 3D account, to prompt a user to authenticate (login to) their Daz 3D account, to obtain a token that uniquely and anonymously identifies the current/last account authenticated, and to logout of an account that is currently logged in.
 * There is only one instance of this manager in an application. This instance is created and owned by DzApp. Request the instance via DzApp.getAuthenticationMgr().
 * See Also:
 */
class DzAuthenticationMgr extends QObject {
	/**
	 * @description This function will attempt to authenticate a Daz 3D user account. If no account information has been entered by the user, a dialog will be displayed to securely acquire the username and password to be authenticated.
	 * @returns Boolean true if the user was authenticated, otherwise false.
	 */
	authenticateUser() {};
	/**
	 * @returns String If the user has (not necessarily is) logged in to a Daz 3D user account and the application has a valid connection to the database, a token that represents the account that the user last logged into is returned. If the user has not logged into a Daz 3D user account or the application does not have a valid connection to the database, an empty string is returned.
	 * @attention This function existed prior to 4.9.3.66 but it was deprecated as part of a much older implementation and it would only return an empty string. As of 4.9.3.66 the function has been revived and the function operates as described above.
	 */
	getUserToken() {};
	/**
	 * @returns Boolean true if the user is authenticated (currently logged in), otherwise false.
	 */
	isAuthenticated() {};
	/**
	 * @returns Boolean true if in process of logging in, otherwise false. The event queue must execute to finish login.
	 * @since 4.9.3.71
	 */
	isLoggingIn() {};
	/**
	 * @description Invalidates any existing authentication.
	 */
	logout() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the user begins to login to a Daz 3D account.
	 * @signature `"beginLogin()"`
	 * @event
	 */
	beginLogin() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the user begins to log out of a Daz 3D account.
	 * @signature `"beginLogout()"`
	 * @event
	 */
	beginLogout() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the current Daz 3D account in use changes.
	 * @signature `"currentAccountChanged()"`
	 * @event
	 */
	currentAccountChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted after the user has successfully logged in to a Daz 3D account.
	 * @signature `"loggedIn()"`
	 * @event
	 */
	loggedIn() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted after the user has successfully logged out of a Daz 3D account.
	 * @signature `"loggedOut()"`
	 * @event
	 */
	loggedOut() {};

}
/**
 * DzAuthor is used to access authorship data for native files, and the current instance of the application.
 * See Also:
 */
class DzAuthor extends Object {
	/**
	 * @description Default constructor. Creates an empty author.
	 */
	constructor() {};
	/**
	 * @description Creates an author by parsing a string.
	 * @param {String} author - A string representation of the author in the form "[ name, email, url ]"
	 */
	constructor(author) {};
	/**
	 * @description Copy Constructor.
	 * @param {DzAuthor} author - The author information to copy.
	 */
	constructor(author) {};
	/**
	 * @description Create a DzAuthor with the given name, email, and url.
	 * @param {String} name - The name of the author.
	 * @param {String} email - The author's email address.
	 * @param {String} url - The author's home page URL.
	 */
	constructor(name, email, url = "") {};
	/**
	 * @description Deprecated
	 * @type {String}
	 */
	email;
	/**
	 * @description The author's name. (Read Only)
	 * @type {String}
	 */
	name;
	/**
	 * @description The author's url. (Read Only)
	 * @type {String}
	 */
	url;
	/**
	 * @description true if name contains valid information, otherwise false. (Read Only)
	 * @type {String}
	 */
	valid;

}
/**
 * This class encapsulates a 2D image and the parameters for drawing the image as a backdrop for the scene. An instance of this class only contributes to the scene if it is set as the current backdrop for the scene.
 * See Also:
 */
class DzBackdrop extends DzElement {
	/**
	 * @description Default Constructor.
	 */
	constructor() {};
	/**
	 * @description Holds the background color of the backdrop.
	 * @type {Color}
	 */
	backgroundColor;
	/**
	 * @description Holds whether or not the backdrop is flipped horizontally.
	 * @type {Boolean}
	 */
	flipHorizontal;
	/**
	 * @description Holds whether or not the backdrop is flipped vertically.
	 * @type {Boolean}
	 */
	flipVertical;
	/**
	 * @description Holds the rotation applied to the backdrop.
	 * @type {Rotation}
	 */
	rotation;
	/**
	 * @description Holds whether or not the backdrop is visible in the viewport.
	 * @type {Boolean}
	 */
	visible;
	/**
	 * @description Holds whether or not the backdrop is visible in a render.
	 * @type {Boolean}
	 */
	visibleInRender;
	/**
	 * @description ENUM: No rotation
	 */
	NO_ROTATION;
	/**
	 * @description ENUM: 90 degree rotation Counter-Clockwise
	 */
	ROTATE_LEFT_90;
	/**
	 * @description ENUM: 90 degree rotation Clockwise
	 */
	ROTATE_RIGHT_90;
	/**
	 * @description ENUM: 180 degree rotation
	 */
	ROTATE_180;
	/**
	 * @description Changes the render aspect ratio to match the backdrop image, and the image dimensions.
	 * @since 4.6.4.33
	 */
	adjustRenderAspectRatioToMatchTexture() {};
	/**
	 * @description Changes the render image dimensions and aspect ratio to match the backdrop image.
	 * @since 4.6.4.33
	 */
	adjustRenderDimensionsToMatchTexture() {};
	/**
	 * @description Clears the current back drop image, and resets all parameters.
	 */
	clear() {};
	/**
	 * @returns DzColorProperty The property that controls the backdrop color or tinting.
	 * @since 4.6.4.35
	 */
	getBackgroundColorControl() {};
	/**
	 * @returns DzBoolProperty The property that controls whether the backdrop is flipped horizontally.
	 */
	getHorizontalFlipControl() {};
	/**
	 * @returns DzMaterial An editable instance of the material used to shade the backdrop.
	 */
	getMaterial() {};
	/**
	 * @returns DzEnumProperty The property that controls rotation of the backdrop.
	 */
	getRotationControl() {};
	/**
	 * @returns DzTexture The current backdrop image.
	 */
	getTexture() {};
	/**
	 * @returns DzBoolProperty The property that controls whether the backdrop is flipped vertically.
	 */
	getVerticalFlipControl() {};
	/**
	 * @returns DzBoolProperty The property that controls whether the backdrop is visible.
	 * @since 4.6.4.32
	 */
	getVisibleControl() {};
	/**
	 * @returns DzBoolProperty The property that controls whether the backdrop is visible in a render.
	 * @since 4.6.4.32
	 */
	getVisibleInRenderControl() {};
	/**
	 * @description Sets the backdrop image.
	 * @param {DzTexture} img - The backdrop image.
	 */
	setTexture(img) {};
	/**
	 * @description Deprecated
	 */
	showOptions(parent = undefined) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the background color of this backdrop changes.
	 * @signature `"backgroundColorChanged()"`
	 * @event
	 */
	backgroundColorChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the information in this backdrop changes.
	 * @signature `"drawnDataChanged()"`
	 * @event
	 */
	drawnDataChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the visibility of this backdrop changes.
	 * @signature `"visiblityChanged()"`
	 * @event
	 */
	visiblityChanged() {};

}
/**
 * Derived from QObject, this base class allows for the use of the signals-slots architecture provided by the Qt framework, within the Daz Studio API.
 * A considerable portion of classes in the Daz Studio API derive from this class.
 */
class DzBase extends QObject {
	/**
	 * @description Provides scripts a way to make objects persistent; i.e., so that Qt will not delete them when they are no longer referenced by the script. This allows object instances to be created in script, then passed into the core and remain after the script has finished execution.
	 */
	makePersistent() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the internal name of the object has changed.
	 * @signature `"nameChanged(const QString&)"`
	 * @event
	 */
	nameChanged(name) {};

}
/**
 * This is the basic camera implementation for DAZ Studio. It supplies commonly-used features like focal length adjustment and depth of field alteration.
 */
class DzBasicCamera extends DzCamera {
	/**
	 * @description Create a camera.
	 */
	constructor() {};
	/**
	 * @description Holds the current height of the view. (Read Only)
	 * @type {Number}
	 */
	currentViewHeight;
	/**
	 * @description Holds the current width of the view. (Read Only)
	 * @type {Number}
	 */
	currentViewWidth;
	/**
	 * @description Holds whether or not the camera performs depth of field calculations.
	 * @type {Boolean}
	 */
	depthOfField;
	/**
	 * @description Holds the f/stop of the camera.
	 * @type {Number}
	 */
	fStop;
	/**
	 * @description Holds whether or the camera is a perspective or orthographic view.
	 * @type {Boolean}
	 */
	isPerspective;
	/**
	 * @description Holds whether or not the local dimensions will use the active viewport when enabled. (since 4.9.3.108)
	 * @type {Boolean}
	 */
	useActiveViewport;
	/**
	 * @description Applies the settings in a dimensions preset.
	 * @returns Boolean if preset was found, otherwise false.
	 * @since 4.9.3.108
	 * @param {String} preset - The name of the preset to retrieve the settings for. An empty string is interpreted to mean "Custom."
	 */
	applyDimensionsPreset(preset) {};
	/**
	 * @description A ray through the scene for a perspective view.
	 * @returns DzVec3 A directional vector that defines a ray that intersects the camera's center point.
	 * @param {Number} x - The x position of the cursor in the viewport.
	 * @param {Number} y - The y position of the cursor in the viewport.
	 */
	cursorToRay(x, y) {};
	/**
	 * @description Calculates a location in the scene based on an x, y position in the viewport and distance from the camera.
	 * @returns DzVec3 A positional vector that represents the resulting location in the scene.
	 * @param {Number} x - The x coordinate of the cursor in the viewport.
	 * @param {Number} y - The y coordinate of the cursor in the viewport.
	 * @param {Number} z - The distance from the camera in world space at which to calculate the target point.
	 */
	cursorToScene(x, y, z) {};
	/**
	 * @returns DzFloatProperty The angle of the aperture blades for the camera.
	 * @since 4.9.3.121
	 */
	getApertureBladeRotationAngleControl() {};
	/**
	 * @returns DzIntProperty The number of aperture blades for the camera.
	 * @since 4.9.3.121
	 */
	getApertureNumBladesControl() {};
	/**
	 * @returns DzBoolProperty The depth of field property for the camera.
	 */
	getDepthOfFieldChannel() {};
	/**
	 * @description Retrieves the settings of a dimensions preset.
	 * @returns Boolean if preset was found, otherwise false.
	 * @since 4.9.3.108
	 * @param {DzSettings} preset - The name of the preset to retrieve the settings for. An empty string is interpreted to mean "Custom."
	 * @param {DzSettings} settings - The settings object that the settings will be assigned to.
	 */
	getDimensionsPreset(preset, settings) {};
	/**
	 * @returns DzBoolProperty The Display Persistence property for the camera.
	 */
	getDisplayPersistenceChannel() {};
	/**
	 * @returns DzColorProperty The DOF Color property for the camera.
	 */
	getDofColorChannel() {};
	/**
	 * @returns DzColorProperty The DOF Overlay Color property for the camera.
	 */
	getDofOverlayColorChannel() {};
	/**
	 * @returns DzFloatProperty The DOF Overlay Opacity property for the camera.
	 */
	getDofOverlayOpacityChannel() {};
	/**
	 * @returns DzBoolProperty The DOF Visibility property for the camera.
	 */
	getDofVisibilityChannel() {};
	/**
	 * @returns DzBoolProperty The Far DOF Visibility property for the camera.
	 */
	getFarDofVisibilityChannel() {};
	/**
	 * @returns DzFloatProperty The depth of field property for this camera.
	 */
	getFocalDistChannel() {};
	/**
	 * @returns DzFloatProperty The focal length property for this camera.
	 */
	getFocalLengthChannel() {};
	/**
	 * @returns DzFloatProperty The Focal Point Scale property for the camera.
	 */
	getFocalPointScaleChannel() {};
	/**
	 * @returns DzColorProperty The FOV Color property for the camera.
	 */
	getFovColorChannel() {};
	/**
	 * @returns DzFloatProperty The FOV Length property for the camera.
	 */
	getFovLengthChannel() {};
	/**
	 * @returns DzFloatProperty The FOV Opacity property for the camera.
	 */
	getFovOpacityChannel() {};
	/**
	 * @returns DzFloatProperty The frame size property for this camera.
	 * @since 4.6.4.67
	 */
	getFrameWidthChannel() {};
	/**
	 * @returns DzFloatProperty The f/stop property for this camera.
	 */
	getFStopChannel() {};
	/**
	 * @returns DzFloatProperty The Headlamp Intensity property for the camera.
	 * @since 4.7.1.94
	 */
	getHeadlampIntensityControl() {};
	/**
	 * @returns DzFloatProperty The camera lens k1 for the camera.
	 * @since 4.9.3.121
	 */
	getLensDistortionK1Control() {};
	/**
	 * @returns DzFloatProperty The camera lens k2 for the camera.
	 * @since 4.9.3.121
	 */
	getLensDistortionK2Control() {};
	/**
	 * @returns DzFloatProperty The camera lens k3 for the camera.
	 * @since 4.9.3.121
	 */
	getLensDistortionK3Control() {};
	/**
	 * @returns DzFloatProperty The camera distortion scale for the camera.
	 * @since 4.9.3.121
	 */
	getLensDistortionScaleControl() {};
	/**
	 * @returns DzEnumProperty The camera lens distortion type for the camera.
	 * @since 4.9.3.121
	 */
	getLensDistortionTypeControl() {};
	/**
	 * @returns DzFloatProperty The camera lens radial bias property for the camera.
	 * @since 4.9.3.121
	 */
	getLensRadialBiasControl() {};
	/**
	 * @returns DzFloatProperty The camera lens shift x property for the camera in mm.
	 * @since 4.9.3.121
	 */
	getLensShiftXControl() {};
	/**
	 * @returns DzFloatProperty The camera lens shift y property for the camera in mm.
	 * @since 4.9.3.121
	 */
	getLensShiftYControl() {};
	/**
	 * @returns DzFloatProperty The camera lens stereo offset for the camera in mm.
	 * @since 4.9.3.121
	 */
	getLensStereoOffsetControl() {};
	/**
	 * @returns DzFloatProperty The camera lens thickness property for the camera. Thickness is in mm.
	 * @since 4.8.0.16
	 */
	getLensThicknessControl() {};
	/**
	 * @returns DzBoolProperty The Near DOF Visibility property for the camera.
	 */
	getNearDofVisibilityChannel() {};
	/**
	 * @returns DzFloatProperty The Sight Line Opacity property for the camera.
	 */
	getSightLineOpacityChannel() {};
	/**
	 * @returns Boolean true if this camera is at default scene camera values, otherwise false.
	 */
	isAtDefaultSceneCameraValues() {};
	/**
	 * @returns Boolean true if this camera is the default scene camera, otherwise false.
	 */
	isDefaultSceneCamera() {};
	/**
	 * @param {Boolean} yesNo - If true, sets this camera as the default scene camera.
	 * @attention Assigning more than one camera as the default scene camera will not be preserved across save/load sequences.
	 */
	setIsDefaultSceneCamera(yesNo) {};
	/**
	 * @description Changes the type of the camera.
	 * @param {DzCamera.CameraType} type - The new type for the camera.
	 */
	setType(type) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the camera's depth of field setting has changed.
	 * @signature `"projectionChanged()"`
	 * @event
	 */
	depthOfFieldChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the camera's f-Stop setting has changed.
	 * @signature `"fStopChanged(const DzTimeRange&)"`
	 * @event
	 */
	fStopChanged(range) {};

}
/**
 * The buttons provided by the dialog are: 'What's This', 'Apply', 'Accept', and 'Cancel'. Custom buttons can also be added to the set of default buttons by calling addButton(). All buttons but the 'Accept' button can be hidden or shown. By default, the 'Apply' button is the only hidden button. The text on the default buttons can be customized.
 * The dialog has a vertical box layout above the horizontal set of buttons. Widgets and sub-layouts can be added to this layout using addWidget() and addLayout().
 * See Also:
 */
class DzBasicDialog extends DzDialog {
	/**
	 * @description Default Constructor. Creates a typical DAZ Studio dialog with 'What's This', 'Apply', 'Accept', and 'Cancel' buttons. By default, the 'Apply' button is hidden, call showApplyButton() to make it visible.
	 */
	constructor() {};
	/**
	 * @description Adds a button into the horizontal layout of the dialog's button bar.
	 * @param {DzButton} btn - The button to add to the dialog's button layout.
	 * @param {Number} index - The position in the button bar to insert the button.
	 */
	addButton(btn, index = 1) {};
	/**
	 * @description Adds a layout into the main vertical layout of the dialog.
	 * @param {DzLayout} child - The layout to add as a child of the dialog's main layout.
	 * @param {Number} stretch - The stretch factor for the child layout.
	 */
	addLayout(layout, stretch = 0) {};
	/**
	 * @description Adds spacing into the main vertical layout of the dialog.
	 * @param {Number} spacing - The amount of spacing to add.
	 */
	addSpacing(spacing) {};
	/**
	 * @description Adds stretch into the main vertical layout of the dialog.
	 * @param {Number} stretch - The stretch factor for the added stretchable space.
	 */
	addStretch(stretch = 0) {};
	/**
	 * @description Adds a widget into the main vertical layout of the dialog.
	 * @param {DzWidget} child - The widget to add to the dialog's main layout.
	 * @param {Number} stretch - The stretch factor for the child widget.
	 * @param {DzWidget.AlignmentFlags} alignment - The alignment for the child widget.(since 4.9.3.93)
	 */
	addWidget(child, stretch = 0, alignment = 0) {};
	/**
	 * @description Inserts a layout into the main vertical layout of the dialog.
	 * @since 4.12.1.28
	 * @param {DzLayout} index - The index to insert the layout at.
	 * @param {DzLayout} layout - The layout to add to the dialog's main layout.
	 * @param {Number} stretch - The stretch factor for the child layout.
	 */
	insertLayout(index, layout, stretch = 0) {};
	/**
	 * @description Inserts a widget into the main vertical layout of the dialog.
	 * @since 4.9.3.93
	 * @param {Number} index - The index to insert the widget at.
	 * @param {DzWidget} child - The widget to add to the dialog's main layout.
	 * @param {Number} stretch - The stretch factor for the child widget.
	 * @param {DzWidget.AlignmentFlags} alignment - The alignment for the child widget.
	 */
	insertWidget(index, child, stretch = 0, alignment = 0) {};
	/**
	 * @description Sets the 'Accept' button is set as the default button for the dialog.
	 * @since 4.12.0.84
	 */
	setAcceptButtonAsDefault() {};
	/**
	 * @description Enables or disables the Accept button. By default, the button is enabled.
	 * @param {Boolean} onOff - If true, the 'Accept' button will be available to the user. If false, the button will not be shown.
	 */
	setAcceptButtonEnabled(onOff) {};
	/**
	 * @description Sets the text for the dialog's accept button. By default, the button is labelled 'Accept'.
	 * @param {String} text - The new label for the accept button.
	 */
	setAcceptButtonText(text) {};
	/**
	 * @description Sets the 'Apply' button is set as the default button for the dialog.
	 * @since 4.12.0.84
	 */
	setApplyButtonAsDefault() {};
	/**
	 * @description Enables or disables the Apply button. By default, the button is disabled.
	 * @param {Boolean} onOff - If true, the 'Apply' button will be available to the user. If false, the button will not be shown.
	 */
	setApplyButtonEnabled(onOff) {};
	/**
	 * @description Sets the text for the dialog's apply button. By default, the button is labelled 'Apply'.
	 * @param {String} text - The new label for the apply button.
	 */
	setApplyButtonText(text) {};
	/**
	 * @description Sets the 'Cancel' button is set as the default button for the dialog.
	 * @since 4.12.0.84
	 */
	setCancelButtonAsDefault() {};
	/**
	 * @description Enables or disables the Cancel button. By default, the button is enabled.
	 * @param {Boolean} onOff - If true, the 'Cancel' button will be available to the user. If false, the button will not be shown.
	 */
	setCancelButtonEnabled(onOff) {};
	/**
	 * @description Sets the text for the dialog's cancel button. By default, the button is labelled 'Cancel'.
	 * @param {String} text - The new label for the cancel button.
	 */
	setCancelButtonText(text) {};
	/**
	 * @description Set the default button for the dialog.
	 * @since 4.12.0.84
	 * @param {DzButton} btn - The button to set as the default for the dialog.
	 */
	setDefaultButton(btn) {};
	/**
	 * @description Sets the 'Help' button is set as the default button for the dialog.
	 * @since 4.12.0.84
	 */
	setHelpButtonAsDefault() {};
	/**
	 * @description Enables or disables the Help button. By default, the button is enabled.
	 * @param {Boolean} onOff - If true, the 'Help' button will be available to the user. If false, the button will not be shown.
	 */
	setHelpButtonEnabled(onOff) {};
	/**
	 * @description Shows or hides the 'Accept' button. By default, the button is shown.
	 * @param {Boolean} onOff - If true, the 'Accept' button will be available to the user. If false, the button will not be shown.
	 */
	showAcceptButton(onOff) {};
	/**
	 * @description Shows or hides the 'Apply' button. By default, the button is hidden.
	 * @param {Boolean} onOff - If true, the 'Apply' button will be available to the user. If false, the button will not be shown.
	 */
	showApplyButton(onOff) {};
	/**
	 * @description Shows or hides the 'Cancel' button. By default, the button is shown.
	 * @param {Boolean} onOff - If true, the 'Cancel' button will be available to the user. If false, the button will not be shown.
	 */
	showCancelButton(onOff) {};
	/**
	 * @description Shows or hides the 'What's This' button. By default, the button is shown.
	 * @param {Boolean} onOff - If true, the 'What's This' button will be available to the user. If false, the button will not be shown.
	 */
	showHelpButton(onOff) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the 'Apply' button is clicked by the user.
	 * @signature `"applyClicked()"`
	 * @event
	 */
	applyClicked() {};

}
/**
 * This specialized DzNode subclass adds follow bone, and mesh-binding functionality to a node. All bones are assumed to be in the hierarchy of a DzSkeleton, and will not function properly if their parent is not a skeleton or another bone.
 */
class DzBone extends DzNode {
	/**
	 * @description Default Constructor. Creates a new Bone node.
	 */
	constructor() {};
	/**
	 * @returns DzMatrix3 The local scale of the bone at the given time.
	 * @param {DzTime} tm - The time to get the local scale for.
	 */
	getBoneLocalScale(tm) {};
	/**
	 * @description Get the node that this node is following.
	 * @returns DzBone The bone this bone is following, or NULL if this bone is not following another bone.
	 */
	getFollowBone() {};
	/**
	 * @returns Number The mode that this node is following by.
	 * @since 4.8.0.23
	 */
	getFollowMode() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the follow bone has changed.
	 * @signature `"followBoneChanged(DzBone*)"`
	 * @event
	 */
	followBoneChanged(newFollowBone) {};

}
/**
 * 
 */
class DzBoolProperty extends DzIntProperty {
	/**
	 * @description Default Constructor. Creates a non-animatable, non-user property.
	 */
	constructor() {};
	/**
	 * @description Overloaded constructor.
	 * @param {String} name - The name of this property.
	 * @param {Boolean} canAnimate - If true, creates an animatable property.
	 * @param {Boolean} isUserProperty - If true, creates a user property; user properties are properties that can be added/deleted by users.
	 * @param {Boolean} initVal - Sets the default value of the property.
	 */
	constructor(name, canAnimate, isUserProperty, initVal = true) {};
	/**
	 * @returns Boolean The boolean value of the property at the current time.
	 */
	getBoolValue() {};
	/**
	 * @returns Boolean The default boolean value of the property.
	 */
	getDefaultBoolValue() {};
	/**
	 * @description Sets the boolean value for this property at the current time - or the default value if this property is not animatable.
	 * @param {Boolean} val - The new value for the property.
	 */
	setBoolValue(value) {};
	/**
	 * @description Sets the default boolean value for this property.
	 * @param {Boolean} val - The new default value for the property.
	 */
	setDefaultBoolValue(val) {};

}
/**
 * 
 */
class DzBox3 extends Object {
	/**
	 * @description Creates an uninitialized box - the first point included in an uninitialized box will become the min and max for this box.
	 */
	constructor() {};
	/**
	 * @description Creates a box by parsing a string.
	 * @param {String} box - A string representation of the box in the form "[[ minX, minY, minZ ],[ maxX, maxY, maxZ ]]"
	 */
	constructor(box) {};
	/**
	 * @description Creates an initialized box with the given min and max values.
	 * @param xmin - The minimum value for this box on the x axis.
	 * @param ymin - The minimum value for this box on the y axis.
	 * @param zmin - The minimum value for this box on the z axis.
	 * @param xmax - The maximum value for this box on the x axis.
	 * @param ymax - The maximum value for this box on the y axis.
	 * @param zmax - The maximum value for this box on the z axis.
	 */
	constructor(xMin, yMin, zMin, xMax, yMax, zMax) {};
	/**
	 * @description Creates an initialized box with the given min and max values.
	 * @param {DzVec3} min - The minimum corner of this box.
	 * @param {DzVec3} max - The maximum corner of this box.
	 */
	constructor(min, max) {};
	/**
	 * @description Copy Constructor.
	 * @param {DzBox3} box - The box to copy.
	 */
	constructor(box) {};
	/**
	 * @description Holds the maximum corner of this box.
	 * @type {DzVec3}
	 */
	max;
	/**
	 * @description Holds the maximum value of this box on the x axis.
	 * @type {Number}
	 */
	maxX;
	/**
	 * @description Holds the maximum value of this box on the y axis.
	 * @type {Number}
	 */
	maxY;
	/**
	 * @description Holds the maximum value of this box on the z axis.
	 * @type {Number}
	 */
	maxZ;
	/**
	 * @description Holds the minimum corner of this box.
	 * @type {DzVec3}
	 */
	min;
	/**
	 * @description Holds the minimum value of this box on the x axis.
	 * @type {Number}
	 */
	minX;
	/**
	 * @description Holds the minimum value of this box on the y axis.
	 * @type {Number}
	 */
	minY;
	/**
	 * @description Holds the minimum value of this box on the z axis.
	 * @type {Number}
	 */
	minZ;
	/**
	 * @returns DzVec3 The closest point in this box to point. Returns point if point is already in this box.
	 * @since 4.9.3.33
	 * @param {DzVec3} point - The point to find the closest point in this box to.
	 */
	closestPoint(point) {};
	/**
	 * @returns Boolean true if point is inside this box, otherwise false.
	 * @since 4.9.3.48
	 * @param {DzVec3} point - The point to check whether or not this box contains it.
	 */
	containsPoint(point) {};
	/**
	 * @returns DzVec3 The center point of this box.
	 */
	getCenter() {};
	/**
	 * @description Tests this box for intersection with the ray, and determines the two points on this box intersected by the line.
	 * @returns Object An object where the "intersects" property represents whether or not this box intersects with the given line, the "firstIntersection" property represents the first intersection point, and the "lastIntersection" property represents the last intersection point if ray intersects.
	 * @since 4.14.1.36
	 * @param {DzLine3} ray - The line to test for intersection with this box.
	 */
	getIntersection(ray) {};
	/**
	 * @returns Number The corner to corner distance of this box.
	 */
	getSize() {};
	/**
	 * @description Creates a new box by transforming the corners of this box through the given matrix and then including them.
	 * @returns DzBox3 A copy of this box that has been transformed by the matrix.
	 * @param {DzMatrix3} matrix - The transform to apply.
	 */
	getTransformedBox(matrix) {};
	/**
	 * @param {DzVec3} vec - The point to include in this box.
	 */
	include(vec) {};
	/**
	 * @description Grows this box, if necessary, to include the given box.
	 * @returns DzBox3
	 * @param {DzBox3} box - The box to include in this box.
	 */
	include(box) {};
	/**
	 * @returns Boolean true if this box is valid, false if it is uninitialized.
	 * @since 4.9.3.33
	 */
	isValid() {};
	/**
	 * @description Provides a fast intersection test without returning the intersection locations. This function is much faster than getIntersection().
	 * @returns Boolean true if the ray intersects this box, otherwise false.
	 * @since 4.9.3.33
	 * @param {DzLine3} ray - The line to test for intersection with this box.
	 * @param {Number} tolerance - The amount of deviation allowed and still be considered an intersection.
	 */
	testIntersection(ray, tolerance) {};
	/**
	 * @returns String A string representation of this box in the form "[[ minX, minY, minZ ],[ maxX, maxY, maxZ ]]".
	 */
	toString() {};
	/**
	 * @description Translates this box by adding the given vector.
	 * @param {DzVec3} vec - The vector to translate by.
	 */
	translate(vec) {};

}
/**
 * TODO:
 * Add detailed description.
 */
class DzBoxLayout extends DzLayout {
	/**
	 * @description Creates a box layout that manages the children widgets of the given parent widget
	 */
	constructor(parent, direction = LeftToRight) {};
	/**
	 * @description Creates a vertical box layout as a sub-layout of the given layout
	 */
	constructor(parent, direction = LeftToRight) {};
	/**
	 * @description The direction of the layout
	 * @type {Direction}
	 */
	direction;
	/**
	 * @description ENUM: Horizontal from left to right.
	 */
	LeftToRight;
	/**
	 * @description ENUM: Horizontal from right to left.
	 */
	RightToLeft;
	/**
	 * @description ENUM: Vertical from top to bottom.
	 */
	TopToBottom;
	/**
	 * @description ENUM: Vertical from bottom to top.
	 */
	BottomToTop;
	/**
	 * @description Adds the given layout to the items managed by this layout
	 * @param {DzLayout} item - The layout to add
	 * @param {Number} stretch - The stretch factor to set for the layout
	 */
	addLayout(layout, stretch = 0) {};
	/**
	 * @description Adds a non-stretchable space with size size to the end of this layout
	 */
	addSpacing(size) {};
	/**
	 * @description Adds a stretchable space with stretch factor stretch to the end of this layout
	 */
	addStretch(stretch = 0) {};
	/**
	 * @description Limits the minimum dimension perpendicular to the direction the box, to size
	 */
	addStrut(size) {};
	/**
	 * @description Adds the given widget to the items managed by this layout
	 * @param {DzWidget} item - The widget to add
	 * @param {Number} stretch - The stretch factor to set for the widget
	 */
	addWidget(widget, stretch = 0) {};

}
/**
 * TODO:
 * Add detailed description.
 */
class DzBrickMaterial extends DzRefCountedItem, DzMaterial {
	/**
	 * @description Creates a new brick material.
	 */
	constructor() {};
	/**
	 * @description Converts the given default material to a brick material.
	 * @param {DzDefaultMaterial} mat - The material to be converted.
	 */
	static convertDefaultMaterial(mat) {};
	/**
	 * @description Converts the given Uber Iray material to a brick material.
	 * @param {DzMaterial} mat - The material to be converted.
	 */
	static convertUberIrayMaterial(mat) {};
	/**
	 * @description Adds the given brick to this brick material.
	 * @returns Number The id of the added brick.
	 * @param {shaderbrick_dz} brick - The brick to add.
	 */
	addBrick(brick) {};
	/**
	 * @returns Boolean true if this brick material allows auto-baking, otherwise false.
	 */
	allowsAutoBake() {};
	/**
	 * @description Apply a copy of this material to all selected materials in the scene.
	 */
	applyToScene() {};
	/**
	 * @description Deletes all bricks in this material.
	 */
	deleteAllBricks() {};
	/**
	 * @description Deletes the brick with the given id from the material.
	 * @param {Number} id - The id of the brick to delete.
	 */
	deleteBrick(id) {};
	/**
	 * @description Deletes the given brick from the material.
	 * @returns DzShaderbrick
	 * @param {shaderbrick_dz} brick - The brick to delete.
	 */
	deleteBrick(brick) {};
	/**
	 * @description Takes this brick material out of edit mode.
	 */
	endEditMode() {};
	/**
	 * @returns DzShaderbrick The brick at the given id.
	 * @param {Number} id - The id of the desired brick.
	 */
	getBrick(id) {};
	/**
	 * @returns Array A list of the ids for the bricks associated with this brick material.
	 */
	getBrickIDs() {};
	/**
	 * @returns DzBrickset The brick set at the specified location.
	 * @param {Number} i - The index of the desired brick set.
	 */
	getBrickSet(i) {};
	/**
	 * @returns String The user name of this brick material.
	 */
	getBrickUserName() {};
	/**
	 * @returns String The extension for this brick material.
	 */
	getExtension() {};
	/**
	 * @returns Number The number of brick sets in this brick material.
	 */
	getNumBrickSets() {};
	/**
	 * @description Invalidates the brick sets, causing them to be rebuilt.
	 */
	invalidateSets() {};
	/**
	 * @returns Boolean true if this brick material is currently in edit mode, otherwise false.
	 */
	isInEditMode() {};
	/**
	 * @description Sets the user name of this brick material.
	 * @param {String} name - The new name for this brick material.
	 */
	setBrickUserName(name) {};
	/**
	 * @description Sets the name for this brick material.
	 * @param {String} name - The new name to be used.
	 */
	setMaterialName(name) {};
	/**
	 * @description Sets whether or not this brick material needs Ptex parameters.
	 * @param {Boolean} onoff - If true, this brick material needs Ptex parameters.
	 */
	setNeedsPtexParams(onoff) {};
	/**
	 * @description Sets whether this brick material needs tangent space parameters.
	 * @param {Boolean} onoff - If true, this brick material will need tangent space parameters.
	 */
	setNeedsTangentSpaceParams(onoff) {};
	/**
	 * @description Puts this brick material in edit mode.
	 */
	startEditMode() {};
	/**
	 * @description Sets whether the identifier is updated when this brick material is invalidated.
	 * @param {Boolean} onOff - If true, the identifier will be updated when this brick material is invalidated.
	 */
	updateIdentifierOnSetInvalidate(onOff) {};
	/**
	 * @returns Boolean true if this brick material uses local shader space.
	 */
	usesLocalShaderSpace() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when a brick is added to this brick material.
	 * @signature `"brickAdded(DzShaderBrick*)"`
	 * @event
	 */
	brickAdded(brick) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when a brick is removed from this brick material.
	 * @signature `"brickRemoved(DzShaderBrick*)"`
	 * @event
	 */
	brickRemoved(brick) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description TODO: Add Description
	 * @signature `generateFilesFinished()`
	 * @event
	 */
	generateFilesFinished() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description TODO: Add Description
	 * @signature `generateFilesStarted()`
	 * @event
	 */
	generateFilesStarted() {};

}
/**
 * DzButton implements an abstract button base. Subclasses specify how to respond to user interaction, and how to present the button to the user. If you want to create a button, create a DzPushButton.
 * DzPushButton provides both push and toggle buttons. The DzRadioButton and DzCheckBox classes provide only toggle buttons.
 * The difference between `down` and on is, when a user clicks a [toggle] button to toggle it on, the button is first pressed and then released into the On state (on is true, `down` is false). When the user clicks it again (to toggle it off), the button is first pressed and then released to the Off state (on and `down` are false).
 */
class DzButton extends DzWidget {
	/**
	 * @description Holds whether or not autoRepeat is enabled. false by default. If enabled, the clicked() signal is emitted at regular intervals if down is true. This property has no effect on toggle buttons.
	 * @type {Boolean}
	 */
	autoRepeat;
	/**
	 * @description Holds the initial delay, in milliseconds, before auto-repetition begins
	 * @type {Number}
	 */
	autoRepeatDelay;
	/**
	 * @description Holds the length of the auto-repetition interval, in milliseconds
	 * @type {Number}
	 */
	autoRepeatInterval;
	/**
	 * @description Holds whether or not the button is checkable. false by default.
	 * @type {Boolean}
	 */
	checkable;
	/**
	 * @description Holds whether or not the button is checked. Only applies to checkable buttons.
	 * @type {Boolean}
	 */
	checked;
	/**
	 * @description Holds whether or not the button is pressed. true if the button is pressed down. false by default. The signals pressed() and clicked() are not emitted when this property set to true.
	 * @type {Boolean}
	 */
	down;
	/**
	 * @description Holds the Pixmap shown on the button. If the Pixmap is monochrome (e.g. its depth is 1) and it does not have a mask, the Pixmap will be its own mask. This allows transparent bitmaps to be drawn, which are important for toggle buttons. 0 if no pixmap is set.
	 * @type {Pixmap}
	 */
	pixmap;
	/**
	 * @description Holds the text displayed on the button. undefined by default. An ampersand (&) in the String automatically creates an accelerator for it using the character that follows the ampersand, as the accelerator key. Any previous accelerator will be overwritten, or cleared if no accelerator is defined by the text.
	 * @type {String}
	 */
	text;
	/**
	 * @description Holds whether or not the button is a toggle (Read Only). false by default.
	 * @type {Boolean}
	 */
	toggleButton;
	/**
	 * @description Toggles the state of a toggle button.
	 */
	toggle() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the button is pressed and then released.
	 * @signature `"clicked()"`
	 * @event
	 */
	clicked() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the button is pressed.
	 * @signature `"pressed()"`
	 * @event
	 */
	pressed() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the button is released.
	 * @signature `"released()"`
	 * @event
	 */
	released() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when toggleState on this button has changed.
	 * @signature `"stateChanged(int)"`
	 * @event
	 */
	stateChanged(state) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the button is toggled.
	 * @signature `"toggled(bool)"`
	 * @event
	 */
	toggled(onOff) {};

}
/**
 * Provides an abstract container that manages the states of DzButton instances placed within it - it does not provide a visual representation (see DzGroupBox).
 */
class DzButtonGroup extends DzGroupBox {
	/**
	 * @description Creates a button group as a child of the given parent widget
	 */
	constructor(parent) {};
	/**
	 * @description Holds the number of buttons in this group (Read Only)
	 * @type {Number}
	 */
	count;
	/**
	 * @description Holds whether or not this group is exclusive for all toggle buttons (the default is false)
	 * @type {Boolean}
	 */
	exclusive;
	/**
	 * @description Holds whether or not this group is exclusive for radio buttons (the default is true)
	 * @type {Boolean}
	 */
	radioButtonExclusive;
	/**
	 * @description Holds the checked button in an exclusive group
	 * @type {Number}
	 */
	selected;
	/**
	 * @description Adds the specified button to this group. This is only necessary if the button was not created as a child of the group.
	 * @param {DzButton} button - The button to add.
	 */
	addButton(button) {};
	/**
	 * @description Adds the specified button to this group with the specified id. This is only necessary if the button was not created as a child of the group.
	 * @param {DzButton} button - The button to add.
	 * @param {Number} id - The id to assign.
	 */
	addButton(button, id) {};
	/**
	 * @returns DzButton The button in this group with the specified id (if any), otherwise null.
	 * @param {Number} id - The id of the button to get.
	 */
	button(id) {};
	/**
	 * @returns Array A list of the buttons in this group.
	 */
	buttons() {};
	/**
	 * @returns DzButton The button that is currently checked (selected) in this group.
	 */
	checkedButton() {};
	/**
	 * @returns Number The id of the specified button (if any), otherwise -1.
	 * @param {DzButton} button - The button to get the id of.
	 */
	id(button) {};
	/**
	 * @description Inserts the specified button into this group, with the specified id. This is only necessary if the button was not created as a child of the group.
	 * @returns Number The id of button in the group.
	 * @param {DzButton} button - The button to insert.
	 * @param {Number} id - The id to assign.
	 */
	insert(button, id = -1) {};
	/**
	 * @description Removes the specified button from this group.
	 * @param {DzButton} button - The button to remove.
	 */
	removeButton(button) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when a button in the group is pressed and released
	 * @signature `"clicked(int)"`
	 * @event
	 */
	clicked(id) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when a button in the group is pressed
	 * @signature `"pressed(int)"`
	 * @event
	 */
	pressed(id) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when a button in the group is released
	 * @signature `"released(int)"`
	 * @event
	 */
	released(id) {};

}
/**
 * This is the DAZScript counterpart to the QByteArray type used in the DAZ Studio SDK.
 * Attention:@attention Attention:
 */
class ByteArray extends QObject {
	/**
	 * @description Default Constructor.
	 */
	constructor() {};
	/**
	 * @description Copy Constructor.
	 * @param {ByteArray} byteArray - The ByteArray to copy.
	 */
	constructor(byteArray) {};
	/**
	 * @description Creates a byte array containing the ascii representation of the string.
	 * @param {String} str - The string to copy into the byte array.
	 */
	constructor(str) {};
	/**
	 * @description The number of bytes in the array
	 * @type {Number}
	 */
	length;
	/**
	 * @description The number of bytes in the array
	 * @type {Number}
	 */
	size;
	/**
	 * @returns Number The byte at the given index in the array of bytes.
	 * @param {Number} index - The index of the byte to return.
	 */
	byteAt(index) {};
	/**
	 * @returns String The character at the given index in the array of bytes.
	 * @param {Number} index - The index of the byte to return.
	 */
	charAt(index) {};
	/**
	 * @returns String The array of bytes as a string.
	 */
	convertToString() {};
	/**
	 * @returns String The array of bytes as a string.
	 */
	convertToStringFromUtf16() {};
	/**
	 * @returns String The array of bytes as a string.
	 */
	convertToStringFromUtf8() {};
	/**
	 * @returns ByteArray A decoded copy of the Base64 encoded array base64.
	 * @since 4.10.0.88
	 * @attention Input is not checked for validity; invalid characters in the input are skipped, enabling the decoding process to continue with subsequent characters.
	 */
	fromBase64(base64) {};
	/**
	 * @returns ByteArray A decoded copy of the hexidecimal encoded array hexEncoded.
	 * @since 4.10.0.88
	 * @attention Input is not checked for validity; invalid characters in the input are skipped, enabling the decoding process to continue with subsequent characters.
	 */
	fromHex(hexEncoded) {};
	/**
	 * @returns ByteArray A decoded copy of the URI/URL-style percent-encoded pctEncoded.
	 * @since 4.10.0.88
	 */
	fromPercentEncoding(pctEncoded) {};
	/**
	 * @returns ByteArray A copy of the byte array, encoded as Base64.
	 * @since 4.10.0.88
	 * @attention The algorithm used to encode Base64-encoded data is defined in RFC 2045.
	 */
	toBase64() {};
	/**
	 * @returns ByteArray A hexidecimal encoded copy of the byte array.
	 * @since 4.10.0.88
	 * @attention Hexidecimal encoding uses the numbers 0-9 and the letters a-f.
	 */
	toHex() {};
	/**
	 * @returns ByteArray A URI/URL-style percent-encoded copy of this byte arra.
	 * @since 4.10.0.88
	 * @param {ByteArray} exclude - To characters to prevent from being encoded.
	 * @param {ByteArray} exclude - To characters to force being encoded.
	 * @attention By default, this function will encode all characters that are not one of the following: ALPHA ("a" to "z" and "A" to "Z") / DIGIT (0 to 9) / "-" / "." / "_" / "~"
	 */
	toPercentEncoding(exclude = ByteArray, include = ByteArray) {};

}
/**
 * Encapsulates an object that is used to execute a script when a signal that it is connected to is triggered.
 * See Also:
 */
class DzCallBack extends QObject {
	/**
	 * @description Adds the callback to the given callback group.
	 * @param {String} group - The name of the group to add the callback to.
	 */
	addToGroup(group) {};
	/**
	 * @description Disconnects from the signal that triggers this callback.
	 */
	clearConnection() {};
	/**
	 * @returns Object The i'th argument from the current execution of the callback.
	 * @attention Callbacks that are processed as events or blocked during scene load are provided no arguments and getSender() always returns the first QObject connected to, which is not necessarily the one sending the signal.
	 */
	getArg(i) {};
	/**
	 * @returns Number The number of arguments for the current execution of the callback.
	 * @attention Callbacks that are processed as events or blocked during scene load are provided no arguments and getSender() always returns the first QObject connected to, which is not necessarily the one sending the signal.
	 */
	getArgCount() {};
	/**
	 * @returns Boolean true if this callback is not processed during a scene load but is instead processed at the end of a scene load, otherwise false.
	 */
	getBlockedDuringSceneLoad() {};
	/**
	 * @returns Boolean true if this callback is set to be deleted after it has been executed, otherwise false.
	 * @since 4.6.4.67
	 */
	getDeleteAfterExecution() {};
	/**
	 * @returns QVariant for QObject property
	 * @since 4.9.4.90
	 */
	getDynamicProperty(name) {};
	/**
	 * @returns Array A list of the groups that this callback belongs to.
	 */
	getGroups() {};
	/**
	 * @returns Boolean true if this callback is processed as an event, otherwise false.
	 */
	getProcessAsEvent() {};
	/**
	 * @returns String The script that is executed when the signal is emitted.
	 */
	getScript() {};
	/**
	 * @returns QObject The object that sent the signal, or NULL.
	 */
	getSender() {};
	/**
	 * @returns Boolean true if getScript() for this callback is the actual code that gets executed, false if getScript() contains the filename of the script to execute.
	 */
	isEvaluated() {};
	/**
	 * @description Removes this callback from the group callback group.
	 * @param {String} group - The name of the group to remove the callback from.
	 */
	removeFromGroup(group) {};
	/**
	 * @param {Boolean} onOff - If true, this callback will not be processed while the scene is loading, it will be processed when the scene is finished loading.
	 * @attention Callbacks that are blocked during scene load are provided no arguments and getSender() always returns the first QObject connected to, which is not necessarily the one sending the signal.
	 */
	setBlockedDuringSceneLoad(onOff) {};
	/**
	 * @description Makes the connection that triggers this callback.
	 * @returns Boolean
	 * @param {String} sender - The object that the signal belongs to.
	 * @param {String} signal - The signature of the signal to connect to.
	 * @param {Boolean} garbageCollect - If true, remove this callback from the DzCallBackMgr when sender is deleted.
	 */
	setConnection(sender, signal, garbageCollect) {};
	/**
	 * @description Makes the connection that triggers this callback.
	 * @returns Boolean
	 * @param {String} sender - The object that the signal belongs to.
	 * @param {String} signal - The signature of the signal to connect to.
	 */
	setConnection(sender, signal) {};
	/**
	 * @description Makes the connection that triggers this callback.
	 * @returns Number The number of connections in signalList that are established, or -1 if sender is null.
	 * @param {QObject} sender - The object that the signal belongs to.
	 * @param {Array} signalList - List of signal signatures to connect to.
	 * @param {Boolean} garbageCollect - If true, remove this callback from the DzCallBackMgr when sender is deleted.
	 */
	setConnections(sender, signalList, garbageCollect) {};
	/**
	 * @since 4.6.4.67
	 * @param {Boolean} onOff - If true, sets this callback to be deleted after it has been executed.
	 */
	setDeleteAfterExecution(onOff) {};
	/**
	 * @description Set QObject dynamic property on this callback
	 * @since 4.9.4.90
	 */
	setDynamicProperty(name, value) {};
	/**
	 * @param {Boolean} onOff - If true, sets this callback to trigger as it is encountered in the event stack.
	 * @attention Callbacks that are processed as events are provided no arguments and getSender() always returns the first QObject connected to, which is not necessarily the one sending the signal.
	 */
	setProcessAsEvent(onOff) {};
	/**
	 * @description Sets the script that will be executed by this callback.
	 * @param {String} script - The filename or code of the script to execute.
	 * @param {Boolean} evaluate - If script is the actual code and it should be embedded, set this to true, otherwise it is assumed that script is the path of a script file to execute.
	 */
	setScript(script, evaluate) {};

}
/**
 * Responsible for the management of objects that are used to execute a script when a signal that the object is connected to is emitted.
 * There is only one instance of this manager in an application. This instance is created and owned by DzApp. Request the instance via DzApp.getCallBackMgr().Dynamically load a script.
 * 
 * ### Example:
 * ```
 * var sScript = "support/CallBackExample/HelloWorld.dsa";
 * var oCallBackMgr = App.getCallBackMgr();
 * var oCallBack = oCallBackMgr.createCallBack( "Hello World", sScript, false );
 * 
 * oCallBack.setConnection( Scene, "nodeAdded(DzNode*)" );
 * ```
 * Embed a script.
 * 
 * ### Example:
 * ```
 * var sPath = String( "%1/support/CallBackExample/HelloWorld.dsa" ).arg( App.getScriptsPath() );
 * var oScript = new DzScript;
 * oScript.loadFromFile( sPath );
 * var sScript = oScript.getCode();
 * 
 * var oCallBackMgr = App.getCallBackMgr();
 * var oCallBack = oCallBackMgr.createCallBack( "Hello World", sScript, true );
 * 
 * oCallBack.setConnection( Scene, "nodeAdded(DzNode*)" );
 * ```
 * CallBack script (./support/CallBackExample/HelloWorld.dsa).
 * 
 * ### Example:
 * ```
 * var oSender = CallBack.getSender();
 * var sMessage = String( "Sender Class: %1\n" +
 * "Sender Name: %2\n\n" +
 * "CallBack Args: %3" )
 * .arg( oSender.className() )
 * .arg( oSender.name )
 * .arg( CallBack.getArgCount() );
 * 
 * var nArgs = CallBack.getArgCount();
 * if( nArgs > 0 ){
 * for( var i = 0; i < nArgs; i += 1 ){
 * sMessage += String( "\nArg %1 : %2" ).arg( i ).arg( CallBack.getArg( i ) );
 * }
 * }
 * 
 * MessageBox.information( sMessage, CallBack.className(), "&OK" );
 * ```
 */
class DzCallBackMgr extends QObject {
	/**
	 * @description Deletes all callbacks.
	 */
	clearAllCallBacks() {};
	/**
	 * @description Creates a DzCallBack object.
	 * @returns DzCallBack
	 * @param {String} name - The name for the callback.
	 * @param {String} script - The filename or code of the script to execute.
	 * @param {Boolean} evaluate - If script is the actual code and it should be embedded, set this to true, otherwise it is assumed that script is the path of a script file to execute.
	 */
	createCallBack(name, script, evaluate) {};
	/**
	 * @description Creates a DzCallBack object.
	 * @returns DzCallBack
	 * @param {String} name - The name for the callback.
	 */
	createCallBack(name) {};
	/**
	 * @description Deletes the callback at the given index.
	 * @param {Number} index - The index of the callback to delete.
	 */
	deleteCallBack(index) {};
	/**
	 * @description Deletes all callbacks with the given name.
	 * @param {String} name - The name of the callback to delete.
	 */
	deleteCallBack(name) {};
	/**
	 * @description Deletes the specified callback.
	 * @param {DzCallBack} callBack - The callback to delete.
	 */
	deleteCallBack(callBack) {};
	/**
	 * @description Deletes all callbacks in a given group.
	 * @param {String} name - The name of the group with callbacks to delete.
	 */
	deleteCallBackGroup(name) {};
	/**
	 * @returns DzCallBack The callback at index if at least one callback exists and index is within the range [0, getNumCallBacks() - 1], otherwise null.
	 */
	getCallBack(index) {};
	/**
	 * @returns DzCallBack The first DzCallBack object with the given name.
	 */
	getCallBack(name) {};
	/**
	 * @returns Number The index of the first callback named name.
	 */
	getCallBackIndex(name) {};
	/**
	 * @returns Array The list of all callbacks.
	 */
	getCallBackList() {};
	/**
	 * @returns Array The list of callbacks in the group named name.
	 */
	getGroup(name) {};
	/**
	 * @returns Number The number of callbacks.
	 */
	getNumCallBacks() {};
	/**
	 * @returns Array A list of strings that represent the signature(s) of the signal with the specified name.
	 */
	getSignalSignature(obj, signalName = "") {};

}
/**
 * TODO:
 * Add detailed description.
 */
class DzCamera extends DzNode {
	/**
	 * @description The aspect height of this camera.
	 * @type {Number}
	 */
	aspectHeight;
	/**
	 * @description The aspect ratio of this camera (w / h).
	 * @type {Number}
	 */
	aspectRatio;
	/**
	 * @description The aspect width of this camera.
	 * @type {Number}
	 */
	aspectWidth;
	/**
	 * @description The distance of the far clipping plane from this camera. (Read Only)
	 * @type {Number}
	 */
	farClippingPlane;
	/**
	 * @description The focal distance of this camera.
	 * @type {Number}
	 */
	focalDistance;
	/**
	 * @description The focal length of this camera.
	 * @type {Number}
	 */
	focalLength;
	/**
	 * @description The width of the frame (film/sensor) of this camera (in mm). (Read Only)
	 * @type {Number}
	 */
	frameWidth;
	/**
	 * @description The mode of the headlight.
	 * @type {HeadlightMode}
	 */
	headlightMode;
	/**
	 * @description The relative offset of the headlight from this camera.
	 * @type {DzVec3}
	 */
	headlightOffset;
	/**
	 * @description The distance of the near clipping plane from this camera. (Read Only)
	 * @type {Number}
	 */
	nearClippingPlane;
	/**
	 * @description The pixels height of this camera.
	 * @type {Number}
	 */
	pixelsHeight;
	/**
	 * @description The pixels width of this camera.
	 * @type {Number}
	 */
	pixelsWidth;
	/**
	 * @description Whether or not the proportions of this camera is constrained.
	 * @type {Boolean}
	 */
	proportionsConstrained;
	/**
	 * @description The type of this camera. (Read Only)
	 * @type {Number}
	 */
	type;
	/**
	 * @description Whether or not to use the local dimensions of this camera.
	 * @type {Boolean}
	 */
	useLocalDimensions;
	/**
	 * @description ENUM: The width in pixels. Since: 4.6.4.70
	 */
	LOCAL_PIXEL_WIDTH;
	/**
	 * @description ENUM: The height in pixels. Since: 4.6.4.70
	 */
	LOCAL_PIXEL_HEIGHT;
	/**
	 * @description ENUM: The relative width of the aspect frame. Since: 4.6.4.70
	 */
	LOCAL_ASPECT_WIDTH;
	/**
	 * @description ENUM: The relative height of the aspect frame. Since: 4.6.4.70
	 */
	LOCAL_ASPECT_HEIGHT;
	/**
	 * @description ENUM: Orthogonal camera positioned to view the front of a figure
	 */
	FRONT_CAMERA;
	/**
	 * @description ENUM: Orthogonal camera positioned to view the back of a figure
	 */
	BACK_CAMERA;
	/**
	 * @description ENUM: Orthogonal camera positioned to view the left side of a figure.
	 */
	LEFT_CAMERA;
	/**
	 * @description ENUM: Orthogonal camera positioned to view the right side of a figure.
	 */
	RIGHT_CAMERA;
	/**
	 * @description ENUM: Orthogonal camera positioned to view a figure from the top.
	 */
	TOP_CAMERA;
	/**
	 * @description ENUM: Orthogonal camera positioned to view a figure from the bottom.
	 */
	BOTTOM_CAMERA;
	/**
	 * @description ENUM: Default perspective camera - defaults to a front view of a figure.
	 */
	PERSPECTIVE_CAMERA;
	/**
	 * @description ENUM: General Orthogonal camera.
	 */
	ORTHO_CAMERA;
	/**
	 * @description ENUM: General Perspective camera.
	 */
	GENERAL_CAMERA;
	/**
	 * @description ENUM: The headlight is automatically on or off depending on whether or not lights are in the scene. Since: 4.7.1.94
	 */
	hmAuto;
	/**
	 * @description ENUM: The headlight is on. Since: 4.7.1.94
	 */
	hmOn;
	/**
	 * @description ENUM: The headlight is off. Since: 4.7.1.94
	 */
	hmOff;
	/**
	 * @description Rotates this camera and adjusts its focal distance so that its focal point is at the given point.
	 * @param {DzVec3} pos - The point to aim this camera at.
	 */
	aimAt(pos) {};
	/**
	 * @description Translates this camera so that its view frames the given box, and sets this camera's focal point to the center of the box, given the aspect ratio of the current view (w / h)
	 * @param {DzBox3} box - The bounding box to frame in this camera's view
	 * @param {Number} aspect - The aspect ratio of the current view.
	 */
	frame(box, aspect) {};
	/**
	 * @returns Number The angle, in radians, of the horizontal field of view (FOV) for this camera (rectilinear lens).
	 * @attention The following formula is used to calculate the horizontal FOV:
	 */
	getFieldOfView() {};
	/**
	 * @returns DzVec3 The focal point of this camera.
	 */
	getFocalPoint() {};
	/**
	 * @returns DzLight A light that illuminates the scene in front of this camera. Used for rendering by OpenGL and offline renderers when no lights exist in the scene. This headlight is created on demand - i.e. no headlight for this camera exists until this function is called the first time.
	 */
	getHeadlight() {};
	/**
	 * @returns Boolean true if this is a non-animatable view camera, otherwise false.
	 */
	isViewCamera() {};
	/**
	 * @description Resets this camera viewing parameters to defaults.
	 */
	reset() {};
	/**
	 * @returns Boolean true if the headlight should contribute light to the scene, otherwise false.
	 * @since 4.7.1.94
	 * @param {Boolean} hasLights - Whether or not the scene has lights.
	 * @param {Boolean} isRender - Whether or not the call is for the purpose of a render.
	 */
	shouldDoHeadLight(hasLights, isRender) {};
	/**
	 * @description Updates the other dimensions given an anchor dimension.
	 * @param {CameraDimension} anchor - The anchor dimension.
	 */
	updateDimensions(anchor) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the aspect height dimension of this camera changes.
	 * @signature `"aspectHeightChanged(float)"`
	 * @event
	 */
	aspectHeightChanged(height) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when this camera's aspect ratio changes.
	 * @signature `"aspectRatioChanged()"`
	 * @event
	 */
	aspectRatioChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the aspect width dimension of this camera changes.
	 * @signature `"aspectWidthChanged(float)"`
	 * @event
	 */
	aspectWidthChanged(width) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when any of the local dimensions of this camera change.
	 * @signature `"dimensionsChanged()"`
	 * @event
	 */
	dimensionsChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the focal distance channel changes.
	 * @signature `"focalDistanceChanged(const DzTimeRange&)"`
	 * @event
	 */
	focalDistanceChanged(range) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the focal length channel changes.
	 * @signature `"focalLengthChanged(const DzTimeRange&)"`
	 * @event
	 */
	focalLengthChanged(range) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the frame width of this camera changes.
	 * @signature `"frameWidthChanged(float)"`
	 * @event
	 */
	frameWidthChanged(size) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when headlight mode of this camera changes.
	 * @signature `"headlightModeChanged()"`
	 * @event
	 */
	headlightModeChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when headlight offset of this camera changes.
	 * @signature `"headlightOffsetChanged()"`
	 * @event
	 */
	headlightOffsetChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the local pixel dimensions of this camera change.
	 * @signature `"pixelDimensionsChanged()"`
	 * @event
	 */
	pixelDimensionsChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the pixel height dimension of this camera changes.
	 * @signature `"pixelsHeightChanged(int)"`
	 * @event
	 */
	pixelsHeightChanged(height) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the pixel width dimension of this camera changes.
	 * @signature `"pixelsWidthChanged(int)"`
	 * @event
	 */
	pixelsWidthChanged(width) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when projection of this camera changes and its view must be redrawn.
	 * @signature `"projectionChanged()"`
	 * @event
	 */
	projectionChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the option for whether or not to constrain proportions of the local dimensions of this camera changes.
	 * @signature `"proportionsConstrainedChanged(bool)"`
	 * @event
	 */
	proportionsConstrainedChanged(yesNo) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the option for whether or not to use the local dimensions of this camera changes.
	 * @signature `"aspectRatioChanged(bool)"`
	 * @event
	 */
	useLocalDimensionsChanged(yesNo) {};

}
/**
 * An asset save filter for saving a Camera(s) Preset in the DSON format.
 * See Also:
 */
class DzCameraAssetFilter extends DzAssetFileOutFilter {
	/**
	 * @description TODO:
	 * Add description.
	 */
	constructor() {};

}
/**
 * A "Category" is described as a class or collection of entities regarded as having common traits and/or characteristics. Within a given class or collection of entities, certain traits and/or characteristics may be regarded as being shared by a smaller subset - i.e., a "Sub-Category." Thus, categorization naturally supports a hierarchical structure.
 * The "Category" container type serves to provide a means of working with "Assets" that share characteristics without the encumbrances imposed by moving the actual files they represent on disk - moving or renaming files on disk breaks the correlation between the file and the "Asset" that represents it.
 * See Also:
 */
class DzCategoryAssetContainer extends DzRefCountedItem, DzAbstractAssetContainer {
	/**
	 * @description Holds whether this category is owned by a vendor or by the user. (Read Only)
	 * @type {Boolean}
	 */
	isVendor;
	/**
	 * @returns Array A list of assets associated with the path of this container, matching the criteria specified.
	 * @since 4.9.3.56
	 * @param {Boolean} userFacing - Whether or not to limit the list to user-facing assets.
	 * @param {Boolean} installed - Whether or not to limit the list to installed assets.
	 */
	getAssetsInCategory(userFacing = true, installed = true) {};
	/**
	 * @returns String The full path of the category that this container represents.
	 * @since 4.9.2.48
	 */
	getPath() {};
	/**
	 * @description Updates the container using the data that is currently stored in the database.
	 */
	updateRow() {};

}
/**
 * An asset save filter for saving a Character Preset in DSON format.
 * See Also:
 */
class DzCharacterAssetFilter extends DzAssetFileOutFilter {
	/**
	 * @description TODO:
	 * Add description.
	 */
	constructor() {};

}
/**
 * DzRadioButton and DzCheckBox are both option buttons (e.g. they can be `checked` or unchecked). They differ in how the available choices are restricted. A DzCheckBox is used to define several choices that can all co-exist at the same time (e.g. "many of many"). While a DzRadioButton is used to provide several choices, where only one can be ultimately chosen (e.g. "one of many").Boolean : `checked`
 * 
 * ### Example:
 * ```
 * // Create a new dialog
 * var wDlg = new DzDialog;
 * wDlg.caption = "DzCheckBox Example";
 * 
 * // Create a layout for the dialog
 * var wLyt = new DzVBoxLayout( wDlg );
 * wLyt.autoAdd = true;
 * 
 * // Create a group box for the options
 * var wOptGB = new DzVGroupBox( wDlg );
 * wOptGB.columns = 1;
 * 
 * // Create the options
 * var wOpt1Btn = new DzCheckBox( wOptGB );
 * wOpt1Btn.text = "Option 1";
 * wOpt1Btn.checked = true;
 * var wOpt2Btn = new DzCheckBox( wOptGB );
 * wOpt2Btn.text = "Option 2";
 * var wOpt3Btn = new DzCheckBox( wOptGB );
 * wOpt3Btn.text = "Option 3";
 * wOpt3Btn.checked = true;
 * 
 * // Launch the dialog
 * wDlg.exec();
 * ```
 */
class DzCheckBox extends DzButton {
	/**
	 * @description Creates a check box as a child of the given parent widget
	 */
	constructor(parent) {};
	/**
	 * @description Holds whether or not the button is checked. true if the button is checked. false by default.
	 * @type {Boolean}
	 */
	checked;
	/**
	 * @description Holds whether or not the checkbox is a tri-state checkbox. The default is two-state (e.g. tri-state is false).
	 * @type {Boolean}
	 */
	tristate;

}
/**
 * This is not a widget, but a helper for working with DzListView. Each DzCheckListItem represents a single item in a list view - add items to a list view by creating a new DzCheckListItem that is a child of the list view, or a child of another list view item in the list view.
 */
class DzCheckListItem extends DzListViewItem {
	/**
	 * @description Creates a checklist item at the root level of the specified list view.
	 * @param {DzListView} parent - The listview to create this item as a child of.
	 * @param {Type} type - The Type of item to create.
	 * @param {Number} id - The identifier for this item.
	 */
	constructor(parent, type = RadioButtonController, id = -1) {};
	/**
	 * @description Creates a checklist item as a child of the specified list item.
	 * @param {DzCheckListItem} parent - The item to create this item as a child of.
	 * @param {Type} type - The Type of item to create.
	 * @param {Number} id - The identifier for this item.
	 */
	constructor(parent, type = RadioButtonController, id = -1) {};
	/**
	 * @description Creates a checklist item as a child of the specified list item.
	 * @param {DzListViewItem} parent - The item to create this item as a child of.
	 * @param {Type} type - The Type of item to create.
	 * @param {Number} id - The identifier for this item.
	 */
	constructor(parent, type = RadioButtonController, id = -1) {};
	/**
	 * @description Holds the height of the item.
	 * @type {Number}
	 */
	height;
	/**
	 * @description Holds whether or not the item is toggled on (checked).
	 * @type {Boolean}
	 */
	on;
	/**
	 * @description Holds the state of the item.
	 * @type {ToggleState}
	 */
	state;
	/**
	 * @description Holds whether or not the item is tristate.
	 * @type {Boolean}
	 */
	triState;
	/**
	 * @description Holds the type of the item. (Read Only)
	 * @type {Type}
	 */
	type;
	/**
	 * @description ENUM: The item is off.
	 */
	Off;
	/**
	 * @description ENUM: The item has not changed - i.e. it is in the third state and the user has not clicked it.
	 */
	NoChange;
	/**
	 * @description ENUM: The item is on.
	 */
	On;
	/**
	 * @description ENUM: Radio Button item. Must be the child of a RadioButtonController
	 */
	RadioButton;
	/**
	 * @description ENUM: Check Box item.
	 */
	CheckBox;
	/**
	 * @description ENUM: Radio Button parent item.
	 */
	RadioButtonController;
	/**
	 * @description ENUM: Check Box parent item.
	 */
	CheckBoxController;

}
/**
 * TODO:
 * Add detailed description.
 */
class DzCircle3 extends Object {
	/**
	 * @description Default Constructor.
	 */
	constructor() {};
	/**
	 * @description Creates a circle by parsing a string.
	 * @param {String} circle - A string representation of the circle in the form "[[ centerX, centerY, centerZ ], [ normalX, normalY, normalZ ], radius ]"
	 */
	constructor(circle) {};
	/**
	 * @description Copy Constructor.
	 * @param {DzCircle3} circle - The circle to copy.
	 */
	constructor(circle) {};
	/**
	 * @param {DzVec3} center - The center point of the circle.
	 * @param {DzVec3} normal - The normal of the circle (i.e. a vector perpendicular to the plane of the circle).
	 * @param {Number} radius - The radius of the circle.
	 */
	constructor(center, normal, radius) {};
	/**
	 * @description Holds the center of the circle in three dimensional space.
	 * @type {DzVec3}
	 */
	center;
	/**
	 * @description Holds the normal of the plane that the circle lies on.
	 * @type {DzVec3}
	 */
	normal;
	/**
	 * @description Holds the radius of the circle.
	 * @type {Number}
	 */
	radius;
	/**
	 * @returns String A string representation of this circle in the form "[[ centerX, centerY, centerZ ], [ normalX, normalY, normalZ ], radius ]".
	 */
	toString() {};

}
/**
 * This is the DAZScript counterpart to the QColor type used in the DAZ Studio SDK.
 * Attention:@attention Attention:
 */
class Color extends QObject {
	/**
	 * @description Default Constructor.
	 */
	constructor() {};
	/**
	 * @description Sets the RGB value from colorName, which may be in one of these formats (each of R, G and B is a single hex digit):
	 * @param {String} colorName - The named color to set the value of this color to.
	 */
	constructor(colorName) {};
	/**
	 * @description Component-wise constructor. Each value (i.e., r, g, b, a ) should be in the [0, 255] range.
	 * @param {Number} r - The red value for the color.
	 * @param {Number} g - The green value for the color.
	 * @param {Number} b - The blue value for the color.
	 * @param {Number} a - The alpha value for the color (since 4.9.4.4).
	 */
	constructor(r, g, b, a = 255) {};
	/**
	 * @description Copy Constructor.
	 * @param {Color} color - The Color to copy.
	 */
	constructor(color) {};
	/**
	 * @description The alpha component of the color. In the range 0 to 255.
	 * @type {Number}
	 */
	alpha;
	/**
	 * @description The blue component of the color. In the range 0 to 255.
	 * @type {Number}
	 */
	blue;
	/**
	 * @description The green component of the color. In the range 0 to 255.
	 * @type {Number}
	 */
	green;
	/**
	 * @description The hue of the color as defined in the HSV color model.
	 * @type {Number}
	 */
	hue;
	/**
	 * @description The name of the color if it matches a named color, otherwise an empty string.
	 * @type {String}
	 */
	name;
	/**
	 * @description The red component of the color. In the range 0 to 255.
	 * @type {Number}
	 */
	red;
	/**
	 * @description The color code of the color.
	 * @type {Number}
	 */
	rgb;
	/**
	 * @description The saturation of the color as defined in the HSV color model.
	 * @type {Number}
	 */
	saturation;
	/**
	 * @description The value of the color as defined in the HSV color model.
	 * @type {Number}
	 */
	value;
	/**
	 * @returns Color A darker version of this color.
	 */
	dark() {};
	/**
	 * @returns Boolean true if the color is valid, otherwise false.
	 * @since 4.8.1.93
	 */
	isValid() {};
	/**
	 * @returns Color A lighter version of this color.
	 */
	light() {};
	/**
	 * @description Sets the red, green, blue and alpha values of this color to r, g, b and a, respectively.
	 * @param {Number} r - The new red value for the color.
	 * @param {Number} g - The new green value for the color.
	 * @param {Number} b - The new blue value for the color.
	 * @param {Number} b - The new alpha value for the color.
	 */
	setRgb(r, g, b, a) {};
	/**
	 * @description Sets the red, green and blue values of this color to r, g and b, respectively.
	 * @param {Number} r - The new red value for the color.
	 * @param {Number} g - The new green value for the color.
	 * @param {Number} b - The new blue value for the color.
	 */
	setRgb(r, g, b) {};
	/**
	 * @description Sets the color code of the color. The value is a bitmask on the form 0xRRGGBB, where RR=red, GG=green, and BB=blue, all as hexadecimal digits.
	 * @param {Number} colorCode - The encoded value for the color.
	 */
	setRgb(colorCode) {};

}
/**
 * A global static object available via the Global.ColorDialog variable.
 * This object provides functions to display an OS native color picker to the user - simply call the function as shown in the following example:
 */
class DzColorDialog extends QObject {
	/**
	 * @returns Color The i'th custom color in the color picker.
	 */
	customColor(i) {};
	/**
	 * @returns Number The number of custom colors in the color picker.
	 */
	customCount() {};
	/**
	 * @description Shows a color picker dialog to the user.
	 * @returns Color The color selected by the user.
	 * @param {Color} initial - The color that the dialog will start with.
	 */
	getColor(initial = Color) {};
	/**
	 * @description Set the i'th custom color in the color picker.
	 */
	setCustomColor(i, c) {};
	/**
	 * @description Set the i'th standard color in the color picker.
	 */
	setStandardColor(i, c) {};

}
/**
 * 
 */
class DzColorProperty extends DzIntProperty {
	/**
	 * @description Default Constructor. Creates a non-animatable, non-user property.
	 */
	constructor() {};
	/**
	 * @param {String} name - The name of this property.
	 * @param {Boolean} canAnimate - If true, creates an animatable property.
	 * @param {Boolean} isUserProperty - If true, creates a user property; user properties are properties that can be added/deleted by users.
	 * @param {Color} initVal - Sets the default value of this property.
	 */
	constructor(name, canAnimate, isUserProperty, initVal) {};
	/**
	 * @param {String} name - The name of this property.
	 * @param {Boolean} canAnimate - If true, creates an animatable property.
	 * @param {Boolean} isUserProperty - If true, creates a user property; user properties are properties that can be added/deleted by users.
	 */
	constructor(name, canAnimate, isUserProperty) {};
	/**
	 * @description ENUM: Hue, Saturation, and Value.
	 */
	HSV;
	/**
	 * @description ENUM: Hue, Saturation, and Lightness (or Luminosity).
	 */
	HSL;
	/**
	 * @description ENUM: Red, Green, Blue.
	 */
	RGB;
	/**
	 * @description Converts a string to an enumerated animation blend mode value.
	 * @returns AnimationBlendMode The AnimationBlendMode corresponding to str.
	 * @since 4.6.4.84
	 * @param {String} str - The string to convert.
	 */
	static animationBlendModeFromStr(str) {};
	/**
	 * @description Converts an enumerated animation blend mode value to a string.
	 * @returns String A string representation of the enumerated AnimationBlendMode value.
	 * @since 4.6.4.84
	 * @param {AnimationBlendMode} type - The AnimationBlendMode to convert.
	 */
	static animationBlendModeToStr(type) {};
	/**
	 * @returns AnimationBlendMode The animation blend mode for the property.
	 * @since 4.6.4.84
	 */
	getAnimationBlendMode() {};
	/**
	 * @returns Color The color value of the property at the current time.
	 */
	getColorValue() {};
	/**
	 * @returns Color The color value of the property at the given time.
	 * @param {DzTime} tm - The scene time to get the color value at.
	 */
	getColorValue(tm) {};
	/**
	 * @returns Color The default color value of the property.
	 */
	getDefaultColorValue() {};
	/**
	 * @returns Color The raw color value of the property at the given key.
	 * @param {Number} i - The index of the key to get the color value of.
	 */
	getKeyColorValue(i) {};
	/**
	 * @returns Color The raw color value of the property at the given time.
	 * @param {DzTime} tm - The scene time at which to get the raw color value.
	 */
	getRawColorValue(tm) {};
	/**
	 * @returns Color The raw color value of the property.
	 */
	getRawColorValue() {};
	/**
	 * @description Sets the animation blend mode for the property.
	 * @since 4.6.4.84
	 * @param {AnimationBlendMode} mode - The animation blend mode to set.
	 */
	setAnimationBlendMode(mode) {};
	/**
	 * @description Sets the color value for this property at the given time; or the default value if this property is not animatable.
	 * @param {Color} tm - The scene time at which to set the value.
	 * @param {Color} val - The new value for the property.
	 */
	setColorValue(tm, val) {};
	/**
	 * @description Sets the color value for this property at the current time; or the default value if this property is not animatable.
	 * @param {Color} val - The new value for the property.
	 */
	setColorValue(val) {};
	/**
	 * @description Sets the default color value for this property.
	 * @param {Color} val - The new default value for the property.
	 */
	setDefaultColorValue(val) {};
	/**
	 * @description Sets the color value of this property for the given key.
	 * @param {Color} i - The index of the key to set the value of.
	 * @param {Color} val - The new default value for the property.
	 */
	setKeyColorValue(i, val) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the animation blend mode for this property has changed.
	 * @signature `"animationBlendModeChanged()"`
	 * @event
	 */
	animationBlendModeChanged() {};

}
/**
 * 
 */
class DzColorWgt extends DzWidget {
	/**
	 * @description Creates a color widget as a child of the given parent widget.
	 * @param {DzWidget} parent - The widget parent for the color widget.
	 */
	constructor(parent) {};
	/**
	 * @description Holds the default float value of the widget. 4.11.0.371
	 * @type {DzFloatColor}
	 */
	defaultFloatColorValue;
	/**
	 * @description Holds the deafult value of the widget.
	 * @type {Color}
	 */
	defaultValue;
	/**
	 * @description Holds whether or not values of each component are displayed as integers in the [0, 255] range, or as floating point values. true by default.
	 * @type {Boolean}
	 */
	displayAsInt;
	/**
	 * @description Holds whether or not the float color value of this control is clamped.
	 * @type {Boolean}
	 */
	floatClamped;
	/**
	 * @description Holds the current float value of the widget.
	 * @type {DzFloatColor}
	 */
	floatColorValue;
	/**
	 * @description Holds the maximum allowable value for any component of a float color.
	 * @type {Number}
	 */
	floatMax;
	/**
	 * @description Holds the minimum allowable value for any component of a float color.
	 * @type {Number}
	 */
	floatMin;
	/**
	 * @description Holds whether or not the widget is considered to have an 'indeterminate' or 'Multiple' value. false by default.
	 * @type {Boolean}
	 */
	indeterminate;
	/**
	 * @description Holds whether or not the value is currently being edited. (Read Only)
	 * @type {Boolean}
	 */
	isEditing;
	/**
	 * @description Holds whether or not the default value is restorable if the user holds the [Shift+Alt] key when clicked.
	 * @type {Boolean}
	 */
	restorable;
	/**
	 * @description Holds the current value of the widget.
	 * @type {Color}
	 */
	value;
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the color is changed.
	 * @signature `"colorChanged(const QColor&)"`
	 * @event
	 */
	colorChanged(color) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when an editing operation on the slider ends - e.g. the user finishes spinning a color field.
	 * @signature `"editEnd()"`
	 * @event
	 */
	editEnd() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when an editing operation on the widget begins - e.g. the user starts spinning a color field.
	 * @signature `"editStart()"`
	 * @event
	 */
	editStart() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the color is changed.
	 * @signature `"floatColorChanged(const DzFloatColor&)"`
	 * @event
	 */
	floatColorChanged(color) {};

}
/**
 * DzComboBox provides a means of presenting a list of options to the user in a way that takes up the minimum amount of screen space.
 */
class DzComboBox extends DzWidget {
	/**
	 * @description Creates a combobox as a child of the given parent widget.
	 * @param {DzWidget} parent - The widget parent for the combobox.
	 */
	constructor(parent) {};
	/**
	 * @description Holds the number of items in the combobox. (Read Only)
	 * @type {Number}
	 */
	count;
	/**
	 * @description Holds the index of the currently selected item in the combobox.
	 * @type {Number}
	 */
	currentItem;
	/**
	 * @description Holds the text of the currently selected item in the combobox.
	 * @type {String}
	 */
	currentText;
	/**
	 * @description Holds the policy used to determine where user-inserted items should appear in the combobox.
	 * @type {insertPolicy}
	 */
	insertPolicy;
	/**
	 * @description Holds the maximum number of items allowed on screen; 10 by default.
	 * @type {Number}
	 */
	maxVisibleItems;
	/**
	 * @description Holds the minimum number of characters that should fit in the combobox.
	 * @type {Number}
	 */
	minimumContentsLength;
	/**
	 * @description Holds the policy describing how the size of the combobox changes when the content changes.
	 * @type {sizeAdjustPolicy}
	 */
	sizeAdjustPolicy;
	/**
	 * @description ENUM: TODO: Add description.
	 */
	NoInsert;
	/**
	 * @description ENUM: TODO: Add description.
	 */
	InsertAtTop;
	/**
	 * @description ENUM: TODO: Add description.
	 */
	InsertAtCurrent;
	/**
	 * @description ENUM: TODO: Add description.
	 */
	InsertAtBottom;
	/**
	 * @description ENUM: TODO: Add description.
	 */
	InsertAfterCurrent;
	/**
	 * @description ENUM: TODO: Add description.
	 */
	InsertBeforeCurrent;
	/**
	 * @description ENUM: TODO: Add description.
	 */
	InsertAlphabetically;
	/**
	 * @description ENUM: TODO: Add description.
	 */
	AdjustToContents;
	/**
	 * @description ENUM: TODO: Add description.
	 */
	AdjustToContentsOnFirstShow;
	/**
	 * @description ENUM: TODO: Add description.
	 */
	AdjustToMinimumContentsLength;
	/**
	 * @description ENUM: TODO: Add description.
	 */
	AdjustToMinimumContentsLengthWithIcon;
	/**
	 * @description Adds text to the list of items in the combobox.
	 */
	addItem(text, userData = "") {};
	/**
	 * @description Adds each of the strings in texts to the combobox
	 */
	addItems(texts) {};
	/**
	 * @description Removes all items from the combobox.
	 */
	clear() {};
	/**
	 * @returns Number The index of the item containing data; otherwise returns -1.
	 */
	findData(data) {};
	/**
	 * @returns Number The index of the item containing text; otherwise returns -1.
	 */
	findText(text) {};
	/**
	 * @description Inserts the text and userData into the combobox at index. If index is equal to or higher than the total number of items, the new item is appended to the list of existing items. If index is zero or negative, the new item is prepended to the list of existing items.
	 */
	insertItem(index, text, userData = "") {};
	/**
	 * @description Inserts the strings in list into the combobox as separate items, starting at index.
	 */
	insertItems(index, list) {};
	/**
	 * @description Inserts a separator into the combobox at index.
	 */
	insertSeparator(index) {};
	/**
	 * @returns String The data of the item at index.
	 */
	itemData(index) {};
	/**
	 * @returns String The text of the item at index.
	 */
	itemText(index) {};
	/**
	 * @description Removes the item at index from the list of items.
	 */
	removeItem(index) {};
	/**
	 * @description Sets the data for the item at index.
	 */
	setItemData(index, value) {};
	/**
	 * @description Sets the text for the item at index.
	 */
	setItemText(index, text) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when an item is selected.
	 * @signature `"activated(int)"`
	 * @event
	 */
	activated(index) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when an item is selected.
	 * @signature `"activated(const QString&)"`
	 * @event
	 */
	activated(text) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the current index changes.
	 * @signature `"currentIndexChanged(const QString&)"`
	 * @event
	 */
	currentIndexChanged(text) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the current index changes.
	 * @signature `"currentIndexChanged(int)"`
	 * @event
	 */
	currentIndexChanged(index) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the highlighted item changes.
	 * @signature `"highlighted(const QString&)"`
	 * @event
	 */
	highlighted(text) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the highlighted item changes.
	 * @signature `"highlighted(int)"`
	 * @event
	 */
	highlighted(index) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the text of the box changes, passes the new text of the box.
	 * @signature `"textChanged(const QString&)"`
	 * @event
	 */
	textChanged(text) {};

}
/**
 * A DzComboEdit provides a compound widget comprised of a line edit and a button that, when clicked, causes a menu to be displayed. Selecting one of the items in the popup menu causes the value of the editor to update with the `text` of the selected item by default.
 */
class DzComboEdit extends DzWidget {
	/**
	 * @description Creates a combo edit as a child of the given parent widget.
	 * @param {DzWidget} parent - The widget parent for this widget.
	 * @param {Boolean} updateOnSelect - Whether the editor should automatically update when an item is selected.
	 */
	constructor(parent, updateOnSelect = true) {};
	/**
	 * @description Holds whether or not the input satisfies the inputMask and the validator. (Read Only)
	 * @type {Boolean}
	 */
	acceptableInput;
	/**
	 * @description Holds the alignment of the text displayed in the text field.
	 * @type {DzWidget}
	 */
	alignment;
	/**
	 * @description Holds the position of the cursor in the text field.
	 * @type {Number}
	 */
	cursorPosition;
	/**
	 * @description Holds the input mask for the text field. Set this to an empty string to clear the input mask.
	 * @type {String}
	 */
	inputMask;
	/**
	 * @description Holds the maximum length of the text in the text field.
	 * @type {Number}
	 */
	maxLength;
	/**
	 * @description Holds whether or not clicking an item in the menu causes only its text (default - false), or the entire path (true), to be inserted into the field.
	 * @type {Boolean}
	 */
	menuSelectionIncludesPath;
	/**
	 * @description Holds whether or not the text in the text field has been modified.
	 * @type {Boolean}
	 */
	modified;
	/**
	 * @description Holds the text to display to the user when text is an empty string; e.g., a hint.
	 * @type {String}
	 */
	placeholderText;
	/**
	 * @description Holds whether or not the text field can be manually written to by the user.
	 * @type {Boolean}
	 */
	readOnly;
	/**
	 * @description Holds whether or not a redo operation is available. (Read Only)
	 * @type {Boolean}
	 */
	redoAvailable;
	/**
	 * @description Holds the character(s) to detect in inserted items as the delimiter for constructing submenus.
	 * @type {String}
	 */
	submenuDelimiter;
	/**
	 * @description Holds the text of the text field.
	 * @type {String}
	 */
	text;
	/**
	 * @description Holds whether or not an undo operation is available. (Read Only)
	 * @type {Boolean}
	 */
	undoAvailable;
	/**
	 * @description Holds whether or not clicking the button causes a menu (default - false), or a treeview (true) to be displayed.
	 * @type {Boolean}
	 */
	usePathPopUp;
	/**
	 * @description Adds an item with the given text to the list of options in the popup. The item is appended to the list of existing items.
	 * @param {String} item - The item to add. A separator can be created in a menu by using a single hyphen ("-") character. Sub-menus can be created by using two consecutive greater than ("»") characters as a delimiter between the entries of a given hierarchy.
	 * @param {Boolean} validate - If true, causes the item to be checked for validity before being added to the list. (since 4.12.1.29)
	 */
	addItem(item, validate = true) {};
	/**
	 * @description Adds each of the strings in the given list to the list of options in the popup. Each item is appended to the list of existing items in turn.
	 * @since 4.12.1.29
	 * @param {Array} items - The list of items to add. Separators can be created in a menu by using a single hyphen ("-") character. Sub-menus can be created by using two consecutive greater than ("»") characters as a delimiter between the entries of a given hierarchy.
	 * @param {Boolean} validate - If true, causes each item to be checked for validity before being added to the list. (since 4.12.1.29)
	 */
	addItems(items, validate = true) {};
	/**
	 * @description If text is currently selected, it will be deleted and the cursor moved to the beginning of the selection. If no text is selected, the cursor will be moved one character to the left and the character will be deleted.
	 * @since 4.12.0.80
	 */
	backspace() {};
	/**
	 * @description Removes all strings used to build the list of options in the popup.
	 */
	clear() {};
	/**
	 * @description Clears the text in the editor.
	 * @since 4.12.0.80
	 */
	clearText() {};
	/**
	 * @description Copies the selected text into the clipboard.
	 * @since 4.12.0.80
	 */
	copy() {};
	/**
	 * @description Moves the cursor backward the given number of characters.
	 * @since 4.12.0.80
	 * @param {Boolean} mark - If true, each character that is stepped over will be added to the current selection.
	 * @param {Number} steps - The number of characters to move the cursor.
	 */
	cursorBackward(mark = false, steps = 1) {};
	/**
	 * @description Moves the cursor forward the given number of characters.
	 * @since 4.12.0.80
	 * @param {Boolean} mark - If true, each character that is stepped over will be added to the current selection.
	 * @param {Number} steps - The number of characters to move the cursor.
	 */
	cursorForward(mark = false, steps = 1) {};
	/**
	 * @description Moves the cursor backward one word.
	 * @since 4.12.0.80
	 * @param {Boolean} mark - If true, the word will be added to the current selection.
	 */
	cursorWordBackward(mark = false) {};
	/**
	 * @description Moves the cursor forward one word.
	 * @since 4.12.0.80
	 * @param {Boolean} mark - If true, the word will be added to the current selection.
	 */
	cursorWordForward(mark = false) {};
	/**
	 * @description Copies the selected text into the clipboard and removes it from the editor.
	 * @since 4.12.0.80
	 */
	cut() {};
	/**
	 * @description If text is currently selected, it will be deleted and the cursor moved to the beginning of the selection. If no text is selected, the character to the right of the cursor will be deleted.
	 * @since 4.12.0.80
	 */
	del() {};
	/**
	 * @description Clears any selection in the editor.
	 * @since 4.12.0.80
	 */
	deselect() {};
	/**
	 * @description Moves the cursor to the end of the line.
	 * @since 4.12.0.80
	 * @param {Boolean} mark - If true, the text from the cursor's previous position to the end of the line will be added to the current selection.
	 */
	end(mark = false) {};
	/**
	 * @description Search the list of items in the popup for the specified text. The search is not case sensitive.
	 * @returns Number The index of the item that represents the given text (if any), otherwise -1.
	 * @param {String} text - The item text to find.
	 */
	findItem(text) {};
	/**
	 * @returns DzSettings The settings for the validator (if any) set on this combo edit, otherwise null.
	 * @since 4.12.1.97
	 */
	getValidatorSettings() {};
	/**
	 * @returns Boolean true if the input satisfies the inputMask and the validator, otherwise false.
	 * @since 4.12.0.80
	 */
	hasAcceptableInput() {};
	/**
	 * @returns Boolean true if some or all of the text in the text field is selected, otherwise false.
	 * @since 4.12.0.80
	 */
	hasSelectedText() {};
	/**
	 * @description Moves the cursor to the beginning of the line.
	 * @since 4.12.0.80
	 * @param {Boolean} mark - If true, the text from the beginning of the line to the cursor's previous position will be added to the current selection.
	 */
	home(mark = false) {};
	/**
	 * @description Inserts an item with the given text to the list of options in the popup at the given index.
	 * @param {String} index - The index to insert the item at. If the index is equal to or higher than the total number of items, the new item is appended to the list of existing items. If the index is zero or negative, the new item is prepended to the list of existing items.
	 * @param {String} item - The item to insert. A separator can be created in a menu by using a single hyphen ("-") character. Sub-menus can be created by using two consecutive greater than ("»") characters as a delimiter between the entries of a given hierarchy.
	 * @param {Boolean} validate - If true, causes the item to be checked for validity before being inserted into the list. (since 4.12.1.29)
	 */
	insertItem(index, item, validate = true) {};
	/**
	 * @description Inserts each of the strings in the given list to the list of options in the popup at the given index. Each item is appended to the list of existing items, from the given index, in turn.
	 * @param {Array} index - The index to insert the items at. If the index is equal to or higher than the total number of items, the new items are appended to the list of existing items. If the index is zero or negative, the new items are prepended to the list of existing items.
	 * @param {Array} items - The list of items to insert. Separators can be created in a menu by using a single hyphen ("-") character. Sub-menus can be created by using two consecutive greater than ("»") characters as a delimiter between the entries of a given hierarchy.
	 * @param {Boolean} validate - If true, causes each item to be checked for validity before being inserted into the list. (since 4.12.1.29)
	 */
	insertItems(index, items, validate = true) {};
	/**
	 * @returns Array The list of strings used to build the list of options in the popup.
	 */
	items() {};
	/**
	 * @description Inserts any text on the clipboard into the line at the cursor's current position.
	 * @since 4.12.0.80
	 */
	paste() {};
	/**
	 * @description If redoAvailable is true, redoes the next operation in the editor.
	 * @since 4.12.0.80
	 */
	redo() {};
	/**
	 * @description Removes the specified item from the list of options in the popup.
	 * @param {String} item - The item to remove.
	 */
	removeItem(item) {};
	/**
	 * @description Selects all the text in the editor.
	 * @since 4.12.0.80
	 */
	selectAll() {};
	/**
	 * @returns String The currently selected text (if any) in the text field.
	 * @since 4.12.0.80
	 */
	selectedText() {};
	/**
	 * @returns Number The position in the editor where the current selection begins.
	 * @since 4.12.0.80
	 */
	selectionStart() {};
	/**
	 * @description Causes this combo edit to only accept characters that represent double precision floating point (decimal) numbers.
	 * @since 4.11.0.346
	 * @param {Number} bottom - The minimum acceptable value.
	 * @param {Number} top - The maximum acceptable value.
	 * @param {Number} decimals - The maximum number of digits after the decimal point to allow.
	 * @param {Boolean} scientific - If true, the text of the editor is expressed in scientific form; i.e., it may have an exponent part; i.e., 1.5E-2. If false (default), the text of the editor is expressed as a standard number; i.e., 0.015.
	 */
	setDoubleValidator(bottom, top, decimals, scientific = false) {};
	/**
	 * @description Causes this combo edit to only accept characters that represent whole numbers (integers).
	 * @since 4.11.0.346
	 * @param {Number} minimum - The minimum acceptable value.
	 * @param {Number} maximum - The maximum acceptable value.
	 */
	setIntValidator(minimum, maximum) {};
	/**
	 * @description Causes this combo edit to only accept characters that satisfy a Regular Expression.
	 * @since 4.11.0.346
	 * @param regx - The Regular Expression to use.
	 * @param {Boolean} caseSensitive - If true (default), the expression is case sensitive.
	 */
	setRegExValidator(rx, caseSensitive = true) {};
	/**
	 * @description Sets the selected portion of the text in the editor.
	 * @since 4.12.0.80
	 * @param {Number} start - The position to start the selection from.
	 * @param {Number} length - The number of characters from start to select.
	 */
	setSelection(start, length) {};
	/**
	 * @description Causes this combo edit to only accept characters that satisfy a validator configured with a settings object.
	 * @since 4.12.1.97
	 * @param {DzSettings} settings - The settings to use in choosing and configuring the validator. The settings must contain a string value named "validator" that provides the type of validator to set. Valid types are: float, int, regexp, subpath, filename, nodename, nodelabel.
	 * @attention Other settings to configure a given validator can be retrieved using getValidatorSettings().
	 */
	setValidator(settings) {};
	/**
	 * @description If undoAvailable is true, undoes the last operation in the editor.
	 * @since 4.12.0.80
	 */
	undo() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the cursor moves within the field.
	 * @signature `"cursorPositionChanged(int,int)"`
	 * @event
	 */
	cursorPositionChanged(oldPos, newPos) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the Return or Enter key is pressed or the line edit loses focus.
	 * @signature `"editingFinished()"`
	 * @event
	 */
	editingFinished() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the selected item has changed.
	 * @signature `"itemChanged(const QString&)"`
	 * @event
	 */
	itemChanged(item) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the Return or Enter key is pressed.
	 * @signature `"returnPressed()"`
	 * @event
	 */
	returnPressed() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the selection within the field changes.
	 * @signature `"selectionChanged()"`
	 * @event
	 */
	selectionChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the text has changed.
	 * @signature `"textChanged(const QString&)"`
	 * @event
	 */
	textChanged(text) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the text is edited.
	 * @signature `"textEdited(const QString&)"`
	 * @event
	 */
	textEdited(text) {};

}
/**
 * A "Compatibility Base" is described as an identifier that is used to represent the base concept of an object that can exist in the scene - e.g., a "Figure."
 * A "Compatibility Filter" is described as an identifier that is used to represent a specific shape of said object in the scene - e.g., a "Character."
 * Conceptually, compatibility bases support a hierarchical structure in a similar fashion, although not typically to the same depth, as categories.
 * The "Compatibility Base" container type serves to provide a means of working with assets in order to define/determine which ones provide a particular object and/or which ones are regarded as being compatible with a particular object.
 * See Also:
 */
class DzCompatibilityBaseAssetContainer extends DzRefCountedItem, DzAbstractAssetContainer {
	/**
	 * @description Holds whether or not this compatibility base is a filter. (Read Only)
	 * @type {Boolean}
	 */
	isFilter;
	/**
	 * @description Holds whether this compatibility base is owned by a vendor or by the user. (Read Only)
	 * @type {Boolean}
	 */
	isVendor;
	/**
	 * @returns String The full path of the compatibility base that this container represents.
	 * @since 4.11.0.93
	 */
	getPath() {};
	/**
	 * @description Attempts to update the child containers of this container.
	 * @returns Boolean true if the update was successful, otherwise false.
	 */
	updateChildren() {};

}
/**
 * Represents a file in the content library that can be loaded/imported. Also provides functionality for moving the file to a new location, renaming the file, and deleting the file from the library.
 * See Also:
 */
class DzContentFile extends DzRefCountedItem, QObject {
	/**
	 * @description Holds whether or not the file can be deleted. (Read Only)
	 * @type {Boolean}
	 */
	canDelete;
	/**
	 * @description Holds whether or not the file can be renamed. (Read Only)
	 * @type {Boolean}
	 */
	canRename;
	/**
	 * @description Holds whether or not a companion file is a script file. (Read Only)
	 * @type {Boolean}
	 */
	companionIsScript;
	/**
	 * @description Holds the path of the companion script for non-native files. (Read Only)
	 * @type {String}
	 */
	companionPath;
	/**
	 * @description Holds the full path of the file. (Read Only)
	 * @type {String}
	 */
	fullPath;
	/**
	 * @description Holds whether or not a non-native file has a native companion file. (Read Only)
	 * @type {Boolean}
	 */
	hasCompanion;
	/**
	 * @description Holds whether or not a non-native file has a companion script file. (Read Only)
	 * @type {Boolean}
	 */
	hasCompanionScript;
	/**
	 * @description Holds the icon for the file. (Read Only)
	 * @type {Pixmap}
	 */
	icon;
	/**
	 * @description Holds whether or not the file is a native content file . (Read Only)
	 * @type {Boolean}
	 */
	isNative;
	/**
	 * @description Holds whether or not the file is a script file . (Read Only)
	 * @type {Boolean}
	 */
	isScript;
	/**
	 * @description Holds the label of the file, as displayed to the user. (Read Only)
	 * @type {String}
	 */
	label;
	/**
	 * @description Holds the name of the file. (Read Only)
	 * @type {String}
	 */
	name;
	/**
	 * @description Holds the small icon for the file. (Read Only)
	 * @type {Pixmap}
	 */
	smallIcon;
	/**
	 * @description Removes this file from its content folder. The default implementation of this function deletes the content file and any associated thumbnail image from the disk, so use with care!
	 * @returns Boolean true if the file was removed successfully, otherwise false.
	 */
	deleteFile() {};
	/**
	 * @returns DzContentFolder The current parent folder of this file.
	 */
	getFolder() {};
	/**
	 * @returns DzContentFile The next sibling of this file.
	 */
	getNext() {};
	/**
	 * @description Force the file to reload its icon.
	 */
	reloadIcon() {};
	/**
	 * @description Rename the file to the given name.
	 * @returns Boolean true if the file was successfully renamed, otherwise false.
	 * @param name - The new name for the file.
	 */
	rename(newName) {};

}
/**
 * Represents a folder in the content library that holds DzContentFile objects as well as other DzContentFolder objects.
 * See Also:
 */
class DzContentFolder extends DzBase, DzRefCountedItem {
	/**
	 * @description Holds whether or not a sub folder can be added in this folder. (Read Only)
	 * @type {Boolean}
	 */
	canAddSubFolder;
	/**
	 * @description Holds whether or not this folder can be deleted. (Read Only)
	 * @type {Boolean}
	 */
	canDelete;
	/**
	 * @description Holds whether or not this folder can be renamed. (Read Only)
	 * @type {Boolean}
	 */
	canRename;
	/**
	 * @description Holds whether or not the files of this folder are loaded. (Read Only)
	 * @type {Boolean}
	 */
	filesAreLoaded;
	/**
	 * @description Holds the name of the folder on disk. (Read Only)
	 * @type {String}
	 */
	folderName;
	/**
	 * @description Holds whether or not the subfolders of this folder are loaded. (Read Only)
	 * @type {Boolean}
	 */
	foldersAreLoaded;
	/**
	 * @description Holds the type of this folder. (Read Only)
	 * @type {FolderType}
	 */
	folderType;
	/**
	 * @description Holds the full path of the folder on disk. (Read Only)
	 * @type {String}
	 */
	fullPath;
	/**
	 * @description Holds the icon of the folder. (Read Only)
	 * @type {Pixmap}
	 */
	icon;
	/**
	 * @description Holds whether or not this folder is a built-in content folder. (Read Only)
	 * @type {Boolean}
	 */
	isBuiltInContentFolder;
	/**
	 * @description Holds the label of the folder as it is displayed to the user. (Read Only)
	 * @type {String}
	 */
	label;
	/**
	 * @description ENUM: Folder containing native content.
	 */
	NATIVE_TYPE;
	/**
	 * @description ENUM: Folder containing Poser content.
	 */
	POSER_TYPE;
	/**
	 * @description ENUM: Folder containing other importable content.
	 */
	IMPORT_TYPE;
	/**
	 * @description Adds a new subfolder with the given name to this folder.
	 * @returns Boolean true if the new subfolder was created successfully, otherwise false.
	 * @param {String} folderName - The name of the new sub folder.
	 */
	addSubFolder(folderName) {};
	/**
	 * @returns Boolean true if the file is a type that can be moved or copied to this folder, otherwise false.
	 * @param {DzContentFile} file - The file to test for moving.
	 */
	canMoveFile(file) {};
	/**
	 * @description Copies the given content file to this folder.
	 * @returns Boolean true if the file was copied successfully, otherwise false.
	 * @param {DzContentFile} file - The file to copy to this folder.
	 */
	copyFile(file) {};
	/**
	 * @description Removes this content folder. The default implementation of this function deletes all files and subfolders in this directory from the disk, so use with care!
	 * @returns Boolean true if the file was removed successfully, otherwise false.
	 */
	deleteFolder() {};
	/**
	 * @returns DzContentFile The first file in this folder (if any), otherwise null.
	 */
	getFirstFile() {};
	/**
	 * @returns DzContentFolder The first child folder (if any), otherwise null.
	 */
	getFirstFolder() {};
	/**
	 * @returns DzContentFile The first hidden file in this folder (if any), otherwise null.
	 */
	getFirstHiddenFile() {};
	/**
	 * @returns DzContentFolder The first hidden folder (if any), otherwise null.
	 */
	getFirstHiddenFolder() {};
	/**
	 * @returns DzContentFolder The next sibling folder (if any), otherwise null.
	 */
	getNext() {};
	/**
	 * @returns DzContentFolder The parent folder of this folder (if any), otherwise null.
	 */
	getParent() {};
	/**
	 * @returns Boolean true if this folder has subfolders, otherwise false.
	 */
	hasSubFolders() {};
	/**
	 * @returns Boolean true if the folder can be modified, otherwise false.
	 */
	isModifiable() {};
	/**
	 * @description Moves the given content file to this folder.
	 * @returns Boolean true if the file was moved successfully, otherwise false.
	 * @param {DzContentFile} file - The file to move to this folder.
	 */
	moveFile(file) {};
	/**
	 * @description Checks for changes in sub folders and files (if loaded).
	 * @returns Boolean true if a change in subfolders was found and the tree needs to be reloaded, otherwise false.
	 * @param {Boolean} reloadIcons - If true, the icons will be reloaded from disk.
	 */
	refresh(reloadIcons = false) {};
	/**
	 * @description Rename the folder to the given name.
	 * @returns Boolean true if the folder was successfully renamed, otherwise false.
	 * @param {String} newName - The new name for the folder.
	 */
	rename(newName) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when a new folder is added.
	 * @signature `"addedFolder(DzContentFolder*)"`
	 * @event
	 */
	addedFolder(newFolder) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the file list has changed.
	 * @signature `"fileListChanged()"`
	 * @event
	 */
	fileListChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when a folder is added or removed.
	 * @signature `"folderListChanged()"`
	 * @event
	 */
	folderListChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when a folder is removed.
	 * @signature `"removedFolder(DzContentFolder*)"`
	 * @event
	 */
	removedFolder(folder) {};

}
/**
 * Responsible for the management of folder/file hierarchies associated with "content" (digital assets).
 * There is only one instance of this manager in an application. This instance is created and owned by DzApp. Request the instance via DzApp.getContentMgr().
 * See Also:
 */
class DzContentMgr extends DzBase {
	/**
	 * @description Holds whether or not the content manager automatically refreshes itself.
	 * @type {Boolean}
	 */
	autoRefresh;
	/**
	 * @description Holds the maximum length of the File > Open Recent submenu, in the main menu bar.
	 * @type {Number}
	 */
	maxRecentFiles;
	/**
	 * @description Holds the path of the scene that will load when the scene is cleared (if any).
	 * @type {String}
	 */
	newScene;
	/**
	 * @description Holds whether or not the built-in content is shown in the content panes.
	 * @type {Boolean}
	 */
	showBuiltInContent;
	/**
	 * @description Holds the path of the scene that will load on startup (if any).
	 * @type {String}
	 */
	startupScene;
	/**
	 * @description ENUM: Represents the directories that are mapped and expected to contain files in the DAZ Studio native file format.
	 */
	NativeDirs;
	/**
	 * @description ENUM: Represents the directories that are mapped and expected to contain files in the Poser file formats.
	 */
	PoserDirs;
	/**
	 * @description ENUM: Represents the directories that are mapped and expected to contain files in formats supported by the various importers a user has installed (with the exception of the Poser format importer - see PoserDirs).
	 */
	ImportDirs;
	/**
	 * @description ENUM: Represents the built-in directories that are expected to contain files in compatible formats.
	 */
	BuiltInDirs;
	/**
	 * @description ENUM: Represents the built-in MDL directories and the directories that are expected to contain files in the MDL format. Since: 4.8.1.50
	 */
	MDLDirs;
	/**
	 * @description ENUM: Represents the directories managed by the database, a given storeId_productId subdirectory, within a CloudDir directory. Since: 4.9.0.46
	 */
	CloudDB;
	/**
	 * @description ENUM: Represents the mapped cloud directory and any ./data/cloud subdirectory located within NativeDirs and PoserDirs. Since: 4.9.0.46
	 */
	CloudDir;
	/**
	 * @description ENUM: Represents the directory types defined by NativeDirs and BuiltInDirs (typically used to provide legacy support for methods that now use this enum).
	 */
	NativeAndBuiltInDirs;
	/**
	 * @description ENUM: Represents the directory types defined by NativeDirs and BuiltInDirs, CloudDir, and CloudDB.
	 */
	CloudNativeAndBuiltInDirs;
	/**
	 * @description ENUM: Represents the directory types defined by NativeDirs and BuiltInDirs, PoserDirs, ImportDirs, and MDLDirs. Since: 4.9.0.51
	 */
	AllLocalNonCloudDirs;
	/**
	 * @description ENUM: Represents the directory types defined by NativeDirs and BuiltInDirs, PoserDirs, ImportDirs, MDLDirs, and CloudDir. Since: 4.9.0.51
	 */
	AllLocalDirs;
	/**
	 * @description ENUM: Represents all directory types except those defined by MDLDirs, CloudDir and CloudDB. The "all" prior to 4.8.
	 */
	AllDirs;
	/**
	 * @description ENUM: Represents all directory types. Since: 4.9.0.51
	 */
	AllDirsAndCloud;
	/**
	 * @returns String Prefix where cloud places installed products.
	 * @since 4.9.0.46
	 */
	static getCloudPathPrefix() {};
	/**
	 * @description Checks the given node for a source file data item, and returns the path of the source file if one is found.
	 * @returns String The path of the source file for the node if the node contains a source file data item, otherwise an empty string.
	 * @param {DzNode} node - The scene node to get the source file of.
	 */
	static getContentPath(node) {};
	/**
	 * @description Adds a native content directory to the list.
	 * @param {String} directory - The path of the native content directory to add.
	 * @param {Boolean} saveSetting - If true, causes the native content directory mappings to be saved immediately instead of when the application is closed.
	 */
	addContentDirectory(directory, saveSetting = true) {};
	/**
	 * @description Adds an import directory to the list.
	 * @param {String} directory - The name of the directory to add.
	 * @param {Boolean} saveSetting - If true, causes the Import directory mappings to be saved immediately instead of when the application is closed.
	 */
	addImportDirectory(directory, saveSetting = true) {};
	/**
	 * @description Adds a directory where MDL files can reside to the list.
	 * @since 4.8.0.23
	 * @param {String} directory - The name of the directory to add.
	 * @param {Boolean} saveSetting - If true, causes the MDL directory mappings to be saved immediately instead of when the application is closed.
	 */
	addMDLDirectory(directory, saveSetting = true) {};
	/**
	 * @description Adds a Poser import content directory to the list.
	 * @param {String} directory - The Poser content directory to add.
	 * @param {Boolean} saveSetting - If true, causes the Poser directory mappings to be saved immediately instead of when the application is closed.
	 * @attention Poser import paths are folders one level above any Poser Runtime folder.
	 */
	addPoserDirectory(directory, saveSetting = true) {};
	/**
	 * @description Adds a file to the list of recent open files.
	 * @param {String} filename - The path of the file to add.
	 */
	addRecentFile(filename) {};
	/**
	 * @description Clears the list of recent open files.
	 */
	clearRecentFileList() {};
	/**
	 * @description Attempts to locate dirPath among the mapped native content directories.
	 * @returns Boolean true if the directory is mapped as a native content directory, otherwise false.
	 * @since 4.5.0.124
	 * @param {String} dirPath - The directory path to locate.
	 */
	contentDirectoryIsMapped(dirPath) {};
	/**
	 * @description Displays a dialog to the user to perform a Poser content search on the local machine.
	 * @returns Boolean true if the user accepted and a search was performed, otherwise false.
	 */
	doContentSearch() {};
	/**
	 * @description Causes the content manager to check the number of mapped content directories, and display a warning to the user if it is excessive.
	 */
	doDirNumCheck() {};
	/**
	 * @description Notifies the content manager that a new content file has been saved.
	 */
	fileCreated(filename) {};
	/**
	 * @description Given an absolute path, this method traverses the content directories and attempts to find the base (mapped) folder.
	 * @returns DzContentFolder The given content folder if successful, otherwise NULL.
	 * @since 4.8.1.51
	 * @param {DirectoryTypes} dirTypes - Bitwise OR of flags for which directory types to search.
	 * @param {String} path - The absolute path.
	 */
	findBaseDirectory(dirTypes, path) {};
	/**
	 * @description Given an absolute path, this method traverses the content directories and attempts to find the base (mapped) folder.
	 * @returns DzContentFolder The given content folder if successful, otherwise NULL.
	 * @param {String} path - The absolute path.
	 * @param {Boolean} useImportFolders - If true, the import folders will also be searched.
	 */
	findBaseDirectory(path, useImportFolders) {};
	/**
	 * @description Given a partial path (a file path that is relative to a content directory) this function traverses all folders of the specified mapped directory types in the following order (CloudDB, CloudDir, NativeDirs, PoserDirs, ImportDirs, MDLDirs, BuiltInDirs)
	 * @returns String The full path to the file if successful, otherwise an empty string.
	 * @param {String} partialPath - The relative path to the file to find.
	 * @param {DirectoryTypes} dirTypes - Bitwise OR of flags for which directory types to search.
	 */
	findFile(partialPath, dirTypes = CloudNativeAndBuiltInDirs) {};
	/**
	 * @description Finds the source path for a node in the scene.
	 * @returns String The source path of the node.
	 * @param {DzNode} sceneNode - The node to find the source path for.
	 */
	findSourcePathForNode(sceneNode) {};
	/**
	 * @description Attempts to locate relativePath by pre-pending the path information for each mapped content directory.
	 * @returns String The absolute path for the file if it can be found, otherwise an empty string.
	 * @since 4.8.1.51
	 * @param {DirectoryTypes} dirTypes - Bitwise OR of flags for which directory types to search.
	 * @param {String} relativePath - The relative path to find.
	 * @param {String} preferredPath - (Optional) If provided, first directory to check for.
	 */
	getAbsolutePath(dirTypes, relativePath, preferredPath = "") {};
	/**
	 * @description Attempts to locate relativePath by pre-pending the path information for each mapped content directory.
	 * @returns String The absolute path for the file if it can be found, otherwise an empty string.
	 * @param {String} relativePath - The relative path to find.
	 * @param {Boolean} useImportFolders - If true, the mapped import folders will also be searched.
	 * @param {String} preferredPath - (Optional) If provided, first directory to check for.
	 */
	getAbsolutePath(relativePath, useImportFolders, preferredPath = "") {};
	/**
	 * @description Attempts to locate relativePath by pre-pending the path information for each mapped content directory.
	 * @returns Array A list of absolute paths for the file if it can be found, otherwise an empty list.
	 * @since 4.8.1.51
	 * @param {DirectoryTypes} dirTypes - Bitwise OR of flags for which directory types to search.
	 * @param {String} relativePath - The relative path to find.
	 */
	getAbsolutePaths(dirTypes, relativePath) {};
	/**
	 * @description Attempts to locate relativePath by pre-pending the path information for each mapped directory.
	 * @returns Array A list of absolute paths for the file if it can be found, otherwise an empty list.
	 * @param {String} relativePath - The relative path to find.
	 * @param {Boolean} useImportFolders - If true, the mapped import folders will also be searched.
	 */
	getAbsolutePaths(relativePath, useImportFolders) {};
	/**
	 * @description Attempts to locate relativePath by pre-pending the path information for each mapped content directory.
	 * @returns DzUri The URI for the file if it can be found, otherwise an empty URI.
	 * @since 4.9.0.38
	 * @param {DirectoryTypes} dirTypes - Bitwise OR of flags for which directory types to search.
	 * @param {String} relativePath - The relative path to find.
	 * @param {String} preferredPath - (Optional) If provided, first directory to check for.
	 */
	getAbsoluteUri(dirTypes, relativePath, preferredPath = "") {};
	/**
	 * @returns DzContentFolder The built-in content directory used for content and utilities that are shipped with the application.
	 */
	getBuiltInContentDirectory() {};
	/**
	 * @returns String The path of the built-in content directory used for content and utilities that are shipped with the application.
	 */
	getBuiltInContentDirectoryPath() {};
	/**
	 * @returns DzContentFolder The given built in MDL directory.
	 * @since 4.8.0.23
	 * @param {Number} which - The index of the built in MDL directory to return.
	 */
	getBuiltInMDLDirectory(which) {};
	/**
	 * @returns String The path of the given MDL directory.
	 * @since 4.8.0.23
	 * @param {Number} which - The index of the built in MDL directory to return the path of.
	 */
	getBuiltInMDLDirectoryPath(which) {};
	/**
	 * @description Attempts to locate relativePath by pre-pending the path information for the mapped cloud directory.
	 * @returns String The absolute path for the file, or an empty string if the file cannot be found.
	 * @since 4.9.0.33
	 * @param {String} relativePath - The relative path to find.
	 */
	getCloudAbsolutePath(relativePath) {};
	/**
	 * @returns DzContentFolder The directory used for content that is downloaded and installed through the application.
	 * @since 4.9.0.33
	 */
	getCloudContentDirectory() {};
	/**
	 * @returns String The path of the content directory used for content and utilities that are downloaded and installed through the application.
	 * @since 4.9.0.33
	 */
	getCloudContentDirectoryPath() {};
	/**
	 * @description Attempts to shorten absolutePath to a path that is relative to the cloud directory. If the path cannot be shortened, the original string is returned.
	 * @returns String A relative path to the file if one can be made, otherwise the original path.
	 * @since 4.9.0.33
	 * @param {String} absolutePath - The path to make relative.
	 */
	getCloudRelativePath(absolutePath) {};
	/**
	 * @returns DzContentFolder The given content directory.
	 * @param {Number} which - The index of the content directory to be returned.
	 */
	getContentDirectory(which) {};
	/**
	 * @returns String The path of the given content directory.
	 * @param {Number} which - The index of the content directory to return the path of.
	 */
	getContentDirectoryPath(which) {};
	/**
	 * @returns DzContentReplaceMgr The content replace manager that belongs to the DzContentMgr.
	 */
	getContentReplaceMgr() {};
	/**
	 * @returns String The path of the default user content directory.
	 */
	getDefaultContentDirectoryPath() {};
	/**
	 * @returns String The path of the default public/shared content directory.
	 * @since 4.11.0.248
	 */
	getDefaultSharedContentDirectoryPath() {};
	/**
	 * @returns Array A list of the URIs for the files in the specified relative paths.
	 * @since 4.9.0.38
	 * @param {DirectoryTypes} dirTypes - Bitwise OR of flags for which directory types to search.
	 * @param {Array} relativeDirPaths - The relative directory paths to list from.
	 * @param {Array} fileSuffixes - The list of filename suffixes to filter by.
	 */
	getDirectoryContentsUrisList(dirTypes, relativeDirPaths, fileSuffixes) {};
	/**
	 * @description Attempts to locate a file with the given relative path by pre-pending the path information for each mapped import directory, finally falling back to the Built-In content directory.
	 * @returns String The absolute path for the file, or an empty string if the file cannot be found.
	 * @param {String} relativePath - The relative path to find.
	 */
	getImportAbsolutePath(relativePath) {};
	/**
	 * @returns DzContentFolder The given import directory.
	 * @param {Number} which - The index of the import directory to return.
	 */
	getImportDirectory(which) {};
	/**
	 * @returns String The path of the given import directory.
	 * @param {Number} which - The index of the import directory to return the path of.
	 */
	getImportDirectoryPath(which) {};
	/**
	 * @returns Array A list of the extensions for files that can be imported.
	 * @since 4.9.4.64
	 * @attention Specifically excludes Poser file extensions even though they are technically imported.
	 */
	getImportFileExtensions() {};
	/**
	 * @description Attempts to extract the mapped directory portion of path.
	 * @returns String The portion of the absolute path that matches a mapped content directory, or an empty string if no match was found.
	 * @param {String} path - An absolute or relative path to find a corresponding content path for.
	 * @param {Boolean} useImportFolders - If true, the import folders will also be searched.
	 * @param {Boolean} isRelative - If true, path is treated as a relative path. If false, path is treated as an absolute path.
	 */
	getMappedPath(path, useImportFolders, isRelative) {};
	/**
	 * @description Attempts to extract the mapped directory portion of path.
	 * @returns String The portion of the absolute path that matches a mapped content directory, or an empty string if no match was found.
	 * @param {DirectoryTypes} dirTypes - Bitwise OR of flags for which directory types to search
	 * @param {String} path - An absolute or relative path to find a corresponding content path for.
	 * @param {Boolean} isRelative - If true, path is treated as a relative path. If false, path is treated as an absolute path.
	 */
	getMappedPath(dirTypes, path, isRelative) {};
	/**
	 * @description Attempts to locate a file with the given relative path by pre-pending the path information for each mapped MDL directory, as well as the built-in MDL directories, finally falling back to the built-in content directory.
	 * @returns String The absolute path for the file, or an empty string if the file cannot be found.
	 * @param {String} relativePath - The relative path to find.
	 */
	getMDLAbsolutePath(relativePath) {};
	/**
	 * @returns DzContentFolder The given MDL directory.
	 * @since 4.8.0.23
	 * @param {Number} which - The index of the MDL directory to return.
	 */
	getMDLDirectory(which) {};
	/**
	 * @returns String The path of the given MDL directory.
	 * @since 4.8.0.23
	 * @param {Number} which - The index of the MDL directory to return the path of.
	 */
	getMDLDirectoryPath(which) {};
	/**
	 * @description Attempts to shorten absolutePath to a path that is relative to one of the mapped MDL directories. If the path cannot be shortened, the original string is returned.
	 * @returns String A relative path to the file if one can be made, otherwise the original path.
	 * @since 4.8.0.35
	 * @param {String} absolutePath - The path to make relative.
	 */
	getMDLRelativePath(absolutePath) {};
	/**
	 * @description Attempts to locate relativePath by pre-pending the path information for each mapped native directory, finally falling back to the Built-In content directory.
	 * @returns String The absolute path for the file, or an empty string if the file cannot be found.
	 * @param {String} relativePath - The relative path to find.
	 */
	getNativeAbsolutePath(relativePath) {};
	/**
	 * @returns Array A list of the folder names that are excluded when building the native user-facing folder structure.
	 * @since 4.9.4.64
	 */
	getNativeBaseUserFacingExcludedDirs() {};
	/**
	 * @returns Array A list of the native file extensions.
	 * @since 4.9.4.64
	 */
	getNativeFileExtensions() {};
	/**
	 * @returns Number The number of content directories for imported content.
	 * @since 4.8.0.23
	 */
	getNumBuiltInMDLDirectories() {};
	/**
	 * @returns Number The number of content directories.
	 */
	getNumContentDirectories() {};
	/**
	 * @returns Number The number of content directories for imported content.
	 */
	getNumImportDirectories() {};
	/**
	 * @returns Number The number of content directories for imported content.
	 * @since 4.8.0.23
	 */
	getNumMDLDirectories() {};
	/**
	 * @returns Number The number of stored paths to Poser content directories.
	 */
	getNumPoserDirectories() {};
	/**
	 * @description Attempts to locate a file with the given relative path by pre-pending the path information for each mapped Poser directory, finally falling back to the Built-In content directory.
	 * @returns String The absolute path for the file, or an empty string if the file cannot be found.
	 * @param {String} relativePath - The relative path to find.
	 */
	getPoserAbsolutePath(relativePath) {};
	/**
	 * @returns Array A list of the folder names within a Poser runtime folder that are considered user-facing.
	 * @since 4.9.4.64
	 */
	getPoserBaseUserFacingDirs() {};
	/**
	 * @returns DzContentFolder The given Poser content directory, otherwise null.
	 * @param {Number} which - The index of the Poser directory to return.
	 */
	getPoserDirectory(which) {};
	/**
	 * @returns String The path of the given Poser content directory, otherwise an empty string.
	 * @param {Number} which - The index of the Poser directory to return the path of.
	 */
	getPoserDirectoryPath(which) {};
	/**
	 * @returns Array A list of the supported Poser file extensions.
	 * @since 4.9.4.64
	 */
	getPoserFileExtensions() {};
	/**
	 * @returns Array A list of recent open files.
	 */
	getRecentFileList() {};
	/**
	 * @description Attempts to shorten absolutePath to a path that is relative to one of the mapped content directories. If the path cannot be shortened, the original string is returned.
	 * @returns String A relative path to the file if one can be made, otherwise absolutePath.
	 * @param {String} absolutePath - The path to make relative.
	 * @param {Boolean} useImportFolders - If true, the mapped import folders will also be searched.
	 */
	getRelativePath(absolutePath, useImportFolders) {};
	/**
	 * @description Attempts to shorten absolutePath to a path that is relative to one of the mapped content directories. If the path cannot be shortened, the original path is returned.
	 * @returns String A relative path to the file if one can be made, otherwise absolutePath.
	 * @since 4.8.1.51
	 * @param {DirectoryTypes} dirTypes - Bitwise OR of flags for which directory types to search.
	 * @param {String} absolutePath - The path to make relative.
	 */
	getRelativePath(dirTypes, absolutePath) {};
	/**
	 * @description Attempts to shorten absolutePath to a list of paths that are relative to one of the mapped content directories.
	 * @returns Array A list of relative paths to the file if one can be made, otherwise absolutePath.
	 * @since 4.8.1.51
	 * @param {DirectoryTypes} dirTypes - Bitwise OR of flags for which directory types to search.
	 * @param {String} absolutePath - The path to make relative.
	 */
	getRelativePaths(dirTypes, absolutePath) {};
	/**
	 * @description Attempts to shorten absolutePath to a list of paths that are relative to one of the mapped content directories.
	 * @returns Array A list of relative paths to the file if one can be made, otherwise an empty list.
	 * @param {String} absolutePath - The path to make relative.
	 * @param {Boolean} useImportFolders - If true, the mapped import folders will also be searched.
	 */
	getRelativePaths(absolutePath, useImportFolders) {};
	/**
	 * @returns Array A list of the URIs for the entries in the specified relative paths.
	 * @since 4.11.0.120
	 * @param {DirectoryTypes} dirTypes - Bitwise OR of flags for which directory types to search.
	 * @param {Array} relDirPaths - The relative directory paths to list from.
	 * @param {DzDir.Filters} filters - Bitwise OR of filtering option flags.
	 * @param {Array} suffixes - The list of path suffixes to filter by.
	 * @param {Boolean} recurse - Whether or not to recurse folder hierarchies.
	 */
	getRelativeUrisList(dirTypes, relDirPaths, filters, suffixes, recurse) {};
	/**
	 * @description Attempts to locate dirPath among the mapped import directories.
	 * @returns Boolean true if the directory is mapped as an import directory, otherwise false.
	 * @since 4.5.0.124
	 * @param {String} dirPath - The directory path to locate.
	 */
	importDirectoryIsMapped(dirPath) {};
	/**
	 * @description Imports the file at the given path. A companion file (a DAZ Script file with the same name as the file being imported, or a DUF file if a DAZ Script does not exist) will be executed if one exists. This function should only be used in special circumstances. Use openFile() instead.
	 * @returns Boolean true if the file was imported successfully, otherwise false.
	 * @param {String} filename - The path to the file to import.
	 */
	importFile(path) {};
	/**
	 * @returns Boolean true if directory is mapped, otherwise false.
	 * @param {String} directory - The path of the directory to check.
	 */
	isDirectoryMapped(directory) {};
	/**
	 * @returns Boolean true if relativePath is considered "user facing" for the given directory type.
	 * @since 4.9.4.64
	 * @param {DirectoryTypes} dirTypes - Bitwise OR of flags for which directory types to search.
	 * @param {String} relativePath - The relative path to find.
	 */
	isUserFacingDirectoryPath(dirTypes, relativePath) {};
	/**
	 * @returns Boolean true if relativePath is considered "user facing" for the given directory type.
	 * @since 4.9.4.64
	 * @param {DirectoryTypes} dirTypes - Bitwise OR of flags for which directory types to search.
	 * @param {String} relativePath - The relative path to find.
	 */
	isUserFacingFilePath(dirTypes, relativePath) {};
	/**
	 * @description Loads an asset into the scene.
	 * @returns Boolean true if asset is loaded successfully, otherwise false. (since 4.9.3.68)
	 * @since 4.9.3.41
	 * @param {DzAsset} asset - The asset to load.
	 * @param {Boolean} merge - If true, combine the new asset with the existing scene. Othererwise, replace the existing scene with the new asset.
	 */
	loadAsset(asset, merge) {};
	/**
	 * @description Loads an asset as a new scene.
	 * @returns Boolean true if asset is loaded successfully, otherwise false. (since 4.9.3.68)
	 * @since 4.9.3.41
	 * @param {DzAsset} asset - The asset to load.
	 */
	loadAsset(asset) {};
	/**
	 * @description Attempts to locate dirPath among the mapped MDL directories.
	 * @returns Boolean true if the directory is mapped as a MDL directory, otherwise false.
	 * @since 4.8.0.23
	 * @param {String} dirPath - The directory path to locate.
	 */
	mdlDirectoryIsMapped(dirPath) {};
	/**
	 * @description Merges the contents of a list of files, either as native files or imported files, into the existing scene by calling openNativeFile() or importFile() based on the file extension. For file imports, a companion file (a DAZ Script file with the same name as the file being imported, or a DUF file if a DAZ Script does not exist) will be executed if one exists.
	 * @returns Boolean true if the file was loaded successfully, otherwise false.
	 * @param {Array} filenames - A list of the names of the files to merge into the current scene.
	 */
	mergeFiles(filenames) {};
	/**
	 * @description Loads the contents of a file, either as a native file or an imported file, by calling openNativeFile() or importFile() based on the file extension. For file imports, a companion file (a DAZ Script file with the same name as the file being imported, or a DUF file if a DAZ Script does not exist) will be executed if one exists.
	 * @returns Boolean true if the file was loaded successfully, otherwise false.
	 * @param {String} filename - The name of the file to load.
	 * @param {Boolean} merge - If true, the contents of the file will be merged into the existing scene. If false, the scene will be cleared and the contents of the file will be opened in a new scene. (applies only for native files)
	 */
	openFile(filename, merge = true) {};
	/**
	 * @description Loads the contents of a native format file into the scene. This function should only be used in special circumstances. Use openFile() instead.
	 * @returns Boolean true if the file was loaded successfully, otherwise false.
	 * @param {String} filename - The path to the native format file to open.
	 * @param {Boolean} merge - If true, the contents of the file will be merged into the existing scene. If false, the scene will be cleared and the contents of the file will be opened in a new scene.
	 */
	openNativeFile(filename, merge = true) {};
	/**
	 * @description Loads the contents of a native format file into the scene. This function should only be used in special circumstances. Use openFile() instead.
	 * @returns Boolean true if the file was loaded successfully, otherwise false.
	 * @param {String} uri - The URI of the native format file to open. This can be empty if a filename is supplied.
	 * @param {String} filename - The path to the native format file to open. This can be empty if a valid URI is supplied.
	 * @param {Boolean} merge - If true, the contents of the file will be merged into the existing scene. If false, the scene will be cleared and the contents of the file will be opened in a new scene.
	 */
	openNativeUri(uri, filename = "", merge = true) {};
	/**
	 * @description Loads the contents of a file, either as a native file or an imported file, by calling openNativeFile() or importFile() based on the file extension. For file imports, a companion file (a DAZ Script file with the same name as the file being imported, or a DUF file if a DAZ Script does not exist) will be executed if one exists.
	 * @returns Boolean true if the file was loaded successfully, otherwise false.
	 * @param {String} uri - The URI of the file to load. This can be empty if a valid filename is supplied.
	 * @param {String} filename - The name of the file to load. This can be empty if a valid uri is supplied.
	 * @param {Boolean} merge - If true, the contents of the file will be merged into the existing scene. If false, the scene will be cleared and the contents of the file will be opened in a new scene. (applies only to native files).
	 */
	openUri(uri, filename = "", merge = true) {};
	/**
	 * @description Attempts to locate dirPath path among the mapped Poser content directories.
	 * @returns Boolean true if the directory is mapped as a Poser directory, otherwise false.
	 * @param {String} dirPath - The directory path to locate.
	 */
	poserDirectoryIsMapped(dirPath) {};
	/**
	 * @description Refreshes any currently loaded content directories. Call this after any operation that makes changes to the file system, e.g. saving or deleting files, etc.
	 * @param {Boolean} reloadIcons - If true, all file icons will be reloaded - good for updating the current content directory when a file has been saved over, etc.
	 */
	refresh(reloadIcons = false) {};
	/**
	 * @description Causes assets for a given node in the scene to be reloaded, using the given settings, from source files at the given path.
	 * @returns DzError
	 * @param {DzNode} sceneNode -
	 * @param {DzSettings} settings -
	 * @param {String} srcFilePath -
	 */
	reloadAssetsFromSource(sceneNode, settings, srcFilePath = "") {};
	/**
	 * @description Causes the assets for all nodes in the scene to be reloaded from their respective source files.
	 * @returns Boolean
	 * @param {DzSettings} settings -
	 */
	reloadSceneAssetsFromSource(settings) {};
	/**
	 * @description Removes all native content mapped directories.
	 */
	removeAllContentDirectories() {};
	/**
	 * @description Removes all import content directory mappings from the list.
	 */
	removeAllImportDirectories() {};
	/**
	 * @description Removes all MDL directory mappings from the list.
	 * @since 4.8.0.23
	 */
	removeAllMDLDirectories() {};
	/**
	 * @description Removes all Poser import content directory mappings from the list.
	 */
	removeAllPoserDirectories() {};
	/**
	 * @description Removes a native content directory mapping from the list.
	 * @returns Boolean true if the directory was removed, false if the given directory is not in the list.
	 * @param {String} directory - The path of the native content directory to remove.
	 */
	removeContentDirectory(directory) {};
	/**
	 * @description Removes an import content directory mapping from the list.
	 * @returns Boolean true if the directory was removed, false if the given directory is not in the list.
	 * @param {String} directory - The path of the import content directory to remove.
	 */
	removeImportDirectory(directory) {};
	/**
	 * @description Removes a MDL directory mapping from the list.
	 * @returns Boolean true if the directory was removed, false if the given directory is not in the list.
	 * @since 4.8.0.23
	 * @param {String} directory - The path of the MDL directory to remove.
	 */
	removeMDLDirectory(directory) {};
	/**
	 * @description Removes a Poser import content directory mapping from the list.
	 * @returns Boolean true if the directory was removed, false if the given directory is not in the list.
	 * @param {String} directory - The path of the Poser import content directory to remove.
	 */
	removePoserDirectory(directory) {};
	/**
	 * @description Saves all currently mapped directories to application settings.
	 */
	saveAllMappedDirectories() {};
	/**
	 * @description Deprecated
	 */
	setCheckCompatibilityOn(useCheckCompatibility) {};
	/**
	 * @description Sets the directory for content and utilities downloaded and installed through the application.
	 * @since 4.9.0.33
	 * @param {String} directory - The path of the directory to add.
	 * @param {Boolean} saveSetting - Whether or not to save the setting immediately or wait until the application exits.
	 */
	setCloudContentDirectory(directory, saveSetting = true) {};
	/**
	 * @description Sets the list of directories for native format files.
	 * @since 4.9.0.35
	 * @param {Array} directories - The list of directory paths to set.
	 * @param {Boolean} saveSettings - Whether or not to save the settings immediately or wait until the application exits.
	 */
	setContentDirectories(directories, saveSettings = true) {};
	/**
	 * @description Sets the list of directories for other import format files.
	 * @since 4.9.0.35
	 * @param {Array} directories - The list of directory paths to set.
	 * @param {Boolean} saveSettings - Whether or not to save the settings immediately or wait until the application exits.
	 */
	setImportDirectories(directories, saveSettings = true) {};
	/**
	 * @description Sets the list of directories for Poser format files.
	 * @since 4.9.0.35
	 * @param {Array} directories - The list of directory paths to set.
	 * @param {Boolean} saveSettings - Whether or not to save the settings immediately or wait until the application exits.
	 */
	setPoserDirectories(directories, saveSettings = true) {};
	/**
	 * @description Sets whether or not to use the database.
	 * @param {Boolean} useDatabaseSearch - If true, turns database use on. If false, turns database use off.
	 */
	setUseDatabaseSearch(useDatabase) {};
	/**
	 * @description Given the filename, determines if the file should be treated as a 'merge' or an 'open' when loaded. This is determined first by content type. If that does not exist and the file is a .duf, it will attempt to retrieve the type from within the file.
	 * @returns Boolean true if the file should be merged, otherwise false.
	 * @param {String} filename - The name of the file to check.
	 */
	shouldMerge(filename) {};
	/**
	 * @description Deprecated
	 * @returns Boolean
	 */
	usingCheckCompatibility() {};
	/**
	 * @returns Boolean true if database use is turned on, otherwise false.
	 */
	usingDatabaseSearch() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the enabled state of the auto refresh has changed.
	 * @signature `"autoRefreshChanged(bool)"`
	 * @event
	 */
	autoRefreshChanged(onOff) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the cloud content directory has changed.
	 * @signature `"cloudContentDirectoryChanged()"`
	 * @event
	 */
	cloudContentDirectoryChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when a content directory is added or removed.
	 * @signature `"contentDirectoryListChanged()"`
	 * @event
	 */
	contentDirectoryListChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the currently loaded tree of folders has changed and needs to be rebuilt. Usually a result of a call to refresh(), or when one of the content directory lists has changed.
	 * @signature `"folderTreeChanged()"`
	 * @event
	 */
	folderTreeChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when an import directory is added or removed.
	 * @signature `"importDirectoryListChanged()"`
	 * @event
	 */
	importDirectoryListChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the loading of a script has failed, or when the execution of a script has finished or failed.
	 * @signature `"loadScriptFinished()"`
	 * @event
	 */
	loadScriptFinished() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the loading of a script is starting.
	 * @signature `"loadScriptStarting()"`
	 * @event
	 */
	loadScriptStarting() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when a MDL directory is added or removed.
	 * @signature `"mdlDirectoryListChanged()"`
	 * @event
	 */
	mdlDirectoryListChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when a new content file has been created.
	 * @signature `"newFileCreated(const QString&)"`
	 * @event
	 */
	newFileCreated(filename) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the file that is loaded on 'new' has been changed.
	 * @signature `"onNewSceneChanged(const QString&)"`
	 * @event
	 */
	onNewSceneChanged(filename) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when a poser import directory is added or removed.
	 * @signature `"poserDirectoryListChanged()"`
	 * @event
	 */
	poserDirectoryListChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when a recent file is added or removed.
	 * @signature `"recentFileListChanged()"`
	 * @event
	 */
	recentFileListChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the execution of a script fails.
	 * @signature `"scriptFailed(const QString&)"`
	 * @event
	 */
	scriptFailed(filename) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the execution of a script has finished.
	 * @signature `"scriptFinished(const QString&)"`
	 * @event
	 */
	scriptFinished(filename) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the loading of a script fails.
	 * @signature `"scriptLoadFailed(const QString&)"`
	 * @event
	 */
	scriptLoadFailed(filename) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the loading of a script is starting.
	 * @signature `"scriptLoadStarting(const QString&)"`
	 * @event
	 */
	scriptLoadStarting(filename) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the execution of a script is starting.
	 * @signature `"scriptStarting(const QString&)"`
	 * @event
	 */
	scriptStarting(filename) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the startup scene file has changed.
	 * @signature `"startupSceneChanged(const QString&)"`
	 * @event
	 */
	startupSceneChanged(filename) {};

}
/**
 * Responsible for the management of replacing scene items based on their respective content types.
 * There is only one instance of this manager in an application. This instance is created and owned by DzContentMgr. Request the instance via DzContentMgr.getContentReplaceMgr().
 * See Also:
 */
class DzContentReplaceMgr extends QObject {
	/**
	 * @description ENUM: When a piece of content of a specific type is loaded, any content already in the scene of the same type is removed so that the new item replaces the old one.
	 */
	ALWAYS_REPLACE;
	/**
	 * @description ENUM: When a piece of content is loaded, a dialog prompts the user to choose which (if any) items already in the scene should be removed.
	 */
	ASK_TO_REPLACE;
	/**
	 * @description ENUM: Items already in the scene are never removed when loading a piece of content.
	 */
	NEVER_REPLACE;
	/**
	 * @description ENUM: When a piece of content is loaded, a dialog prompts the user to choose which (if any) items already in the scene should be removed if there is an item of matching content type.
	 */
	ASK_WHEN_MATCHING;
	/**
	 * @description Resets all replace data to default values, excluding replace mode.
	 */
	clearReplaceData() {};
	/**
	 * @description Performs all the necessary steps to remove content marked for replacement.
	 */
	doReplace() {};
	/**
	 * @returns Array A list of nodes attached to baseNode that would be replaced by default.
	 * @since 4.11.0.184
	 * @param {DzNode} baseNode - The base node.
	 */
	getDefaultReplaceNodeList(baseNode) {};
	/**
	 * @returns String The path of the new content.
	 */
	getNewContentPath() {};
	/**
	 * @returns String The type of the new content.
	 */
	getNewContentType() {};
	/**
	 * @returns Array A list of nodes attached to baseNode that could potentially be replaced.
	 * @since 4.11.0.184
	 * @param {DzNode} baseNode - The base node.
	 */
	getPotentialReplaceNodeList(baseNode) {};
	/**
	 * @returns ContentReplaceMode The content replace mode.
	 */
	getReplaceMode() {};
	/**
	 * @returns Array The nodes in the scene to be replaced.
	 * @since 4.11.0.184
	 */
	getReplaceNodeList() {};
	/**
	 * @description Performs all the necessary initialization for doing content replacement when the given file will be loaded, using items attached to baseNode as potential items to replace.
	 */
	initReplaceForContentLoad(path, baseNode) {};
	/**
	 * @description Removes all nodes in the replace list from the scene.
	 */
	removeReplaceNodes() {};
	/**
	 * @param {String} contentPath - The path of the new content.
	 */
	setNewContentPath(contentPath) {};
	/**
	 * @param {String} contentType - The type of the new content.
	 */
	setNewContentType(contentType) {};
	/**
	 * @description Sets the content replace mode.
	 * @param {ContentReplaceMode} mode - The mode to set.
	 */
	setReplaceMode(mode) {};
	/**
	 * @description Sets the list of nodes in the scene to be replaced.
	 * @param {Array} replaceNodes - The list of nodes to set.
	 */
	setReplaceNodes(replaceNodes) {};
	/**
	 * @description Updates the replace list to contain all items that should be removed during content load. If the replace mode is ALWAYS_REPLACE, the list will contain all nodes attached (following, parented, etc.) to baseNode whose type matches the current "New Content Type" (as set through setNewContentType()). If the replace mode is ASK_TO_REPLACE, a dialog will allow the user to select what nodes should be replaced.
	 */
	updateReplaceNodes(baseNode) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the content replace mode has changed.
	 * @signature `"contentReplaceModeChanged(DzContentReplaceMgr.ContentReplaceMode)"`
	 * @event
	 */
	contentReplaceModeChanged(mode) {};

}
/**
 * The controller class is like a modifier for DzProperty types. Controllers allow implementation of custom modulation of properties without changing the properties actual value. Common implementations of controllers include: controllers that adjust one property based on the value of another property, controllers that replace the value of one property with the value of another property, controllers that use a script expression to drive a property, etc.
 */
class DzController extends DzBase {
	/**
	 * @description The description of the controller (Read Only)
	 * @type {String}
	 */
	description;
	/**
	 * @description The effect of the controller (Read Only)
	 * @type {ControllerEffect}
	 */
	effect;
	/**
	 * @description The description of the controller when slave (Read Only)
	 * @type {String}
	 */
	slaveDescription;
	/**
	 * @description ENUM: Has no effect on the property
	 */
	None;
	/**
	 * @description ENUM: Uses the current value of the property to calculate the result
	 */
	Additive;
	/**
	 * @description ENUM: Ignores the current value of the property, and calculates the result from unrelated factors.
	 */
	Replace;
	/**
	 * @description TODO:
	 * Add description.
	 * @returns DzProperty
	 */
	getOwner() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description TODO: Add Description
	 * @signature `TODO: Add Description`
	 * @event
	 */
	attributeChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the value of this controller has changed.
	 * @signature `"currentValueChanged()"`
	 * @event
	 */
	currentValueChanged() {};

}
/**
 * See Also:
 */
class DzCr2Exporter extends DzExporter {
	/**
	 * @description Default Constructor.
	 */
	constructor() {};

}
/**
 * This class represents a script based action that the user can create themselves.
 * See Also:
 * Since:
 */
class DzCustomAction extends DzScriptAction {

}
/**
 * TODO:
 * Add detailed description.
 */
class DzCustomData extends DzBase {
	/**
	 * @returns Boolean true if the data item should be saved to the native file format, otherwise false.
	 */
	isPersistent() {};

}
/**
 * A DzDateEdit provides a date editor.
 */
class DzDateEdit extends DzDateTimeEdit {
	/**
	 * @description Creates a date edit widget as a child of the given parent widget.
	 * @param {DzWidget} parent - The widget parent for the date edit.
	 */
	constructor(parent) {};
	/**
	 * @description Holds the maximum value for the widget.
	 * @type {Date}
	 */
	max;
	/**
	 * @description Holds the minimum value for the widget.
	 * @type {Date}
	 */
	min;
	/**
	 * @description Holds the separator used by the widget.
	 * @type {String}
	 */
	separator;
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the date in the widget has changed, passes the new date.
	 * @signature `"valueChanged(const QDate&)"`
	 * @event
	 */
	valueChanged(date) {};

}
/**
 * A DzDateTimeEdit provides a combination `date` and `time` editor.
 */
class DzDateTimeEdit extends DzWidget {
	/**
	 * @description Creates a date time edit widget as a child of the given parent widget.
	 * @param {DzWidget} parent - The widget parent for the date time edit.
	 */
	constructor(parent) {};
	/**
	 * @description Holds the date represented by the widget.
	 * @type {Date}
	 */
	date;
	/**
	 * @description Holds the maximum date value for the widget.
	 * @type {Date}
	 */
	dateMax;
	/**
	 * @description Holds the minimum date value for the widget.
	 * @type {Date}
	 */
	dateMin;
	/**
	 * @description Holds the date and time represented by the widget.
	 * @type {dateTime}
	 */
	dateTime;
	/**
	 * @description TODO:
	 * Add description.
	 * @type {String}
	 */
	displayFormat;
	/**
	 * @description Holds the time represented by the widget.
	 * @type {Date}
	 */
	time;
	/**
	 * @description Holds the maximum time value for the widget.
	 * @type {Date}
	 */
	timeMax;
	/**
	 * @description Holds the minimum time value for the widget.
	 * @type {Date}
	 */
	timeMin;
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the date/time in the widget has changed, passes the new date/time.
	 * @signature `"valueChanged(const QDateTime&)"`
	 * @event
	 */
	valueChanged(dateTime) {};

}
/**
 * TODO:
 * Add detailed description.
 */
class DzDefaultMaterial extends DzRefCountedItem, DzMaterial {
	/**
	 * @description Default Constructor.
	 */
	constructor() {};
	/**
	 * @returns Color The ambient color for this material.
	 */
	getAmbientColor() {};
	/**
	 * @returns DzColorProperty The property that controls ambient color.
	 */
	getAmbientColorControl() {};
	/**
	 * @returns DzTexture The ambient color map for this material.
	 */
	getAmbientColorMap() {};
	/**
	 * @returns Number The ambient strength for this material.
	 */
	getAmbientStrength() {};
	/**
	 * @returns DzFloatProperty The property that controls ambient strength.
	 */
	getAmbientStrengthControl() {};
	/**
	 * @returns DzTexture The ambient strength map for this material.
	 */
	getAmbientValueMap() {};
	/**
	 * @returns DzFloatProperty The property that controls bump mapping.
	 */
	getBumpControl() {};
	/**
	 * @returns DzTexture The bump map for this material.
	 */
	getBumpMap() {};
	/**
	 * @returns Number The maximum bump for this material.
	 */
	getBumpMax() {};
	/**
	 * @returns DzFloatProperty The property that controls the bump mapping maximum.
	 */
	getBumpMaxControl() {};
	/**
	 * @returns Number The minimum bump for this material.
	 */
	getBumpMin() {};
	/**
	 * @returns DzFloatProperty The property that controls the bump mapping minimum.
	 */
	getBumpMinControl() {};
	/**
	 * @returns Number The bump strength for this material.
	 */
	getBumpStrength() {};
	/**
	 * @returns DzColorProperty The property that controls diffuse color.
	 */
	getDiffuseColorControl() {};
	/**
	 * @returns Number The diffuse strength for this material.
	 */
	getDiffuseStrength() {};
	/**
	 * @returns DzFloatProperty The property that controls diffuse strength.
	 */
	getDiffuseStrengthControl() {};
	/**
	 * @returns DzTexture The diffuse strength map for this material.
	 */
	getDiffuseValueMap() {};
	/**
	 * @returns DzFloatProperty The property that controls displacement mapping.
	 */
	getDisplacementControl() {};
	/**
	 * @returns DzTexture The displacement map for this material.
	 */
	getDisplacementMap() {};
	/**
	 * @returns Number The maximum displacement (displacement that white maps to) for this material.
	 */
	getDisplacementMax() {};
	/**
	 * @returns DzFloatProperty The property that controls the displacement mapping maximum.
	 */
	getDisplacementMaxControl() {};
	/**
	 * @returns Number The minimum displacement for this material.
	 */
	getDisplacementMin() {};
	/**
	 * @returns DzFloatProperty The property that controls the displacement mapping minimum.
	 */
	getDisplacementMinControl() {};
	/**
	 * @returns Number The displacement strength for this material.
	 */
	getDisplacementStrength() {};
	/**
	 * @returns DzFloatProperty The property that controls glossiness.
	 */
	getGlossinessControl() {};
	/**
	 * @returns Number The glossines strength for this material.
	 */
	getGlossinessStrength() {};
	/**
	 * @returns DzTexture The glossines strength map for this material.
	 */
	getGlossinessValueMap() {};
	/**
	 * @returns Number The horizontal offset value.
	 */
	getHorizontalOffset() {};
	/**
	 * @returns DzFloatProperty The property that controls the horizontal offset of an image.
	 */
	getHorizontalOffsetControl() {};
	/**
	 * @returns Number The number of horizontal tiles.
	 */
	getHorizontalTiles() {};
	/**
	 * @returns DzFloatProperty The property that controls the horizontal tiling of an image.
	 */
	getHorizontalTilesControl() {};
	/**
	 * @returns Number The index of refraction for this material.
	 */
	getIndexOfRefraction() {};
	/**
	 * @returns DzFloatProperty The property that controls the index of refraction.
	 */
	getIndexOfRefractionControl() {};
	/**
	 * @returns DzBoolProperty The property that controls whether multiplication through opacity is enabled.
	 */
	getMultThroughOpacityControl() {};
	/**
	 * @returns DzTexture Image for the nomal map.
	 */
	getNormalValueMap() {};
	/**
	 * @returns DzImageProperty The property that controls the normal value map.
	 */
	getNormalValueMapControl() {};
	/**
	 * @returns DzFloatProperty The property that controls opacity.
	 */
	getOpacityControl() {};
	/**
	 * @returns Color The reflection color for this material.
	 */
	getReflectionColor() {};
	/**
	 * @returns DzColorProperty The property that controls reflection color.
	 */
	getReflectionColorControl() {};
	/**
	 * @returns DzTexture The reflection map for this material.
	 */
	getReflectionMap() {};
	/**
	 * @returns Number The reflection strength for this material.
	 */
	getReflectionStrength() {};
	/**
	 * @returns DzFloatProperty The property that controls reflection strength.
	 */
	getReflectionStrengthControl() {};
	/**
	 * @returns DzTexture The reflection strength map for this material.
	 */
	getReflectionValueMap() {};
	/**
	 * @returns Color The refraction color for this material.
	 */
	getRefractionColor() {};
	/**
	 * @returns DzColorProperty The property that controls refraction color.
	 */
	getRefractionColorControl() {};
	/**
	 * @returns DzTexture The refraction map for this material.
	 */
	getRefractionColorMap() {};
	/**
	 * @returns Number The refraction strength for this material.
	 */
	getRefractionStrength() {};
	/**
	 * @returns DzFloatProperty The property that controls refraction strength.
	 */
	getRefractionStrengthControl() {};
	/**
	 * @returns DzTexture The refraction strength map for this material.
	 */
	getRefractionValueMap() {};
	/**
	 * @returns Color The scatter color for this material.
	 */
	getScatterColor() {};
	/**
	 * @returns DzColorProperty The property that controls scatter color.
	 */
	getScatterColorControl() {};
	/**
	 * @returns DzTexture The scatter map for this material.
	 */
	getScatterColorMap() {};
	/**
	 * @returns Color The sheen color for this material.
	 */
	getSheenColor() {};
	/**
	 * @returns DzColorProperty The property that controls sheen color.
	 */
	getSheenColorControl() {};
	/**
	 * @returns DzTexture The sheen map for this material.
	 */
	getSheenColorMap() {};
	/**
	 * @returns Color The specular color for this material.
	 */
	getSpecularColor() {};
	/**
	 * @returns DzColorProperty The property that controls specular color.
	 */
	getSpecularColorControl() {};
	/**
	 * @returns DzTexture The specular color map for this material.
	 */
	getSpecularColorMap() {};
	/**
	 * @returns Number The specular strength for this material.
	 */
	getSpecularStrength() {};
	/**
	 * @returns DzFloatProperty The property that controls specular strength.
	 */
	getSpecularStrengthControl() {};
	/**
	 * @returns DzTexture The specular strength map for this material.
	 */
	getSpecularValueMap() {};
	/**
	 * @returns Number The surface type for this material.
	 */
	getSurfaceType() {};
	/**
	 * @returns DzEnumProperty The property that controls surface type.
	 */
	getSurfaceTypeControl() {};
	/**
	 * @returns Number The thickness for this material.
	 */
	getThickness() {};
	/**
	 * @returns DzFloatProperty The property that controls thickness.
	 */
	getThicknessControl() {};
	/**
	 * @returns DzTexture The thickness map for this material.
	 */
	getThicknessValueMap() {};
	/**
	 * @returns Number The vertical offset value.
	 */
	getVerticalOffset() {};
	/**
	 * @returns DzFloatProperty The property that controls the vertical offset of an image.
	 */
	getVerticalOffsetControl() {};
	/**
	 * @returns Number The number of vertical tiles.
	 */
	getVerticalTiles() {};
	/**
	 * @returns DzFloatProperty The property that controls the vertical tiling of an image.
	 */
	getVerticalTilesControl() {};
	/**
	 * @returns Boolean The value of the multiply through opacity parameter.
	 */
	isMultThroughOpacity() {};
	/**
	 * @returns Boolean Whether the renderman geometry needs the additional dPds adm dPdsM parameters,used for some shaders. This is true if the material has a normal map and it is in tangent space
	 */
	needsTangentSpaceParams() {};
	/**
	 * @description Set the ambient color for this material.
	 * @param {Color} color - The new ambient color for the material.
	 */
	setAmbientColor(color) {};
	/**
	 * @description Set the ambient color map for this material.
	 * @param {DzTexture} img - The new ambient color map for the material.
	 */
	setAmbientColorMap(img) {};
	/**
	 * @description Set the ambient strength for this material.
	 * @param {Number} val - The new ambient strength for the material.
	 */
	setAmbientStrength(val) {};
	/**
	 * @description Set the ambient strength map for this material.
	 * @param {DzTexture} img - The new ambient strength map for this material.
	 */
	setAmbientValueMap(img) {};
	/**
	 * @description Set the map for the bump strength channel.
	 * @param {DzTexture} img - The new bump map for this material.
	 */
	setBumpMap(img) {};
	/**
	 * @description Set the maximum bump for this material.
	 * @param {Number} val - The new bump maximum
	 */
	setBumpMax(val) {};
	/**
	 * @description Set the minimum bump for this material.
	 * @param {Number} val - The new bump minimum.
	 */
	setBumpMin(val) {};
	/**
	 * @description Set the bump strength for this material.
	 * @param {Number} val - The new bump strength for this material.
	 */
	setBumpStrength(val) {};
	/**
	 * @description Set the diffuse strength for this material.
	 * @param {Number} val - The new diffuse strength for the material.
	 */
	setDiffuseStrength(val) {};
	/**
	 * @description Set the diffuse strength map for this material.
	 * @param {DzTexture} img - The new diffuse strength map for the material.
	 */
	setDiffuseValueMap(img) {};
	/**
	 * @description Set the displacement map for this material.
	 * @param {DzTexture} img - The new displacement map for the material.
	 */
	setDisplacementMap(img) {};
	/**
	 * @description Set the maximum displacement for this material.
	 * @param {Number} val - The new maximum displacement for this material.
	 */
	setDisplacementMax(val) {};
	/**
	 * @description Set the minimum displacement for this material.
	 * @param {Number} val - The new minimum displacement for this material.
	 */
	setDisplacementMin(val) {};
	/**
	 * @description Set the displacement strength for this material.
	 * @param {Number} val - The new displacement strength for this material
	 */
	setDisplacementStrength(val) {};
	/**
	 * @description Set glossiness for this material.
	 * @param {Number} size - The new highlight size (glossiness) for the material.
	 */
	setGlossinessStrength(size) {};
	/**
	 * @description Set glossiness value map for this material.
	 * @param {DzTexture} img - A pointer to the new glossiness value map for the material. NULL to clear the map.
	 */
	setGlossinessValueMap(img) {};
	/**
	 * @description Set the horizontal offset for the material
	 * @param {Number} offset - The value of the horizontal offset in each tile for the material
	 */
	setHorizontalOffset(offset) {};
	/**
	 * @description Set the horizontal tiling for the material
	 * @param {Number} tiles - The number of horizontal tiles for the material
	 */
	setHorizontalTiles(tiles) {};
	/**
	 * @description Set the index of refraction for this material.
	 * @param {Number} val - The new index of refraction for the material.
	 */
	setIndexOfRefraction(val) {};
	/**
	 * @description Set the multiply through opacity parameter. If true, Specular highlights are multiplied through the opacity of the material (i.e. a transparent material will not show specular highlights). If false, specular highlights can contribute to the local opacity of the material (i.e. transparent objects show highlights)
	 * @param {Boolean} onOff - Whether or not specularity is multiplied through opacity.
	 */
	setMultThroughOpacity(onOff) {};
	/**
	 * @description Set the normal map for this material.
	 * @param {DzTexture} img - A pointer to the new map map for the material. NULL to clear the map.
	 */
	setNormalValueMap(img) {};
	/**
	 * @description Set the reflection color for this material.
	 * @param {Color} color - The new reflection color for the material.
	 */
	setReflectionColor(color) {};
	/**
	 * @description Set the reflection map for this material.
	 * @param {DzTexture} img - The new reflection map for the material.
	 */
	setReflectionMap(img) {};
	/**
	 * @description Set the reflection strength for this material.
	 * @param {Number} val - The new reflection strength for the material.
	 */
	setReflectionStrength(val) {};
	/**
	 * @description Set reflection strength map for this material.
	 * @param {DzTexture} img - The new reflection strength map for the material.
	 */
	setReflectionValueMap(img) {};
	/**
	 * @description Set the refraction color for this material.
	 * @param {Color} color - The new refraction color for the material.
	 */
	setRefractionColor(color) {};
	/**
	 * @description Set the refraction color map for this material.
	 * @param {DzTexture} img - The new refraction color map for the material.
	 */
	setRefractionColorMap(img) {};
	/**
	 * @description Set the refraction strength for this material.
	 * @param {Number} val - The new refraction strength for the material.
	 */
	setRefractionStrength(val) {};
	/**
	 * @description Set the refraction strength map for this material.
	 * @param {DzTexture} img - A pointer to the new refraction strength map for the material. NULL to clear the map.
	 */
	setRefractionValueMap(img) {};
	/**
	 * @description Set the scatter color for this material.
	 * @param {Color} color - The new scatter color for the material.
	 */
	setScatterColor(color) {};
	/**
	 * @description Set the scatter color map for this material.
	 * @param img - The new scatter color map for the material.
	 */
	setScatterColorMap(dztexture) {};
	/**
	 * @description Set the sheen color for this material.
	 * @param {Color} color - The new sheen color for the material.
	 */
	setSheenColor(color) {};
	/**
	 * @description Set the sheen color map for this material.
	 * @param img - The new sheen color map for the material.
	 */
	setSheenColorMap(dztexture) {};
	/**
	 * @description Set base specular color for this material.
	 * @param {Color} color - The new specular color for the material
	 */
	setSpecularColor(color) {};
	/**
	 * @description Set the specular color map for this material.
	 * @param {DzTexture} img - A pointer to the new specular color map for the material. NULL to clear the map.
	 */
	setSpecularColorMap(img) {};
	/**
	 * @description Set base specular strength for this material.
	 * @param {Number} size - The new specular strength for the material.
	 */
	setSpecularStrength(size) {};
	/**
	 * @description Set specular strength map for this material.
	 * @param {DzTexture} img - A pointer to the new specular strength map for the material. NULL to clear the map.
	 */
	setSpecularValueMap(img) {};
	/**
	 * @description Set the surface type for this material.
	 * @param {Number} val - The index of the surface type for the material.
	 */
	setSurfaceType(val) {};
	/**
	 * @description Set the refraction strength for this material.
	 * @param val - The new refraction strength for the material.
	 */
	setThickness(number) {};
	/**
	 * @description Set the thickness map for this material.
	 * @param img - A pointer to the new thickness map for the material. NULL to clear the map.
	 */
	setThicknessValueMap(dztexture) {};
	/**
	 * @description Set the vertical offset for the material
	 * @param {Number} offset - The value of the vertical offset in each tile for the material
	 */
	setVerticalOffset(offset) {};
	/**
	 * @description Set the vertical tiling for the material
	 * @param {Number} tiles - The number of vertical tiles for the material.
	 */
	setVerticalTiles(tiles) {};

}
/**
 * 
 */
class DzDelightRenderer extends DzRenderer {
	/**
	 * @description Default Constructor.
	 */
	constructor() {};
	/**
	 * @description Resets the handler used for Interactive Progressive Rendering (IPR).
	 */
	resetIPRHandler() {};

}
/**
 * Provides information about the user's desktop, such as its total size, number of screens, the geometry of each screen, and whether they are configured as separate desktops or a single virtual desktop.
 * Since:
 */
class DzDesktopWidget extends DzWidget {
	/**
	 * @description Creates an instance of the desktop, as a widget.
	 */
	constructor() {};
	/**
	 * @description Holds the index of the screen that is configured to be the primary screen on the system.
	 * @type {Number}
	 */
	primaryScreen;
	/**
	 * @description Holds the number of screens currently available on the system.
	 * @type {Number}
	 */
	screenCount;
	/**
	 * @description Holds if the system manages the available screens in a virtual desktop.
	 * @type {Boolean}
	 */
	virtualDesktop;
	/**
	 * @returns Rect The available geometry of the screen at the specified index (if any). What is available will be a sub-rect of screenGeometry() based on what the platform decides is available (for example excludes the dock and menu bar on Mac OS X, or the task bar on Windows).
	 * @param {Number} screen - The index of the screen to get the available geometry for. The default screen is used if this is -1.
	 */
	availableGeometry(screen = -1) {};
	/**
	 * @returns Rect The available geometry of the screen which contains widget.
	 * @param {QWidget} widget - The widget on the screen to get the available geometry for.
	 */
	availableGeometry(widget) {};
	/**
	 * @returns Rect The available geometry of the screen which contains point.
	 * @param {Point} point - The position on the screen to get the available geometry for.
	 */
	availableGeometry(point) {};
	/**
	 * @returns Rect The geometry of the screen which contains point.
	 * @param {Point} point - The Point on the screen to get the geometry for.
	 */
	screenGeometry(point) {};
	/**
	 * @returns Rect The geometry of the screen at the specified index.
	 * @param {Number} screen - The index of the screen to get the geometry for. The default screen is used if this is outside the range of screens.
	 */
	screenGeometry(screen = -1) {};
	/**
	 * @returns Rect The geometry of the screen which contains widget.
	 * @param {QWidget} widget - The widget on the screen to get the geometry for.
	 */
	screenGeometry(widget) {};
	/**
	 * @returns Number The index of the screen that contains the Pointpoint, or -1 if is not on a screen.
	 * @param {Point} point - The Point to get the screen number for.
	 */
	screenNumber(point) {};
	/**
	 * @returns Number The index of the screen that contains the largest part of widget, or -1 if the widget not on a screen.
	 * @param {QWidget} widget - The widget to get the screen number for.
	 */
	screenNumber(widget = 0) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the size of a screen changes.
	 * @signature `"resized(int)"`
	 * @event
	 */
	resized(screen) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the number of screens changes to newCount.
	 * @signature `"screenCountChanged(int)"`
	 * @event
	 */
	screenCountChanged(newCount) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the work area available on a screen changes.
	 * @signature `"workAreaResized(int)"`
	 * @event
	 */
	workAreaResized(screen) {};

}
/**
 * Deprecated
 * Exists only to keep old code working. Do not use in new code. Use DzDesktopWidget instead.
 * This page exists in order to indicate the script accessible properties and signals of the Qt native QDesktopWidget class. Use Global.getDesktop() to retrieve an object of this type.
 */
class QDesktopWidget extends QWidget {
	/**
	 * @description Holds the index of the screen that is configured to be the primary screen on the system.
	 * @type {Number}
	 */
	primaryScreen;
	/**
	 * @description Holds the number of screens currently available on the system.
	 * @type {Number}
	 */
	screenCount;
	/**
	 * @description Holds if the system manages the available screens in a virtual desktop.
	 * @type {Boolean}
	 */
	virtualDesktop;
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the size of screen changes.
	 * @signature `"resized(int)"`
	 * @event
	 */
	resized(screen) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the number of screens changes to newCount.
	 * @signature `"screenCountChanged(int)"`
	 * @event
	 */
	screenCountChanged(newCount) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the work area available on screen changes.
	 * @signature `"workAreaResized(int)"`
	 * @event
	 */
	workAreaResized(screen) {};

}
/**
 * TODO:
 * Add detailed description.
 */
class DzDevice extends QObject {
	/**
	 * @param {DzSettings} settings - This will be set to the default settings for the device.
	 */
	getDefaultSettings(settings) {};
	/**
	 * @returns String A user-readable description of the device.
	 */
	getDescription() {};
	/**
	 * @returns String The name of the device.
	 */
	getDeviceName() {};
	/**
	 * @param {DzSettings} settings - This will be set to the current settings for the device.
	 */
	getSettings(settings) {};
	/**
	 * @description Changes the current settings for the device.
	 * @param {DzSettings} settings - The new settings for the device.
	 */
	setSettings(settings) {};

}
/**
 * Responsible for the management of hardware devices.
 * There is only one instance of this manager in an application. This instance is created and owned by DzApp. Request the instance via DzApp.getDeviceMgr().
 * See Also:
 */
class DzDeviceMgr extends QObject {
	/**
	 * @returns DzDevice The device at the given index.
	 * @param {Number} which - The index of the device to get.
	 * @attention The Device Manager owns this object - do NOT delete it.
	 */
	getDevice(which) {};
	/**
	 * @returns Number The number of available devices.
	 */
	getNumDevices() {};

}
/**
 * The dForm is the primary component of a dForm deformer. The others are the DzDFormBase, DzDFormZone and dformmodifier_dz.
 */
class DzDForm extends DzNode {
	/**
	 * @description Default Constructor.
	 */
	constructor() {};
	/**
	 * @description Adds the effect of this dForm to the given node.
	 * @param {DzNode} node - The node to apply this dForm's affect to.
	 */
	applyToNode(node) {};
	/**
	 * @returns Number The avatar scale factor for the representation of the dFormer.
	 */
	getAvatarScale() {};
	/**
	 * @returns DzFloatProperty The property that controls the avatar scale factor for this dFormer.
	 */
	getAvatarScaleControl() {};
	/**
	 * @returns DzDFormBase The base for this dFormer.
	 */
	getBase() {};
	/**
	 * @returns Color The color used in the gradient for weights at the maximum end of the scale.
	 */
	getGradientMax() {};
	/**
	 * @returns Color The color used in the gradient for weights at the minimum end of the scale.
	 */
	getGradientMin() {};
	/**
	 * @returns The influence mode.
	 */
	getInfluenceMode() {};
	/**
	 * @description Gets the i'th modifier of the dForm. The index is zero based. Can be used with getNumModifiers() to iterate over all the dForm modifiers.
	 * @returns DzDformmodifier The target modifier at the requested index (if valid).
	 * @param {Number} i - The index of the modifier to get.
	 */
	getModifier(i) {};
	/**
	 * @description Gets the i'th modifier of the dForm. The index is zero based. Can be used with getNumModifiers() to iterate over all the dForm modifiers.
	 * @returns DzDformmodifier The target modifier on the requested node.
	 * @param {DzNode} node - The node to find the modifier on.
	 */
	getModifierForNode(node) {};
	/**
	 * @returns Number The number of dForm modifiers that are driven by this dForm.
	 */
	getNumModifiers() {};
	/**
	 * @returns Number The opacity for the representation of the dFormer.
	 */
	getOpacity() {};
	/**
	 * @returns DzFloatProperty The property that controls opacity for drawing this dFormer.
	 */
	getOpacityControl() {};
	/**
	 * @returns DzDFormZone The zone for this dFormer.
	 */
	getZone() {};
	/**
	 * @description Sets the avatar scale factor of the dForm representation.
	 * @param {Number} val - The new avatar scale factor for the dForm; 1.0 maintains 100% scale.
	 */
	setAvatarScale(val) {};
	/**
	 * @description Sets the base for this dForm.
	 * @param {DzDFormBase} base - The dForm base to set.
	 */
	setBase(base) {};
	/**
	 * @description Sets the Color used in the gradient for weights at the maximum end of the scale.
	 * @param {Color} color - The color to use for representing maximum weights.
	 */
	setGradientMax(color) {};
	/**
	 * @description Sets the Color used in the gradient for weights at the minimum end of the scale.
	 * @param {Color} color - The color to use for representing minimum weights.
	 */
	setGradientMin(color) {};
	/**
	 * @description Sets the opacity of the dForm representation.
	 * @param {Number} val - The new opacity for the dForm; 0.0 is completely transparent, 1.0 is completely opaque.
	 */
	setOpacity(val) {};
	/**
	 * @description Sets the zone for this dForm.
	 * @param {DzDFormZone} zone - The dForm zone to set.
	 */
	setZone(zone) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the dform modifier list for this dFormer has changed.
	 * @signature `"dformModifierListChanged()"`
	 * @event
	 */
	dformModifierListChanged() {};

}
/**
 * An asset save filter for saving a D-Former(s) Preset in the DSON format.
 * See Also:
 */
class DzDFormAssetFilter extends DzAssetFileOutFilter {
	/**
	 * @description TODO:
	 * Add description.
	 */
	constructor() {};

}
/**
 * The base is one component of a dForm deformer. The others are the DzDForm, DzDFormZone and dformmodifier_dz.
 * The dForm base functions as the origin for the dForm deformation effect, as detailed in the dForm class.
 */
class DzDFormBase extends DzNode {
	/**
	 * @description Default Constructor.
	 */
	constructor() {};
	/**
	 * @returns DzDForm The dForm for this base.
	 */
	getDForm() {};

}
/**
 * The zone is one component of a dForm deformer. The others are the DzDForm, DzDFormBase and dformmodifier_dz.
 * The zone is an independent DzNode derived object that is used to set the area of influence of the dForm's effect.
 * It is spherical in shape but can be scaled into any form of ellipsoid.
 * The zone has an effect falloff zone based on a naturalspline_dz object. The falloff is the same along the x,y and z axis.
 * The zone has draws itself as a wireframe sphere. The base size of this sphere is controlled by the DzFloatProperty "Radius". This sphere can be made transparent and is controlled by the DzFloatProperty "Opacity". The zone is drawn with the maximum gradient color of the dForm.
 */
class DzDFormZone extends DzNode {
	/**
	 * @description Default Constructor.
	 */
	constructor() {};
	/**
	 * @description ENUM: TODO: Add description.
	 */
	AxisOnly;
	/**
	 * @description ENUM: TODO: Add description.
	 */
	Wireframe;
	/**
	 * @description ENUM: TODO: Add description.
	 */
	Solid;
	/**
	 * @description ENUM: TODO: Add description.
	 */
	Sphere;
	/**
	 * @description ENUM: TODO: Add description.
	 */
	WeightMap;
	/**
	 * @returns DzDForm The dForm for this zone.
	 */
	getDForm() {};
	/**
	 * @returns The influence mode of this deformer.
	 * @since 4.6.2.34
	 */
	getInfluenceMode() {};
	/**
	 * @returns DzEnumProperty The property that controls the influence mode for this dFormer.
	 * @since 4.6.2.34
	 */
	getInfluenceModeControl() {};
	/**
	 * @returns DzFloatProperty The property that controls the opacity for this zone.
	 */
	getOpacityControl() {};
	/**
	 * @returns DzNaturalspline The spline used to compute the falloff for this zone.
	 */
	getSpline() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the influence mode for this dForm zone has changed.
	 * @signature `"influenceModeChanged()"`
	 * @event
	 */
	influenceModeChanged() {};

}
/**
 * A DzDial provides a rounded range control like a speedometer.
 */
class DzDial extends DzWidget {
	/**
	 * @description Creates a dial widget as a child of the given parent widget.
	 * @param {DzWidget} parent - The widget parent for the dial.
	 */
	constructor(parent) {};
	/**
	 * @description The current line step
	 * @type {Number}
	 */
	lineStep;
	/**
	 * @description Holds the maximum value for the widget.
	 * @type {Number}
	 */
	max;
	/**
	 * @description Holds the minimum value for the widget.
	 * @type {Number}
	 */
	min;
	/**
	 * @description Holds whether or not to show notches.
	 * @type {Boolean}
	 */
	notchesVisible;
	/**
	 * @description Holds the current notch size. (Read Only)
	 * @type {Number}
	 */
	notchSize;
	/**
	 * @description Holds the target number of pixels between notches.
	 * @type {Number}
	 */
	notchTarget;
	/**
	 * @description The current page step
	 * @type {Number}
	 */
	pageStep;
	/**
	 * @description Holds whether or not to track the cursor, true by default.
	 * @type {Boolean}
	 */
	tracking;
	/**
	 * @description Holds the value represented by the widget.
	 * @type {Number}
	 */
	value;
	/**
	 * @description Holds whether or not the arrow can be rotated 360 degrees, or if some space is left at the bottom.
	 * @type {Boolean}
	 */
	wrapping;
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when dial moves, passes the new value of the dial.
	 * @signature `"dialMoved(int)"`
	 * @event
	 */
	dialMoved(value) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the dial is pressed by the user.
	 * @signature `"dialPressed()"`
	 * @event
	 */
	dialPressed() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the dial is released by the user.
	 * @signature `"dialReleased()"`
	 * @event
	 */
	dialReleased() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the value of the dial changes, passes the new value.
	 * @signature `"valueChanged(int)"`
	 * @event
	 */
	valueChanged(value) {};

}
/**
 * This is the basic building block for DAZScript interfaces. DzDialog provides an independent window widget that in turn can act as the parent for other DAZScript widgets. Most custom DAZScript interfaces will be built starting with a DzDialog customized with Layout and DzWidget components.
 */
class DzDialog extends DzWidget {
	/**
	 * @description Default Constructor.
	 */
	constructor(parent = undefined) {};
	/**
	 * @description Holds the title of the dialog.
	 * @type {String}
	 */
	caption;
	/**
	 * @description Holds the orientation of the dialog extension.
	 * @type {DzWidget}
	 */
	orientation;
	/**
	 * @description Holds whether or not the size grip is enabled.
	 * @type {Boolean}
	 */
	sizeGripEnabled;
	/**
	 * @description Closes the dialog.
	 * @returns Boolean true if the dialog was closed, otherwise false.
	 */
	close() {};
	/**
	 * @description Displays the dialog to the user.
	 * @returns Boolean true if the box was accepted, otherwise false.
	 */
	exec() {};
	/**
	 * @returns DzWidget The current extension widget (if any) for the dialog.
	 */
	extension() {};
	/**
	 * @description Causes the extension widget for the dialog to be hidden.
	 */
	hideExtension() {};
	/**
	 * @description Sets the button that will cause the dialog to close and return true.
	 */
	setAcceptButton(btn) {};
	/**
	 * @description Sets the extension widget for the dialog.
	 */
	setExtension(extension) {};
	/**
	 * @description Sets the button that will cause the dialog to close and return false.
	 */
	setRejectButton(btn) {};
	/**
	 * @description Sets the extension widget visibility to onOff.
	 */
	showExtension(onOff) {};
	/**
	 * @description Causes the extension widget for the dialog to be shown.
	 */
	showExtension() {};

}
/**
 * 
 */
class DzDir extends QObject {
	/**
	 * @description Creates a directory object with the given path.
	 * @param {String} path - The path of the directory.
	 */
	constructor(path) {};
	/**
	 * @description ENUM: List directories that match the filters.
	 */
	Dirs;
	/**
	 * @description ENUM: List files that match the filters.
	 */
	Files;
	/**
	 * @description ENUM: List drives that match the filters.
	 */
	Drives;
	/**
	 * @description ENUM: Do not list symbolic links.
	 */
	NoSymLinks;
	/**
	 * @description ENUM: List directories, files, drives and symbolic links.
	 */
	AllEntries;
	/**
	 * @description ENUM: List directories, files, drives and symbolic links.
	 */
	All;
	/**
	 * @description ENUM: Type Mask
	 */
	TypeMask;
	/**
	 * @description ENUM: List entries for which the application has read access. Needs to be combined with Dirs or Files.
	 */
	Readable;
	/**
	 * @description ENUM: List entries for which the application has write access. Needs to be combined with Dirs or Files.
	 */
	Writable;
	/**
	 * @description ENUM: List entries for which the application has execute access. Needs to be combined with Dirs or Files.
	 */
	Executable;
	/**
	 * @description ENUM: Include Readable, Writable, and Executable entries
	 */
	PermissionMask;
	/**
	 * @description ENUM: Include Readable, Writable, and Executable entries
	 */
	RWEMask;
	/**
	 * @description ENUM: Only list entries that have been modified.
	 */
	Modified;
	/**
	 * @description ENUM: List hidden entries.
	 */
	Hidden;
	/**
	 * @description ENUM: List system entries.
	 */
	System;
	/**
	 * @description ENUM: Access mask
	 */
	AccessMask;
	/**
	 * @description ENUM: List all directories; don't apply filters to directory names.
	 */
	AllDirs;
	/**
	 * @description ENUM: The filter should be treated as case sensitive.
	 */
	CaseSensitive;
	/**
	 * @description ENUM: Do not list the special entries '.' and '..'.
	 */
	NoDotAndDotDot;
	/**
	 * @description ENUM: Do not list the special entry '.'.
	 */
	NoDot;
	/**
	 * @description ENUM: Do not list the special entry '..'.
	 */
	NoDotDot;
	/**
	 * @description ENUM: Do not filter.
	 */
	NoFilter;
	/**
	 * @description ENUM: Sort by name.
	 */
	Name;
	/**
	 * @description ENUM: Sort by time (modification time).
	 */
	Time;
	/**
	 * @description ENUM: Sort by size.
	 */
	Size;
	/**
	 * @description ENUM: Do not sort.
	 */
	Unsorted;
	/**
	 * @description ENUM: Mask for Sort by
	 */
	SortByMask;
	/**
	 * @description ENUM: Put the directories first, then the files.
	 */
	DirsFirst;
	/**
	 * @description ENUM: Reverse the sort order.
	 */
	Reversed;
	/**
	 * @description ENUM: Sort case-insensitively.
	 */
	IgnoreCase;
	/**
	 * @description ENUM: Put the files first, then the directories.
	 */
	DirsLast;
	/**
	 * @description ENUM: Sort items appropriately using the current locale settings.
	 */
	LocaleAware;
	/**
	 * @description ENUM: Sort by file type (extension).
	 */
	Type;
	/**
	 * @description ENUM: Not sorted by default.
	 */
	NoSort;
	/**
	 * @returns String The simplest version of the input, but not the canonical path; removes multiple adjacent directory separators (e.g. "//") and resolves any dot and/or dotdot (e.g. "." or "..") found in the path. Symbolic links are kept.
	 * @since 4.9.3.35
	 */
	static cleanPath(path) {};
	/**
	 * @returns DzDir The application's current directory. The directory is constructed using the absolute path of the current directory, ensuring that its path() will be the same as its absolutePath().
	 * @since 4.9.3.35
	 */
	static current() {};
	/**
	 * @returns String The absolute path of the application's current directory.
	 * @since 4.9.3.35
	 */
	static currentPath() {};
	/**
	 * @returns String pathName using '/' as the path separator instead of the native path separator.
	 * @since 4.9.3.35
	 */
	static fromNativeSeparators(pathName) {};
	/**
	 * @returns DzDir The user's home directory. The directory is constructed using the absolute path of the home directory, ensuring that its path() will be the same as its absolutePath().
	 * @since 4.9.3.35
	 */
	static home() {};
	/**
	 * @returns String The absolute path of the user's home directory. Under Windows this function will return the directory of the current user's profile. Under non-Windows operating systems the HOME environment variable is used if it exists, otherwise the path returned by the rootPath().
	 * @since 4.9.3.35
	 * @attention Under Windows, if the directory of the current user's profile does not exist or cannot be retrieved, the following alternatives will be checked (in the given order) until an existing and available path is found:  * The path specified by the USERPROFILE environment variable.The path formed by concatenating the HOMEDRIVE and HOMEPATH environment variables.The path specified by the HOME environment variable.The path returned by the rootPath() function (which uses the SystemDrive environment variable).The C:/ directory.
	 */
	static homePath() {};
	/**
	 * @returns Boolean true if path is absolute, otherwise false.
	 * @since 4.9.3.35
	 */
	static isAbsolutePath(path) {};
	/**
	 * @returns Boolean true if path is relative, otherwise false.
	 * @since 4.9.3.35
	 */
	static isRelativePath(path) {};
	/**
	 * @returns Boolean true if fileName matches the wildcard (glob) pattern filter, otherwise false. The filter may contain multiple patterns separated by spaces or semicolons. The matching is case insensitive.
	 * @since 4.9.3.35
	 */
	static match(filter, fileName) {};
	/**
	 * @returns Boolean true if fileName matches any of the wildcard (glob) patterns in the list of filters, otherwise false. The matching is case insensitive.
	 * @since 4.9.3.35
	 */
	static match(filters, fileName) {};
	/**
	 * @returns DzDir The root directory. The directory is constructed using the absolute path of the root directory, ensuring that its path() will be the same as its absolutePath().
	 * @since 4.9.3.35
	 */
	static root() {};
	/**
	 * @returns String The absolute path of the root directory. For Windows this normally returns "c:/"; i.e. the root of the system drive. For Mac OS X this returns "/".
	 * @since 4.9.3.35
	 */
	static rootPath() {};
	/**
	 * @returns String The native directory separator; "\" under Windows, "/" under Mac OS X.
	 * @since 4.9.3.35
	 * @attention You do not need to use this function to build file paths. If you always use "/", your paths will be translated to conform to the underlying operating system. If you want to display paths to the user using their operating system's separator use toNativeSeparators().
	 */
	static separator() {};
	/**
	 * @description Sets the application's current working directory to path.
	 * @returns Boolean true if the directory was successfully changed, otherwise false.
	 * @since 4.9.3.35
	 */
	static setCurrent(path) {};
	/**
	 * @returns DzDir The system's temporary directory. The directory is constructed using the absolute path of the temp directory, ensuring that its path() will be the same as its absolutePath().
	 * @since 4.9.3.35
	 */
	static temp() {};
	/**
	 * @returns String The absolute path of the system's temporary directory. On Windows this is usually the path in the TEMP or TMP environment variable. On Mac OS X this is the path in the TMPDIR environment variable or /tmp if TMPDIR is not defined. Whether a directory separator is added to the end or not, depends on the operating system.
	 * @since 4.9.3.35
	 */
	static tempPath() {};
	/**
	 * @returns String pathName with the '/' separators converted to separators that are appropriate for the underlying operating system. On Windows, '/' will be converted to '\'. On Mac OS X the returned string may be the same as pathName.
	 * @since 4.9.3.35
	 */
	static toNativeSeparators(pathName) {};
	/**
	 * @description Deprecated
	 * @returns String
	 */
	absFilePath(file) {};
	/**
	 * @returns String The absolute path (a path that starts with "/" or with a drive specification) to file, which may contain symbolic links, but never contains redundant ".", ".." or multiple separators. Does not check if the file actually exists in the directory.
	 * @since 4.9.3.35
	 * @param {String} fileName - The name of the file get the absolute path for.
	 */
	absoluteFilePath(fileName) {};
	/**
	 * @returns String The absolute path (a path that starts with "/" or with a drive specification), which may contain symbolic links, but never contains redundant ".", ".." or multiple separators.
	 * @since 4.9.3.35
	 */
	absolutePath() {};
	/**
	 * @description Deprecated
	 * @returns String
	 */
	absPath() {};
	/**
	 * @returns String The canonical path, i.e. a path without symbolic links or redundant "." or ".." elements.
	 */
	canonicalPath() {};
	/**
	 * @description Changes the current directory to dirName.
	 * @returns Boolean true if dirName exists and is readable, otherwise false.
	 * @param {String} dirName - The path to change to; can be relative or absolute.
	 */
	cd(dirName) {};
	/**
	 * @description Changes the directory by moving one directory up from the current directory.
	 * @returns Boolean true if the new directory exists and is readable, otherwise false.
	 */
	cdUp() {};
	/**
	 * @description Makes a copy of a file.
	 * @returns Boolean true if srcFile and destFile are the same or if the operation is successful, otherwise false.
	 * @param {String} srcFile - The path of the source file to copy.
	 * @param {String} destFile - The path of the file that source will be copied to.
	 */
	copy(srcFile, destFile) {};
	/**
	 * @returns Number The total number of directories and files in the directory.
	 * @since 4.9.3.35
	 */
	count() {};
	/**
	 * @returns String The the name of the directory (not the whole path, just the folder name). If the directory has no name (e.g. it is the root directory) an empty string is returned.
	 */
	dirName() {};
	/**
	 * @returns Array A list of the names of all the files/directories in the directory, ordered according to the name and attribute filters previously set with setNameFilters() and setFilter(), and sorted according to the flags set with setSorting(), if the directory is exists, is readable, and contains matches.
	 * @param {Filters} nameFilters - The list of wildcard (globbing) name filters (that understands * and ? wildcards) to use; overrides any value set with setNameFilters().
	 * @param {Filters} filters - A bitwise OR of the filtering options to use.
	 * @param {SortFlags} sort - A bitwise OR of the sorting options to use.
	 */
	entryList(nameFilters, filters = NoFilter, sort = NoSort) {};
	/**
	 * @returns Array A list of the names of all the files/directories in the directory, ordered according to the name and attribute filters previously set with setNameFilters() and setFilter(), and sorted according to the flags set with setSorting(), if the directory is exists, is readable, and contains matches.
	 * @since 4.9.3.35
	 * @param {Filters} filters - A bitwise OR of the filtering options to use.
	 * @param {SortFlags} sort - A bitwise OR of the sorting options to use.
	 */
	entryList(filters = NoFilter, sort = NoSort) {};
	/**
	 * @returns Array A list of the names of all the files/directories in the directory, ordered according to the name and attribute filters previously set with setNameFilters() and setFilter(), and sorted according to the flags set with setSorting(), if the directory is exists, is readable, and contains matches.
	 * @param {String} nameFilter - The wildcard (globbing) name filter (that understands * and ? wildcards) to use; overrides any value set with setNameFilters().
	 * @param {Filters} filters - A bitwise OR of the filtering options to use.
	 * @param {SortFlags} sort - A bitwise OR of the sorting options to use.
	 */
	entryList(nameFilter, filters = NoFilter, sort = NoSort) {};
	/**
	 * @returns Boolean true if the file exists, otherwise false.
	 * @since 4.9.3.35
	 * @param {String} name - The name of the file to check for.
	 * @attention Unless name contains an absolute file path, the file name is assumed to be relative to the directory itself, so this function is typically used to check for the presence of files within a directory.
	 */
	exists(name) {};
	/**
	 * @returns Boolean true if the directory exists, otherwise false.
	 * @attention If a file with the same name is found this function will return false.
	 */
	exists() {};
	/**
	 * @description Deprecated
	 * @returns Boolean
	 */
	fileExists(fileName) {};
	/**
	 * @returns String The path of a file named file in the directory; does not check if the file actually exists.
	 * @attention If the directory is relative the returned path name will also be relative. Redundant multiple separators or "." and ".." directories in fileName are not removed.
	 */
	filePath(fileName) {};
	/**
	 * @returns Filters The value set by setFilter().
	 * @since 4.9.3.35
	 */
	filter() {};
	/**
	 * @returns Array An array containing the absolute paths of files under the directory.
	 * @param extensions - An array containing extensions of files to find; format of strings should be "*.ext".
	 * @param {Boolean} recursive - If true, the retrieval of file paths should recurse sub-directories.
	 */
	getFilesFromDir(extentions, recursive = true) {};
	/**
	 * @returns Boolean true if the directory's path is absolute, otherwise false.
	 */
	isAbsolute() {};
	/**
	 * @returns Boolean true if the directory is readable and we can open files by name, otherwise false.
	 */
	isReadable() {};
	/**
	 * @returns Boolean true if the directory path is relative, otherwise false.
	 */
	isRelative() {};
	/**
	 * @returns Boolean true if the directory is the root directory, otherwise false.
	 * @attention If the directory is a symbolic link to the root directory this function returns false. If you want to test for this use canonicalPath().
	 */
	isRoot() {};
	/**
	 * @description Converts the directory path to an absolute path. If it is already absolute nothing happens.
	 * @returns Boolean true if the conversion succeeded, otherwise false.
	 * @since 4.9.3.35
	 */
	makeAbsolute() {};
	/**
	 * @description Creates a new directory.
	 * @returns Boolean true if dirName does not already exist when this function is called and the sub-directory is successfully created, otherwise false.
	 * @param {String} dirName - The relative path of a sub-directory to create. If empty (default), this directory's absolute path will be used.
	 */
	mkdir(dirName = "") {};
	/**
	 * @description Deprecated
	 * @returns Boolean
	 */
	mkdirs(dirName = "") {};
	/**
	 * @description Creates all directories that do not already exist in dirpath.
	 * @returns Boolean true if successful (the path already exists when this function is called), otherwise false.
	 * @param {String} dirpath - The path of the directories to create.
	 */
	mkpath(dirpath = "") {};
	/**
	 * @description Moves a file to a new location.
	 * @returns Boolean true if srcFile and destFile are the same or if the operation is successful, otherwise false.
	 * @param {String} srcFile - The path of the source file to move.
	 * @param {String} destFile - The path that the file will be moved to.
	 */
	move(srcFile, destFile) {};
	/**
	 * @returns Array The string list set by setNameFilters().
	 * @since 4.9.3.35
	 */
	nameFilters() {};
	/**
	 * @returns String The path of this directory. This may contain symbolic links, but never contains redundant ".", ".." or multiple separators.
	 */
	path() {};
	/**
	 * @description Refreshes the directory information.
	 */
	refresh() {};
	/**
	 * @returns String The path to file, relative to the current directory; does not check if the file actually exists.
	 */
	relativeFilePath(fileName) {};
	/**
	 * @description Removes fileName from this directory.
	 * @returns Boolean true if the file is removed successfully, otherwise false.
	 * @param {String} fileName - The relative path of the file to remove.
	 */
	remove(fileName) {};
	/**
	 * @description Renames a file or directory from oldName to newName.
	 * @returns Boolean true if successful, otherwise false.
	 * @param {String} oldName - The relative path of the file/folder to rename.
	 * @param {String} newName - The relative path to rename the file/folder to.
	 */
	rename(oldName, newName) {};
	/**
	 * @description Removes a directory.
	 * @returns Boolean true if dirName exists when this function is called, the directory is empty and the sub-directory is successfully removed, otherwise false.
	 * @param {String} dirName - The relative path of a sub-directory to remove. If empty (default), this directory's absolute path will be used.
	 */
	rmdir(dirName = "") {};
	/**
	 * @description Deprecated
	 * @returns Boolean
	 */
	rmdirs(dirName = "") {};
	/**
	 * @description Removes all directories that exist in dirpath, provided that they are empty. This is the opposite of mkpath().
	 * @returns Boolean true if successful, otherwise false.
	 * @param dirpath - The path to remove.
	 */
	rmpath(dirPath = "") {};
	/**
	 * @description Sets the current working directory of the application to be this directory.
	 * @returns Boolean true if the current working directory was changed, otherwise false.
	 */
	setCurrent() {};
	/**
	 * @description Sets the filter used by entryList() to filters. The filter is used to specify the kind of entries should be returned by entryList().
	 * @since 4.9.3.35
	 */
	setFilter(filters) {};
	/**
	 * @description Sets the name filters used by entryList() to the list of filters specified by nameFilters. Each name filter is a wildcard (globbing) filter that understands * and ? wildcards.
	 * @since 4.9.3.35
	 */
	setNameFilters(nameFilters) {};
	/**
	 * @description Sets the path of this directory to newPath.
	 */
	setPath(path) {};
	/**
	 * @description Sets the sort order used by entryList(). The sort is specified by OR-ing values from the enum SortFlags.
	 * @since 4.9.3.35
	 */
	setSorting(sort) {};
	/**
	 * @returns SortFlags The value set by setSorting().
	 * @since 4.9.3.35
	 */
	sorting() {};

}
/**
 * TODO:
 * Add detailed description.
 */
class DzDistantLight extends DzLight {
	/**
	 * @description Default Constructor. Creates a new distant light.
	 */
	constructor() {};
	/**
	 * @description ENUM: TODO: Add description.
	 */
	Point;
	/**
	 * @description ENUM: TODO: Add description.
	 */
	Rectangle;
	/**
	 * @description ENUM: TODO: Add description.
	 */
	Disc;
	/**
	 * @description ENUM: TODO: Add description.
	 */
	Sphere;
	/**
	 * @description ENUM: TODO: Add description.
	 */
	Cylinder;
	/**
	 * @returns Color The diffuse color of the light
	 */
	getDiffuseColor() {};
	/**
	 * @returns DzColorProperty The property that controls the color this light
	 */
	getDiffuseColorControl() {};
	/**
	 * @returns Number The far clipping plane when viewing from the light in OpenGL
	 */
	getFarClippingPlane() {};
	/**
	 * @returns Number The luminous flux of the light.
	 * @since 4.8.0.18
	 */
	getFlux() {};
	/**
	 * @returns DzEnumProperty The property that controls Illumination for this light
	 */
	getIlluminationControl() {};
	/**
	 * @returns Number The current light intensity.
	 */
	getIntensity() {};
	/**
	 * @returns DzFloatProperty The property that controls the intensity of this light
	 */
	getIntensityControl() {};
	/**
	 * @returns Number The current light intensity scale.
	 * @since 4.8.0.18
	 */
	getIntensityScale() {};
	/**
	 * @returns DzFloatProperty The property that controls the intensity scale.
	 * @since 4.8.0.18
	 */
	getIntensityScaleControl() {};
	/**
	 * @returns DzFloatProperty The property that controls the luminous flux of the light.
	 * @since 4.8.0.18
	 */
	getLightFluxControl() {};
	/**
	 * @returns The type of geometry for the light; 0 = Point, 1 = Rectangle, 2 = Disc, 3 = Sphere, 4 = Cylinder.
	 * @since 4.8.0.18
	 */
	getLightGeometry() {};
	/**
	 * @returns DzEnumProperty The property that controls the geometry of the light.
	 * @since 4.8.0.18
	 */
	getLightGeometryControl() {};
	/**
	 * @returns Number The height of the light (emitter) geometry, as measured in centimeters, in local space.
	 * @since 4.8.0.18
	 */
	getLightHeight() {};
	/**
	 * @returns DzFloatProperty The property that controls the height of the light.
	 * @since 4.8.0.18
	 */
	getLightHeightControl() {};
	/**
	 * @returns DzBoolProperty The property that controls whether or not the light represents a light portal.
	 * @since 4.9.2.61
	 */
	getLightPortalControl() {};
	/**
	 * @returns Number The color temperature of the light, as measured in Kelvin (K).
	 * @since 4.12.1.108
	 */
	getLightTemperature() {};
	/**
	 * @returns DzFloatProperty The property that controls the temperature of the light.
	 * @since 4.8.0.18
	 */
	getLightTemperatureControl() {};
	/**
	 * @returns Boolean true if the light is two-sided (emits light in both directions), otherwise false.
	 * @since 4.8.0.18
	 */
	getLightTwoSided() {};
	/**
	 * @returns DzBoolProperty The property that controls whether the light is two sided.
	 * @since 4.8.0.18
	 */
	getLightTwoSidedControl() {};
	/**
	 * @returns Number The width of the light (emitter) geometry, as measured in centimeters, in local space.
	 * @since 4.8.0.18
	 */
	getLightWidth() {};
	/**
	 * @returns DzFloatProperty The property that controls the width (diameter) of the light.
	 * @since 4.8.0.18
	 */
	getLightWidthControl() {};
	/**
	 * @returns Number The near clipping plane when viewing from the light in OpenGL
	 */
	getNearClippingPlane() {};
	/**
	 * @returns DzBoolProperty The property that controls whether the light is in physically-based mode.
	 * @since 4.8.0.18
	 */
	getPhotometricModeControl() {};
	/**
	 * @returns DzBoolProperty The property that controls whether the emitter is rendered.
	 * @since 4.8.0.18
	 */
	getRenderEmitterControl() {};
	/**
	 * @returns DzFloatProperty The property that controls the bias for the shadow of this light
	 */
	getShadowBiasControl() {};
	/**
	 * @returns DzColorProperty The property that controls the color this light
	 */
	getShadowColorControl() {};
	/**
	 * @returns DzFloatProperty The property that controls the shadow intensity of this light
	 */
	getShadowIntensityControl() {};
	/**
	 * @returns DzFloatProperty The property that controls the softness for the shadow of this light
	 */
	getShadowSoftnessControl() {};
	/**
	 * @returns DzVec3 The direction the light is pointing in world-space
	 */
	getWSDirection() {};
	/**
	 * @returns Boolean true if this light represents a light portal, otherwise false.
	 * @since 4.9.2.61
	 */
	isLightPortal() {};
	/**
	 * @returns Boolean true if the light is lighting the scene, false if the light has no effect on the scene.
	 */
	isOn() {};
	/**
	 * @returns Boolean true if the light is in photometric mode (physically based), otherwise false.
	 * @since 4.8.0.18
	 */
	photometricMode() {};
	/**
	 * @returns Boolean true if the geometry of the light (emitter) should be rendered, otherwise false.
	 * @since 4.8.0.18
	 */
	renderEmitter() {};

}
/**
 * TODO:
 * Add detailed description.
 */
class DzDockArea extends QWidget {
	/**
	 * @returns DzDockAreaColumn The column at the given index
	 * @param {Number} which - The index of the column to return.
	 */
	getColumn(which) {};
	/**
	 * @returns Number The number of columns of docked windows currently being displayed in this dock area.
	 */
	getNumColumns() {};

}
/**
 * TODO:
 * Add detailed description.
 */
class DzDockAreaColumn extends QWidget {
	/**
	 * @returns Number The current depth of the column. This is the same as width() for Right and Left dock areas, or height() for Top and Bottom dock areas.
	 */
	depth() {};
	/**
	 * @returns Number The number of windows docked in this column
	 */
	getNumWindows() {};
	/**
	 * @returns Number The preferred depth of the column.
	 */
	getPreferredDepth() {};
	/**
	 * @returns DzDockWindow The docked window at the given index
	 * @param {Number} which - The index of the window to return.
	 */
	getWindow(which) {};
	/**
	 * @returns Boolean true if this column is currently minimized
	 */
	isMinimized() {};
	/**
	 * @description Minimizes the column, if it is not already. The column shrinks so that only its resizing handle is visible.
	 */
	minimize() {};
	/**
	 * @returns Number The minimum depth of the column.
	 */
	minimumDepth() {};
	/**
	 * @description Restores the column to its previous depth if the column is currently minimized.
	 */
	restore() {};
	/**
	 * @description Sets the 'depth' of the column.
	 * @param {Number} depth - The new depth for the column. If depth is less than the minimum depth, the column becomes the minimum depth.
	 */
	setPreferredDepth(depth) {};
	/**
	 * @description Toggles whether this column is minimized - if minimized, the column restores itself, if full size the column becomes minimized.
	 */
	toggleMinimized() {};

}
/**
 * This class provides access to a custom bar in the interface that can be docked with a DzToolBar. This class is not intended to be constructed directly, rather it serves as a base class for other custom dock-able bars.
 * See Also:
 */
class DzDockBar extends QWidget {
	/**
	 * @description Holds whether or not the bar is docked. (Read Only)
	 * @type {Boolean}
	 */
	floating;
	/**
	 * @description ENUM: The dock area at the top of a DzActivityLayout.
	 */
	ToolBarTop;
	/**
	 * @description ENUM: The dock area at the bottom of a DzActivityLayout.
	 */
	ToolBarBottom;
	/**
	 * @description ENUM: The dock area on the left side of a DzActivityLayout.
	 */
	ToolBarLeft;
	/**
	 * @description ENUM: The dock area on the right side of a DzActivityLayout.
	 */
	ToolBarRight;
	/**
	 * @description ENUM: No dock area. The bar cannot be docked.
	 */
	NoToolBarArea;
	/**
	 * @description Docks the bar in the specified area of the DzActivityLayout, and shows the bar if it is hidden.
	 * @returns DzDockBar
	 * @param {DzDockBar.DockArea} area - The DockArea to dock the bar to.
	 * @param {String} beforeBar - The name of the bar (if any) in the area to dock before.
	 */
	dock(area, beforeBar = "") {};
	/**
	 * @returns DockArea The dock area that the bar is docked in.
	 */
	dockedArea() {};
	/**
	 * @returns Boolean true if the bar is not displayed, false if the bar is displayed.
	 */
	isClosed() {};
	/**
	 * @description Sets whether or not the bar is displayed.
	 * @param {Boolean} onOff - If true, the bar is not displayed. If false, the bar is displayed.
	 */
	setClosed(onOff) {};
	/**
	 * @description Undocks the bar, moves it to the given global coordinates, and shows the bar if it is hidden.
	 */
	undock(pos) {};

}
/**
 * TODO:
 * Add detailed description.
 */
class DzDockWindow {
	/**
	 * @description Re-Docks this window in the last area it was docked in.
	 */
	dock() {};
	/**
	 * @description Docks this window in the given area.
	 */
	dock(area, newColumn = false) {};
	/**
	 * @description Docks this window in the given area in the given column number.
	 */
	dock(area, columnNum) {};
	/**
	 * @returns DzDockArea The area that the window is currently docked in, or the last area it was docked in if it is undocked.
	 */
	getArea() {};
	/**
	 * @returns Number The last width (or height) of the column (or row) that the window is docked in.
	 */
	getColumnDimension() {};
	/**
	 * @returns Number The column of the dock area that this window was last docked in.
	 */
	getColumnNum() {};
	/**
	 * @returns Size The last undocked size of this window (if any).
	 */
	getLastSize() {};
	/**
	 * @returns Number The actual length for this window while docked.
	 */
	getLength() {};
	/**
	 * @returns Number The minimum length for this window (if it is not minimized) while docked.
	 */
	getMinimumLength() {};
	/**
	 * @returns Number The preferred length for this window while docked.
	 */
	getPreferredLength() {};
	/**
	 * @returns Boolean true if the this window is currently docked, otherwise false.
	 */
	isDocked() {};
	/**
	 * @returns Boolean true if the value returned by length() is the only valid length for this window currently, otherwise false.
	 */
	isLengthFixed() {};
	/**
	 * @returns Boolean true if the this window is currently minimized, otherwise false.
	 */
	isMinimized() {};
	/**
	 * @description Sets this window to a minimized state.
	 */
	minimize() {};
	/**
	 * @description Returns this window to its former length if it is minimized.
	 */
	restore() {};
	/**
	 * @description Store the width (or height) of the column (or row) that the window is docked in.
	 * @param {Number} dimension - The width (or height) to set.
	 */
	setColumnDimension(dimension) {};
	/**
	 * @description Sets the column of the dock area that this window was last docked in.
	 * @param {Number} columnNum - The column number to set.
	 */
	setColumnNum(columnNum) {};
	/**
	 * @description Sets the length for this window while docked.
	 * @param {Number} length - The new length for the window.
	 */
	setLength(length) {};
	/**
	 * @description Sets the preferred length for this window while docked.
	 * @param {Number} length - The new preferred length for the window.
	 */
	setPreferredLength(length) {};
	/**
	 * @description Sets the visibility of the resizing handles.
	 */
	setResizeHandlesVisible(yesNo) {};
	/**
	 * @description Sets the visibility of the title bar.
	 */
	setTitleBarVisible(yesNo) {};
	/**
	 * @description Toggles this window between its docked and undocked state. Calls dock() if this window is undocked, or undock() if it is docked.
	 */
	toggleDock() {};
	/**
	 * @description Toggles this window between the minimized and restored state.
	 */
	toggleMinimized() {};
	/**
	 * @description Undocks this window.
	 */
	undock() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when this window is docked.
	 * @signature `"docked()"`
	 * @event
	 */
	docked() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the value returned by length() has changed.
	 * @signature `"lengthChanged()"`
	 * @event
	 */
	lengthChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when this window becomes minimized.
	 * @signature `"minimized(DzDockWindow*)"`
	 * @event
	 */
	minimized(window) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description TODO: Add Description
	 * @signature `TODO: Add Description`
	 * @event
	 */
	outlineDrawFinished() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description TODO: Add Description
	 * @signature `TODO: Add Description`
	 * @event
	 */
	outlineDrawStarting() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when this window is restored.
	 * @signature `"restored(DzDockWindow*)"`
	 * @event
	 */
	restored(window) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when this window is undocked.
	 * @signature `"undocked()"`
	 * @event
	 */
	undocked() {};

}
/**
 * A DAZScript wrapper for QDomAttr. This object represents an "Attribute" of a "Element" (DzDomElement) in a DOM document.
 * Instances of this object are not constructed directly, rather they are returned by calling DzDomDocument.createAttribute(). An easier method of adding or setting an attribute on an element is to call DzDomElement.setAttribute() on the element to which the attribute should be added or set.
 */
class DzDomAttr extends DzDomNode {
	/**
	 * @description The name of the attribute. (Read Only)
	 * @type {String}
	 */
	name;
	/**
	 * @description The value of the attribute.
	 * @type {String}
	 */
	value;
	/**
	 * @returns DzDomNode The element that this attribute belongs to.
	 */
	ownerElement() {};
	/**
	 * @returns Boolean true if the attribute has a value, otherwise false.
	 */
	specified() {};

}
/**
 * This object represents a basic, empty, node in a DOM document tree.
 * Instances of this object are not constructed directly, rather they are potentially returned by various methods on instances of other DOM and XML Objects if the node they represent is invalid (NULL).
 */
class DzDomBasicNode extends DzDomNode {

}
/**
 * A DAZScript wrapper for QDomCDATASection. This object represents a "CDATA Section" in a DOM document. CDATA Sections can contain special characters that would otherwise be interpreted as part of the markup language. This provides a way for embedding text that contains special characters without the need for escaping all those characters.
 * Instances of this object are not constructed directly, rather they are returned by calling DzDomDocument.createCDATASection().
 */
class DzDomCDATASection extends DzDomText {

}
/**
 * A DAZScript wrapper for QDomCharacterData. This object represents a generic `data` string in a DOM document. Specialized versions of this object are DzDomText, DzDomComment and DzDomCDATASection.
 * Instances of this object are not constructed directly, rather instances of the specialized versions of this object are returned by calling DzDomDocument.createTextNode(), DzDomDocument.createComment() or DzDomDocument.createCDATASection().
 */
class DzDomCharacterData extends DzDomNode {
	/**
	 * @description Holds the text data for this node.
	 * @type {String}
	 */
	data;
	/**
	 * @description Holds the length of the data for this node. (Read Only)
	 * @type {Number}
	 */
	length;
	/**
	 * @description Appends data to the end of the current character data for this node.
	 * @param {String} arg - The character data to append.
	 */
	appendData(arg) {};
	/**
	 * @description Removes a specified range of character data from this node.
	 * @param {Number} offset - The position within the data to start deleting from.
	 * @param {Number} count - The number of characters from offset to delete.
	 */
	deleteData(offset, count) {};
	/**
	 * @description Inserts data into this node at a specified position.
	 * @param {String} offset - The position within the data to start inserting arg at.
	 * @param {String} arg - The character data to insert.
	 */
	insertData(offset, arg) {};
	/**
	 * @description Replaces a specified range of character data in this node.
	 * @param {Number} offset - The position within the data to start replacing from.
	 * @param {Number} count - The number of characters from offset to replace.
	 * @param {String} arg - The character data to insert.
	 */
	replaceData(offset, count, arg) {};
	/**
	 * @returns String The specified substring of the this node's data (if any), otherwise an empty string.
	 * @param {Number} offset - The position within the data to start the substring from.
	 * @param {Number} count - The number of characters from offset to include in the substring.
	 */
	substringData(offset, count) {};

}
/**
 * A DAZScript wrapper for QDomComment. This object represents a "Comment" in a DOM document.
 * Instances of this object are not constructed directly, rather they are returned by calling DzDomDocument.createComment().
 */
class DzDomComment extends DzDomCharacterData {

}
/**
 * A DAZScript wrapper for QDomDocument. This object represents an entire DOM document. Conceptually, it is the root of the document tree and provides the primary access to the document's data.
 * Typically, this is the only DOM node that is constructed directly; using the default constructors of the other DOM and XML Objects usually only results in empty objects that cannot be manipulated or inserted into the document.
 * To populate a document, use loadContent() to cause data to be parsed from an XML (or XML derivative) file, or use setContent() to cause data to be parsed from an XML (or XML derivative) string.
 * Note that it is also possible to create nodes of the DOM tree from scratch by using the following factory functions:
 * The parsed XML data is represented by an internal tree of nodes that can be accessed using DOM and XML Objects. The internal objects in the DOM tree are deleted once the last DOM object referencing them and the DzDomDocument itself are deleted.
 * For more information about the Document Object Model (DOM) see the Level 1 and Level 2 Core specifications.
 */
class DzDomDocument extends DzDomNode {
	/**
	 * @description Default constructor. Creates an empty DOM document. Typically, this is the only DOM node that is constructed directly.
	 */
	constructor() {};
	/**
	 * @returns DzDomAttr A new "Attribute" node that is a member of this document.
	 * @param {String} name - The name of the "Attribute" to create.
	 * @attention The node must still be added as a child of one of the document's element nodes using DzDomElement.setAttributeNode(). An easier way to add attributes to an element is to simply call DzDomElement.setAttribute() on the element node.
	 */
	createAttribute(name) {};
	/**
	 * @returns DzDomAttr A new "Attribute" node, in the specified namespace, that is a member of this document.
	 * @param {String} nsURI - The namespace of the "Attribute" to create.
	 * @param {String} qName - The qualified name of the "Attribute" to create.
	 * @attention The node must still be added as a child of one of the document's element nodes using DzDomElement.setAttributeNodeNS(). An easier way to add namespaced attributes to an element is to simply call DzDomElement.setAttributeNS() on the element node.
	 */
	createAttributeNS(nsURI, qName) {};
	/**
	 * @returns DzDomCDATASection A new "Character Data Section" node that is a member of this document.
	 * @param {String} value - The string value to store in the document.
	 * @attention The node must still be added it as a child of the document or one of its nodes.
	 */
	createCDATASection(value) {};
	/**
	 * @returns DzDomComment A new "Comment" node that is a member of this document.
	 * @param {String} value - The text of the comment.
	 * @attention The node must still be added it as a child of the document or one of its nodes.
	 */
	createComment(value) {};
	/**
	 * @returns DzDomDocumentFragment A new "Document Fragment" node that is a member of this document.
	 * @attention The node must still be added it as a child of the document or one of its nodes.
	 */
	createDocumentFragment() {};
	/**
	 * @returns DzDomElement A new "Element" node that is a member of this document.
	 * @param {String} tagName - The name of the "Element" node to create.
	 * @attention The node must still be added it as a child of the document or one of its nodes.
	 */
	createElement(tagName) {};
	/**
	 * @returns DzDomElement A new "Element" node, in the specified namespace, that is a member of this document.
	 * @param {String} nsURI - The namespace of the "Element" to create.
	 * @param {String} qName - The qualified name of the "Element" to create.
	 * @attention The node must still be added it as a child of the document or one of its nodes.
	 */
	createElementNS(nsURI, qName) {};
	/**
	 * @returns DzDomEntityReference A new "Entity Reference" node that is a member of this document.
	 * @param {String} name - The name of the "Entity Reference" to create.
	 * @attention The node must still be added it as a child of the document or one of its nodes.
	 */
	createEntityReference(name) {};
	/**
	 * @returns DzDomProcessingInstruction A new "Processing Instruction" node that is a member of this document.
	 * @param {String} target - The target of the processing instruction.
	 * @param {String} data - The data to be processed.
	 * @attention The node must still be added it as a child of the document or one of its nodes.
	 */
	createProcessingInstruction(target, data) {};
	/**
	 * @returns DzDomText A new "Text" node that is a member of this document.
	 * @param {String} value - The text to store in the node.
	 * @attention The node must still be added it as a child of the document or one of its nodes.
	 */
	createTextNode(value) {};
	/**
	 * @returns DzDomDocumentType A DzDomDocumentType for this document.
	 */
	doctype() {};
	/**
	 * @returns DzDomNode A DzDomElement with the specified ID (if any), otherwise a DzDomBasicNode.
	 * @param elementId - The ID of the element to retrieve.
	 */
	elementById(id) {};
	/**
	 * @returns DzDomNode A new node that is a member of this document that is a (deep) copy of the specified node.
	 * @param {DzDomNode} node - The node to import.
	 * @param {Boolean} deep - If true, node and all of its children are imported recursively. If false, only node is imported.
	 * @attention The node must still be added it as a child of the document or one of its nodes.
	 */
	importNode(node, deep) {};
	/**
	 * @description Sets the contents of the document by parsing the file at the specified path.
	 * @returns Boolean true if the file was successfully parsed, otherwise false.
	 * @param {String} filename - The (absolute) path of the file to load.
	 */
	loadContent(filename) {};
	/**
	 * @description Saves the contents of the document to the specified file.
	 * @returns Boolean true if the file was successfully saved, otherwise false.
	 * @param {String} filename - The (absolute) path of the file to save.
	 */
	saveContent(filename) {};
	/**
	 * @description Sets the contents of this document from the specified string.
	 * @returns Boolean true if the string was successfully parsed, otherwise false.
	 * @param {String} text - The XML document, in string form, to set the contents of this document to; assumed to be a Unicode string, no encoding detection is performed.
	 */
	setContent(text) {};
	/**
	 * @returns ByteArray The contents of this document in its textual representation as a byte array, encoded as UTF-8.
	 * @since 4.11.0.155
	 * @param {Number} indent - The amount of space to indent sub-elements.
	 */
	toByteArray(indent = 1) {};
	/**
	 * @returns String The contents of the document in its textual representation.
	 * @param {Number} indent - The amount of space to indent sub-elements. (since 4.11.0.155)
	 */
	toString(indent = 1) {};

}
/**
 * A DAZScript wrapper for QDomDocumentFragment. This object represents a tree of DzDomNode objects which are not usually a complete DzDomDocument.
 * Instances of this object are not constructed directly, rather they are returned by calling DzDomDocument.createDocumentFragment().
 * The most important feature of this object is the way it is treated by DzDomNode.insertAfter(), DzDomNode.insertBefore(), DzDomNode.replaceChild() and DzDomNode.appendChild(); instead of inserting the fragment itself, all of the fragment's children are inserted.
 */
class DzDomDocumentFragment extends DzDomNode {

}
/**
 * A DAZScript wrapper for QDomDocumentType. This object represents a "Document Type" node in a DOM document tree.
 * Instances of this object are not constructed directly, rather they are retrieved from a DOM document by calling DzDomDocument.doctype().
 */
class DzDomDocumentType extends DzDomNode {
	/**
	 * @description Holds the internal subset of the document type. (Read Only)
	 * @type {String}
	 */
	internalSubset;
	/**
	 * @description Holds the name of this node; as specified in the !DOCTYPE tag. (Read Only)
	 * @type {String}
	 */
	name;
	/**
	 * @description Holds the public identifier of the external Document Type Definition (DTD) subset. (Read Only)
	 * @type {String}
	 */
	publicId;
	/**
	 * @description Holds the system identifier of the external Document Type Definition (DTD) subset. (Read Only)
	 * @type {String}
	 */
	systemId;

}
/**
 * A DAZScript wrapper for QDomElement. This object represents an "Element" in a DOM document.
 * Instances of this object are not constructed directly, rather they are returned by calling DzDomDocument.createElement().
 */
class DzDomElement extends DzDomNode {
	/**
	 * @description Holds the tag name of this element.
	 * @type {String}
	 */
	tagName;
	/**
	 * @returns String The value of the attribute with the specified name (if any), otherwise the value specified by defValue.
	 * @param {String} name - The name of the attribute to retrieve the value of.
	 * @param {String} defValue - The default value if the specified attribute does not already exist.
	 */
	attribute(name, defValue = "") {};
	/**
	 * @returns DzDomNode The node that represents the name attribute (if any), otherwise a DzDomBasicNode.
	 * @param {String} name - The name of the attribute on this element to retrieve a node for.
	 */
	attributeNode(name) {};
	/**
	 * @returns DzDomNode The node that represents the attribute (if any) in the specified namespace, with the specified name, otherwise a DzDomBasicNode.
	 * @param {String} nsURI - The namespace of the attribute to retrieve the value of.
	 * @param {String} localName - The name of the attribute to retrieve the value of.
	 */
	attributeNodeNS(nsURI, localName) {};
	/**
	 * @returns String The value of the attribute (if any) in the specified namespace, with the specified name, otherwise the value specified by defValue.
	 * @param {String} nsURI - The namespace of the attribute to retrieve the value of.
	 * @param {String} localName - The name of the attribute to retrieve the value of.
	 * @param {String} defValue - The default value if the specified attribute does not already exist.
	 */
	attributeNS(nsURI, localName, defValue = "") {};
	/**
	 * @returns Object An Object where the attributes of this node are represented as its properties (keys) and their values correspond to the attribute values.
	 * @since 4.11.0.279
	 */
	attributes() {};
	/**
	 * @returns Array A list of descendant elements named tagName (if any), in the order they were encountered.
	 * @since 4.11.0.279
	 * @param {String} tagName - The name of descendant elements to retrieve.
	 */
	elementsByTagName(tagName) {};
	/**
	 * @returns Array A list of descendant elements (if any), in the specified namespace, with the specified name, in the order they were encountered.
	 * @since 4.11.0.279
	 * @param {String} nsURI - The namespace of descendant elements to retrieve.
	 * @param {String} localName - The name of descendant elements to retrieve.
	 */
	elementsByTagNameNS(nsURI, localName) {};
	/**
	 * @returns Boolean true if the element has an attribute with the specified name, otherwise false.
	 * @param {String} name - The name of the attribute to check.
	 */
	hasAttribute(name) {};
	/**
	 * @returns Boolean true if the element has an attribute, in the specified namespace, with the specified name, otherwise false.
	 * @param {String} nsURI - The namespace of the attribute to check.
	 * @param {String} localName - The name of the attribute to check.
	 */
	hasAttributeNS(nsURI, localName) {};
	/**
	 * @description Removes an attribute from this element.
	 * @param {String} name - The name of the attribute to remove.
	 */
	removeAttribute(name) {};
	/**
	 * @description Removes an attribute from this element.
	 * @returns DzDomNode The attribute that was removed (if any), otherwise a DzDomBasicNode.
	 * @param {DzDomAttr} attr - The node for the attribute to remove.
	 */
	removeAttributeNode(attr) {};
	/**
	 * @description Removes an attribute, in the specified namespace, from this element.
	 * @param {String} nsURI - The namespace of the attribute to remove.
	 * @param {String} localName - The name of the attribute to remove.
	 */
	removeAttributeNS(nsURI, localName) {};
	/**
	 * @description Sets (or adds) an attribute with the specified name/value on this element.
	 * @param {String} name - The name of the attribute to set.
	 * @param {String} value - The value to set the attribute to.
	 */
	setAttribute(name, value) {};
	/**
	 * @description Sets (or adds) an attribute to this element using a DzDomAttr node.
	 * @returns DzDomNode The node for the attribute that was replaced by attr. If no attribute was replaced, a DzDomBasicNode is returned.
	 * @param {DzDomAttr} attr - The node to set/add the attribute with.
	 */
	setAttributeNode(attr) {};
	/**
	 * @description Sets (or adds) an attribute to this element using a DzDomAttr node.
	 * @returns DzDomNode The node for the attribute that was replaced (if any) by attr, otherwise a DzDomBasicNode.
	 * @param {DzDomAttr} attr - The node to set/add the attribute with.
	 */
	setAttributeNodeNS(attr) {};
	/**
	 * @description Sets (or adds) an attribute with the specified name/value, in the specified namespace, on this element.
	 * @param {String} nsURI - The namespace of the attribute to set.
	 * @param {String} qName - The qualified name of the attribute to set.
	 * @param {String} value - The value to set the attribute to.
	 */
	setAttributeNS(nsURI, qName, value) {};

}
/**
 * A DAZScript wrapper for QDomEntity. This object represents an "Entity" in a DOM document.
 */
class DzDomEntity extends DzDomNode {
	/**
	 * @description Holds the name of the notation for the entity. (Read Only)
	 * @type {String}
	 */
	notationName;
	/**
	 * @description Holds the public identifier of the entity. (Read Only)
	 * @type {String}
	 */
	publicId;
	/**
	 * @description Holds the system identifier of the entity. (Read Only)
	 * @type {String}
	 */
	systemId;

}
/**
 * A DAZScript wrapper for QDomEntityReference. This object represents an "Entity Reference" in a DOM document.
 * Instances of this object are not constructed directly, rather they are returned by calling DzDomDocument.createEntityReference().
 */
class DzDomEntityReference extends DzDomNode {

}
/**
 * A DAZScript wrapper for QDomNode. This is an abstract base class that provides general functionality for Document Object Model (DOM) nodes.
 * For more information about the Document Object Model (DOM) see the Level 1 and Level 2 Core specifications.
 * For a more general introduction of the DOM implementation see the DzDomDocument documentation.
 */
class DzDomNode extends QObject {
	/**
	 * @description Holds the local name of this node, if the node uses namespaces; only DzDomElement or DzDomAttr nodes can have namespaces; a namespace must have be specified at creation time - it is not possible to add a namespace post-creation.. (Read Only)
	 * @type {String}
	 */
	localName;
	/**
	 * @description Holds the namespace URI of this node. (Read Only)
	 * @type {String}
	 */
	namespaceURI;
	/**
	 * @description Holds the name of this node - the meaning of which depends on nodeType : (Read Only)  * for AttributeNode - the name of the attribute
	 * @type {String}
	 */
	nodeName;
	/**
	 * @description Holds the type of this node. (Read Only)
	 * @type {NodeType}
	 */
	nodeType;
	/**
	 * @description Holds the value of this node - the meaning of which depends on nodeType :  * for AttributeNode - the attribute value
	 * @type {String}
	 */
	nodeValue;
	/**
	 * @description Holds the namespace prefix of this node; only DzDomElement or DzDomAttr nodes can have namespaces; a namespace prefix must have be specified at creation time - it is not possible to add a namespace post-creation.
	 * @type {String}
	 */
	prefix;
	/**
	 * @description ENUM: A DzDomElement
	 */
	ElementNode;
	/**
	 * @description ENUM: A DzDomAttr
	 */
	AttributeNode;
	/**
	 * @description ENUM: A DzDomText
	 */
	TextNode;
	/**
	 * @description ENUM: A DzDomCDATASection
	 */
	CDATASectionNode;
	/**
	 * @description ENUM: A DzDomEntityReference
	 */
	EntityReferenceNode;
	/**
	 * @description ENUM: A DzDomEntity
	 */
	EntityNode;
	/**
	 * @description ENUM: A DzDomProcessingInstruction
	 */
	ProcessingInstructionNode;
	/**
	 * @description ENUM: A DzDomComment
	 */
	CommentNode;
	/**
	 * @description ENUM: A DzDomDocument
	 */
	DocumentNode;
	/**
	 * @description ENUM: A DzDomDocumentType
	 */
	DocumentTypeNode;
	/**
	 * @description ENUM: A DzDomDocumentFragment
	 */
	DocumentFragmentNode;
	/**
	 * @description ENUM: A DzDomNotation
	 */
	NotationNode;
	/**
	 * @description ENUM: A DzDomBasicNode
	 */
	BaseNode;
	/**
	 * @description ENUM: A DzDomCharacterData
	 */
	CharacterDataNode;
	/**
	 * @description Appends a node in the DOM to the end of this node's child list.
	 * @returns DzDomNode
	 * @param {DzDomNode} child - The node in the DOM to append.
	 */
	appendChild(child) {};
	/**
	 * @returns Array A list of the direct node children of this node (if any).
	 * @since 4.11.0.279
	 */
	childNodes() {};
	/**
	 * @description Converts the node into a DzDomBasicNode. Its type and contents are cleared.
	 * @returns Boolean
	 */
	clear() {};
	/**
	 * @returns DzDomNode A new node in the DOM that is a (deep) copy of this node.
	 * @param {Boolean} deep - If true (default), the return value will be a recursive copy this node and all of its children.
	 */
	cloneNode(deep = true) {};
	/**
	 * @returns Number The column number in the DOM document where the node was parsed.
	 * @since 4.11.0.279
	 */
	columnNumber() {};
	/**
	 * @returns DzDomNode This node's first child node (if any), otherwise a DzDomBasicNode.
	 */
	firstChild() {};
	/**
	 * @returns DzDomNode If tagName is non-empty, the first child DzDomElement of this node with a matching name (if any), otherwise the first child DzDomElement (if any), otherwise a DzDomBasicNode. If tagName is empty, the first child DzDomElement (if any), otherwise a DzDomBasicNode.
	 * @since 4.11.0.279
	 * @param {String} tagName - The name of the child node to retrieve.
	 */
	firstChildElement(tagName = "") {};
	/**
	 * @returns Boolean true if the node has attributes, otherwise false.
	 */
	hasAttributes() {};
	/**
	 * @returns Boolean true if this node has children, otherwise false.
	 */
	hasChildNodes() {};
	/**
	 * @description Inserts a node in the DOM into this node's child list after another node.
	 * @returns DzDomNode
	 * @param {DzDomNode} newChild - The node in the DOM to insert.
	 * @param {DzDomNode} refChild - The node in the DOM to insert after.
	 */
	insertAfter(newChild, refChild) {};
	/**
	 * @description Inserts a node in the DOM into this node's child list in front of another node.
	 * @returns DzDomNode
	 * @param {DzDomNode} newChild - The node in the DOM to insert.
	 * @param {DzDomNode} refChild - The node in the DOM to insert before.
	 */
	insertBefore(newChild, refChild) {};
	/**
	 * @returns Boolean true if this node is an attribute, otherwise false.
	 */
	isAttr() {};
	/**
	 * @returns Boolean true if this node is a CDATA section, otherwise false.
	 */
	isCDATASection() {};
	/**
	 * @returns Boolean true if this node is a character data, otherwise false.
	 */
	isCharacterData() {};
	/**
	 * @returns Boolean true if this node is a comment, otherwise false.
	 */
	isComment() {};
	/**
	 * @returns Boolean true if this node is a document, otherwise false.
	 */
	isDocument() {};
	/**
	 * @returns Boolean true if this node is a document fragment, otherwise false.
	 */
	isDocumentFragment() {};
	/**
	 * @returns Boolean true if this node is a document type, otherwise false.
	 */
	isDocumentType() {};
	/**
	 * @returns Boolean true if this node is an element, otherwise false.
	 */
	isElement() {};
	/**
	 * @returns Boolean true if this node is an entity, otherwise false.
	 */
	isEntity() {};
	/**
	 * @returns Boolean true if this node is an entity reference, otherwise false.
	 */
	isEntityReference() {};
	/**
	 * @returns Boolean true if this node is a notation, otherwise false.
	 */
	isNotation() {};
	/**
	 * @returns Boolean true if this node is invalid (Null), otherwise false.
	 */
	isNull() {};
	/**
	 * @returns Boolean true if this node is a processing instruction, otherwise false.
	 */
	isProcessingInstruction() {};
	/**
	 * @returns Boolean true if the DOM implementation supports the specified feature in the specified version, otherwise false.
	 * @param {String} feature - The feature to check.
	 * @param {String} version - The version to check.
	 */
	isSupported(feature, version) {};
	/**
	 * @returns Boolean true if this node is text, otherwise false.
	 */
	isText() {};
	/**
	 * @returns DzDomNode This node's last child node (if any), otherwise a DzDomBasicNode.
	 */
	lastChild() {};
	/**
	 * @returns DzDomNode If tagName is non-empty, the last child DzDomElement of this node with a matching name (if any), otherwise the last child DzDomElement (if any), otherwise a DzDomBasicNode. If tagName is empty, the last child DzDomElement (if any), otherwise a DzDomBasicNode.
	 * @since 4.11.0.279
	 * @param {String} tagName - The name of the child node to retrieve.
	 */
	lastChildElement(tagName = "") {};
	/**
	 * @returns Number The line number in the DOM document where the node was parsed.
	 * @since 4.11.0.279
	 */
	lineNumber() {};
	/**
	 * @returns DzDomNode The first direct child node with a matching name (if any), otherwise a DzDomBasicNode.
	 * @param {String} name - The name of the child node to retrieve.
	 */
	namedItem(name) {};
	/**
	 * @returns DzDomNode This node's next sibling node (if any), otherwise a DzDomBasicNode.
	 */
	nextSibling() {};
	/**
	 * @returns DzDomNode If tagName is non-empty, the next sibling DzDomElement of this node with a matching name (if any), otherwise any next sibling DzDomElement (if any), otherwise a DzDomBasicNode. If tagName is empty, the next sibling DzDomElement (if any), otherwise a DzDomBasicNode.
	 * @since 4.11.0.279
	 * @param {String} tagName - The name of the sibling node to retrieve.
	 */
	nextSiblingElement(tagName = "") {};
	/**
	 * @description Converts all of this node's children into standard form (e.g. adjacent text nodes will be merged).
	 */
	normalize() {};
	/**
	 * @returns DzDomNode The document that this node belongs to.
	 */
	ownerDocument() {};
	/**
	 * @returns DzDomNode This node's parent node (if any), otherwise a DzDomBasicNode.
	 */
	parentNode() {};
	/**
	 * @returns DzDomNode This node's previous sibling node (if any), otherwise a DzDomBasicNode.
	 */
	previousSibling() {};
	/**
	 * @returns DzDomNode If tagName is non-empty, the previous sibling DzDomElement of this node with a matching name (if any), otherwise any previous sibling DzDomElement (if any), otherwise a DzDomBasicNode. If tagName is empty, the previous sibling DzDomElement (if any), otherwise a DzDomBasicNode.
	 * @since 4.11.0.279
	 * @param {String} tagName - The name of the sibling node to retrieve.
	 */
	previousSiblingElement(tagName = "") {};
	/**
	 * @description Removes a node in the DOM from this node's child list.
	 * @returns DzDomNode
	 * @param {DzDomNode} oldChild - The node in the DOM to replace.
	 */
	removeChild(oldChild) {};
	/**
	 * @description Inserts a node in the DOM into this node's child list in place of another node.
	 * @returns DzDomNode
	 * @param {DzDomNode} newChild - The node in the DOM to insert.
	 * @param {DzDomNode} oldChild - The node in the DOM to replace.
	 */
	replaceChild(newChild, oldChild) {};

}
/**
 * A DAZScript wrapper for QDomNotation. This object represents a "Notation" in a DOM document.
 */
class DzDomNotation extends DzDomNode {
	/**
	 * @description Holds the public identifier of the notation. (Read Only)
	 * @type {String}
	 */
	publicId;
	/**
	 * @description Holds the system identifier of the notation. (Read Only)
	 * @type {String}
	 */
	systemId;

}
/**
 * A DAZScript wrapper for QDomProcessingInstruction. This object represents a "Processing Instruction" in a DOM document.
 * Instances of this object are not constructed directly, rather they are returned by calling DzDomDocument.createProcessingInstruction().
 */
class DzDomProcessingInstruction extends DzDomNode {
	/**
	 * @description Holds the data of the processing instruction.
	 * @type {String}
	 */
	data;
	/**
	 * @description Holds the target of the processing instruction. (Read Only)
	 * @type {String}
	 */
	target;

}
/**
 * A DAZScript wrapper for QDomText. This object represents "Text" data in a DOM document.
 * Instances of this object are not constructed directly, rather they are returned by calling DzDomDocument.createTextNode().
 */
class DzDomText extends DzDomCharacterData {
	/**
	 * @description Splits this text node into two text nodes. This node keeps the first part of the split and the remaining characters are inserted into the document tree as another DzDomText object, after this object.
	 * @returns DzDomNode The newly created DzDomText object with the characters in the latter part of the split (if any), otherwise a DzDomBasicNode.
	 * @param {Number} offset - The position within this node's text to split at.
	 */
	splitText(offset) {};

}
/**
 * TODO:
 * Add detailed description.
 */
class DzDrawStyle extends DzBase, DzRefCountedItem {
	/**
	 * @description Whether or not visual cues (such as bounding boxes for selected nodes) should be drawn when appropriate.
	 * @type {Boolean}
	 */
	drawCuesDefault;
	/**
	 * @description Whether or not only objects should be drawn.
	 * @type {Boolean}
	 */
	drawObjectsOnly;
	/**
	 * @description Whether or not only shadow casters should be drawn.
	 * @type {Boolean}
	 */
	drawShadowCastersOnly;
	/**
	 * @description Whether or not the style is a user style (Read Only).
	 * @type {Boolean}
	 */
	isUserStyle;
	/**
	 * @description Whether or not the draw is render quality.
	 * @type {Boolean}
	 */
	renderQuality;
	/**
	 * @description ENUM: Draws unlit wire-frame bounding boxes.
	 */
	WireBox;
	/**
	 * @description ENUM: Draws smooth-shaded bounding boxes.
	 */
	SolidBox;
	/**
	 * @description ENUM: Draws unlit wire-frames.
	 */
	Wireframe;
	/**
	 * @description ENUM: Draws lit wire-frames.
	 */
	LitWireframe;
	/**
	 * @description ENUM: Draws unlit wire-frames, front geometry facing only.
	 */
	HiddenLine;
	/**
	 * @description ENUM: Draws lit smooth shaded objects with wireframes imposed.
	 */
	WireShaded;
	/**
	 * @description ENUM: Draws lit smooth shaded objects.
	 */
	SmoothShaded;
	/**
	 * @description ENUM: Draws lit smooth shaded objects with any texture/transparency maps applied and wireframes imposed.
	 */
	WireTextured;
	/**
	 * @description ENUM: Draws lit smooth shaded objects with any texture/transparency maps applied.
	 */
	Textured;
	/**
	 * @description ENUM: Draws lit smooth shaded objects with a GLSL shader applied.
	 */
	GLSLShader;
	/**
	 * @description ENUM: Draws unlit smooth shaded objects.
	 */
	Unshaded;
	/**
	 * @description ENUM: Special mode for using OpenGL to determine a selected object when the user clicks in the view.
	 */
	Picking;
	/**
	 * @returns Boolean true if visual cues (such as bounding boxes for selected nodes) should be drawn for the current drawing operation, false if visual cues should not be drawn.
	 */
	drawCues() {};
	/**
	 * @description If the current shade style is not using lighting, this method will set the shade style to the nearest match that uses single-pass drawing and lighting.
	 */
	forceUseLighting() {};
	/**
	 * @returns Number The current pass number; a second pass is drawn for the hidden line and wire shaded styles.
	 */
	pass() {};
	/**
	 * @returns Boolean true if regions are enabled, false if regions are disabled.
	 * @attention This is only valid for node picking draw operations.
	 */
	regionsEnabled() {};
	/**
	 * @returns Boolean true if selection maps are enabled, false if selection maps are disabled.
	 * @attention This is only valid for node picking draw operations.
	 */
	selectionMapsEnabled() {};
	/**
	 * @returns DzSceneshader The scene shader for this draw operation (if any), otherwise NULL.
	 */
	shader() {};
	/**
	 * @returns ShadeStyle The shading style for the current drawing operation.
	 */
	shadeStyle() {};

}
/**
 * A Dynamic Divider takes two DzWidget objects and places a divider bar between them. It handles resize events, as well as toggling of the divider bar if toggling is enabled.
 * For complex arrangements you can nest instances of this class by specifying them as one of the widgets via setFirstWidget( DzWidget ) or setSecondWidget( DzWidget )
 */
class DzDynamicDividerWgt extends DzWidget {
	/**
	 * @description Instantiates DzDynamicDividerWgt.
	 * @param {DzWidget} parent - The parent of this object (should not be undefined).
	 * @attention : This constructor creates an instance of this object in an undefined state until both setFirstWidget( DzWidget ) and setSecondWidget( DzWidget ) are called.
	 */
	constructor(parent) {};
	/**
	 * @description Instantiates DzDynamicDividerWgt.
	 * @param {DzWidget} parent - The parent of this object (should not be undefined).
	 * @param {DzWidget} firstChild - The left (or top) widget (should not be undefined).
	 * @param {DzWidget} secondChild - The right (or bottom) widget (should not be undefined).
	 */
	constructor(parent, firstChild, secondChild) {};
	/**
	 * @description Holds the actual position of the divider bar as a percentage in decimal format (0.5 = 50%).
	 * @type {Number}
	 */
	actualDividerPercent;
	/**
	 * @description Holds the orientation of the divider bar.
	 * @type {DividerOrientation}
	 */
	dividerOrientation;
	/**
	 * @description Holds the type of divider bar used.
	 * @type {BarStyle}
	 */
	dividerType;
	/**
	 * @description Holds the margin surrounding this object.
	 * @type {Number}
	 */
	margin;
	/**
	 * @description Holds whether or not the divider bar is currently minimized.
	 * @type {Boolean}
	 */
	minimized;
	/**
	 * @description Holds whether or not the divider bar can be moved by dragging.
	 * @type {Boolean}
	 */
	moveDisabled;
	/**
	 * @description Holds the preferred position of the divider bar as a percentage in decimal format (0.5 = 50%).
	 * @type {Number}
	 */
	preferredDividerPercent;
	/**
	 * @description Holds the preferred widget type.
	 * @type {WidgetType}
	 */
	preferredWidget;
	/**
	 * @description Holds the preferred extent of the widget. This value is only used if the value of DzDynamicDividerWgt.preferredWidget is not DzDividerBar.WTNone.
	 * @type {Number}
	 */
	preferredWidgetExtent;
	/**
	 * @description Holds the spacing between the widgets and the divider bar.
	 * @type {Number}
	 */
	spacing;
	/**
	 * @description Holds the direction the toggle bar will be minimized when clicked.
	 * @type {WidgetType}
	 */
	toggleDirection;
	/**
	 * @description Holds whether or not the divider bar can be minimized when clicked.
	 * @type {Boolean}
	 */
	toggleEnabled;
	/**
	 * @description ENUM: Use the thick divider bar.
	 */
	BSFull;
	/**
	 * @description ENUM: Use the medium sized divider bar.
	 */
	BSSemi;
	/**
	 * @description ENUM: Use the thin divider bar.
	 */
	BSThin;
	/**
	 * @description ENUM: Represents a horizontal divider bar (widgets are top and bottom).
	 */
	DOHorizontal;
	/**
	 * @description ENUM: Represents a vertical divider bar (widgets are left and right).
	 */
	DOVertical;
	/**
	 * @description ENUM: Stretch the left (or top) widget when resizing.
	 */
	RTStretchFirst;
	/**
	 * @description ENUM: Stretch the right (or bottom) widget when resizing.
	 */
	RTStretchSecond;
	/**
	 * @description ENUM: Stretch both widgets equally when resizing.
	 */
	RTStretchBoth;
	/**
	 * @description ENUM: References the widget to the left of the divider if the orientation is vertical or the widget to the top of the divider if the orientation is horizontal.
	 */
	WTLeftOrTop;
	/**
	 * @description ENUM: References the widget to the right of the divider if the orientation is vertical or the widget to the bottom of the divider if the orientation is horizontal.
	 */
	WTRightOrBottom;
	/**
	 * @description ENUM: References both widgets of the divider bar.
	 */
	WTBoth;
	/**
	 * @description ENUM: References neither widget of the divider bar.
	 */
	WTNone;
	/**
	 * @description Moves the divider distance pixels from the current location. If the new location will cause the divider to be displayed in an invalid location (based on minimum size requirements of the widgets), it will be moved and displayed as close as possible to the desired location.
	 * @param {Number} distance - The distance in pixels from the current location.
	 */
	moveDivider(distance) {};
	/**
	 * @description Sets the divider bar to be used for this object
	 * @param {DividerOrientation} orientation - The orientation of the divider bar.
	 * @param type - The type of divider bar to be used.
	 */
	setDividerBar(orientation, barStyle) {};
	/**
	 * @description Sets the left (or top) widget, depending on the orientation.
	 * @param {DzWidget} first - The widget to be used in the left (or top) position. (should not be undefined)
	 */
	setFirstWidget(first) {};
	/**
	 * @description Sets the preferred extent (width or height depending on orientation) for the specified widget. If this extent cannot be used (usually due to minimum size constraints) then the divider will be positioned as close as possible to the preferred extent.
	 * @since 4.9.0.33
	 * @param {WidgetType} widget - The widget that should be sized. Values other than WTLeftOrTop or WTRightOrBottom will cause this method to have no effect.
	 * @param {Number} extent - The extent to be set for the widget.
	 */
	setPreferredWidgetExtent(widget, extent) {};
	/**
	 * @description Sets the right (or bottom) widget, depending on the orientation.
	 * @param {DzWidget} second - The widget to be used in the right (or bottom) position. (should not be undefined)
	 */
	setSecondWidget(second) {};
	/**
	 * @description Toggles the widget to the specified minimized state, if needed.
	 * @since 4.9.0.33
	 * @param {Boolean} minimized - Whether the divider should be minimized or not.
	 */
	setToggleState(minimized) {};
	/**
	 * @description Swaps the left (or top) and right (or bottom) widget.
	 * @since 4.9.0.33
	 */
	swapFirstAndSecondWidgets() {};
	/**
	 * @description Toggles the widget in the direction specified by toggleDirection. If toggling is disabled, this method has no effect. If either the first or second widget is undefined, this method will also have no effect.
	 */
	toggleWidget() {};

}
/**
 * 
 */
class DzEdge extends Object {
	/**
	 * @description Default Constructor.
	 */
	constructor() {};
	/**
	 * @description Creates an edge by parsing a string.
	 * @param {String} edge - A string representation of the edge in the form "[ vertIdx1, vertIdx2, facetA, facetB, offsetA, offsetB, index ]"
	 */
	constructor(edge) {};
	/**
	 * @description Constructor. Creates an edge for the given vertex indices.
	 * @param {Number} vertex1 - The index of the vertex this edge originates at.
	 * @param {Number} vertex2 - The index of the vertex this edge ends at.
	 */
	constructor(vertex1, vertex2) {};
	/**
	 * @description Copy Constructor. Creates an edge that is a copy of the given edge.
	 * @param {DzEdge} edge - The edge to copy.
	 */
	constructor(edge) {};
	/**
	 * @description Holds the offset from the cage.
	 * @type {Number}
	 */
	cageOffsetA;
	/**
	 * @description Holds the index of a DzFacet this edge belongs to.
	 * @type {Number}
	 */
	facetA;
	/**
	 * @description Holds the index of the other DzFacet this edge belongs to (if any), otherwise this is an open edge.
	 * @type {Number}
	 */
	facetB;
	/**
	 * @description Holds the index of this edge.
	 * @type {Number}
	 */
	index;
	/**
	 * @description Holds the offset …
	 * @type {Number}
	 */
	offsetA;
	/**
	 * @description Holds the offset …
	 * @type {Number}
	 */
	offsetB;
	/**
	 * @description Holds the index of the vertex this edge originates at.
	 * @type {Number}
	 */
	vertIdx1;
	/**
	 * @description Holds the index of the vertex this edge ends at.
	 * @type {Number}
	 */
	vertIdx2;
	/**
	 * @returns Boolean true if this is an open edge, otherwise false.
	 */
	isOpenEdge() {};
	/**
	 * @returns String A string representation of this edge in the form "[ vertIdx1, vertIdx2, facetA, facetB, offsetA, offsetB, index ]".
	 */
	toString() {};

}
/**
 * Classes derived from DzElement may have any number of properties (objects derived from DzProperty). Those properties may be added and removed at runtime and may be specified as animatable or not. There are several types of properties that have been supplied with the Studio SDK. Property names must be unique within an element. A variety of methods are provided to allow easy traversal and/or searching of the properties list for an object.
 * Methods are provided to clear animation data on all properties of an object either over a range of time, or over all time.
 * DzElement takes ownership of all properties added via addProperty() and/or addPrivateProperty(). Subclasses should not attempt to delete properties that have been added to the element.
 */
class DzElement extends DzBase {
	/**
	 * @description Holds the number used to uniquely identify this element in the scene. (Read Only)
	 * @type {Number}
	 */
	elementID;
	/**
	 * @description ENUM: Editing the name of this element, and any of its constituent parts, is not intended to be exposed to the user.
	 */
	NoNameEdit;
	/**
	 * @description ENUM: The name of the element is intended to be exposed to the user for editing.
	 */
	ElementNameEdit;
	/**
	 * @description ENUM: The names of individual properties are intended to be exposed to the user for editing.
	 */
	PropertyNameEdit;
	/**
	 * @description Hang a new custom data item off of this element. Data items will be deleted when this element is deleted, so ownership of the data item is transferred to the element after this call. Do not attempt to delete the data item yourself unless you call removeDataItem() first.
	 * @returns DzError DZ_NO_ERROR on success, otherwise an appropriate error code.
	 * @param {DzElementData} item - The data item to attach to this element.
	 */
	addDataItem(item) {};
	/**
	 * @description Adds a new private property to this element that will be available for connections or direct editing.
	 * @returns DzError DZ_NO_ERROR on success, otherwise an appropriate error code.
	 * @param {DzProperty} prop - The property to add to the element.
	 */
	addPrivateProperty(prop) {};
	/**
	 * @description Adds a new property to this element that will be available for connections or direct editing.
	 * @returns DzError DZ_NO_ERROR on success, otherwise an appropriate error code.
	 * @param {DzProperty} prop - The property to add to the element.
	 */
	addProperty(prop) {};
	/**
	 * @description Begins an editing operation for this element - DzProperty.beginEdit() will be called for all properties belonging to this element.
	 */
	beginEdit() {};
	/**
	 * @description Cancels an editing operation for this element - DzProperty.cancelEdit() will be called for all properties belonging to this element.
	 */
	cancelEdit() {};
	/**
	 * @description Removes all animation keys set on the properties of this element.
	 */
	clearAllAnimData() {};
	/**
	 * @description Clears animation keys in the currently active animation layer. Removes animation data on all animatible properties owned by this element over the given range.
	 * @param {DzTimeRange} range - The range of time over which keys will be removed.
	 */
	clearAnimData(range) {};
	/**
	 * @description Matches the properties on this element to properties on the given element by name, and then copies the values of matching properties on source to the properties on this element.
	 * @param {DzElement} source - The element that this element should copy property values from.
	 */
	copyFrom(source) {};
	/**
	 * @description Copies the property values of the element to a 'clipboard' so that they may be saved and applied (copied) to another element - or to the same element.
	 * @returns DzElementclipboard The 'clipboard' which holds a copy of the current element's property values. These values are a snapshot of the current state of the element, and will remain unchanged even if the element is changed or deleted. The caller is responsible for deleting this element.
	 * @param {Array} contentTypes - A list of the contentTypes that should be included in the copy. An empty list will copy all property values.
	 */
	copyToClipboard(contentTypes = []) {};
	/**
	 * @description Remove the the data item from this element and deletes it. Pointer is invalid after this call if DZ_NO_ERROR is returned.
	 * @returns DzError DZ_NO_ERROR on success, otherwise an appropriate error code.
	 * @param {DzElementData} item - The data item to remove.
	 */
	deleteDataItem(item) {};
	/**
	 * @returns DzElementData The data item with the given name (if any), otherwise null.
	 * @param {String} dataName - The name of the user data item to find.
	 */
	findDataItem(dataName) {};
	/**
	 * @returns Number The first index of the data item (if any), otherwise -1.
	 * @param {DzElementData} item - The data item to find.
	 */
	findDataItemIndex(item) {};
	/**
	 * @returns DzProperty The matching property (if any), otherwise null.
	 * @param {DzProperty} srcProp - The property to search for a match.
	 */
	findMatchingProperty(srcProp) {};
	/**
	 * @returns DzProperty The private property with the given name (if any), otherwise null.
	 * @param {String} name - The name of the property to search for.
	 */
	findPrivateProperty(name) {};
	/**
	 * @returns DzProperty The private property with the given name (if any), otherwise null.
	 * @param {String} name - The name of the property to search for.
	 * @param {Boolean} caseSensitive - Whether or not the search should be case sensitive.
	 */
	findPrivateProperty(name, caseSensitive) {};
	/**
	 * @returns DzProperty The private property with the given label (if any), otherwise null.
	 * @param {String} label - The label of the property to search for.
	 */
	findPrivatePropertyByLabel(label) {};
	/**
	 * @returns DzProperty The property with the given label (if any), otherwise null.
	 * @param {String} label - The label of the property to search for.
	 * @param {Boolean} caseSensitive - Whether or not the search should be case sensitive.
	 */
	findPrivatePropertyByLabel(label, caseSensitive) {};
	/**
	 * @description Locate a property by name.
	 * @returns DzProperty The property with the given name (if any), otherwise null.
	 * @param {String} name - The name of the property to search for.
	 */
	findProperty(name) {};
	/**
	 * @returns DzProperty The property with the given name (if any), otherwise null.
	 * @param {String} name - The name of the property to search for.
	 * @param {Boolean} caseSensitive - Whether or not the search should be case sensitive.
	 */
	findProperty(name, caseSensitive) {};
	/**
	 * @returns DzProperty The property with the given label (if any), otherwise null.
	 * @param {String} label - The label of the property to search for.
	 * @param {Boolean} caseSensitive - Whether or not the search should be case sensitive.
	 */
	findPropertyByLabel(label, caseSensitive) {};
	/**
	 * @returns DzProperty The property with the given label (if any), otherwise null.
	 * @param {String} label - The label of the property to search for.
	 */
	findPropertyByLabel(label) {};
	/**
	 * @description Finishes an editing operation for this element - DzProperty.finishEdit() will be called for all properties belonging to this element.
	 */
	finishEdit() {};
	/**
	 * @description Populates the given settings object with the attributes of this element. If this settings object is not empty the save filters will save out this settings information in the preset.
	 * @param {DzSettings} settings - The settings object to put the information in.
	 */
	getAttributes(settings) {};
	/**
	 * @returns DzElementData The data item for this element at the given index.
	 * @param {Number} index - The index of the data item to return.
	 */
	getDataItem(index) {};
	/**
	 * @returns Array A list of the data items attached to this element.
	 */
	getDataItemList() {};
	/**
	 * @returns DzElement The child of this element at the given index (if any), otherwise null.
	 * @param {Number} which - The index of the child element to return.
	 */
	getElementChild(which) {};
	/**
	 * @returns DzElement The element that is the parent of this element (if any), otherwise null.
	 */
	getElementParent() {};
	/**
	 * @returns String The user-facing label for this element.
	 */
	getLabel() {};
	/**
	 * @returns DzScript The script that is executed when this element is loaded from a file (if any), otherwise null.
	 */
	getLoadScript() {};
	/**
	 * @returns NameEditScope The value that represents the intended scope (if any) at which the name of this element, or its constituent parts, is exposed to the user for editing.
	 * @since 4.12.1.103
	 */
	getNameEditScope() {};
	/**
	 * @returns Number The number of user data items attached to this element.
	 */
	getNumDataItems() {};
	/**
	 * @returns Number The number of children this element has.
	 */
	getNumElementChildren() {};
	/**
	 * @returns Number The number of private properties currently owned by this element.
	 */
	getNumPrivateProperties() {};
	/**
	 * @returns Number The number of properties currently owned by this element.
	 */
	getNumProperties() {};
	/**
	 * @returns DzProperty The private property at the given index (if valid), otherwise null.
	 * @param {Number} i - The index of the property to get.
	 */
	getPrivateProperty(index) {};
	/**
	 * @returns DzPropertyGroupTree The property group tree for private properties owned by this element. If this element does not manage its own property grouping, the tree that is returned will be the tree of the element that manages the property groups for this element.
	 */
	getPrivatePropertyGroups() {};
	/**
	 * @returns Array A list of all private properties on this element.
	 */
	getPrivatePropertyList() {};
	/**
	 * @returns DzProperty The property at the given index (if valid), otherwise null.
	 * @param {Number} i - The index of the property to get.
	 */
	getProperty(index) {};
	/**
	 * @returns DzPropertyGroupTree The property group tree for properties owned by this element. If this element does not manage its own property grouping, the tree that is returned will be the tree of the element that manages the property groups for this element.
	 */
	getPropertyGroups() {};
	/**
	 * @returns Array A list of all properties on this element.
	 */
	getPropertyList() {};
	/**
	 * @returns String The user-facing label for this type of element.
	 * @since 4.12.1.103
	 */
	getTypeLabel() {};
	/**
	 * @returns String The original value if dataName is already unique, otherwise a unique name.
	 * @since 4.9.3.117
	 * @param {String} dataName - The name of the data item to make unique.
	 */
	getUniqueDataItemName(dataName) {};
	/**
	 * @returns String The original value if name is already unique, otherwise a unique private property name.
	 * @since 4.9.3.117
	 * @param {String} name - The private property name to make unique.
	 */
	getUniquePrivatePropertyName(name) {};
	/**
	 * @returns String The original value if name is already unique, otherwise a unique property name.
	 * @since 4.9.3.117
	 * @param {String} name - The property name to make unique.
	 */
	getUniquePropertyName(name) {};
	/**
	 * @returns Boolean true if the element is in an editing operation, otherwise false.
	 */
	inEdit() {};
	/**
	 * @description Adds a new private property to this element that will be available for connections or direct editing.
	 * @returns DzError DZ_NO_ERROR on success, otherwise an appropriate error code.
	 * @param {DzProperty} index - The location in the list to insert the new property.
	 * @param {DzProperty} prop - The property to add to the element.
	 */
	insertPrivateProperty(index, prop) {};
	/**
	 * @description Adds a new property to this element that will be available for connections or direct editing.
	 * @returns DzError DZ_NO_ERROR on success, otherwise an appropriate error code.
	 * @param {DzProperty} index - The index in the properties list to insert the property.
	 * @param {DzProperty} prop - The property to insert in the element.
	 */
	insertProperty(index, prop) {};
	/**
	 * @description Moves a data item to a new index.
	 * @returns DzError DZ_NO_ERROR on success, otherwise an appropriate error code.
	 * @param {DzElementData} item - The data item to move.
	 * @param {Number} newIndex - The new index of the item.
	 */
	moveDataItemToIndex(item, index) {};
	/**
	 * @description Moves the given property from this element to newElement, if it can be removed. Properties can be specified as non-removable (i.e., DzProperty.isUserProperty()). Doing so makes it impossible to move that property to another element.
	 * @returns DzError DZ_NO_ERROR on success, otherwise an appropriate error code.
	 * @param {DzElement} prop - The property to remove from the element. If prop is not a user property, it returns DZ_ILLEGAL_ARGUMENT_ERROR. Note: This is also the return code for a null pointer. Passing a null pointer generates a log message, whereas passing a non-user property does not.
	 * @param {DzElement} newElement - The element that prop should be moved to.
	 */
	movePrivateProperty(prop, element) {};
	/**
	 * @description Moves the given property from this element to newElement, if it can be removed. Properties can be specified as non-removable (e.g. the rotation channels of the DzNode class). Doing so makes it impossible to move that property to another element.
	 * @returns DzError DZ_NO_ERROR on success, otherwise an appropriate error code.
	 * @param {DzElement} prop - The property to remove from the element. If prop is not a user property, it returns DZ_ILLEGAL_ARGUMENT_ERROR. Note: This is also the return code for a null pointer. Passing a null pointer generates a log message, whereas passing a non-user property does not.
	 * @param {DzElement} newElement - The element that prop should be moved to.
	 */
	moveProperty(prop, element) {};
	/**
	 * @description Remove the data item from this element.
	 * @returns DzError DZ_NO_ERROR on success, otherwise an appropriate error code.
	 * @param {DzElementData} item - The data item to remove.
	 */
	removeDataItem(item) {};
	/**
	 * @description Removes the given private property, if it can be removed. Properties can be specified as non-removable (i.e., DzProperty.isUserProperty() - e.g. the rotation channels of the DzNode class). Doing so makes it impossible to remove that property from this element.
	 * @returns DzError DZ_NO_ERROR on success, otherwise an appropriate error code.
	 * @param {DzProperty} prop - The property to remove from the element.
	 */
	removePrivateProperty(prop) {};
	/**
	 * @description Attempts to remove the named property. Fails if the property could not be found or could not be removed (i.e., DzProperty.isUserProperty()).
	 * @returns DzError DZ_NO_ERROR on success, otherwise an appropriate error code.
	 * @param {String} name - The name of the property to search for and remove if it is found.
	 */
	removePrivateProperty(name) {};
	/**
	 * @description Attempts to remove the named property. Fails if the property could not be found or could not be removed.
	 * @returns DzError DZ_NO_ERROR on success, otherwise an appropriate error code.
	 * @param {String} name - The name of the property to search for and remove if it is found.
	 */
	removeProperty(name) {};
	/**
	 * @description Removes the given property, if it can be removed. Properties can be specified as non-removable (e.g. the rotation channels of the DzNode class). Doing so makes it impossible to remove that property from the element.
	 * @returns DzError DZ_NO_ERROR on success, otherwise an appropriate error code.
	 * @param {DzProperty} prop - The property to remove from the element.
	 */
	removeProperty(prop) {};
	/**
	 * @description Sets attributes in the handed in settings and returns a pointer to an element set by these settings. The element returned may not be a new element or null if the settings are not correct. Default implementation returns this with no changes.
	 * @returns DzElement A new element, or this element if no changes were made. The caller is responsible for cleaning up the memory of the return element if it is not this.
	 * @param {DzSettings} settings - The settings object containing the information.
	 */
	setAttributes(settings) {};
	/**
	 * @description Sets the user-facing label (i.e., displayed in the interface) for this element.
	 * @returns DzError DZ_NO_ERROR on success, otherwise an appropriate error code.
	 * @param {String} name - The new label for this element.
	 */
	setLabel(name) {};
	/**
	 * @description Sets the script that will be executed when this element is loaded from a file.
	 * @param {DzScript} script - The script that will be saved with this element and executed when it is loaded from file. The element takes ownership.
	 */
	setLoadScript(script) {};
	/**
	 * @description Sets the internal name of this element.
	 * @param {String} name - The name to assign to this element.
	 */
	setName(name) {};
	/**
	 * @returns Boolean true if this element should have its property groups and properties sorted after being created on load, otherwise false.
	 */
	shouldSortOnLoad() {};
	/**
	 * @description Called to update any cached or display data for this element.
	 */
	update() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when this element's label is changed.
	 * @signature `"labelChanged(const QString&)"`
	 * @event
	 */
	labelChanged(newLabel) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when this element's parent is changed.
	 * @signature `"parentChanged()"`
	 * @event
	 */
	parentChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when a private property is added to this element.
	 * @signature `"privatePropertyAdded(DzProperty*)"`
	 * @event
	 */
	privatePropertyAdded(prop) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when a private property is added to or removed from this element.
	 * @signature `"privatePropertyListChanged()"`
	 * @event
	 */
	privatePropertyListChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when a private property is added to or removed from the property tree for this element.
	 * @signature `"privatePropertyListInTreeChanged()"`
	 * @event
	 */
	privatePropertyListInTreeChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when a private property is removed from this element.
	 * @signature `"privatePropertyRemoved(DzProperty*)"`
	 * @event
	 */
	privatePropertyRemoved(prop) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the private property tree has changed.
	 * @signature `"privatePropertyTreeChanged()"`
	 * @event
	 */
	privatePropertyTreeChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when a property is added to this element.
	 * @signature `"propertyAdded(DzProperty*)"`
	 * @event
	 */
	propertyAdded(prop) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when a property is added to or removed from this element.
	 * @signature `"propertyListChanged()"`
	 * @event
	 */
	propertyListChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when a property is added to or removed from the property tree for this element.
	 * @signature `"propertyListInTreeChanged()"`
	 * @event
	 */
	propertyListInTreeChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when a property is removed from this element.
	 * @signature `"propertyRemoved(DzProperty*)"`
	 * @event
	 */
	propertyRemoved(prop) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the property tree has changed.
	 * @signature `"propertyTreeChanged()"`
	 * @event
	 */
	propertyTreeChanged() {};

}
/**
 * See Also:
 */
class DzElementData extends DzCustomData {
	/**
	 * @returns DzElementData A uplicate of the data item that can be added to the given owner (if any), otherwise NULL.
	 * @param {DzElement} owner - The element to duplicate this data item on.
	 */
	duplicate(owner) {};
	/**
	 * @returns DzElement The element that this data item is associated with (if any), otherwise NULL.
	 */
	getOwner() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the data item is added to an element.
	 * @signature `"addedToElement(DzElement*)"`
	 * @event
	 */
	addedToElement(owner) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the data item's owner is deleting, before the data item itself is deleted.
	 * @signature `"elementDeleting(DzElement*)"`
	 * @event
	 */
	elementDeleting(formerOwner) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the data item is removed from an element.
	 * @signature `"removedFromElement(DzElement*)"`
	 * @event
	 */
	removedFromElement(formerOwner) {};

}
/**
 * If the file to post-load is a script:
 * A global transient variable named DataItem, which refers to the DzElementPostLoadFileData that invoked the execution of the script, is provided to the script in the global context at runtime. Attempts to use this global variable outside of the associated script will result in a ReferenceError.
 * A global transient variable named FileIOSettings, which refers to the DzFileIOSettings that was used when the element that owns the data item was loaded, is provided to the script in the global context at runtime. Attempts to use this global variable outside of the associated script will result in a ReferenceError. (since 4.9.4.109)
 * Attention:@attention Attention:
 */
class DzElementPostLoadFileData extends DzElementData {
	/**
	 * @description Default constructor.
	 * @param {String} name - The name for the data item. This must be unique for all data items on a given element - i.e. an element can not have two data items with the same name.
	 * @param {Boolean} persistent - If true, the data item will be saved with the element to the native file format.
	 */
	constructor(name, persistent = true) {};
	/**
	 * @returns String The file path of the file for this data item (if any), otherwise an empty string.
	 */
	getPostLoadFilePath() {};
	/**
	 * @description Sets the file path of the file for this data item.
	 * @param file - The file path of the file.
	 */
	setPostLoadFilePath(script) {};

}
/**
 * 
 */
class DzEnumProperty extends DzIntProperty {
	/**
	 * @description Default Constructor. Creates a non-animatable, non-user property.
	 */
	constructor() {};
	/**
	 * @param {String} name - The name of this property.
	 * @param {Boolean} canAnimate - If true, creates an animatable property.
	 * @param {Boolean} isUserProperty - If true, creates a user property; user properties are properties that can be added/deleted by users.
	 */
	constructor(name, canAnimate, isUserProperty) {};
	/**
	 * @description Adds a string to the available choices for this property. Duplicates are not allowed.
	 * @returns Number The index of the newly added item is returned, or -1 on error.
	 * @param {String} item - The string to add to the list of items.
	 * @param {Number} index - The index to insert the item at. If invalid, the item is appended to the list.
	 */
	addItem(item, index = -1) {};
	/**
	 * @description Searches the property for an item that matches the given string.
	 * @returns Number The index of the item that matches the given string (if any), otherwise -1.
	 * @param {String} str - The string to find.
	 */
	findItemString(str) {};
	/**
	 * @returns String The string representation of the default value.
	 */
	getDefaultStringValue() {};
	/**
	 * @returns String The string representation of the i'th item (if valid), otherwise an empty string.
	 * @param {Number} i - The index of the item to return.
	 */
	getItem(i) {};
	/**
	 * @returns String The string representation of the i'th key value (if valid), otherwise an empty string.
	 * @param {Number} i - The index of the key to return the value of.
	 */
	getKeyStringValue(i) {};
	/**
	 * @returns Number The number of enumerated items.
	 */
	getNumItems() {};
	/**
	 * @returns String The string representation of the raw value (if valid), otherwise the default string.
	 */
	getRawStringValue() {};
	/**
	 * @returns String The string representation of the raw value at the given time (if valid), otherwise the default string.
	 * @param {DzTime} tm - The scene time at which to get the raw value of the property.
	 */
	getRawStringValue(tm) {};
	/**
	 * @returns String The string representation of the value at the given time.
	 * @param {DzTime} tm - The scene time at which to get the value.
	 */
	getStringValue(tm) {};
	/**
	 * @returns String The string representation of the current value.
	 */
	getStringValue() {};
	/**
	 * @returns String An item string that is guaranteed to be unique. If item is not already in the list, it is returned. Otherwise, a number will be appended to item to make it unique.
	 */
	getUniqueItemString(item) {};
	/**
	 * @description Removes all items and makes this property essentially invalid.
	 */
	removeAllItems() {};
	/**
	 * @description Removes the item at the given index.
	 * @returns Boolean true if the item was successfully removed, otherwise false.
	 * @param {Number} idx - The index of the item to remove.
	 */
	removeItem(index) {};
	/**
	 * @description Replaces the item at the given index with the given string.
	 * @returns Boolean false if the index is out of range or the string is invalid (empty), otherwise true.
	 * @param {String} index - The index of the item to replace.
	 * @param {String} item - The new item to place into the list.
	 */
	replaceItem(index, item) {};
	/**
	 * @description Sets the items for this property.
	 * @since 4.5.2.20
	 * @param {Array} items - The list of items to set.
	 */
	setItems(items) {};
	/**
	 * @description Sets the current value of the property to the index of the item that matches the given string.
	 * @returns Boolean true on success, false if the given string does not match an item in this property.
	 * @param {String} str - The string to match.
	 */
	setValueFromString(str) {};
	/**
	 * @description Sets the value of the property at the given time to the index of the item that matches the given string.
	 * @returns Boolean true on success, false if the given string does not match an item in this property.
	 * @param {DzTime} tm - The scene time to set the value of the property at.
	 * @param {String} str - The string to match.
	 */
	setValueFromString(tm, str) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the item list (list of legal values for this property) changes.
	 * @signature `"itemListChanged()"`
	 * @event
	 */
	itemListChanged() {};

}
/**
 * A DzEnumSlider provides a control that allows a user to adjust a bounded, enumerated, integer `value.` The slider is clamped by default, and automatically sets its min and max range according to the number of string `values` it contains.
 */
class DzEnumSlider extends DzWidget {
	/**
	 * @description Creates a new enumerated slider widget.
	 * @param {DzWidget} parent - The widget parent for the slider.
	 */
	constructor(parent) {};
	/**
	 * @description Holds the number of items on the slider. (Read Only)
	 * @type {Number}
	 */
	count;
	/**
	 * @description Holds the default value of the slider.
	 * @type {Number}
	 */
	defaultValue;
	/**
	 * @description Holds whether or not the default value is restorable if the user holds the [Alt] key when clicked.
	 * @type {Boolean}
	 */
	restorable;
	/**
	 * @description Holds the text of the slider. (Read Only)
	 * @type {String}
	 */
	text;
	/**
	 * @description Holds the current value of the slider.
	 * @type {Number}
	 */
	value;
	/**
	 * @description Adds a string to the list of items, and adjusts the maximum value for the slider.
	 * @returns Number The index of the item - this is the numeric value of the slider that corresponds to the string value.
	 * @param {String} label - The string value to add to the list of items in the slider.
	 */
	addItem(label) {};
	/**
	 * @description Clears the list of string values for this slider.
	 */
	clear() {};
	/**
	 * @returns String The String representing the which item.
	 */
	getItem(which) {};
	/**
	 * @description Moves the item at index which to idx.
	 * @param {Number} which - The index of the item to move. If out of range, this method has no effect.
	 * @param {Number} idx - The index to move which to. If out of range, which becomes the last item.
	 */
	moveItem(which, idx) {};
	/**
	 * @description Removes the item at which from the list.
	 * @param {Number} which - The index of the item. If out of range, this method has no effect.
	 */
	removeItem(which) {};
	/**
	 * @description Renames the item at index which.
	 * @param {Number} which - The index of the item to rename. If out of range, this method has no effect.
	 * @param {String} label - The new value of the item at index which.
	 */
	renameItem(which, label) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the user releases the slider.
	 * @signature `"editEnd()"`
	 * @event
	 */
	editEnd() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the user starts dragging the slider.
	 * @signature `"editStart()"`
	 * @event
	 */
	editStart() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the value of the slider changes, passes the new value.
	 * @signature `"valueChanged(int)"`
	 * @event
	 */
	valueChanged(value) {};

}
/**
 * This utility class implements the logic of 'baking' (unlinking) the current state of a controller property on a node to the numeric properties it controls, such that the controlled properties remain at the respective values they were at in that moment of time. The DzERCLink between the 'baked' properties and the controller is removed.
 * The controller property (the DzNumericProperty that does the controlling) must be set before calling doBake(); see setControllerProperty().
 * See Also:
 * Attention:
 * Since:@attention Attention:
 */
class DzERCBake extends QObject {
	/**
	 * @description Default constructor.
	 */
	constructor() {};
	/**
	 * @description Performs the ERC bake based on the current settings.
	 * @returns Boolean true if the bake operation was successful, otherwise false.
	 */
	doBake() {};
	/**
	 * @description Performs the ERC bake based on the current settings.
	 * @returns Boolean true if the bake operation was successful, otherwise false.
	 */
	doBakeKeyed(warn) {};
	/**
	 * @returns DzNumericProperty The property (if any) that controls the properties that will be baked when doBake() is called.
	 */
	getControllerProperty() {};
	/**
	 * @description Sets the property that controls the properties that will be baked when doBake() is called.
	 * @param {DzNumericProperty} prop - The property to set as the controller to bake.
	 */
	setControllerProperty(prop) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description TODO: Add Description
	 * @signature `TODO: Add Description`
	 * @event
	 */
	ERCChanged() {};

}
/**
 * This utility class implements the logic of 'freezing' (linking) the current state of numeric properties on a node (or multiple nodes) to a controller property, such that adjusting the controller property adjusts the linked properties in kind. The DzERCLink between the 'frozen' properties and the controller are created such that when the controller is set to the value it is at when the 'freeze' operation is performed, the 'frozen' properties will be at the respective values they were at in that moment of time.
 * The controller node (the DzNode that the controlling property is located on) and the controller property (the DzNumericProperty that ultimately does the controlling) must be set before calling doFreeze(); see setControllerNode() and setControllerProperty().
 * An additional property can be set and used to attenuate the effect of the controller property on the 'frozen' properties, or have its value attenuated as the controller property is applied, depending on the AttenuateMode set.
 * The addPropertiesToFreeze() method is used to inspect the current state of the numeric properties on a a given node that are not currently set to their respective raw values and add them to the list of those properties to be linked to the controller property. This list of properties can be inspected and/or modified using the getPropertiesToFreeze() and setPropertiesToFreeze() methods.
 * See Also:
 * Attention:
 * Since:@attention Attention:
 */
class DzERCFreeze extends QObject {
	/**
	 * @description Default constructor.
	 */
	constructor() {};
	/**
	 * @description ENUM: TODO: Add description.
	 */
	SubComponents;
	/**
	 * @description ENUM: TODO: Add description.
	 */
	Controller;
	/**
	 * @description Adds all numeric properties on node whose values differ from their raw values to the list of properties to 'freeze' (link) to the controller property.
	 * @returns Boolean true if node, getControllerNode(), and getControllerProperty() are defined and it succeeds, otherwise false.
	 * @param {DzNode} node - The node to add the numeric properties from.
	 */
	addPropertiesToFreeze(node) {};
	/**
	 * @description Performs the ERC freeze based on the current settings.
	 * @returns Boolean true if the freeze operation was successful, otherwise false.
	 */
	doFreeze() {};
	/**
	 * @returns Boolean true if the controller property will be set to the value that causes the 'frozen' properties to be at their current value once the 'freeze' operation is complete, otherwise false.
	 */
	getApplyController() {};
	/**
	 * @returns The mode that determines how the attenuate property will be used.
	 */
	getAttenuateMode() {};
	/**
	 * @returns DzNumericProperty If set, the property that will be used to attenuate either the controller property, or the affect of the controller property on the properties returned by getPropertiesToFreeze(), depending on the AttenuateMode set.
	 */
	getAttenuateProperty() {};
	/**
	 * @returns DzNode The node that the controller property is on.
	 * @attention This is used to determine the root node that the "Restore Figure" and the "Restore Rigging" options are applied to if getRestoreFigure() and/or getRestoreRigging() return true.
	 */
	getControllerNode() {};
	/**
	 * @returns DzNumericProperty The property that the properties returned by getPropertiesToFreeze() will be linked to when doFreeze() is called.
	 */
	getControllerProperty() {};
	/**
	 * @returns Boolean true if the DzERCLink created between the controller property and the 'frozen' properties will be a DzERCLink.ERCKeyed, otherwise false.
	 */
	getKeyed() {};
	/**
	 * @returns Array The list of properties that will be linked to the property returned by getControllerProperty() when doFreeze() is called.
	 */
	getPropertiesToFreeze() {};
	/**
	 * @returns Boolean true if the Restore Figure action will be executed once the 'freeze' operation is complete, otherwise false.
	 */
	getRestoreFigure() {};
	/**
	 * @returns Boolean true if the Restore Figure Rigging action will be executed once the 'freeze' operation is complete, otherwise false.
	 */
	getRestoreRigging() {};
	/**
	 * @returns Boolean true if the Restore Selected Item(s) action will be executed once the 'freeze' operation is complete, otherwise false.
	 * @since 4.11.0.362
	 */
	getRestoreSelectedItems() {};
	/**
	 * @description Sets whether or not the controller property will be set to the value that causes the 'frozen' properties to be at their current value once the 'freeze' operation is complete.
	 * @param {Boolean} yesNo - If true, the controller property will be applied.
	 */
	setApplyController(yesNo) {};
	/**
	 * @description Sets the mode that determines how the attenuate property will be used.
	 * @param {AttenuateMode} mode - The attenuate mode to set.
	 */
	setAttenuateMode(mode) {};
	/**
	 * @description Sets the property that will be used to attenuate either the controller property, or the affect of the controller property on the properties returned by getPropertiesToFreeze(), depending on the AttenuateMode set.
	 * @param {DzNumericProperty} prop - The property to set.
	 */
	setAttenuateProperty(prop) {};
	/**
	 * @description Sets the node that the controller property is on.
	 * @param {DzNode} node - The node to set.
	 * @attention This is used to determine the root node that the "Restore Figure" and the "Restore Rigging" options are applied to if getRestoreFigure() and/or getRestoreRigging() return true.
	 */
	setControllerNode(node) {};
	/**
	 * @description Sets the property that the properties returned by getPropertiesToFreeze() will be linked to when doFreeze() is called.
	 * @param {DzNumericProperty} prop - The property to set as the controller.
	 */
	setControllerProperty(prop) {};
	/**
	 * @description Sets whether or not the DzERCLink created between the controller property and the 'frozen' properties will be a DzERCLink.ERCKeyed (using the keys in timeline) or a DzERCLink.ERCDeltaAdd.
	 * @param {Boolean} yesNo - If true, the DzERCLink will be a DzERCLink.ERCKeyed.
	 */
	setKeyed(yesNo) {};
	/**
	 * @description Sets the list of properties that will be linked to the property returned by getControllerProperty() when doFreeze() is called.
	 * @param {Array} propList - The list of properties.
	 */
	setPropertiesToFreeze(propList) {};
	/**
	 * @description Sets whether or not the Restore Figure action will be executed once the 'freeze' operation is complete.
	 * @param {Boolean} yesNo - If true, the Restore Figure action will be executed.
	 */
	setRestoreFigure(yesNo) {};
	/**
	 * @description Sets whether or not the Restore Figure Rigging action will be executed once the 'freeze' operation is complete.
	 * @param {Boolean} yesNo - If true, the Restore Figure Rigging action will be executed.
	 */
	setRestoreRigging(yesNo) {};
	/**
	 * @description Sets whether or not the Restore Selected Item(s) action will be executed once the 'freeze' operation is complete.
	 * @since 4.11.0.362
	 * @param {Boolean} yesNo - If true, the Restore Selected Item(s) action will be executed.
	 */
	setRestoreSelectedItems(yesNo) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description TODO: Add Description
	 * @signature `TODO: Add Description`
	 * @event
	 */
	ERCChanged() {};

}
/**
 * This numeric controller implements an algorithm that is based on the value of another property. There are six formulas which correspond to the ERCType of the object - the default ERCType is ERCDeltaAdd. The formulas are:
 * Where:
 * As an example of ERC in action, lets say that there are 3 properties A, B, and C. B is linked to A with a 'ERCDeltaAdd' DzERCLink with a multiplier of 1.0 and an additive value of 0.0. C is linked to B with a 'ERCDeltaAdd' DzERCLink with a multiplier of 2.0 and an additive value of 1.0. So, if the keyed value of A is 10.0, B is 0.0, and C is 0.0, the final values of the properties would be calculated as:
 * A = 10.0 B = 0.0 + (10.0 * 1.0) + 0.0 = 10.0 C = 0.0 + (10.0 * 2.0) + 1.0 = 21.0
 * If B and C have keyed values - for example B is 5.0 and C is 2.0 - the final property values would be calculated as:
 */
class DzERCLink extends DzNumericController {
	/**
	 * @description Default constructor.
	 */
	constructor() {};
	/**
	 * @description TODO:
	 * Add description.
	 */
	constructor(copyFrom, property = undefined) {};
	/**
	 * @description Creates a controller that is driven by property.
	 * @param {ERCType} type - The type of this link.
	 * @param {DzNumericProperty} prop - The property that drives this link.
	 * @param {Number} scalar - The multiplier of the value.
	 * @param {Number} addend - The addend to the value.
	 */
	constructor(type, property, scalar = 1.0, addend = 0.0) {};
	/**
	 * @description Creates a controller that is driven by property.
	 * @param {DzNumericProperty} prop - The property that drives this link.
	 * @param {Number} scalar - The multiplier of the value.
	 * @param {Number} addend - The addend to the value.
	 */
	constructor(property, scalar = 1.0, addend = 0.0) {};
	/**
	 * @description Holds whether or not the controller is evaluated and applied.
	 * @type {Boolean}
	 */
	active;
	/**
	 * @description Holds the addend value for the link.
	 * @type {Number}
	 */
	addend;
	/**
	 * @description Holds whether or not the link will be automatically redirected when its owner is 'Fit To' another figure.
	 * @type {Boolean}
	 */
	autoOverride;
	/**
	 * @description Holds whether or not the link is a user-link.
	 * @type {Boolean}
	 */
	isUserLink;
	/**
	 * @description Holds the interpolation mode for links of the ERCKeyed type.
	 * @type {ERCKeyInterpolation}
	 */
	keyInterpolation;
	/**
	 * @description Holds whether the controller will be saved with the output property (the property that owns the link), or the input property (the linked property).
	 * @type {Boolean}
	 */
	saveWithOutput;
	/**
	 * @description Holds the scalar (multiplier) value for links of the ERCDeltaAdd type.
	 * @type {Number}
	 */
	scalar;
	/**
	 * @description Holds the type of operation the link will perform when evaluated and applied.
	 * @type {ERCType}
	 */
	type;
	/**
	 * @description ENUM: Linear interpolation between key values.
	 */
	LINEAR_INTERP;
	/**
	 * @description ENUM: Constant interpolation between key values.
	 */
	CONSTANT_INTERP;
	/**
	 * @description ENUM: TCB (Kochanek-Bartels) Spline interpolation between key values.
	 */
	TCB_INTERP;
	/**
	 * @description ENUM: This type of ERC is the most common, and implements the formula f(v) = v + (c * m) + a where:
	 */
	ERCDeltaAdd;
	/**
	 * @description ENUM: This type of ERC implements the formula f(v) = (c / v) + a where:
	 */
	ERCDivideInto;
	/**
	 * @description ENUM: This type of ERC implements the formula f(v) = (v / c) + a where:
	 */
	ERCDivideBy;
	/**
	 * @description ENUM: This type of implements the formula f(v) = (c * v) + a where:
	 */
	ERCMultiply;
	/**
	 * @description ENUM: This type of ERC implements the formula f(v) = v - c + a where:
	 */
	ERCSubtract;
	/**
	 * @description ENUM: This type of ERC implements the formula f(v) = v + c + a where:
	 */
	ERCAdd;
	/**
	 * @description ENUM: This type of ERC is used to define value by a parametric function f(v) = v + P(c) where:
	 */
	ERCKeyed;
	/**
	 * @description Adds a keyed value to the link if the type is ERCKeyed and the interpolation mode is LINEAR_INTERP or CONSTANT_INTERP.
	 * @returns Number If the keyed value was sucessfully added, the index that it was added at, otherwise 0.
	 * @param {Number} key - The value of the property that drives this link to add a keyed value for.
	 * @param {Number} value - The value of the property this link resides on to add a keyed value for.
	 */
	addKeyValue(key, value) {};
	/**
	 * @description Adds a keyed value to the link if the type is ERCKeyed and the interpolation mode is TCB_INTERP.
	 * @returns Number If the keyed value was sucessfully added, the index that it was added at, otherwise 0.
	 * @param {Number} key - The value of the property that drives this link to add a keyed value for.
	 * @param {Number} value - The value of the property this link resides on to add a keyed value for.
	 * @param {Number} t - The tenstion value to set for the keyed value.
	 * @param {Number} c - The continuity value to set for the keyed value.
	 * @param {Number} b - The bias value to set for the keyed value.
	 */
	addKeyValue(key, value, t, c, b) {};
	/**
	 * @description Clears all keyed values for links of the ERCKeyed type.
	 */
	clearKeys() {};
	/**
	 * @description Makes a deep copy of this link.
	 * @returns DzERCLink A deep copy of this link, driven by the specified property.
	 * @param {DzNumericProperty} newProperty - The property to drive the duplicated link with.
	 */
	duplicate(newProperty = undefined) {};
	/**
	 * @returns Number If the type of the link is ERCKeyed, the index of key, otherwise -1.
	 * @param {Number} key - The value of the property that drives this link to find the index of.
	 */
	findKeyIndex(key) {};
	/**
	 * @returns DzNumericProperty The property that is currently driving this link. Typically, this will return the same value as getProperty(), however, if autoOverride is enabled, and the property's owner is 'Fit To' another node, this will return the property on the node that this link has been redirected to.
	 */
	getCurrentProperty() {};
	/**
	 * @returns Number If the type of link is ERCKeyed and which is within the range of keyed values, the key at which, otherwise 0.
	 * @param {Number} which - The index of the keyed value to get the key for.
	 */
	getKey(which) {};
	/**
	 * @returns Number If the link is the ERCKeyed type, the interpolated value of the operation at tm, otherwise 0.
	 * @param {Number} tm - The time of the interpolated value to get.
	 */
	getKeyOpValue(val) {};
	/**
	 * @returns Number If the type of link is ERCKeyed, which is within the range of keyed values, and the interpolation mode is TCB_INTERP, the bias value at which, otherwise 0.
	 * @param {Number} which - The index of the keyed value to get the bias value for.
	 */
	getKeyParamB(which) {};
	/**
	 * @returns Number If the type of link is ERCKeyed, which is within the range of keyed values, and the interpolation mode is TCB_INTERP, the continuity value at which, otherwise 0.
	 * @param {Number} which - The index of the keyed value to get the continuity value for.
	 */
	getKeyParamC(which) {};
	/**
	 * @returns Number If the type of link is ERCKeyed, which is within the range of keyed values, and the interpolation mode is TCB_INTERP, the tension value at which, otherwise 0.
	 * @param {Number} which - The index of the keyed value to get the tension value for.
	 */
	getKeyParamT(which) {};
	/**
	 * @returns Number If the type of link is ERCKeyed and which is within the range of keyed values, the value at which, otherwise 0.
	 * @param {Number} which - The index of the keyed value to get the value for.
	 */
	getKeyValue(which) {};
	/**
	 * @returns Number The number of keyed values for a link of the ERCKeyed type.
	 */
	getNumKeyValues() {};
	/**
	 * @returns DzNumericProperty The property that drives this link.
	 */
	getProperty() {};
	/**
	 * @description Presizes the array of keyed values in order to improve the performance of adding keyed values.
	 * @param {Number} count - The number of keyed values to be added.
	 */
	presizeKeys(count) {};
	/**
	 * @description Removes a keyed value from the link if the link type is ERCKeyed.
	 * @returns Boolean true if which is within the range of keyed values, otherwise false.
	 * @param {Number} which - The keyed value (of the property that drives this link) to remove.
	 */
	removeKeyValue(which) {};
	/**
	 * @description Sets the property that drives this link.
	 * @param {DzNumericProperty} prop - The property to drive this link with.
	 */
	setProperty(prop) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description TODO: Add Description
	 * @signature `TODO: Add Description`
	 * @event
	 */
	ercSourcePropertyRemoved(prop) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description TODO: Add Description
	 * @signature `TODO: Add Description`
	 * @event
	 */
	keyChanged(which) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description TODO: Add Description
	 * @signature `TODO: Add Description`
	 * @event
	 */
	keyInterpolationChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description TODO: Add Description
	 * @signature `TODO: Add Description`
	 * @event
	 */
	keysListChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the source property or current property is deleted.
	 * @signature `"propertyDeleted(DzProperty*)"`
	 * @event
	 */
	propertyDeleted(prop) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description TODO: Add Description
	 * @signature `TODO: Add Description`
	 * @event
	 */
	saveWithOutputChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description TODO: Add Description
	 * @signature `TODO: Add Description`
	 * @event
	 */
	scalarChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description TODO: Add Description
	 * @signature `TODO: Add Description`
	 * @event
	 */
	stageChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description TODO: Add Description
	 * @signature `TODO: Add Description`
	 * @event
	 */
	typeChanged() {};

}
/**
 * Note:
 */
class DzError {
	/**
	 * @returns Number The value of the DzError as a Number.
	 */
	valueOf() {};

}
/**
 * Since:
 */
class DzEventScriptAction extends DzScriptAction {

}
/**
 * TODO:
 * Add detailed description.
 */
class DzExporter extends DzFileIO {
	/**
	 * @returns String A description of the exporter that can be placed in a file type selection combobox (e.g. "Acclaim Skeleton")
	 */
	getDescription() {};
	/**
	 * @returns String The extension that this exporter will force filenames to (excluding the preceeding '.').
	 */
	getExtension() {};
	/**
	 * @returns Boolean true if this exporter writes to a 'real' file, otherwise false.
	 */
	isFileExporter() {};
	/**
	 * @description Exports to a file.
	 * @returns DzError DZ_NO_ERROR on success, or an error code if the export failed.
	 * @param {String} filename - Name of the file to export to.
	 */
	writeFile(filename) {};
	/**
	 * @description Exports to a file.
	 * @returns DzError DZ_NO_ERROR on success, or an error code if the export failed.
	 * @param {String} filename - The full path of the file to export to.
	 * @param {DzFileIOSettings} options - The options to use while exporting the file.
	 */
	writeFile(filename, options) {};

}
/**
 * There is only one instance of this manager in an application. This instance is created and owned by DzApp. Request the instance via DzApp.getExportMgr().
 * See Also:
 */
class DzExportMgr extends QObject {
	/**
	 * @description Uses the extension from each of the exporters and attempts to match an exporter with the extension of the filename.
	 * @returns Boolean true if an exporter was found that can write the given file.
	 * @param {String} filename - The name of the file to try to find an exporter for.
	 */
	static canExport(filename) {};
	/**
	 * @description Uses the extension from each of the exporters and attempts to match an exporter with the extension of the filename.
	 * @returns DzExporter A new instance of the matching exporter, or NULL if none was found. The caller takes ownership of this pointer and is responsible for deleting it.
	 * @param {String} filename - The name of the file to try to find an exporter for.
	 */
	static findExporter(filename) {};
	/**
	 * @description Uses the class name of each of the exporters and attempts to find an exporter with the given class name.
	 * @returns DzExporter A new instance of the matching exporter, or NULL if none was found. The caller takes ownership of this pointer and is responsible for deleting it.
	 * @param {String} className - The name of the exporter class to find.
	 */
	static findExporterByClassName(className) {};
	/**
	 * @description Uses the extension from each of the exporters and attempts to match an exporter with the extension of the filename.
	 * @returns Number The index of a matching exporter, or -1 if none was found.
	 * @param {String} filename - The name of the file to try to find an exporter for.
	 */
	static findExporterIndex(filename) {};
	/**
	 * @returns DzExporter A new instance of the i'th exporter in the list. The caller takes ownership of this pointer and is responsible for deleting it when finished.
	 * @param {Number} exporterIdx - The index of the exporter to get an instance of.
	 */
	static getExporter(exporterIdx) {};
	/**
	 * @returns Number The number of exporters currently supported.
	 */
	static getNumExporters() {};
	/**
	 * @description Populates the given filter with all the types recognized by the export manager.
	 * @param {DzFileFilter} filter - The filter to populate
	 * @param {String} defaultFilter - The filter to set as the default
	 */
	static makeExportFileFilter(filter, defaultFilter = "") {};
	/**
	 * @description Export the scene contents to a file.
	 * @returns DzError DZ_NO_ERROR if the file export was successful.
	 * @param filename - The name of the file to export to.
	 * @param {Number} exporterIdx - The index of the exporter class to use. If this is less than 0, then the extension of fileName is used to attempt to find an appropriate exporter.
	 */
	exportFile(fileName, exporterIdx) {};
	/**
	 * @description Export the scene contents to a file.
	 * @returns DzError DZ_NO_ERROR if the file export was successful.
	 * @param filename - The name of the file to export to.
	 * @param {Number} exporterIdx - The index of the exporter class to use. If this is less than 0, then the extension of fileName is used to attempt to find an appropriate exporter.
	 * @param {DzFileIOSettings} options - The options to use while exporting the file.
	 */
	exportFile(fileName, exporterIdx, options) {};
	/**
	 * @description Gets the default export directory - this is typically the last directory that the user exported a file to, and will be the directory that user will be taken to next time the file export dialog is displayed.
	 * @returns String The current default directory that files are exported to.
	 */
	getExportPath() {};
	/**
	 * @returns Boolean true if there is currently a file being exported, otherwise false.
	 */
	isExporting() {};
	/**
	 * @description Sets the default export directory - this is the directory that user will be taken to next time the file export dialog is displayed.
	 * @param {String} path - The new default path for exporting files.
	 */
	setExportPath(path) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when a file export operation is finished
	 * @signature `"fileExported()"`
	 * @event
	 */
	fileExported() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when a file export operation is started
	 * @signature `"fileExportStarting()"`
	 * @event
	 */
	fileExportStarting() {};

}
/**
 * A 3 or 4 sided polygonal face within a polygon mesh.
 * See Also:
 */
class DzFacet extends Object {
	/**
	 * @description Default Constructor.
	 */
	constructor() {};
	/**
	 * @description Creates a facet by parsing a string.
	 * @param {String} facet - A string representation of the facet in the form "number : getTriFanCount()
	 */
	constructor(facet) {};
	/**
	 * @description TODO:
	 * Add description.
	 */
	constructor() {};
	/**
	 * @description TODO:
	 * Add description.
	 */
	constructor() {};
	/**
	 * @description TODO:
	 * Add description.
	 */
	constructor() {};
	/**
	 * @description TODO:
	 * Add description.
	 */
	constructor() {};
	/**
	 * @returns true if this is a 4 sided polygon, otherwise false
	 */
	constructor() {};
	/**
	 * @returns true if this is a 3 sided polygon, otherwise false
	 */
	constructor() {};
	/**
	 * @description TODO:
	 * Add description.
	 */
	constructor() {};
	/**
	 * @description TODO:
	 * Add description.
	 */
	constructor() {};
	/**
	 * @description TODO:
	 * Add description.
	 */
	constructor() {};
	/**
	 * @description TODO:
	 * Add description.
	 */
	constructor(count) {};
	/**
	 * @description TODO:
	 * Add description.
	 */
	constructor(rootIdx) {};
	/**
	 * @returns A string representation of this facet in the form "[[ vertIdx1, vertIdx2, vertIdx3, vertIdx4 ], [ uvwIdx1, uvwIdx2, uvwIdx3, uvwIdx4 ], [ normIdx1, normIdx2, normIdx3, normIdx4 ], [ edgeIdx1, edgeIdx2, edgeIdx3, edgeIdx4 ], materialIndex, faceGroupIndex, cageIndex ]".
	 */
	constructor() {};
	/**
	 * @description Holds the index of this face in the cage mesh
	 * @type {Number}
	 */
	cageIndex;
	/**
	 * @description Holds the index of the first edge, otherwise -1
	 * @type {Number}
	 */
	edgeIdx1;
	/**
	 * @description Holds the index of the second edge, otherwise -1
	 * @type {Number}
	 */
	edgeIdx2;
	/**
	 * @description Holds the index of the third edge, otherwise -1
	 * @type {Number}
	 */
	edgeIdx3;
	/**
	 * @description Holds the index of the fourth edge normal (if any), otherwise -1
	 * @type {Number}
	 */
	edgeIdx4;
	/**
	 * @description Holds the index of the face group this face belongs to
	 * @type {Number}
	 */
	faceGroupIndex;
	/**
	 * @description Holds the index of the material group this face belongs to
	 * @type {Number}
	 */
	materialIndex;
	/**
	 * @description Holds the index of the first vertex normal
	 * @type {Number}
	 */
	normIdx1;
	/**
	 * @description Holds the index of the second vertex normal
	 * @type {Number}
	 */
	normIdx2;
	/**
	 * @description Holds the index of the third vertex normal
	 * @type {Number}
	 */
	normIdx3;
	/**
	 * @description Holds the index of the fourth vertex normal (if any), otherwise -1
	 * @type {Number}
	 */
	normIdx4;
	/**
	 * @description Holds the index of the first texture vertex
	 * @type {Number}
	 */
	uvwIdx1;
	/**
	 * @description Holds the index of the second texture vertex
	 * @type {Number}
	 */
	uvwIdx2;
	/**
	 * @description Holds the index of the third texture vertex
	 * @type {Number}
	 */
	uvwIdx3;
	/**
	 * @description Holds the index of the fourth texture vertex (if any), otherwise -1
	 * @type {Number}
	 */
	uvwIdx4;
	/**
	 * @description Holds the index of the first vertex
	 * @type {Number}
	 */
	vertIdx1;
	/**
	 * @description Holds the index of the second vertex
	 * @type {Number}
	 */
	vertIdx2;
	/**
	 * @description Holds the index of the third vertex
	 * @type {Number}
	 */
	vertIdx3;
	/**
	 * @description Holds the index of the fourth vertex (if any), otherwise -1
	 * @type {Number}
	 */
	vertIdx4;

}
/**
 * See Also:
 */
class DzFbxExporter extends DzExporter {
	/**
	 * @description Default Constructor.
	 */
	constructor() {};

}
/**
 * See Also:
 */
class DzFbxImporter extends DzImporter {
	/**
	 * @description Default Constructor.
	 */
	constructor() {};

}
/**
 * TODO:
 * Add detailed description.
 */
class DzFigure extends DzSkeleton {
	/**
	 * @description Default Constructor.
	 */
	constructor() {};
	/**
	 * @description Attempts to convert a simple node with geometry into a figure.
	 * @returns The figure produced by the conversion (if any), otherwise NULL.
	 * @param {DzNode} srcNode - The source node to convert.
	 * @param {String} rootBoneName - The name to assign to the root bone of the figure.
	 * @param {Boolean} localMaps - If true (default), local weight maps will be created, otherwise a general weight map will be created.
	 * @param {Boolean} inheritSkeleton - If true (default), …
	 */
	static convertPropToFigure(srcNode, rootBoneName, localMaps = true, inheritSkeleton = true) {};
	/**
	 * @description Adds a face in the figure that this figure is following (if any) to hide.
	 * @param {Number} faceIdx - The index of the face to hide.
	 */
	addFollowTargetHiddenFace(faceIdx) {};
	/**
	 * @description Adds a pair of vertex indices in the geometry of this figure, and in the geometry of the figure that this figure is following (if any), to the list of vertices to weld together in order to "graft" (integrate) them.
	 * @param {Number} followerIdx - The index of the vertex in the geometry of this figure.
	 * @param {Number} targetIdx - The index of the vertex in the geometry of the follow target.
	 * @param {Boolean} notifyChange - If true (default), notifies listeners of the weldListChanged() signal.
	 */
	addWeldPoint(followerIdx, targetIdx, notifyChange = true) {};
	/**
	 * @description Clears the list of faces to hide in the figure that this figure is following (if any).
	 */
	clearFollowTargetHiddenFaces() {};
	/**
	 * @description Clears the list of vertex index pairs used to weld vertices in the geometry of this figure to vertices in the geometry of another figure.
	 * @since 4.9.0.53
	 */
	clearWeldPoints() {};
	/**
	 * @returns The figure that is culling (hiding geometry of) this figure at the specified index (if valid), otherwise null.
	 * @param {Number} which - The index of the figure that is culling this figure.
	 */
	getCullFigure(which) {};
	/**
	 * @returns Number The index of the vertex in the geometry of this figure.
	 * @param {Number} which - The index of the vertex index pair to weld.
	 */
	getFollowerWeldIndex(which) {};
	/**
	 * @returns Number The face count of the figure that this figure is following (if any).
	 */
	getFollowTargetFaceCount() {};
	/**
	 * @returns Number The vertex count of the figure that this figure is following (if any).
	 */
	getFollowTargetVertexCount() {};
	/**
	 * @returns Number The index of the vertex in the geometry of the follow target.
	 * @param {Number} which - The index of the vertex index pair to weld.
	 */
	getFollowTargetWeldIndex(which) {};
	/**
	 * @returns The figure that is grafting (integrating its geometry) into this figure at the specified index (if valid), otherwise null.
	 * @param {Number} which - The index of the figure that is grafting into this figure.
	 */
	getGraftFigure(which) {};
	/**
	 * @returns Number The number of figures that are culling (hiding geometry of) this figure.
	 */
	getNumCullFigures() {};
	/**
	 * @returns Number The number of faces in the figure that this figure is following (if any) to hide.
	 */
	getNumFollowTargetHiddenFaces() {};
	/**
	 * @returns Number The number of figures that are grafting (integrating their geometry) into this figure.
	 */
	getNumGraftFigures() {};
	/**
	 * @returns Number The number of vertex index pairs in the list of vertices to weld together between the geometry of this figure, and the geometry of the figure that this figure is following (if any), in order to "graft" (integrate) them.
	 */
	getNumWeldPoints() {};
	/**
	 * @returns DzSkinbinding The skin binding for this figure
	 */
	getSkinBinding() {};
	/**
	 * @returns Boolean true if a follower is grafting to this figure, otherwise false.
	 */
	isGraftFollowing() {};
	/**
	 * @description Merges all current followers of this figure into a single follower.
	 * @returns DzError DZ_NO_ERROR on success, otherwise an appropriate error code.
	 * @since 4.6.3.0
	 * @attention It is the responsibility of a developer to perform the appropriate checks to ensure followers exist and can be merged prior to calling this function.
	 */
	mergeFollowers() {};
	/**
	 * @description Optimizes the list of vertex index pairs used to weld vertices in the geometry of this figure to vertices in the geometry of another figure - removes duplicates and releases any memory not required to store the items.
	 * @since 4.9.0.53
	 */
	optimizeWeldPoints() {};
	/**
	 * @description Pre-sizes the list of faces to hide in the figure that this figure is following (if any).
	 * @param {Number} num - The number of faces that will be hidden.
	 */
	presizeFollowTargetHiddenFaces(num) {};
	/**
	 * @description Pre-sizes the list of vertex index pairs used to "graft" (integrate) the geometry of this figure into the geometry of the figure that this figure is following (if any).
	 * @param {Number} num - The number of vertex index pairs.
	 */
	presizeWeldPoints(num) {};
	/**
	 * @description Removes duplicates from the list of vertex index pairs used to weld vertices in the geometry of this figure to vertices in the geometry of another figure.
	 * @since 4.9.0.53
	 */
	removeDuplicateWeldPoints() {};
	/**
	 * @description Removes a pair of vertex indices in the geometry of this figure, and in the geometry of the figure that this figure is following (if any), from the list of vertices to weld together in order to "graft" (integrate) them.
	 * @since 4.9.0.53
	 * @param {Number} which - The index of the pair to remove.
	 */
	removeWeldPoint(which) {};
	/**
	 * @description Stores the face count of the figure that this figure is following (if any).
	 * @param {Number} num - The number of faces.
	 */
	setFollowTargetFaceCount(num) {};
	/**
	 * @description Stores the vertex count of the figure that this figure is following (if any).
	 * @param {Number} num - The number of vertices.
	 */
	setFollowTargetVertexCount(num) {};
	/**
	 * @returns Boolean true if this figure will graft during drawing operations, otherwise false.
	 * @since 4.9.2.58
	 */
	willGraftInDraw() {};
	/**
	 * @returns Boolean true if this figure will graft during rendering operations, otherwise false.
	 * @since 4.9.2.58
	 * @param {DzRenderSettings} settings - The render settings that will be used during the render operation.
	 */
	willGraftInRender(settings = null) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the list of hidden facets in the follow target has changed.
	 * @signature `"followTargetHiddenListChanged()"`
	 * @event
	 */
	followTargetHiddenListChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the list of figures that "graft" (integrate) their geometries into this figure has changed.
	 * @signature `"graftListChanged()"`
	 * @event
	 */
	graftListChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the list of vertex indices for the vertices to weld together in order to "graft" (integrate) their geometries has changed.
	 * @signature `"weldListChanged()"`
	 * @event
	 */
	weldListChanged() {};

}
/**
 * 
 */
class DzFile extends DzFileInfo {
	/**
	 * @description Creates a file object with the given file name.
	 * @param {String} file - The path of the file.
	 */
	constructor(file) {};
	/**
	 * @description ENUM: No error occurred.
	 */
	NoError;
	/**
	 * @description ENUM: An error occurred when reading from the file.
	 */
	ReadError;
	/**
	 * @description ENUM: An error occurred when writing to the file.
	 */
	WriteError;
	/**
	 * @description ENUM: A fatal error occurred.
	 */
	FatalError;
	/**
	 * @description ENUM: TODO: Add description.
	 */
	ResourceError;
	/**
	 * @description ENUM: The file could not be opened.
	 */
	OpenError;
	/**
	 * @description ENUM: The operation was aborted.
	 */
	AbortError;
	/**
	 * @description ENUM: A timeout occurred.
	 */
	TimeOutError;
	/**
	 * @description ENUM: An unspecified error occurred.
	 */
	UnspecifiedError;
	/**
	 * @description ENUM: The file could not be removed.
	 */
	RemoveError;
	/**
	 * @description ENUM: The file could not be renamed.
	 */
	RenameError;
	/**
	 * @description ENUM: The position in the file could not be changed.
	 */
	PositionError;
	/**
	 * @description ENUM: The file could not be resized.
	 */
	ResizeError;
	/**
	 * @description ENUM: The file could not be accessed.
	 */
	PermissionsError;
	/**
	 * @description ENUM: The file could not be copied.
	 */
	CopyError;
	/**
	 * @description ENUM: The file is not open.
	 */
	NotOpen;
	/**
	 * @description ENUM: The file is open the for reading.
	 */
	ReadOnly;
	/**
	 * @description ENUM: The file is open the for writing.
	 */
	WriteOnly;
	/**
	 * @description ENUM: The file is open the for reading and writing.
	 */
	ReadWrite;
	/**
	 * @description ENUM: The file is opened in append mode, so that all data is written to the end of the file.
	 */
	Append;
	/**
	 * @description ENUM: If possible, the file is truncated before it is opened. All earlier contents of the file are lost.
	 */
	Truncate;
	/**
	 * @description ENUM: When reading, the end-of-line terminators are translated to '
	 */
	Text;
	/**
	 * @description ENUM: Alias for Text.
	 */
	Translate;
	/**
	 * @description Closes the file, sets its openMode() to NotOpen, and resets the error string.
	 */
	close() {};
	/**
	 * @returns Boolean true if copying the file is successful, otherwise false.
	 * @param {String} newName - The path to copy this file to.
	 * @attention If newName already exists it will not be overwritten.
	 */
	copy(newName) {};
	/**
	 * @returns Boolean true if the current position is at the end of the file, otherwise false.
	 */
	eof() {};
	/**
	 * @returns FileError The file error status.
	 * @since 4.9.3.35
	 * @attention For example, if open() returns false, or a read/write operation returns -1, this function can be called to find out the reason why the operation failed.
	 */
	error() {};
	/**
	 * @returns String A human-readable description of the last error that occurred.
	 * @since 4.9.3.35
	 */
	errorString() {};
	/**
	 * @returns Boolean true if the file is open, otherwise false.
	 * @since 4.9.3.35
	 */
	isOpen() {};
	/**
	 * @returns Boolean true if the Text OpenModeFlag is enabled, otherwise false.
	 * @since 4.9.3.35
	 */
	isTextModeEnabled() {};
	/**
	 * @description Creates a link named linkName that points to the file currently specified by fileName(). What a link is depends on the underlying filesystem (be it a shortcut on Windows or a symbolic link on Mac OS X).
	 * @returns Boolean true if successful, otherwise false.
	 * @since 4.9.3.35
	 * @attention This will not overwrite an already existing entity in the file system; in this case, link() will return false and set error() to return RenameError.
	 */
	link(linkName) {};
	/**
	 * @description Opens the file and sets its openMode() to mode.
	 * @returns Boolean true if the file was opened successfully, otherwise false.
	 */
	open(mode) {};
	/**
	 * @returns The mode in which the device has been opened.
	 * @since 4.9.3.35
	 */
	openMode() {};
	/**
	 * @description Peeks at most maxSize bytes from the file, without side effects (i.e., if you read after you peek, you will get the same data).
	 * @returns ByteArray The data peeked.
	 * @since 4.9.3.35
	 */
	peek(maxSize) {};
	/**
	 * @returns Number The position that data is written to or read from.
	 * @since 4.9.3.35
	 */
	pos() {};
	/**
	 * @description Read the entire file.
	 * @returns String The file contents as a string.
	 */
	read() {};
	/**
	 * @description Reads at most maxSize bytes from the file.
	 * @returns ByteArray The data read.
	 * @since 4.9.3.35
	 */
	read(maxSize) {};
	/**
	 * @description Read the entire file.
	 * @returns ByteArray All bytes of the file.
	 * @attention This function has no way of reporting errors; returning an empty ByteArray can mean either that no data was currently available for reading, or that an error occurred.
	 */
	readAll() {};
	/**
	 * @description Read one character from the file.
	 * @returns Number The character read from the file.
	 */
	readByte() {};
	/**
	 * @description Reads a line from the file, but no more than maxSize characters.
	 * @returns ByteArray The bytes read.
	 * @param {Number} maxSize - The maximum nuber of characters to read. Since 4.9.3.35.
	 * @attention This function has no way of reporting errors; returning an empty ByteArray can mean either that no data was currently available for reading, or that an error occurred.
	 */
	readByteLine(maxSize = 0) {};
	/**
	 * @description Read a line of text from the file.
	 * @returns String The file line as a string.
	 */
	readLine() {};
	/**
	 * @description Read the entire file and split it into lines of text.
	 * @returns Array All lines from the file.
	 */
	readLines() {};
	/**
	 * @description TODO:
	 * Add description.
	 * @returns Boolean
	 */
	rename(newName) {};
	/**
	 * @description Seeks to the start of input.
	 * @returns Boolean true on success, otherwise false (for example, if the file is not open).
	 * @since 4.9.3.35
	 */
	reset() {};
	/**
	 * @description Sets the current position to pos.
	 * @returns Boolean true on success, otherwise false.
	 * @since 4.9.3.35
	 */
	seek(pos) {};
	/**
	 * @description Sets the name of the file to name. The name can have no path, a relative path, or an absolute path.
	 * @since 4.9.3.35
	 * @attention Do not call this function if the file has already been opened. If the file name has no path or a relative path, the path used will be the application's current directory path at the time of the open() call.
	 */
	setFileName(name) {};
	/**
	 * @description Sets the permissions for the file to permissions.
	 * @returns Boolean true if successful, otherwise false (for example, if the permissions cannot be modified).
	 * @since 4.9.3.35
	 */
	setPermissions(permissions) {};
	/**
	 * @description If enabled is true, sets the Text flag on the file, otherwise the Text flag is removed.
	 * @since 4.9.3.35
	 */
	setTextModeEnabled(enabled) {};
	/**
	 * @description Write a string to the file.
	 * @returns Number The number of bytes that were actually written, or -1 if an error occurred. (since 4.9.3.35)
	 * @param {String} data - The string to write to the file.
	 * @param {Number} maxSize - The maximum number of characters to write to the file. If this is less than 1 (default), the whole string is written.
	 */
	write(data, maxSize = -1) {};
	/**
	 * @description Write a single byte (character) to the file.
	 * @param {Number} byte - The character to write to the file.
	 */
	writeByte(byte) {};
	/**
	 * @description Writes the content of byteArray to the file.
	 * @returns Number The number of bytes that were actually written, or -1 if an error occurred.
	 * @since 4.14.0.7
	 */
	writeBytes(byteArray) {};
	/**
	 * @description Write a line to the file.
	 * @param {String} data - The string to write to the file - a new line character will be written immediately following the string contents.
	 */
	writeLine(data) {};

}
/**
 * A global static object available via the Global.FileDialog variable.
 * This object provides functions that display OS native file dialogs to the user.
 */
class DzFileDialog extends QObject {
	/**
	 * @description A convenience file dialog that automatically creates a filter list for all audio formats the application can import and displays a file open dialog.
	 * @returns String The path of the file selected by the user (if the user does not cancel), otherwise an empty string.
	 * @param {String} startWith - The starting directory; can include a default file name.
	 * @param {DzWidget} parent - The parent widget for the file dialog.
	 */
	doAudioClipOpenDialog(startWith = "", parent = undefined) {};
	/**
	 * @description Display a dialog for the user to choose a directory.
	 * @returns String The path of the directory selected by the user (if the user does not cancel), otherwise an empty string.
	 * @param {String} title - The title of the dialog box.
	 * @param {String} desc - Unused; retained for backward compatibility.
	 * @param {DzWidget} parent - The parent widget for the directory dialog.
	 */
	doDirectoryDialog(title = "", desc = "", parent = undefined) {};
	/**
	 * @description Display a dialog for the user to choose a directory.
	 * @returns String The path of the directory selected by the user (if the user does not cancel), otherwise an empty string.
	 * @param {String} title - The title of the dialog box.
	 * @param {String} desc - Unused; retained for backward compatibility.
	 * @param {String} startWith - The directory that the dialog will start in.
	 * @param {DzWidget} parent - The parent widget for the directory dialog.
	 */
	doDirectoryDialog(title, desc, startWith, parent = undefined) {};
	/**
	 * @description Display a dialog for the user to choose a file.
	 * @returns String The path of the file selected by the user (if the user does not cancel), otherwise an empty string.
	 * @param {Boolean} open - If true, displays an open file dialog, otherwise displays a save file dialog.
	 * @param {String} title - The title of the dialog box.
	 * @param {String} startWith - The starting directory (can include a default file name).
	 * @param {String} filter - The file name filter; e.g., "TIFF files (*.tif *.tiff); JPEG files (*.jpg)".
	 * @param {Number} selectedFilter - If not null, its value is set to the index of the filter that corresponds to the selected file.
	 * @param {DzWidget} parent - The parent widget for the file dialog.
	 */
	doFileDialog(open, title = "", startWith = "", filter = "", selectedFilter = 0, parent = undefined) {};
	/**
	 * @description A convenience file dialog that automatically creates a filter list for all image formats the application can import/export and displays a file open/save dialog.
	 * @returns String The path of the file selected by the user (if the user does not cancel), otherwise an empty string.
	 * @param {Boolean} open - If true, displays an open image dialog, otherwise displays a save image dialog.
	 * @param {String} startWith - The starting directory; can include a default file name.
	 * @param {DzWidget} parent - The parent widget for the file dialog.
	 */
	doImageDialog(open, startWith = "", parent = undefined) {};
	/**
	 * @description A convenience file dialog that automatically creates a filter list for all video formats the application can export and displays a file save dialog.
	 * @returns String The path of the file selected by the user (if the user does not cancel), otherwise an empty string.
	 * @param {String} startWith - The starting directory; can include a default file name.
	 * @param {DzWidget} parent - The parent widget for the file dialog.
	 */
	doVideoClipSaveDialog(startWith = "", parent = undefined) {};
	/**
	 * @description Shows an open file dialog to the user that allows selection of multiple files.
	 * @returns Array A list of paths for the files selected by the user (if the user does not cancel), otherwise an empty list.
	 * @param {String} dir - The directory that the dialog will start with.
	 * @param {String} filter - The file name filter; e.g., "TIFF files (*.tif *.tiff); JPEG files (*.jpg)".
	 * @param {String} title - The title of the dialog.
	 * @param {DzWidget} parent - The parent widget of the dialog.
	 */
	getOpenFileNames(dir = "", filter = "", title = "", parent = undefined) {};

}
/**
 * For each group of files that you want to make available to the user, create a new filter with the newFilter() call, then add one or more file extensions to be accepted by the filter.
 */
class DzFileFilter extends QObject {
	/**
	 * @description Default Constructor.
	 */
	constructor() {};
	/**
	 * @description Creates a new file filter and adds a filter with the given description and extensions.
	 * @param {String} description - The description of the filter.
	 * @param {Array} extensions - The list of extensions for the filter.
	 */
	constructor(description, extensions) {};
	/**
	 * @description Creates a new file filter and adds a filter with the given description and extension.
	 * @param {String} description - The description of the filter.
	 * @param {String} extension - The extension for the filter.
	 */
	constructor(description, extension) {};
	/**
	 * @description Adds a file extension to the current filter.
	 * @param {String} extension - A file extension that this filter will open/save e.g. "duf"
	 */
	addExtension(extension) {};
	/**
	 * @description Adds file extensions to the current filter.
	 * @param {Array} extensions - A list of file extensions that this filter will open/save
	 */
	addExtensions(extensions) {};
	/**
	 * @returns Number The default filter index, returns -1 if no default is set.
	 */
	getDefaultFilter() {};
	/**
	 * @returns String The extension of the filter at the given index.
	 * @param {Number} filterIdx - The index of the filter to return an extension for.
	 * @param {Number} extensionIdx - The index of the extension to return.
	 */
	getExtension(filterIdx, extensionIdx) {};
	/**
	 * @returns String The description of the filter at the given index.
	 * @param {Number} filterIdx - The index of the filter to return a description for.
	 */
	getFilterDescription(filterIdx) {};
	/**
	 * @returns Number The number of extensions in the filter at the given index.
	 * @param {Number} filterIdx - The index of the filter to get the number of extensions for.
	 */
	getNumExtensions(filterIdx) {};
	/**
	 * @returns Number The number of filters.
	 */
	getNumFilters() {};
	/**
	 * @description Starts a new filter with the given description.
	 * @param {String} description - The description of files this filter will open/save e.g. "DAZ Studio files"
	 */
	newFilter(description) {};
	/**
	 * @description Sets the default filter index - by default this is 0.
	 * @param {Number} filterIdx - The index of the filter to become the default - if the index is invalid the default is not changed.
	 */
	setDefaultFilter(filterIdx) {};

}
/**
 * Provides access to getting information about files. It also serves as the base class for the other DAZ Script File I/O types.
 */
class DzFileInfo extends QObject {
	/**
	 * @description Creates a file info object to retrieve information about the given file.
	 * @param {String} file - The path of the file.
	 */
	constructor(file) {};
	/**
	 * @description ENUM: The file is readable by the owner of the file.
	 */
	ReadOwner;
	/**
	 * @description ENUM: The file is writable by the owner of the file.
	 */
	WriteOwner;
	/**
	 * @description ENUM: The file is executable by the owner of the file.
	 */
	ExeOwner;
	/**
	 * @description ENUM: The file is readable by the user.
	 */
	ReadUser;
	/**
	 * @description ENUM: The file is writable by the user.
	 */
	WriteUser;
	/**
	 * @description ENUM: The file is executable by the user.
	 */
	ExeUser;
	/**
	 * @description ENUM: The file is readable by the group.
	 */
	ReadGroup;
	/**
	 * @description ENUM: The file is writable by the group.
	 */
	WriteGroup;
	/**
	 * @description ENUM: The file is executable by the group.
	 */
	ExeGroup;
	/**
	 * @description ENUM: The file is readable by anyone.
	 */
	ReadOther;
	/**
	 * @description ENUM: The file is writable by anyone.
	 */
	WriteOther;
	/**
	 * @description ENUM: The file is executable by anyone.
	 */
	ExeOther;
	/**
	 * @description Deprecated
	 * @returns String
	 */
	absFileName() {};
	/**
	 * @returns DzDir The file's absolute path as a DzDir object.
	 * @since 4.9.3.35
	 */
	absoluteDir() {};
	/**
	 * @returns String The absolute path of the file, including the file name.
	 * @since 4.9.3.29
	 */
	absoluteFilePath() {};
	/**
	 * @returns String The absolute path of the file, excluding the file name.
	 * @since 4.9.3.29
	 */
	absolutePath() {};
	/**
	 * @description Deprecated
	 * @returns String
	 */
	baseName() {};
	/**
	 * @returns String On Mac OS X, the proper localized name for a bundle if the path isBundle(). On all other platforms an empty string.
	 * @since 4.9.3.29
	 */
	bundleName() {};
	/**
	 * @returns Boolean true if caching is enabled, otherwise false.
	 * @since 4.9.3.29
	 */
	caching() {};
	/**
	 * @returns String The canonical path including the file name, i.e. an absolute path without symbolic links or redundant "." or ".." elements. If the file does not exist, returns an empty string.
	 * @since 4.9.3.29
	 */
	canonicalFilePath() {};
	/**
	 * @returns String The canonical path excluding the file name, i.e. an absolute path without symbolic links or redundant "." or ".." elements. If the file does not exist, returns an empty string.
	 * @since 4.9.3.29
	 */
	canonicalPath() {};
	/**
	 * @returns String The file name excluding the last '.' and extension.
	 * @since 4.9.3.29
	 */
	completeBaseName() {};
	/**
	 * @returns String All characters in the file name after (but not including) the first ".".
	 * @since 4.9.3.29
	 */
	completeSuffix() {};
	/**
	 * @returns Date The date and time the file was created.
	 */
	created() {};
	/**
	 * @returns DzDir The path of the object's parent directory as a DzDir object.
	 * @since 4.9.3.35
	 */
	dir() {};
	/**
	 * @returns Boolean true if the file exists on the disk.
	 */
	exists() {};
	/**
	 * @description Deprecated
	 * @returns String
	 */
	extension() {};
	/**
	 * @returns String The name of the file, excluding the path.
	 */
	fileName() {};
	/**
	 * @returns String The file name, including the path (which may be absolute or relative).
	 * @since 4.9.3.29
	 */
	filePath() {};
	/**
	 * @returns Boolean true if the file path is absolute, otherwise false.
	 * @since 4.9.3.29
	 */
	isAbsolute() {};
	/**
	 * @returns Boolean true if this object points to a bundle or to a symbolic link to a bundle on Mac OS X, otherwise false.
	 * @since 4.9.3.29
	 */
	isBundle() {};
	/**
	 * @returns Boolean true if this object points to a directory or to a symbolic link to a directory, otherwise false.
	 * @since 4.9.3.29
	 */
	isDir() {};
	/**
	 * @returns Boolean true if this object points to file that is executable, otherwise false.
	 * @since 4.9.3.29
	 */
	isExecutable() {};
	/**
	 * @returns Boolean true if this object points to a file or to a symbolic link to a file, otherwise false (e.g., a directory).
	 * @since 4.9.3.29
	 */
	isFile() {};
	/**
	 * @returns Boolean true if the file is 'hidden', otherwise false.
	 */
	isHidden() {};
	/**
	 * @returns Boolean true if the file is readable by the user, otherwise false.
	 */
	isReadable() {};
	/**
	 * @returns Boolean true if the file path is relative, otherwise false.
	 * @since 4.9.3.29
	 */
	isRelative() {};
	/**
	 * @returns Boolean true if the object points to a directory or to a symbolic link to a directory, and that directory is the root directory, otherwise false.
	 * @since 4.9.3.29
	 */
	isRoot() {};
	/**
	 * @returns Boolean true if this object points to a symbolic link (shortcut on Windows), otherwise false.
	 * @since 4.9.3.29
	 */
	isSymLink() {};
	/**
	 * @returns Boolean true if the file is writable by the user, otherwise false.
	 */
	isWritable() {};
	/**
	 * @returns Date The date and time the file was last modified.
	 */
	lastModified() {};
	/**
	 * @returns Date The date and time the file was last accessed.
	 */
	lastRead() {};
	/**
	 * @description Converts the file's path to an absolute path if it is not already in that form.
	 * @returns Boolean true if the path was converted, otherwise false.
	 * @since 4.9.3.29
	 */
	makeAbsolute() {};
	/**
	 * @returns String The absolute path of the file.
	 */
	path() {};
	/**
	 * @description Tests for file permissions. The permissions argument can be several Permissions OR-ed together to check for permission combinations.
	 * @returns Boolean true if the file has the permissions specified, otherwise false.
	 * @since 4.9.3.35
	 */
	permission(permissions) {};
	/**
	 * @returns Permissions The complete OR-ed together combination of Permissions for the file.
	 * @since 4.9.3.29
	 */
	permissions() {};
	/**
	 * @description Refreshes information about the file, i.e. reads in information from the file system the next time a cached property is fetched.
	 * @since 4.9.3.29
	 */
	refresh() {};
	/**
	 * @description Delete the file from the disk.
	 * @returns Boolean true if successful, otherwise false.
	 */
	remove() {};
	/**
	 * @description Sets whether or not caching of file information caching is enabled. When caching is enabled, file information is read from the file system the first time it's needed, but generally not later.
	 * @since 4.9.3.29
	 */
	setCaching(enable) {};
	/**
	 * @description Sets the file to provide information about to file in dir.
	 * @since 4.9.3.29
	 */
	setFile(dir, file) {};
	/**
	 * @description Sets the file to provide information about to file.
	 * @since 4.9.3.29
	 */
	setFile(file) {};
	/**
	 * @description Sets the file to provide information about to file.
	 * @since 4.9.3.29
	 */
	setFile(file) {};
	/**
	 * @returns Number The file size in bytes. If the file does not exist or cannot be fetched, 0 is returned.
	 */
	size() {};
	/**
	 * @returns String The file size in bytes, formatted in an easy-to-read manner.
	 */
	sizeStr() {};
	/**
	 * @returns String All characters in the file after, but not including, the last '.'.
	 * @since 4.9.3.29
	 */
	suffix() {};
	/**
	 * @returns String The absolute path that the file or directory a symbolic link (shortcut on Windows) points to, or a an empty string if the object is not a symbolic link.
	 * @since 4.9.3.29
	 */
	symLinkTarget() {};

}
/**
 * 
 */
class DzFileIO extends DzBase {
	/**
	 * @description Holds whether or not the options for the importer/exporter has been shown.
	 * @type {Boolean}
	 */
	optionsShown;
	/**
	 * @description Gets the default options for an I/O operation.
	 * @param {DzFileIOSettings} options - The settings object that the selected options will be added to.
	 */
	getDefaultOptions(options) {};
	/**
	 * @description Gets the options for an I/O operation.
	 * @returns Boolean if options has been updated, otherwise false.
	 * @param {DzFileIOSettings} options - The settings object that the selected options will be added to.
	 * @param {Boolean} useInterface - If true and the importer/exporter implements the getOptionsFrame() virtual member function, the options interface for the importer/exporter will be displayed to the user. If false, the default (or last-used) options will be added to or updated in options.
	 * @param {String} filename - The path of a file to be used by the options; usage varies.
	 */
	getOptions(options, useInterface, filename) {};
	/**
	 * @returns Boolean true if this importer/exporter should display an options dialog by default, otherwise false.
	 */
	showOptions() {};

}
/**
 * Responsible for managing presets in the form of DzFileIOSettings objects for various importers, exporters, and other forms of file I/O.
 * There is only one instance of this manager in an application. This instance is created and owned by DzApp. Request the instance via DzApp.getFileIOPresetMgr().
 * File I/O presets are defined by a unique name. They have two types of settings: Specific Settings and Common Settings.
 * Specific Settings
 * 
 * Specific settings are tied to a class name. This class name is typically, but not always, the name of an importer or exporter, such as "DzObjImporter" or "DzObjExporter." The key values for specific settings will vary based on the class.
 * Common Settings
 * 
 * Common settings for a preset are common to all class names. These include settings that define scale values and axis settings. Common keys can be accessed via the following methods: * getLateralAxisKey()
 */
class DzFileIOPresetMgr extends QObject {
	/**
	 * @description TODO:
	 * Add description.
	 * @returns Boolean
	 */
	getAllCurrentSettings(className, settings) {};
	/**
	 * @description TODO:
	 * Add description.
	 * @returns Boolean
	 */
	getAllDefaults(className, settings) {};
	/**
	 * @description TODO:
	 * Add description.
	 * @returns Boolean
	 */
	getAllSettings(presetName, className, settings) {};
	/**
	 * @returns Array the available classes (typically importers or exporters) of the given preset
	 * @param {String} presetName - The name of the preset to get available classes for.
	 */
	getAvailableClasses(presetName) {};
	/**
	 * @returns Array the available presets for the given class name
	 * @param {String} className - The name of the class to get available presets for. This is typically, but not always, the name of an importer or exporter, such as "DzObjImporter." If className is empty, returns all presets
	 */
	getAvailablePresets(className) {};
	/**
	 * @description TODO:
	 * Add description.
	 */
	getCommonApplicationDefaults(settings) {};
	/**
	 * @description TODO:
	 * Add description.
	 * @returns Boolean
	 */
	getCommonDefaults(className, settings) {};
	/**
	 * @description Populates settings with the values for common to all presets named presetName
	 * @returns Boolean true if successful, false if presetName does not represent a valid preset
	 * @param {DzFileIOSettings} presetName - The name of the preset to get common settings for
	 * @param {DzFileIOSettings} settings - The settings object to populate with preset values
	 */
	getCommonSettings(presetName, className, settings) {};
	/**
	 * @description TODO:
	 * Add description.
	 * @returns Boolean
	 */
	getCurrentCommonSettings(className, settings) {};
	/**
	 * @description TODO:
	 * Add description.
	 * @returns Boolean
	 */
	getCurrentSpecificSettings(className, settings) {};
	/**
	 * @returns String The name of the custom preset
	 */
	getCustomPresetLabel() {};
	/**
	 * @returns String The key for the depth axis common setting
	 */
	getDepthAxisKey() {};
	/**
	 * @returns String The key for the invert depth axis common setting
	 */
	getInvertDepthAxisKey() {};
	/**
	 * @returns String The key for the invert lateral axis common setting
	 */
	getInvertLateralAxisKey() {};
	/**
	 * @returns String The key for the invert vertical axis common setting
	 */
	getInvertVerticalAxisKey() {};
	/**
	 * @returns String The key for the lateral axis common setting
	 */
	getLateralAxisKey() {};
	/**
	 * @returns Number the id of the preset with the given name, or an -1 if the preset does not exist. Will also return -1 even if the preset exists when className is not empty and the given preset does not have settings for that specific class.
	 * @param String - The name of the desired preset
	 * @param {String} className - The optional class name for the given preset. If not passed in or empty then the method will not take into account whether the preset has settings for the given class name.
	 */
	getPresetID(presetName, className = String) {};
	/**
	 * @returns String the name of the preset with the given id, or an empty string if the preset does not exist. Will also return an empty string even if the preset exists when className is not empty and the given preset does not have settings for that specific class.
	 * @param {Number} id - The id of the desired preset
	 * @param {String} className - The optional class name for the given preset. If not passed in or empty then the method will not take into account whether the preset has settings for the given class name.
	 */
	getPresetName(id, className = String) {};
	/**
	 * @description Note:
	 * @returns String The key for the scale common setting
	 */
	getScaleKey() {};
	/**
	 * @description TODO:
	 * Add description.
	 * @returns Boolean
	 */
	getSpecificDefaults(className, settings) {};
	/**
	 * @description TODO:
	 * Add description.
	 * @returns Boolean
	 */
	getSpecificSettings(presetName, className, settings) {};
	/**
	 * @returns Array the available system-defined presets for the given class name
	 * @param {String} className - The name of the class to get available presets for. This is typically, but not always, the name of an importer or exporter, such as "DzObjImporter." If className is empty, returns all system presets
	 */
	getSystemPresets(className) {};
	/**
	 * @returns Array the available user-defined presets for the given class name
	 * @param {String} className - The name of the class to get available presets for. This is typically, but not always, the name of an importer or exporter, such as "DzObjImporter." If className is empty, returns all user presets
	 */
	getUserPresets(className) {};
	/**
	 * @returns String The key for the vertical axis common setting
	 */
	getVerticalAxisKey() {};
	/**
	 * @returns Boolean true if the preset is a system preset, false if it is a user preset or does not exist
	 * @param {String} presetName - The name of the preset to check
	 */
	isSystemPreset(presetName) {};
	/**
	 * @returns Boolean true if the preset is a user preset, false if it is a system preset or does not exist
	 * @param {String} presetName - The name of the preset to check
	 */
	isUserPreset(presetName) {};
	/**
	 * @returns Boolean true if the given preset exists, false otherwise
	 * @param {Number} id - The id of the preset to check
	 * @param {String} className - The optional class name for the given preset. If not passed in or empty then the check will not take into account whether the preset has settings for the given class name
	 */
	presetExists(id, className = String) {};
	/**
	 * @returns Boolean true if the given preset exists, false otherwise
	 * @param {String} presetName - The name of the preset to check
	 * @param {String} className - The optional class name for the given preset. If not passed in or empty then the check will not take into account whether the preset has settings for the given class name
	 */
	presetExists(presetName, className = String) {};
	/**
	 * @description Attempts to remove the preset with the given preset name and class name.
	 * @returns Boolean true if successful, false if the preset could not be removed
	 */
	removeUserPreset(presetName, className) {};
	/**
	 * @description Attempts to save a user preset with the given preset name and class name
	 * @returns Boolean true if the preset was saved, false otherwise
	 * @param {String} presetName - The name of the preset to save
	 * @param {DzFileIOSettings} className - The name of the class to save settings for presetName
	 * @param {DzFileIOSettings} keepCommonSettings - If a preset named presetName already exists, this settings determines what to do with common settings in the settings parameter. If true, the existing common settings will be kept and those in the settings will be ignored.
	 * @param {DzFileIOSettings} keepSpecificSettings - If a preset presetName and className already exists, this setting determines what to do with the specific settings. If true, the specific settings will remain unchanged.
	 * @param {DzFileIOSettings} settings - The settings to associate with the new preset
	 */
	saveUserPreset(presetName, className, keepCommonSettings, settings) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when a preset is added
	 * @signature `presetRemoved(const QString&, const QSring&)`
	 * @event
	 */
	presetAdded(presetName, className) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description TODO: Add Description
	 * @signature `presetLoadFinished()`
	 * @event
	 */
	presetLoadFinished() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when a preset is removed
	 * @signature `presetRemoved(const QString&, const QSring&)`
	 * @event
	 */
	presetRemoved(presetName, className) {};

}
/**
 * TODO:
 * Add detailed description.
 */
class DzFileIOSettings extends DzSettings {
	/**
	 * @description Default Constructor - creates an empty set of options
	 */
	constructor() {};
	/**
	 * @description Copy constructor.
	 * @param {DzFileIOSettings} settings - The settings object to copy data from.
	 */
	constructor(settings) {};

}
/**
 * TODO:
 * Add detailed description.
 */
class DzFileProperty extends DzStringProperty {
	/**
	 * @description Default Constructor. Creates a non-user property.
	 */
	constructor() {};
	/**
	 * @param {String} name - The name of this property.
	 * @param {Boolean} isUserProperty - If true, creates a user property; user properties are properties that can be added/deleted by users.
	 */
	constructor(name, isUserProperty) {};
	/**
	 * @description ENUM: The user will be prompted with a 'Save As' type dialog when browsing for a file.
	 */
	FileSave;
	/**
	 * @description ENUM: The user will be prompted with an 'Open' type dialog when browsing for a file.
	 */
	FileOpen;
	/**
	 * @description ENUM: The user will be prompted with a 'Select Folder' type dialog when browsing for a directory.
	 */
	Dir;
	/**
	 * @returns String The absolute path of the file specified by the given path
	 * @param {String} path - The (relative) path of the file.
	 */
	getAbsolutePath(path) {};
	/**
	 * @description Gets the filter value.
	 * @returns String
	 */
	getFilter() {};
	/**
	 * @description Gets the file type.
	 * @returns FileType
	 */
	getType() {};
	/**
	 * @description Sets the value to use as a file extension filter.
	 * @param {String} filter - The filter to set. This should be in the form "FilterName (*.ext1 *.ext2 *.ext3)".
	 * @attention If this property is of the type SaveFile, and if the save file is not given an extension by the user, then the first extension listed will be added to the filename. The filter is not checked if setValue() is used.
	 */
	setFilter(filter) {};
	/**
	 * @description Sets the file type for the property.
	 * @param {FileType} type - The file type to set.
	 */
	setType(type) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the filter for the property changes.
	 * @signature `"filterChanged()"`
	 * @event
	 */
	filterChanged() {};

}
/**
 * Deprecated
 * Exists only to keep code written prior to 4.6.2.23 working. Do not use in new code. Use DzTextureComponent instead.
 */
class DzFlipManip {
	/**
	 * @returns Boolean true if the image will be flipped horizontally, false if the image is not flipped horizontally.
	 */
	flipHorizontal() {};
	/**
	 * @returns Boolean true if the image will be flipped vertically, false if the image is not flipped vertically.
	 */
	flipVertical() {};
	/**
	 * @description Sets whether or not the image is flipped horizontally.
	 * @param {Boolean} onOff - If true, the image will be flipped horizontally, otherwise the image is not flipped horizontally.
	 */
	setFlipHorizontal(onOff) {};
	/**
	 * @description Sets whether or not the image is flipped vertically.
	 * @param {Boolean} onOff - If true, the image will be flipped vertically, otherwise the image is not flipped vertically.
	 */
	setFlipVertical(onOff) {};

}
/**
 * This class provides an animatable floating-point property with 2 values that is stored and can be accessed as a DzVec2.
 * Since:
 */
class DzFloat2Property extends DzFloatProperty {
	/**
	 * @description Default Constructor. Creates a non-animatable, non-user property.
	 */
	constructor() {};
	/**
	 * @param {String} name - The name of this property.
	 * @param {Boolean} canAnimate - If true, creates an animatable property.
	 * @param {Boolean} isUserProperty - If true, creates a user property; user properties are properties that can be added/deleted by users.
	 * @param {DzVec2} defaultVal - Sets the default value of this property.
	 */
	constructor(name, canAnimate, isUserProperty, defaultVal) {};
	/**
	 * @param {String} name - The name of this property.
	 * @param {Boolean} canAnimate - If true, creates an animatable property.
	 * @param {Boolean} isUserProperty - If true, creates a user property; user properties are properties that can be added/deleted by users.
	 */
	constructor(name, canAnimate, isUserProperty) {};
	/**
	 * @description Adjust the value of the property based on the contribution of property controllers.
	 * @returns DzVec2 A 'raw' value for the property that will result in the property having the given value with the current controllers.
	 * @param {DzVec2} val - The 'final' value desired for the property.
	 */
	adjustFloat2Value(val) {};
	/**
	 * @description Adjust the value of the property at the given time based on the contribution of property controllers.
	 * @returns DzVec2 A 'raw' value for the property that will result in the property having the given value with the current controllers.
	 * @param {DzVec2} tm - The scene time at which to adjust the value.
	 * @param {DzVec2} val - The 'final' value desired for the property.
	 */
	adjustFloat2Value(tm, val) {};
	/**
	 * @returns DzVec2 The default value of the property.
	 */
	getDefaultFloat2Value() {};
	/**
	 * @returns DzVec2 The difference between the current value of the follow property and its default value at the current time. If no auto-follow property is set, or auto-follow is not enabled for this property, then this method returns 0.
	 */
	getFloat2FollowValue() {};
	/**
	 * @returns DzVec2 The difference between the current value of the follow property and this properties default value tm. If no auto-follow property is set, or auto-follow is not enabled for this property, then this method returns 0.
	 * @param {DzTime} tm - The scene time for which to get the value.
	 */
	getFloat2FollowValue(tm) {};
	/**
	 * @returns DzVec2 The value of the property at the current time.
	 */
	getFloat2Value() {};
	/**
	 * @returns DzVec2 The value of the property at the given time.
	 * @param {DzTime} tm - The scene time to get the value for.
	 */
	getFloat2Value(tm) {};
	/**
	 * @returns DzVec2 The value of the i'th key in the property.
	 * @param {Number} index - The index of the key to get the value for.
	 */
	getKeyFloat2Value(i) {};
	/**
	 * @description This function is provided for the special case of ERC link redirection; sometimes called 'cross-talk'. For example, if Figure A (a piece of clothing, for example) is 'Fit To' Figure B, the ERC links on Figure A are redirected to follow channels on Figure B; this is how morphs on an item of clothing will follow morphs on the figure, etc. This function will provide the value of the property ignoring any redirection of ERC links. So, for a figure that is not 'Fit To' another figure, this will return the same value as getValue(). For a figure that is 'Fit To' another figure, this will return the value that the property would have if the ERC link had not been redirected.
	 * @returns DzVec2 The value of the property at the current time without any ERC link redirection.
	 */
	getLocalFloat2Value() {};
	/**
	 * @description This function is provided for the special case of ERC link redirection; sometimes called 'cross-talk'. For example, if Figure A (a piece of clothing, for example) is 'Fit To' Figure B, the ERC links on Figure A are redirected to follow channels on Figure B; this is how morphs on an item of clothing will follow morphs on the figure, etc. This function will provide the value of the property ignoring any redirection of ERC links. So, for a figure that is not 'Fit To' another figure, this will return the same value as getValue(). For a figure that is 'Fit To' another figure, this will return the value that the property would have if the ERC link had not been redirected.
	 * @returns DzVec2 The value of the property at the given time without any ERC link redirection.
	 * @param {DzTime} tm - The scene time to get the local value for.
	 */
	getLocalFloat2Value(tm) {};
	/**
	 * @description This function is provided to make it easy to get the 'keyed' value of the property without any modifications. When the value of a property is evaluated, first the value based on key interpolation is calculated, that value is then passed to each of the controllers on the property (ERC links for example) which can modify that value. This modified value is then returned as the value of the property by getFloat2Value(). This function returns the value of the property before the application of the controllers; strictly the result of key interpolation.
	 * @returns DzVec2 The 'raw' value of the property at the given time - this is the actual value of the property without the contribution of property links, etc.
	 * @param {DzTime} tm - The scene time to get the raw value for.
	 */
	getRawFloat2Value(tm) {};
	/**
	 * @description This function is provided to make it easy to get the 'keyed' value of the property without any modifications. When the value of a property is evaluated, first the value based on key interpolation is calculated, that value is then passed to each of the controllers on the property (ERC links for example) which can modify that value. This modified value is then returned as the value of the property by getFloat2Value(). This function returns the value of the property before the application of the controllers; strictly the result of key interpolation.
	 * @returns DzVec2 The 'raw' value of the property at the current time; this is the actual value of the property without the contribution of property links, etc.
	 */
	getRawFloat2Value() {};
	/**
	 * @description Sets the default value for this property.
	 * @param {DzVec2} val - The value to set the property to.
	 */
	setDefaultFloat2Value(val) {};
	/**
	 * @description Sets the value for this property at the given time; or the default value if this property is not animatable.
	 * @param {DzVec2} tm - The scene time to set the value at.
	 * @param {DzVec2} val - The value to set the property to.
	 */
	setFloat2Value(tm, val) {};
	/**
	 * @description Sets the value for this property at the current time; or the default value if this property is not animatable.
	 * @param {DzVec2} val - The value to set the property to.
	 */
	setFloat2Value(val) {};
	/**
	 * @description Sets the value for this property at the given time; or the default value if this property is not animatable.
	 * @param {DzVec2} tm - The scene time to set the value at.
	 * @param {DzVec2} val - The value to set the property to.
	 * @param {InterpolationType} interp - The type of interpolation to perform between this keyframe and the next. Parameters for interpolation are set to defaults.
	 */
	setFloat2Value(tm, val, interp) {};
	/**
	 * @description Sets the value for this property at the given time; or the default value if this property is not animatable.
	 * @param {DzTime} tm - The scene time to set the value at.
	 * @param {DzVec2} valIn - The value to set the property to.
	 * @param {InterpolationType} interp - The type of interpolation to perform between this keyframe and the next.
	 * @param {Number} param0 - The parameter 0 for key interpolation: T value for TCB interpolation, starting slope value for Hermite interpolation.
	 * @param {Number} param1 - The parameter 1 for key interpolation: C value for TCB interpolation, ending slope value for Hermite interpolation.
	 * @param {Number} param2 - The parameter 2 for key interpolation: B value for TCB interpolation
	 */
	setFloat2Value(tm, valIn, interp, param0, param1, param2) {};
	/**
	 * @description Sets the value of the i'th key.
	 * @param {Number} i - The index of the key to change.
	 * @param {DzVec2} val - The new value for the key.
	 * @attention You are responsible to ensure the key indices are within the valid range.
	 */
	setKeyFloat2Value(i, val) {};

}
/**
 * This class provides an animatable floating-point property with 3 values that is stored and can be accessed as a DzVec3.
 * Since:
 */
class DzFloat3Property extends DzFloatProperty {
	/**
	 * @description Default Constructor. Creates a non-animatable, non-user property.
	 */
	constructor() {};
	/**
	 * @param {String} name - The name of this property.
	 * @param {Boolean} canAnimate - If true, creates an animatable property.
	 * @param {Boolean} isUserProperty - If true, creates a user property; user properties are properties that can be added/deleted by users.
	 * @param {DzVec3} defaultVal - Sets the default value of this property.
	 */
	constructor(name, canAnimate, isUserProperty, defaultVal) {};
	/**
	 * @param {String} name - The name of this property.
	 * @param {Boolean} canAnimate - If true, creates an animatable property.
	 * @param {Boolean} isUserProperty - If true, creates a user property; user properties are properties that can be added/deleted by users.
	 */
	constructor(name, canAnimate, isUserProperty) {};
	/**
	 * @description Adjust the value of the property based on the contribution of property controllers.
	 * @returns DzVec3 A 'raw' value for the property that will result in the property having the given value with the current controllers.
	 * @param {DzVec3} val - The 'final' value desired for the property.
	 */
	adjustFloat3Value(val) {};
	/**
	 * @description Adjust the value of the property at the given time based on the contribution of property controllers.
	 * @returns DzVec3 A 'raw' value for the property that will result in the property having the given value with the current controllers.
	 * @param {DzVec3} tm - The scene time at which to adjust the value.
	 * @param {DzVec3} val - The 'final' value desired for the property.
	 */
	adjustFloat3Value(tm, val) {};
	/**
	 * @returns DzVec3 The default value of the property.
	 */
	getDefaultFloat3Value() {};
	/**
	 * @returns DzVec3 The difference between the current value of the follow property and its default value at the current time. If no auto-follow property is set, or auto-follow is not enabled for this property, then this method returns 0.
	 */
	getFloat3FollowValue() {};
	/**
	 * @returns DzVec3 The difference between the current value of the follow property and this properties default value tm. If no auto-follow property is set, or auto-follow is not enabled for this property, then this method returns 0.
	 * @param {DzTime} tm - The scene time for which to get the value.
	 */
	getFloat3FollowValue(tm) {};
	/**
	 * @returns DzVec3 The value of the property at the current time.
	 */
	getFloat3Value() {};
	/**
	 * @returns DzVec3 The value of the property at the given time.
	 * @param {DzTime} tm - The scene time to get the value for.
	 */
	getFloat3Value(tm) {};
	/**
	 * @returns DzVec3 The value of the i'th key in the property.
	 * @param {Number} index - The index of the key to get the value for.
	 */
	getKeyFloat3Value(i) {};
	/**
	 * @description This function is provided for the special case of ERC link redirection; sometimes called 'cross-talk'. For example, if Figure A (a piece of clothing, for example) is 'Fit To' Figure B, the ERC links on Figure A are redirected to follow channels on Figure B; this is how morphs on an item of clothing will follow morphs on the figure, etc. This function will provide the value of the property ignoring any redirection of ERC links. So, for a figure that is not 'Fit To' another figure, this will return the same value as getValue(). For a figure that is 'Fit To' another figure, this will return the value that the property would have if the ERC link had not been redirected.
	 * @returns DzVec3 The value of the property at the current time without any ERC link redirection.
	 */
	getLocalFloat3Value() {};
	/**
	 * @description This function is provided for the special case of ERC link redirection; sometimes called 'cross-talk'. For example, if Figure A (a piece of clothing, for example) is 'Fit To' Figure B, the ERC links on Figure A are redirected to follow channels on Figure B; this is how morphs on an item of clothing will follow morphs on the figure, etc. This function will provide the value of the property ignoring any redirection of ERC links. So, for a figure that is not 'Fit To' another figure, this will return the same value as getValue(). For a figure that is 'Fit To' another figure, this will return the value that the property would have if the ERC link had not been redirected.
	 * @returns DzVec3 The value of the property at the given time without any ERC link redirection.
	 * @param {DzTime} tm - The scene time to get the local value for.
	 */
	getLocalFloat3Value(tm) {};
	/**
	 * @description This function is provided to make it easy to get the 'keyed' value of the property without any modifications. When the value of a property is evaluated, first the value based on key interpolation is calculated, that value is then passed to each of the controllers on the property (ERC links for example) which can modify that value. This modified value is then returned as the value of the property by getFloat3Value(). This function returns the value of the property before the application of the controllers; strictly the result of key interpolation.
	 * @returns DzVec3 The 'raw' value of the property at the given time - this is the actual value of the property without the contribution of property links, etc.
	 * @param {DzTime} tm - The scene time to get the raw value for.
	 */
	getRawFloat3Value(tm) {};
	/**
	 * @description This function is provided to make it easy to get the 'keyed' value of the property without any modifications. When the value of a property is evaluated, first the value based on key interpolation is calculated, that value is then passed to each of the controllers on the property (ERC links for example) which can modify that value. This modified value is then returned as the value of the property by getFloat3Value(). This function returns the value of the property before the application of the controllers; strictly the result of key interpolation.
	 * @returns DzVec3 The 'raw' value of the property at the current time; this is the actual value of the property without the contribution of property links, etc.
	 */
	getRawFloat3Value() {};
	/**
	 * @description Sets the default value for this property.
	 * @param {DzVec3} val - The value to set the property to.
	 */
	setDefaultFloat3Value(val) {};
	/**
	 * @description Sets the value for this property at the given time; or the default value if this property is not animatable.
	 * @param {DzVec3} tm - The scene time to set the value at.
	 * @param {DzVec3} val - The value to set the property to.
	 */
	setFloat3Value(tm, val) {};
	/**
	 * @description Sets the value for this property at the current time; or the default value if this property is not animatable.
	 * @param {DzVec3} val - The value to set the property to.
	 */
	setFloat3Value(val) {};
	/**
	 * @description Sets the value for this property at the given time; or the default value if this property is not animatable.
	 * @param {DzVec3} tm - The scene time to set the value at.
	 * @param {DzVec3} val - The value to set the property to.
	 * @param {InterpolationType} interp - The type of interpolation to perform between this keyframe and the next. Parameters for interpolation are set to defaults.
	 */
	setFloat3Value(tm, val, interp) {};
	/**
	 * @description Sets the value for this property at the given time; or the default value if this property is not animatable.
	 * @param {DzTime} tm - The scene time to set the value at.
	 * @param {DzVec3} valIn - The value to set the property to.
	 * @param {InterpolationType} interp - The type of interpolation to perform between this keyframe and the next.
	 * @param {Number} param0 - The parameter 0 for key interpolation: T value for TCB interpolation, starting slope value for Hermite interpolation.
	 * @param {Number} param1 - The parameter 1 for key interpolation: C value for TCB interpolation, ending slope value for Hermite interpolation.
	 * @param {Number} param2 - The parameter 2 for key interpolation: B value for TCB interpolation
	 */
	setFloat3Value(tm, valIn, interp, param0, param1, param2) {};
	/**
	 * @description Sets the value of the i'th key.
	 * @param {Number} i - The index of the key to change.
	 * @param {DzVec3} val - The new value for the key.
	 * @attention You are responsible to ensure the key indices are within the valid range.
	 */
	setKeyFloat3Value(i, val) {};

}
/**
 * 
 */
class DzFloatColor extends Object {
	/**
	 * @description Default constructor. Initializes a new color to opaque black.
	 */
	constructor() {};
	/**
	 * @description Creates a floating point color by parsing a string.
	 * @param {String} color - A string representation of the float color in the form "[ red, green, blue, alpha ]"
	 */
	constructor(color) {};
	/**
	 * @description Constructor that takes individual floating-point RGBA components. Initializes the color to the given values. Values should be in the [0,1] range.
	 * @param {Number} r - The red value for the color
	 * @param {Number} g - The green value for the color
	 * @param {Number} b - The blue value for the color
	 * @param {Number} a - The alpha value for the color
	 */
	constructor(r, g, b, a = 1.0) {};
	/**
	 * @description Constructor that creates an achromatic color.
	 * @param {Number} val - The value to use for each color component.
	 * @param {Number} alpha - The value to use for the alpha component.
	 */
	constructor(val, alpha = 1.0) {};
	/**
	 * @description Constructor that takes a floating-point array to define RGBA colors. Initializes the color to the given values.
	 * @param {Array} color - An array of float values for the color. The array can have 1, 2, 3 or 4 float values. The length of the array has meanings that correspond with the other constructors. Values should be in the [0,1] range.
	 */
	constructor(color) {};
	/**
	 * @description Constructor that takes a QColor. Initializes the color to the given color. The color is assumed to be completely opaque.
	 * @param {Color} color - The color value to copy into this color.
	 */
	constructor(color) {};
	/**
	 * @description Copy Constructor.
	 * @param {DzFloatColor} color - The color object to copy.
	 */
	constructor(color) {};
	/**
	 * @description Holds the alpha value for the color. Should be in the [0,1] range.
	 * @type {String}
	 */
	alpha;
	/**
	 * @description Holds the blue value for the color. Should be in the [0,1] range.
	 * @type {String}
	 */
	blue;
	/**
	 * @description Holds the green value for the color. Should be in the [0,1] range.
	 * @type {String}
	 */
	green;
	/**
	 * @description Holds the red value for the color. Should be in the [0,1] range.
	 * @type {String}
	 */
	red;
	/**
	 * @description Modifies the color such that the value of no component is less than min and no more than max.
	 * @param {Number} min - The minimum value to allow in each component of the color.
	 * @param {Number} max - The maximum value to allow in each component of the color.
	 * @param {Boolean} includeAlpha - If true, the alpha component is also clamped.
	 */
	clamp(min, max, includeAlpha = false) {};
	/**
	 * @returns DzFloatColor A copy of this color where the value of no component is less than min and no more than max.
	 * @param {Number} min - The minimum value to allow in each component of the color.
	 * @param {Number} max - The maximum value to allow in each component of the color.
	 * @param {Boolean} includeAlpha - If true, the alpha component is also clamped.
	 */
	clamped(min, max, includeAlpha = false) {};
	/**
	 * @returns DzFloatColor A copy of this color where the value of no component is more than max.
	 * @param {Number} max - The maximum value to allow in each component of the color.
	 * @param {Boolean} includeAlpha - If true, the alpha component is also clamped.
	 */
	clampedMax(max, includeAlpha = false) {};
	/**
	 * @returns DzFloatColor A copy of this color where the value of no component is less than min.
	 * @param {Number} min - The minimum value to allow in each component of the color.
	 * @param {Boolean} includeAlpha - If true, the alpha component is also clamped.
	 */
	clampedMin(min, includeAlpha = false) {};
	/**
	 * @description Modifies the color such that the value of no component is more than max.
	 * @param {Number} max - The maximum value to allow in each component of the color.
	 * @param {Boolean} includeAlpha - If true, the alpha component is also clamped.
	 */
	clampMax(max, includeAlpha = false) {};
	/**
	 * @description Modifies the color such that the value of no component is less than min.
	 * @param {Number} min - The minimum value to allow in each component of the color.
	 * @param {Boolean} includeAlpha - If true, the alpha component is also clamped.
	 */
	clampMin(min, includeAlpha = false) {};
	/**
	 * @returns Boolean true if this color is within tolerance of color, otherwise false.
	 * @param {DzFloatColor} color - The color to test this color against.
	 * @param {Number} tolerance - The amount of deviation to allow in each component of the color.
	 */
	equals(color, tolerance = 0.000001) {};
	/**
	 * @description Applies a gamma value to the color.
	 * @param {Number} gamma - The gamma value to apply.
	 * @param {Boolean} doAlpha - If true, applies gamma to the alpha channel of the color.
	 */
	gammaColor(gamma = 2.2, doAlpha = false) {};
	/**
	 * @returns Color The RGB value of this color, including its alpha.
	 */
	getColor() {};
	/**
	 * @returns Number A suitable grayscale equivalent of this color.
	 */
	getGrayscale() {};
	/**
	 * @returns Array An array consisting of the hue, saturation, lightness and alpha component values.
	 */
	getHsl() {};
	/**
	 * @returns Array An array consisting of the hue, saturation, value and alpha component values.
	 */
	getHsv() {};
	/**
	 * @returns Number The maximum value for this color.
	 */
	getMaxRGBValue() {};
	/**
	 * @returns Number The relative luminance for this color, calculated as: Y = 0.212671*R + 0.715160*G + 0.072169*B
	 */
	getRelativeLuminance() {};
	/**
	 * @returns Array An array consisting of the red, green, blue and alpha component values.
	 */
	getRgba() {};
	/**
	 * @description Linerizes the color based on a gamma value.
	 * @param {Number} gamma - The gamma value to linearize by.
	 * @param {Boolean} doAlpha - If true, linearizes the alpha channel of the color by gamma.
	 */
	linearizeColor(gamma = 2.2, doAlpha = false) {};
	/**
	 * @returns DzFloatColor A copy of this color where the value of each component is modulated between min and max.
	 * @param {Number} min - The minimum value to allow in each component of the color.
	 * @param {Number} max - The maximum value to allow in each component of the color.
	 * @param {Boolean} includeAlpha - If true, the alpha component is also clamped.
	 */
	modulate(min, max, includeAlpha = false) {};
	/**
	 * @description Modifies the color such that the value of each component is modulated between min and max.
	 * @param {Number} min - The minimum value to allow in each component of the color.
	 * @param {Number} max - The maximum value to allow in each component of the color.
	 * @param {Boolean} includeAlpha - If true, the alpha component is also modulated.
	 */
	modulo(min, max, includeAlpha = false) {};
	/**
	 * @description Sets a HSL value on the color.
	 * @param {Number} h - The value to set on the hue component.
	 * @param {Number} s - The value to set on the saturation component.
	 * @param {Number} l - The value to set on the lightness component.
	 * @param {Number} a - The value to set on the alpha component.
	 */
	setHsl(h, s, l, a = 1.0) {};
	/**
	 * @description Sets the color according to an array of the hue, saturation, lightness and (optionally) alpha component values.
	 */
	setHsl(list) {};
	/**
	 * @description Sets the color according to an array of the hue, saturation, value and alpha component values.
	 */
	setHsv(list) {};
	/**
	 * @description Sets a HSV value on the color.
	 * @param {Number} h - The value to set on the hue component.
	 * @param {Number} s - The value to set on the saturation component.
	 * @param {Number} v - The value to set on the value component.
	 * @param {Number} a - The value to set on the alpha component.
	 */
	setHsv(h, s, v, a = 1.0) {};
	/**
	 * @description Sets the color according to an array of the red, green, blue and alpha component values.
	 */
	setRgba(list) {};
	/**
	 * @description Sets the color values. Values should be in the [0,1] range.
	 * @param {Number} r - The red value for the color.
	 * @param {Number} g - The green value for the color.
	 * @param {Number} b - The blue value for the color.
	 * @param {Number} a - The alpha value for the color.
	 */
	setValue(r, g, b, a = 1.0) {};
	/**
	 * @description Sets the color.
	 * @param {Color} color - The color to set.
	 */
	setValue(color) {};
	/**
	 * @returns String A string representation of this floating point color in the form "[ red, green, blue, alpha ]".
	 */
	toString() {};

}
/**
 * This class provides an animatable color property that is stored and can be accessed as a floating point values.
 * Since:
 */
class DzFloatColorProperty extends DzColorProperty {
	/**
	 * @description Default Constructor. Creates a non-animatable, non-user property.
	 */
	constructor() {};
	/**
	 * @param {String} name - The name of this property.
	 * @param {Boolean} canAnimate - If true, creates an animatable property.
	 * @param {Boolean} isUserProperty - If true, creates a user property; user properties are properties that can be added/deleted by users.
	 * @param defaultVal - Sets the default value of this property.
	 */
	constructor(name, canAnimate, isUserProperty, initVal) {};
	/**
	 * @param {String} name - The name of this property.
	 * @param {Boolean} canAnimate - If true, creates an animatable property.
	 * @param {Boolean} isUserProperty - If true, creates a user property; user properties are properties that can be added/deleted by users.
	 */
	constructor(name, canAnimate, isUserProperty) {};
	/**
	 * @description ENUM: Linear interpolation between key values.
	 */
	LINEAR_INTERP;
	/**
	 * @description ENUM: Constant interpolation between key values.
	 */
	CONSTANT_INTERP;
	/**
	 * @description ENUM: TCB (Kochanek-Bartels) Spline interpolation between key values.
	 */
	TCB_INTERP;
	/**
	 * @description ENUM: Hermite Spline interpolation between key values.
	 */
	HERMITE_INTERP;
	/**
	 * @description Adjust the value of the property based on the contribution of property controllers.
	 * @returns DzFloatColor A 'raw' value for the property that will result in the property having the given value with the current controllers.
	 * @param {DzFloatColor} val - The 'final' value desired for the property.
	 */
	adjustFloatColorValue(val) {};
	/**
	 * @description Adjust the value of the property at the given time based on the contribution of property controllers.
	 * @returns DzFloatColor A 'raw' value for the property that will result in the property having the given value with the current controllers.
	 * @param {DzFloatColor} tm - The scene time at which to adjust the value.
	 * @param {DzFloatColor} val - The 'final' value desired for the property.
	 */
	adjustFloatColorValue(tm, val) {};
	/**
	 * @returns DzFloatColor The default float color value of the property.
	 */
	getDefaultFloatColorValue() {};
	/**
	 * @returns DzFloatColor The difference between the current value of the follow property and its default value at the current time. If no auto-follow property is set, or auto-follow is not enabled for this property, then this method returns 0.
	 */
	getFloatColorFollowValue() {};
	/**
	 * @returns DzFloatColor The difference between the current value of the follow property and this properties default value tm. If no auto-follow property is set, or auto-follow is not enabled for this property, then this method returns 0.
	 * @param {DzTime} tm - The scene time for which to get the value.
	 */
	getFloatColorFollowValue(tm) {};
	/**
	 * @returns DzFloatColor The float color value of the property at the current time.
	 */
	getFloatColorValue() {};
	/**
	 * @returns DzFloatColor The float color value of the property at the given time.
	 * @param {DzTime} tm - The scene time to get the color value at.
	 */
	getFloatColorValue(tm) {};
	/**
	 * @returns Number The maximum allowable value of the property.
	 */
	getFloatMax() {};
	/**
	 * @returns Number The minimum allowable value of the property.
	 */
	getFloatMin() {};
	/**
	 * @returns Number The sensitivity value for this property.
	 */
	getFloatSensitivity() {};
	/**
	 * @returns DzFloatColor The float color value of the property at the given key.
	 * @param {Number} i - The index of the key to get the raw color value of.
	 */
	getKeyFloatColorValue(i) {};
	/**
	 * @description This function is provided for the special case of ERC link redirection; sometimes called 'cross-talk'. For example, if Figure A (a piece of clothing, for example) is 'Fit To' Figure B, the ERC links on Figure A are redirected to follow channels on Figure B; this is how morphs on an item of clothing will follow morphs on the figure, etc. This function will provide the value of the property ignoring any redirection of ERC links. So, for a figure that is not 'Fit To' another figure, this will return the same value as getFloatColorValue(). For a figure that is 'Fit To' another figure, this will return the value that the property would have if the ERC link had not been redirected.
	 * @returns DzFloatColor The value of the property at the current time without any ERC link redirection.
	 */
	getLocalFloatColorValue() {};
	/**
	 * @description This function is provided for the special case of ERC link redirection; sometimes called 'cross-talk'. For example, if Figure A (a piece of clothing, for example) is 'Fit To' Figure B, the ERC links on Figure A are redirected to follow channels on Figure B; this is how morphs on an item of clothing will follow morphs on the figure, etc. This function will provide the value of the property ignoring any redirection of ERC links. So, for a figure that is not 'Fit To' another figure, this will return the same value as getFloatColorValue(). For a figure that is 'Fit To' another figure, this will return the value that the property would have if the ERC link had not been redirected.
	 * @returns DzFloatColor The value of the property at the current time without any ERC link redirection.
	 * @param {DzTime} tm - The scene time to get the local value for.
	 */
	getLocalFloatColorValue(tm) {};
	/**
	 * @returns DzFloatColor The 'raw' float color value of the property.
	 * @param {DzTime} tm - The scene time at which to get the 'raw' float color value.
	 */
	getRawFloatColorValue(tm) {};
	/**
	 * @returns DzFloatColor The 'raw' float color value of the property at the current time.
	 */
	getRawFloatColorValue() {};
	/**
	 * @description Sets the default float color value for this property.
	 * @param {DzFloatColor} val - The new default value for the property.
	 */
	setDefaultFloatColorValue(val) {};
	/**
	 * @description Sets the float color value of the property at the current time.
	 * @param {DzFloatColor} val - The value to set.
	 */
	setFloatColorValue(val) {};
	/**
	 * @description Sets the float color value of the property at the specified time.
	 * @param {DzFloatColor} tm - The scene time to set the value for.
	 * @param {DzFloatColor} val - The value to set.
	 * @param {InterpolationType} interp - The type of interpolation to perform between this keyframe and the next.
	 * @param {Number} param0 - The parameter 0 for key interpolation: T value for TCB interpolation, starting slope value for Hermite interpolation.
	 * @param {Number} param1 - The parameter 1 for key interpolation: C value for TCB interpolation, ending slope value for Hermite interpolation.
	 * @param {Number} param2 - The parameter 2 for key interpolation: B value for TCB interpolation.
	 */
	setFloatColorValue(tm, val, interp, param0, param1, param2) {};
	/**
	 * @description Sets the float color value of the property at the specified time.
	 * @param {DzFloatColor} tm - The scene time to set the value for.
	 * @param {DzFloatColor} val - The value to set.
	 * @param {InterpolationType} interp - The type of interpolation to perform between this keyframe and the next.
	 */
	setFloatColorValue(tm, val, interp) {};
	/**
	 * @description Sets the float color value of the property at the specified time.
	 * @param {DzFloatColor} tm - The scene time to set the value for.
	 * @param {DzFloatColor} val - The value to set.
	 */
	setFloatColorValue(tm, val) {};
	/**
	 * @description Set the maxinimum allowable value, as a float.
	 * @param {Number} max - The maximum value to set.
	 */
	setFloatMax(max) {};
	/**
	 * @description Set the mininimum allowable value, as a float.
	 * @param {Number} min - The minimum value to set.
	 */
	setFloatMin(min) {};
	/**
	 * @description Set the mininimum and maximum allowable values, as floats.
	 * @param {Number} min - The minimum value to set.
	 * @param {Number} max - The maximum value to set.
	 */
	setFloatMinMax(min, max) {};
	/**
	 * @description Set the sensitivity for this property. This value describes the amount of change in the value of this property caused by adjustment in the interface, especially if limits are off.
	 * @param {Number} sens - The value to set.
	 */
	setFloatSensitivity(sens) {};
	/**
	 * @description Sets the float color value of this property for the given key.
	 * @param {DzFloatColor} i - The index of the key to set the value of.
	 * @param {DzFloatColor} val - The new default value for the property.
	 */
	setKeyFloatColorValue(i, val) {};
	/**
	 * @description Sets the 'raw' float color value of the property at the specified time; this is the actual value of the property without the contribution of property links, etc.
	 * @param {DzFloatColor} tm - The scene time to set the raw value for.
	 * @param {DzFloatColor} val - The value to set.
	 */
	setRawFloatColorValue(tm, val) {};
	/**
	 * @description Sets the 'raw' float color value of the property at the current time; this is the actual value of the property without the contribution of property links, etc.
	 * @param {DzFloatColor} val - The value to set.
	 */
	setRawFloatColorValue(val) {};

}
/**
 * TODO:
 * Add detailed description.
 */
class DzFloatProperty extends DzNumericProperty {
	/**
	 * @description Default Constructor. Creates a non-animatable, non-user property.
	 */
	constructor() {};
	/**
	 * @param {String} name - The name of this property.
	 * @param {Boolean} canAnimate - If true, creates an animatable property.
	 * @param {Boolean} isUserProperty - If true, creates a user property; user properties are properties that can be added/deleted by users.
	 * @param {Number} defaultVal - Sets the default value of this property.
	 */
	constructor(name, canAnimate, isUserProperty, defaultVal = 0.0) {};
	/**
	 * @description ENUM: Linear interpolation between key values.
	 */
	LINEAR_INTERP;
	/**
	 * @description ENUM: Constant interpolation between key values.
	 */
	CONSTANT_INTERP;
	/**
	 * @description ENUM: TCB (Kochanek-Bartels) Spline interpolation between key values.
	 */
	TCB_INTERP;
	/**
	 * @description ENUM: Hermite Spline interpolation between key values.
	 */
	HERMITE_INTERP;
	/**
	 * @description ENUM: This property is not a transform property.
	 */
	NON_TRANSFORM;
	/**
	 * @description ENUM: This property is a scale transform.
	 */
	SCALE;
	/**
	 * @description ENUM: This property is a translation transform property.
	 */
	TRANSLATE;
	/**
	 * @description ENUM: This property is a rotation on the first axis of the rotation order.
	 */
	ROT_FIRST_AXIS;
	/**
	 * @description ENUM: This property is a rotation on the second axis of the rotation order.
	 */
	ROT_SECOND_AXIS;
	/**
	 * @description ENUM: This property is a rotation on the third axis of the rotation order.
	 */
	ROT_THIRD_AXIS;
	/**
	 * @description Adds the given value to all the key values.
	 * @param {Number} val - The addend for the values.
	 * @param {Boolean} applyToDefault - If true, val will also be added to the default value for the property.
	 */
	add(val, applyToDefault = true) {};
	/**
	 * @description Adjust the value of the property based on the contribution of property controllers.
	 * @returns Number A 'raw' value for the property that will result in the property having the given value with the current controllers.
	 * @param {Number} val - The 'final' value desired for the property.
	 */
	adjustValue(val) {};
	/**
	 * @description Adjust the value of the property at the given time based on the contribution of property controllers.
	 * @returns Number A 'raw' value for the property that will result in the property having the given value with the current controllers.
	 * @param {Number} tm - The scene time at which to adjust the value.
	 * @param {Number} val - The 'final' value desired for the property.
	 */
	adjustValue(tm, val) {};
	/**
	 * @description Divides all key values by the given amount.
	 * @param {Number} val - The divisor for the values.
	 * @param {Boolean} applyToDefault - If true, the default value for the property will also be divided.
	 */
	divide(val, applyToDefault = true) {};
	/**
	 * @returns Number The default value of the property.
	 */
	getDefaultValue() {};
	/**
	 * @returns Boolean true if this property should be displayed as a percentage, false if this property should be displayed as a decimal.
	 */
	getDisplayAsPercent() {};
	/**
	 * @returns Number The value of the i'th key in the property.
	 * @param {Number} i - The index of the key to get the value for.
	 */
	getKeyValue(i) {};
	/**
	 * @description This function is provided for the special case of ERC link redirection; sometimes called 'cross-talk'. For example, if Figure A (a piece of clothing, for example) is 'Fit To' Figure B, the ERC links on Figure A are redirected to follow channels on Figure B; this is how morphs on an item of clothing will follow morphs on the figure, etc. This function will provide the value of the property ignoring any redirection of ERC links. So, for a figure that is not 'Fit To' another figure, this will return the same value as getValue(). For a figure that is 'Fit To' another figure, this will return the value that the property would have if the ERC link had not been redirected.
	 * @returns Number The value of the property at the current time without any ERC link redirection.
	 */
	getLocalValue() {};
	/**
	 * @description This function is provided for the special case of ERC link redirection; sometimes called 'cross-talk'. For example, if Figure A (a piece of clothing, for example) is 'Fit To' Figure B, the ERC links on Figure A are redirected to follow channels on Figure B; this is how morphs on an item of clothing will follow morphs on the figure, etc. This function will provide the value of the property ignoring any redirection of ERC links. So, for a figure that is not 'Fit To' another figure, this will return the same value as getValue(). For a figure that is 'Fit To' another figure, this will return the value that the property would have if the ERC link had not been redirected.
	 * @returns Number The value of the property at the given time without any ERC link redirection.
	 * @param {DzTime} tm - The scene time to get the local value for.
	 */
	getLocalValue(tm) {};
	/**
	 * @returns Number The maximum allowable value of the property.
	 */
	getMax() {};
	/**
	 * @returns Number The minimum allowable value of the property.
	 */
	getMin() {};
	/**
	 * @description This function is provided to make it easy to get the 'keyed' value of the property without any modifications. When the value of a property is evaluated, first the value based on key interpolation is calculated, that value is then passed to each of the controllers on the property (ERC links for example) which can modify that value. This modified value is then returned as the value of the property by getValue(). This function returns the value of the property before the application of the controllers; strictly the result of key interpolation.
	 * @returns Number The 'raw' value of the property at the current time; this is the actual value of the property without the contribution of property links, etc.
	 */
	getRawValue() {};
	/**
	 * @description This function is provided to make it easy to get the 'keyed' value of the property without any modifications. When the value of a property is evaluated, first the value based on key interpolation is calculated, that value is then passed to each of the controllers on the property (ERC links for example) which can modify that value. This modified value is then returned as the value of the property by getValue(). This function returns the value of the property before the application of the controllers; strictly the result of key interpolation.
	 * @returns Number The 'raw' value of the property at the given time; this is the actual value of the property without the contribution of property links, etc.
	 * @param {DzTime} tm - The scene time to get the raw value for.
	 */
	getRawValue(tm) {};
	/**
	 * @returns Number The sensitivity value for this property.
	 */
	getSensitivity() {};
	/**
	 * @returns TransformType The transform type for this property.
	 */
	getTransformType() {};
	/**
	 * @returns Number The value of the property at the current time.
	 */
	getValue() {};
	/**
	 * @returns Number The value of the property at the given time.
	 * @param {DzTime} tm - The scene time to get the value for.
	 */
	getValue(tm) {};
	/**
	 * @description Multiplies all key values by the given amount.
	 * @param {Number} val - The multiplier for the values.
	 * @param {Boolean} applyToDefault - If true, the default value for the property will also be multiplied.
	 */
	multiply(val, applyToDefault = true) {};
	/**
	 * @description Sets the default value for this property.
	 * @param {Number} val - The value to set as the default for this property.
	 */
	setDefaultValue(val) {};
	/**
	 * @description Sets whether this property should have its value displayed as a percentage; the default is false (value is displayed as a decimal).
	 */
	setDisplayAsPercent(onOff) {};
	/**
	 * @description Sets the value of the i'th key.
	 * @param {Number} keyIndex - The index of the key to set the value for.
	 * @param {Number} val - The value to set.
	 */
	setKeyValue(i, val) {};
	/**
	 * @description Set the maximum allowable value.
	 * @param {Number} max - The maximum value to set.
	 */
	setMax(max) {};
	/**
	 * @description Set the mininimum allowable value.
	 * @param {Number} min - The minimum value to set.
	 */
	setMin(min) {};
	/**
	 * @description Set the mininimum and maximum allowable values.
	 * @param {Number} min - The minimum value to set.
	 * @param {Number} max - The maximum value to set.
	 */
	setMinMax(min, max) {};
	/**
	 * @description Set the sensitivity for this property. This value describes the amount of change in the value of this property caused by adjustment in the interface, especially if limits are off.
	 * @param {Number} sens - The value to set.
	 */
	setSensitivity(sens) {};
	/**
	 * @description Sets the transform type for this property.
	 * @param {TransformType} type - The enumeration value for the type of transform.
	 */
	setTransformType(type) {};
	/**
	 * @description Sets the value for this property at the given time; or the default value if this property is not animatable.
	 * @param {Number} tm - The scene time to set the value at.
	 * @param {Number} val - The value to set the property to.
	 * @param {InterpolationType} interp - The type of interpolation to perform between this keyframe and the next.
	 * @param {Number} param0 - The parameter 0 for key interpolation: T value for TCB interpolation, starting slope value for Hermite interpolation.
	 * @param {Number} param1 - The parameter 1 for key interpolation: C value for TCB interpolation, ending slope value for Hermite interpolation.
	 * @param {Number} param2 - The parameter 2 for key interpolation: B value for TCB interpolation
	 */
	setValue(tm, val, interp, param0, param1, param2) {};
	/**
	 * @description Sets the value for this property at the current time; or the default value if this property is not animatable. This function differs from setRawValue() in that it takes into account any controllers on the property such that calling setValue( getValue() ) should not change the value of the property.
	 * @param {Number} val - The value to set.
	 */
	setValue(val) {};
	/**
	 * @description Sets the value for this property at the given time; or the default value if this property is not animatable. This function differs from setRawValue() in that it takes into account any controllers on the property such that calling setValue( getValue() ) should not change the value of the property.
	 * @param {Number} tm - The scene time to set the value at.
	 * @param {Number} val - The value to set.
	 * @param {InterpolationType} interp - The type of interpolation to perform between this keyframe and the next. Parameters for interpolation are set to defaults.
	 */
	setValue(tm, val, interp) {};
	/**
	 * @description Sets the value for this property at the given time; or the default value if this property is not animatable. This function differs from setRawValue() in that it takes into account any controllers on the property such that calling setValue( getValue() ) should not change the value of the property.
	 * @param {Number} tm - The scene time to set the value at.
	 * @param {Number} val - The value to set.
	 */
	setValue(tm, val) {};
	/**
	 * @description Subtracts the given value to all the key values.
	 * @param {Number} val - The value to be subtracted from the key values.
	 * @param {Boolean} applyToDefault - If true, val will also be subtracted from the default value for the property.
	 */
	subtract(val, applyToDefault = true) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted if the way this property is displayed changed.
	 * @signature `"displayAsPercentChanged()"`
	 * @event
	 */
	displayAsPercentChanged() {};

}
/**
 * A DzFloatSlider provides a control that allows a user to adjust a bounded floating point `value.`
 */
class DzFloatSlider extends DzWidget {
	/**
	 * @description Creates a slider as a child of the given parent widget.
	 * @param {DzWidget} parent - The widget parent for the slider.
	 */
	constructor(parent) {};
	/**
	 * @description Holds whether or not the slider obeys its limits. false by default.
	 * @type {Boolean}
	 */
	clamped;
	/**
	 * @description Holds the default value of the slider.
	 * @type {Number}
	 */
	defaultValue;
	/**
	 * @description Holds whether or not the slider text is displayed as a percentage value. false by default.
	 * @type {Boolean}
	 */
	displayAsPercent;
	/**
	 * @description Holds whether or not editing the slider text causes the edit field to consume the full height/width of the slider. false by default.
	 * @type {Boolean}
	 */
	fullLengthEdit;
	/**
	 * @description If true, the slider is considered to have an 'indeterminate' or '<?>' value. false by default.
	 * @type {Boolean}
	 */
	indeterminate;
	/**
	 * @description Holds whether or not the value is currently being edited. (Read Only)
	 * @type {Boolean}
	 */
	isEditing;
	/**
	 * @description Holds the label text for the slider.
	 * @type {String}
	 */
	label;
	/**
	 * @description Holds whether or not the slider's label is visible.
	 * @type {Boolean}
	 */
	labelVisible;
	/**
	 * @description Holds the maximum value of the slider. Any attempt to set this to a value that is less than the current min will fail.
	 * @type {Number}
	 */
	max;
	/**
	 * @description Holds the minimum value of the slider. Any attempt to set this to a value that is greater than the current max will fail.
	 * @type {Number}
	 */
	min;
	/**
	 * @description Holds whether or not the default value is restorable if the user holds the [Alt] key when clicked.
	 * @type {Boolean}
	 */
	restorable;
	/**
	 * @description Holds the sensitivity of the slider.
	 * @type {Number}
	 */
	sensitivity;
	/**
	 * @description Holds the text of the slider. (Read Only)
	 * @type {String}
	 */
	text;
	/**
	 * @description Holds whether or not the slider text is editable by the user. false by default.
	 * @type {Boolean}
	 */
	textEditable;
	/**
	 * @description Holds whether or not the slider text is visible to the user. true by default.
	 * @type {Boolean}
	 */
	textVisible;
	/**
	 * @description Holds the current value of the slider.
	 * @type {Number}
	 */
	value;
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the user cancels an edit of the slider.
	 * @signature `"editCancelled()"`
	 * @event
	 */
	editCancelled() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the user releases the slider.
	 * @signature `"editEnd()"`
	 * @event
	 */
	editEnd() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the user starts dragging the slider.
	 * @signature `"editStart()"`
	 * @event
	 */
	editStart() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the value of the slider changes, passes the new value.
	 * @signature `"valueChanged(float)"`
	 * @event
	 */
	valueChanged(value) {};

}
/**
 * The "Folder" container type serves to present assets as the files they represent exist in the folder structure on disk.
 * See Also:
 */
class DzFolderAssetContainer extends DzRefCountedItem, DzAbstractAssetContainer {
	/**
	 * @description Holds the list of folder names to exclude as children of this container.
	 * @type {Array}
	 */
	excludeFolders;
	/**
	 * @description Holds the list of file filters for this container.
	 * @type {Array}
	 */
	fileFilters;
	/**
	 * @description Holds whether or not this container represents an Import folder. (Read Only)
	 * @type {Boolean}
	 */
	isImport;
	/**
	 * @description Holds whether or not this container is at the top level of the Import folder hierarchy. (Read Only)
	 * @type {Boolean}
	 */
	isImportTopLevel;
	/**
	 * @description Holds whether or not this container represents a native folder. (Read Only)
	 * @type {Boolean}
	 */
	isNative;
	/**
	 * @description Holds whether or not this container is at the top level of the native folder hierarchy. (Read Only)
	 * @type {Boolean}
	 */
	isNativeTopLevel;
	/**
	 * @description Holds whether or not this container represents a Poser folder. (Read Only)
	 * @type {Boolean}
	 */
	isPoser;
	/**
	 * @description Holds whether or not this container is an immediate child of the top level folder in a Poser folder hierarchy. (Read Only)
	 * @type {Boolean}
	 */
	isPoserIntermediate;
	/**
	 * @description Holds whether or not this container is at the top level of the Poser folder hierarchy. (Read Only)
	 * @type {Boolean}
	 */
	isPoserTopLevel;
	/**
	 * @description Holds the list of folder names to allow as children of this container.
	 * @type {Array}
	 */
	onlyIncludeFolders;
	/**
	 * @returns Boolean true if shortFileName matches the filter for this container, otherwise false.
	 */
	fileMatchesFilter(shortFileName) {};
	/**
	 * @returns String The full path of the folder that this container represents.
	 */
	getFullPath() {};
	/**
	 * @returns Boolean true if this container has child containers that are directories, otherwise false.
	 */
	hasDirectoryChildren() {};
	/**
	 * @returns Boolean true if asset conflicts will create a link when called, otherwise false.
	 * @since 4.9.0.47
	 */
	insertsAsLink(asset) {};
	/**
	 * @description Attempts to update the child containers of this container.
	 * @returns Boolean true if the update was successful, otherwise false.
	 */
	updateChildren() {};

}
/**
 * When a figure is "Fit to" (set to follow) another figure in the scene, the application uses a name-matching mechanism referred to as "Auto Follow" to establish relationships between properties in the following figure to the corresponding properties in the follow target. This relationship causes certain matched properties on the follower to inherit the values of the properties on the follow target.
 * Active morphs on the follow target, when configured to "Auto Follow," are projected from the follow target to the follower at the moment the follower is "Fit to" the follow target; this projection only occurs if a morph target bearing the same name does not already exist on the follower. Morphs that are configured to "Auto Follow" on the follow target that were not active at the moment the follower was "Fit to" the follow target are projected as they become active. These options are used to control how (or even if) "Auto Follow" morphs are projected.
 * Each figure owns its own instance of this object. To modify the projection options for a follower, request the object from the figure and configure its instance rather than attempting to construct a new instance.
 * See Also:
 * Since:
 */
class DzFollowingProjectionOptions extends QObject {
	/**
	 * @description Holds the tolerance used for considering the locations around the closest found location.
	 * @type {Number}
	 */
	adaptiveTolerance;
	/**
	 * @description Holds whether or not the projection considers polylines as rigid for projection purposes.
	 * @type {Boolean}
	 */
	considerLinesAsRigid;
	/**
	 * @description Holds whether or not morph projection is disabled.
	 * @type {Boolean}
	 */
	disableMorphProjection;
	/**
	 * @description Holds the tolerance used for determining if two (or more) locations are considered coincident.
	 * @type {Number}
	 */
	distanceSquaredTolerance;
	/**
	 * @description Holds the name of the morph (if any) on the owner of this object to apply while projecting from the follow target.
	 * @type {String}
	 */
	followerProjectionMorph;
	/**
	 * @description Holds the nearness factor to use if near vertices are included.
	 * @type {Number}
	 */
	nearnessFactor;
	/**
	 * @description Holds whether or not the projection should be "smart" about projecting values to/from face groups that are on the left vs. right side of the meshes.
	 * @type {Boolean}
	 */
	smartLeftRightHandling;
	/**
	 * @description Holds whether or not the follow target is subdivided when projecting.
	 * @type {SourceSubdivisionMode}
	 */
	sourceSubdivisionMode;
	/**
	 * @description Holds whether or not to include near vertices in the projection calculation.
	 * @type {Boolean}
	 */
	useNear;
	/**
	 * @description Holds whether or not UV space will be used during projection calculation.
	 * @type {Boolean}
	 */
	uvSpaceProjection;
	/**
	 * @description Holds whether vertices or facets on the follow target looked at first during projection.
	 * @type {Boolean}
	 */
	vertexFirstProjection;
	/**
	 * @description Holds whether or not the current options are written to file as the definition for the owner of this object.
	 * @type {Boolean}
	 */
	writtenAsDefinition;
	/**
	 * @description ENUM: Projection will occur with the current subdivision state/resolution of the follow target.
	 */
	SrcAuto;
	/**
	 * @description ENUM: Projection will occur with the follow target in its cage state/resolution.
	 */
	SrcCage;
	/**
	 * @description ENUM: Projection will occur with the follow target in its subdivided state/resolution.
	 */
	SrcSubdivided;
	/**
	 * @description Adds a pair of (not necessarily matched) morph names to apply in the respective figures during a projection operation.
	 * @param {String} srcMorph - The name of the morph in the follow target.
	 * @param {String} followerMorph - The name of the morph in the owner of this object. An empty string here will cause any defined follower projection morph to be used.
	 */
	addCorrelatedMorph(srcMorph, followerMorph) {};
	/**
	 * @description Clears the list of morph pair names to apply during a projection operation.
	 * @since 4.8.1.88
	 */
	clearCorrelatedMorphs() {};
	/**
	 * @description Copies options from another instance.
	 * @returns DzFollowingProjectionOptions
	 * @param {DzFollowingProjectionOptions} other - The instance to copy.
	 */
	copyFrom(other) {};
	/**
	 * @returns String The name of the morph in the owner of this object for the pair at the specified index.
	 * @param {Number} which - The index of the pair of morph names to get.
	 */
	getFollowerCorrelatedMorph(which) {};
	/**
	 * @returns Number The number of morph name pairs to apply during a projection operation.
	 */
	getNumCorrelatedMorphs() {};
	/**
	 * @returns String The name of the morph in the follow target for the pair at the specified index.
	 * @param {Number} which - The index of the pair of morph names to get.
	 */
	getSourceCorrelatedMorph(which) {};
	/**
	 * @returns Boolean true if all options are at their respective default values, otherwise false.
	 */
	isAtDefault() {};
	/**
	 * @description Removes a pair of morph names to apply during a projection operation.
	 * @param {Number} which - The index of the name pair to remove.
	 */
	removeCorrelatedMorph(which) {};

}
/**
 * This is the DAZScript counterpart to the QFont type used in the DAZ Studio SDK.
 * Attention:@attention Attention:
 */
class Font extends QObject {
	/**
	 * @description Default Constructor.
	 */
	constructor() {};
	/**
	 * @description Copy Constructor.
	 * @param {Font} font - The Font to copy.
	 */
	constructor(font) {};
	/**
	 * @description Constructs a new font of the given family.
	 * @param {String} familyName - The name of the font family that the new font will be of.
	 */
	constructor(familyName) {};
	/**
	 * @description Holds whether or not the Font is bolded.
	 * @type {Boolean}
	 */
	bold;
	/**
	 * @description Holds the family name of the Font.
	 * @type {String}
	 */
	family;
	/**
	 * @description Holds whether or not the Font is italicized.
	 * @type {Boolean}
	 */
	italic;
	/**
	 * @description The pixel size of the font (the device dependent size of the font)
	 * @type {Number}
	 */
	pixelSize;
	/**
	 * @description The point size of the font (the device independent size of the font)
	 * @type {Number}
	 */
	pointSize;
	/**
	 * @description Holds whether or not the Font is striked.
	 * @type {Boolean}
	 */
	strikeout;
	/**
	 * @description Holds whether or not the Font is underlined.
	 * @type {Boolean}
	 */
	underline;
	/**
	 * @returns Rect The bounding rectangle of the characters in text, which is the set of pixels the text would cover if drawn at (0, 0), constrained to maxRect.
	 * @since 4.10.0.121
	 * @param {Rect} maxRect - The rectangle to constrain the bounding rectangle to.
	 * @param {String} text - The text to get the bounding rectangle of.
	 * @param {Number} flags - A bitwise OR of the following flags:
	 * 
	 *  DzWidget.AlignLeft
	 * 
	 *  DzWidget.AlignRight
	 * 
	 *  DzWidget.AlignHCenter
	 * 
	 *  DzWidget.AlignJustify
	 * 
	 *  DzWidget.AlignTop
	 * 
	 *  DzWidget.AlignBottom
	 * 
	 *  DzWidget.AlignVCenter
	 * 
	 *  DzWidget.AlignCenter
	 * 
	 *  DzWidget.TextSingleLine
	 * 
	 *  DzWidget.TextExpandTabs
	 * 
	 *  DzWidget.TextShowMnemonic
	 * 
	 *  DzWidget.TextWordWrap
	 */
	boundingRect(maxRect, text, flags = 0) {};
	/**
	 * @returns String If text is wider than width, an elided version of text, otherwise the original string.
	 * @since 4.10.0.121
	 * @param {String} text - The text to get an elided version of.
	 * @param {DzWidget.TextElideMode} mode - The mode to elide the text with.
	 * @param {Number} width - The width (in pixels) to test text with.
	 * @param {Number} flags - Currently only supports DzWidget.TextShowMnemonic.
	 */
	elidedText(text, mode, width, flags = 0) {};
	/**
	 * @returns Array A list of the font families available on the current machine (if any), otherwise an empty list.
	 * @since 4.10.0.121
	 */
	families() {};
	/**
	 * @returns Array A list of the point sizes for the font specified by family and style.
	 * @since 4.10.0.121
	 * @param {String} family - The name of the font family to get sizes for.
	 * @param {String} style - The style of the font family to get sizes for.
	 */
	pointSizes(family, style) {};
	/**
	 * @returns Size The size (in pixels) of text.
	 * @since 4.10.0.121
	 * @param {String} text - The text to get the size of.
	 * @param {Number} flags - A bitwise OR of the following flags:
	 * 
	 *  DzWidget.TextSingleLine
	 * 
	 *  DzWidget.TextExpandTabs
	 * 
	 *  DzWidget.TextShowMnemonic
	 * 
	 *  DzWidget.TextWordWrap
	 */
	size(text, flags = 0) {};
	/**
	 * @returns Array A list of the styles for the font specified by family (if any), otherwise an empty list.
	 * @since 4.10.0.121
	 * @param {String} family - The name of the font family to get styles for.
	 */
	styles(family) {};

}
/**
 * TODO:
 * Add detailed description.
 */
class DzGeometryImporter extends DzImporter {

}
/**
 * 
 */
class DzGeometryShellNode extends DzNode {
	/**
	 * @description Default Constructor. Creates a shell with DzObject, pushmodifier_dz, and DzGeometryShellShape. This is the preferred way to create a shell node.
	 */
	constructor() {};
	/**
	 * @returns DzNodeProperty The property that controls selection of the node that this node is a shell of.
	 */
	getShellNodeControl() {};

}
/**
 * The DzGeometryUtil object provides access to geometry manipulation utility functions. It is accessible via the Global.Geometry variable.
 */
class DzGeometryUtil extends QObject {
	/**
	 * @description ENUM: TODO: Add description.
	 */
	Sphere;
	/**
	 * @description ENUM: TODO: Add description.
	 */
	Cube;
	/**
	 * @description ENUM: TODO: Add description.
	 */
	Cone;
	/**
	 * @description ENUM: TODO: Add description.
	 */
	Plane;
	/**
	 * @description ENUM: TODO: Add description.
	 */
	Torus;
	/**
	 * @description ENUM: TODO: Add description.
	 */
	Cylinder;
	/**
	 * @description Converts a scene item with polygon mesh geometry to a SubD object. If the node passed in is a DzBone or DzSkeleton, the entire figure will be converted to SubD.
	 * @returns DzError DZ_NO_ERROR on success, otherwise an error code.
	 * @param {DzNode} node - The scene item to convert.
	 * @param {Number} defaultLevel - The default subdivision level of the item after conversion.
	 */
	convertToSubD(node, defaultLevel = 1) {};
	/**
	 * @description Creates a primitive based on the settings supplied.
	 * @returns DzNode The new primitive node in the scene. NULL if nothing was created.
	 * @param {DzSettings} settings - The settings that specify the type of primitive and corresponding dimensions.
	 */
	createPrimitive(settings) {};
	/**
	 * @description Populates a settings object with the default settings that are used to create a primitive.
	 * @since 4.9.3.105
	 * @param {PrimitiveType} type - The type of primitive shape to get the default options for.
	 * @param {DzSettings} settings - The settings object to populate with the individual settings that specify the type of primitive and corresponding dimensions.
	 * @attention The "PrimaryAxis" setting values have the following meanings:0 = X+1 = X-2 = Y+3 = Y-4 = Z+5 = Z-
	 */
	getDefaultPrimitiveOptions(type, settings) {};

}
/**
 * TODO:
 * Add detailed description.
 */
class DzGeomSourceFileData extends DzSourceFileData {
	/**
	 * @description Creates a new Geometry Source File Data object that stores the given file path and group name.
	 */
	constructor(filePath = "", groupName = "") {};
	/**
	 * @description The name of the group that the geometry came from.
	 * @type {String}
	 */
	groupName;

}
/**
 * The global object is never used directly, and cannot be created using the new operator. It is automatically created when the scripting engine is initialized, and its functions and properties are available immediately. The global object has no syntax. Its functions and properties are accessed directly.
 */
/**
 * @description A special value corresponding to the primitive value, false. (Read Only)
 * @type {Boolean}
 */
var false;
/**
 * @description A special value used to indicate a division by zero occurrence. In Daz Script, division by zero does not raise an error, instead it assigns the Infinity value. Use isFinite() to test if a value is finite or not. (Read Only)
 * @type {Number}
 */
var Infinity;
/**
 * @description Global variable giving all DAZ Scripts access to the ECMAScript JSON object.
 * @type {JSON}
 */
var JSON;
/**
 * @description Global variable giving all DAZ Scripts access to the ECMAScript Math object.
 * @type {Math}
 */
var Math;
/**
 * @description A special value used to indicate that the value of a Number, is "Not a Number". (Read Only)
 * @type {Number}
 */
var NaN;
/**
 * @description A special value used to indicate a variable does not have a value. (Read Only)
 * @type {Object}
 */
var null;
/**
 * @description A special value corresponding to the primitive value, true. (Read Only)
 * @type {Boolean}
 */
var true;
/**
 * @description A special value used to indicate a variable does not have a defined value (e.g., has not yet been assigned). (Read Only)
 * @type {undefined}
 */
var undefined;
/**
 * @description A global variable giving all DAZ Scripts access to the application object.
 * @type {DzApp}
 */
var App;
/**
 * @description A global variable giving all DAZ Scripts access to public static members on QColorDialog.
 * @type {DzColorDialog}
 */
var ColorDialog;
/**
 * @description A global variable giving all DAZ Scripts access to the file dialog object.
 * @type {DzFileDialog}
 */
var FileDialog;
/**
 * @description A global variable giving all DAZ Scripts access to the geometry object.
 * @type {DzGeometryUtil}
 */
var Geometry;
/**
 * @description A global variable giving all DAZ Scripts access to the interface object.
 * @type {DzMainWindow}
 */
var MainWindow;
/**
 * @description A global variable giving all DAZ Scripts access to public static members on QMessageBox.
 * @type {DzMessageBox}
 */
var MessageBox;
/**
 * @description A global variable giving all DAZ Scripts access to the OpenGL object.
 * @type {DzOpenGL}
 */
var OpenGL;
/**
 * @description A global variable giving all DAZ Scripts access to the scene object.
 * @type {DzScene}
 */
var Scene;
/**
 * @description A global variable giving all DAZ Scripts access to the system object.
 * @type {DzSystem}
 */
var System;
/**
 * @description A global variable giving all DAZ Scripts access to the undo stack object.
 * @type {DzUndoStack}
 */
var UndoStack;
/**
 * @returns String A new version of encodedURI in which each escape sequence and UTF-8 encoding of the kind that might be introduced by encodeURI() is replaced with the character that it represents. Escape sequences that could not have been introduced by encodeURI() are not replaced.
 * @param {String} encodedURI - The encoded URI to decode.
 */
function decodeURI(encodedURI) {};
/**
 * @returns String A new version of encodedURIComponent in which each escape sequence and UTF-8 encoding of the kind that might be introduced by encodeURIComponent() is replaced with the character that it represents.
 */
function decodeURIComponent(encodedURIComponent) {};
/**
 * @returns String A new version of uri in which each instance of certain characters is replaced by one, two, three, or four escape sequences representing the UTF-8 encoding of the character.
 * @param {String} uri - The URI to encode.
 */
function encodeURI(uri) {};
/**
 * @returns String A new version of uri in which each instance of certain characters is replaced by one, two, three, or four escape sequences representing the UTF-8 encoding of the character.
 */
function encodeURIComponent(uriComponent) {};
/**
 * @description Parses and executes str, and returns the result.
 * @returns Object
 * @param {String} str - The statement to evaluate.
 */
function eval(str) {};
/**
 * @returns Boolean false if expression coerces to NaN or Infinity, otherwise true.
 * @param {Object} expression - The script expression to evaluate.
 */
function isFinite(expression) {};
/**
 * @returns Boolean true if expression is NaN (Not a Number), otherwise false.
 * @param {Object} expression - The script expression to evaluate.
 */
function isNaN(expression) {};
/**
 * @description Parses str and returns the floating point number that it represents or NaN if the parse fails. Leading and trailing whitespace is ignored, and if the string contains a number followed by non-numeric characters, the value of the number is returned and the remainder of the string is ignored.
 * @returns Number A floating point number or NaN.
 * @param {String} str - The string to convert to a floating point number.
 */
function parseFloat(str) {};
/**
 * @description Parses the string and returns the integer that it represents or NaN if the parse fails. Leading and trailing whitespace is ignored, and if the string contains a number followed by non-numeric characters, the value of the number is returned and the remainder of the string is ignored.
 * @returns Number An integer or NaN.
 * @param {String} str - The string to convert to an integer.
 * @param {Number} radix - The (optional) base of the number; [2,36]; if not specified, base is determined as follows:
 * 
 *  base 16 if the number begins with "0x" or "0X"
 * 
 *  base 8 if the number begins with "0"
 * 
 *  base 10 otherwise
 */
function parseInt(str, radix) {};
/**
 * @description While the garbage collector is automatically run for script objects that are no longer referenced, there is no guarantee on when it will take place. This function can be used to explicitly request garbage collection.
 */
function gc() {};
/**
 * @description Prints the expression to the console (if executed from within the Script Editor) or to the log.
 * @param {String} expression - The expression to print - the argument will be converted to a string (via toString) if necessary.
 */
function print(expression) {};
/**
 * @returns String A translated version of sourceText if an appropriate translated string is available, otherwise returns sourceText itself.
 */
function qsTr(sourceText) {};
/**
 * @returns String The translation text for sourceText, by querying the installed translation files. Translation files are searched from the most recently installed file back to the first installed file.
 */
function qsTranslate(sourceText) {};
/**
 * @returns String A translated string identified by id. If no matching string is found, id itself is returned.
 */
function qsTrId(id) {};
/**
 * @description Scripts can call this function to accept and finish a hold on the undo stack started by calling beginUndo().
 * @param {String} caption - The brief description for the action that will be displayed to the user.
 */
function acceptUndo(caption) {};
/**
 * @returns Boolean true if one or more background progress operations are currently being tracked.
 */
function backgroundProgressIsActive() {};
/**
 * @returns Boolean true if the user has cancelled the current operation by pressing the 'Cancel' button on the background progress.
 */
function backgroundProgressIsCancelled() {};
/**
 * @description Captures the current state of node selection in the scene, on a node selection stack.
 * @since 4.9.4.109
 */
function beginNodeSelectionHold() {};
/**
 * @description Starts a hold on the undo stack. It is recommended that scripts use this function rather than accessing DzUndoStack directly, since if the script crashes or a logic error results in leaving the undo stack open, calling this function insures that the undo stack will be closed at the end of script execution.
 */
function beginUndo() {};
/**
 * @description Scripts can call this function to cancel a hold on the undo stack started by calling beginUndo().
 */
function cancelUndo() {};
/**
 * @description Clears the application-standard busy cursor and returns the mouse cursor to the previous cursor. Match every call to setBusyCursor() with a call to this function.
 */
function clearBusyCursor() {};
/**
 * @description Clears all selection holds without restoring the selection.
 * @since 4.9.4.109
 */
function clearNodeSelectionHolds() {};
/**
 * @description Scripts can call this function to clear the undo stack.
 */
function clearUndoStack() {};
/**
 * @description Connects a signal from one object to a function (slot) on another object.
 * @param {String} sender - The object emitting the signal.
 * @param {String} signal - The signal being emitted.
 * @param {Object} receiver - The object that will receive the signal.
 * @param {String} function - The name of the method on receiver to execute when sender emits signal. If receiver is a script defined Function, the 'this' object within the context of the function will be the Global object.
 */
function connect(sender, signal, receiver, func) {};
/**
 * @description Connects a signal from an object to a function.
 * @since 4.15.0.18
 * @param {String} sender - The object emitting the signal.
 * @param {String} signal - The signal being emitted.
 * @param {Function} thisObject - The object to bind to 'this' in the scope of functionRef if functionRef is a script-defined Function. If functionRef is a function on a QObject, this argument is not used.
 * @param {Function} functionRef - The function to execute when sender emits signal.
 */
function connect(sender, signal, thisObject, functionRef) {};
/**
 * @description Connects a signal from an object to a function.
 * @param {String} sender - The object emitting the signal.
 * @param {String} signal - The signal being emitted.
 * @param {Function} functionRef - The function to execute when sender emits signal.
 */
function connect(sender, signal, functionRef) {};
/**
 * @description Prints expression to the output console (stderr), followed by a newline.
 */
function debug(expression) {};
/**
 * @description Disconnects a signal from one object to a function (slot) on another object.
 * @param {String} sender - The object emitting the signal.
 * @param {String} signal - The signal being emitted.
 * @param {Object} receiver - The object that receives the signal.
 * @param {String} function - The method on receiver to disconnect from signal.
 */
function disconnect(sender, signal, receiver, func) {};
/**
 * @description Disconnects a signal from an object to a function.
 * @since 4.15.0.18
 * @param {String} sender - The object emitting the signal.
 * @param {String} signal - The signal being emitted.
 * @param {Function} thisObject - The object bound to 'this' in the scope of functionRef if functionRef is a script-defined Function. If functionRef is a function on a QObject, this argument is not used.
 * @param {Function} functionRef - The function to disconnect from signal.
 */
function disconnect(sender, signal, thisObject, functionRef) {};
/**
 * @description Disconnects a signal from an object to a function.
 * @param {String} sender - The object emitting the signal.
 * @param {String} signal - The signal being emitted.
 * @param {Function} functionRef - The function to disconnect from signal.
 */
function disconnect(sender, signal, functionRef) {};
/**
 * @description Removes the current hold on the state of node selection in the scene without restoring the selection.
 * @since 4.9.4.109
 */
function dropNodeSelectionHold() {};
/**
 * @description Scripts can call this function to drop a hold on the undo stack started by calling beginUndo().
 */
function dropUndo() {};
/**
 * @description Ends the current background progress tracking operation, and closes the background progress if no other background progress tracking operations are active.
 */
function finishBackgroundProgress() {};
/**
 * @description Ends the current progress tracking operation, and closes the progress dialog if no other progress tracking operations are active.
 */
function finishProgress() {};
/**
 * @returns Array The list of arguments passed to the script (if any) upon execution, otherwise an empty Array.
 */
function getArguments() {};
/**
 * @description This function converts an error code into a string message.
 * @returns String A user-readable message that describes the error represented by the error code.
 * @param {DzError} errCode - The Daz Studio error code.
 */
function getErrorMessage(errCode) {};
/**
 * @description This function allows a script to get the object-parent of a QObject.
 * @returns QObject The QObject parent of obj.
 * @param {QObject} obj - The QObject to get the parent of.
 */
function getObjectParent(obj) {};
/**
 * @returns DzAuthor The author of the current script (if any).
 */
function getScriptAuthor() {};
/**
 * @returns String The file name of the current script (if any).
 */
function getScriptFileName() {};
/**
 * @returns String The file type that this script was saved out as.
 */
function getScriptType() {};
/**
 * @returns String The version of the current script (if any).
 */
function getScriptVersionString() {};
/**
 * @description Includes the contents of scriptPath in the same context as the calling script. This function should only be called within the global scope of the script; it should not be called within a nested scope and it should not be called inline. As a safeguard against circular references, the script engine keeps an internal list of unique paths for included scripts; per script context, per execution. Each time the function is called, scriptPath is checked against the list to ensure that the path has only been included once within the context of the script.
 * @param {String} scriptPath - The path of the script to include. The path is assumed to be relative to the ./scripts directory. Absolute paths are also supported.
 */
function include(scriptPath) {};
/**
 * @description This function allows a script to test if two QObject derived variables point to the same instance.
 * @returns Boolean true if the pointers point to the same object, otherwise false.
 * @param {QObject} ptr1 - The first object.
 * @param {QObject} ptr2 - The second object.
 */
function pointersAreEqual(ptr1, ptr2) {};
/**
 * @description Pauses execution of the script and allows the GUI thread time to process events.
 */
function processEvents() {};
/**
 * @returns Boolean true if one or more progress operations are currently being tracked, otherwise false.
 */
function progressIsActive() {};
/**
 * @returns Boolean true if the user has cancelled the current operation by pressing the 'Cancel' button on the progress dialog.
 */
function progressIsCancelled() {};
/**
 * @description Restores node selection in the scene to the state it was in when the last call to beginNodeSelectionHold() was made.
 * @since 4.9.4.109
 */
function restoreNodeSelectionHold() {};
/**
 * @description Sets the application-standard busy cursor. Match every call to this function with a call to clearBusyCursor() to restore the previous cursor.
 */
function setBusyCursor() {};
/**
 * @description Pauses the script for the specified number of milliseconds without blocking the application event loop.
 * @since 4.8.0.45
 * @param {Number} milliseconds - The duration, in milliseconds, to sleep.
 */
function sleep(milliseconds) {};
/**
 * @description Displays a background progress bar to the user if one is not already being displayed and starts a progress tracking operation.
 * @param {String} info - The string to display in the status bar as the current description of the operation.
 * @param {Number} totalSteps - The number of progress steps for the operation to be complete.
 * @param {Boolean} isCancellable - If true, the user is given the option to cancel the operation.
 */
function startBackgroundProgress(info, totalSteps = 0, isCancellable = false) {};
/**
 * @description Displays a progress dialog to the user if one is not already being displayed and starts a progress tracking operation.
 * @param {String} info - The string to display in the progress dialog as the current description of the operation.
 * @param {Number} totalSteps - The number of progress steps for the operation to be complete.
 * @param {Boolean} isCancellable - If true, the user is given the option to cancel the operation.
 * @param {Boolean} showTimeElapsed - If true, the amount of time since the progress operation was started will be displayed in the dialog.
 */
function startProgress(info, totalSteps = 0, isCancellable = false, showTimeElapsed = false) {};
/**
 * @description Steps the current background progress forward the given number of steps.
 * @param {Number} numSteps - The number of steps to move the progress indicator forward.
 */
function stepBackgroundProgress(numSteps = 1) {};
/**
 * @description Steps the current progress dialog forward the given number of steps.
 * @param {Number} numSteps - The number of steps to move the progress indicator forward.
 */
function stepProgress(numSteps = 1) {};
/**
 * @description Sets the current background progress to the given number of steps.
 * @param {Number} position - The number of steps to set as the current position for the progress indicator.
 */
function updateBackgroundProgress(position) {};
/**
 * @description Sets the current progress dialog to the given number of steps.
 * @param {Number} position - The number of steps to set as the current position for the progress indicator.
 */
function updateProgress(position) {};
/**
 * @description Deprecated
 * @returns String
 */
function unescape(text) {};
/**
 * @description Deprecated
 * @returns String
 */
function escape(text) {};
/**
 * @description Deprecated
 * @returns Boolean
 */
function shiftPressed() {};
/**
 * @description Deprecated
 * @returns Boolean
 */
function ctrlPressed() {};
/**
 * @description Deprecated
 * @returns QDesktopWidget (deprecated)
 */
function getDesktop() {};

/**
 * TODO:
 * Add detailed description.
 */
class DzGridLayout extends DzLayout {
	/**
	 * @description Creates a grid layout that manages the children widgets of the given parent widget
	 */
	constructor(parent) {};
	/**
	 * @description Creates a grid layout as a sub-layout of the given layout
	 */
	constructor(parent) {};
	/**
	 * @description Adds the given layout to the items managed by this layout
	 * @param {DzLayout} layout - The layout to add to this layout
	 * @param {Number} row - The row to insert the layout into.
	 * @param {Number} col - The column to insert the layout into.
	 * @param {Number} rowspan - The number of rows the layout should span (1 if not specified)
	 * @param {Number} colspan - The number of columns the layout should span (1 if not specified)
	 */
	addLayout(layout, row, col, rowSpan = 1, colSpan = 1) {};
	/**
	 * @description Deprecated
	 */
	addMultiCellLayout(layout, fromRow, toRow, fromCol, toCol) {};
	/**
	 * @description Deprecated
	 */
	addMultiCellWidget(widget, fromRow, toRow, fromCol, toCol) {};
	/**
	 * @description Adds the given widget to the items managed by this layout
	 * @param {DzWidget} widget - The widget to add to the layout
	 * @param {Number} row - The row to insert the widget into.
	 * @param {Number} col - The column to insert the widget into.
	 * @param {Number} rowspan - The number of rows the widget should span (1 if not specified)
	 * @param {Number} colspan - The number of columns the widget should span (1 if not specified)
	 */
	addWidget(widget, row, col, rowSpan = 1, colSpan = 1) {};
	/**
	 * @returns Number The number of columns in this grid
	 */
	colCount() {};
	/**
	 * @returns Number The the minimum width for the given column
	 */
	colSpacing(col) {};
	/**
	 * @returns Number The relative amount of stretch for the given column
	 */
	colStretch(col) {};
	/**
	 * @returns Number The number of rows in this grid
	 */
	rowCount() {};
	/**
	 * @returns Number The the minimum height for the given row
	 */
	rowSpacing(row) {};
	/**
	 * @returns Number The relative amount of stretch for the given row
	 */
	rowStretch(row) {};
	/**
	 * @description Sets the minimum width for the given column
	 */
	setColSpacing(col, minSize) {};
	/**
	 * @description Sets the relative amount of stretch for the given column
	 */
	setColStretch(col, stretch) {};
	/**
	 * @description Sets the minimum height for the given row
	 */
	setRowSpacing(row, minSize) {};
	/**
	 * @description Sets the relative amount of stretch for the given row
	 */
	setRowStretch(row, stretch) {};

}
/**
 * A DzGroupBox provides a group box frame, with an optional `title` and an ability to be `checked` like a DzCheckBox.
 */
class DzGroupBox extends DzWidget {
	/**
	 * @description Creates a group box as a child of the given parent widget.
	 * @param {DzWidget} parent - The widget parent for the group box.
	 */
	constructor(parent) {};
	/**
	 * @description Holds the alignment of the group box title.
	 * @type {DzWidget}
	 */
	alignment;
	/**
	 * @description Holds whether or not the group box is checkable.
	 * @type {Boolean}
	 */
	checkable;
	/**
	 * @description Holds whether or not the group box is checked.
	 * @type {Boolean}
	 */
	checked;
	/**
	 * @description Holds the number of columns in the group box.
	 * @type {Number}
	 */
	columns;
	/**
	 * @description Holds whether or not the group box is painted flat (without a frame).
	 * @type {Boolean}
	 */
	flat;
	/**
	 * @description Holds the margin between items inside the group box and the frame.
	 * @type {Number}
	 */
	insideMargin;
	/**
	 * @description Holds the spacing between items inside the group box.
	 * @type {Number}
	 */
	insideSpacing;
	/**
	 * @description Holds the orientation of the group box.
	 * @type {DzWidget}
	 */
	orientation;
	/**
	 * @description Holds the title of the group box.
	 * @type {String}
	 */
	title;
	/**
	 * @description Adds an empty cell at the next free position. If space is greater than 0, the empty cell uses space as its fixed width (if Orientation is Horizontal) or height (if Orientation is Vertical).
	 */
	addSpace(space) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the DzGroupBox's check box is clicked. Passes the new state of the check box.
	 * @signature `"clicked(bool)"`
	 * @event
	 */
	clicked(checked = false) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the DzGroupBox's check box is toggled. Passes the new state of the check box.
	 * @signature `"toggled(bool)"`
	 * @event
	 */
	toggled(onOff) {};

}
/**
 * This specialized DzNode is intended for grouping multiple nodes in the scene under one parent node. This allows easy transformation, visibility and/or selectability of the whole group.
 */
class DzGroupNode extends DzNode {
	/**
	 * @description TODO:
	 * Add description.
	 */
	constructor() {};

}
/**
 * Guide Pages are intended as a dynamic means of providing users with instructions on how to use a portion of the User Interface (UI), and/or provide widgets that simplify the process of getting started where an otherwise non-descript area of the UI would be displayed.
 * These pages are typically found within a DzPane via instances of filecontenttab_dz or productcontenttab_dz, or within an embedded instance of productassetsview_dz or associatedassetsview_dz.
 */
class DzGuidePage extends QWidget {
	/**
	 * @returns String The default path to the script to execute in order to create the UI in this page, sans extension.
	 * @since 4.10.0.41
	 */
	defaultScriptPath() {};
	/**
	 * @returns Boolean true if the page is the current widget in the stack, otherwise false.
	 */
	isCurrentPage() {};
	/**
	 * @description Sets whether the guide page is the current widget in the stack.
	 * @param {Boolean} onOff - If true, the guide page is set as the current widget, otherwise the other widget in the stack is raised.
	 */
	makeCurrentPage(onOff) {};
	/**
	 * @description Loads the contents of the page by calling the current script. A special script context is provided to this script which exposes a global "getWidget()" function that returns a DzWidget wrapper. This DzWidget can be used by the script to create, populate, and connect the UI components inside the widget.
	 * @returns DzError DZ_NO_ERROR if no error is encountered, otherwise an appropriate error code.
	 * @since 4.10.0.41
	 */
	reload() {};
	/**
	 * @returns String The full path to the script to execute in order to create the UI in this page.
	 * @since 4.10.0.41
	 */
	scriptFilename() {};
	/**
	 * @description Loads the contents of the page by calling the script at scriptPath. A special script context is provided to this script which exposes a global "getWidget()" function that returns a DzWidget wrapper. This DzWidget can be used by the script to create, populate, and connect the UI components inside the widget.
	 * @returns DzError DZ_NO_ERROR if no error is encountered, otherwise an appropriate error code.
	 * @param {String} scriptPath - The path to the script to execute in order to create the UI in this page. The path can be absolute, relative to the resources folder in the application data path, or relative to the application resources path. If the path does not include an extension, an attempt is made to locate a script with one of the possible extensions (in dsa, dsb, dse, ds order) at the specified path until one is found.
	 */
	setUiScript(scriptPath) {};

}
/**
 * This class provides DAZ Script functionality for reading and writing *.gz ('gzipped') files. A high-level interface for zipping/unzipping files is provided with the functions zip() and unzip(). Also, a low-level interface is provided, allowing scripts to read and write compressed files directly.
 */
class DzGZFile extends DzFileInfo {
	/**
	 * @description Creates a gzip file with the given file name.
	 * @param {String} file - The path of the *.gz file.
	 */
	constructor(file) {};
	/**
	 * @description ENUM: Open the file for reading only.
	 */
	ReadOnly;
	/**
	 * @description ENUM: Open the file for writing only.
	 */
	WriteOnly;
	/**
	 * @description ENUM: Open the file for reading and writing.
	 */
	ReadWrite;
	/**
	 * @description ENUM: The file is opened in append mode, so that all data is written to the end of the file.
	 */
	Append;
	/**
	 * @description ENUM: If possible, the file is truncated before it is opened. All earlier contents of the file are lost.
	 */
	Truncate;
	/**
	 * @description ENUM: When reading, the end-of-line terminators are translated to '
	 */
	Text;
	/**
	 * @description ENUM: Alias for Text.
	 */
	Translate;
	/**
	 * @description Closes the file.
	 */
	close() {};
	/**
	 * @returns Boolean true if the current file position is at the end of the file, otherwise false.
	 */
	eof() {};
	/**
	 * @description Open the file with the given mode.
	 * @returns Boolean true if the file was opened successfully, otherwise false.
	 * @param {AccessMode} accessMode - The access mode to open with.
	 */
	open(accessMode) {};
	/**
	 * @description Reads the entire file.
	 * @returns String The uncompressed file contents as a string.
	 */
	read() {};
	/**
	 * @description Read one uncompressed character from the file buffer.
	 * @returns Number The next uncompressed character read from the file.
	 */
	readByte() {};
	/**
	 * @description Read an uncompressed line of text from the file.
	 * @returns String The next uncompressed file line as a string.
	 */
	readLine() {};
	/**
	 * @description Uncompresses the entire file and splits it into lines of text.
	 * @returns Array A list of uncompressed text lines from the file.
	 */
	readLines() {};
	/**
	 * @description Unzips this file into the given filename.
	 * @returns Boolean
	 * @param {String} filename - The name of the file to write to.
	 */
	unzip(filename) {};
	/**
	 * @description Write a string to the file compression buffer.
	 * @param {String} data - The string to write to the file.
	 * @param {Number} length - The maximum number of characters to write to the file. If this is less than 1 (default), the whole string is written.
	 */
	write(data, length = -1) {};
	/**
	 * @description Write a single byte (character) to the file compression buffer.
	 * @param {Number} byte - The character to write to the file.
	 */
	writeByte(byte) {};
	/**
	 * @description Write a line of text to the file compression buffer.
	 * @param {String} data - The string to write to the file - a new line character will be written immediately following the string contents.
	 */
	writeLine(data) {};
	/**
	 * @description Replaces this file's contents with the gzipped contents of the given file. If this file does not exist, it will be created.
	 * @returns Boolean true if the file was successfully zipped, otherwise false.
	 * @param {String} filename - The name of the file to replace this file's contents with.
	 */
	zip(filename) {};

}
/**
 * Provided as a convenience for creating a DzBoxLayout where the direction is automatically initially set to DzBoxLayout.LeftToRight.
 */
class DzHBoxLayout extends DzBoxLayout {
	/**
	 * @description Creates a horizontal box layout that manages the children widgets of the given parent widget
	 */
	constructor(parent) {};
	/**
	 * @description Creates a horizontal box layout as a sub-layout of the given layout
	 */
	constructor(parent) {};

}
/**
 * Provides a DzButtonGroup with a horizontal layout.
 * Deprecated
 * Exists only to keep old code working. Do not use in new code. Use DzButtonGroup for state management and DzGroupBox in conjunction with DzHBoxLayout for visual representation instead.
 */
class DzHButtonGroup extends DzButtonGroup {
	/**
	 * @description Creates a button group as a child of the given parent widget
	 */
	constructor(parent) {};

}
/**
 * See Also:
 */
class DzHeader extends DzWidget {
	/**
	 * @description Holds whether or not the header sections respond to mouse clicks.
	 * @type {Boolean}
	 */
	clickEnabled;
	/**
	 * @description Holds whether or not the header sections can be moved.
	 * @type {Boolean}
	 */
	movingEnabled;
	/**
	 * @description Holds whether or not the header sections can be resized.
	 * @type {Boolean}
	 */
	resizeEnabled;
	/**
	 * @description Holds whether or not the header sections can be stretched.
	 * @type {Boolean}
	 */
	stretchEnabled;
	/**
	 * @returns true if the header for a given section responds to mouse clicks, otherwise false.
	 * @param {Number} section - The section to check.
	 */
	isClickEnabled(section) {};
	/**
	 * @returns true if resizing for a given section is enabled, otherwise false.
	 * @param {Number} section - The section to check.
	 */
	isResizeEnabled(section) {};
	/**
	 * @returns Boolean true if stretching for a given section is enabled, otherwise false.
	 * @param {Number} section - The section to check.
	 */
	isStretchEnabled(section) {};
	/**
	 * @description Sets whether or not the header for a given section responds to mouse clicks.
	 * @param {Boolean} enable - true to enable, false to disable.
	 * @param {Number} section - The section to enable/disable clicking in.
	 */
	setClickEnabled(enable, section) {};
	/**
	 * @description Sets whether or not resizing for a given section is enabled.
	 * @param {Boolean} enable - true to enable, false to disable.
	 * @param {Number} section - The section to enable/disable resizing of.
	 */
	setResizeEnabled(enable, section) {};
	/**
	 * @description Sets whether or not stretch for a given section is enabled.
	 * @param {Boolean} enable - true to enable, false to disable.
	 * @param {Number} section - The section to enable/disable stretching of.
	 */
	setStretchEnabled(enable, section) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when an item in the header is clicked
	 * @signature `"clicked(int)"`
	 * @event
	 */
	clicked(section) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when an item in the header changes index
	 * @signature `"indexChange(int,int,int)"`
	 * @event
	 */
	indexChange(section, fromIndex, toIndex) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when an item in the header is pressed
	 * @signature `"pressed(int)"`
	 * @event
	 */
	pressed(section) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when an item in the header is released
	 * @signature `"released(int)"`
	 * @event
	 */
	released(section) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when an item in the header is double clicked
	 * @signature `"sectionHandleDoubleClicked(int)"`
	 * @event
	 */
	sectionHandleDoubleClicked(section) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when an item in the header changes size
	 * @signature `"sizeChange(int,int,int)"`
	 * @event
	 */
	sizeChange(section, oldSize, newSize) {};

}
/**
 * This class manages help documentation for the application.
 * There is only one instance of this manager in an application. This instance is created and owned by DzApp. Request the instance via DzApp.getHelpMgr().
 * See Also:
 */
class DzHelpMgr extends QObject {
	/**
	 * @description Opens the help browser at the given identifier.
	 * @param {String} identifier - The identifier to browse to.
	 */
	browseToIdentifier(identifier) {};
	/**
	 * @description Opens the help browser at the given keyword.
	 * @param {String} keyword - The keyword to browse to.
	 */
	browseToKeyword(keyword) {};
	/**
	 * @description Opens the spacified page in the help browser.
	 * @param {String} page - The path of the page to browse to; can be absolute or relative to DzApp.getDocumentationPath().
	 */
	browseToPage(page) {};
	/**
	 * @description Opens the help browser at the given url.
	 * @param {String} url - The URL of the page to browse to.
	 */
	browseToUrl(url) {};
	/**
	 * @returns Array The list of attributes for the help filter help keyword (if any), otherwise an empty list.
	 * @param {String} name - The name of the help filter to get the attributes of.
	 */
	findFilterAttributes(name) {};
	/**
	 * @returns String The URL associated with the help identifier (if any), otherwise an empty URL.
	 * @param {String} id - The help identifier to find the associated URL for.
	 */
	findIdentifierUrl(id) {};
	/**
	 * @returns String The URL associated with the help keyword (if any), otherwise an empty URL.
	 * @param {String} keyword - The keyword to find the associated URL for.
	 */
	findKeywordUrl(keyword) {};
	/**
	 * @returns String The description for the help item named label (if any), otherwise an empty string.
	 * @param {String} label - The label of the help item.
	 */
	getDescription(label) {};
	/**
	 * @returns Array The list of attributes for the help filter at the given index (if valid), otherwise an empty list.
	 * @param {Number} which - The index of the help filter attributes to return.
	 */
	getFilterAttributes(which) {};
	/**
	 * @returns String The name of the help filter at the given index (if valid), otherwise an empty string.
	 * @param {Number} which - The index of the help filter to return.
	 */
	getFilterName(which) {};
	/**
	 * @returns String The group for the help item named label (if any), otherwise an empty string.
	 * @param {String} label - The label of the help item.
	 */
	getGroup(label) {};
	/**
	 * @returns Array A list of the groups for the help items (if any), otherwise an empty list.
	 * @since 4.11.0.151
	 */
	getGroups() {};
	/**
	 * @returns Array A list of labels for all help items (if any), otherwise an empty list.
	 */
	getHelpItemLabels() {};
	/**
	 * @returns String The whats this help string text for the help item named label (if any), otherwise an empty string.
	 * @param {String} label - The label of the help item.
	 */
	getHelpString(label) {};
	/**
	 * @returns String The help string replacement text (if any), otherwise an empty string.
	 * @since 4.11.0.359
	 * @param {String} group - The group name of the replacement text; must match the group name of the help item where the replacement will be used.
	 * @param {String} key - The key for the replacement text; must match the regular expression: [:/-_.a-zA-Z0-9]+.
	 */
	getHelpStringReplacement(group, key) {};
	/**
	 * @returns Array A list of the help string replacement groups (if any), otherwise an empty list.
	 * @since 4.11.0.359
	 */
	getHelpStringReplacementGroups() {};
	/**
	 * @returns Array A list of help string replacement keys in the specified group (if any), otherwise an empty list.
	 * @since 4.11.0.359
	 * @param {String} group - The group name of the replacement text; expected to be the group name of the help item where the replacement will be used.
	 */
	getHelpStringReplacementKeys(group) {};
	/**
	 * @returns String The help identifier at the given index (if valid), otherwise an empty string.
	 * @param {Number} which - The index of the help identifier to return.
	 */
	getIdentifier(which) {};
	/**
	 * @returns String The URL associated with the help identifier at the given index (if valid), otherwise an empty URL.
	 * @param {Number} which - The index of the help identifier URL to return.
	 */
	getIdentifierUrl(which) {};
	/**
	 * @returns String The help keyword at the given index (if valid), otherwise an empty string.
	 * @param {Number} which - The index of the help keyword to return.
	 */
	getKeyword(which) {};
	/**
	 * @returns String The URL associated with the help keyword at the given index (if any), otherwise an empty URL.
	 * @param {Number} which - The index of the help keyword URL to return.
	 */
	getKeywordUrl(which) {};
	/**
	 * @returns Number The number of help filters.
	 */
	getNumFilters() {};
	/**
	 * @returns Number The number of help identifiers.
	 */
	getNumIdentifiers() {};
	/**
	 * @returns Number The number of help keywords.
	 */
	getNumKeywords() {};
	/**
	 * @returns String The status tip text for the help item named label (if any), otherwise an empty string.
	 * @param {String} label - The label of the help item.
	 */
	getStatusTip(label) {};
	/**
	 * @returns String The tool tip text for the help item named label (if any), otherwise an empty string.
	 * @param {String} label - The label of the help item.
	 */
	getToolTip(label) {};
	/**
	 * @returns Boolean true if a help item with the given label exists, otherwise false.
	 * @param {String} label - The label of the help item.
	 */
	hasHelpItem(label) {};
	/**
	 * @returns Boolean true if a help item with the given label is used, otherwise false.
	 * @param {String} label - The label of the help item.
	 */
	isHelpItemUsed(label) {};
	/**
	 * @description Removes the help item with the given label.
	 * @returns Boolean true if label was removed, otherwise false.
	 * @param {String} label - The label of the help item to remove.
	 */
	removeHelpItem(label) {};
	/**
	 * @description Changes the name for the help item with the given label.
	 * @returns Boolean true if oldLabel was renamed, otherwise false.
	 * @param {String} oldLabel - The label of the help item to rename.
	 * @param {String} newLabel - The new label of the help item.
	 */
	renameHelpItem(oldLabel, newLabel) {};
	/**
	 * @description Save the inline help to the specified path.
	 * @returns DzError DZ_NO_ERROR on success, otherwise an appropriate error code.
	 * @since 4.11.0.151
	 * @param path - The path to save to.
	 * @param {Array} groups - The list of groups of items to include; an empty list (default) does not filter which groups to allow.
	 * @param {Array} labels - The list of labels of items to include; an empty list (default) does not filter which labels to allow.
	 * @attention If path ends in a filename (has a file extension), a single file is saved - see saveHelpItemsFile(). If path has no file extension, it is treated as a directory path and a file named after each group in groups is saved. If any group is an empty string, for the purposes of generating a filename, it will be replaced with a single underscore ('_') character.
	 */
	saveHelpItems(filename, groups = [], labels = []) {};
	/**
	 * @description Sets the description for the help item with the given label. If a help item does not exist, one will be created.
	 * @param {String} label - The label of the help item to set the values of.
	 * @param {String} description - The string to set the description of the help item to.
	 */
	setDescription(label, description) {};
	/**
	 * @description Sets the group for the help item with the given label. If a help item does not exist, one will be created.
	 * @param {String} label - The label of the help item to set the values of.
	 * @param {String} group - The string to set the group of the help item to.
	 */
	setGroup(label, group) {};
	/**
	 * @description Sets the values for the help item with the given label. If a help item does not exist, one will be created.
	 * @param {String} label - The label of the help item to set the values of.
	 * @param {String} description - The string to set the description of the help item to.
	 * @param {String} toolTip - The string to set the tool tip of the help item to.
	 * @param {String} statusTip - The string to set the status tip of the help item to.
	 * @param {String} helpString - The string to set the whats this help string of the help item to.
	 */
	setHelpItem(label, group, description, toolTip, statusTip, helpString) {};
	/**
	 * @description Sets the whats this help string for the help item with the given label. If a help item does not exist, one will be created.
	 * @param {String} label - The label of the help item to set the values of.
	 * @param {String} helpString - The string to set the whats this help string of the help item to.
	 */
	setHelpString(label, helpString) {};
	/**
	 * @description Sets a key / value pair for a help string replacement in the specified group.
	 * @since 4.11.0.359
	 * @param {String} group - The group name of the replacement text; must match the group name of the help item where the replacement will be used.
	 * @param {String} key - The key for the replacement text; must match the regular expression: [:/-_.a-zA-Z0-9]+.
	 * @param {String} value - The replacement text.
	 * @attention When the help string (i.e., toolTip, statusTip, whatsThis) for a widget/action is registered (i.e., during startup) or updated, a regular expression is used to capture a specific pattern within the help string that is used to perform a lookup into a table of replacement strings. If an entry for the captured portion of the pattern is found in the replacement string table, in the same group as the help item for that widget/action, the pattern in the help string is replaced by the found string before being assigned to the widget/action. The pattern expected is loosely based on the "Mustache" syntax - that is, two opening curly braces (i.e., "{{"), followed by one or more specific characters, followed by two closing curly braces (i.e., "}}").
	 */
	setHelpStringReplacement(group, key, value) {};
	/**
	 * @description Sets the status tip for the help item with the given label. If a help item does not exist, one will be created.
	 * @param {String} label - The label of the help item to set the values of.
	 * @param {String} statusTip - The string to set the status tip of the help item to.
	 */
	setStatusTip(label, statusTip) {};
	/**
	 * @description Sets the tool tip for the help item with the given label. If a help item does not exist, one will be created.
	 * @param {String} label - The label of the help item to set the values of.
	 * @param {String} toolTip - The string to set the tool tip of the help item to.
	 */
	setToolTip(label, toolTip) {};
	/**
	 * @description Called to update the inline help for a widget.
	 * @param {QWidget} widget - The widget to update help for.
	 */
	updateHelp(widget) {};
	/**
	 * @description Called to update the inline help for an action.
	 * @param {DzAction} action - The action to update help for.
	 */
	updateHelp(action) {};

}
/**
 * A DzHGroupBox provides a DzGroupBox with a horizontal layout.
 */
class DzHGroupBox extends DzGroupBox {
	/**
	 * @description Creates a group box as a child of the given parent widget.
	 * @param {DzWidget} parent - The widget parent for the group box.
	 */
	constructor(parent) {};

}
/**
 * An asset save filter for saving a Hierarchical Material(s) Preset in the DSON format.
 * See Also:
 */
class DzHierarchicalMaterialAssetFilter extends DzAssetFileOutFilter {
	/**
	 * @description TODO:
	 * Add description.
	 */
	constructor() {};

}
/**
 * An asset save filter for saving a Hierarchical Pose Preset in the DSON format.
 * See Also:
 */
class DzHierarchicalPoseAssetFilter extends DzAssetFileOutFilter {
	/**
	 * @description TODO:
	 * Add description.
	 */
	constructor() {};

}
/**
 * Provides a simple implementation of the HTTP protocol.
 * See Also:
 */
class DzHttpHelper extends QObject {
	/**
	 * @description Constructor. Creates a new instance.
	 */
	constructor() {};
	/**
	 * @description Aborts the current request and deletes all scheduled requests.
	 */
	abort() {};
	/**
	 * @description Sends an asynchronous request to the server.
	 * @param {ByteArray} content - The content to send (if any).
	 * @attention This function returns immediately, it does not wait for a response.
	 */
	doAsynchronousRequest(content = undefined) {};
	/**
	 * @description Sends a synchronous request to the server.
	 * @returns ByteArray A byte array consisting of the response content.
	 * @param {ByteArray} content - The content to send (if any).
	 * @attention This function waits for a response.
	 */
	doSynchronousRequest(content = undefined) {};
	/**
	 * @returns String A human-readable description of the last error that occurred (if any), otherwise an empty string.
	 */
	getError() {};
	/**
	 * @description Sets the HTTP connection mode used for connecting to the server.
	 * @param {String} mode - The connection mode to set - i.e., "http" or "https".
	 */
	setConnectionMode(mode) {};
	/**
	 * @description Sets the value of the special HTTP header content-type field.
	 * @param {String} type - The content-type to set - e.g., "application/json".
	 */
	setContentType(type) {};
	/**
	 * @param {Array} keys - The keys in the http header.
	 * @param {Array} values - The corresponding values for the keys.
	 * @attention Keys and Values must be the same length
	 */
	setHeaderValues(keys, values) {};
	/**
	 * @description Sets the host for requests.
	 * @param {String} host - The host to set - e.g.,"www.daz3d.com".
	 */
	setHost(host) {};
	/**
	 * @description Sets the path portion of the URL.
	 * @param {String} path - The path to set - e.g., "/dazApi/slab/13176".
	 */
	setPath(path) {};
	/**
	 * @description Sets the query string (and optionally fragment) portion of the URL.
	 * @param {String} query - The query string (and optionally fragment) to set.
	 */
	setQueryString(query) {};
	/**
	 * @description Sets the HTTP request method which describes the requests action.
	 * @param {String} method - The request method to set - e.g., "GET", "POST", "HEAD".
	 */
	setRequestMethod(method) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when new bytes are received.
	 * @signature `"received(QByteArray)"`
	 * @event
	 */
	received(bytes) {};

}
/**
 * This is the DAZScript counterpart to the QImage type used in the DAZ Studio SDK.
 * Attention:@attention Attention:
 */
class Image extends QObject {
	/**
	 * @description Default Constructor.
	 */
	constructor() {};
	/**
	 * @since 4.9.4.4
	 * @param {Number} width - The width of the image.
	 * @param {Number} height - The height of the image.
	 * @param {Format} format - The format of the image.
	 */
	constructor(width, height, format) {};
	/**
	 * @description Copy Constructor.
	 * @param {Image} image - The image to copy.
	 */
	constructor(image) {};
	/**
	 * @param {String} filename - The name of the file to load the image's data from.
	 */
	constructor(filename) {};
	/**
	 * @description Holds whether or not the image has an alpha channel.
	 * @type {Boolean}
	 */
	alphaBuffer;
	/**
	 * @description Holds the color depth of the image. (Read-Only)
	 * @type {Number}
	 */
	depth;
	/**
	 * @description Holds the X resolution of the image.
	 * @type {Number}
	 */
	dotsPerMeterX;
	/**
	 * @description Holds the Y resolution of the image.
	 * @type {Number}
	 */
	dotsPerMeterY;
	/**
	 * @description Holds the format of the image.
	 * @type {Format}
	 */
	format;
	/**
	 * @description Holds the height of the image. (Read-Only)
	 * @type {Number}
	 */
	height;
	/**
	 * @description Holds the number of colors in the image.
	 * @type {Number}
	 */
	numColors;
	/**
	 * @description Holds the number of pixels to offset the image when positioning it.
	 * @type {Point}
	 */
	offset;
	/**
	 * @description Holds the number of pixels to offset the image when positioning it.
	 * @type {Size}
	 */
	size;
	/**
	 * @description Holds the width of the image. (Read-Only)
	 * @type {Number}
	 */
	width;
	/**
	 * @description ENUM: The image is invalid.
	 */
	Format_Invalid;
	/**
	 * @description ENUM: The image is stored using 1-bit per pixel. Bytes are packed with the most significant bit (MSB) first.
	 */
	Format_Mono;
	/**
	 * @description ENUM: The image is stored using 1-bit per pixel. Bytes are packed with the less significant bit (LSB) first.
	 */
	Format_MonoLSB;
	/**
	 * @description ENUM: The image is stored using 8-bit indexes into a colormap.
	 */
	Format_Indexed8;
	/**
	 * @description ENUM: The image is stored using a 32-bit RGB format (0xffRRGGBB).
	 */
	Format_RGB32;
	/**
	 * @description ENUM: The image is stored using a 32-bit ARGB format (0xAARRGGBB).
	 */
	Format_ARGB32;
	/**
	 * @description ENUM: The image is stored using a premultiplied 32-bit ARGB format (0xAARRGGBB), i.e. the red, green, and blue channels are multiplied by the alpha component divided by 255. (If RR, GG, or BB has a higher value than the alpha channel, the results are undefined.) Certain operations (such as image composition using alpha blending) are faster using premultiplied ARGB32 than with plain ARGB32.
	 */
	Format_ARGB32_Premultiplied;
	/**
	 * @description ENUM: The image is stored using a 16-bit RGB format (5-6-5).
	 */
	Format_RGB16;
	/**
	 * @description ENUM: The image is stored using a premultiplied 24-bit ARGB format (8-5-6-5).
	 */
	Format_ARGB8565_Premultiplied;
	/**
	 * @description ENUM: The image is stored using a 24-bit RGB format (6-6-6). The unused most significant bits is always zero.
	 */
	Format_RGB666;
	/**
	 * @description ENUM: The image is stored using a premultiplied 24-bit ARGB format (6-6-6-6).
	 */
	Format_ARGB6666_Premultiplied;
	/**
	 * @description ENUM: The image is stored using a 16-bit RGB format (5-5-5). The unused most significant bit is always zero.
	 */
	Format_RGB555;
	/**
	 * @description ENUM: The image is stored using a premultiplied 24-bit ARGB format (8-5-5-5).
	 */
	Format_ARGB8555_Premultiplied;
	/**
	 * @description ENUM: The image is stored using a 24-bit RGB format (8-8-8).
	 */
	Format_RGB888;
	/**
	 * @description ENUM: The image is stored using a 16-bit RGB format (4-4-4). The unused bits are always zero.
	 */
	Format_RGB444;
	/**
	 * @description ENUM: The image is stored using a premultiplied 16-bit ARGB format (4-4-4-4).
	 */
	Format_ARGB4444_Premultiplied;
	/**
	 * @description Gets a color value from the color table for the image only valid for.
	 * @returns Color The RGB value of the color at the given index.
	 * @param {Number} index - The index of the color to look up in the table.
	 */
	color(index) {};
	/**
	 * @returns Image A copy of this image, where the pixels of this image are blended on top of other and the alpha of this image is reduced by the alpha of other.
	 * @since 4.10.0.120
	 * @param {Image} other - The image to composite this image with.
	 * @param {int} x - The offset, in the horizontal direction, from the top left corner of other.
	 * @param {int} y - The offset, in the vertical direction, from the top left corner of other.
	 */
	compositeAtop(other, x = 0, y = 0) {};
	/**
	 * @returns Image An image where the other color is darkened to reflect the color of this image. White in this image leaves the other color unchanged.
	 * @since 4.10.0.120
	 * @param {Image} other - The image to composite this image with.
	 * @param {int} x - The offset, in the horizontal direction, from the top left corner of other.
	 * @param {int} y - The offset, in the vertical direction, from the top left corner of other.
	 */
	compositeColorBurn(other, x = 0, y = 0) {};
	/**
	 * @returns Image An image where the other color is brightened to reflect the color of this image. Black in this image leaves the other color unchanged.
	 * @since 4.10.0.120
	 * @param {Image} other - The image to composite this image with.
	 * @param {int} x - The offset, in the horizontal direction, from the top left corner of other.
	 * @param {int} y - The offset, in the vertical direction, from the top left corner of other.
	 */
	compositeColorDodge(other, x = 0, y = 0) {};
	/**
	 * @returns Image An image where the darker color of this image and other is selected.
	 * @since 4.10.0.120
	 * @param {Image} other - The image to composite this image with.
	 * @param {int} x - The offset, in the horizontal direction, from the top left corner of other.
	 * @param {int} y - The offset, in the vertical direction, from the top left corner of other.
	 */
	compositeDarken(other, x = 0, y = 0) {};
	/**
	 * @returns Image An image where the darker of this image and other is subtracted from the lighter. White in this image inverts the color in other, whereas black leaves the color of other unchanged.
	 * @since 4.10.0.120
	 * @param {Image} other - The image to composite this image with.
	 * @param {int} x - The offset, in the horizontal direction, from the top left corner of other.
	 * @param {int} y - The offset, in the vertical direction, from the top left corner of other.
	 */
	compositeDifference(other, x = 0, y = 0) {};
	/**
	 * @returns Image An image where the darker of this image and other is subtracted from the lighter. White in this image inverts the color in other, whereas black leaves the color of other unchanged.
	 * @since 4.10.0.120
	 * @param {Image} other - The image to composite this image with.
	 * @param {int} x - The offset, in the horizontal direction, from the top left corner of other.
	 * @param {int} y - The offset, in the vertical direction, from the top left corner of other.
	 */
	compositeExclusion(other, x = 0, y = 0) {};
	/**
	 * @returns Image An image where the color of this image and other are multiplied or screened depending on the color of this image. A light color in this image will lighten the other color, whereas a dark color in this image will darken the other color.
	 * @since 4.10.0.120
	 * @param {Image} other - The image to composite this image with.
	 * @param {int} x - The offset, in the horizontal direction, from the top left corner of other.
	 * @param {int} y - The offset, in the vertical direction, from the top left corner of other.
	 */
	compositeHardLight(other, x = 0, y = 0) {};
	/**
	 * @returns Image A copy of this image, where the alpha of this image is reduced by the alpha of other.
	 * @since 4.10.0.120
	 * @param {Image} other - The image to composite this image with.
	 * @param {int} x - The offset, in the horizontal direction, from the top left corner of other.
	 * @param {int} y - The offset, in the vertical direction, from the top left corner of other.
	 */
	compositeIn(other, x = 0, y = 0) {};
	/**
	 * @returns Image An image where the lighter color of this image and other is selected.
	 * @since 4.10.0.120
	 * @param {Image} other - The image to composite this image with.
	 * @param {int} x - The offset, in the horizontal direction, from the top left corner of other.
	 * @param {int} y - The offset, in the vertical direction, from the top left corner of other.
	 */
	compositeLighten(other, x = 0, y = 0) {};
	/**
	 * @returns Image An image where the color of this image and other are multiplied together.
	 * @since 4.10.0.120
	 * @param {Image} other - The image to composite this image with.
	 * @param {int} x - The offset, in the horizontal direction, from the top left corner of other.
	 * @param {int} y - The offset, in the vertical direction, from the top left corner of other.
	 * @attention Multiplying a color with white (1) leaves the color unchanged, while multiplying a color with black (0) produces black.
	 */
	compositeMultiply(other, x = 0, y = 0) {};
	/**
	 * @returns Image A copy of this image, where the alpha of this image is reduced by the inverse of the alpha of other.
	 * @since 4.10.0.120
	 * @param {Image} other - The image to composite this image with.
	 * @param {int} x - The offset, in the horizontal direction, from the top left corner of other.
	 * @param {int} y - The offset, in the vertical direction, from the top left corner of other.
	 */
	compositeOut(other, x = 0, y = 0) {};
	/**
	 * @returns Image A copy of this image, where the alpha of this image is used to blend it on top of other.
	 * @since 4.10.0.120
	 * @param {Image} other - The image to composite this image with.
	 * @param {Number} x - The offset, in the horizontal direction, from the top left corner of other.
	 * @param {Number} y - The offset, in the vertical direction, from the top left corner of other.
	 */
	compositeOver(other, x = 0, y = 0) {};
	/**
	 * @returns Image An image where the color of this image and other are multiplied or screened depending on other color. The other color is mixed with this color to reflect the lightness or darkness of other.
	 * @since 4.10.0.120
	 * @param {Image} other - The image to composite this image with.
	 * @param {int} x - The offset, in the horizontal direction, from the top left corner of other.
	 * @param {int} y - The offset, in the vertical direction, from the top left corner of other.
	 */
	compositeOverlay(other, x = 0, y = 0) {};
	/**
	 * @returns Image An image where the alpha/color of this image and other are added together.
	 * @since 4.10.0.120
	 * @param {Image} other - The image to composite this image with.
	 * @param {int} x - The offset, in the horizontal direction, from the top left corner of other.
	 * @param {int} y - The offset, in the vertical direction, from the top left corner of other.
	 */
	compositePlus(other, x = 0, y = 0) {};
	/**
	 * @returns Image An image where the inverse color of this image and other are multiplied together.
	 * @since 4.10.0.120
	 * @param {Image} other - The image to composite this image with.
	 * @param {int} x - The offset, in the horizontal direction, from the top left corner of other.
	 * @param {int} y - The offset, in the vertical direction, from the top left corner of other.
	 * @attention Screening a color with white (1) produces white, while screening a with black (0) leaves the color unchanged.
	 */
	compositeScreen(other, x = 0, y = 0) {};
	/**
	 * @returns Image An image where the color of this image and other are darkened or lightened depending on the color of this image.
	 * @since 4.10.0.120
	 * @param {Image} other - The image to composite this image with.
	 * @param {int} x - The offset, in the horizontal direction, from the top left corner of other.
	 * @param {int} y - The offset, in the vertical direction, from the top left corner of other.
	 */
	compositeSoftLight(other, x = 0, y = 0) {};
	/**
	 * @returns Image A copy of this image, where the alpha is reduced by the inverse of the alpha of other, is merged with other, and whose alpha is reduced by the inverse of this image alpha.
	 * @since 4.10.0.120
	 * @param {Image} other - The image to composite this image with.
	 * @param {int} x - The offset, in the horizontal direction, from the top left corner of other.
	 * @param {int} y - The offset, in the vertical direction, from the top left corner of other.
	 */
	compositeXor(other, x = 0, y = 0) {};
	/**
	 * @description Creates a copy of the image with the given color depth.
	 * @returns Image The image converted to the new color depth.
	 * @param {Number} depth - The color depth to convert the image to.
	 */
	convertDepth(depth) {};
	/**
	 * @description Creates a copy of a portion of the image.
	 * @returns Image A new copy of the specified area of the image.
	 * @param {Number} x - The x position of the area to copy.
	 * @param {Number} y - The y position of the area to copy.
	 * @param {Number} w - The width of the area to copy.
	 * @param {Number} h - The height of the area to copy.
	 */
	copy(x, y, w, h) {};
	/**
	 * @description Creates a copy of the image.
	 * @returns Image A new copy of the image.
	 */
	copy() {};
	/**
	 * @description Creates a copy of a portion of the image.
	 * @returns Image A new copy of the specified area of the image.
	 * @param {Rect} rect - The area to copy.
	 */
	copy(rect) {};
	/**
	 * @description Clears the image data and creates a new image with the given settings.
	 * @param {Size} size - The new size for the image.
	 * @param {Number} depth - The new color depth for the image.
	 * @param {Number} numColors - The number of colors for the new image.
	 */
	create(size, depth, numColors = 0) {};
	/**
	 * @description Clears the image data and creates a new image with the given settings.
	 * @param {Number} w - The new width for the image.
	 * @param {Number} h - The new height for the image.
	 * @param {Number} depth - The new color depth for the image.
	 * @param {Number} numColors - The number of colors for the new image.
	 */
	create(w, h, depth, numColors = 0) {};
	/**
	 * @returns Rect A bounding rectangle that encloses the drawn text.
	 * @since 4.10.0.121
	 * @param {String} x - The offset, in the horizontal direction, from the top left corner of the image to start drawing the (left of the) text.
	 * @param {String} y - The offset, in the vertical direction, from the top left corner of the image to start drawing the (top of the) text.
	 * @param {String} text - The text to draw.
	 * @param {Font} font - The font to use when drawing the text.
	 * @param {Color} color - The color to use when drawing the text.
	 * @param {Number} flags - A bitwise OR of the following flags:
	 * 
	 *  DzWidget.AlignLeft
	 * 
	 *  DzWidget.AlignRight
	 * 
	 *  DzWidget.AlignHCenter
	 * 
	 *  DzWidget.AlignJustify
	 * 
	 *  DzWidget.AlignTop
	 * 
	 *  DzWidget.AlignBottom
	 * 
	 *  DzWidget.AlignVCenter
	 * 
	 *  DzWidget.AlignCenter
	 * 
	 *  DzWidget.TextSingleLine
	 * 
	 *  DzWidget.TextExpandTabs
	 * 
	 *  DzWidget.TextShowMnemonic
	 * 
	 *  DzWidget.TextWordWrap
	 */
	drawText(x, y, text, font, color, flags = 0) {};
	/**
	 * @description Fills the image with color.
	 * @param {Color} color - The color to set the pixels of the image.
	 */
	fill(color) {};
	/**
	 * @returns Image An image mask for the specified color.
	 * @since 4.10.0.120
	 * @param {Color} maskColor - The color to mask from this image.
	 * @param {Boolean} invert - If true, the mask is inverted.
	 * @param {Number} tolerance - The allowable amount of variation from the value of maskColor to consider as maskColor.
	 */
	getColorMask(maskColor, invert = false, tolerance = 0) {};
	/**
	 * @description Inverts all pixels in the image.
	 * @param {Boolean} invertAlpha - If the image has a 32 bit depth, and this is true, the alpha channel will also be inverted, otherwise the alpha channel is unaffected.
	 */
	invertPixels(invertAlpha = true) {};
	/**
	 * @description Gets whether or not the image is Null.
	 * @returns Boolean true if the image is Null (empty), otherwise .
	 */
	isNull() {};
	/**
	 * @description Loads data for the image from a file.
	 * @returns Boolean true if the data was loaded, otherwise false. (since 4.11.0.155)
	 * @param {String} filename - The name of the file to load into the image.
	 * @param {String} format - The file format of the bytes in file pointed to by filename; i.e. "PNG". (since 4.11.0.155)
	 */
	load(filename, format = "") {};
	/**
	 * @description Loads data into the image from a byte array using the specified format.
	 * @returns Boolean true if the data was loaded, otherwise false.
	 * @since 4.10.0.88
	 * @param {ByteArray} data - The binary data to load into the image.
	 * @param {String} format - The file format of the bytes in data; i.e. "PNG".
	 */
	loadFromData(data, format = "") {};
	/**
	 * @description Creates a copy of this image that has been mirrored vertically.
	 * @returns Image The mirrored copy of the image.
	 */
	mirror() {};
	/**
	 * @description Creates a copy of this image that has been mirrored.
	 * @returns Image The mirrored copy of the image.
	 * @param {bool} horizontal - If true, the image will be mirrored horizontally.
	 * @param {bool} vertical - If true, the image will be mirrored vertically.
	 */
	mirror(horizontal, vertical) {};
	/**
	 * @description Gets the color value of an individual pixel.
	 * @returns Color The value of the pixel at the given location.
	 * @param {Number} x - The x position of the pixel.
	 * @param {Number} y - The y position of the pixel.
	 */
	pixel(x, y) {};
	/**
	 * @description Saves the image to a file.
	 * @param {String} filename - The name of the file to save the image to.
	 */
	save(filename) {};
	/**
	 * @description Creates a new image that is a scaled version of this image.
	 * @returns Image The new scaled image.
	 * @param {Number} width - The width of the new image.
	 * @param {Number} height - The height of the new image.
	 */
	scale(width, height) {};
	/**
	 * @description Creates a new image that is a scaled version of this image.
	 * @returns Image The new scaled image.
	 * @param {Size} size - The size of the new image.
	 */
	scale(size) {};
	/**
	 * @returns Boolean false if img is null, otherwise true.
	 * @since 4.10.0.120
	 * @param {Image} img - The image to set the alpha of this image from.
	 */
	setAlphaFromImage(img) {};
	/**
	 * @description Sets the color value of a color in the color table.
	 * @param {Color} index - The index of the color in the color table to change.
	 * @param {Color} color - The new value for the color.
	 */
	setColor(index, color) {};
	/**
	 * @description Sets the color value of the given pixel.
	 * @param {Number} x - The x position of the pixel to change.
	 * @param {Number} y - The y position of the pixel to change.
	 * @param {Color} color - The new value for the pixel.
	 */
	setPixel(x, y, color) {};
	/**
	 * @description Sets the image text to text and associates it with key.
	 * @since 4.9.3.78
	 * @param {String} key - The name of the key to associate the embedded text with.
	 * @param {String} text - The text to embedd and associate with the key.
	 */
	setText(key, text) {};
	/**
	 * @description Creates a new image that is a scaled version of this image.
	 * @returns Image The new scaled image.
	 * @param {Size} size - The size of the new image.
	 */
	smoothScale(size) {};
	/**
	 * @description Creates a new image that is a scaled version of this image.
	 * @returns Image The new scaled image.
	 * @param {Number} width - The width of the new image.
	 * @param {Number} height - The height of the new image.
	 */
	smoothScale(width, height) {};
	/**
	 * @description Creates a copy of the image in which the Red and Blue values have been swapped.
	 * @returns Image A BGR version of the image.
	 */
	swapRGB() {};
	/**
	 * @returns The embedded text associated with key. If key is an empty string, the whole embedded text is returned, with each key-text pair separated by a newline.
	 * @since 4.9.3.78
	 * @param {String} key - The name of the key to get the associated text of.
	 */
	text(key = "") {};
	/**
	 * @returns Array The text keys for this image.
	 * @since 4.9.3.78
	 */
	textKeys() {};

}
/**
 * Deprecated
 * Exists only to keep code written prior to 4.6.2.23 working. Do not use in new code. Use DzTextureLayer instead.
 */
class DzImageBlend extends QObject {
	/**
	 * @description Used to blend src into dest.
	 * @param {Image} dest - The destination image that the blending operation will add to.
	 * @param {Image} src - The source image that is being blended into the destination image.
	 */
	blendImage(dest, src) {};
	/**
	 * @returns String The description of the blending operation that will be displayed to the user.
	 */
	getDescription() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the blend method has changed.
	 * @signature `"blendMethodChanged()"`
	 * @event
	 */
	blendMethodChanged() {};

}
/**
 * Deprecated
 * Exists only to keep code written prior to 4.6.2.23 working. Do not use in new code. Use DzTextureLayer instead.
 */
class DzImageColorLayer {
	/**
	 * @description The color for this layer.
	 * @type {Color}
	 */
	color;
	/**
	 * @description Sets the size for this color layer.
	 * @param {Size} size - The new size to use.
	 */
	setSize(size) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the layer color changes.
	 * @signature `"colorChanged(const QColor&)"`
	 * @event
	 */
	colorChanged(color) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the layer size changes.
	 * @signature `"sizeChanged(const QSize&)"`
	 * @event
	 */
	sizeChanged(size) {};

}
/**
 * Deprecated
 * Exists only to keep code written prior to 4.6.2.23 working. Do not use in new code. Use DzTextureComponent instead.
 */
class DzImageComponent extends QObject {
	/**
	 * @description The label for the layer.
	 * @type {String}
	 */
	label;
	/**
	 * @description Holds whether or not the layer contributes to the final image.
	 * @type {Boolean}
	 */
	visible;
	/**
	 * @description TODO:
	 * Add description.
	 */
	addManipulator(manip) {};
	/**
	 * @description TODO:
	 * Add description.
	 */
	freeImageData() {};
	/**
	 * @returns Image The image data of the component.
	 */
	getImageData() {};
	/**
	 * @description TODO:
	 * Add description.
	 * @returns DzImageManip (deprecated)
	 */
	getManipulator(idx) {};
	/**
	 * @description TODO:
	 * Add description.
	 * @returns Number
	 */
	getNumManipulators() {};
	/**
	 * @returns Size The size of the image data of the component.
	 */
	getSize() {};
	/**
	 * @description TODO:
	 * Add description.
	 */
	insertManipulator(idx, manip) {};
	/**
	 * @description TODO:
	 * Add description.
	 * @returns Boolean
	 */
	removeManipulator(idx) {};
	/**
	 * @description TODO:
	 * Add description.
	 * @returns Boolean
	 */
	removeManipulator(manip) {};
	/**
	 * @description TODO:
	 * Add description.
	 * @returns Boolean
	 */
	toTextureLayer(layer, imageSize) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the image data for the component has been changed.
	 * @signature `"imageDataChanged()"`
	 * @event
	 */
	imageDataChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the label of the component has been changed.
	 * @signature `"labelChanged(const QString&)"`
	 * @event
	 */
	labelChanged(label) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the list of manipulators for the component has been changed.
	 * @signature `"manipulatorListChanged()"`
	 * @event
	 */
	manipulatorListChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the visibility of the component has been changed.
	 * @signature `"visibilityChanged(bool)"`
	 * @event
	 */
	visibilityChanged(onOff) {};

}
/**
 * TODO:
 * Add detailed description.
 */
class DzImageExporter extends DzFileIO {
	/**
	 * @returns String A description of the exporter that can be placed in a file type selection combo box (e.g. "JPEG Format")
	 */
	getDescription() {};
	/**
	 * @returns String The extension that this exporter will force filenames to.
	 */
	getExtension() {};
	/**
	 * @returns Boolean true if this exporter writes to a 'real' file. Derived classes should override this to indicate whether or not they are writing out to a real file. Exporters can, if they want to, write to entities other than files (e.g. sockets, pipes, etc.)
	 */
	isFileExporter() {};
	/**
	 * @description Writes the file.
	 * @returns DzError DZ_NO_ERROR on success, otherwise an error code.
	 * @param {Image} filename - The name of the file to save the image to.
	 * @param {Image} image - Image to save to file.
	 */
	saveImage(filename, image) {};
	/**
	 * @description Writes the file.
	 * @returns DzError DZ_NO_ERROR on success, otherwise an error code.
	 * @param {Image} filename - The name of the file to save the image to.
	 * @param {Image} image - Image to save to file.
	 * @param {DzFileIOSettings} options - The options for the exporter.
	 */
	saveImage(filename, image, options) {};

}
/**
 * Deprecated
 * Exists only to keep code written prior to 4.6.2.23 working. Do not use in new code. Use DzTextureLayer instead.
 */
class DzImageFileLayer {
	/**
	 * @description The filename of the image that this layer references.
	 * @type {String}
	 */
	filename;
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the file name associated with this layer changes
	 * @signature `"sizeChanged(const QString&)"`
	 * @event
	 */
	filenameChanged(filename) {};

}
/**
 * TODO:
 * Add detailed description.
 */
class DzImageImporter extends DzFileIO {
	/**
	 * @returns String A description of the importer that can be placed in a file type selection combo box (e.g. "JPEG Format").
	 */
	getDescription() {};
	/**
	 * @returns String The file extension (excluding the preceding dot) supported by this importer.
	 */
	getExtension(i) {};
	/**
	 * @returns Number The number of supported file extensions for this importer.
	 */
	getNumExtensions() {};
	/**
	 * @description Reads the file.
	 * @returns DzError
	 * @param {String} filename - The name of the file to read.
	 * @param {Image} image - Image to read data into.
	 */
	loadImage(filename, image, options) {};
	/**
	 * @description Reads the file.
	 * @returns DzError
	 * @param {String} filename - The name of the file to read.
	 * @param {Image} image - Image to read data into.
	 */
	loadImage(filename, image) {};
	/**
	 * @description Test the given filename and file contents to see if this importer can read it.
	 * @returns Boolean true if the importer can import the file, otherwise false.
	 */
	recognize(filename) {};

}
/**
 * Deprecated
 * Exists only to keep code written prior to 4.6.2.23 working. Do not use in new code. Use DzTextureLayer instead.
 */
class DzImageLayer {
	/**
	 * @returns DzImageBlend (deprecated) The blend mode for this image layer. The layer owns this object.
	 */
	getBlendMode() {};
	/**
	 * @returns String A user-readable description of the layer.
	 */
	getDescription() {};
	/**
	 * @returns DzImageMask (deprecated) The mask for this image layer, NULL if the layer is not masked. The layer owns this object.
	 */
	getMask() {};
	/**
	 * @description Sets the blending mode for this image layer.
	 * @param {DzImageBlend} mode - The new blending mode for the image layer. The layer takes ownership of this object and deletes it when it is no longer used.
	 */
	setBlendMode(mode) {};
	/**
	 * @description Sets the mask for this image layer.
	 * @param {DzImageMask} mask - A pointer to the new mask for the image layer. The layer takes ownership of this object and deletes it when it is no longer used. To clear the current mask, pass in a NULL pointer.
	 */
	setMask(mask) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the blend mode for the layer has been changed.
	 * @signature `"blendModeChanged(DzImageBlend*)"`
	 * @event
	 */
	blendModeChanged(mode) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the mask for the layer has been changed.
	 * @signature `"maskChanged(DzImageMask*)"`
	 * @event
	 */
	maskChanged(mask) {};

}
/**
 * Image manipulators are applied to an image layer before it is blended into the final image.
 * Deprecated
 * Exists only to keep code written prior to 4.6.2.23 working. Do not use in new code. Use DzTextureComponent instead.
 */
class DzImageManip extends QObject {
	/**
	 * @returns String The description of the manipulator that will be displayed to the user.
	 */
	getDescription() {};
	/**
	 * @description Applies the manipulator to img.
	 * @param {Image} img - The image to apply the manipulation to.
	 */
	manipulate(img) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the value of the manipulator has changed and it needs to be reapplied.
	 * @signature `"manipulationChanged()"`
	 * @event
	 */
	manipulationChanged() {};

}
/**
 * Deprecated
 * Exists only to keep code written prior to 4.6.2.23 working. Do not use in new code. Use DzTextureMask instead.
 */
class DzImageMask {
	/**
	 * @description The filename of the image that this mask references.
	 * @type {String}
	 */
	filename;
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the file name associated with this mask changes
	 * @signature `"sizeChanged(const QString&)"`
	 * @event
	 */
	filenameChanged(filename) {};

}
/**
 * Responsible for the management of image (texture) importers/exporters, as well as the lifetime (loading/unloading) and preparation (for display/rendering) of images used as textures for scene items.
 * There is only one instance of this manager in an application. This instance is created and owned by DzApp. Request the instance via DzApp.getImageMgr().
 * See Also:
 */
class DzImageMgr extends QObject {
	/**
	 * @returns Size The size of the image, without actually reading the image contents. If the image format does not support this feature, this function returns an invalid size.
	 * @since 4.9.3.82
	 * @param {String} imagePath - The full path of an image file to get the size of.
	 */
	static getImageSize(imagePath) {};
	/**
	 * @description Called prior to editing an image; pauses image preparation.
	 */
	beginEditingImage() {};
	/**
	 * @returns DzLayeredTexture A sharable object that stores information for a layered texture (image map) that is used in OpenGL.
	 * @param {String} name - The name of the layered texture to create.
	 */
	createLayeredTexture(name) {};
	/**
	 * @description This method is called from the 3D viewports to clear out any texture objects that are no longer being used. It has to be called only when a Studio OGL context is current.
	 */
	deleteUnusedTextureObjects() {};
	/**
	 * @returns DzTexture A currently loaded image object whose source matches the given image filename (if any), otherwise NULL.
	 * @param path - The full path of the image file to find a DzTexture instance for.
	 */
	findImage(fullPath) {};
	/**
	 * @returns DzTexture The image with the given name (if any), otherwise NULL.
	 * @param {String} name - The name of the image to find.
	 */
	findImageByName(name) {};
	/**
	 * @returns DzLayeredTexture The found layered texture (if any), otherwise null.
	 * @param {DzUri} uri - The URI of the layered texture to find.
	 */
	findLayeredTexture(uri) {};
	/**
	 * @returns DzTexture The found texture (if any), otherwise null.
	 * @param {DzUri} uri - The URI of the texture to find.
	 */
	findTexture(uri) {};
	/**
	 * @description Called after editing an image; restarts image preparation.
	 * @param {DzTexture} img - The image to add to the preparation list.
	 */
	finishedEditingImage(img) {};
	/**
	 * @returns DzTexture The image at the given index (if valid), otherwise NULL.
	 * @param {Number} which - The index of the image to return.
	 */
	getImage(which) {};
	/**
	 * @returns DzTexture A currently loaded image object whose source matches the given image filename. If the image is not already loaded, it is loaded and the new image is returned.
	 * @param {String} fullPath - The full path of the image file to get a DzTexture instance for.
	 * @param {Number} creationGamma - The gamma to set on this DzTexture instance if this function creates it.
	 */
	getImage(fullPath, creationGamma) {};
	/**
	 * @returns DzTexture A currently loaded image object whose source matches the given image filename. If the image is not already loaded, it is loaded and the new image is returned.
	 * @param {String} fullPath - The full path of the image file to get a DzTexture instance for.
	 */
	getImage(fullPath) {};
	/**
	 * @returns DzTexture A currently loaded image object whose source matches the given image filename. If the image is not already loaded, it is loaded and the new image is returned.
	 * @param {String} fullPath - The full path of the image file to get a DzTexture instance for.
	 * @param {Number} creationGamma - The gamma to set on this DzTexture instance if this function creates it.
	 * @param {Number} creationType - The texture type to set on this DzTexture instance if this function creates it.
	 */
	getImage(fullPath, creationGamma, creationType) {};
	/**
	 * @returns String The path of the last directory that images were loaded from.
	 */
	getImageOpenPath() {};
	/**
	 * @returns String The path of the last directory that images were saved to.
	 */
	getImageSavePath() {};
	/**
	 * @returns Number The number of currently available images.
	 */
	getNumImages() {};
	/**
	 * @description Creates a modified version of the given name if necessary to make it unique.
	 * @returns String The given name if it is already unique, otherwise a modified copy of the name that is unique.
	 * @param {String} name - The image name to make unique.
	 */
	getUniqueImageName(name) {};
	/**
	 * @description Called by the framework to notify the manager that the image has been prepared for the off-line renderer.
	 * @param {DzTexture} img - The image that has been prepared.
	 * @param {String} tempName - The new temporary name for the image.
	 */
	imagePrepared(img, tempName) {};
	/**
	 * @description Reads an image from a file.
	 * @returns Image The loaded image.
	 * @param {String} filename - The name of the image file to load.
	 */
	loadImage(filename) {};
	/**
	 * @description Reads an image from a file.
	 * @returns DzError DZ_NO_ERROR if the file was loaded successfully, otherwise an appropriate error code.
	 * @param {String} filename - The name of the image file to load.
	 * @param {Image} img - The image that the file will be loaded into.
	 * @param {Number} importerIdx - The index of the importer to use to load the image. If less than zero, the manager will attempt to find an importer that can load the file.
	 */
	loadImage(filename, img, importerIdx = -1) {};
	/**
	 * @description Forces a flush of the background image processing buffer.
	 * @param {DzRenderer} r - The renderer that is about to render the scene.
	 */
	prepareAllImages(r) {};
	/**
	 * @description Reloads any images whose source files have changed.
	 */
	refresh() {};
	/**
	 * @description Writes an image to a file.
	 * @returns DzError DZ_NO_ERROR if the file was saved successfully, otherwise an appropriate error code.
	 * @param {Image} filename - The name of the image file to save.
	 * @param {Image} image - The image to save.
	 * @param {Number} exporterIdx - The index of the exporter to use to save the image. If less than zero, the manager will attempt to find an appropriate exporter based on the filename extension.
	 */
	saveImage(filename, image, exporterIdx = -1) {};
	/**
	 * @description Sets the file path that a file open dialog will point to for images.
	 * @param {String} path - The folder path that the open image dialogs will default to.
	 */
	setImageOpenPath(path) {};
	/**
	 * @description Sets the file path that a file save dialog will point to for images.
	 * @param {String} path - The folder path that the save image dialogs will default to.
	 */
	setImageSavePath(path) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the auto refresh state changes.
	 * @signature `"autoRefreshChanged(bool)"`
	 * @event
	 */
	autoRefreshChanged(onOff) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when an image is added to or removed from the list.
	 * @signature `"imageListChanged()"`
	 * @event
	 */
	imageListChanged() {};

}
/**
 * TODO:
 * Add detailed description.
 */
class DzImageProperty extends DzProperty {
	/**
	 * @description Default Constructor. Creates a non-user property.
	 */
	constructor() {};
	/**
	 * @param {String} name - The name of this property.
	 * @param {Boolean} isUserProperty - If true, creates a user property; user properties are properties that can be added/deleted by users.
	 */
	constructor(name, isUserProperty) {};
	/**
	 * @returns Number The default map gamma.
	 * @since 4.5.2.23
	 */
	getDefaultMapGamma() {};
	/**
	 * @returns Number The default map texture type.
	 * @since 4.6.4.30
	 */
	getDefaultMapTextureType() {};
	/**
	 * @returns DzTextureModifier The texture modifier for this property (if any), otherwise NULL.
	 * @since 4.6.4.80
	 */
	getTextureModifier() {};
	/**
	 * @returns Number The texture modifier flags.
	 * @since 4.6.4.82
	 */
	getTextureModifierFlags() {};
	/**
	 * @returns DzTexture The image value of this property.
	 */
	getValue() {};
	/**
	 * @description Sets the default map gamma.
	 * @since 4.5.2.23
	 * @param {Number} gamma - The gamma value to set.
	 */
	setDefaultMapGamma(gamma) {};
	/**
	 * @description Sets the default map texture type.
	 * @since 4.6.4.30
	 * @param {Number} type - The map texture type to set.
	 */
	setDefaultMapTextureType(type) {};
	/**
	 * @description Sets the texture modifier.
	 * @since 4.6.4.80
	 * @param {DzTextureModifier} txtMod - The texture modifier to set.
	 */
	setTextureModifier(txtMod) {};
	/**
	 * @description Sets texture modifier flags for this property.
	 * @since 4.6.4.82
	 * @param {Number} flags - The texture modifier flags to set.
	 */
	setTextureModifierFlags(flags) {};
	/**
	 * @description Sets the texture value on this property.
	 * @returns Boolean
	 * @param {DzTexture} val - The texture value to set.
	 */
	setValue(val) {};
	/**
	 * @description Sets the image value.
	 * @returns Boolean
	 * @param {String} imgFile - The path of the image to set as the value; can be absolute or relative to a mapped directory.
	 */
	setValue(imgFile) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the default map gamma for this property has changed.
	 * @signature `"defaultMapGammaChanged()"`
	 * @event
	 */
	defaultMapGammaChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the default map texture type for this property has changed.
	 * @signature `"defaultMapTextureTypeChanged()"`
	 * @event
	 */
	defaultMapTextureTypeChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the texture modifier for this property has changed.
	 * @signature `"textureModifierChanged()"`
	 * @event
	 */
	textureModifierChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the flags on the texture modifier for this property have changed.
	 * @signature `"textureModifierFlagsChanged()"`
	 * @event
	 */
	textureModifierFlagsChanged() {};

}
/**
 * 
 */
class DzImageRenderHandler extends DzRenderHandler {
	/**
	 * @description Create a new image render handler for rendering a single frame.
	 * @param {Size} size - The width & height of the rendered image.
	 * @param {DzTime} renderTime - The time to render the frame at.
	 * @param {String} filename - The filename to save the image to.
	 */
	constructor(size, renderTime, filename) {};
	/**
	 * @description Create a new image render handler for rendering a multiple frames.
	 * @param {Size} size - The width & height of the rendered images.
	 * @param {DzTime} startingTime - The time to start the render at.
	 * @param {Number} numFrames - The number of frames to render.
	 * @param {String} filename - The name of the movie file or the base file name for the series.
	 * @param {Boolean} isMovie - If true, the filename is expected to be a valid filename for saving a movie file, if false, it is expected to be a valid image name.
	 */
	constructor(size, startingTime, numFrames, filename, isMovie) {};
	/**
	 * @description Holds whether each frame is written to file when finishFrame is called. The internal images is reset on each new frame.
	 * @type {Boolean}
	 */
	writeToFile;
	/**
	 * @description Begins rendering the given frame
	 */
	beginFrame(frame) {};
	/**
	 * @description Starts a render
	 */
	beginRender() {};
	/**
	 * @description Finishes rendering the current frame
	 */
	finishFrame() {};
	/**
	 * @description Finishes the render and saves it out to file
	 */
	finishRender() {};
	/**
	 * @returns Boolean true if a thumbnail is created, false otherwise
	 */
	getCreateThumbnail() {};
	/**
	 * @returns Image The current frame's image. This image is reset at every call to beginFrame.
	 */
	getCurrentFrameImage() {};
	/**
	 * @returns Number The number of frames in the render
	 */
	getNumFrames() {};
	/**
	 * @returns Size the size of the rendered image
	 */
	getSize() {};
	/**
	 * @returns DzTime The starting time of the render
	 */
	getStartingTime() {};
	/**
	 * @description Sets whether a thumbnail is created
	 * @param {Boolean} createThumb - If true, a thumbnail is created
	 */
	setCreateThumbnail(createThumb) {};

}
/**
 * TODO:
 * Add detailed description.
 */
class DzImageTexture extends DzRefCountedItem, DzTexture {
	/**
	 * @description Constructor.
	 * @param {String} filename - The source file name for this texture.
	 * @param {Number} gamma - The gamma to set; gamma ⇐ 0 - do best guess of the image gamma; gamma == 1 - no gamma correction needed; gamma > 0 != 1 - the image is at the specified gamma.
	 */
	constructor(filename, gamma) {};
	/**
	 * @description Constructor.
	 * @param {String} filename - The source file name for this texture.
	 * @param {Number} gamma - The gamma to set; gamma ⇐ 0 - do best guess of the image gamma; gamma == 1 - no gamma correction needed; gamma > 0 != 1 - the image is at the specified gamma.
	 * @param {TextureType} textureType - The texture type of this texture.
	 */
	constructor(filename, gamma, textureType) {};
	/**
	 * @description Holds the author of the file for this texture. (Read Only)
	 * @type {DzAuthor}
	 */
	assetAuthor;
	/**
	 * @description Holds the revision version of the asset file for this texture. (Read Only)
	 * @type {DzVersion}
	 */
	assetFileRevision;
	/**
	 * @description Holds the asset id for this texture.
	 * @type {String}
	 */
	assetId;
	/**
	 * @description Holds the modified date of the asset file for this texture. (Read Only)
	 * @type {Date}
	 */
	assetModifiedDate;
	/**
	 * @description Holds whether or not the asset for this texture needs to be saved. (Read Only)
	 * @type {Boolean}
	 */
	assetNeedSave;
	/**
	 * @description Holds the URI of the asset source for this texture; only valid when the asset is in an embedded state - i.e. modified. (Read Only)
	 * @type {DzUri}
	 */
	assetSource;
	/**
	 * @description Holds the asset URI for this texture. (Read Only)
	 * @type {DzUri}
	 */
	assetUri;
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the image texture has been modified.
	 * @signature `"assetModified()"`
	 * @event
	 */
	assetModified() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted after the image texture has been saved.
	 * @signature `"assetWasSaved()"`
	 * @event
	 */
	assetWasSaved() {};

}
/**
 * TODO:
 * Add detailed description.
 */
class DzImporter extends DzFileIO {
	/**
	 * @returns String A description of the importer that can be placed in a file type selection combobox (e.g. "Acclaim Skeleton").
	 */
	getDescription() {};
	/**
	 * @returns String The i'th file extension (excluding the preceding dot) supported by this importer.
	 */
	getExtension(i) {};
	/**
	 * @returns DzNode The imported node at the given index (if valid), otherwise an empty string.
	 * @since 4.11.0.254
	 * @param {Number} i - The index of the imported node to get.
	 */
	getImportedNode(i) {};
	/**
	 * @returns Number The number of supported file extensions for this importer.
	 */
	getNumExtensions() {};
	/**
	 * @returns Number The number of nodes that were imported.
	 * @since 4.11.0.254
	 */
	getNumImportedNodes() {};
	/**
	 * @description Imports from a file.
	 * @returns DzError DZ_NO_ERROR on success, or an error code if the import failed.
	 * @param {String} filename - The full path of the file to import.
	 * @param {DzFileIOSettings} options - The options to use while importing the file.
	 */
	readFile(filename, options) {};
	/**
	 * @description Imports from a file.
	 * @returns DzError DZ_NO_ERROR on success, or an error code if the import failed.
	 * @param {String} filename - The name of the file to import.
	 */
	readFile(filename) {};
	/**
	 * @description Test the given filename and file contents to see if this importer can read it.
	 * @returns Boolean true if the importer can import the file, otherwise false.
	 * @param {String} filename - The name of the file to test.
	 */
	recognize(filename) {};

}
/**
 * There is only one instance of this manager in an application. This instance is created and owned by DzApp. Request the instance via DzApp.getImportMgr().
 * See Also:
 */
class DzImportMgr extends QObject {
	/**
	 * @description Calls recognize() on each of the importers and attempts to match an importer with the filename.
	 * @returns Boolean true if an importer was found that can read the given file.
	 * @param {String} filename - The name of the file to try to find an importer for.
	 */
	static canImport(filename) {};
	/**
	 * @description Calls recognize() on each of the importers and attempts to match an importer with the filename.
	 * @returns DzImporter A new instance of the matching importer, or NULL if none was found. The caller takes ownership of this pointer and is responsible for deleting it.
	 * @param {String} filename - The name of the file to try to find an importer for.
	 */
	static findImporter(filename) {};
	/**
	 * @description Attempts to locate an importer class type by name.
	 * @returns DzImporter A new instance of the matching importer, or NULL if none was found. The caller takes ownership of this pointer and is responsible for deleting it.
	 * @param {String} className - The class name of the importer to find.
	 */
	static findImporterByClassName(className) {};
	/**
	 * @description Calls recognize() on each of the importers and attempts to match an importer with the filename.
	 * @returns Number The index of a matching importer, or -1 if none was found.
	 * @param {String} filename - The name of the file to try to find an importer for.
	 */
	static findImporterIndex(filename) {};
	/**
	 * @returns Number The number of importers currently supported.
	 */
	static getNumImporters() {};
	/**
	 * @description Populates the given filter with all the geometry types recognized by the import manager.
	 * @param {DzFileFilter} filter - The filter to populate
	 * @param {String} defaultFilter - The filter to set as the default
	 * @param {Boolean} makeAllFilesEntry - If true, an extra filter is appended to the list that matches all the valid extensions.
	 */
	static makeGeometryFileFilter(filter, defaultFilter = "", makeAllFilesEntry = true) {};
	/**
	 * @description Populates the given filter with all the types recognized by the import manager.
	 * @param {DzFileFilter} filter - The filter to populate
	 * @param {String} defaultFilter - The filter to set as the default
	 * @param {Boolean} makeAllFilesEntry - If true, an extra filter is appended to the list that matches all the valid extensions.
	 */
	static makeImportFileFilter(filter, defaultFilter = "", makeAllFilesEntry = true) {};
	/**
	 * @description Gets the full import file name.
	 * @returns String The full import file name.
	 */
	getImportFileName() {};
	/**
	 * @description Gets the default import directory - this is typically the last directory that the user imported a file from, and will be the directory that user will be taken to next time the file import dialog is displayed.
	 * @returns String The current default directory that files are imported from.
	 */
	getImportPath() {};
	/**
	 * @returns Boolean true if there is currently a file being imported, otherwise false.
	 */
	isImporting() {};
	/**
	 * @description Import the contents of a file into the scene.
	 * @returns DzError DZ_NO_ERROR if the file import was successful.
	 * @param {String} filename - The name of the file to import. This must be the full filename including the path to the file.
	 * @param {Number} importerIdx - The index of the importer class to use. If this is less than 0, then the recognize function of the importer classes will be called with the fileName to attempt to find an appropriate importer.
	 */
	readFile(filename, importerIdx = -1) {};
	/**
	 * @description Import the contents of a file into the scene.
	 * @returns DzError DZ_NO_ERROR if the file import was successful.
	 * @param {String} filename - The name of the file to import. This must be the full filename including the path to the file.
	 * @param {Number} importerIdx - The index of the importer class to use. If this is less than 0, then the recognize function of the importer classes will be called with the fileName to attempt to find an appropriate importer.
	 * @param {DzFileIOSettings} options - The options to use while importing the file.
	 */
	readFile(filename, importerIdx, options) {};
	/**
	 * @description Reads the geometry file into a new shape.
	 * @returns DzShape The new shape that the geometry was read into, NULL on failure.
	 * @param {String} filename - The full path of the file to import.
	 * @param {Number} importerIdx - The index of the importer to use, if invalid (<0) the file's extension will be used to select an appropriate importer.
	 * @param {DzFileIOSettings} options - The options to use while importing the file.
	 */
	readGeometry(filename, importerIdx, options) {};
	/**
	 * @description Reads the geometry file into a new shape.
	 * @returns DzShape The new shape that the geometry was read into, NULL on failure.
	 * @param {String} filename - The full path of the file to import.
	 * @param {Number} importerIdx - The index of the importer to use, if invalid (<0) the file's extension will be used to select an appropriate importer.
	 */
	readGeometry(filename, importerIdx = -1) {};
	/**
	 * @description Sets the import file name - this is the full file name that file was import
	 * @param {String} fileName - The full file name.
	 */
	setImportFileName(fileName) {};
	/**
	 * @description Sets the default import directory - this is the directory that user will be taken to next time the file import dialog is displayed.
	 * @param {String} path - The new default path for importing files.
	 */
	setImportPath(path) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted after importing a file. This may not always be emitted after every fileImportStarting() signal if there were errors during file loading.
	 * @signature `"fileImported()"`
	 * @event
	 */
	fileImported() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted just before importing a file.
	 * @signature `"fileImportStarting()"`
	 * @event
	 */
	fileImportStarting() {};

}
/**
 * DzInfoDivider places a divider bar between your widget and a tab bar of info tabs. This class is very similar (but not exactly like) DzDynamicDividerWgt. For situations where you want to control both sides of the divider bar it is recommended to use DzDynamicDividerWgt.
 */
class DzInfoDivider extends QWidget {
	/**
	 * @returns Number The current divider position, or -1 if minimized.
	 */
	getActualDividerPercent() {};
	/**
	 * @returns DzInfoTabs The info tabs for this divider bar. The info divider allows you to display tips, metadata, and other info relating to your product.
	 */
	getInfoTabs() {};
	/**
	 * @returns Number The preffered relative position of the divider.
	 */
	getPreferredDividerPercent() {};
	/**
	 * @returns Number The minimized (toggled) state as a Number.  * 0 = NotMinimized1 = HalfMinimized2 = FullMinimized
	 */
	getToggleState() {};
	/**
	 * @returns Boolean true if the divider bar is in a minimized state, othewise false.
	 */
	isMinimized() {};
	/**
	 * @returns Boolean true if the divider bar is in a minimized state, otherwise false.
	 */
	isToggled() {};
	/**
	 * @description Moves the divider distance pixels from the current location.
	 * @param {Number} distance - The distance in pixels from the current location. If the new location will cause the divider to be displayed in an invalid location, it will be displayed in the closest location to where it was dragged
	 */
	moveDivider(distance) {};
	/**
	 * @description Sets the location of the divider bar.
	 * @param position - The preffered relative position of the divider. If the new location will cause the divider to be displayed in an invalid location, it will be displayed in the closest location possible.
	 */
	setPreferredDividerPercent(distance) {};
	/**
	 * @description Sets the toggled state of this divider bar.
	 * @param {Number} state - The new state of this divider bar:    * 0 = Not Minimized
	 * 
	 *  1 = Half Minimized
	 * 
	 *  2 = Full Minimized
	 */
	setToggleState(state) {};
	/**
	 * @description Toggles the second widget between fully closed and fully open.
	 */
	toggleClosed() {};
	/**
	 * @returns Boolean true if this divider bar can be toggled, otherwise false.
	 */
	toggleEnabled() {};
	/**
	 * @description Toggles the minimized state of the second widget. If toggling is disabled, this method has no effect. If either the first or second widget is null, toggling this method will also have no effect.
	 */
	toggleMinimized() {};

}
/**
 * 
 */
class DzInfoTabs extends QWidget {
	/**
	 * @returns Number The index of the current tab
	 */
	currentTab() {};
	/**
	 * @description Hides the widget responsible for displaying tab contents
	 */
	hideStack() {};
	/**
	 * @returns Boolean true if the widget responsible for displaying tab contents is hidden, false otherwise
	 */
	isStackHidden() {};
	/**
	 * @description Sets the current tab to which
	 * @param {Number} which - The tab to make current
	 */
	setCurrentTab(which) {};
	/**
	 * @description Sets the file info for the given asset
	 * @param {DzAsset} asset - The asset file from which file info will be populated
	 */
	setFileInfo(asset) {};
	/**
	 * @description Sets file and meta data info for the given asset
	 * @param {DzAsset} asset - The asset file from which file and metadata info will be populated
	 */
	setInfo(asset) {};
	/**
	 * @description Sets metadata info for the given asset
	 * @param {DzAsset} asset - The asset file from which file info will be populated
	 */
	setMetaInfo(asset) {};
	/**
	 * @description Sets info for the given node
	 * @param {DzNode} node - The node from which info will be populated
	 */
	setNodeInfo(node) {};
	/**
	 * @description Sets file info from the given asset container
	 * @param {DzProductAssetContainer} product - The product from which product info will be populated
	 */
	setProductInfo(product) {};
	/**
	 * @description Sets the UI script responsible for displaying the contents of the Tips tab
	 * @returns DzError A DzError error code indicating the status of setting the UI File
	 * @param {String} path - The path to the UI script file to use
	 */
	setTipUIScript(path) {};
	/**
	 * @description Specifies whether the file tab is shown or not
	 * @param {Boolean} onOff - If true, the file tab will be shown, otherwise it will be hidden
	 */
	showFileTab(onOff) {};
	/**
	 * @description Specifies whether the metadata tab is shown or not
	 * @param {Boolean} onOff - If true, the metadata tab will be shown, otherwise it will be hidden
	 */
	showMetaTab(onOff) {};
	/**
	 * @description Specifies whether the node tab is shown or not
	 * @param {Boolean} onOff - If true, the node tab will be shown, otherwise it will be hidden
	 */
	showNodeTab(onOff) {};
	/**
	 * @description Specifies whether the render tab is shown or not
	 * @param {Boolean} onOff - If true, the render tab will be shown, otherwise it will be hidden
	 */
	showRenderTab(onOff) {};
	/**
	 * @description Shows the widget responsible for displaying the contents of the tabs
	 */
	showStack() {};
	/**
	 * @description Specifies whether the store tab is shown or not
	 * @since 4.8.1.79
	 * @param {Boolean} onOff - If true, the store tab will be shown, otherwise it will be hidden
	 */
	showStoreTab(onOff) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when a keyword is clicked and the CTRL modifier key is pressed.
	 * @signature `"keywordAddUniqueClicked(const QString&)"`
	 * @event
	 */
	keywordAddUniqueClicked(keyword) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when a keyword is clicked.
	 * @signature `"keywordSetClicked(const QString&)"`
	 * @event
	 */
	keywordSetClicked(keyword) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the apply button on the render tab is clicked.
	 * @signature `"renderApplyClicked()"`
	 * @event
	 */
	renderApplyClicked() {};

}
/**
 * This class can be used to create a single instance of another DzNode (subclass) that also has a DzOobject for inclusion in a group of like nodes. These instances are drawn the same as the target node except for transforms.
 */
class DzInstanceGroupItem extends DzBase {
	/**
	 * @description TODO:
	 * Add description.
	 */
	constructor() {};
	/**
	 * @description Copies the transform values of the given nodes transform properties. Also copies rotation order.
	 * @param {DzNode} node - The node to copy transform values from.
	 */
	copyTransformFromNode(node) {};
	/**
	 * @description Copies the transform values to the given nodes transform properties. Also copies rotation order
	 * @param {DzNode} node - The node to copy transform values from.
	 */
	copyTransformToNode(node) {};
	/**
	 * @returns DzVec3 The endpoint values of this item.
	 */
	getEndPointValues() {};
	/**
	 * @returns Number The general scale value of this item.
	 */
	getGeneralScaleValue() {};
	/**
	 * @returns String The label of this item.
	 */
	getLabel() {};
	/**
	 * @returns DzVec3 The local-space position of the item at the current time.
	 */
	getLocalPos() {};
	/**
	 * @returns DzQuat The local-space rotation of the item at the current time.
	 */
	getLocalRot() {};
	/**
	 * @returns DzMatrix3 The local-space scale of the item at the time.
	 */
	getLocalScale() {};
	/**
	 * @returns DzMatrix3 A matrix representing the composed local transform for this item at the current time.
	 */
	getLocalTransform() {};
	/**
	 * @returns DzQuat The orientation of the item.
	 */
	getOrientation() {};
	/**
	 * @returns DzVec3 The orientation values of this item, in degrees.
	 */
	getOrientationValues() {};
	/**
	 * @returns DzVec3 The origin (centerpoint) values of this item.
	 */
	getOriginValues() {};
	/**
	 * @returns DzVec3 The potion values of this item.
	 */
	getPositionValues() {};
	/**
	 * @returns DzRotationOrder The rotation order of this item.
	 */
	getRotationOrder() {};
	/**
	 * @returns DzVec3 The rotation values of this item, in degrees.
	 */
	getRotationValues() {};
	/**
	 * @returns DzVec3 The world-space position of the item.
	 * @param {DzTime} tm - The scene time at which to get the the transform.
	 * @param {Boolean} defaultVal - Use the default version of the origin, end point, and orientation instead of the current position.
	 */
	getWSPos(tm, defaultVal = false) {};
	/**
	 * @returns DzVec3 The world-space position of the item at the current time.
	 */
	getWSPos() {};
	/**
	 * @returns DzQuat The world-space rotation of the item.
	 * @param {DzTime} tm - The scene time at which to get the the transform.
	 * @param {Boolean} defaultVal - Use the default version of the origin, end point, and orientation instead of the current position.
	 */
	getWSRot(tm, defaultVal = false) {};
	/**
	 * @returns DzQuat The world-space rotation of the item at the current time.
	 */
	getWSRot() {};
	/**
	 * @returns DzMatrix3 The world-space scale of the item.
	 * @param {DzTime} tm - The scene time at which to get the the transform.
	 * @param {Boolean} defaultVal - Use the default version of the origin, end point, and orientation instead of the current position.
	 */
	getWSScale(tm, defaultVal = false) {};
	/**
	 * @returns DzMatrix3 The world-space scale of the item at the current time.
	 */
	getWSScale() {};
	/**
	 * @returns DzMatrix3 A matrix representing the composed world-space transform for this item at the current time.
	 */
	getWSTransform() {};
	/**
	 * @returns DzMatrix3 A matrix representing the composed world-space transform for this item.
	 * @param {DzTime} tm - The scene time at which to get the the transform.
	 * @param {Boolean} defaultVal - Use the default version of the origin, end point, and orientation instead of the current position.
	 */
	getWSTransform(tm, defaultVal = false) {};
	/**
	 * @returns DzVec3 The xyz scale values of this item.
	 */
	getXYZScaleValues() {};
	/**
	 * @returns Boolean true if this node inherits scale from its parent, otherwise false.
	 */
	inheritsScale() {};
	/**
	 * @description Sets the endpoint for this item.
	 * @param {Number} x - The x position.
	 * @param {Number} y - The y position.
	 * @param {Number} z - The z position.
	 */
	setEndPoint(x, y, z) {};
	/**
	 * @description Sets whether or not this node inherits the scale of its parent.
	 * @param {Boolean} onOff - If true, scaling the parent of this node will scale this node also.
	 */
	setInheritScale(onOff) {};
	/**
	 * @description Sets the label for this item.
	 * @param {String} label - The label to set.
	 */
	setLabel(label) {};
	/**
	 * @description Sets the orientation for this item.
	 * @param {Number} x - The rotation, in degrees, on the x axis.
	 * @param {Number} y - The rotation, in degrees, on the y axis.
	 * @param {Number} z - The rotation, in degrees, on the z axis.
	 */
	setOrientation(x, y, z) {};
	/**
	 * @description Sets the origin for this item.
	 * @param {Number} x - The x position.
	 * @param {Number} y - The y position.
	 * @param {Number} z - The z position.
	 */
	setOrigin(x, y, z) {};
	/**
	 * @description Sets the position for this item.
	 * @param {Number} x - The x position.
	 * @param {Number} y - The y position.
	 * @param {Number} z - The z position.
	 */
	setPosition(x, y, z) {};
	/**
	 * @description Sets the rotation for this item.
	 * @param {Number} x - The rotation, in degrees, on the x axis.
	 * @param {Number} y - The rotation, in degrees, on the y axis.
	 * @param {Number} z - The rotation, in degrees, on the z axis.
	 */
	setRotation(x, y, z) {};
	/**
	 * @description Sets the rotation order for this item.
	 * @param {DzRotationOrder} order - The rotation order to set.
	 */
	setRotationOrder(order) {};
	/**
	 * @description Sets the scale for this item.
	 * @param {Number} x - The scale on the x axis.
	 * @param {Number} y - The scale on the y axis.
	 * @param {Number} z - The scale on the z axis.
	 * @param {Number} genScale - The general scale.
	 */
	setScale(x, y, z, genScale) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the local transform for this item has changed.
	 * @signature `"localTransformChanged()"`
	 * @event
	 */
	localTransformChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the transform for this item has changed.
	 * @signature `"transformChanged()"`
	 * @event
	 */
	transformChanged() {};

}
/**
 * This class can be used to create a multiple instances of another DzNode (subclass) that also has a DzOobject. These instances are drawn the same as the target node except for transforms.
 */
class DzInstanceGroupNode extends DzInstanceNode {
	/**
	 * @description Default Constructor.
	 */
	constructor() {};
	/**
	 * @description Begin edit of this node.
	 * @attention If adding or removing many items from this node it is more efficient to call beginItemEdit() do edits and call finishItemEdit() when done.
	 */
	beginItemEdit() {};
	/**
	 * @returns Removes all items from this node.
	 */
	clearItems() {};
	/**
	 * @returns DzInstanceGroupItem A new instance group item.
	 */
	createItem() {};
	/**
	 * @returns Number The index for the given item or -1 if it does not belong to this node.
	 * @param {DzInstanceGroupItem} item - The item to get the index for.
	 */
	findIndexForItem(item) {};
	/**
	 * @description Finish edit of this node.
	 */
	finishItemEdit() {};
	/**
	 * @returns DzInstanceGroupItem The group item at the given index or null if it does not exist.
	 * @param {Number} index - The index of the item to get the group of.
	 */
	getGroupItem(index) {};
	/**
	 * @returns Number The number of group items.
	 */
	getNumberOfGroupItems() {};
	/**
	 * @returns Boolean true if in beginItemEdit/finishItemEdit session
	 */
	isEditingItems() {};
	/**
	 * @returns Removes and deletes the item at the given index.
	 * @param {Number} index - The index of the item to remove.
	 */
	removeItem(index) {};

}
/**
 * This class can be used to create a single instance of another DzNode (subclass) that also has a DzOobject. The instance is drawn the same as the target node except for transforms.
 */
class DzInstanceNode extends DzNode {
	/**
	 * @description Default Constructor.
	 */
	constructor() {};
	/**
	 * @returns DzEnumProperty The property controlling how the node is instanced (i.e., just the target or the target and its children).
	 */
	getCopyModeControl() {};
	/**
	 * @returns DzNode The current node being instanced by this node (if any), otherwise NULL.
	 */
	getTarget() {};
	/**
	 * @returns DzNodeProperty The property pointing at the target node.
	 */
	getTargetControl() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the target for this instance has changed.
	 * @signature `"targetChanged()"`
	 * @event
	 */
	targetChanged() {};

}
/**
 * See Also:
 * Since:
 */
class DzInt2 extends Object {
	/**
	 * @description Default Constructor. Creates an uninitialized vector.
	 */
	constructor() {};
	/**
	 * @description Creates a vector by parsing a string.
	 * @param {String} vec - A string representation of the vector in the form "[ width, height ]"
	 */
	constructor(vec) {};
	/**
	 * @description Copy Constructor.
	 */
	constructor(vec) {};
	/**
	 * @description Copy Constructor.
	 */
	constructor(vec) {};
	/**
	 * @description Creates and initializes this vector with an array of 2 integer values.
	 */
	constructor(vals) {};
	/**
	 * @description Creates and initializes this vector with 2 integer values.
	 */
	constructor(x, y) {};
	/**
	 * @description Holds the height of this vector; an alias to the y component.
	 * @type {Number}
	 */
	height;
	/**
	 * @description Holds the width of this vector; an alias for the x component.
	 * @type {Number}
	 */
	width;
	/**
	 * @description Holds the x component of this vector.
	 * @type {Number}
	 */
	x;
	/**
	 * @description Holds the y component of this vector.
	 * @type {Number}
	 */
	y;
	/**
	 * @description Sets the value of each component to its respective absolute value.
	 */
	abs() {};
	/**
	 * @returns DzInt2 A vector that is the result of adding vec to this vector.
	 * @param {DzInt2} vec - The vector to add to this vector.
	 */
	add(vec) {};
	/**
	 * @returns Number The average of each component of this vector.
	 * @since 4.9.3.118
	 */
	average() {};
	/**
	 * @description Clamps each component of this vector.
	 * @since 4.9.3.118
	 * @param {Number} min - The minimum value.
	 * @param {Number} max - The maximum value.
	 */
	clamp(min, max) {};
	/**
	 * @returns DzInt2 A copy of this vector where each component has been clamped to min and max.
	 * @since 4.9.3.118
	 * @param {Number} min - The minimum value.
	 * @param {Number} max - The maximum value.
	 */
	clamped(min, max) {};
	/**
	 * @returns DzInt2 A copy of this vector where each component has been clamped to max.
	 * @since 4.9.3.118
	 * @param {Number} max - The maximum value.
	 */
	clampedMax(max) {};
	/**
	 * @returns DzInt2 A copy of this vector where each component has been clamped to min.
	 * @since 4.9.3.118
	 * @param {Number} min - The minimum value.
	 */
	clampedMin(min) {};
	/**
	 * @description Clamps the maximum value for each component of this vector.
	 * @since 4.9.3.118
	 * @param {Number} max - The maximum value.
	 */
	clampMax(max) {};
	/**
	 * @description Clamps the minimum value for each component of this vector.
	 * @since 4.9.3.118
	 * @param {Number} min - The minimum value.
	 */
	clampMin(min) {};
	/**
	 * @returns DzInt2 A vector that is the result of dividing vec by this vector.
	 * @param {DzInt2} vec - The vector to divide by this vector.
	 */
	divide(vec) {};
	/**
	 * @returns DzInt2 A vector with components set to (1, 1).
	 * @since 4.14.1.31
	 */
	identity() {};
	/**
	 * @returns Boolean true if both values are zero (0, 0), otherwise false.
	 */
	isNull() {};
	/**
	 * @returns Number The length of this vector.
	 */
	length() {};
	/**
	 * @returns Number The length of this vector, squared.
	 */
	lengthSquared() {};
	/**
	 * @description Performs a linear interpolation between v1 and v2 based on the value of t.
	 * @returns DzInt2 v1 if t = 0. v2 if t = 1. Values outside the 0 ⇐ t ⇐ 1 range may also be used to return an extrapolated vector.
	 * @since 4.9.3.118
	 * @param {Number} t - The value to evaluate.
	 * @param {Number} vec1 - The first vector.
	 * @param {Number} vec2 - The second vector.
	 */
	linearInterp(t, v1, v2) {};
	/**
	 * @description Sets this vector to (1, 1).
	 */
	makeIdentity() {};
	/**
	 * @description Sets this vector to (0, 0).
	 */
	makeZero() {};
	/**
	 * @returns Number The rectilinear distance of this vector.
	 */
	manhattanLength() {};
	/**
	 * @returns DzInt2 A copy of this vector where each component has been modulated by min and max.
	 * @since 4.9.3.118
	 * @param {Number} min - The minimum value.
	 * @param {Number} max - The maximum value.
	 */
	modulate(min, max) {};
	/**
	 * @description Modulates each component of this vector.
	 * @since 4.9.3.118
	 * @param {Number} min - The minimum value.
	 * @param {Number} max - The maximum value.
	 */
	modulo(min, max) {};
	/**
	 * @returns DzInt2 A vector that is the result of multiplying vec by this vector.
	 * @param {DzInt2} vec - The vector to multiply by this vector.
	 */
	multiply(vec) {};
	/**
	 * @description Negates each component of this vector.
	 */
	negate() {};
	/**
	 * @description Sets this vector to have a specific length in the current direction.
	 * @param {Number} newLength - The length to set.
	 */
	setLength(length) {};
	/**
	 * @description Sets the value of each component to its respective squared value.
	 */
	square() {};
	/**
	 * @returns DzInt2 A vector that is the result of subtracting vec from this vector.
	 * @param {DzInt2} vec - The vector to subtract from this vector.
	 */
	subtract(vec) {};
	/**
	 * @returns String A string representation of the object.
	 */
	toString() {};
	/**
	 * @description Swaps the values of x and y.
	 */
	transpose() {};
	/**
	 * @returns DzInt2 A vector with components set to (0, 0).
	 * @since 4.14.1.31
	 */
	zero() {};

}
/**
 * This class provides an animatable integer property with 2 values that is stored and can be accessed as a DzInt2.
 * Since:
 */
class DzInt2Property extends DzIntProperty {
	/**
	 * @description Default Constructor. Creates a non-animatable, non-user property.
	 */
	constructor() {};
	/**
	 * @param {String} name - The name of this property.
	 * @param {Boolean} canAnimate - If true, creates an animatable property.
	 * @param {Boolean} isUserProperty - If true, creates a user property; user properties are properties that can be added/deleted by users.
	 * @param {DzInt2} defaultVal - Sets the default value of this property.
	 */
	constructor(name, canAnimate, isUserProperty, defaultVal) {};
	/**
	 * @param {String} name - The name of this property.
	 * @param {Boolean} canAnimate - If true, creates an animatable property.
	 * @param {Boolean} isUserProperty - If true, creates a user property; user properties are properties that can be added/deleted by users.
	 */
	constructor(name, canAnimate, isUserProperty) {};
	/**
	 * @description Adjust the value of the property based on the contribution of property controllers.
	 * @returns DzInt2 A 'raw' value for the property that will result in the property having the given value with the current controllers.
	 * @param {DzInt2} val - The 'final' value desired for the property.
	 */
	adjustInt2Value(val) {};
	/**
	 * @description Adjust the value of the property at the given time based on the contribution of property controllers.
	 * @returns DzInt2 A 'raw' value for the property that will result in the property having the given value with the current controllers.
	 * @param {DzInt2} tm - The scene time at which to adjust the value.
	 * @param {DzInt2} val - The 'final' value desired for the property.
	 */
	adjustInt2Value(tm, val) {};
	/**
	 * @returns DzInt2 The default value of the property.
	 */
	getDefaultInt2Value() {};
	/**
	 * @returns DzInt2 The difference between the current value of the follow property and its default value at the current time. If no auto-follow property is set, or auto-follow is not enabled for this property, then this method returns 0.
	 */
	getInt2FollowValue() {};
	/**
	 * @returns DzInt2 The difference between the current value of the follow property and this properties default value tm. If no auto-follow property is set, or auto-follow is not enabled for this property, then this method returns 0.
	 * @param {DzTime} tm - The scene time for which to get the value.
	 */
	getInt2FollowValue(tm) {};
	/**
	 * @returns DzInt2 The value of the property at the current time.
	 */
	getInt2Value() {};
	/**
	 * @returns DzInt2 The value of the property at the given time.
	 * @param {DzTime} tm - The scene time to get the value for.
	 */
	getInt2Value(tm) {};
	/**
	 * @returns DzInt2 The value of the i'th key in the property.
	 * @param {Number} index - The index of the key to get the value for.
	 */
	getKeyInt2Value(i) {};
	/**
	 * @description This function is provided for the special case of ERC link redirection; sometimes called 'cross-talk'. For example, if Figure A (a piece of clothing, for example) is 'Fit To' Figure B, the ERC links on Figure A are redirected to follow channels on Figure B; this is how morphs on an item of clothing will follow morphs on the figure, etc. This function will provide the value of the property ignoring any redirection of ERC links. So, for a figure that is not 'Fit To' another figure, this will return the same value as getValue(). For a figure that is 'Fit To' another figure, this will return the value that the property would have if the ERC link had not been redirected.
	 * @returns DzInt2 The value of the property at the current time without any ERC link redirection.
	 */
	getLocalInt2Value() {};
	/**
	 * @description This function is provided for the special case of ERC link redirection; sometimes called 'cross-talk'. For example, if Figure A (a piece of clothing, for example) is 'Fit To' Figure B, the ERC links on Figure A are redirected to follow channels on Figure B; this is how morphs on an item of clothing will follow morphs on the figure, etc. This function will provide the value of the property ignoring any redirection of ERC links. So, for a figure that is not 'Fit To' another figure, this will return the same value as getValue(). For a figure that is 'Fit To' another figure, this will return the value that the property would have if the ERC link had not been redirected.
	 * @returns DzInt2 The value of the property at the given time without any ERC link redirection.
	 * @param {DzTime} tm - The scene time to get the local value for.
	 */
	getLocalInt2Value(tm) {};
	/**
	 * @description This function is provided to make it easy to get the 'keyed' value of the property without any modifications. When the value of a property is evaluated, first the value based on key interpolation is calculated, that value is then passed to each of the controllers on the property (ERC links for example) which can modify that value. This modified value is then returned as the value of the property by getInt2Value(). This function returns the value of the property before the application of the controllers; strictly the result of key interpolation.
	 * @returns DzInt2 The 'raw' value of the property at the given time - this is the actual value of the property without the contribution of property links, etc.
	 * @param {DzTime} tm - The scene time to get the raw value for.
	 */
	getRawInt2Value(tm) {};
	/**
	 * @description This function is provided to make it easy to get the 'keyed' value of the property without any modifications. When the value of a property is evaluated, first the value based on key interpolation is calculated, that value is then passed to each of the controllers on the property (ERC links for example) which can modify that value. This modified value is then returned as the value of the property by getInt2Value(). This function returns the value of the property before the application of the controllers; strictly the result of key interpolation.
	 * @returns DzInt2 The 'raw' value of the property at the current time; this is the actual value of the property without the contribution of property links, etc.
	 */
	getRawInt2Value() {};
	/**
	 * @description Sets the default value for this property.
	 * @param {DzInt2} val - The value to set the property to.
	 */
	setDefaultInt2Value(val) {};
	/**
	 * @description Sets the value for this property at the current time; or the default value if this property is not animatable.
	 * @param {DzInt2} val - The value to set.
	 */
	setInt2Value(val) {};
	/**
	 * @description Sets the value for this property at the given time; or the default value if this property is not animatable.
	 * @param {DzInt2} tm - The scene time to set the value at.
	 * @param {DzInt2} val - The value to set.
	 */
	setInt2Value(tm, val) {};
	/**
	 * @description Sets the value of the i'th key.
	 * @param {Number} i - The index of the key to change.
	 * @param {DzInt2} val - The new value for the key.
	 * @attention You are responsible to ensure the key indices are within the valid range.
	 */
	setKeyInt2Value(i, val) {};
	/**
	 * @description The same as calling setInt2Value( DzInt2 ).
	 */
	setRawInt2Value(val) {};
	/**
	 * @description The same as calling setInt2Value( DzTime, DzInt2 ).
	 */
	setRawInt2Value(tm, val) {};

}
/**
 * Since:
 */
class DzInteractiveInstructionObject extends QObject {
	/**
	 * @returns Object An Object, Array, Boolean, Number or String if the instruction has a member named name, otherwise null
	 */
	getMember(name) {};
	/**
	 * @returns Boolean true if the object has a member named name, otherwise false
	 */
	hasMember(name) {};
	/**
	 * @description Removes the member/value named name from the instruction.
	 */
	removeMember(name) {};
	/**
	 * @description Sets the member name of the instruction to value. A valid value depends on the type of instruction and can be one of Boolean, Number, String or Array.
	 */
	setMember(name, value) {};

}
/**
 * This class manages interactive lessons that the user can perform in the interface via lessonstripwgt_dz.
 * There is only one instance of this manager in an application. This instance is created and owned by DzMainWindow. Request the instance via DzMainWindow.getInteractiveLessonMgr().
 * See Also:
 */
class DzInteractiveLessonMgr extends QObject {
	/**
	 * @description The width of the progress indicator displayed above the instruction box.
	 * @type {Number}
	 */
	progressWidth;
	/**
	 * @description Starts the lesson using a list of instructions in a separate file.
	 * @param {String} path - The absolute path to a file that provides a list of instructions for the lesson.
	 */
	begin(path) {};
	/**
	 * @description Starts the lesson using the instructions list.
	 * @param {Array} instructions - The list of instructions for the lesson.
	 */
	begin(instructions) {};
	/**
	 * @returns Number The index of the current instruction within the lesson.
	 */
	currentIndex() {};
	/**
	 * @returns String The path of the current lesson.
	 */
	currentPath() {};
	/**
	 * @returns Boolean The query of the current instruction within the lesson.
	 */
	currentQuery() {};
	/**
	 * @description TODO:
	 * Add description.
	 * @returns Number
	 */
	currentQuery() {};
	/**
	 * @description TODO:
	 * Add description.
	 * @returns String
	 */
	currentQuery() {};
	/**
	 * @returns String The type of the current instruction within the lesson.
	 */
	currentType() {};
	/**
	 * @returns String A string representation of an "action" type instruction.
	 */
	getActionInstruction(classname, info, tag = "", locateOnly = false) {};
	/**
	 * @returns String A string representation of an "activity" type instruction.
	 */
	getActivityInstruction(activity, info, tag = "", locateOnly = false) {};
	/**
	 * @returns String A string representation of a "display" type instruction.
	 */
	getDisplayInstruction(info, button = "") {};
	/**
	 * @returns String A string representation of an instruction.
	 */
	getInstruction(type, query, info, tag = "", locateOnly = false) {};
	/**
	 * @returns String A string representation of an instruction if the type is valid, otherwise an empty string.
	 */
	getInstruction(type, query, info, tag = "", locateOnly = false) {};
	/**
	 * @returns String A string representation of an instruction.
	 */
	getInstruction(type, query, info, tag = "", locateOnly = false) {};
	/**
	 * @returns String A string representation of an instruction.
	 */
	getInstruction(type, query, info, tag = "", locateOnly = false) {};
	/**
	 * @returns String A string representation of an "layout" type instruction.
	 */
	getLayoutInstruction(layout, info, tag = "", locateOnly = false) {};
	/**
	 * @returns String A string representation of a "widget" type instruction.
	 */
	getWidgetInstruction(widgetPath, info, tag = "", locateOnly = false) {};
	/**
	 * @description TODO:
	 * Add description.
	 * @returns Array
	 */
	instructionTypes() {};
	/**
	 * @returns Boolean true if the lesson is currently running, otherwise false.
	 */
	isRunning() {};
	/**
	 * @description TODO:
	 * Add description.
	 */
	iterate() {};
	/**
	 * @description Skips the next instruction in the lesson.
	 */
	skip() {};
	/**
	 * @description Stops the lesson.
	 */
	stop() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when an instruction in an interactive lesson has been skipped.
	 * @signature `"skipped()"`
	 * @event
	 */
	skipped() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when an interactive lesson has started.
	 * @signature `"started()"`
	 * @event
	 */
	started() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when an interactive lesson has stepped to the next instruction.
	 * @signature `"stepped()"`
	 * @event
	 */
	stepped() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when an interactive lesson is stopped.
	 * @signature `"stopped(bool)"`
	 * @event
	 */
	stopped(success) {};

}
/**
 * Since:
 */
class DzInteractiveLessonObject extends QObject {
	/**
	 * @returns DzInteractiveInstructionObject A new DzInteractiveInstructionObject appended to the end of the interactive lesson.
	 */
	appendInstruction() {};
	/**
	 * @returns Number The number of instructions in the interactive lesson.
	 */
	count() {};
	/**
	 * @returns Number The index of the current instruction in the interactive lesson.
	 */
	currentIndex() {};
	/**
	 * @returns DzInteractiveInstructionObject A new DzInteractiveInstructionObject inserted into the interactive lesson at index position.
	 */
	insertInstruction(index) {};
	/**
	 * @returns DzInteractiveInstructionObject The instruction at index in the interactive lesson.
	 */
	instructionAt(index) {};
	/**
	 * @returns DzInteractiveInstructionObject The next instruction in the interactive lesson, or NULL if the last instruction.
	 */
	nextInstruction() {};

}
/**
 * TODO:
 * Add detailed description.
 */
class DzIntProperty extends DzNumericProperty {
	/**
	 * @description Default Constructor. Creates a non-animatable, non-user property.
	 */
	constructor() {};
	/**
	 * @param {String} name - The name of this property.
	 * @param {Boolean} canAnimate - If true, creates an animatable property.
	 * @param {Boolean} isUserProperty - If true, creates a user property; user properties are properties that can be added/deleted by users.
	 * @param {Number} defaultVal - Sets the default value of this property.
	 */
	constructor(name, canAnimate, isUserProperty, defaultVal = 0) {};
	/**
	 * @description Adjust the value of the property based on the contribution of property controllers.
	 * @returns Number A 'raw' value for the property that will result in the property having the given value with the current controllers.
	 * @param {Number} val - The 'final' value desired for the property.
	 */
	adjustValue(val) {};
	/**
	 * @description Adjust the value of the property at the given time based on the contribution of property controllers.
	 * @returns Number A 'raw' value for the property that will result in the property having the given value with the current controllers.
	 * @param {Number} tm - The scene time at which to adjust the value.
	 * @param {Number} val - The 'final' value desired for the property.
	 */
	adjustValue(tm, val) {};
	/**
	 * @returns Number The default value of the property.
	 */
	getDefaultValue() {};
	/**
	 * @returns Number The value of the i'th key in the property.
	 * @param {Number} i - The index of the key to get the value for.
	 */
	getKeyValue(i) {};
	/**
	 * @description This function is provided for the special case of ERC link redirection; sometimes called 'cross-talk'. For example, if Figure A (a piece of clothing, for example) is 'Fit To' Figure B, the ERC links on Figure A are redirected to follow channels on Figure B; this is how morphs on an item of clothing will follow morphs on the figure, etc. This function will provide the value of the property ignoring any redirection of ERC links. So, for a figure that is not 'Fit To' another figure, this will return the same value as getValue(). For a figure that is 'Fit To' another figure, this will return the value that the property would have if the ERC link had not been redirected.
	 * @returns Number The value of the property at the given time without any ERC link redirection.
	 * @param {DzTime} tm - The scene time to get the local value for.
	 */
	getLocalValue(tm) {};
	/**
	 * @description This function is provided for the special case of ERC link redirection; sometimes called 'cross-talk'. For example, if Figure A (a piece of clothing, for example) is 'Fit To' Figure B, the ERC links on Figure A are redirected to follow channels on Figure B; this is how morphs on an item of clothing will follow morphs on the figure, etc. This function will provide the value of the property ignoring any redirection of ERC links. So, for a figure that is not 'Fit To' another figure, this will return the same value as getValue(). For a figure that is 'Fit To' another figure, this will return the value that the property would have if the ERC link had not been redirected.
	 * @returns Number The value of the property at the current time without any ERC link redirection.
	 */
	getLocalValue() {};
	/**
	 * @returns Number The maximum allowable value of the property.
	 */
	getMax() {};
	/**
	 * @returns Number The minimum allowable value of the property.
	 */
	getMin() {};
	/**
	 * @description This function is provided to make it easy to get the 'keyed' value of the property without any modifications. When the value of a property is evaluated, first the value based on key interpolation is calculated, that value is then passed to each of the controllers on the property (ERC links for example) which can modify that value. This modified value is then returned as the value of the property by getValue(). This function returns the value of the property before the application of the controllers; strictly the result of key interpolation.
	 * @returns Number The 'raw' value of the property at the current time; this is the actual value of the property without the contribution of property links, etc.
	 */
	getRawValue() {};
	/**
	 * @description This function is provided to make it easy to get the 'keyed' value of the property without any modifications. When the value of a property is evaluated, first the value based on key interpolation is calculated, that value is then passed to each of the controllers on the property (ERC links for example) which can modify that value. This modified value is then returned as the value of the property by getValue(). This function returns the value of the property before the application of the controllers; strictly the result of key interpolation.
	 * @returns Number The 'raw' value of the property at the given time; this is the actual value of the property without the contribution of property links, etc.
	 * @param {DzTime} tm - The scene time to get the raw value for.
	 */
	getRawValue(tm) {};
	/**
	 * @returns Number The sensitivity setting for this property.
	 */
	getSensitivity() {};
	/**
	 * @returns Number The value of the property at the given time.
	 * @param {DzTime} tm - The scene time to get the value for.
	 */
	getValue(tm) {};
	/**
	 * @returns Number The value of the property at the current time.
	 */
	getValue() {};
	/**
	 * @description Sets the default value for this property.
	 * @param {Number} val - The value to set as the default for this property.
	 */
	setDefaultValue(val) {};
	/**
	 * @description Sets the value of the i'th key.
	 * @param {Number} i - The index of the key to set the value for.
	 * @param {Number} val - The value to set.
	 * @attention You are responsible to ensure the key index is within the valid range.
	 */
	setKeyValue(i, val) {};
	/**
	 * @description Set the maximum allowable value.
	 * @param {Number} max - The maximum value to set.
	 */
	setMax(max) {};
	/**
	 * @description Set the mininimum allowable value.
	 * @param {Number} min - The minimum value to set.
	 */
	setMin(min) {};
	/**
	 * @description Set the mininimum and maximum allowable values.
	 * @param {Number} min - The minimum value to set.
	 * @param {Number} max - The maximum value to set.
	 */
	setMinMax(min, max) {};
	/**
	 * @description Set the sensitivity for this property. This value describes the amount of change in the value of this property caused by adjustment in the interface, especially if limits are off.
	 * @param {Number} sens - The value to set.
	 */
	setSensitivity(sens) {};
	/**
	 * @description Sets the value for this property at the given time; or the default value if this property is not animatable. This function differs from setRawValue() in that it takes into account any controllers on the property such that calling setValue( getValue() ) should not change the value of the property.
	 * @param {Number} tm - The scene time to set the value at.
	 * @param {Number} val - The value to set.
	 */
	setValue(tm, val) {};
	/**
	 * @description Sets the value for this property at the current time; or the default value if this property is not animatable. This function differs from setRawValue() in that it takes into account any controllers on the property such that calling setValue( getValue() ) should not change the value of the property.
	 * @param {Number} val - The value to set.
	 */
	setValue(val) {};

}
/**
 * A DzIntSlider provides a control that allows a user to adjust a bounded integer `value.`
 */
class DzIntSlider extends DzWidget {
	/**
	 * @description Creates a slider as a child of the given parent widget.
	 * @param {DzWidget} parent - The widget parent for the slider.
	 */
	constructor(parent) {};
	/**
	 * @description Holds whether or not the slider obeys its limits. false by default.
	 * @type {Boolean}
	 */
	clamped;
	/**
	 * @description Holds the default value of the slider.
	 * @type {Number}
	 */
	defaultValue;
	/**
	 * @description Holds whether or not the slider text is displayed as a percentage value. false by default.
	 * @type {Boolean}
	 */
	displayAsPercent;
	/**
	 * @description Holds whether or not editing the slider text causes the edit field to consume the full height/width of the slider. false by default.
	 * @type {Boolean}
	 */
	fullLengthEdit;
	/**
	 * @description If true, the slider is considered to have an 'indeterminate' or '<?>' value. false by default.
	 * @type {Boolean}
	 */
	indeterminate;
	/**
	 * @description Holds whether or not the value is currently being edited. (Read Only)
	 * @type {Boolean}
	 */
	isEditing;
	/**
	 * @description Holds the label text for the slider.
	 * @type {String}
	 */
	label;
	/**
	 * @description Holds whether or not the slider's label is visible.
	 * @type {Boolean}
	 */
	labelVisible;
	/**
	 * @description Holds the maximum value of the slider. Any attempt to set this to a value that is less than the current min will fail.
	 * @type {Number}
	 */
	max;
	/**
	 * @description Holds the minimum value of the slider. Any attempt to set this to a value that is greater than the current max will fail.
	 * @type {Number}
	 */
	min;
	/**
	 * @description Holds whether or not the default value is restorable if the user holds the [Alt] key when clicked.
	 * @type {Boolean}
	 */
	restorable;
	/**
	 * @description Holds the sensitivity of the slider.
	 * @type {Number}
	 */
	sensitivity;
	/**
	 * @description Holds the text of the slider. (Read Only)
	 * @type {String}
	 */
	text;
	/**
	 * @description Holds whether or not the slider text is editable by the user. false by default.
	 * @type {Boolean}
	 */
	textEditable;
	/**
	 * @description Holds whether or not the slider text is visible to the user. true by default.
	 * @type {Boolean}
	 */
	textVisible;
	/**
	 * @description Holds the current value of the slider.
	 * @type {Number}
	 */
	value;
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the user cancels an edit of the slider.
	 * @signature `"editCancelled()"`
	 * @event
	 */
	editCancelled() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the user releases the slider.
	 * @signature `"editEnd()"`
	 * @event
	 */
	editEnd() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the user starts dragging the slider.
	 * @signature `"editStart()"`
	 * @event
	 */
	editStart() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the value of the slider changes, passes the new value.
	 * @signature `"valueChanged(int)"`
	 * @event
	 */
	valueChanged(value) {};

}
/**
 * Deprecated
 * Exists `only` to keep code written prior to 4.6.2.23 working. Do not use in new code. Use DzTextureComponent instead.
 */
class DzInvertManip {
	/**
	 * @description Holds whether or not the manipulater is active
	 */
	constructor(onOff = false) {};
	/**
	 * @description TODO:
	 * Add description.
	 * @type {Boolean}
	 */
	on;
	/**
	 * @returns Boolean true if the image's colors will be inverted, otherwise false.
	 */
	isOn() {};
	/**
	 * @description Sets whether or not the invert manipulator is applied.
	 * @param {Boolean} onOff - If true, the manipulator is applied, if false, the image's colors are not inverted.
	 */
	setOn(onOff) {};

}
/**
 * 
 */
class DzIrayRenderer extends DzRenderer {
	/**
	 * @description Default Constructor.
	 */
	constructor() {};
	/**
	 * @returns Boolean
	 * @since 4.12.1.81
	 */
	getAllowCPUFallback() {};
	/**
	 * @returns Boolean
	 * @since 4.12.1.81
	 */
	getAllowGPUDetection() {};
	/**
	 * @returns Number The CPU load limit for the NVIDIA Iray renderer.
	 * @since 4.12.1.81
	 */
	getCPULoadLimit() {};
	/**
	 * @returns Boolean true if CPU thread affinity is enabled, otherwise false.
	 * @since 4.12.1.81
	 */
	getCPUThreadAffinityEnabled() {};
	/**
	 * @returns Boolean
	 * @since 4.12.1.81
	 */
	getGPUDriverCheck() {};
	/**
	 * @returns Number The GPU load limit for the NVIDIA Iray renderer.
	 * @since 4.12.1.81
	 */
	getGPULoadLimit() {};
	/**
	 * @returns Number
	 * @since 4.12.1.81
	 */
	getHighThreshold() {};
	/**
	 * @returns Number
	 * @since 4.12.1.81
	 */
	getMediumThreshold() {};
	/**
	 * @returns Number
	 * @since 4.12.1.81
	 */
	getNVLINKPeerGroupSize() {};
	/**
	 * @returns DzElement The element that holds the properties for this renderer.
	 */
	getPropertyHolder() {};
	/**
	 * @returns Boolean true if this renderer is currently performing an interactive progressive render, otherwise false.
	 */
	isIPRRendering() {};
	/**
	 * @since 4.12.1.81
	 */
	setAllowCPUFallback(onOff) {};
	/**
	 * @since 4.12.1.81
	 */
	setAllowGPUDetection(onOff) {};
	/**
	 * @description Sets the CPU load limit for the NVIDIA Iray renderer.
	 * @returns Boolean true if the limit was successfully set, false if the new limit was not set (e.g., invalid - less than 1.0).
	 * @since 4.12.1.81
	 * @param {Number} limit - The new CPU load limit. This value may be clamped against some upper bound imposed by license restrictions.
	 */
	setCPULoadLimit(limit) {};
	/**
	 * @description Sets the affinity of CPU threads.
	 * @returns Boolean true if thread affinity was successfully set, otherwise false.
	 * @since 4.12.1.81
	 * @param {Boolean} onOff - If true, threads are bound to the CPU they are currently running on. If false (default), the operating system is free to migrate threads between CPUs as it sees fit (which may suffer from cache misses).
	 * @attention This setting is not supported on macOS. This setting only affects internal threads that are used to execute renders. Application threads are not affected. Changing this value does not affect a render that is currently being executed, it only affects subsequently started renders.
	 */
	setCPUThreadAffinityEnabled(onOff) {};
	/**
	 * @since 4.12.1.81
	 */
	setGPUDriverCheck(onOff) {};
	/**
	 * @description Sets the GPU load limit for the NVIDIA Iray renderer.
	 * @returns Boolean true if the limit was successfully set, false if the new limit was not set (e.g., invalid - less than 1.0).
	 * @since 4.12.1.81
	 * @param {Number} limit - The new GPU load limit. This value may be clamped against some upper bound imposed by license restrictions.
	 */
	setGPULoadLimit(limit) {};
	/**
	 * @since 4.12.1.81
	 */
	setHighThreshold(val) {};
	/**
	 * @since 4.12.1.81
	 */
	setMediumThreshold(val) {};
	/**
	 * @since 4.12.1.81
	 */
	setNVLINKPeerGroupSize(size) {};

}
/**
 * 
 */
class DzLabel extends DzWidget {
	/**
	 * @description Holds the elide mode to be used for the text on this label.
	 * @since 4.10.0.22
	 * @param {DzWidget} parent - The widget parent for the label.
	 */
	constructor(parent) {};
	/**
	 * @description Holds the alignment of the text displayed in the label.
	 * @type {DzWidget}
	 */
	alignment;
	/**
	 * @description Holds the name of the text style used to draw the label on this label.
	 * @type {DzWidget}
	 */
	elideMode;
	/**
	 * @description Holds whether or not text is selected. (Read Only)
	 * @type {Boolean}
	 */
	hasSelectedText;
	/**
	 * @description Holds the label's indent in pixels from its current alignment.
	 * @type {Number}
	 */
	indent;
	/**
	 * @description Holds whether or not external links will be opened when clicked.
	 * @type {Boolean}
	 */
	openExternalLinks;
	/**
	 * @description The pixmap shown on the label. If the pixmap is monochrome (e.g. its depth is 1) and it does not have a mask, the pixmap will be its own mask. This allows transparent bitmaps to be drawn, which are important for toggle buttons. undefined if no pixmap is set.
	 * @type {Pixmap}
	 */
	pixmap;
	/**
	 * @description TODO:
	 * Add description.
	 * @type {String}
	 */
	primitive;
	/**
	 * @description Holds whether or not the contents of the label are scaled to fill the available space.
	 * @type {Boolean}
	 */
	scaledContents;
	/**
	 * @description Holds the text that is currently selected. (Read Only)
	 * @type {String}
	 */
	selectedText;
	/**
	 * @description Holds the text displayed in the label.
	 * @type {String}
	 */
	text;
	/**
	 * @description Holds the value that is used to determine if the text string should be interpreted as plain, rich or log text.
	 * @type {TextFormat}
	 */
	textFormat;
	/**
	 * @description Holds the value that is used to determine how the label reacts to user input.
	 * @type {DzWidget}
	 */
	textInteractionFlags;
	/**
	 * @description Holds the name of the primitive element used to draw this label.
	 * @type {String}
	 */
	textStyle;
	/**
	 * @description Holds whether or not the text is wrapped where necessary; i.e., word-breaks.
	 * @type {Boolean}
	 */
	wordWrap;
	/**
	 * @description ENUM: The text string is interpreted as a plain text.
	 */
	PlainText;
	/**
	 * @description ENUM: The text string is interpreted as a rich text.
	 */
	RichText;
	/**
	 * @description ENUM: The text is interpreted as automatically.
	 */
	AutoText;
	/**
	 * @returns DzWidget The buddy widget for the label, undefined if none.
	 */
	buddy() {};
	/**
	 * @description Clears the text displayed in the label.
	 */
	clear() {};
	/**
	 * @description Sets the buddy widget for this label.
	 * @param {DzWidget} buddy - The widget to set.
	 */
	setBuddy(buddy) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description TODO: Add Description
	 * @signature `elideModeChanged()`
	 * @event
	 */
	elideModeChanged(mode) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description TODO: Add Description
	 * @signature `primitiveChanged()`
	 * @event
	 */
	primitiveChanged(name) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description TODO: Add Description
	 * @signature `TODO: Add Description`
	 * @event
	 */
	textFormatChanged(format) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description TODO: Add Description
	 * @signature `textInteractionFlagsChanged()`
	 * @event
	 */
	textInteractionFlagsChanged(flags) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description TODO: Add Description
	 * @signature `textStyleChanged()`
	 * @event
	 */
	textStyleChanged(name) {};

}
/**
 * An asset save filter for saving a Layered Image(s) Preset in the DSON format.
 * See Also:
 */
class DzLayerAssetFilter extends DzAssetFileOutFilter {
	/**
	 * @description TODO:
	 * Add description.
	 */
	constructor() {};

}
/**
 * Deprecated
 * This class exists only to keep code written prior to 4.6.2.23 working. Do not use in new code. Use DzLayeredTexture instead.
 * This class uses explicit sharing to make it very efficient to copy. This does, however, mean that modifying one copy of the image modifies all copies. DzLayeredImage does not currently support detach() or copy() functions for creating unique instances or deep copies.
 */
class DzLayeredImage extends DzBase {
	/**
	 * @description Add a layer to the image.
	 * @param {DzImageLayer} layer - The layer to add to the image. The image takes ownership of this object and deletes it when it is no longer needed.
	 */
	addLayer(layer) {};
	/**
	 * @returns Image An image that is the final result of merging all the visible layers in the image.
	 * @param {Boolean} freeMem - If true, any image layers loaded from file will be unloaded immediately after flattening. They will have to be re-loaded again for future flattening operations.
	 */
	getFlattenedImage(freeMem = false) {};
	/**
	 * @returns DzImageLayer (deprecated) The layer at index which. This object is owned by the image.
	 */
	getLayer(which) {};
	/**
	 * @returns Number The number of layers in this image.
	 */
	getLayerCount() {};
	/**
	 * @returns Size The size of the canvas for this image.
	 */
	getSize() {};
	/**
	 * @description Insert a layer at a specific index.
	 * @param {DzImageLayer} layer - The layer to add to the image. The image takes ownership of this object and deletes it when it is no longer needed.
	 * @param {Number} idx - The index in the list to insert the layer at.
	 */
	insertLayer(layer, idx) {};
	/**
	 * @description Adjust layer order.
	 * @param {Number} from - The index of the layer to move.
	 * @param {Number} to - The index in the list to move the layer to.
	 */
	moveLayer(from, to) {};
	/**
	 * @description Remove the specified layer.
	 * @returns Boolean true if the layer was removed from the image, otherwise false.
	 * @param {DzImageLayer} layer - The layer to remove from the image. The layer will be deleted if it is owned by the image.
	 */
	removeLayer(layer) {};
	/**
	 * @description Replace a layer with a new layer.
	 * @returns Boolean true if the layer was successfully replaced, otherwise false.
	 * @param {DzImageLayer} oldLayer - A pointer to the layer to remove from the image. The layer will be deleted if it is owned by the image.
	 * @param {DzImageLayer} newLayer - The new layer to add to the image in place of the old layer. The image takes ownership of this object and deletes it when it is no longer used.
	 */
	replaceLayer(oldLayer, newLayer) {};
	/**
	 * @description Sets the size of the image's canvas.
	 * @param {Size} size - The new size for the image's canvas.
	 */
	setSize(size) {};
	/**
	 * @returns Boolean true if the image was successfully copied to img, otherwise false.
	 * @param {DzLayeredTexture} img - The layered texture to copy/convert the layered image into.
	 */
	toLayeredTexture(img) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description TODO: Add Description
	 * @signature `layerListChanged()`
	 * @event
	 */
	layerListChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emits a signal that the size of canvas has changed.
	 * @signature `"sizeChanged(const QSize&)"`
	 * @event
	 */
	sizeChanged(size) {};

}
/**
 * This is a sharable object that stores information for a layered texture (image map) that is used in OpenGL. Do not create a layered texture, rather, request one from DzImageMgr - this insures that there is only one instance of a given image in memory at a time, and also ensures that necessary conversions for rendering the image via OpenGL and offline renderers occurs correctly.
 */
class DzLayeredTexture extends DzRefCountedItem, DzTexture {
	/**
	 * @description Holds the author of the file for this texture. (Read Only)
	 * @type {DzAuthor}
	 */
	assetAuthor;
	/**
	 * @description Holds the revision version of the asset file for this texture. (Read Only)
	 * @type {DzVersion}
	 */
	assetFileRevision;
	/**
	 * @description Holds the asset id for this texture.
	 * @type {String}
	 */
	assetId;
	/**
	 * @description Holds the modified date of the asset file for this texture. (Read Only)
	 * @type {Date}
	 */
	assetModifiedDate;
	/**
	 * @description Holds whether or not the asset for this texture needs to be saved. (Read Only)
	 * @type {Boolean}
	 */
	assetNeedSave;
	/**
	 * @description Holds the URI of the asset source for this texture; only valid when the asset is in an embedded state - i.e. modified. (Read Only)
	 * @type {DzUri}
	 */
	assetSource;
	/**
	 * @description Holds the asset URI for this texture. (Read Only)
	 * @type {DzUri}
	 */
	assetUri;
	/**
	 * @description Holds the size of the texture.
	 * @type {Boolean}
	 */
	size;
	/**
	 * @description Adds a layer to (the bottom of) this layered texture.
	 * @param {DzTextureLayer} layer - The layer to add.
	 */
	addLayer(layer) {};
	/**
	 * @description Must be called before editing and paired with a call to endEditing().
	 */
	beginEditing() {};
	/**
	 * @description Copies the settings of the given layered texture to this layered texture.
	 * @returns DzLayeredTexture
	 * @param {DzLayeredTexture} texture - The layered texture to cupy settings from.
	 */
	copyFrom(texture) {};
	/**
	 * @description Creates a new (white) layer with the specified name in this layered texture.
	 * @returns DzTextureLayer The new layer.
	 * @param {String} name - The name to assign to the layer.
	 */
	createLayer(name) {};
	/**
	 * @description Must be called after editing is completed and after beginEditing() is called.
	 */
	endEditing() {};
	/**
	 * @returns Number The index of the found layer (if any), otherwise -1.
	 * @param {DzTextureLayer} layer - The layer to find the index of in this layered texture.
	 */
	findLayer(layer) {};
	/**
	 * @returns DzTextureLayer The layer at the specified index (if valid), otherwise null.
	 * @param {Number} index - The index of the layer to get.
	 */
	getLayer(index) {};
	/**
	 * @returns Number The number of layers in this layered texture.
	 */
	getNumLayers() {};
	/**
	 * @returns String The full path of the image file for this layered texture.
	 */
	getSourceDSI() {};
	/**
	 * @description Inserts a layer into this layered texture at the specified index.
	 * @param {DzTextureLayer} index - The index to insert the layer at.
	 * @param {DzTextureLayer} layer - The layer to insert.
	 */
	insertLayer(index, layer) {};
	/**
	 * @returns Boolean true if the layer is moved, otherwise false.
	 * @param {Number} fromIndex - The index of the layer to move.
	 * @param {Number} toIndex - The index to move the layer to.
	 */
	moveLayer(fromIndex, toIndex) {};
	/**
	 * @description Refreshes each layer of this layered texture.
	 */
	refeshLayeredTexture() {};
	/**
	 * @description Removes (deletes) all layers from this layered texture.
	 */
	removeAllLayers() {};
	/**
	 * @returns Boolean true if the specified layer is removed from this layered texture, otherwise false.
	 * @param {Number} index - The index of the layer to remove (and delete).
	 */
	removeLayer(index) {};
	/**
	 * @returns Boolean true if the specified layer is removed from this layered texture, otherwise false.
	 * @param {DzTextureLayer} layer - The layer to remove (and delete).
	 */
	removeLayer(layer) {};
	/**
	 * @returns Boolean true if replacing the layer succeeds, otherwise false.
	 * @param {DzTextureLayer} oldLayer - The layer in this layered texture to replace.
	 * @param {DzTextureLayer} newLayer - The new layer to replace the old layer with.
	 */
	replaceLayer(oldLayer, newLayer) {};
	/**
	 * @description Removes the layer at the specified index.
	 * @returns DzTextureLayer The layer at the specified index (if valid), otherwise null.
	 * @param {Number} index - The index of the layer to remove.
	 */
	takeLayer(index) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted immediately before layers are inserted into this layered texture.
	 * @signature `"aboutToInsertLayers(int,int)"`
	 * @event
	 */
	aboutToInsertLayers(index, count) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted immediately before layers are removed from this layered texture.
	 * @signature `"aboutToRemoveLayers(int,int)"`
	 * @event
	 */
	aboutToRemoveLayers(index, count) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the layered texture has been modified.
	 * @signature `"assetModified()"`
	 * @event
	 */
	assetModified() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted after the layered texture has been saved.
	 * @signature `"assetWasSaved()"`
	 * @event
	 */
	assetWasSaved() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the layer list has changed.
	 * @signature `"layerListChanged()"`
	 * @event
	 */
	layerListChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when layers are inserted into this layered texture.
	 * @signature `"layersInserted(int,int)"`
	 * @event
	 */
	layersInserted(index, count) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when layers are removed from this layered texture.
	 * @signature `"layersRemoved(int,int)"`
	 * @event
	 */
	layersRemoved(index, count) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the size of this layered texture has changed.
	 * @signature `"sizeChanged(const QSize&)"`
	 * @event
	 */
	sizeChanged(size) {};

}
/**
 * 
 */
class DzLayout extends QObject {
	/**
	 * @description Whether the parent widget's children are automatically added to the layout or not.
	 * @type {Boolean}
	 */
	autoAdd;
	/**
	 * @description The margin between the widgets in the layout and the parent widget's edge
	 * @type {Number}
	 */
	margin;
	/**
	 * @description The spacing between the widgets in the layout
	 * @type {Number}
	 */
	spacing;
	/**
	 * @description Adds the given widget to the items managed by this layout
	 * @param {DzWidget} item - The widget to add
	 */
	addWidget(item) {};

}
/**
 * Provides a LCD-style number display.
 * The following digits and symbols can be displayed:
 * 0/O, 1, 2, 3, 4, 5/S, 6, 7, 8, 9/g, - (minus), . (decimal point), A, B, C, D, E, F, h, H, L, o, P, r, u, U, Y, : (colon), &deg; (degree sign - which is specified as single quote in the string) and space.
 */
class DzLCDNumber extends DzWidget {
	/**
	 * @description Creates a LCD number widget as a child of the given parent widget.
	 * @param {DzWidget} parent - The widget parent for the LCD number.
	 */
	constructor(parent) {};
	/**
	 * @description Holds the display mode of the number.
	 * @type {Mode}
	 */
	mode;
	/**
	 * @description Holds the number of digits displayed in the widget.
	 * @type {Number}
	 */
	numDigits;
	/**
	 * @description Holds the style of the number.
	 * @type {SegmentStyle}
	 */
	segmentStyle;
	/**
	 * @description Holds whether or not the decimal point is drawn between digits; takes up a digit of its own if false.
	 * @type {Boolean}
	 */
	smallDecimalPoint;
	/**
	 * @description Holds the value of the number.
	 * @type {Number}
	 */
	value;
	/**
	 * @description ENUM: Hexadecimal (base 16)
	 */
	Hex;
	/**
	 * @description ENUM: Decimal (base 10)
	 */
	Dec;
	/**
	 * @description ENUM: Octal (base 8)
	 */
	Oct;
	/**
	 * @description ENUM: Binary (base 2)
	 */
	Bin;
	/**
	 * @description ENUM: Same as Hex
	 */
	HEX;
	/**
	 * @description ENUM: Same as Dec
	 */
	DEC;
	/**
	 * @description ENUM: Same as Oct
	 */
	OCT;
	/**
	 * @description ENUM: Same as Bin
	 */
	BIN;
	/**
	 * @description ENUM: Raised segments filled with the background color
	 */
	Outline;
	/**
	 * @description ENUM: Raised segments filled with the foreground color
	 */
	Filled;
	/**
	 * @description ENUM: Flat segments filled with the foreground color
	 */
	Flat;
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the number is set to a value that exceeds the number of digits.
	 * @signature `"overflow()"`
	 * @event
	 */
	overflow() {};

}
/**
 * TODO:
 * Add detailed description.
 */
class DzLight extends DzCamera {
	/**
	 * @description ENUM: The light does not utilize shadows.
	 */
	None;
	/**
	 * @description ENUM: The light utilizes a Deep Shadow Map (DSM).
	 */
	DeepShadowMap;
	/**
	 * @description ENUM: The light utilizes ray-traced shadows.
	 */
	Raytraced;
	/**
	 * @returns Array A list of [trimmed] categories on this light.
	 * @since 4.8.0.7
	 */
	getCategories() {};
	/**
	 * @returns DzStringProperty The property that holds the categories for this light.
	 * @since 4.8.0.7
	 */
	getCategoriesControl() {};
	/**
	 * @returns Color The current diffuse light color, including adjustment for intensity.
	 */
	getDiffuseColor() {};
	/**
	 * @returns ShadowType The enumerated value indicating the type of shadow utilized by the light.
	 */
	getShadowType() {};
	/**
	 * @returns DzEnumProperty The property used to indicate the type of shadow utilized by the light.
	 */
	getShadowTypeControl() {};
	/**
	 * @description Calculates the direction that light is being cast from this light.
	 * @returns DzVec3 The current world-space light-casting direction vector.
	 */
	getWSDirection() {};
	/**
	 * @returns Boolean true if this is an area light source, otherwise false. If true, the light source center will be given by the position of the light. Additional light geometry will be defined in the derived classes.
	 */
	isAreaLight() {};
	/**
	 * @description Indicates if this light is an infinite directional light.
	 * @returns Boolean true if this light is directional, otherwise (e.g., omni-directional) false.
	 */
	isDirectional() {};
	/**
	 * @returns Boolean true if this light is currently on, otherwise false.
	 */
	isOn() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the categories that a light is in changes.
	 * @signature `"categoriesChanged()"`
	 * @event
	 */
	categoriesChanged() {};

}
/**
 * An asset save filter for saving a Light(s) Preset in the DSON format.
 * See Also:
 */
class DzLightAssetFilter extends DzAssetFileOutFilter {
	/**
	 * @description TODO:
	 * Add description.
	 */
	constructor() {};

}
/**
 * TODO:
 * Add detailed description.
 */
class DzLine3 extends Object {
	/**
	 * @description Default Constructor. Creates an uninitialized line.
	 */
	constructor() {};
	/**
	 * @description Creates a quaternion by parsing a string.
	 * @param {String} line - A string representation of the line in the form "[[ originX, originY, originZ ],[ endX, endY, endZ ]]"
	 */
	constructor(line) {};
	/**
	 * @description Copy Constructor.
	 */
	constructor(line) {};
	/**
	 * @description Parameterized Constructor.
	 * @param {DzVec3} origin - The origin point of the line.
	 * @param {DzVec3} end - The end point of the line.
	 */
	constructor(origin, end) {};
	/**
	 * @description Holds the line's ending point in three dimensional space.
	 * @type {DzVec3}
	 */
	end;
	/**
	 * @description Holds the line's starting point in three dimensional space.
	 * @type {DzVec3}
	 */
	origin;
	/**
	 * @returns DzVec3 The vector direction of this line (end - origin).
	 * @since 4.11.0.216
	 */
	getDirection() {};
	/**
	 * @returns DzVec3 The point with the given parametric distance along the line.
	 * @since 4.11.0.216
	 */
	getPoint(t) {};
	/**
	 * @returns Number The length of the line given a parametric distance along the line.
	 * @since 4.11.0.216
	 */
	length(t = 1.0) {};
	/**
	 * @description Tests the intersection of two lines. This line and the given line are assumed to be infinitely long in both directions (i.e. the intersection can be outside the origin-end segment of either line).
	 * @returns Object An object where the "intersects" property represents whether or not this line intersects with the given line, and the "intersection" property represents the intersection point if the lines intersect.
	 * @since 4.11.0.216
	 * @param {DzLine3} line - The line to test intersection with.
	 * @param {Number} tolerance - If not zero, specifies the maximum distance between lines that will be counted as an intersection.
	 */
	linesIntersect(line, tolerance = 0.0) {};
	/**
	 * @returns Object An object where the "distance" property represents the minimum distance between this line and another line, the "s" property represents the parametric distance along this line, and the "t" property represents the parametric distance along the given line.
	 * @since 4.11.0.216
	 * @param {DzLine3} line - The line to calculate min distance from.
	 */
	minDistanceFromLine(line) {};
	/**
	 * @returns Object An object where the "distance" property represents the minimum distance squared between this line and another line, the "s" property represents the parametric distance along this line, and the "t" property represents the parametric distance along the given line.
	 * @since 4.11.0.216
	 * @param {DzLine3} line - The line to calculate min distance from.
	 */
	minDistanceFromLineSquared(line) {};
	/**
	 * @returns Object An object where the "distance" property represents the minimum distance between this line and a point, and the "s" property represents the parametric distance along the line to the minimum perpendicular distance point.
	 * @since 4.11.0.216
	 * @param {DzVec3} pnt - The point to calculate the min distance from.
	 * @param {Boolean} clampEnds - If true, the parametric distance is clamped to the [0-1] range and the nearest point to the line segment is returned rather than the nearest distance to the infinite line formed by the two end points of the segment.
	 */
	minDistanceFromPoint(pnt, clampEnds = false) {};
	/**
	 * @returns Object An object where the "distance" property represents the minimum distance squared between this line and a point, and the "s" property represents the parametric distance along the line to the minimum perpendicular distance point.
	 * @since 4.11.0.216
	 * @param {DzVec3} pnt - The point to calculate the min distance from.
	 * @param {Boolean} clampEnds - If true, the parametric distance is clamped to the [0-1] range and the nearest point to the line segment is returned rather than the nearest distance to the infinite line formed by the two end points of the segment.
	 */
	minDistanceFromPointSquared(pnt, clampEnds = false) {};
	/**
	 * @returns Object An object where the "distance" property represents the minimum distance between this line and a ray, the "seg_t" property represents the parametric distance along this line, and the "ray_t" property represents the parametric distance along the given ray.
	 * @since 4.11.0.216
	 * @param {DzLine3} ray - The ray to calculate min distance from.
	 */
	minDistanceFromRay(ray) {};
	/**
	 * @returns Object An object where the "distance" property represents the minimum distance squared between this line and a ray, the "seg_t" property represents the parametric distance along this line, and the "ray_t" property represents the parametric distance along the given ray.
	 * @since 4.11.0.216
	 * @param {DzLine3} ray - The ray to calculate min distance from.
	 */
	minDistanceFromRaySquared(ray) {};
	/**
	 * @description Reverses the direction of the line by mirroring the endpoint.
	 * @since 4.11.0.216
	 */
	negate() {};
	/**
	 * @description Calculates the intersection of this line and the plane specified. The plane is defined by a point on the plane and the normal to the plane.
	 * @returns Object An object where the "intersects" property represents whether or not this line intersects with the given plane, the "t" property represents the parametric distance along this line to the intersection point (if there is one), and the "intersection" property represents the intersection point if the line and plane intersect.
	 * @since 4.11.0.216
	 * @param {DzVec3} planePoint - A point on the plane (to define the plane).
	 * @param {DzVec3} planeNormal - The normal to the plane (to define the plane).
	 */
	planeIntersect(planePoint, planeNormal) {};
	/**
	 * @description Tests the intersection of two line segments.
	 * @returns Object An object where the "intersects" property represents whether or not this line segment intersects with the given line segment, and the "intersection" property represents the intersection point if the lines intersect.
	 * @since 4.11.0.216
	 * @param {DzLine3} line - The line to test intersection with.
	 * @param {Number} tolerance - If not zero, specifies the maximum distance between lines that will be counted as an intersection.
	 */
	segmentsIntersect(line, tolerance = 0.0) {};
	/**
	 * @description Sets the line to have the length given by setting the endpoint relative to the current origin.
	 * @since 4.11.0.216
	 */
	setLength(length) {};
	/**
	 * @description Swaps the origin for the endpoint.
	 * @since 4.11.0.216
	 */
	swapEnds() {};
	/**
	 * @returns String A string representation of this line in the form "[[ originX, originY, originZ ],[ endX, endY, endZ ]]".
	 */
	toString() {};

}
/**
 * TODO:
 * Add detailed description.
 */
class DzLinearPointLight extends DzPointLight {
	/**
	 * @description Default Constructor. Creates a new linear point light.
	 */
	constructor() {};
	/**
	 * @returns Number The distance from the origin of the node where the intensity reaches 0.
	 * @since 4.9.3.145
	 */
	getFallOffEnd() {};
	/**
	 * @returns DzFloatProperty The property that controls the distance from the origin of the node where the intensity reaches 0.
	 */
	getFallOffEndControl() {};
	/**
	 * @returns Number The distance from the origin of the node where the intensity begins to decrease.
	 * @since 4.9.3.145
	 */
	getFallOffStart() {};
	/**
	 * @returns DzFloatProperty The property that controls the distance from the origin of the node where the intensity begins to decrease.
	 */
	getFallOffStartControl() {};
	/**
	 * @description Sets the distance from the origin of the node where the intensity reaches 0.
	 * @since 4.9.3.145
	 * @param {Number} end - The distance from the origin to set.
	 */
	setFallOffEnd(end) {};
	/**
	 * @description Sets the distance from the origin of the node where the intensity begins to decrease.
	 * @since 4.9.3.145
	 * @param {Number} start - The distance from the origin to set.
	 */
	setFallOffStart(start) {};

}
/**
 * 
 */
class DzLineEdit extends DzWidget {
	/**
	 * @description Creates a line edit as a child of the given parent widget.
	 * @param {DzWidget} parent - The widget parent for the editor.
	 */
	constructor(parent) {};
	/**
	 * @description Holds whether or not the input satisfies the inputMask and the validator. (Read Only)
	 * @type {Boolean}
	 */
	acceptableInput;
	/**
	 * @description Holds the alignment of the text displayed in the editor.
	 * @type {DzWidget}
	 */
	alignment;
	/**
	 * @description Holds the position of the cursor in the editor.
	 * @type {Number}
	 */
	cursorPosition;
	/**
	 * @description Holds the value that determines how the text entered is displayed to the user.
	 * @type {EchoMode}
	 */
	echoMode;
	/**
	 * @description Holds whether or not the editor is drawn with a frame.
	 * @type {Boolean}
	 */
	frame;
	/**
	 * @description Holds whether or not text is selected. (Read Only)
	 * @type {Boolean}
	 */
	hasSelectedText;
	/**
	 * @description Holds the input mask for the editor. Set this to an empty string to clear the input mask.
	 * @type {String}
	 */
	inputMask;
	/**
	 * @description Holds the maximum length of the text in the editor.
	 * @type {Number}
	 */
	maxLength;
	/**
	 * @description Holds whether or not the text in the editor has been modified. (Read Only < 4.9.3.93)
	 * @type {Boolean}
	 */
	modified;
	/**
	 * @description Holds the text string displayed in the editor when its text string is empty.
	 * @type {String}
	 */
	placeholderText;
	/**
	 * @description Holds whether or not the text in the editor can be edited by the user.
	 * @type {Boolean}
	 */
	readOnly;
	/**
	 * @description Holds whether or not a redo operation is available. (Read Only)
	 * @type {Boolean}
	 */
	redoAvailable;
	/**
	 * @description Holds the selected text (if any) of the editor.
	 * @type {String}
	 */
	selectedText;
	/**
	 * @description Holds the text value of the editor.
	 * @type {String}
	 */
	text;
	/**
	 * @description Holds whether or not an undo operation is available. (Read Only)
	 * @type {Boolean}
	 */
	undoAvailable;
	/**
	 * @description ENUM: Display characters as they are entered.
	 */
	Normal;
	/**
	 * @description ENUM: Do not display anything. This may be appropriate for passwords where even the length of the password should be kept secret.
	 */
	NoEcho;
	/**
	 * @description ENUM: Display asterisks instead of the characters actually entered.
	 */
	Password;
	/**
	 * @description ENUM: Display characters as they are entered while editing otherwise display asterisks.
	 */
	PasswordEchoOnEdit;
	/**
	 * @description If text is currently selected, it will be deleted and the cursor moved to the beginning of the selection. If no text is selected, the cursor will be moved one character to the left and the character will be deleted.
	 */
	backspace() {};
	/**
	 * @description Clears the text in the editor.
	 */
	clear() {};
	/**
	 * @description Deprecated
	 */
	clearModified() {};
	/**
	 * @description Copies the selected text into the clipboard.
	 */
	copy() {};
	/**
	 * @description Moves the cursor backward the given number of characters.
	 * @param {Boolean} mark - If true, each character that is stepped over will be added to the current selection.
	 * @param {Number} steps - The number of characters to move the cursor.
	 */
	cursorBackward(mark = false, steps = 1) {};
	/**
	 * @description Moves the cursor forward the given number of characters.
	 * @param {Boolean} mark - If true, each character that is stepped over will be added to the current selection.
	 * @param {Number} steps - The number of characters to move the cursor.
	 */
	cursorForward(mark = false, steps = 1) {};
	/**
	 * @description Moves the cursor backward one word.
	 * @param {Boolean} mark - If true, the word will be added to the current selection.
	 * @param {Number} steps - The number of words to move the cursor. (since 4.9.3.93)
	 */
	cursorWordBackward(mark = false, steps = 1) {};
	/**
	 * @description Moves the cursor forward one word.
	 * @param {Boolean} mark - If true, the word will be added to the current selection.
	 * @param {Number} steps - The number of words to move the cursor. (since 4.9.3.93)
	 */
	cursorWordForward(mark = false, steps = 1) {};
	/**
	 * @description Copies the selected text into the clipboard and removes it from the editor.
	 */
	cut() {};
	/**
	 * @description If text is currently selected, it will be deleted and the cursor moved to the beginning of the selection. If no text is selected, the character to the right of the cursor will be deleted.
	 */
	del() {};
	/**
	 * @description Clears any selection in the editor.
	 */
	deselect() {};
	/**
	 * @description Moves the cursor to the end of the line.
	 * @param {Boolean} mark - If true, the text from the cursor's previous position to the end of the line will be added to the current selection.
	 */
	end(mark = false) {};
	/**
	 * @returns DzSettings The settings for the validator (if any) set on this line edit, otherwise null.
	 * @since 4.12.1.97
	 */
	getValidatorSettings() {};
	/**
	 * @returns Boolean true if the input satisfies the inputMask and the validator, otherwise false.
	 */
	hasAcceptableInput() {};
	/**
	 * @returns Boolean true if some or all of the text in the editor is selected, otherwise false.
	 */
	hasSelectedText() {};
	/**
	 * @description Moves the cursor to the beginning of the line.
	 * @param {Boolean} mark - If true, the text from the beginning of the line to the cursor's previous position will be added to the current selection.
	 */
	home(mark = false) {};
	/**
	 * @description Inserts any text on the clipboard into the line at the cursor's current position.
	 */
	paste() {};
	/**
	 * @description If redoAvailable is true, redoes the next operation in the editor.
	 */
	redo() {};
	/**
	 * @description Selects all the text in the editor.
	 */
	selectAll() {};
	/**
	 * @returns String The currently selected text (if any) in the editor.
	 */
	selectedText() {};
	/**
	 * @returns Number The position in the editor where the current selection begins.
	 */
	selectionStart() {};
	/**
	 * @description Causes this line edit to only accept characters that represent double precision floating point (decimal) numbers.
	 * @param {Number} bottom - The minimum acceptable value.
	 * @param {Number} top - The maximum acceptable value.
	 * @param {Number} decimals - The maximum number of digits after the decimal point to allow.
	 * @param {Boolean} scientific - If true, the text of the editor is expressed in scientific form; i.e., it may have an exponent part; i.e., 1.5E-2. If false (default), the text of the editor is expressed as a standard number; i.e., 0.015.
	 */
	setDoubleValidator(bottom, top, decimals, scientific = false) {};
	/**
	 * @description Causes this line edit to only accept characters that represent whole numbers (integers).
	 * @param {Number} minimum - The minimum acceptable value.
	 * @param {Number} maximum - The maximum acceptable value.
	 */
	setIntValidator(minimum, maximum) {};
	/**
	 * @description Causes this line edit to only accept characters that satisfy a Regular Expression.
	 * @param regx - The Regular Expression to use.
	 * @param {Boolean} caseSensitive - If true (default), the expression is case sensitive.
	 */
	setRegExValidator(rx, caseSensitive = true) {};
	/**
	 * @description Sets the selected portion of the text in the editor.
	 * @param {Number} start - The position to start the selection from.
	 * @param {Number} length - The number of characters from start to select.
	 */
	setSelection(start, length) {};
	/**
	 * @description Causes this line edit to only accept characters that satisfy a validator configured with a settings object.
	 * @since 4.12.1.97
	 * @param {DzSettings} settings - The settings to use in choosing and configuring the validator. The settings must contain a string value named "validator" that provides the type of validator to set. Valid types are: float, int, regexp, subpath, filename, nodename, nodelabel.
	 * @attention Other settings to configure a given validator can be retrieved using getValidatorSettings().
	 */
	setValidator(settings) {};
	/**
	 * @description If undoAvailable is true, undoes the last operation in the editor.
	 */
	undo() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the current position changes.
	 * @signature `"cursorPositionChanged(int, int)"`
	 * @event
	 */
	cursorPositionChanged(oldPos, newPos) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the [Return] or [Enter] key is pressed or the editor loses focus.
	 * @signature `"editingFinished()"`
	 * @event
	 */
	editingFinished() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the user presses the [Return] key in the editor.
	 * @signature `"returnPressed()"`
	 * @event
	 */
	returnPressed() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the selected text in the editor changes.
	 * @signature `"selectionChanged()"`
	 * @event
	 */
	selectionChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the text of the editor changes, passes the new text.
	 * @signature `"textChanged(const QString&)"`
	 * @event
	 */
	textChanged(text) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the text edited, passes the new text.
	 * @signature `"textEdited(const QString&)"`
	 * @event
	 */
	textEdited(text) {};

}
/**
 * TODO:
 * Add detailed description.
 */
class DzListBox {
	/**
	 * @description Creates a list box with the given parent widget
	 */
	constructor(parent) {};
	/**
	 * @description The layout mode for the columns of the list box
	 * @type {LayoutMode}
	 */
	columnMode;
	/**
	 * @description The number of items in the list box (read-only)
	 * @type {Number}
	 */
	count;
	/**
	 * @description The index of the currently highlighted item in the list box
	 * @type {Number}
	 */
	currentItem;
	/**
	 * @description The text of the currently highlighted item in the list box
	 * @type {String}
	 */
	currentText;
	/**
	 * @description The number of columns in the list box (read-only)
	 * @type {Number}
	 */
	numColumns;
	/**
	 * @description The number of items visible in the list box (read-only)
	 * @type {Number}
	 */
	numItemsVisible;
	/**
	 * @description The number of rows in the list box (read-only)
	 * @type {Number}
	 */
	numRows;
	/**
	 * @description The layout mode for the rows of the list box
	 * @type {LayoutMode}
	 */
	rowMode;
	/**
	 * @description The index of the currently selected item in the list box (in single selection mode only)
	 * @type {Number}
	 */
	selected;
	/**
	 * @description The selection mode of the list box
	 * @type {SelectionMode}
	 */
	selectionMode;
	/**
	 * @description The index of the item at the top of the list box
	 * @type {Number}
	 */
	topItem;
	/**
	 * @description Whether or not the list box has variable height rows
	 * @type {Boolean}
	 */
	variableHeight;
	/**
	 * @description Whether or not the list box has variable width columns
	 * @type {Boolean}
	 */
	variableWidth;
	/**
	 * @description ENUM: There is a fixed number of rows or columns
	 */
	FixedNumber;
	/**
	 * @description ENUM: There are as many columns as will fit
	 */
	FitToWidth;
	/**
	 * @description ENUM: There are as many rows as will fit
	 */
	FitToHeight;
	/**
	 * @description ENUM: There are as many rows as required by the column mode and vice-versa
	 */
	Variable;
	/**
	 * @description ENUM: Single selection - only one item in the box can be selected at a time
	 */
	Single;
	/**
	 * @description ENUM: Multi selection - when the user clicks on an item, its selection state is toggled, all other items remain the same
	 */
	Multi;
	/**
	 * @description ENUM: Extended selection - when the user clicks on an item, the current selection is replaced with that item. The ctrl and shift keys can be used to select multiple items.
	 */
	Extended;
	/**
	 * @description ENUM: Items can not be selected
	 */
	NoSelection;
	/**
	 * @description Clears all items in the list box
	 */
	clear() {};
	/**
	 * @description Inserts the given item into the list box
	 */
	insertItem(text) {};
	/**
	 * @returns Boolean true if the item at the given index is selected
	 */
	isSelected(index) {};
	/**
	 * @description Removes the given item from the list box
	 */
	removeItem(index) {};
	/**
	 * @description Sets whether the item at the given index is selected
	 */
	setSelected(index, selected) {};
	/**
	 * @returns String The text of the item at the given index
	 */
	text(index) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when an item is clicked (mouse button pressed and released).
	 * @signature `"clicked(int)"`
	 * @event
	 */
	clicked(index) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when an item is clicked (mouse button pressed and released).
	 * @signature `"clicked(int,const QPoint&)"`
	 * @event
	 */
	clicked(index, pnt) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the user right clicks the list box for a context menu.
	 * @signature `"contextMenuRequested(int,const QPoint&)"`
	 * @event
	 */
	contextMenuRequested(index, pos) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the current item changes.
	 * @signature `"currentChanged(int)"`
	 * @event
	 */
	currentChanged(index) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when an item is double clicked.
	 * @signature `"doubleClicked(int)"`
	 * @event
	 */
	doubleClicked(index) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the highlighted item changes.
	 * @signature `"highlighted(const QString&)"`
	 * @event
	 */
	highlighted(text) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the highlighted item changes.
	 * @signature `"highlighted(int)"`
	 * @event
	 */
	highlighted(index) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when an item is clicked with the a mouse button (mouse button pressed and released).
	 * @signature `"mouseButtonClicked(int,int,const QPoint&)"`
	 * @event
	 */
	mouseButtonClicked(button, index, pos) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when an item is pressed with the a mouse button (mouse button pressed).
	 * @signature `"mouseButtonPressed(int,int,const QPoint&)"`
	 * @event
	 */
	mouseButtonPressed(button, index, pos) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted mouse cursor moves onto an item.
	 * @signature `"onItem(int)"`
	 * @event
	 */
	onItem(index) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted mouse cursor moves from an item to an empty part of the list box.
	 * @signature `"onViewport()"`
	 * @event
	 */
	onViewport() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when an item is pressed (mouse button pressed).
	 * @signature `"pressed(int,const QPoint&)"`
	 * @event
	 */
	pressed(index, pnt) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when an item is pressed (mouse button pressed).
	 * @signature `"pressed(int)"`
	 * @event
	 */
	pressed(index) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when return is pressed on the current item.
	 * @signature `"returnPressed(int)"`
	 * @event
	 */
	returnPressed(index) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when an item is clicked with the right button (mouse button pressed and released).
	 * @signature `"rightButtonClicked(int,const QPoint&)"`
	 * @event
	 */
	rightButtonClicked(index, pnt) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when an item is pressed with the right button (mouse button pressed).
	 * @signature `"rightButtonPressed(int,const QPoint&)"`
	 * @event
	 */
	rightButtonPressed(index, pnt) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the selected item changes.
	 * @signature `"selected(int)"`
	 * @event
	 */
	selected(index) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the selected item changes.
	 * @signature `"selected(const QString&)"`
	 * @event
	 */
	selected(text) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the selection in the box changes.
	 * @signature `"selectionChanged()"`
	 * @event
	 */
	selectionChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when a new item is selected in single selection mode.
	 * @signature `"selectionChanged(int)"`
	 * @event
	 */
	selectionChanged(index) {};

}
/**
 * TODO:
 * Add detailed description.
 */
class DzListView {
	/**
	 * @description Creates a list view widget with the specified parent widget
	 * @param {DzWidget} parent - The widget to parent this widget to.
	 */
	constructor(parent) {};
	/**
	 * @description Holds whether or not all columns show keyboard focus.
	 * @type {Boolean}
	 */
	allColumnsShowFocus;
	/**
	 * @description Holds the number root level children in the list view. (Read Only)
	 * @type {Number}
	 */
	childCount;
	/**
	 * @description Holds the number of items in the list box. (Read Only)
	 * @type {Number}
	 */
	columns;
	/**
	 * @description Holds the default action that is taken when the user attempts to rename an item.
	 * @type {RenameAction}
	 */
	defaultRenameAction;
	/**
	 * @description Holds the advisory margin for list view items.
	 * @type {Number}
	 */
	itemMargin;
	/**
	 * @description Holds the resize mode for the list view.
	 * @type {ResizeMode}
	 */
	resizeMode;
	/**
	 * @description Holds whether or not the root level items show expand/collapse boxes.
	 * @type {Boolean}
	 */
	rootIsDecorated;
	/**
	 * @description Holds the selection mode for the list view.
	 * @type {SelectionMode}
	 */
	selectionMode;
	/**
	 * @description Holds whether or not the sort indicator should be displayed.
	 * @type {Boolean}
	 */
	showSortIndicator;
	/**
	 * @description Holds whether or not tool tips should be displayed.
	 * @type {Boolean}
	 */
	showToolTips;
	/**
	 * @description Holds the column that the list is sorted by.
	 * @type {Number}
	 */
	sortColumn;
	/**
	 * @description Holds the sort order of the list view.
	 * @type {SortOrder}
	 */
	sortOrder;
	/**
	 * @description Holds the number of pixels that a child item is offset from its parent.
	 * @type {Number}
	 */
	treeStepSize;
	/**
	 * @description ENUM: The selected items.
	 */
	Selected;
	/**
	 * @description ENUM: The unselected items.
	 */
	Unselected;
	/**
	 * @description ENUM: The items that are checked.
	 */
	Checked;
	/**
	 * @description ENUM: The items that are not checked.
	 */
	NotChecked;
	/**
	 * @description ENUM: All the items in the view.
	 */
	All;
	/**
	 * @description ENUM: The item is renamed if return is pressed or if the user clicks away from the entry field (it loses focus).
	 */
	Accept;
	/**
	 * @description ENUM: The item is renamed only if the user presses return in the entry field. If the entry field loses focus, the rename operation is discarded.
	 */
	Reject;
	/**
	 * @description ENUM: The columns do not get resized.
	 */
	NoColumn;
	/**
	 * @description ENUM: All columns get resized equally.
	 */
	AllColumns;
	/**
	 * @description ENUM: The last column is resized to fit the width of the view.
	 */
	LastColumn;
	/**
	 * @description ENUM: Only one item in the list view can be selected.
	 */
	Single;
	/**
	 * @description ENUM: Multiple items in the list view can be selected. When the user clicks on an item, its selection state is toggled on/off.
	 */
	Multi;
	/**
	 * @description ENUM: Multiple items in the list view can be selected. When the user clicks on an item, the current selection is cleared, and that item becomes selected. Multiple items are selected by clicking with the CTRL key, or SHIFT key pressed, or by clicking and dragging.
	 */
	Extended;
	/**
	 * @description ENUM: No items in the list view can be selected.
	 */
	NoSelection;
	/**
	 * @description ENUM: The column width does not change automatically.
	 */
	Manual;
	/**
	 * @description ENUM: The column width grows automatically according to the maximum width of all items in the column.
	 */
	Maximum;
	/**
	 * @description Adds a column to the list view.
	 * @returns Number
	 * @param {String} label - The label for the column.
	 */
	addColumn(label) {};
	/**
	 * @description Clears all items from the list view.
	 */
	clear() {};
	/**
	 * @description Clears the current selection in the view.
	 */
	clearSelection() {};
	/**
	 * @returns Number The alignment of the specified column.
	 * @param {Number} column - The index of the column.
	 */
	columnAlignment(column) {};
	/**
	 * @returns String The label of the specified column (if any), otherwise an empty string.
	 * @param {Number} column - The index of the column.
	 */
	columnText(column) {};
	/**
	 * @returns Number The width of the specified column.
	 * @param {Number} column - The index of the column.
	 */
	columnWidth(column) {};
	/**
	 * @returns WidthMode The width mode of the specified column.
	 * @param {Number} column - The index of the column.
	 */
	columnWidthMode(column) {};
	/**
	 * @returns DzListViewItem The currently highlighted item.
	 */
	currentItem() {};
	/**
	 * @description Deletes an item from the list view.
	 * @param {DzListViewItem} item - The item to delete.
	 */
	deleteItem(item) {};
	/**
	 * @description Ensures an item is visible in the view.
	 * @param {DzListViewItem} item - The item to ensure is visible.
	 */
	ensureItemVisible(item) {};
	/**
	 * @returns DzListViewItem The item in the view with the specified text, for the specified column, matched according to the specified flags (if any), otherwise null.
	 * @param {String} text - The text to find.
	 * @param {Number} column - The index of the column.
	 * @param {Number} compare - A bitwise OR of the following values:
	 * 
	 *  CaseSensitive = 0x00001 (0 0001)
	 * 
	 *  BeginsWith = 0x00002 (0 0010)
	 * 
	 *  EndsWith = 0x00004 (0 0100)
	 * 
	 *  Contains = 0x00008 (0 1000)
	 * 
	 *  ExactMatch = 0x00010 (1 0000)
	 */
	findItem(text, column, compare = ExactMatch|CaseSensitive) {};
	/**
	 * @returns DzListViewItem The first item in the list view.
	 */
	firstChild() {};
	/**
	 * @returns Array A list of the DzListViewItem instances in this list view that match the supplied flag.
	 * @param {ItemsMode} mode - The mode of the items to retrieve.
	 */
	getItems(mode) {};
	/**
	 * @returns DzHeader The header for this list view.
	 */
	header() {};
	/**
	 * @description Hide the specified column
	 * @param {Number} column - The index of the column.
	 */
	hideColumn(column) {};
	/**
	 * @returns Boolean true if the specified item is expanded (open), or false if it is collapsed (closed).
	 * @param {DzListViewItem} item - The item to retrieve the open state of.
	 */
	isOpen(item) {};
	/**
	 * @returns Boolean true if the view is currently in a renaming operation, otherwise false.
	 */
	isRenaming() {};
	/**
	 * @returns Boolean true if the specified item is selected, otherwise false.
	 * @param {DzListViewItem} item - The item to check.
	 */
	isSelected(item) {};
	/**
	 * @returns DzListViewItem The last item in the list view.
	 */
	lastItem() {};
	/**
	 * @description Removes a column from the list view.
	 * @param {Number} column - The index of the column.
	 */
	removeColumn(column) {};
	/**
	 * @returns DzListViewItem The selected item.
	 */
	selectedItem() {};
	/**
	 * @description Sets the alignment of a column.
	 * @param {Number} column - The index of the column.
	 * @param {Number} align - The alignment to set.
	 */
	setColumnAlignment(column, align) {};
	/**
	 * @description Changes the label of a column in the list view.
	 * @param {Number} column - The index of the column.
	 * @param {String} label - The label for the column.
	 */
	setColumnText(column, label) {};
	/**
	 * @description Sets the width of a column.
	 * @param {Number} column - The index of the column.
	 * @param {Number} width - The width to set.
	 */
	setColumnWidth(column, width) {};
	/**
	 * @description Sets the width mode of a column.
	 * @param {Number} column - The index of the column.
	 * @param {WidthMode} mode - The width mode to set.
	 */
	setColumnWidthMode(column, mode) {};
	/**
	 * @description Sets the currently highlighted item
	 * @param {DzListViewItem} item - The item to set.
	 */
	setCurrentItem(item) {};
	/**
	 * @description Sets whether or not an item is expanded (open) or collapsed (closed).
	 * @param {Boolean} item - The item to set the open state of.
	 * @param {Boolean} open - The open state to set.
	 */
	setOpen(item, open) {};
	/**
	 * @description Sets whether or not an item is selected.
	 * @param {Boolean} item - The item to set the selected state of.
	 * @param {Boolean} selected - The selected state to set.
	 */
	setSelected(item, selected) {};
	/**
	 * @description Sets the selection anchor of the view.
	 * @param {DzListViewItem} item - The item to set.
	 */
	setSelectionAnchor(item) {};
	/**
	 * @description Sets the sorting column and order for the view.
	 * @param {Number} column - The index of the column.
	 * @param {Boolean} ascending - If true, ascending. If false, descending.
	 */
	setSorting(column, ascending = true) {};
	/**
	 * @description Sort the view
	 */
	sort() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when an item is clicked (mouse button pressed and released)
	 * @signature `"clicked(DzListViewItem*)"`
	 * @event
	 */
	clicked(item) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when an item is clicked (mouse button pressed and released)
	 * @signature `"clicked(DzListViewItem*,const QPoint&,int)"`
	 * @event
	 */
	clicked(item, pos, col) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when an item is collapsed (when item 's children are hidden)
	 * @signature `"collapsed(DzListViewItem*)"`
	 * @event
	 */
	collapsed(item) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the user right clicks the list view, or uses a special system key, for a context menu
	 * @signature `"contextMenuRequested(DzListViewItem*,const QPoint&,int)"`
	 * @event
	 */
	contextMenuRequested(item, pos, col) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the current item changes
	 * @signature `"currentChanged(DzListViewItem*)"`
	 * @event
	 */
	currentChanged(item) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when an item is double clicked (on the second button press, not release)
	 * @signature `"doubleClicked(DzListViewItem*,const QPoint&,int)"`
	 * @event
	 */
	doubleClicked(item, pos, col) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when an item is expanded (when item 's children are shown)
	 * @signature `"expanded(DzListViewItem*)"`
	 * @event
	 */
	expanded(item) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when an item is renamed
	 * @signature `"itemRenamed(DzListViewItem*,int,const QString&)"`
	 * @event
	 */
	itemRenamed(item, col, text) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when an item is renamed
	 * @signature `"itemRenamed(DzListViewItem*,int)"`
	 * @event
	 */
	itemRenamed(item, col) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when an item is clicked with the a mouse button (mouse button pressed and released)
	 * @signature `"mouseButtonClicked(int,DzListViewItem*,const QPoint&,int)"`
	 * @event
	 */
	mouseButtonClicked(button, item, pos, col) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when an item is pressed with the a mouse button (mouse button pressed)
	 * @signature `"mouseButtonPressed(int,DzListViewItem*,const QPoint&,int)"`
	 * @event
	 */
	mouseButtonPressed(button, item, pos, col) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when an item is pressed (mouse button pressed)
	 * @signature `"pressed(DzListViewItem*,const QPoint&,int)"`
	 * @event
	 */
	pressed(item, pos, col) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when an item is pressed (mouse button pressed)
	 * @signature `"pressed(DzListViewItem*)"`
	 * @event
	 */
	pressed(item) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when return is pressed on the current item
	 * @signature `"returnPressed(DzListViewItem*)"`
	 * @event
	 */
	returnPressed(item) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when an item is clicked with the right button (mouse button pressed and released)
	 * @signature `"rightButtonClicked(DzListViewItem*,const QPoint&,int)"`
	 * @event
	 */
	rightButtonClicked(item, pos, col) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when an item is pressed with the right button (mouse button pressed)
	 * @signature `"rightButtonPressed(DzListViewItem*,const QPoint&,int)"`
	 * @event
	 */
	rightButtonPressed(item, pos, col) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the selected item changes.
	 * @signature `"selectionChanged()"`
	 * @event
	 */
	selectionChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the selected item changes
	 * @signature `"selectionChanged(DzListViewItem*)"`
	 * @event
	 */
	selectionChanged(item) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the space bar is pressed on the current item
	 * @signature `"spacePressed(DzListViewItem*)"`
	 * @event
	 */
	spacePressed(item) {};

}
/**
 * This class is not a widget, but a helper class for working with DzListView. Each DzListViewItem represents a single item in a list view - add items to a list view by creating a new DzListViewItem that is a child of the list view, or a child of another list view item in the list view.
 */
class DzListViewItem extends QObject {
	/**
	 * @description Creates a list view item at the root level of the specified list view
	 * @param {DzListView} parent - The listview to create this item as a child of
	 * @param {Number} id - The identifier for this item
	 */
	constructor(parent, id = -1) {};
	/**
	 * @description Creates a list view item as a child of the specified list view item
	 * @param {DzListViewItem} parent - The item to create this item as a child of
	 * @param {Number} id - The identifier for this item
	 */
	constructor(parent, id = -1) {};
	/**
	 * @description Holds whether or not the item can be dragged.
	 * @type {Boolean}
	 */
	dragEnabled;
	/**
	 * @description Holds whether or not the item can have other items dropped on it.
	 * @type {Boolean}
	 */
	dropEnabled;
	/**
	 * @description Holds whether or not the item can be enabled .
	 * @type {Boolean}
	 */
	enabled;
	/**
	 * @description Holds whether or not the item can be expanded (opened).
	 * @type {Boolean}
	 */
	expandable;
	/**
	 * @description Holds the height of the item.
	 * @type {Number}
	 */
	height;
	/**
	 * @description Holds the identifier for this item. (Read Only)
	 * @type {Number}
	 */
	id;
	/**
	 * @description Holds whether or not the item can be displayed on multiple lines.
	 * @type {Boolean}
	 */
	multiLinesEnabled;
	/**
	 * @description Holds whether or not the item is expanded (open) or collapsed (closed).
	 * @type {Boolean}
	 */
	open;
	/**
	 * @description Holds whether or not the item can be selected.
	 * @type {Boolean}
	 */
	selectable;
	/**
	 * @description Holds whether or not the item is selected.
	 * @type {Boolean}
	 */
	selected;
	/**
	 * @description Holds whether or not the item is visible.
	 * @type {Boolean}
	 */
	visible;
	/**
	 * @description Adds an arbitrary data item to be stored with the item.
	 * @param {String} key - The key for the data.
	 * @param {Object} val - The value of the data.
	 */
	addDataItem(key, val) {};
	/**
	 * @returns Number The number of child items of this item.
	 */
	childCount() {};
	/**
	 * @description Compares the specified item with this item in the specified column (if any).
	 * @returns Number -1 if this item is less than item, 0 if they are equal, and 1 if this item is greater than item.
	 * @param {DzListViewItem} item - The item to compare.
	 * @param {Number} column - The index of the column.
	 * @param {Boolean} ascending - Whether to compare in ascending, or descending, order.
	 */
	compare(item, column, ascending) {};
	/**
	 * @description Deletes an item from this item's list of child items.
	 * @returns DzListViewItem
	 * @param {DzListViewItem} item - The item to delete.
	 */
	deleteItem(item) {};
	/**
	 * @returns Number The hierarchical depth of this item.
	 */
	depth() {};
	/**
	 * @returns DzListViewItem The first child item of this item.
	 */
	firstChild() {};
	/**
	 * @returns Object The value of the data on the item with the specified key (if any).
	 * @param {String} key - The key for the data.
	 */
	getDataItem(key) {};
	/**
	 * @returns Number The number of data items on the item.
	 */
	getNumDataItems() {};
	/**
	 * @description Inserts an item as a child of this item.
	 * @returns DzListViewItem
	 * @param {DzListViewItem} newChild - The item to insert.
	 */
	insertItem(newChild) {};
	/**
	 * @returns DzListViewItem The item above this item.
	 */
	itemAbove() {};
	/**
	 * @returns DzListViewItem The item below this item.
	 */
	itemBelow() {};
	/**
	 * @returns String A key that can be used for sorting by column - i.e., text()
	 * @param {Number} column - The index of the column.
	 * @param {Boolean} ascending - Whether to compare in ascending, or descending, order.
	 */
	key(column, ascending) {};
	/**
	 * @returns DzListView The list view that this item resides in.
	 */
	listView() {};
	/**
	 * @description Moves this item to be after the specified item, which must be one of its siblings.
	 * @returns DzListViewItem
	 * @param {DzListViewItem} item - The item to move after.
	 */
	moveItem(item) {};
	/**
	 * @returns DzListViewItem The next sibling of this item.
	 */
	nextSibling() {};
	/**
	 * @returns DzListViewItem The parent of this item.
	 */
	parent() {};
	/**
	 * @description Removes an item from the children of this item.
	 * @returns DzListViewItem
	 * @param {DzListViewItem} item - The item to insert.
	 */
	removeItem(item) {};
	/**
	 * @returns Boolean Whether or not the text in the specified column can be changed by the user.
	 * @param {Number} column - The index of the column.
	 */
	renameEnabled(column) {};
	/**
	 * @description Sets the pixmap for this item in the specified column.
	 * @param {Number} column - The index of the column.
	 * @param {Pixmap} pm - The pixmap to set.
	 */
	setPixmap(column, pm) {};
	/**
	 * @description Sets whether or not the text in the specified column can be changed by the user.
	 * @param {Number} column - The index of the column.
	 * @param {Boolean} yesNo - Whether or not the column can be changed.
	 */
	setRenameEnabled(column, yesNo) {};
	/**
	 * @description Sets the text for this item in the specified column.
	 * @param {Number} column - The index of the column.
	 * @param {String} text - The text to set.
	 */
	setText(column, text) {};
	/**
	 * @description Sorts the children of this item according to the current sorting column and order.
	 */
	sort() {};
	/**
	 * @description Sorts the child items of this item by the specified column in the specified order.
	 * @param {Number} column - The index of the column.
	 * @param {Boolean} ascending - Whether to sort in ascending, or descending, order.
	 */
	sortChildItems(column, ascending) {};
	/**
	 * @description Starts a rename operation.
	 * @param {Number} column - The index of the column.
	 */
	startRename(column) {};
	/**
	 * @returns String The text for this item in the specified column
	 * @param {Number} column - The index of the column.
	 */
	text(column) {};

}
/**
 * There is only one of these widgets in the application, which is created and owned by DzApp. It can be accessed by using the Global.MainWindow variable.
 */
class DzMainWindow extends QWidget {
	/**
	 * @description Whether or not the main window is always on top of other application windows.
	 * @type {Boolean}
	 */
	alwaysOnTop;
	/**
	 * @description Whether or not tool tips are enabled.
	 * @type {Boolean}
	 */
	toolTipsEnabled;
	/**
	 * @description Presents the user with a dialog that asks if they want to save changes to the scene, and does a scene save if the user selects yes.
	 * @returns Boolean true if the user selects 'Yes' or 'No', otherwise false.
	 */
	askSaveChanges() {};
	/**
	 * @description Presents the user with a dialog that asks if they want to turn off limits to apply the preset currently being loaded.
	 * @returns Boolean true if limits should be turned off, false if limits should be left alone.
	 */
	askTurnOffLimits() {};
	/**
	 * @description Checks to see if the given file already exists - if it does, prompts the user for whether or not they want to overwrite it.
	 * @returns Boolean true if the file does not exist or the user wants to overwrite it, false if the user needs to select a new name.
	 * @param {String} filename - The full path of the file to check.
	 */
	checkExistingFile(filename) {};
	/**
	 * @description Clears a the current UI popup if there is one.
	 */
	clearUIPopUp() {};
	/**
	 * @description Display a message in the status bar.
	 * @param {String} msg - Message to display.
	 * @param {Number} msecs - If greater than zero, the message will be displayed for the given amount of time, otherwise the message will be displayed until another message is sent.
	 */
	displayPrompt(msg, msecs = -1) {};
	/**
	 * @returns DzDockArea The dock area located at the goven position.
	 */
	dockArea(pos) {};
	/**
	 * @description Displays a dialog for saving the scene to a non-native file, and saves the scene if the user does not cancel.
	 * @returns Boolean true if a file was selected and successfully saved, otherwise false.
	 * @param {QWidget} parent - The widget to parent the dialog to; see DzApp.getDialogParent().
	 */
	doFileExport(parent = null) {};
	/**
	 * @description Displays a dialog for loading a non-native file, and loads the file if the user does not cancel.
	 * @returns Boolean true if a file was selected and successfully loaded, otherwise false.
	 * @param {QWidget} parent - The widget to parent the dialog to; see DzApp.getDialogParent().
	 */
	doFileImport(parent = null) {};
	/**
	 * @description Displays a dialog for loading a native scene file, and merges the file into the current scene if the user does not cancel.
	 * @returns Boolean true if a file was selected and successfully loaded, otherwise false.
	 * @param {QWidget} parent - The widget to parent the dialog to; see DzApp.getDialogParent().
	 */
	doFileMerge(parent = null) {};
	/**
	 * @description Displays a dialog for loading a native scene file, and opens the file as a new scene if the user does not cancel.
	 * @returns Boolean true if a file was selected and successfully loaded, otherwise false.
	 * @param {QWidget} parent - The widget to parent the dialog to; see DzApp.getDialogParent().
	 */
	doFileOpen(parent = null) {};
	/**
	 * @description Saves the scene to the current scene file; displays a dialog to the user if a file needs to be selected.
	 * @returns Boolean true if a file was selected and successfully saved, otherwise false.
	 * @param {QWidget} parent - The widget to parent the dialog to; see DzApp.getDialogParent().
	 */
	doFileSave(parent = null) {};
	/**
	 * @description Displays a dialog for saving the scene to a native file, and saves the scene if the user does not cancel.
	 * @returns Boolean true if a file was selected and successfully saved, otherwise false.
	 * @param {QWidget} parent - The widget to parent the dialog to; see DzApp.getDialogParent().
	 * @param {String} startWith - The directory to start the file dialog in (can include a default filename). If empty, the current load/save directory is used.
	 */
	doFileSaveAs(parent = null, startWith = "") {};
	/**
	 * @description Displays a dialog for loading an image file, and loads the file if the user does not cancel.
	 * @returns Image An empty image if the user cancels or loading fails, otherwise the selected image.
	 * @param {QWidget} parent - The widget to parent the dialog to; see DzApp.getDialogParent().
	 */
	doImageOpen(parent = null) {};
	/**
	 * @description Displays a dialog for saving the given image, and saves the image if the user does not cancel.
	 * @returns Boolean true if a file was selected and successfully saved, otherwise false.
	 * @param {Image} image - The image to save.
	 * @param {QWidget} parent - The widget to parent the dialog to; see DzApp.getDialogParent().
	 */
	doImageSaveAs(image, parent = null) {};
	/**
	 * @description Clears the scene.
	 * @returns Boolean
	 */
	doNewFile() {};
	/**
	 * @description Displays a dialog for saving the given video clip, and saves the clip if the user does not cancel.
	 * @returns Boolean true if a file was selected and successfully saved, otherwise false.
	 * @param {DzVideoClip} clip - The video clip to save.
	 * @param {QWidget} parent - The widget to parent the dialog to; see DzApp.getDialogParent().
	 */
	doVideoClipSaveAs(clip, parent = null) {};
	/**
	 * @description Switches from full screen back to normal mode.
	 */
	exitFullScreen() {};
	/**
	 * @returns DzActionMgr The global action manager for the application interface.
	 */
	getActionMgr() {};
	/**
	 * @returns DzDockArea The dock area located at the bottom of the main window.
	 */
	getBottomDockArea() {};
	/**
	 * @returns DzDockArea The dock area located in the center of the main window.
	 * @since 4.6.4.4
	 */
	getCenterDockArea() {};
	/**
	 * @returns DzInteractiveLessonMgr The global interactive lesson manager for the application interface.
	 */
	getInteractiveLessonMgr() {};
	/**
	 * @returns DzDockArea The dock area located at the left of the main window.
	 */
	getLeftDockArea() {};
	/**
	 * @returns DzPaneMgr The global pane manager for the application interface.
	 */
	getPaneMgr() {};
	/**
	 * @returns DzDockArea The dock area located at the right of the main window.
	 */
	getRightDockArea() {};
	/**
	 * @returns Number The sensitivity of the mouse move response in limitless sliders.
	 * @since 4.11.0.159
	 */
	getSliderMouseDragScalar() {};
	/**
	 * @returns DzDockArea The dock area located at the top of the main window.
	 */
	getTopDockArea() {};
	/**
	 * @returns DzUIPopUpWgt The current user interface popup widget (if any), otherwise null.
	 */
	getUIPopUp() {};
	/**
	 * @returns DzViewportMgr The global viewport manager for the application interface.
	 */
	getViewportMgr() {};
	/**
	 * @description Switches from normal to full screen mode
	 */
	goFullScreen() {};
	/**
	 * @returns Boolean true if the user interface is locked, otherwise false.
	 */
	isUILocked() {};
	/**
	 * @description Position the popup according to a widget.
	 * @param {QWidget} posWgt - The widget to position the popup on.
	 */
	positionUIPopUp(posWgt) {};
	/**
	 * @description Clear the message in the status bar.
	 */
	removePrompt() {};
	/**
	 * @description A convenience method for forcing a repaint of the currently active 3D viewport (if any).
	 */
	repaintActive3DViewport() {};
	/**
	 * @description Restores the locked state of the user interface to the value in the application settings.
	 */
	restoreUILockState() {};
	/**
	 * @description Sets the sensitivity of the mouse move response in limitless sliders.
	 * @since 4.11.0.159
	 * @param {Number} val - The scalar value to set.
	 */
	setSliderMouseDragScalar(val) {};
	/**
	 * @description Sets the locked state of the user interface.
	 * @param {Boolean} onOff - If true, the user interface is locked.
	 * @param {Boolean} storeSetting - If true (default), records the application setting.
	 */
	setUILocked(onOff, storeSetting = true) {};
	/**
	 * @description Show the Home page dialog.
	 */
	showHomeDlg() {};
	/**
	 * @returns DzUIPopUpWgt The popup widget.
	 * @param {String} filename - The script that loads a .ui file, or a .ui file directly, to show in the popup widget.
	 * @param {QWidget} posWgt - The widget to position the popup on.
	 */
	showUIPopUpWgt(filename, posWgt = null) {};
	/**
	 * @description If a popup already exists with the same filename, it is cleared (toggled). Otherwise it has the same effect as calling DzMainWindow.showUIPopUpWgt()
	 * @returns DzUIPopUpWgt The popup widget (if it was toggled on), otherwise null.
	 * @param {String} filename - The script that loads a .ui file, or a .ui file directly, to show in the popup widget.
	 * @param {QWidget} posWgt - The widget to position the popup on.
	 */
	toggleUIPopUpWgt(filename, posWgt = null) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted just before the main window closes.
	 * @signature `"aboutToClose()"`
	 * @event
	 */
	aboutToClose() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the main window is switched to/from being always on top.
	 * @signature `"aboutToClose()"`
	 * @event
	 */
	alwaysOnTopChanged(onOff) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the scalar for limitless slider mouse movement changes.
	 * @signature `"sliderMouseDragScalarChanged(float)"`
	 * @event
	 */
	sliderMouseDragScalarChanged(scalar) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted after the startup() function has finished.
	 * @signature `"started()"`
	 * @event
	 */
	started() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the main window is switched to/from having the ui locked.
	 * @signature `"uiLockedChanged()"`
	 * @event
	 */
	uiLockedChanged() {};

}
/**
 * TODO:
 * Add detailed description.
 */
class DzMap extends DzRefCountedItem {
	/**
	 * @description Constructor. Creates a new map of the given type.
	 * @param type - The type of map to create.
	 */
	constructor(mapType = FloatMap) {};
	/**
	 * @description ENUM: 1 Dimensional map of float values.
	 */
	FLOAT_MAP;
	/**
	 * @description ENUM: 2 Dimensional map of float values.
	 */
	FLOAT2_MAP;
	/**
	 * @description ENUM: 3 Dimensional map of float values.
	 */
	FLOAT3_MAP;
	/**
	 * @description ENUM: 1 Dimensional map of int values.
	 */
	INT_MAP;
	/**
	 * @description ENUM: 1 Dimensional map of short values.
	 */
	SHORT_MAP;
	/**
	 * @description Append a new value to the end of a float map.
	 * @param {Number} val - The new value to append to the map.
	 * @attention This function is only valid for maps of the FLOAT_MAP type.
	 */
	appendFloatValue(val) {};
	/**
	 * @description Append a new value to the end of a integer map.
	 * @param {Number} val - The new value to append to the map.
	 * @attention This function is only valid for maps of the INT_MAP type.
	 */
	appendIntValue(val) {};
	/**
	 * @description Appends a value to a float 2 map.
	 * @param {DzVec3} val - The value to append to the map. The z value of the vector is ignored.
	 * @attention This function is only valid for maps of the FLOAT2_MAP type.
	 */
	appendPnt2Vec(val) {};
	/**
	 * @description Appends a value to a float 3 map.
	 * @param {DzVec3} val - The value to append to the map.
	 * @attention This function is only valid for maps of the FLOAT3_MAP type.
	 */
	appendPnt3Vec(val) {};
	/**
	 * @description Append a new value to the end of a short value map.
	 * @param {Number} val - The new value to append to the map.
	 * @attention This function is only valid for maps of the SHORT_MAP type.
	 */
	appendShortValue(val) {};
	/**
	 * @description Clears all map values. After this call, the number of values in the map will be zero.
	 */
	clearAllData() {};
	/**
	 * @returns Number The maximum value of this map - for maps of the FLOAT_MAP type.
	 * @since 4.6.4.28
	 * @param {Number} idx - Not used.
	 */
	getFloatMax(idx) {};
	/**
	 * @returns Number The minimum value of this map - for maps of the FLOAT_MAP type.
	 * @since 4.6.4.28
	 * @param {Number} idx - Not used.
	 */
	getFloatMin(idx) {};
	/**
	 * @returns Number The value of this map at the specified index (if valid), or the default value if the index is out of range - for maps of the FLOAT_MAP type.
	 */
	getFloatValue(idx) {};
	/**
	 * @returns Number The value of this map at the specified index (if valid), or the default value if the index is out of range - for maps of the INT_MAP type.
	 * @param {Number} idx - The index of the value to retrieve.
	 */
	getIntValue(idx) {};
	/**
	 * @returns Number The maximum value of this map - for maps of the INT_MAP type.
	 * @since 4.6.4.28
	 * @param {Number} idx - Not used.
	 */
	getIntValueMax(idx) {};
	/**
	 * @returns Number The minimum value of this map - for maps of the INT_MAP type.
	 * @since 4.6.4.28
	 * @param {Number} idx - Not used.
	 */
	getIntValueMin(idx) {};
	/**
	 * @returns String The label for this map.
	 */
	getLabel() {};
	/**
	 * @returns Number The number of dimensions for this map.
	 */
	getNumDimensions() {};
	/**
	 * @returns Number The number of values currently in this map.
	 */
	getNumValues() {};
	/**
	 * @returns DzGeometry The geometry that this map has been reordered to match, or NULL if none.
	 */
	getOrderingGeometry() {};
	/**
	 * @returns DzVec3 The value of this map at the specified index (if valid), or the default value if the index is out of range - for maps of the FLOAT2_MAP type. The value will be contained in the X and Y components of the vector - the Z component will always be zero.
	 * @param {Number} idx - The index of the value to retrieve.
	 */
	getPnt2Vec(idx) {};
	/**
	 * @returns DzVec3 The maximum value of this map - for maps of the FLOAT2_MAP type.
	 * @since 4.6.4.28
	 * @param {Number} idx - Not used.
	 */
	getPnt2VecMax(idx) {};
	/**
	 * @returns DzVec3 The minimum value of this map - for maps of the FLOAT2_MAP type.
	 * @since 4.6.4.28
	 * @param {Number} idx - Not used.
	 */
	getPnt2VecMin(idx) {};
	/**
	 * @returns DzVec3 The value of this map at the specified index (if valid), or the default value if the index is out of range - for maps of the FLOAT3_MAP type.
	 * @param {Number} idx - The index of the value to retrieve.
	 */
	getPnt3Vec(idx) {};
	/**
	 * @returns DzVec3 The maximum value of this map - for maps of the FLOAT3_MAP type.
	 * @since 4.6.4.28
	 * @param {Number} idx - Not used.
	 */
	getPnt3VecMax(idx) {};
	/**
	 * @returns DzVec3 The minimum value of this map - for maps of the FLOAT3_MAP type.
	 * @since 4.6.4.28
	 * @param {Number} idx - Not used.
	 */
	getPnt3VecMin(idx) {};
	/**
	 * @returns Number The value of this map at the specified index (if valid), or the default value if the index is out of range - for maps of the SHORT_MAP type.
	 * @param {Number} idx - The index of the value to retrieve.
	 */
	getShortValue(idx) {};
	/**
	 * @returns Number The maximum value of this map - for maps of the SHORT_MAP type.
	 * @since 4.6.4.28
	 * @param {Number} idx - Not used.
	 */
	getShortValueMax(idx) {};
	/**
	 * @returns Number The minimum value of this map - for maps of the SHORT_MAP type.
	 * @since 4.6.4.28
	 * @param {Number} idx - Not used.
	 */
	getShortValueMin(idx) {};
	/**
	 * @returns MapType The type of this map.
	 */
	getType() {};
	/**
	 * @returns Boolean true if the values of the map are in unit space, otherwise false.
	 * @since 4.6.4.28
	 */
	inUnitSpace() {};
	/**
	 * @description Invalidates the calculated minimum and maximum values for this map.
	 * @since 4.6.4.28
	 */
	invalidateMinMax() {};
	/**
	 * @returns DzMap A copy of this map.
	 * @since 4.11.0.300
	 * @attention Currently only correctly copies DzMap, DzVertexMap, and DzUVSet. Other subclasses will only copy data included in these types and return an instance of the superclass
	 */
	makeCopy() {};
	/**
	 * @description Pre-allocates size of the data array.
	 * @param {Number} num - The new number of values to pre-allocate for this map.
	 */
	preSize(num) {};
	/**
	 * @description Sets the default value for a float map. This is the value returned if the map is empty or a map data value is requested that is outside the index range of this map.
	 * @param x - The new default value for the map.
	 * @attention This function is only valid for maps of the FLOAT_MAP type.
	 */
	setDefaultFloatValue(defaultVal) {};
	/**
	 * @description Sets the default value for an integer map. This is the value returned if the map is empty or a map data value is requested that is outside the index range of this map.
	 * @param x - The new default value for the map.
	 * @attention This function is only valid for maps of the INT_MAP type.
	 */
	setDefaultIntValue(defaultVal) {};
	/**
	 * @description Sets the default value of a float 2 map.
	 * @param {DzVec3} defaultVal - The default value of this map. The z value of the vector is ignored.
	 */
	setDefaultPnt2Vec(defaultVal) {};
	/**
	 * @description Sets the default value of a float 3 map.
	 * @param {DzVec3} defaultVal - The default value of this map.
	 */
	setDefaultPnt3Vec(defaultVal) {};
	/**
	 * @description Sets the default value for a short value map. This is the value returned if the map is empty or a map data value is requested that is outside the index range of this map.
	 * @param x - The new default value for the map.
	 * @attention This function is only valid for maps of the SHORT_MAP type.
	 */
	setDefaultShortValue(defaultVal) {};
	/**
	 * @description Set one of the currently existing data values on a float map.
	 * @param {Number} idx - The index of the value to set.
	 * @param {Number} val - The new value.
	 * @attention This function is only valid for maps of the FLOAT_MAP type.
	 */
	setFloatValue(idx, val) {};
	/**
	 * @description Set one of the currently existing data values on a integer map.
	 * @param {Number} idx - The index of the entry to set.
	 * @param {Number} val - The value of this map at the specified index (if valid).
	 * @attention This function is only valid for maps of the INT_MAP type.
	 */
	setIntValue(idx, val) {};
	/**
	 * @description Sets the user-readable label for the map.
	 * @param {String} label - The new label for the map.
	 */
	setLabel(label) {};
	/**
	 * @description Changes the type of this map.
	 * @param {MapType} mapType - The new type for the map.
	 * @param {Boolean} keepData - If true, the existing data will be converted to the new type as much as possible. If false, the existing data is lost, and the number of values in the map will be zero.
	 */
	setMapType(mapType, keepData = false) {};
	/**
	 * @description Sets the size of the data array. Does not initialize newly allocated values.
	 * @param {Number} num - The new number of values contained in this map.
	 */
	setNumValues(num) {};
	/**
	 * @description Set one of the currently existing data values on a float 2 map.
	 * @param {Number} idx - The index of the entry to set.
	 * @param {DzVec3} val - The value of this map at the specified index (if valid). The z value of the vector is ignored.
	 * @attention This function is only valid for maps of the FLOAT2_MAP type.
	 */
	setPnt2Vec(idx, val) {};
	/**
	 * @description Set one of the currently existing data values on a float 3 map.
	 * @param {Number} idx - The index of the entry to set
	 * @param {DzVec3} val - The value of this map at the specified index (if valid).
	 * @attention This function is only valid for maps of the FLOAT3_MAP type.
	 */
	setPnt3Vec(idx, val) {};
	/**
	 * @description Set one of the currently existing data values on a short value map.
	 * @param {Number} idx - The index of the entry to set.
	 * @param {Number} val - The value of this map at the specified index (if valid).
	 * @attention This function is only valid for maps of the SHORT_MAP type.
	 */
	setShortValue(idx, val) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the map's label changes.
	 * @signature `"labelChanged()"`
	 * @event
	 */
	labelChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted whenever values are added, removed or modified on the map.
	 * @signature `"mapModified()"`
	 * @event
	 */
	mapModified() {};

}
/**
 * A "material" represents a collection of properties and settings that, when applied through the use of a "shader" (a small program/subroutine that describes how the settings are used), describe how the geometry associated with a 3D object interacts with light and ultimately what the surface of that 3D object looks like when rendered.
 * See Also:
 */
class DzMaterial extends DzRefCountedItem, DzElement {
	/**
	 * @description Hold the author of the file for this material. (Read Only)
	 * @type {DzAuthor}
	 */
	assetAuthor;
	/**
	 * @description Hold the revision version of the asset file for this material. (Read Only)
	 * @type {DzVersion}
	 */
	assetFileRevision;
	/**
	 * @description Hold the asset id for this material.
	 * @type {String}
	 */
	assetId;
	/**
	 * @description Hold the modified date of the asset file for this material. (Read Only)
	 * @type {Date}
	 */
	assetModifiedDate;
	/**
	 * @description Holds whether or not the asset for this modifier needs to be saved. (Read Only)
	 * @type {Boolean}
	 */
	assetNeedSave;
	/**
	 * @description Hold the URI of the asset source for this material; only valid when the asset is in an embedded state - i.e. modified. (Read Only)
	 * @type {DzUri}
	 */
	assetSource;
	/**
	 * @description Holds the asset URI for this material. (Read Only)
	 * @type {DzUri}
	 */
	assetUri;
	/**
	 * @description The render priority for the material. Render priority controls the order in which materials are handled during a render. The higher the priority, the earlier the material will be handled. If several materials have the same render priority, those materials will be handled in an arbitrary order.
	 * @type {DzRenderMgr}
	 */
	renderPriority;
	/**
	 * @returns The material with the given index.
	 */
	static getMaterial(which) {};
	/**
	 * @returns Number The number of materials that have been created
	 */
	static getNumMaterials() {};
	/**
	 * @returns The duplicate material if a material could be duplicated, otherwise a DzDefaultMaterial.
	 * @since 4.6.2.104
	 * @param {DzElementDuplicateContext} context - The context of the material to duplicate.
	 */
	duplicateOrDefaultMaterial(context) {};
	/**
	 * @description Sets whether or not this material should propagate its render priority up to all the nodes that use it. Setting this to true will also ensure that the render priority is set for nodes that the material is assigned to at a later time.
	 * @param {Boolean} propagateOnOff - Whether or not the new priority value should be applied to all nodes that use this material (this will include the top-level skeleton node when dealing with figures).
	 */
	enablePropagateRenderPriorityToNodes(propagate) {};
	/**
	 * @returns DzUVSet The UV set that is used by this material for the given shape. May be NULL if the shape does not have any UV Sets.
	 * @since 4.9.3.69
	 */
	getActiveUVSet(shape) {};
	/**
	 * @returns DzUVSet The UV set that is used by this material for the given geometry. May be NULL if the geometry does not have any UV Sets.
	 * @since 4.9.3.69
	 */
	getActiveUVSet(geom) {};
	/**
	 * @description Collects all the images that are being used by this material at the current time and inserts them into the given list if they are not already there.
	 * @returns Array A list of DzTextures currently used by this material.
	 */
	getAllMaps() {};
	/**
	 * @returns DzTexture The 'baked' map for the material. NULL if the material is not using a baked map.
	 */
	getBakedMap() {};
	/**
	 * @returns Number The opactiy value for this material.
	 */
	getBaseOpacity() {};
	/**
	 * @returns DzBox3 The bounding box for this material.
	 */
	getBoundingBox() {};
	/**
	 * @returns DzTexture The color ('texture') map for this material.
	 */
	getColorMap() {};
	/**
	 * @returns Color The diffuse color for this material.
	 */
	getDiffuseColor() {};
	/**
	 * @returns Number The material index of this material.
	 */
	getIndex() {};
	/**
	 * @returns The current line end width.
	 * @since 4.11.0.76
	 */
	getLineEndWidth() {};
	/**
	 * @returns DzFloatProperty The property that controls the desired end width of a line.
	 * @since 4.11.0.76
	 */
	getLineEndWidthControl() {};
	/**
	 * @returns Color The current line preview color.
	 * @since 4.11.0.76
	 */
	getLinePreviewColor() {};
	/**
	 * @returns DzColorProperty The property that controls the color or lines for preview.
	 * @since 4.11.0.76
	 */
	getLinePreviewColorControl() {};
	/**
	 * @returns The current line start width.
	 * @since 4.11.0.76
	 */
	getLineStartWidth() {};
	/**
	 * @returns DzFloatProperty The property that controls the desired start width of a line.
	 * @since 4.11.0.76
	 */
	getLineStartWidthControl() {};
	/**
	 * @returns The current line UV width.
	 * @since 4.11.0.109
	 */
	getLineUVWidth() {};
	/**
	 * @returns DzFloatProperty The property that controls the desired UV width of a line.
	 * @since 4.11.0.109
	 */
	getLineUVWidthControl() {};
	/**
	 * @returns String The name for the type of shader (not the name for the material instance).
	 */
	getMaterialName() {};
	/**
	 * @returns Number The number of OpenGL texture maps necessary for rendering this material in OpenGL (e.g. one for a diffuse color map, one for an opacity map, etc.).
	 */
	getNumGLMaps() {};
	/**
	 * @returns DzTexture The opacity map for this material.
	 */
	getOpacityMap() {};
	/**
	 * @returns DzBoolProperty The property that controls the render priority propagation for this material.
	 */
	getPropagatePriorityControl() {};
	/**
	 * @returns DzEnumProperty The property that controls the render priority for this material.
	 */
	getRenderPriorityControl() {};
	/**
	 * @returns Array A list of the shapes this material is on.
	 */
	getShapeList() {};
	/**
	 * @returns DzFloatProperty The property that controls the smoothing angle for this material.
	 */
	getSmoothAngleControl() {};
	/**
	 * @returns DzBoolProperty The property that controls whether smoothing is enabled for this material.
	 */
	getSmoothControl() {};
	/**
	 * @returns Number The current smoothing angle for the material.
	 */
	getSmoothingAngle() {};
	/**
	 * @returns Array A list of (trimmed) tags on this material.
	 * @since 4.7.1.29
	 */
	getTags() {};
	/**
	 * @returns DzStringProperty The property that holds the tags for this material.
	 * @since 4.7.1.29
	 */
	getTagsControl() {};
	/**
	 * @returns DzEnumProperty The property that controls the active UV set for this material.
	 */
	getUVSetControl() {};
	/**
	 * @returns Boolean true if the material supports mapping of the Diffuse channel, otherwise false.
	 */
	isColorMappable() {};
	/**
	 * @returns Boolean true if the material is currently drawn with a highlight, otherwise false.
	 */
	isHighlighted() {};
	/**
	 * @returns Boolean true if the material supports mapping of the Opacity channel, otherwise false.
	 */
	isOpacityMappable() {};
	/**
	 * @returns Boolean true if this material is opaque, otherwise false.
	 */
	isOpaque() {};
	/**
	 * @returns Boolean Whether or not this material should propagate its render priority up to all the nodes that use it.
	 */
	isPropagateRenderPriorityToNodesEnabled() {};
	/**
	 * @returns Boolean true if the material is selected, otherwise false.
	 */
	isSelected() {};
	/**
	 * @returns Boolean true if smoothing is enabled for the material, otherwise false.
	 */
	isSmoothingOn() {};
	/**
	 * @description Marks the asset as being modified. Makes the current author the author of the file.
	 * @returns Boolean true if the asset was successfully marked as modified, otherwise false.
	 */
	modifyAsset() {};
	/**
	 * @description Marks the asset as being modified. Makes the current author the author of the file. Sets the file URI for the asset to the given URI.
	 * @returns Boolean true if the asset was successfully marked as modified, otherwise false.
	 * @param {DzUri} newUri - The new file URI to set for the asset.
	 */
	modifyAsset(newUri) {};
	/**
	 * @description TODO:
	 * Add description.
	 * @returns Boolean
	 */
	needsPtex() {};
	/**
	 * @returns Boolean true if the rendering geometry needs the additional dPds and dPdsM parameters for shaders, otherwise false.
	 */
	needsTangentSpaceParams() {};
	/**
	 * @description Set the selection state for this material.
	 * @param {Boolean} onOff - If true, the material will be selected. If false, the material will be deselected.
	 */
	select(onOff) {};
	/**
	 * @description Set the 'baked' shader map for this material. This overrides any current material settings and just draws the map. This is useful for representing the results of off-line shaders that can not be represented in OpenGL - the results of the shader are 'baked' onto a texture map, and then applied to the material with this function.
	 * @param {DzTexture} img - The image that will be applied to the material instead of the current material settings. If NULL, the current baked map is cleared and the material is returned to using its current settings.
	 */
	setBakedMap(img) {};
	/**
	 * @description Set the opacity value for this material.
	 */
	setBaseOpacity(val) {};
	/**
	 * @description Set the color ('texture') map for this material.
	 */
	setColorMap(img) {};
	/**
	 * @description Set the diffuse color for this material.
	 */
	setDiffuseColor(color) {};
	/**
	 * @since 4.11.0.76
	 * @param {Number} width - The desired width for the line end.
	 */
	setLineEndWidth(width) {};
	/**
	 * @description Sets whether or not smoothing is enabled for the material.
	 * @since 4.11.0.76
	 * @param {Color} color - The color to use for preview lines.
	 */
	setLinePreviewColor(color) {};
	/**
	 * @since 4.11.0.76
	 * @param {Number} width - The desired width for the line start.
	 */
	setLineStartWidth(width) {};
	/**
	 * @since 4.11.0.109
	 * @param {Number} width - The desired width for the line UV.
	 */
	setLineUVWidth(width) {};
	/**
	 * @description Set the opactiy map for this material.
	 */
	setOpacityMap(img) {};
	/**
	 * @description Sets the smoothing angle for the material. This only has effect on the material if smoothing is enabled.
	 * @param {Number} angle - The smoothing angle for the material. Any edges on the mesh where angle of the normals of the adjacent facets is less than this value will be smoothed. Higher values mean more smoothing, lower values mean less smoothing.
	 */
	setSmoothingAngle(angle) {};
	/**
	 * @description Sets whether or not smoothing is enabled for the material.
	 * @param {Boolean} onOff - If true, smoothing is applied according to the smoothing angle. If false, no smoothing is applied to the material.
	 */
	setSmoothingOn(onOff) {};
	/**
	 * @returns Boolean true if these materials are using the same shaders, otherwise false.
	 */
	shadersMatch(otherMat) {};
	/**
	 * @returns Boolean true if this material should always embed into a DSON scene, otherwise false.
	 */
	shouldAlwaysEmbed() {};
	/**
	 * @description Causes this material to be drawn with a highlight based on the styles current highlight color. This is used by material selection tools, etc, to give visual feedback to the user about a material in the viewport.
	 */
	startDrawHighlight() {};
	/**
	 * @description Causes this material to stop being drawn with a highlight.
	 */
	stopDrawHighlight() {};
	/**
	 * @description Deprecated
	 * @returns Number
	 */
	getNumUVMaps() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the material has been modified.
	 * @signature `"assetModified()"`
	 * @event
	 */
	assetModified() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted after the material has been saved.
	 * @signature `"assetWasSaved()"`
	 * @event
	 */
	assetWasSaved() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Transmitted when the baked map of this material changes.
	 * @signature `"bakedMapChanged()"`
	 * @event
	 */
	bakedMapChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the UV line width changes
	 * @signature `"lineUVWidthChanged()"`
	 * @event
	 */
	lineUVWidthChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the start or end line width changes
	 * @signature `"lineWidthChanged()"`
	 * @event
	 */
	lineWidthChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Transmitted when the selection state of this material changes.
	 * @signature `"selectionStateChanged(DzMaterial*,bool)"`
	 * @event
	 */
	selectionStateChanged(mat, onOff) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Transmitted when one of the values of this material changes.
	 * @signature `"settingsChanged()"`
	 * @event
	 */
	settingsChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Transmitted when the smoothing settings of this material change.
	 * @signature `"smoothingChanged()"`
	 * @event
	 */
	smoothingChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the tags on this material change.
	 * @signature `"tagsChanged()"`
	 * @event
	 */
	tagsChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Transmitted when the uv settings of this material change.
	 * @signature `"uvsChanged()"`
	 * @event
	 */
	uvsChanged() {};

}
/**
 * An asset save filter for saving a Material(s) Preset in the DSON format.
 * See Also:
 */
class DzMaterialAssetFilter extends DzAssetFileOutFilter {
	/**
	 * @description TODO:
	 * Add description.
	 */
	constructor() {};

}
/**
 * 
 */
class DzMatrix3 extends Object {
	/**
	 * @description Default Constructor.
	 * @param {Boolean} initIdentity - If true, this matrix will be set to the identity matrix, otherwise, this matrix values will be indeterminate.
	 */
	constructor(initIdentity = false) {};
	/**
	 * @description Creates a 4×3 matrix by parsing a string.
	 * @param {String} mtx - A string representation of the 4×3 matrix in the form "[ m11, m21, m31, m12, m22, m32, m13, m23, m33, m14, m24, m34 ]"
	 */
	constructor(mtx) {};
	/**
	 * @description Constructs a 4×3 matrix from 12 elements in "Column Major" order.
	 * @param {Number} m11 - The value of this matrix at [1, 1]
	 * @param {Number} m21 - The value of this matrix at [2, 1]
	 * @param {Number} m31 - The value of this matrix at [3, 1]
	 * @param {Number} m12 - The value of this matrix at [1, 2]
	 * @param {Number} m22 - The value of this matrix at [2, 2]
	 * @param {Number} m32 - The value of this matrix at [3, 2]
	 * @param {Number} m13 - The value of this matrix at [1, 3]
	 * @param {Number} m23 - The value of this matrix at [2, 3]
	 * @param {Number} m33 - The value of this matrix at [3, 3]
	 * @param {Number} m14 - The value of this matrix at [1, 4]
	 * @param {Number} m24 - The value of this matrix at [2, 4]
	 * @param {Number} m34 - The value of this matrix at [3, 4]
	 */
	constructor(m11, m21, m31, m12, m22, m32, m13, m23, m33, m14, m24, m34) {};
	/**
	 * @description Constructor from three axes of the rotation coord system. These are assumed to be (but do not have to be if a sheared or warped coord system is desired) to be orthogonal unit vectors.
	 * @since 4.6.4.98
	 */
	constructor(xAxis, yAxis, zAxis) {};
	/**
	 * @description Constructs a 4×3 matrix from a quaternion.
	 * @since 4.6.4.98
	 * @param {DzQuat} rot - The rotation to initialize this matrix to.
	 */
	constructor(rot) {};
	/**
	 * @description Copy Constructor.
	 * @param {DzMatrix3} mat - The matrix to copy.
	 */
	constructor(mat) {};
	/**
	 * @description Whether or not this matrix is identity
	 * @type {Boolean}
	 */
	isIdentity;
	/**
	 * @description The value of this matrix at [1, 1]
	 * @type {Number}
	 */
	m11;
	/**
	 * @description The value of this matrix at [1, 2]
	 * @type {Number}
	 */
	m12;
	/**
	 * @description The value of this matrix at [1, 3]
	 * @type {Number}
	 */
	m13;
	/**
	 * @description The value of this matrix at [1, 4]
	 * @type {Number}
	 */
	m14;
	/**
	 * @description The value of this matrix at [2, 1]
	 * @type {Number}
	 */
	m21;
	/**
	 * @description The value of this matrix at [2, 2]
	 * @type {Number}
	 */
	m22;
	/**
	 * @description The value of this matrix at [2, 3]
	 * @type {Number}
	 */
	m23;
	/**
	 * @description The value of this matrix at [2, 4]
	 * @type {Number}
	 */
	m24;
	/**
	 * @description The value of this matrix at [3, 1]
	 * @type {Number}
	 */
	m31;
	/**
	 * @description The value of this matrix at [3, 2]
	 * @type {Number}
	 */
	m32;
	/**
	 * @description The value of this matrix at [3, 3]
	 * @type {Number}
	 */
	m33;
	/**
	 * @description The value of this matrix at [3, 4]
	 * @type {Number}
	 */
	m34;
	/**
	 * @returns Number The determinant of the upper 3×3 part of this matrix.
	 * @since 4.9.2.18
	 */
	det3() {};
	/**
	 * @returns DzMatrix3 The inverse of this matrix.
	 */
	inverse() {};
	/**
	 * @description Sets this matrix to be identity.
	 */
	makeIdentity() {};
	/**
	 * @returns DzMatrix4 This matrix as a 4×4 matrix.
	 * @since 4.9.2.18
	 */
	matrix4() {};
	/**
	 * @description Calculates the multiplication of this matrix by the given matrix.
	 * @returns DzMatrix3 The result of the multiplication.
	 * @param {DzMatrix3} mat - The matrix to multiply by.
	 */
	multiply(mat) {};
	/**
	 * @description Multiplies this matrix by given column vector, giving column vector result.
	 * @returns DzVec3 The result of multiplying the given vector through this matrix.
	 * @param {DzVec3} vec - The vector to multiplying this matrix by.
	 */
	multMatrixVec(vec) {};
	/**
	 * @description Transforms the given vector through this matrix.
	 * @returns DzVec3
	 * @since 4.9.2.18
	 * @param {DzVec3} vec - The vector to transform through this matrix.
	 */
	multVec(vec) {};
	/**
	 * @description Sets the rotation part of this matrix to zero.
	 */
	noRot() {};
	/**
	 * @description Sets the scale part of this matrix to unity.
	 */
	noScale() {};
	/**
	 * @description Sets the translation part of this matrix to zero.
	 */
	noTrans() {};
	/**
	 * @description Test for orthogonal 3×3 sub-matrix (orthonormal rows).
	 * @returns Boolean
	 */
	orthogonal() {};
	/**
	 * @description Orthogonalize this matrix.
	 */
	orthogonalize() {};
	/**
	 * @description Accumulate rotation by pre-multiplying.
	 * @param {DzQuat} rot - The quaternion at which to rotate.
	 */
	preRotate(rot) {};
	/**
	 * @description Accumulate rotation around the X axis by pre-multiplying.
	 * @param {Number} radians - The radians at which to rotate.
	 */
	preRotateX(radians) {};
	/**
	 * @description Accumulate rotation around the Y axis by pre-multiplying.
	 * @param {Number} radians - The radians at which to rotate.
	 */
	preRotateY(radians) {};
	/**
	 * @description Accumulate rotation around the Z axis by pre-multiplying.
	 * @param {Number} radians - The radians at which to rotate.
	 */
	preRotateZ(radians) {};
	/**
	 * @description Accumulate a translation by pre-multiplying.
	 * @param {DzVec3} vec - The point at which to translate.
	 */
	preTranslate(vec) {};
	/**
	 * @description Accumulate rotation (by post-multiplying).
	 * @param {DzQuat} rot - The quaternion at which to rotate
	 */
	rotate(rot) {};
	/**
	 * @description Accumulate rotation around the X axis (by post-multiplying).
	 * @param {Number} radians - The radians at which to rotate.
	 */
	rotateX(radians) {};
	/**
	 * @description Accumulate rotation around the Y axis (by post-multiplying).
	 * @param {Number} radians - The radians at which to rotate.
	 */
	rotateY(radians) {};
	/**
	 * @description Accumulate rotation around the Z axis (by post-multiplying).
	 * @param {Number} radians - The radians at which to rotate.
	 */
	rotateZ(radians) {};
	/**
	 * @returns DzVec3 The i'th row of this matrix.
	 * @since 4.9.2.18
	 */
	row(i) {};
	/**
	 * @description Accumulates a scale along an arbitrary axis (by post-multiplying).
	 * @since 4.9.2.18
	 * @param {Number} scale - The scale to apply.
	 * @param {DzVec3} dir - The direction to scale.
	 * @param {Boolean} affectTrans - Whether or not to affect the transform rows.
	 */
	scale(scale, direction, affectTrans = false) {};
	/**
	 * @description TODO:
	 * Add description.
	 */
	scale(vec, affectTrans = false) {};
	/**
	 * @description TODO:
	 * Add description.
	 */
	scale(scale, affectTrans = false) {};
	/**
	 * @description Sets matrix to translate by given vector, leaving rotation as is.
	 * @param {DzVec3} vec - The point at which to translate.
	 */
	setTrans(vec) {};
	/**
	 * @description Shears this matrix along the x and y axis (by post-multiplying).
	 * @since 4.9.2.18
	 * @param {Number} xShear - The value to shear along the x axis.
	 * @param {Number} yShear - The value to shear along the y axis.
	 */
	shearXY(xShear, yShear) {};
	/**
	 * @description Shears this matrix along the x and z axis (by post-multiplying).
	 * @since 4.9.2.18
	 * @param {Number} xShear - The value to shear along the x axis.
	 * @param {Number} zShear - The value to shear along the z axis.
	 */
	shearXZ(xShear, zShear) {};
	/**
	 * @description Shears this matrix along the y and z axis (by post-multiplying).
	 * @since 4.9.2.18
	 * @param {Number} yShear - The value to shear along the y axis.
	 * @param {Number} zShear - The value to shear along the z axis.
	 */
	shearYZ(yShear, zShear) {};
	/**
	 * @returns String A string representation of this matrix in the form "[ m11, m21, m31, m12, m22, m32, m13, m23, m33, m14, m24, m34 ]".
	 */
	toString() {};
	/**
	 * @returns Number The trace of this matrix.
	 * @since 4.9.2.18
	 */
	trace() {};
	/**
	 * @description Accumulate a translation (by post-multiplying).
	 * @param {DzVec3} vec - The point at which to translate.
	 */
	translate(vec) {};

}
/**
 * 
 */
class DzMatrix4 extends Object {
	/**
	 * @description Default Constructor.
	 * @param {Boolean} initIdentity - If true, this matrix will be set to the identity matrix, otherwise, this matrix values will be indeterminate.
	 */
	constructor(initIdentity = false) {};
	/**
	 * @description Creates a 4×4 matrix by parsing a string.
	 * @param {String} mtx - A string representation of the 4×4 matrix in the form "[ m11, m21, m31, m41, m12, m22, m32, m42, m13, m23, m33, m43, m14, m24, m34, m44 ]"
	 */
	constructor(mtx) {};
	/**
	 * @description Constructs a 4×4 matrix from 16 elements in "Column Major" order.
	 * @param {Number} m11 - The value of this matrix at [1, 1]
	 * @param {Number} m21 - The value of this matrix at [2, 1]
	 * @param {Number} m31 - The value of this matrix at [3, 1]
	 * @param {Number} m41 - The value of this matrix at [4, 1]
	 * @param {Number} m12 - The value of this matrix at [1, 2]
	 * @param {Number} m22 - The value of this matrix at [2, 2]
	 * @param {Number} m32 - The value of this matrix at [3, 2]
	 * @param {Number} m42 - The value of this matrix at [4, 2]
	 * @param {Number} m13 - The value of this matrix at [1, 3]
	 * @param {Number} m23 - The value of this matrix at [2, 3]
	 * @param {Number} m33 - The value of this matrix at [3, 3]
	 * @param {Number} m43 - The value of this matrix at [4, 3]
	 * @param {Number} m14 - The value of this matrix at [1, 4]
	 * @param {Number} m24 - The value of this matrix at [2, 4]
	 * @param {Number} m34 - The value of this matrix at [3, 4]
	 * @param {Number} m44 - The value of this matrix at [4, 4]
	 */
	constructor(m11, m21, m31, m41, m12, m22, m32, m42, m13, m23, m33, m43, m14, m24, m34, m44) {};
	/**
	 * @description Constructor from three axes of the rotation coord system. These are assumed to be (but do not have to be if a sheared or warped coord system is desired) to be orthogonal unit vectors.
	 * @since 4.6.4.98
	 */
	constructor(xAxis, yAxis, zAxis) {};
	/**
	 * @description Constructs a 4×4 matrix from a quaternion.
	 * @since 4.6.4.98
	 * @param {DzQuat} rot - The rotation to initialize this matrix to.
	 */
	constructor(rot) {};
	/**
	 * @description Copy Constructor.
	 * @param {DzMatrix4} mat - The matrix to copy.
	 */
	constructor(mat) {};
	/**
	 * @description Whether or not this matrix is identity
	 * @type {Boolean}
	 */
	isIdentity;
	/**
	 * @description The value of this matrix at [1, 1]
	 * @type {Number}
	 */
	m11;
	/**
	 * @description The value of this matrix at [1, 2]
	 * @type {Number}
	 */
	m12;
	/**
	 * @description The value of this matrix at [1, 3]
	 * @type {Number}
	 */
	m13;
	/**
	 * @description The value of this matrix at [1, 4]
	 * @type {Number}
	 */
	m14;
	/**
	 * @description The value of this matrix at [2, 1]
	 * @type {Number}
	 */
	m21;
	/**
	 * @description The value of this matrix at [2, 2]
	 * @type {Number}
	 */
	m22;
	/**
	 * @description The value of this matrix at [2, 3]
	 * @type {Number}
	 */
	m23;
	/**
	 * @description The value of this matrix at [2, 4]
	 * @type {Number}
	 */
	m24;
	/**
	 * @description The value of this matrix at [3, 1]
	 * @type {Number}
	 */
	m31;
	/**
	 * @description The value of this matrix at [3, 2]
	 * @type {Number}
	 */
	m32;
	/**
	 * @description The value of this matrix at [3, 3]
	 * @type {Number}
	 */
	m33;
	/**
	 * @description The value of this matrix at [3, 4]
	 * @type {Number}
	 */
	m34;
	/**
	 * @description The value of this matrix at [4, 1]
	 * @type {Number}
	 */
	m41;
	/**
	 * @description The value of this matrix at [4, 2]
	 * @type {Number}
	 */
	m42;
	/**
	 * @description The value of this matrix at [4, 3]
	 * @type {Number}
	 */
	m43;
	/**
	 * @description The value of this matrix at [4, 4]
	 * @type {Number}
	 */
	m44;
	/**
	 * @returns DzMatrix4 The inverse of this matrix.
	 */
	inverse() {};
	/**
	 * @description Test and choose the best inverse for this matrix.
	 * @since 4.9.2.18
	 */
	invert() {};
	/**
	 * @description Sets this matrix to be identity.
	 */
	makeIdentity() {};
	/**
	 * @returns DzMatrix3 The value of this matrix as a DzMatrix3.
	 * @since 4.9.2.18
	 */
	matrix3() {};
	/**
	 * @description Calculates the multiplication of this matrix by the given matrix.
	 * @returns DzMatrix4 The result of the multiplication.
	 * @since 4.14.1.36
	 * @param {DzMatrix4} mat - The matrix to multiply by.
	 */
	multiply(mat) {};
	/**
	 * @description Multiplies matrix by given column vector, giving column vector result.
	 * @returns DzVec3 The result of multiplying the given vector through this matrix.
	 * @param {DzVec3} vec - The vector to multiply this matrix by.
	 */
	multMatrixVec(vec) {};
	/**
	 * @description Multiplies given row vector by matrix, giving row vector result.
	 * @returns DzVec3 The result of multiplying the given vector through this matrix.
	 * @param {DzVec3} vec - The vector to multiply this matrix by.
	 */
	multVecMatrix(vec) {};
	/**
	 * @description Test for orthogonal 3×3 sub-matrix (orthonormal rows).
	 * @returns Boolean
	 * @since 4.6.4.98
	 */
	orthogonal() {};
	/**
	 * @description Accumulates a uniform scale by pre-multiplying.
	 * @param {Number} scale - The scale to apply.
	 */
	preScale(scale) {};
	/**
	 * @description Accumulates a general scale by pre-multiplying.
	 * @param scale - The scale to apply.
	 */
	preScale(vec) {};
	/**
	 * @description Accumulates a scale along an arbitrary axis by pre-multiplying.
	 * @since 4.9.2.18
	 * @param {Number} scale - The scale to apply.
	 * @param {DzVec3} direction - The direction to scale.
	 */
	preScale(scale, direction) {};
	/**
	 * @description Shears the matrix along the x and y axis (by pre-multiplying).
	 * @since 4.9.2.18
	 * @param {Number} xShear - The value to shear along the x axis.
	 * @param {Number} yShear - The value to shear along the y axis.
	 */
	preShearXY(xShear, yShear) {};
	/**
	 * @description Shears the matrix along the x and z axis (by pre-multiplying).
	 * @since 4.9.2.18
	 * @param {Number} xShear - The value to shear along the x axis.
	 * @param {Number} zShear - The value to shear along the z axis.
	 */
	preShearXZ(xShear, zShear) {};
	/**
	 * @description Shears the matrix along the y and z axis (by pre-multiplying).
	 * @since 4.9.2.18
	 * @param {Number} yShear - The value to shear along the y axis.
	 * @param {Number} zShear - The value to shear along the z axis.
	 */
	preShearYZ(yShear, zShear) {};
	/**
	 * @description Accumulate a translation by pre-multiplying.
	 * @param {DzVec3} vec - The point at which to translate.
	 */
	preTranslate(vec) {};
	/**
	 * @description Accumulate rotation (by post-multiplying).
	 * @param {DzQuat} rot - The quaternion at which to rotate.
	 */
	rotate(rot) {};
	/**
	 * @description Accumulate rotation around the X axis (by post-multiplying).
	 * @param {Number} radians - The radians at which to rotate.
	 */
	rotateX(radians) {};
	/**
	 * @description Accumulate rotation around the Y axis (by post-multiplying).
	 * @param {Number} radians - The radians at which to rotate.
	 */
	rotateY(radians) {};
	/**
	 * @description Accumulate rotation around the Z axis (by post-multiplying).
	 * @param {Number} radians - The radians at which to rotate.
	 */
	rotateZ(radians) {};
	/**
	 * @returns DzVec3 The first three elements of the i'th row of this matrix.
	 * @since 4.9.2.18
	 */
	row(i) {};
	/**
	 * @description Accumulates a scale along an arbitrary axis (by post-multiplying).
	 * @since 4.9.2.18
	 * @param {Number} scale - The scale to apply.
	 * @param {DzVec3} direction - The direction to scale.
	 */
	scale(scale, direction) {};
	/**
	 * @description Accumulates a general scale (by post-multiplying).
	 * @param {DzVec3} vec - The scale to apply.
	 */
	scale(vec) {};
	/**
	 * @description Accumulates a uniform scale (by post-multiplying).
	 * @param {Number} scale - The scale to apply.
	 */
	scale(scale) {};
	/**
	 * @description Sets the first three elements of the i'th row of this matrix.
	 * @param {Number} i - The row to set.
	 * @param {DzVec3} vec - The values for the first three elements.
	 */
	setRow(i, vec) {};
	/**
	 * @description Sets matrix to translate by given vector, leaving rotation as is.
	 * @param {DzVec3} vec - The point at which to translate.
	 */
	setTrans(vec) {};
	/**
	 * @description Shears this matrix along the x and y axis (by post-multiplying).
	 * @since 4.9.2.18
	 * @param {Number} xShear - The value to shear along the x axis.
	 * @param {Number} yShear - The value to shear along the y axis.
	 */
	shearXY(xShear, yShear) {};
	/**
	 * @description Shears this matrix along the x and z axis (by post-multiplying).
	 * @since 4.9.2.18
	 * @param {Number} xShear - The value to shear along the x axis.
	 * @param {Number} zShear - The value to shear along the z axis.
	 */
	shearXZ(xShear, zShear) {};
	/**
	 * @description Shears this matrix along the y and z axis (by post-multiplying).
	 * @since 4.9.2.18
	 * @param {Number} yShear - The value to shear along the y axis.
	 * @param {Number} zShear - The value to shear along the z axis.
	 */
	shearYZ(yShear, zShear) {};
	/**
	 * @returns String A string representation of this matrix in the form "[ m11, m21, m31, m41, m12, m22, m32, m42, m13, m23, m33, m43, m14, m24, m34, m44 ]".
	 */
	toString() {};
	/**
	 * @returns Number The trace of this matrix.
	 * @since 4.9.2.18
	 */
	trace() {};
	/**
	 * @description Accumulate a translation (by post-multiplying).
	 * @param {DzVec3} vec - The point at which to translate.
	 */
	translate(vec) {};
	/**
	 * @returns DzMatrix4 The transpose of this matrix.
	 * @since 4.9.2.18
	 */
	transpose() {};

}
/**
 * TODO:
 * Add detailed description.
 */
class DzMenu extends QObject {
	/**
	 * @description Adds the DzAction to the given menu.
	 * @returns Number The item id of the action in the menu.
	 * @param {DzAction} action - The action to add to the menu.
	 * @param {Number} menuId - The menu id of the menu to add the action to. If zero, the action will be added to the root menu.
	 */
	addAction(action, menuId = 0) {};
	/**
	 * @description Convenience method to find an action by class name and add it to the menu.
	 * @returns Number The item id of the action in the menu.
	 * @param {String} className - The class name of the action to add to the menu.
	 * @param {Number} menuId - The menu id of the menu to add the action to. If zero, the action will be added to the root menu.
	 */
	addAction(className, menuId = 0) {};
	/**
	 * @description Adds an entry to the given menu.
	 * @returns Number The item id of the new menu item.
	 * @param {String} label - The label that will appear in the menu for the user to activate the item.
	 * @param {Number} menuId - The menu id of the menu to add the item to. If zero, the item will be added to the root menu.
	 */
	addItem(label, menuId = 0) {};
	/**
	 * @description Adds an entry to the given menu and connects it to a slot.
	 * @returns Number The item id of the new menu item.
	 * @param {String} label - The label that will appear in the menu for the user to activate the item.
	 * @param {QObject} receiver - The QObject to connect the activate signal to.
	 * @param {String} member - The name of the slot/signal that will be connected to the activate signal.
	 * @param {Number} menuId - The menu id of the menu to add the item to. If zero, the item will be added to the root menu.
	 */
	addItem(label, receiver, member, menuId = 0) {};
	/**
	 * @description Adds a separator bar to the given menu.
	 * @param {Number} menuId - The menu id of the menu to add the separator to. If zero, the separator will be added to the root menu.
	 */
	addSeparator(menuId = 0) {};
	/**
	 * @description Creates a submenu with the given label, and adds it to the given menu.
	 * @returns Number The menu id of the new submenu.
	 * @param {String} label - The text that will appear in the parent menu for the user to activate the submenu.
	 * @param {Number} menuId - The menu id of the parent menu to add the submenu to. If zero, the submenu will be added to the root menu.
	 */
	addSubMenu(label, menuId = 0) {};
	/**
	 * @description Shows the menu to the user.
	 * @returns Number The item id of the item selected by the user, or -1 if the menu was closed without the user selecting an item.
	 * @param {Point} pos - The global position that the menu will be displayed at.
	 */
	exec(pos) {};
	/**
	 * @description Finds a submenu with the given label, and returns its menu id.
	 * @returns Number The menu id of the new submenu, -1 if submenu is not found.
	 * @param {String} label - The text that appears in the parent menu for the user to activate the submenu.
	 * @param {Number} menuId - The menu id of the parent menu to search for the submenu in. If zero, the root menu will be searched.
	 */
	findSubMenu(label, menuId = 0) {};
	/**
	 * @returns Boolean true if no items or actions have been added to the menu, otherwise false.
	 */
	isEmpty() {};
	/**
	 * @description Sets weather or not an item is checkable.
	 * @param {Number} itemId - The id of the item.
	 * @param {Boolean} checkable - If true, the item is made checkable.
	 */
	setItemCheckable(itemId, checkable) {};
	/**
	 * @description Sets weather or not an item is checked.
	 * @param {Number} itemId - The id of the item.
	 * @param {Boolean} checked - If true, the item is checked.
	 */
	setItemChecked(itemId, checked) {};
	/**
	 * @description Sets the data for the item.
	 * @param {Number} itemId - The id of the item.
	 * @param {Object} data - The data to set.
	 */
	setItemData(itemId, data) {};
	/**
	 * @description Sets whether or not an item is enabled.
	 * @since 4.11.0.208
	 * @param {Number} itemId - The id of the item.
	 * @param {Boolean} enabled - If true, the action is enabled.
	 */
	setItemEnabled(itemId, enabled) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the user selects an item in the menu, or one of its submenus.
	 * @signature `"activated(int)"`
	 * @event
	 */
	activated(id) {};

}
/**
 * A global static object available via the Global.MessageBox variable.
 * This object provides functions that display pre-built message boxes to the user. This is the easiest way for a script to interact with a user - simply call one of the functions as shown in the following examples:Display an information box with an 'Ok' button
 * 
 * ### Example:
 * ```
 * MessageBox.information( qsTr("MyScript finished successfully."), qsTr("MyScript"), qsTr("&OK") );
 * ```
 * Ask the user a question with 'Yes'/'No' buttons
 * 
 * ### Example:
 * ```
 * if( MessageBox.question( qsTr("Do you want to reset the entire figure?"), qsTr("MyScript"), qsTr("&Yes"), qsTr("&No") ) == 0 ){
 * resetEntireFigure();
 * }
 * ```
 * Display a warning message to the user
 * 
 * ### Example:
 * ```
 * if( MessageBox.warning( qsTr("If you continue, the entire figure will be reset!"), qsTr("MyScript"), qsTr("&OK"), qsTr("&Cancel") ) == 1 ){
 * return;
 * }
 * ```
 * Display a critical message to the user
 * 
 * ### Example:
 * ```
 * var error = doSomething();
 * if( error != 0 ){
 * MessageBox.critical( qsTr("The script has encountered a critical error!"), qsTr("MyScript"), qsTr("&OK") );
 * return;
 * }
 * ```
 */
class DzMessageBox extends QObject {
	/**
	 * @description Shows a critical dialog box to the user.
	 * @returns Number The index of the button that the user pressed (0, 1, or 2)
	 * @param {String} text - The text that is shown in the body of the dialog.
	 * @param {String} title - The title of the dialog.
	 * @param {String} button0 - The text of button 0.
	 * @param {String} button1 - The text of button 1 (if empty, no button will be shown).
	 * @param {String} button2 - The text of button 2 (if empty, no button will be shown).
	 */
	critical(text, title, button0, button1 = "", button2 = "") {};
	/**
	 * @description Shows an information dialog box to the user.
	 * @returns Number The index of the button that the user pressed (0, 1, or 2).
	 * @param {String} text - The text that is shown in the body of the dialog.
	 * @param {String} title - The title of the dialog.
	 * @param {String} button0 - The text of button 0.
	 * @param {String} button1 - The text of button 1 (if empty, no button will be shown).
	 * @param {String} button2 - The text of button 2 (if empty, no button will be shown).
	 */
	information(text, title, button0, button1 = "", button2 = "") {};
	/**
	 * @description Shows a question dialog box to the user.
	 * @returns Number The index of the button that the user pressed (0, 1, or 2).
	 * @param {String} text - The text that is shown in the body of the dialog.
	 * @param {String} title - The title of the dialog.
	 * @param {String} button0 - The text of button 0.
	 * @param {String} button1 - The text of button 1.
	 * @param {String} button2 - The text of button 2 (if empty, no button will be shown).
	 */
	question(text, title, button0, button1, button2 = "") {};
	/**
	 * @description Shows a warning dialog box to the user.
	 * @returns Number The index of the button that the user pressed (0, 1, or 2).
	 * @param {String} text - The text that is shown in the body of the dialog.
	 * @param {String} title - The title of the dialog.
	 * @param {String} button0 - The text of button 0.
	 * @param {String} button1 - The text of button 1.
	 * @param {String} button2 - The text of button 2 (if empty, no button will be shown).
	 */
	warning(text, title, button0, button1, button2 = "") {};

}
/**
 * TODO:
 * Add detailed description.
 */
class DzModifier extends DzElement {
	/**
	 * @returns Number The section that this modifier was assigned to in the DzObject modifier stack (list).
	 * @since 4.11.0.44
	 */
	getAssignedModifierStackSectionID() {};
	/**
	 * @returns Number The section that this modifier should be a part of in the DzObject modifier stack (list).
	 * @since 4.11.0.44
	 */
	getPreferredModifierStackSectionID() {};
	/**
	 * @returns Number The value used to mark a modifier as not having a section ID.
	 * @since 4.11.0.44
	 */
	getUnknownModifierStackSectionID() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted immediately before the modifier is removed from its owner.
	 * @signature `"aboutToBeRemoved()"`
	 * @event
	 */
	aboutToBeRemoved() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the modifier has been added to its owner.
	 * @signature `"added()"`
	 * @event
	 */
	added() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the modifier has changed and needs to be reapplied.
	 * @signature `"currentValueChanged()"`
	 * @event
	 */
	currentValueChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the modifier has been removed from its owner.
	 * @signature `"removed()"`
	 * @event
	 */
	removed() {};

}
/**
 * Since:
 * Attention:@attention Attention:
 */
class DzMorphLoader extends DzRefCountedItem, QObject {
	/**
	 * @description Default Constructor. Creates a morph loader with default settings.
	 */
	constructor() {};
	/**
	 * @description ENUM: TODO: Add description.
	 */
	WeightMap;
	/**
	 * @description ENUM: TODO: Add description.
	 */
	FacetList;
	/**
	 * @description ENUM: TODO: Add description.
	 */
	EdgeList;
	/**
	 * @description ENUM: TODO: Add description.
	 */
	VertexList;
	/**
	 * @description ENUM: TODO: Add description.
	 */
	UnknownMap;
	/**
	 * @description ENUM: TODO: Add description.
	 */
	EntireFigure;
	/**
	 * @description ENUM: TODO: Add description.
	 */
	SelectedNodes;
	/**
	 * @description ENUM: TODO: Add description.
	 */
	PrimaryNode;
	/**
	 * @description ENUM: TODO: Add description.
	 */
	SingleSkinFigure;
	/**
	 * @description ENUM: TODO: Add description.
	 */
	SingleSkinFigureFromGraft;
	/**
	 * @description ENUM: TODO: Add description.
	 */
	DoNotMirror;
	/**
	 * @description ENUM: TODO: Add description.
	 */
	XSwap;
	/**
	 * @description ENUM: TODO: Add description.
	 */
	XPosToNeg;
	/**
	 * @description ENUM: TODO: Add description.
	 */
	XNegToPos;
	/**
	 * @description ENUM: TODO: Add description.
	 */
	YSwap;
	/**
	 * @description ENUM: TODO: Add description.
	 */
	YPosToNeg;
	/**
	 * @description ENUM: TODO: Add description.
	 */
	YNegToPos;
	/**
	 * @description ENUM: TODO: Add description.
	 */
	ZSwap;
	/**
	 * @description ENUM: TODO: Add description.
	 */
	ZPosToNeg;
	/**
	 * @description ENUM: TODO: Add description.
	 */
	ZNegToPos;
	/**
	 * @description ENUM: TODO: Add description.
	 */
	MakeUnique;
	/**
	 * @description ENUM: TODO: Add description.
	 */
	DeltasAndERCLinks;
	/**
	 * @description ENUM: TODO: Add description.
	 */
	DeltasOnly;
	/**
	 * @description Gets the path for a given weight map context and a given node.
	 * @returns String The path for the weight map context on node.
	 * @param {DzWeightMapContext} context - The weight map context.
	 * @param {DzNode} node - The node.
	 */
	static getPathForContext(context, node) {};
	/**
	 * @description Creates a morph on the node provided from the geometry loaded from the file. This function supports morph creation from vertex-only geometries.
	 * @returns String The log containing messages (if any) about the creation of the morph, otherwise an empty string.
	 * @param {DzFileIOSettings} settings - The settings to use for loading the geometry; i.e., the scale for the mesh, whether or not to swap the Y and Z coordinates of the mesh, etc.
	 * @param {DzNode} node - The node containing the geometry to create the morph for.
	 * @param {Boolean} onlyErrorsOrWarnings - If true (default), only errors and warnings will be returned.
	 * @param {Boolean} plainText - If true (default), the returned string will be plain text, otherwise the returned string will contain HTML.
	 */
	createMorph(settings, node, onlyErrorsOrWarnings = true, plainText = true) {};
	/**
	 * @description Creates a morph on the node provided from the given geometry. This function supports morph creation from vertex-only geometries.
	 * @returns String The log containing messages (if any) about the creation of the morph, otherwise an empty string.
	 * @since 4.15.0.6
	 * @param {vertexmesh_dz} mesh - The geometry with the morph information.
	 * @param {DzNode} node - The node containing the geometry to create the morph for.
	 * @param {Boolean} onlyErrorsOrWarnings - If true (default), only errors and warnings will be returned.
	 * @param {Boolean} plainText - If true (default), the returned string will be plain text, otherwise the returned string will contain HTML.
	 */
	createMorphFromMesh(mesh, node, onlyErrorsOrWarnings = true, plainText = true) {};
	/**
	 * @returns Number The strength that will be used for attenuating the effect of the morph being loaded on the vertices that reside along the boundary of the current geometric selection.
	 */
	getAttenuateEdgeStrength() {};
	/**
	 * @returns String The path to the map that will be used for attenuating the effect of the morph.
	 */
	getAttenuateMapPath() {};
	/**
	 * @returns Number The strength that the map used to attenuate the effect of the morph will be applied at.
	 */
	getAttenuateStrength() {};
	/**
	 * @description Gets whether or not orphans should be cleaned up when overwriting existing morphs. An 'orphan' is a morph by the same name that does not have any deltas from a new morph.
	 * @returns Boolean true if orphans are to be cleaned up when overwriting existing morphs, otherwise false.
	 */
	getCleanUpOrphans() {};
	/**
	 * @returns DzNode The node that the control property will be located on.
	 * @attention This has no meaning if getCreateControlProperty() is false.
	 */
	getControlNode() {};
	/**
	 * @returns DzNumericProperty The property that will serve as the additional control property for the morph(s) created.
	 * @attention This has no meaning if getCreateControlProperty() is false.
	 */
	getControlProperty() {};
	/**
	 * @returns String The custom label that will be used for secondary (non-control) properties.
	 * @attention This has no meaning if getControlPropertyUseCustomLabel() or getCreateControlProperty() are false.
	 */
	getControlPropertyCustomLabel() {};
	/**
	 * @returns Number The custom value for creating ERC links to the control property.
	 * @attention This has no meaning if getControlPropertyERCUseCustomValue() or getCreateControlProperty() are false.
	 */
	getControlPropertyERCCustomValue() {};
	/**
	 * @returns DzERCLink The ERC type to use when connecting secondary properties to the control property.
	 */
	getControlPropertyERCType() {};
	/**
	 * @returns Boolean true if a custom value will be used for the ERC links to the control property, otherwise false.
	 * @attention This has no meaning if getCreateControlProperty() is false.
	 */
	getControlPropertyERCUseCustomValue() {};
	/**
	 * @returns Boolean true if a custom label will be used for the secondary (non-control) properties, otherwise false.
	 * @attention This has no meaning if getCreateControlProperty() is false.
	 */
	getControlPropertyUseCustomLabel() {};
	/**
	 * @returns Boolean true if the loader will create and use ERC links to an additional control property.
	 */
	getCreateControlProperty() {};
	/**
	 * @description Gets the minimum amount of deviation from the original position of a given vertex that will be recorded in the morph.
	 * @returns Number The minimum amount of deviation from the original position of a given vertex to be recorded in the morph.
	 */
	getDeltaTolerance() {};
	/**
	 * @returns String The name to display for this collection of settings.
	 * @since 4.15.0.7
	 */
	getDisplayName() {};
	/**
	 * @returns String The full path to the file that this morph will load its geometry from.
	 */
	getFilename() {};
	/**
	 * @returns Boolean true if secondary (non-control) properties are hidden, otherwise false.
	 * @attention This has no meaning if getCreateControlProperty() is false.
	 */
	getHideSecondaryProperties() {};
	/**
	 * @description Gets the type of mirroring to apply.
	 * @returns The type of mirroring that will be applied to the morph.
	 */
	getMorphMirroring() {};
	/**
	 * @returns String The name of the morph(s) that will be created by this morph loader.
	 */
	getMorphName() {};
	/**
	 * @returns true if an existing morph by the same name will be replaced, otherwise false.
	 */
	getOverwriteExisting() {};
	/**
	 * @returns Boolean true if existing deltas in a morph by the same name be preserved, otherwise false.
	 */
	getPreserveExistingDeltas() {};
	/**
	 * @returns String The path of the property group that morph value properties will be added to.
	 */
	getPropertyGroupPath() {};
	/**
	 * @returns Boolean true if joint deformations and other modifiers will be reversed from the current world-space geometry to calculate the deltas, otherwise false.
	 */
	getReverseDeformations() {};
	/**
	 * @returns String The path of the pose file to be applied to the figure before a morph is loaded.
	 */
	getReverseDeformationsPose() {};
	/**
	 * @returns Boolean true if the morph of the same name already exists, otherwise false.
	 * @param {DzNode} node - The node to check for the morph.
	 */
	morphAlreadyExists(node) {};
	/**
	 * @description Reads common object settings from a configuration file (*.dsx).
	 * @returns Boolean true if the file was successfully read, otherwise false.
	 * @since 4.9.3.47
	 * @param {String} filename - The full path of the file to read.
	 */
	readObjectCommonSettingsFromConfigFile(filename) {};
	/**
	 * @description Reads the settings of the first object in a configuration file (*.dsx).
	 * @returns Boolean true if the read was successful, otherwise false. (since 4.15.0.4)
	 * @since 4.9.3.47
	 * @param {String} filename - The name of the file to read.
	 * @param {String} filePath - The path of the directory that the file to read is in.
	 */
	readObjectSettingsFromConfigFile(filename, filePath) {};
	/**
	 * @description Saves object settings to a configuration file (*.dsx).
	 * @returns Boolean true if the save was successful, otherwise false. (since 4.15.0.4)
	 * @since 4.9.3.47
	 * @param {String} filename - The full path of the file to write to.
	 * @param {String} projectPath - The full path of the directory containing the files of a project.
	 * @param {String} relativeToProject - If true, filename is saved relative to projectPath. If false, filename is considered to be absolute and projectPath is ignored.
	 */
	saveObjectSettingsToConfigFile(filename, projectPath, saveProjectRelative) {};
	/**
	 * @description Sets the strength to use for attenuating the effect of the morph on the vertices that reside along the boundary of the current geometric selection.
	 * @param {Number} val - The strength value to set. A value of 0 yields no (0%) attenuation. A value of 1 yields full (100%) attenuation. Values between 0 and 1 yield attenuation that is commensurate with the specified value.
	 * @attention This value is ignored when a weight map is used for attenuation.
	 */
	setAttenuateEdgeStrength(val) {};
	/**
	 * @description Sets the path to the map used to attenuate the effect of the morph.
	 * @param {String} mapPath - The path to the map.
	 * @attention The value of mapPath must follow one of these patterns:<NodeName>facetlist.facegroup::<FaceGroupName><NodeName>facetlist::surface::<SurfaceName><NodeName>facetlist::selecitonset::<SelectionSetName><NodeName>edgelist::selecitonset::<SelectionSetName><NodeName>vertexlist::selecitonset::<SelectionSetName><NodeName>weightmap::<WeightMapName><MapNodeName>weightmap::<WeightMapName><MapNodeName>weightmap::<NodeName>/<WeightMapName>
	 */
	setAttenuateMapPath(mapPath) {};
	/**
	 * @description Sets the strength to apply the map used to attenuate the effect of the morph.
	 * @param {Number} val - The strength value to set. A value of 1.0 will cause the values in the map to be applied at their full respective values. A value of 0.0 will cause the values in the map to not be applied. A value of -1.0 will cause the values in the map to be inverted and applied at the opposite of their full respective values.
	 */
	setAttenuateStrength(val) {};
	/**
	 * @description Sets whether or not orphans should be cleaned up when overwriting existing morphs. An 'orphan' is a morph by the same name that does not have any deltas from a new morph.
	 * @param {Boolean} onOff - If true, orphans will be cleaned up.
	 */
	setCleanUpOrphans(onOff) {};
	/**
	 * @description Sets the node that the control property will be located on.
	 * @param {DzNode} node - The node that will own the control property.
	 * @attention This has no effect if getCreateControlProperty() is false.
	 */
	setControlNode(node) {};
	/**
	 * @description Sets the property that will serve as the additional control property for the morph(s) created by this loader.
	 * @param {DzNumericProperty} prop - The control property for the new morph(s).
	 * @attention This has no effect if getCreateControlProperty() is false.
	 */
	setControlProperty(prop) {};
	/**
	 * @description Sets the custom label that will be used for secondary (non-control) properties.
	 * @param {String} label - The custom label to use for the secondary (non-control) properties.
	 * @attention This has no effect if getControlPropertyUseCustomLabel() or getCreateControlProperty() are false.
	 */
	setControlPropertyCustomLabel(label) {};
	/**
	 * @description Sets the custom value for creating ERC links to the control property.
	 * @param {Number} val - The custom multiplier for the ERC links that are created to the control property.
	 * @attention This has no effect if getControlPropertyERCUseCustomValue() or getCreateControlProperty() are false.
	 */
	setControlPropertyERCCustomValue(val) {};
	/**
	 * @description Sets the ERC link type to use when connecting secondary properties to the control property.
	 * @param {DzERCLink.ERCType} type - The ERC link type to use when connecting secondary properties to the control property.
	 */
	setControlPropertyERCType(type) {};
	/**
	 * @description Sets whether or not a custom value will be used for the ERC links to the control property.
	 * @param {Boolean} onOff - If true, a custom value will be used for the links to the control property. Otherwise the default 1:1 ratio is assumed.
	 * @attention This has no effect if getCreateControlProperty() is false.
	 */
	setControlPropertyERCUseCustomValue(onOff) {};
	/**
	 * @description Sets whether or not a custom label will be used for the secondary (non-control) properties.
	 * @param {Boolean} onOff - If true, a custom label will be used for the secondary (non-control) properties. Otherwise the default label is used.
	 * @attention This has no effect if getCreateControlProperty() is false.
	 */
	setControlPropertyUseCustomLabel(onOff) {};
	/**
	 * @description Sets whether or not the loader will use and create ERC links to an additional control property.
	 * @param {Boolean} onOff - If true, the loader will create links to an additional control property, otherwise, settings for the additional control property will be ignored.
	 */
	setCreateControlProperty(onOff) {};
	/**
	 * @description Sets the minimum amount of deviation from the original position of a given vertex that will be recorded in the morph.
	 * @param {Number} val - The minimum amount of deviation from the original position of a given vertex to be recorded in the morph.
	 */
	setDeltaTolerance(val) {};
	/**
	 * @description Sets the file to read the geometry from.
	 * @param {String} filename - The full path of the file to load this morph's geometry from.
	 */
	setFilename(filename) {};
	/**
	 * @description Sets whether or not secondary (non-control) properties are hidden.
	 * @param {Boolean} onOff - If true, secondary (non-control) properties will be set as hidden.
	 * @attention This has no effect if getCreateControlProperty() is false.
	 */
	setHideSecondaryProperties(onOff) {};
	/**
	 * @description Sets the mode to load the morph for node.
	 * @returns true if mode can be set for node, otherwise false.
	 * @param {LoadMode} mode - The mode to set for the morph being loaded.
	 * @param {DzNode} node - The node with the geometry that the morph is being loaded for.
	 * @attention If node is a "single skin" figure, only the SingleSkinFigure and SingleSkinFigureFromGraft modes are considered valid. If node is a figure, but not a "single skin" figure (e.g., a legacy figure), only the EntireFigure, SelectedNodes and PrimaryNode modes are considered valid. If node is a prop, only the PrimaryNode mode is considered valid.
	 */
	setLoadMode(mode, node) {};
	/**
	 * @description Sets the type of mirroring to apply to the morph.
	 * @param {MirroringType} type - The type of mirroring to apply to the morph.
	 */
	setMorphMirroring(type) {};
	/**
	 * @description Sets the name of the morph(s) that will be created by this morph loader.
	 * @returns DzMorph
	 * @param {String} name - The name for the morph_dz object(s) that will be created by this loader.
	 */
	setMorphName(name) {};
	/**
	 * @description Sets whether or not to override/replace existing morphs with the same name.
	 * @param {OverwriteMode} mode - If true, existing morphs on the node(s) with the same name will be replaced by the loaded morph.
	 */
	setOverwriteExisting(mode) {};
	/**
	 * @description Sets whether or not to preserve existing deltas in a morph by the same name.
	 * @param mode - If true, existing deltas in a morph by the same name will be preserved.
	 */
	setPreserveExistingDeltas(onOff) {};
	/**
	 * @description Sets the property group that morph value properties will be added to.
	 * @param {String} path - The path of the property group that value properties from the morph(s) created by this loader will be assigned to.
	 */
	setPropertyGroupPath(path) {};
	/**
	 * @description Sets whether or not joint deformations and other modifiers will be reversed before calculating deltas.
	 * @param {Boolean} onOff - If true, joint deformations and other modifiers will be reversed from the current world-space geometry to calculate the deltas. If false, the deltas will be calculated from the base geometry.
	 */
	setReverseDeformations(onOff) {};
	/**
	 * @description Sets the path of the pose file to apply to the figure before a morph is loaded.
	 * @param {String} filePath - The path of the pose file to be used.
	 */
	setReverseDeformationsPose(filePath) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description TODO: Add Description
	 * @signature `TODO: Add Description`
	 * @event
	 */
	applyAfterJointChanged(onOff) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description TODO: Add Description
	 * @signature `TODO: Add Description`
	 * @event
	 */
	attenuateChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description TODO: Add Description
	 * @signature `TODO: Add Description`
	 * @event
	 */
	attenuateEdgeStrengthChanged(strength) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description TODO: Add Description
	 * @signature `TODO: Add Description`
	 * @event
	 */
	attenuateStrengthChanged(strength) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description TODO: Add Description
	 * @signature `TODO: Add Description`
	 * @event
	 */
	controlNodeChanged(node) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description TODO: Add Description
	 * @signature `TODO: Add Description`
	 * @event
	 */
	controlPropertyChanged(prop) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description TODO: Add Description
	 * @signature `TODO: Add Description`
	 * @event
	 */
	createControlPropertyChanged(onOff) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description TODO: Add Description
	 * @signature `TODO: Add Description`
	 * @event
	 */
	deltaToleranceChanged(val) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description TODO: Add Description
	 * @signature `TODO: Add Description`
	 * @event
	 */
	ercCustomValueChanged(val) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the filename has changed.
	 * @signature `"filenameChanged(const QString&)"`
	 * @event
	 */
	filenameChanged(name) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description TODO: Add Description
	 * @signature `TODO: Add Description`
	 * @event
	 */
	hideSecondaryChanged(onOff) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description TODO: Add Description
	 * @signature `TODO: Add Description`
	 * @event
	 */
	mirroringChanged(mirroring) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the morph name has changed.
	 * @signature `"morphNameChanged(const QString&)"`
	 * @event
	 */
	morphNameChanged(name) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description TODO: Add Description
	 * @signature `TODO: Add Description`
	 * @event
	 */
	overwriteExistingChanged(value) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description TODO: Add Description
	 * @signature `TODO: Add Description`
	 * @event
	 */
	preserveExistingDeltasChanged(onOff) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the path of the property group has changed.
	 * @signature `"propertyGroupPathChanged(const QString&)"`
	 * @event
	 */
	propertyGroupPathChanged(path) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description TODO: Add Description
	 * @signature `TODO: Add Description`
	 * @event
	 */
	reverseDeformationsChanged(onOff) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description TODO: Add Description
	 * @signature `TODO: Add Description`
	 * @event
	 */
	secondaryLabelChanged(label) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description TODO: Add Description
	 * @signature `TODO: Add Description`
	 * @event
	 */
	smoothCageChanged(onOff) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description TODO: Add Description
	 * @signature `TODO: Add Description`
	 * @event
	 */
	useErcCustomValueChanged(onOff) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description TODO: Add Description
	 * @signature `TODO: Add Description`
	 * @event
	 */
	useSecondaryLabelChanged(onOff) {};

}
/**
 * This class implements a batch of morph loader objects that will be applied to the same node(s).
 * Since:
 * Attention:@attention Attention:
 */
class DzMorphLoaderBatch extends QObject {
	/**
	 * @description Default Constructor. Creates a morph loader batch that will be applied to the given node.
	 */
	constructor() {};
	/**
	 * @description Adds a morph to the list to load.
	 * @since 4.9.3.47
	 * @param {String} filename - The filename of the object configuration file to load.
	 * @attention setNode() must be called before this is.
	 */
	addFromConfigFile(filename) {};
	/**
	 * @description Adds a morph to the list to load.
	 * @param {String} file - The filename of the morph file to load.
	 * @attention setNode() must be called before this is.
	 */
	addFromFile(file) {};
	/**
	 * @description Adds a list of morphs to the list to load.
	 * @param {Array} files - A list of the filenames of the morph files to load.
	 * @attention setNode() must be called before this is.
	 */
	addFromFiles(files) {};
	/**
	 * @description Adds a morph to the list to load.
	 * @returns DzVertexmesh
	 * @param {vertexmesh_dz} mesh - The vertex mesh with the morph to load.
	 * @attention setNode() must be called before this is.
	 */
	addFromMesh(mesh) {};
	/**
	 * @description Adds a morph to the list to load.
	 * @param {DzMorphLoader} morph - The morph to add.
	 */
	addMorph(morph) {};
	/**
	 * @description Clears the list of morphs to load.
	 */
	clear() {};
	/**
	 * @description Creates morphs on the node provided from the given geometry. This function supports morph creation from vertex-only geometries.
	 * @returns String The log containing messages about the creation of the morphs.
	 * @param {vertexmesh_dz} mesh - The geometry for the morphs.
	 * @param {DzNode} node - The node containing the geometry to create the morphs for.
	 * @param {Boolean} onlyErrorsOrWarnings - If true (default), only errors and warnings will be returned.
	 * @param {Boolean} plainText - If true (default), the returned string will be plain text, otherwise the returned string will contain HTML.
	 */
	createMorphs(mesh, node, onlyErrorsOrWarnings = true, plainText = true) {};
	/**
	 * @description Creates morphs on the node provided from the geometry loaded from the files. This function supports morph creation from vertex-only geometries.
	 * @returns String The log containing messages about the creation of the morph.
	 * @param {DzFileIOSettings} settings - The scale to apply to the geometry that is read from the file.
	 * @param {DzNode} node - The node containing the geometry to create the morph for.
	 * @param {Boolean} onlyErrorsOrWarnings - If true (default), only errors and warnings will be returned.
	 * @param {Boolean} plainText - If true (default), the returned string will be plain text, otherwise the returned string will contain HTML.
	 */
	createMorphs(settings, node, onlyErrorsOrWarnings = true, plainText = true) {};
	/**
	 * @returns Number The index of the found morph (if any), otherwise -1.
	 * @param {DzMorphLoader} morph - The morph to find.
	 */
	findMorph(morph) {};
	/**
	 * @returns DzMorphLoader The morph in the list at the given index (if valid), otherwise Null.
	 * @param {Number} index - The index of the morph to get.
	 */
	getMorph(index) {};
	/**
	 * @returns DzNode The node with the object that morphs will be loaded for (if set), otherwise NULL.
	 */
	getNode() {};
	/**
	 * @returns Number The number of morphs in the list to load.
	 */
	getNumMorphs() {};
	/**
	 * @description Moves the position of a morph in the list.
	 * @param {DzMorphLoader} morph - The morph to move.
	 * @param {Boolean} upDown - If true, the morph is moved to the position earlier in the list. If false, the morph is moved to the position later in the list.
	 */
	moveMorph(morph, upDown) {};
	/**
	 * @returns String The filename of the preset configuration file to use (if any) to setup a morph added from file, otherwise an empty string.
	 */
	presetConfigurationFile() {};
	/**
	 * @description Removes a morph from the list to load.
	 * @param {DzMorphLoader} morph - The morph to remove.
	 */
	removeMorph(morph) {};
	/**
	 * @description Saves project (and potentially object) settings to configuration files (*.dsx).
	 * @returns Boolean true if the save was successful, otherwise false. (since 4.15.0.4)
	 * @since 4.9.3.47
	 * @param {String} filename - The full path of the file to write to.
	 * @param {Boolean} saveRelative - If true, object settings files are saved relative to the project file. If false, object settings files are saved adjacent to their respective source.
	 * @param {Boolean} saveObjects - If true, object settings will be saved to their respective files. If false, object settings files are not saved.
	 */
	saveProjectSettingsToConfigFile(filename, saveRelative, saveObjects) {};
	/**
	 * @description Sets the node with the object to load morphs for.
	 * @param {DzNode} node - The node to set.
	 */
	setNode(node) {};
	/**
	 * @description Sets the filename of a preset configuration file to use to setup morphs that are added to the list from file.
	 * @param {String} filename - The filename of the preset configuration file to use.
	 */
	setPresetConfigurationFile(filename) {};
	/**
	 * @description Sets whether or not a preset configuration file should be used to setup morphs that are added from file.
	 * @param {Boolean} onOff - If true, a preset configuration file should be used.
	 */
	setUsePresetConfiguration(onOff) {};
	/**
	 * @returns Boolean true if a preset configuration file should be used to setup morphs that are added from file, otherwise false.
	 */
	usePresetConfiguration() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description TODO: Add Description
	 * @signature `TODO: Add Description`
	 * @event
	 */
	morphAdded(morph) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description TODO: Add Description
	 * @signature `TODO: Add Description`
	 * @event
	 */
	morphListChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description TODO: Add Description
	 * @signature `TODO: Add Description`
	 * @event
	 */
	morphMoved(srcIdx, destIdx) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description TODO: Add Description
	 * @signature `TODO: Add Description`
	 * @event
	 */
	morphRemoved(morph, formerIndex) {};

}
/**
 * An asset save filter for saving Morph Support Asset(s) in the DSON format.
 * See Also:
 */
class DzMorphSupportAssetFilter extends DzAssetFileOutFilter {
	/**
	 * @description TODO:
	 * Add description.
	 */
	constructor() {};

}
/**
 * Responsible for the management of multimedia (audio/video) exporters/importers.
 * There is only one instance of this manager in an application. This instance is created and owned by DzApp. Request the instance via DzApp.getMultiMediaMgr().
 * See Also:
 */
class DzMultiMediaMgr extends QObject {
	/**
	 * @description Uses the filename extension to find an appropriate audio importer.
	 * @returns DzAudioImporter An appropriate importer for the given file name, or NULL if none is found. The caller takes ownership of this object and is responsible for deleting it.
	 */
	static findAudioImporter(filename) {};
	/**
	 * @description Uses the filename extension to find an appropriate video exporter.
	 * @returns DzVideoExporter An appropriate exporter for the given file name, or NULL if none is found. The caller takes ownership of this object and is responsible for deleting it.
	 */
	static findVideoExporter(filename) {};
	/**
	 * @returns DzAudioImporter A new instance of the i'th audio importer in the list. The caller takes ownership of this object and is responsible for deleting it.
	 */
	static getAudioImporter(i) {};
	/**
	 * @returns Number The number of audio importers currently supported.
	 */
	static getNumAudioImporters() {};
	/**
	 * @returns Number The number of video exporters currently supported.
	 */
	static getNumVideoExporters() {};
	/**
	 * @returns DzVideoExporter A new instance of the i'th video exporter in the list. The caller takes ownership of this object and is responsible for deleting it.
	 * @param {Number} i - The index of the exporter to create.
	 */
	static getVideoExporter(i) {};
	/**
	 * @description Populates the given filter with all the audio types recognized by the multimedia manager.
	 * @param {DzFileFilter} filter - The filter to populate
	 * @param {String} defaultFilter - The filter to set as the default
	 * @param {Boolean} makeAllFilesEntry - If true, and additional filter is created for all recognized file extensions.
	 */
	static makeAudioImportFileFilter(filter, defaultFilter = "", makeAllFilesEntry = true) {};
	/**
	 * @description Populates the given filter with all the video types recognized by the multimedia manager.
	 * @param {DzFileFilter} filter - The filter to populate
	 * @param {String} defaultFilter - The filter to set as the default
	 */
	static makeVideoExportFileFilter(filter, defaultFilter = "") {};
	/**
	 * @description Export the clip to a video file.
	 * @returns DzError DZ_NO_ERROR if the file export was successful.
	 * @param filename - The name of the file to export to.
	 * @param {DzVideoClip} clip - An instance of DzVideoClip containing the data to save.
	 * @param {Number} exporterIndex - The index of the exporter class to use. If this is less than 0, then the extension of fileName is used to attempt to find an appropriate exporter.
	 */
	exportVideoClip(fileName, clip, exporterIndex = -1) {};
	/**
	 * @returns String Last directory that audio files were imported from.
	 */
	getAudioClipLoadPath() {};
	/**
	 * @returns String Last directory that video files were exported to.
	 */
	getVideoClipSavePath() {};
	/**
	 * @description Import an audio clip from a file.
	 * @returns DzError DZ_NO_ERROR if the file import was successful.
	 * @param filename - The name of the file to import from.
	 * @param {DzAudioClip} clip - A pointer to a DzAudioClip instance to import the data into.
	 * @param {Number} importerIndex - The index of the importer class to use. If this is less than 0, then the extension of fileName is used to attempt to find an appropriate exporter.
	 */
	importAudioClip(fileName, clip, importerIndex = -1) {};

}
/**
 * Deprecated
 * Exists only to keep code written prior to 4.6.2.23 working. Do not use in new code. Use DzTextureLayer.BlendMultiply instead.
 */
class DzMultiplyBlend {
	/**
	 * @description Default Constructor
	 */
	constructor() {};

}
/**
 * DzNode objects all contain animatable position, rotation, and scale channels that can be set and accessed via the properties list in the DzElement class or through specialized calls in this class.
 * The transform order is Translate/Rotate/Scale. Non-uniform scaling is supported by implementing separate X, Y, and Z scale channels. All channels are independent internally and can have keys set on them independent of any other channel.
 * Note that channel independence holds exactly true for translations and scales, but does not hold true for rotations (which are represented to the user as Euler angle degrees for each axis channel). Euler angles are inherently inter-dependent and prone to numerical singularities ("gimbal lock") that make them less than perfect at representing rotations. For this reason, rotations are handled as DzQuat objects (quaternions) whenever possible. When setting keys on a DzNode, it is preferable to use the set*Rot() methods or set*Transform() methods that take DzQuat arguments. Setting rotations as a DzQuat will create keys on all three rotation channels but will assure that the values are reasonable.
 * Each node defines an order that axis rotations will be applied in for the node. The order defined is important as it serves to avoid numerical singularities ("gimbal lock"). The rotation order of a node should be defined such that the first axis in the order is the primary axis - the axis that the node will twist along. The second axis in the order should be defined as the axis where rotations are least likely to reach 90?. And the third axis in the order should be defined as the axis where rotations are most likely to reach 90?.
 * Nodes have an origin and an orientation that define the base position and rotation of its "local space," that is - a base from which a node's transformations can be expressed in relative terms. The origin defines the point around which a node rotates, the point around which a node is scaled, the point from which a node's translation is relative. In other words, the origin is the definition of an adjusted "center" point" (a positional offset) for the node. The origin of a node is defined in non-transformed world space coordinates. The orientation of a node defines the base rotation (a rotational offset) that a node's rotations are expressed as being relative to. Adjusting the orientation of a node only has an effect on the rotation of a node, it does not affect translation or scale transforms.
 * Several functions are provided for accessing the transformation data of a node. Below are descriptions of the groups of functions, and the transform space that they return data for.
 */
class DzNode extends DzElement {
	/**
	 * @description Default Constructor.
	 */
	constructor() {};
	/**
	 * @description Holds the author of the file for this node. (Read Only)
	 * @type {DzAuthor}
	 */
	assetAuthor;
	/**
	 * @description Holds the revision version of the asset file for this node. (Read Only)
	 * @type {DzVersion}
	 */
	assetFileRevision;
	/**
	 * @description Holds the asset id for this node.
	 * @type {String}
	 */
	assetId;
	/**
	 * @description Holds the asset id aliases for this node.
	 * @type {Array}
	 */
	assetIdAliases;
	/**
	 * @description Holds the modified date of the asset file for this node. (Read Only)
	 * @type {Date}
	 */
	assetModifiedDate;
	/**
	 * @description Holds whether or not the asset for this node needs to be saved. (Read Only)
	 * @type {Boolean}
	 */
	assetNeedSave;
	/**
	 * @description Holds the URI of the asset source for this node; only valid when the asset is in an embedded state - i.e. modified. (Read Only)
	 * @type {DzUri}
	 */
	assetSource;
	/**
	 * @description Holds the asset URI for this node. (Read Only)
	 * @type {DzUri}
	 */
	assetUri;
	/**
	 * @description Holds the path relative to the node asset file folder to search for addons.
	 * @type {String}
	 */
	extendedAddonsPath;
	/**
	 * @description Holds additional ids that this node extends.
	 * @type {String}
	 */
	extendedAssetIds;
	/**
	 * @description Holds the name aliases for this node.
	 * @type {Array}
	 */
	nameAliases;
	/**
	 * @description Holds the render priority for this node. Render priority controls the order in which nodes are rendered. The higher the priority, the earlier the node will be rendered. If several nodes have the same render priority, those nodes will be rendered in an arbitrary order.
	 * 
	 * 
	 *  The default render priority is RENDER_PRIORITY_NORMAL.
	 * @type {DzRenderMgr}
	 */
	renderPriority;
	/**
	 * @returns DzNode The (root) node (if any) that results from duplicating node, otherwise null.
	 * @since 4.9.3.80
	 * @param {Boolean} propagate - If true, the hierarchy of nodes that are children of node will also be duplicated.
	 */
	static duplicate(node, propagate) {};
	/**
	 * @description Adds a child to this node.
	 * @returns DzError
	 * @param {DzNode} child - The node to add to this node's list of children. A child must be removed from one parent before it can be attached to another.
	 * @param {Boolean} inPlace - If true, the necessary transforms to parent 'In Place' will be calculated and applied to the child.
	 */
	addNodeChild(child, inPlace = false) {};
	/**
	 * @description Sets the end point for this node, adjusting for controllers.
	 * @param {DzVec3} endPnt - The end point for this node. This is the node's end point in relation to its geometry.
	 */
	adjustEndPoint(endPnt) {};
	/**
	 * @description Sets the orientation for this node adjusting for controllers.
	 * @param {DzQuat} orientation - The orientation for this node. This defines the space in which node rotations occur.
	 */
	adjustOrientation(orientation) {};
	/**
	 * @description Sets the orientation for this node adjusting for controllers.
	 * @param {DzVec3} angles - The orientation for this node in degrees. This defines the space in which node rotations occur.
	 */
	adjustOrientationAngles(angles) {};
	/**
	 * @description Sets the origin for this node adjusting for controllers.
	 * @param {DzVec3} origin - The origin for this node. This is the node's center point in relation to its geometry.
	 */
	adjustOrigin(origin) {};
	/**
	 * @returns DzQuat The quaternion, based on the rotation order of this node, that would rotate this node in local-space according to the Euler angles passed.
	 * @since 4.12.1.111
	 * @param {DzVec3} anglesRadians - The per axis Euler angles, in radians, to convert.
	 */
	calcLocalRotation(anglesRadians) {};
	/**
	 * @description Get the current shadow-casting status of this node.
	 * @returns Boolean true if the node is casting shadows or the active mode of the active renderer does not allow disabling shadows (and thus dynamically hides the property providing control to the user), otherwise false.
	 */
	castsShadow() {};
	/**
	 * @description Removes all local transform data.
	 */
	clearAllTransformData() {};
	/**
	 * @description Clears the override color to be used to draw the node while using manipulation draw styles.
	 */
	clearManipOverColor() {};
	/**
	 * @description Removes local transform data.
	 * @param {DzTimeRange} range - The time range to clear transform data across.
	 */
	clearTransformData(range) {};
	/**
	 * @returns DzNode The (root) node (if any) that results from duplicating this node, otherwise null.
	 * @since 4.9.3.80
	 * @param {Boolean} propagate - If true, the hierarchy of nodes that are children of this node will also be duplicated.
	 */
	duplicate(propagate) {};
	/**
	 * @description Finalizes the node's geometry cache.
	 * @param {Boolean} isRender - If true, the geometry cache will be finalized for a render operation, otherwise, the geometry will be prepared for a drawing operation.
	 * @param {Boolean} allowResChange - If true, the geometry is allowed to change resolution in the finalize. otherwise, the geometry will stay at it's current resolution.
	 */
	finalize(isRender = false, allowResChange = true) {};
	/**
	 * @returns Number The index of node as a child of this node (if any), otherwise -1.
	 * @param {DzNode} node - The node to find the index of.
	 */
	findChildIndex(node) {};
	/**
	 * @description Get a child from this node by name.
	 * @returns DzNode A child node having a matching name (if any), otherwise NULL.
	 * @param {String} name - The name of the child to find.
	 * @param {Boolean} recurse - If true, this will be called recursively until a child with a matching name is found.
	 */
	findNodeChild(name, recurse = false) {};
	/**
	 * @description Get a child from this node by asset id.
	 * @returns DzNode A child node having a matching asset ID (if any), otherwise NULL.
	 * @param {String} assetID - The asset ID of the child to find.
	 * @param {Boolean} recurse - If true, this will be called recursively until a child with a matching asset ID is found.
	 * @param {Boolean} checkSource - If true, the asset's source will be checked for a match.
	 */
	findNodeChildByAssetID(assetID, recurse = false, checkSource = true) {};
	/**
	 * @description Get a child from this node by label.
	 * @returns DzNode A child node having a matching label (if any), otherwise NULL.
	 * @since 4.10.0.68
	 * @param {String} label - The label of the child to find.
	 * @param {Boolean} recurse - If true, this will be called recursively until a child with a matching label is found.
	 */
	findNodeChildByLabel(label, recurse = false) {};
	/**
	 * @description Get a child from this node by name (or alias).
	 * @returns DzNode A child node having a matching name or alias (if any), otherwise NULL.
	 * @param {String} name - The name (or alias) of the child to find.
	 * @param {Boolean} aliases - If true, consider name aliases.
	 * @param {Boolean} recurse - If true, this will be called recursively until a child with a matching name (or alias) is found.
	 */
	findNodeChildByNameOrAlias(name, aliases, recurse = false) {};
	/**
	 * @returns DzProperty The property referred to by the uri or null if the property cannot be found.
	 * @since 4.9.2.20
	 * @param {DzUri} uri - The URI path to the property.
	 */
	findPropertyReference(uri) {};
	/**
	 * @returns DzBoolProperty The property used for controlling whether or not the transform controls for this node, and the local transform, is overridden to be identity.
	 * @since 4.11.0.300
	 */
	getDisableTransformControl() {};
	/**
	 * @returns DzVec3 The endpoint for this node.
	 * @param {Boolean} defaultVal - If true, the default value for the end point is returned, otherwise the current value is.
	 */
	getEndPoint(defaultVal = false) {};
	/**
	 * @returns DzFloatProperty The float property that controls the x position of the node's end point.
	 */
	getEndXControl() {};
	/**
	 * @returns DzFloatProperty The float property that controls the y position of the node's end point.
	 */
	getEndYControl() {};
	/**
	 * @returns DzFloatProperty The float property that controls the z position of the node's end point.
	 */
	getEndZControl() {};
	/**
	 * @returns DzFloatProperty The float property that controls local rotation of the node around the first axis of the rotation order.
	 * @since 4.9.3.17
	 */
	getFirstAxisRotControl() {};
	/**
	 * @returns DzBoolProperty The property used for controlling whether or not the local transform for this node is ignored by any geometry associated with it.
	 * @since 4.12.1.68
	 */
	getIgnoreLocalTransformControl() {};
	/**
	 * @returns DzBox3 A three dimensional box containing the current node (including associated geometry - if any) oriented to the cardinal axes of the world and represented in coordinates that are relative to the node origin.
	 */
	getLocalBoundingBox() {};
	/**
	 * @returns DzOrientedBox3 A three dimensional box containing the current node (including associated geometry - if any) oriented to the cardinal axes of the node and represented in coordinates that are relative to the node origin.
	 */
	getLocalOrientedBox() {};
	/**
	 * @returns DzVec3 The local-space position of the node at the current time.
	 */
	getLocalPos() {};
	/**
	 * @returns DzVec3 The local-space position of the node.
	 * @param {DzTime} tm - The scene time at which to get the transform.
	 * @param {Boolean} defaultVal - Use the default version of the origin, end point, and orientation instead of the current position.
	 */
	getLocalPos(tm, defaultVal = false) {};
	/**
	 * @returns DzQuat The local-space rotation of the node at the current time.
	 */
	getLocalRot() {};
	/**
	 * @returns DzQuat The local-space rotation of the node.
	 * @param {DzTime} tm - The scene time at which to get the transform.
	 * @param {Boolean} defaultVal - Use the default version of the origin, end point, and orientation instead of the current position.
	 */
	getLocalRot(tm, defaultVal = false) {};
	/**
	 * @returns DzMatrix3 The local-space scale of the node at the time.
	 */
	getLocalScale() {};
	/**
	 * @returns DzMatrix3 The local-space scale of the node.
	 * @param {DzTime} tm - The scene time at which to get the transform.
	 * @param {Boolean} defaultVal - Use the default version of the origin, end point, and orientation instead of the current position.
	 */
	getLocalScale(tm, defaultVal = false) {};
	/**
	 * @description Get the composed local transform info for this node at the current time.
	 * @returns DzMatrix3 A matrix representing the composed local transform for this node.
	 */
	getLocalTransform() {};
	/**
	 * @description Get the composed local transform info for this node.
	 * @returns DzMatrix3 A matrix representing the composed local transform for this node.
	 * @param {DzTime} tm - The scene time at which to get the transform.
	 * @param {Boolean} defaultVal - Use the default version of the origin, end point, and orientation instead of the current position.
	 */
	getLocalTransform(tm, defaultVal = false) {};
	/**
	 * @returns Object An object with properties named after the transform properties and their respective values.
	 * @since 4.12.1.111
	 * @param {DzVec3} posLocal - The local-space position offset for this node.
	 * @param {DzQuat} rotLocal - The local-space rotation offset for this node.
	 * @param {DzMatrix3} scaleLocal - The local-space scale offset for this node.
	 */
	getLocalTransformAxisValues(posLocal, rotLocal, scaleLocal) {};
	/**
	 * @description Get the child at the given index.
	 * @returns DzNode The i'th node attached to this node as a child. NULL if the index is invalid.
	 */
	getNodeChild(i) {};
	/**
	 * @returns Array A list containing the children of this node.
	 * @param {Boolean} recurse - If true, recursively collect all this node's children, scanning the hierarchy from this node down. If false (default), collect only this node's immediate children.
	 */
	getNodeChildren(recurse = false) {};
	/**
	 * @description Get the parent of this node.
	 * @returns DzNode The parent of this node in the scene hierarchy, NULL if this node is at root level.
	 */
	getNodeParent() {};
	/**
	 * @description Get the number of children attached to this node.
	 * @returns Number The number of nodes attached to this node as children in the scene hierarchy.
	 */
	getNumNodeChildren() {};
	/**
	 * @description Get the object currently associated with this node.
	 * @returns DzObject The object that is associated with this node. NULL if node has no object.
	 */
	getObject() {};
	/**
	 * @returns DzQuat The orientation of the node.
	 * @param {Boolean} defaultVal - Get the default or current values of the orientation. defaultVal defaults to false or current position.
	 */
	getOrientation(defaultVal = false) {};
	/**
	 * @returns DzFloatProperty The float property that controls the x rotation of the node's orientation.
	 */
	getOrientXControl() {};
	/**
	 * @returns DzFloatProperty The float property that controls the y rotation of the node's orientation.
	 */
	getOrientYControl() {};
	/**
	 * @returns DzFloatProperty The float property that controls the z rotation of the node's orientation.
	 */
	getOrientZControl() {};
	/**
	 * @returns DzVec3 The origin of the node.
	 * @param {Boolean} defaultVal - Get the default or current values of the origin. Default is false for current.
	 */
	getOrigin(defaultVal = false) {};
	/**
	 * @returns DzFloatProperty The float property that controls the x position of the node's origin.
	 */
	getOriginXControl() {};
	/**
	 * @returns DzFloatProperty The float property that controls the y position of the node's origin.
	 */
	getOriginYControl() {};
	/**
	 * @returns DzFloatProperty The float property that controls the z position of the node's origin.
	 */
	getOriginZControl() {};
	/**
	 * @returns DzNumericNodeProperty The property used for tracking the point-at target.
	 */
	getPointAtControl() {};
	/**
	 * @returns Number The value that determines how closely this node aims at its point-at target.
	 * @since 4.12.1.68
	 */
	getPointAtStrength() {};
	/**
	 * @returns DzNode The point at target for this node (if any), otherwise null.
	 * @since 4.12.1.68
	 */
	getPointAtTarget() {};
	/**
	 * @returns DzPresentation The presentation for this property or NULL if there is none.
	 */
	getPresentation() {};
	/**
	 * @returns DzOrientedBox3 If the preview box has been set, a three dimensional box that represents the current node (including associated geometry - if any) oriented to the cardinal axes of the node and represented in coordinates that are relative to the node origin. If a preview box has not been set, an invalid box.
	 * @attention The preview box is typically set when assets are being loaded from file. If an asset referenced within the file cannot be found/loaded, the preview box is used to provide an indication to the user of where the node (including associated geometry - if any) would be located and oriented within the scene.
	 */
	getPreviewBox() {};
	/**
	 * @returns DzEnumProperty The enum property that controls the render priority of this node.
	 */
	getRenderPriorityControl() {};
	/**
	 * @returns DzBoolProperty The boolean property that controls render visibility of this node.
	 */
	getRenderVisibilityControl() {};
	/**
	 * @description Get the node rotation order.
	 * @returns DzRotationOrder The order that the axis rotations are applied to this node.
	 */
	getRotationOrder() {};
	/**
	 * @returns DzFloatProperty The float property that controls general scale of the node.
	 */
	getScaleControl() {};
	/**
	 * @returns DzFloatProperty The float property that controls local rotation of the node around the second axis of the rotation order.
	 * @since 4.9.3.17
	 */
	getSecondAxisRotControl() {};
	/**
	 * @returns DzBoolProperty The boolean property that controls selectability of this node.
	 */
	getSelectabilityControl() {};
	/**
	 * @returns DzSelectionMap The selection map for this node.
	 */
	getSelectionMap() {};
	/**
	 * @returns DzNode The node to be selected if selection is promoted, otherwise this node.
	 */
	getSelectionNode() {};
	/**
	 * @returns DzBoolProperty The boolean property that controls whether this light is casting shadows.
	 */
	getShadowControl() {};
	/**
	 * @returns DzBoolProperty The boolean property that controls simulation visibility of this node.
	 * @since 4.9.4.25
	 */
	getSimulationVisibilityControl() {};
	/**
	 * @returns String The singleton identifier for this node (if it is a singleton), otherwise an empty string.
	 * @since 4.12.2.20
	 */
	getSingletonIDString() {};
	/**
	 * @description Traverses up the node hierarchy and attempts to find a DzSkeleton.
	 * @returns DzSkeleton The first DzSkeleton node encountered. NULL if this node is not in the hierarchy of a skeleton.
	 */
	getSkeleton() {};
	/**
	 * @returns DzFloatProperty The float property that controls local rotation of the node around the third axis of the rotation order.
	 * @since 4.9.3.17
	 */
	getThirdAxisRotControl() {};
	/**
	 * @returns DzFloatProperty The float property that tools should use to control local rotation of the node around the first axis of the rotation order.
	 * @since 4.9.3.17
	 */
	getToolFirstAxisRotControl() {};
	/**
	 * @returns DzQuat The local-space rotation of the node at the current time, in the context of the current tool.
	 * @since 4.9.3.16
	 */
	getToolLocalRot() {};
	/**
	 * @returns DzQuat The local-space rotation of the node, in the context of the current tool.
	 * @since 4.8.1.13
	 * @param {DzTime} tm - The scene time at which to get the transform.
	 * @param {Boolean} defaultVal - Use the default version of the origin, end point, and orientation instead of the current position.
	 */
	getToolLocalRot(tm, defaultVal = false) {};
	/**
	 * @returns DzFloatProperty The float property that tools should use to control local rotation of the node around the second axis of the rotation order.
	 * @since 4.9.3.17
	 */
	getToolSecondAxisRotControl() {};
	/**
	 * @returns DzFloatProperty The float property that tools should use to control local rotation of the node around the third axis of the rotation order.
	 * @since 4.9.3.17
	 */
	getToolThirdAxisRotControl() {};
	/**
	 * @returns DzQuat The world-space rotation of the node, in the context of the current tool.
	 * @since 4.8.1.13
	 * @param {DzTime} tm - The scene time at which to get the transform.
	 * @param {Boolean} defaultVal - Whether or not to use the default version of the origin, end point, and orientation instead of the current position.
	 */
	getToolWSRot(tm, defaultVal = false) {};
	/**
	 * @returns DzQuat The world-space rotation of the node at the current time, in the context of the current tool.
	 * @since 4.9.3.16
	 */
	getToolWSRot() {};
	/**
	 * @description Get the world-space transformation data for this node at the current time, in the context of the current tool.
	 * @returns DzMatrix3 A matrix representing the composed world-space transform for this node.
	 * @since 4.9.3.16
	 */
	getToolWSTransform() {};
	/**
	 * @description Get the world-space transformation data for this node, in the context of the current tool.
	 * @returns DzMatrix3 A matrix representing the composed world-space transform for this node.
	 * @since 4.8.1.13
	 * @param {DzTime} tm - The scene time at which to get the transform.
	 * @param {Boolean} defaultVal - Whether or not to use the default version of the origin, end point, and orientation instead of the current position.
	 */
	getToolWSTransform(tm, defaultVal = false) {};
	/**
	 * @returns DzFloatProperty The float property that tools should use to control local rotation of the node around the x axis.
	 */
	getToolXRotControl() {};
	/**
	 * @returns DzFloatProperty The float property that tools should use to control local rotation of the node around the y axis.
	 */
	getToolYRotControl() {};
	/**
	 * @returns DzFloatProperty The float property that tools should use to control local rotation of the node around the z axis.
	 */
	getToolZRotControl() {};
	/**
	 * @returns DzBoolProperty The boolean property that controls viewport visibility of this node.
	 * @since 4.11.0.36
	 */
	getViewportVisibilityControl() {};
	/**
	 * @returns DzBoolProperty The boolean property that controls visibility (to viewports, to renders, to simulation) of this node.
	 */
	getVisibilityControl() {};
	/**
	 * @returns DzBox3 A three dimensional box containing the current node (including associated geometry - if any) oriented to the cardinal axes of the world and represented in coordinates that are relative to the world origin.
	 */
	getWSBoundingBox() {};
	/**
	 * @returns DzOrientedBox3 A three dimensional box containing the current node (including associated geometry - if any) oriented to the cardinal axes of the world and represented in coordinates that are relative to the node origin.
	 */
	getWSOrientedBox() {};
	/**
	 * @returns DzVec3 The world-space position of the node at the current time.
	 */
	getWSPos() {};
	/**
	 * @returns DzVec3 The world-space position of the node.
	 * @param {DzTime} tm - The scene time at which to get the transform.
	 * @param {Boolean} defaultVal - Whether or not to use the default version of the origin, end point, and orientation instead of the current position.
	 */
	getWSPos(tm, defaultVal = false) {};
	/**
	 * @returns DzQuat The world-space rotation of the node at the current time.
	 */
	getWSRot() {};
	/**
	 * @returns DzQuat The world-space rotation of the node.
	 * @param {DzTime} tm - The scene time at which to get the transform.
	 * @param {Boolean} defaultVal - Whether or not to use the default version of the origin, end point, and orientation instead of the current position.
	 */
	getWSRot(tm, defaultVal = false) {};
	/**
	 * @returns DzMatrix3 The world-space scale of the node at the current time.
	 */
	getWSScale() {};
	/**
	 * @returns DzMatrix3 The world-space scale of the node.
	 * @param {DzTime} tm - The scene time at which to get the transform.
	 * @param {Boolean} defaultVal - Whether or not to use the default version of the origin, end point, and orientation instead of the current position.
	 */
	getWSScale(tm, defaultVal = false) {};
	/**
	 * @description Get the world-space transformation data for this node at the current time.
	 * @returns DzMatrix3 A matrix representing the composed world-space transform for this node.
	 */
	getWSTransform() {};
	/**
	 * @description Get the world-space transformation data for this node.
	 * @returns DzMatrix3 A matrix representing the composed world-space transform for this node.
	 * @param {DzTime} tm - The scene time at which to get the transform.
	 * @param {Boolean} defaultVal - Whether or not to use the default version of the origin, end point, and orientation instead of the current position.
	 */
	getWSTransform(tm, defaultVal = false) {};
	/**
	 * @returns Object An object with properties named after the transform properties and their respective values, at the current time.
	 * @since 4.12.1.111
	 */
	getWSTransformAxisValues(posLocal, rotLocal, scaleLocal) {};
	/**
	 * @returns Object An object with properties named after the transform properties and their respective values, at the specified time.
	 * @since 4.12.1.111
	 * @param {DzTime} tm - The scene time at which to get the transform.
	 * @param {DzVec3} posLocal - The local-space position offset for this node.
	 * @param {DzQuat} rotLocal - The local-space rotation offset for this node.
	 * @param {DzMatrix3} scaleLocal - The local-space scale offset for this node.
	 */
	getWSTransformAxisValues(tm, posLocal, rotLocal, scaleLocal) {};
	/**
	 * @returns DzFloatProperty The float property that controls the local x position of the node.
	 */
	getXPosControl() {};
	/**
	 * @returns DzFloatProperty The float property that controls local rotation of the node around the x axis.
	 */
	getXRotControl() {};
	/**
	 * @returns DzFloatProperty The float property that controls scaling of the node along the x axis.
	 */
	getXScaleControl() {};
	/**
	 * @returns DzFloatProperty The float property that controls the local y position of the node.
	 */
	getYPosControl() {};
	/**
	 * @returns DzFloatProperty The float property that controls local rotation of the node around the y axis.
	 */
	getYRotControl() {};
	/**
	 * @returns DzFloatProperty The float property that controls scaling of the node along the y axis.
	 */
	getYScaleControl() {};
	/**
	 * @returns DzFloatProperty The float property that controls the local z position of the node.
	 */
	getZPosControl() {};
	/**
	 * @returns DzFloatProperty The float property that controls local rotation of the node around the z axis.
	 */
	getZRotControl() {};
	/**
	 * @returns DzFloatProperty The float property that controls scaling of the node along the z axis.
	 */
	getZScaleControl() {};
	/**
	 * @returns Boolean true if this node inherits scale from its parent, otherwise false.
	 */
	inheritsScale() {};
	/**
	 * @description Invalidates the bounding boxes for this node, causing them to be recalculated.
	 * @param {Boolean} checkSkeleton - Whether or not to invalidate the bounding box for this node's skeleton, if it has one.
	 */
	invalidateBoundingBoxes(checkSkeleton = true) {};
	/**
	 * @returns Boolean true if this node is set invisible by a group node, otherwise false.
	 */
	invisibleByGroup() {};
	/**
	 * @returns Boolean true if this node is set invisible in render by a group node, otherwise false.
	 * @since 4.9.4.73
	 */
	invisibleInRenderByGroup() {};
	/**
	 * @returns Boolean true if this node is set invisible in simulation by a group node, otherwise false.
	 * @since 4.9.4.73
	 */
	invisibleInSimulationByGroup() {};
	/**
	 * @returns Boolean true if this node is set invisible in view by a group node, otherwise false.
	 * @since 4.11.0.36
	 */
	invisibleInViewportByGroup() {};
	/**
	 * @returns Boolean true if the parent of this node, or any of its ancestors, is a DzBone and this node or any of its ancestors should redirect their viewport selection to their ancestors.
	 */
	isBoneSelectingNode() {};
	/**
	 * @returns Boolean true if this node is considered an editor node, otherwise false.
	 */
	isEditorNode() {};
	/**
	 * @returns Boolean true if this node should not be shown in the interface, otherwise false.
	 */
	isHidden() {};
	/**
	 * @returns Boolean true if the node is in the scene, otherwise false.
	 * @since 4.6.4.67
	 */
	isInScene() {};
	/**
	 * @returns Boolean true if the local transform is disabled, otherwise false.
	 * @since 4.12.1.68
	 */
	isLocalTransformDisabled() {};
	/**
	 * @returns Boolean true if the local transform is ignored, otherwise false.
	 * @since 4.12.1.68
	 */
	isLocalTransformIgnored() {};
	/**
	 * @description Checks whether or not a given node is one of this node's ancestors in the scene hierarchy.
	 * @returns Boolean true if the node is an ancestor of this node in the scene hierarchy, otherwise false.
	 * @since 4.15.0.18
	 * @param {DzNode} node - The node to look for.
	 * @param {Boolean} recurse - Whether or not to ascend the hierarchy.
	 */
	isNodeAncestorOf(node, recurse = true) {};
	/**
	 * @description Checks to see if given node is one of this node's immediate children.
	 * @returns Boolean true if the node is a child of this node in the scene hierarchy, otherwise false.
	 * @param {DzNode} node - The node to look for in this node's hierarchy.
	 */
	isNodeChild(node) {};
	/**
	 * @description Checks whether or not a given node is one of this node's descendants in the scene hierarchy.
	 * @returns Boolean true if the node is a descendant of this node in the scene hierarchy, otherwise false.
	 * @since 4.15.0.18
	 * @param {DzNode} node - The node to look for.
	 * @param {Boolean} recurse - Whether or not to descend this node's hierarchy.
	 */
	isNodeDescendantOf(node, recurse = true) {};
	/**
	 * @description Check to see if this is a root (top) level node.
	 * @returns Boolean true if this node has no parent in the scene hierarchy, otherwise false.
	 */
	isRootNode() {};
	/**
	 * @returns Boolean true if this node is selectable via the 3D viewport, otherwise false.
	 */
	isSelectable() {};
	/**
	 * @description Get the current selection state of this node.
	 * @returns Boolean true if the node is selected, otherwise false.
	 */
	isSelected() {};
	/**
	 * @returns Boolean true if this node should redirect its viewport selection to its parent, otherwise false.
	 */
	isSelectionPromoted() {};
	/**
	 * @description Get the current visibility status of this node.
	 * @returns Boolean true if the node is visible, otherwise false.
	 */
	isVisible() {};
	/**
	 * @description Get the current render visibility status of this node.
	 * @returns Boolean true if the node set to be visible in the render, otherwise false.
	 * @since 4.11.0.300
	 */
	isVisibleInRender() {};
	/**
	 * @description Get the current simulation visibility status of this node.
	 * @returns Boolean true if the node set to be visible in the simulation, otherwise false.
	 * @since 4.11.0.300
	 */
	isVisibleInSimulation() {};
	/**
	 * @description Get the current view visibility status of this node.
	 * @returns Boolean true if the node set to be visible in the viewport, otherwise false.
	 * @since 4.11.0.300
	 */
	isVisibleInViewport() {};
	/**
	 * @description Marks the asset as being modified.
	 * @returns Boolean true on success, otherwise false.
	 */
	modifyAsset() {};
	/**
	 * @description Marks the asset as being modified.
	 * @returns Boolean true on success, otherwise false.
	 * @param {DzUri} newUri - The new file URI for the asset.
	 */
	modifyAsset(newUri) {};
	/**
	 * @returns DzError DZ_NO_ERROR on success, otherwise an appropriate error code.
	 * @param {Number} childIndex - The index for the child to move.
	 * @param {Number} newChildIndex - The index to put the node at, -1 for end of list, 0 for beginning.
	 */
	moveNodeChildToIndex(childIndex, newChildIndex) {};
	/**
	 * @returns DzError DZ_NO_ERROR on success, otherwise an appropriate error code.
	 * @param {DzNode} child - The node child to move.
	 * @param {Number} index - The index to put the node at, -1 for end of list, 0 for beginning.
	 */
	moveNodeChildToIndex(child, index) {};
	/**
	 * @description Removes all of the child nodes of this node.
	 */
	removeAllNodeChildren() {};
	/**
	 * @description Removes a child from this node.
	 * @returns DzError
	 * @param {DzNode} child - The node to remove from this node's list of children. A child must be removed from one parent before it can be attached to another.
	 * @param {Boolean} inPlace - If true, the necessary transforms to unparent 'In Place' will be calculated and applied to the child.
	 */
	removeNodeChild(child, inPlace = false) {};
	/**
	 * @description Sets the selection state of this node.
	 * @param {Boolean} onOff - If true, sets selection on for this node. If false, sets selection off.
	 */
	select(onOff = true) {};
	/**
	 * @description Sets the end point for this node.
	 * @param {DzVec3} endPnt - The end point for this node. This is the node's end point in relation to its geometry.
	 * @param {Boolean} makeDefault - Whether or not to set the default value as well as the current value.
	 */
	setEndPoint(endPnt, makeDefault = false) {};
	/**
	 * @description Hide or show this node in the interface.
	 * @param {Boolean} onOff - If true, the node will not appear in the scene hierarchy. If false, the node will be displayed in the scene hierarchy.
	 */
	setHidden(onOff) {};
	/**
	 * @description Sets whether or not this node inherits the scale of its parent.
	 * @param {Boolean} onOff - If true, scaling the parent of this node will scale this node also.
	 */
	setInheritScale(onOff) {};
	/**
	 * @description Sets whether this nodes visibility is controlled by a DzGroupNode.
	 */
	setInvisibleByGroup(yesNo) {};
	/**
	 * @description Sets whether or not this node's visibility to rendering is controlled by a group node.
	 * @since 4.9.4.73
	 */
	setInvisibleInRenderByGroup(yesNo) {};
	/**
	 * @description Sets whether or not this node's visibility to simulation is controlled by a group node.
	 * @since 4.9.4.73
	 */
	setInvisibleInSimulationByGroup(yesNo) {};
	/**
	 * @description Sets whether or not this node's visibility to viewport drawing is controlled by a group node.
	 * @since 4.11.0.36
	 */
	setInvisibleInViewportByGroup(yesNo) {};
	/**
	 * @description Sets local-space translation for this node at the current time.
	 * @param {DzVec3} posLocal - The local-space translation for this node.
	 */
	setLocalPos(posLocal) {};
	/**
	 * @description Sets local-space translation for this node.
	 * @param {DzTime} tm - The scene time at which to set the transform for this node.
	 * @param {DzVec3} posLocal - The local-space translation for this node.
	 */
	setLocalPos(tm, posLocal) {};
	/**
	 * @description Sets local-space rotation for this node at the current time.
	 * @param {DzQuat} rotLocal - The local-space rotation for this node.
	 */
	setLocalRot(rotLocal) {};
	/**
	 * @description Sets local-space rotation for this node.
	 * @param {DzTime} tm - The scene time at which to set the transform for this node.
	 * @param {DzQuat} rotLocal - The local-space rotation for this node.
	 */
	setLocalRot(tm, rotLocal) {};
	/**
	 * @description Sets local-space scale for this node.
	 * @param {DzTime} tm - The scene time at which to set the transform for this node.
	 * @param {DzMatrix3} scaleLocal - The local-space scale for this node.
	 */
	setLocalScale(tm, scaleLocal) {};
	/**
	 * @description Sets local-space scale for this node at the current time.
	 * @param {DzMatrix3} scaleLocal - The local-space scale for this node.
	 * @param {Number} generalScale - The general scale factor for this node.
	 */
	setLocalScale(scaleLocal, generalScale) {};
	/**
	 * @description Sets local-space scale for this node.
	 * @param {DzTime} tm - The scene time at which to set the transform for this node.
	 * @param {DzMatrix3} scaleLocal - The local-space scale for this node.
	 * @param {Number} generalScale - The general scale factor for this node.
	 */
	setLocalScale(tm, scaleLocal, generalScale) {};
	/**
	 * @description Sets local-space scale for this node at the current time.
	 * @param {DzMatrix3} scaleLocal - The local-space scale for this node.
	 */
	setLocalScale(scaleLocal) {};
	/**
	 * @description Calculates the local transform matrix for this node at the current time.
	 * @param {DzVec3} posLocal - The local-space position offset for this node.
	 * @param {DzQuat} rotLocal - The local-space rotation for this node.
	 * @param {DzMatrix3} scaleLocal - The local-space scale for this node.
	 */
	setLocalTransform(posLocal, rotLocal, scaleLocal) {};
	/**
	 * @description Calculates the local transform matrix for this node at the given time.
	 * @param {DzTime} tm - The scene time at which to set the transform for this node.
	 * @param {DzVec3} posLocal - The local-space position offset for this node.
	 * @param {DzQuat} rotLocal - The local-space rotation for this node.
	 * @param {DzMatrix3} scaleLocal - The local-space scale for this node.
	 */
	setLocalTransform(tm, posLocal, rotLocal, scaleLocal) {};
	/**
	 * @description Calculates the local transform matrix for this node at the current time.
	 * @param {DzVec3} posLocal - The local-space position offset for this node.
	 * @param {DzQuat} rotLocal - The local-space rotation for this node.
	 * @param {DzMatrix3} scaleLocal - The local-space scale for this node.
	 * @param {Number} generalScale - The general scale for the transform.
	 */
	setLocalTransform(posLocal, rotLocal, scaleLocal, generalScale) {};
	/**
	 * @description Calculates the local transform matrix for this node at the given time.
	 * @param {DzTime} tm - The scene time at which to set the transform for this node.
	 * @param {DzVec3} posLocal - The local-space position offset for this node.
	 * @param {DzQuat} rotLocal - The local-space rotation for this node.
	 * @param {DzMatrix3} scaleLocal - The local-space scale for this node.
	 * @param {Number} generalScale - The general scale for the transform.
	 */
	setLocalTransform(tm, posLocal, rotLocal, scaleLocal, generalScale) {};
	/**
	 * @description Sets whether or not the local transform for this node is disabled.
	 * @since 4.12.1.68
	 * @param {Boolean} onOff - If true, the transform controls are disabled and the local transform for this node is overridden to be identity.
	 */
	setLocalTransformDisabled(onOff) {};
	/**
	 * @description Sets whether or not the local transform of this node is ignored.
	 * @since 4.12.1.68
	 * @param {Boolean} onOff - If true, the local transform for this node is not applied to any associated geometry.
	 */
	setLocalTransformIgnored(onOff) {};
	/**
	 * @description Sets the override color to be used to draw the node while using manipulation draw styles.
	 * @param {Color} color - The value for the override color.
	 */
	setManipOverColor(color) {};
	/**
	 * @description Sets the object for this node.
	 * @param {DzObject} object - The object that will be drawn by this node. The node takes ownership of this object and deletes it when it is no longer used.
	 */
	setObject(object) {};
	/**
	 * @description Sets the orientation for this node.
	 * @param {DzQuat} orientation - The orientation for this node. This defines the space in which node rotations occur.
	 * @param {Boolean} makeDefault - Whether or not to set the default value as well as the current value.
	 */
	setOrientation(orientation, makeDefault = false) {};
	/**
	 * @description Sets the orientation for this node.
	 * @param {DzVec3} angles - The orientation for this node in degrees. This defines the space in which node rotations occur.
	 * @param {Boolean} makeDefault - Whether or not to set the default value as well as the current value.
	 */
	setOrientationAngles(angles, makeDefault = false) {};
	/**
	 * @description Sets the origin for this node.
	 * @param {DzVec3} origin - The origin for this node. This is the node's center point in relation to its geometry.
	 * @param {Boolean} makeDefault - Whether or not to set the default value as well as the current value.
	 */
	setOrigin(origin, makeDefault = false) {};
	/**
	 * @description Set the strength of the point at parameter.
	 * @param {Number} strength - A value in the range [0.0, 1.0] that determines how closely this node aims at its point-at target.
	 */
	setPointAtStrength(strength) {};
	/**
	 * @description Set the target for this node to be pointed toward.
	 * @returns DzNode
	 * @param {DzNode} target - The node whose origin will serve as the target of point-at functionality.
	 */
	setPointAtTarget(target) {};
	/**
	 * @description Sets the presentation for this node.
	 * @param {DzPresentation} pres - The new presentation for this node.
	 */
	setPresentation(pres) {};
	/**
	 * @description Sets the preview box for this node.
	 * @param {DzOrientedBox3} box - The oriented box to set.
	 */
	setPreviewBox(box) {};
	/**
	 * @description Sets whether or not to redirect selection.
	 * @param {Boolean} onOff - If true, the node will redirect its selection to its parent.
	 */
	setPromoteSelection(onOff) {};
	/**
	 * @description Sets the node rotation order.
	 * @param {DzRotationOrder} order - The order that the axis rotations will be applied in for this node.
	 */
	setRotationOrder(order) {};
	/**
	 * @description Sets whether or not this node is selectable via the 3D viewport.
	 * @param {Boolean} onOff - If true, the node will be selectable (the default). If false, the node will not participate in the pick image.
	 */
	setSelectable(onOff) {};
	/**
	 * @description Sets the selection map to use for this node.
	 * @param {DzSelectionMap} map - The selection map to use for this node.
	 */
	setSelectionMap(map) {};
	/**
	 * @description Sets the local-space rotation for this node, in the context of the current tool, at the current time.
	 * @param {DzTime} tm - The scene time at which to set the transform for this node.
	 * @param {DzQuat} rotLocal - The local-space rotation for this node.
	 */
	setToolLocalRot(tm, rotLocal) {};
	/**
	 * @description Sets the local-space rotation for this node, in the context of the current tool.
	 * @param {DzQuat} rotLocal - The local-space rotation for this node.
	 */
	setToolLocalRot(rotLocal) {};
	/**
	 * @description Calculates the local transform matrix for this node at the current time, in the context of the current tool.
	 * @since 4.9.3.16
	 * @param {DzVec3} posLocal - The local-space position offset for this node.
	 * @param {DzQuat} rotLocal - The local-space rotation for this node.
	 * @param {DzMatrix3} scaleLocal - The local-space scale for this node.
	 * @param {Number} generalScale - The general scale for the transform.
	 */
	setToolLocalTransform(posLocal, rotLocal, scaleLocal, generalScale) {};
	/**
	 * @description Calculates the local transform matrix for this node at the current time, in the context of the current tool.
	 * @since 4.9.3.16
	 * @param {DzVec3} posLocal - The local-space position offset for this node.
	 * @param {DzQuat} rotLocal - The local-space rotation for this node.
	 * @param {DzMatrix3} scaleLocal - The local-space scale for this node.
	 */
	setToolLocalTransform(posLocal, rotLocal, scaleLocal) {};
	/**
	 * @description Calculates the local transform matrix for this node at the given time, in the context of the current tool.
	 * @since 4.8.1.13
	 * @param {DzTime} tm - The scene time at which to set the transform for this node.
	 * @param {DzVec3} posLocal - The local-space position offset for this node.
	 * @param {DzQuat} rotLocal - The local-space rotation for this node.
	 * @param {DzMatrix3} scaleLocal - The local-space scale for this node.
	 * @param {Number} generalScale - The general scale for the transform.
	 */
	setToolLocalTransform(tm, posLocal, rotLocal, scaleLocal, generalScale) {};
	/**
	 * @description Calculates the local transform matrix for this node, in the context of the current tool, at the given time.
	 * @since 4.8.1.13
	 * @param {DzTime} tm - The scene time at which to set the transform for this node.
	 * @param {DzVec3} posLocal - The local-space position offset for this node.
	 * @param {DzQuat} rotLocal - The local-space rotation for this node.
	 * @param {DzMatrix3} scaleLocal - The local-space scale for this node.
	 */
	setToolLocalTransform(tm, posLocal, rotLocal, scaleLocal) {};
	/**
	 * @description Sets the world-space rotation for this node at the current time, in the context of the current tool.
	 * @since 4.9.3.16
	 * @param {DzQuat} rotWS - The world-space rotation for this node.
	 */
	setToolWSRot(rotWS) {};
	/**
	 * @description Sets the world-space rotation for this node, in the context of the current tool.
	 * @since 4.9.3.16
	 * @param {DzTime} tm - The scene time at which to set the rotation for this node.
	 * @param {DzQuat} rotWS - The world-space rotation for this node.
	 */
	setToolWSRot(tm, rotWS) {};
	/**
	 * @description Sets the world-space transform values for this node at the current time, in the context of the current tool.
	 * @since 4.9.3.16
	 * @param {DzVec3} posWS - The world-space position offset for this node.
	 * @param {DzQuat} rotWS - The world-space rotation for this node.
	 * @param {DzMatrix3} scaleWS - The world-space scale for this node.
	 */
	setToolWSTransform(posWS, rotWS, scaleWS) {};
	/**
	 * @description Sets the world-space transform values for this node, in the context of the current tool.
	 * @since 4.9.3.16
	 * @param {DzTime} tm - The scene time at which to set the transform for this node.
	 * @param {DzVec3} posWS - The world-space position offset for this node.
	 * @param {DzQuat} rotWS - The world-space rotation for this node.
	 * @param {DzMatrix3} scaleWS - The world-space scale for this node.
	 */
	setToolWSTransform(tm, posWS, rotWS, scaleWS) {};
	/**
	 * @description Sets whether or not this node's selectability is controlled by a group node.
	 */
	setUnselectableByGroup(yesNo) {};
	/**
	 * @description Sets whether or not this node is visible in the viewport, in renders and in simulations.
	 * @param {Boolean} onOff - If true, the node will be visible (the default). If false, the node will not be drawn in the viewport, will not be rendered and will not be simulated.
	 */
	setVisible(onOff) {};
	/**
	 * @description Sets whether or not this node is visible during a render.
	 * @param {Boolean} onOff - If true, the node is visible during a render, otherwise it is not.
	 */
	setVisibleInRender(onOff) {};
	/**
	 * @description Sets whether or not this node is visible during a simulation.
	 * @since 4.9.4.25
	 * @param {Boolean} onOff - If true, the node is visible during a simulation, otherwise it is not.
	 */
	setVisibleInSimulation(onOff) {};
	/**
	 * @description Sets whether or not this node is visible in the 3D viewport.
	 * @since 4.11.0.36
	 * @param {Boolean} onOff - If true, the node will be visible (the default). If false, the node will not be drawn in the 3D viewport.
	 */
	setVisibleInViewport(onOff) {};
	/**
	 * @description Sets the world-space translation for this node at the current time.
	 * @param vec - The world-space translation for this node.
	 */
	setWSPos(posWS) {};
	/**
	 * @description Sets the world-space translation for this node.
	 * @param {DzTime} tm - The scene time at which to set the transform for this node.
	 * @param vec - The world-space translation for this node.
	 */
	setWSPos(tm, posWS) {};
	/**
	 * @description Sets the world-space rotation for this node at the current time.
	 * @param {DzQuat} rotWS - The world-space rotation for this node.
	 */
	setWSRot(rotWS) {};
	/**
	 * @description Sets the world-space rotation for this node.
	 * @param {DzTime} tm - The scene time at which to set the transform for this node.
	 * @param {DzQuat} rotWS - The world-space rotation for this node.
	 */
	setWSRot(tm, rotWS) {};
	/**
	 * @description Sets the world-space scale for this node.
	 * @param {DzTime} tm - The scene time at which to set the transform for this node.
	 * @param {DzMatrix3} scaleWS - The world-space scale for this node.
	 */
	setWSScale(tm, scaleWS) {};
	/**
	 * @description Sets the world-space scale for this node at the current time.
	 * @param {DzMatrix3} scaleWS - The world-space scale for this node.
	 */
	setWSScale(scaleWS) {};
	/**
	 * @description Sets the world-space transform values for this node at the current time.
	 * @param {DzVec3} posWS - The world-space position offset for this node.
	 * @param {DzQuat} rotWS - The world-space rotation for this node.
	 * @param {DzMatrix3} scaleWS - The world-space scale for this node.
	 */
	setWSTransform(posWS, rotWS, scaleWS) {};
	/**
	 * @description Sets the world-space transform values for this node.
	 * @param {DzTime} tm - The scene time at which to set the transform for this node.
	 * @param {DzVec3} posWS - The world-space position offset for this node.
	 * @param {DzQuat} rotWS - The world-space rotation for this node.
	 * @param {DzMatrix3} scaleWS - The world-space scale for this node.
	 */
	setWSTransform(tm, posWS, rotWS, scaleWS) {};
	/**
	 * @returns Boolean true if this node is set unselectable by a group node, otherwise false.
	 */
	unselectableByGroup() {};
	/**
	 * @description Called to update any cached or display data for this object.
	 * @param {Boolean} isRender - If true, the node should prepare itself for a render quality presentation.
	 */
	update(isRender = false) {};
	/**
	 * @description Update the orientation of the node.
	 */
	updateOrientation() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted immediately before the node is removed from the scene.
	 * @signature `"aboutToBeRemoved()"`
	 * @event
	 */
	aboutToBeRemoved() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the node is about to be deleted.
	 * @signature `"aboutToDelete(DzNode*)"`
	 * @event
	 */
	aboutToDelete(node) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the node is added to the scene.
	 * @signature `"added()"`
	 * @event
	 */
	added() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the node has been modified.
	 * @signature `"assetModified()"`
	 * @event
	 */
	assetModified() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted after the node has been saved.
	 * @signature `"assetWasSaved()"`
	 * @event
	 */
	assetWasSaved() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted after the bounding box for this node has been invalidated.
	 * @signature `"boundBoxInvalidated()"`
	 * @event
	 */
	boundBoxInvalidated() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when a child is added to the node.
	 * @signature `"childAdded(DzNode*)"`
	 * @event
	 */
	childAdded(child) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when a child is added to or removed from the node.
	 * @signature `"childListChanged()"`
	 * @event
	 */
	childListChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted after the order of this node's children has changed.
	 * @signature `"childListOrderChanged()"`
	 * @event
	 */
	childListOrderChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when a child is removed from the node.
	 * @signature `"childRemoved(DzNode*)"`
	 * @event
	 */
	childRemoved(child) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the visual representation of this node needs to be redrawn.
	 * @signature `"drawnDataChanged()"`
	 * @event
	 */
	drawnDataChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the hidden state of this node is changed.
	 * @signature `"hiddenChanged(bool)"`
	 * @event
	 */
	hiddenChanged(hidden) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the state of this node's scale inheritance has changed.
	 * @signature `"inheritScaleChanged()"`
	 * @event
	 */
	inheritScaleChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the list of materials for this node has changed.
	 * @signature `"materialListChanged()"`
	 * @event
	 */
	materialListChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the list of selected materials for this node has changed.
	 * @signature `"materialSelectionChanged()"`
	 * @event
	 */
	materialSelectionChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the material selection sets for this node has changed.
	 * @signature `"materialSelectionSetsChanged()"`
	 * @event
	 */
	materialSelectionSetsChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when a different object becomes associated with this node.
	 * @signature `"objectSwitched(DzNode*,DzObject*,DzObject*)"`
	 * @event
	 */
	objectChanged(node, oldObject, newObject) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the parent of this node changes.
	 * @signature `"parentChanged(DzNode*,DzNode*,DzNode*)"`
	 * @event
	 */
	parentChanged(node, oldParent, newParent) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the parent hierarchy for this node has changed.
	 * @signature `"parentHierarchyChanged(DzNode*)"`
	 * @event
	 */
	parentHierarchyChanged(node) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when this node's selection promotion has changed.
	 * @signature `"promoteSelectionChanged(bool)"`
	 * @event
	 */
	promoteSelectionChanged(promoteSelection) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the node is removed from the scene.
	 * @signature `"removed()"`
	 * @event
	 */
	removed() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the rotation order, orientation, center point, or end point for this node have changed.
	 * @signature `"riggingChanged()"`
	 * @event
	 */
	riggingChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the rotation order of this node changes.
	 * @signature `"rotationOrderChanged()"`
	 * @event
	 */
	rotationOrderChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the selectability of the node has changed.
	 * @signature `"selectabilityChanged()"`
	 * @event
	 */
	selectabilityChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Eitted when the selection state of this node changes.
	 * @signature `"selected(DzNode*,bool)"`
	 * @event
	 */
	selected(node, onOff) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the topology for this node has changed.
	 * @signature `"topologyChanged()"`
	 * @event
	 */
	topologyChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when transformation properties of this node change.
	 * @signature `"transformChanged()"`
	 * @event
	 */
	transformChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the current uv set for this node has changed.
	 * @signature `"uvsChanged()"`
	 * @event
	 */
	uvsChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the visibility of the node has changed.
	 * @signature `"visibilityChanged()"`
	 * @event
	 */
	visibilityChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the visibility of the node in renders has changed.
	 * @signature `"visibilityInRenderChanged()"`
	 * @event
	 */
	visibilityInRenderChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the visibility of the node in simulations has changed.
	 * @signature `"visibilityInSimulationChanged()"`
	 * @event
	 */
	visibilityInSimulationChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the visibility of the node in viewports has changed.
	 * @signature `"visibilityInViewportChanged()"`
	 * @event
	 */
	visibilityInViewportChanged() {};

}
/**
 * See Also:
 * Attention:
 * Since:@attention Attention:
 */
class DzNodeAligner extends QObject {
	/**
	 * @description Default Constructor.
	 */
	constructor() {};
	/**
	 * @description ENUM: TODO: Add description.
	 */
	NoneX;
	/**
	 * @description ENUM: TODO: Add description.
	 */
	AlignXLefts;
	/**
	 * @description ENUM: TODO: Add description.
	 */
	AlignXCenters;
	/**
	 * @description ENUM: TODO: Add description.
	 */
	AlignXOrigins;
	/**
	 * @description ENUM: TODO: Add description.
	 */
	AlignXRights;
	/**
	 * @description ENUM: TODO: Add description.
	 */
	StackXLefts;
	/**
	 * @description ENUM: TODO: Add description.
	 */
	StackXRights;
	/**
	 * @description ENUM: TODO: Add description.
	 */
	DistributeXLefts;
	/**
	 * @description ENUM: TODO: Add description.
	 */
	DistributeXCenters;
	/**
	 * @description ENUM: TODO: Add description.
	 */
	DistributeXOrigins;
	/**
	 * @description ENUM: TODO: Add description.
	 */
	DistributeXRights;
	/**
	 * @description ENUM: TODO: Add description.
	 */
	NoneY;
	/**
	 * @description ENUM: TODO: Add description.
	 */
	AlignYTops;
	/**
	 * @description ENUM: TODO: Add description.
	 */
	AlignYCenters;
	/**
	 * @description ENUM: TODO: Add description.
	 */
	AlignYOrigins;
	/**
	 * @description ENUM: TODO: Add description.
	 */
	AlignYBottoms;
	/**
	 * @description ENUM: TODO: Add description.
	 */
	StackYTops;
	/**
	 * @description ENUM: TODO: Add description.
	 */
	StackYBottoms;
	/**
	 * @description ENUM: TODO: Add description.
	 */
	DistributeYTops;
	/**
	 * @description ENUM: TODO: Add description.
	 */
	DistributeYCenters;
	/**
	 * @description ENUM: TODO: Add description.
	 */
	DistributeYOrigins;
	/**
	 * @description ENUM: TODO: Add description.
	 */
	DistributeYBottoms;
	/**
	 * @description ENUM: TODO: Add description.
	 */
	NoneZ;
	/**
	 * @description ENUM: TODO: Add description.
	 */
	AlignZFronts;
	/**
	 * @description ENUM: TODO: Add description.
	 */
	AlignZCenters;
	/**
	 * @description ENUM: TODO: Add description.
	 */
	AlignZOrigins;
	/**
	 * @description ENUM: TODO: Add description.
	 */
	AlignZBacks;
	/**
	 * @description ENUM: TODO: Add description.
	 */
	StackZFronts;
	/**
	 * @description ENUM: TODO: Add description.
	 */
	StackZBacks;
	/**
	 * @description ENUM: TODO: Add description.
	 */
	DistributeZFronts;
	/**
	 * @description ENUM: TODO: Add description.
	 */
	DistributeZCenters;
	/**
	 * @description ENUM: TODO: Add description.
	 */
	DistributeZOrigins;
	/**
	 * @description ENUM: TODO: Add description.
	 */
	DistributeZBacks;
	/**
	 * @description ENUM: TODO: Add description.
	 */
	UnitsM;
	/**
	 * @description ENUM: TODO: Add description.
	 */
	UnitsCM;
	/**
	 * @description ENUM: TODO: Add description.
	 */
	UnitsYD;
	/**
	 * @description ENUM: TODO: Add description.
	 */
	UnitsFT;
	/**
	 * @description ENUM: TODO: Add description.
	 */
	UnitsIN;
	/**
	 * @description Adds a node to the list of node to be processed.
	 * @returns DzError DZ_NO_ERROR (0x00000000) if node was sucessfully added to the list, DZ_ALREADY_EXISTS_ERROR (0x00000050) if node is already in the list, and DZ_ILLEGAL_ARGUMENT_ERROR (0x00000060) if node is null.
	 * @param {DzNode} node - The node to add to the list.
	 * @attention The order that nodes are added to the list impacts the results of the alignment operation. The first node in the list is used as the basis for any Align, Stack or Distribute operations. The last node in the list is used to establish the range for Distribute operations. All other nodes in the list are processed in their respective order within the list.
	 */
	addNode(node) {};
	/**
	 * @returns Boolean true if the current list of nodes, in conjuction with the current option configuration, can be applied, otherwise false.
	 * @attention At least one alignment axis must be set to a value other than "None." Aligning "To Grid" (UseInterval) requires at least one (1) node to be added. Aligning without using an interval requires at least two (2) nodes to be added. Distributing, with or without using an interval, requires at least three (3) nodes to be added. If any "UseInterval" option is active, the corresponding value must be greater than 0. No more than one (1) node within the hierarchy of a given skeleton can be added.
	 */
	canAlign() {};
	/**
	 * @description Clears the list of nodes to be processed.
	 */
	clearNodes() {};
	/**
	 * @description Performs an alignment of nodes, based on the current options set.
	 * @returns Boolean true if the alignment operation was successful, otherwise false.
	 */
	doAlign() {};
	/**
	 * @returns Array The list of nodes that alignment operations will be performed on (if any), otherwise an empty list.
	 */
	getNodes() {};
	/**
	 * @returns The align operation to perform along the X axis.
	 */
	getXAlign() {};
	/**
	 * @returns Number The number of units along the X axis, in the specified size.
	 * @param {UnitSize} size - The size of units to get.
	 */
	getXUnits(size = UnitsCM) {};
	/**
	 * @returns Boolean true if using an interval along the X axis is enabled, otherwise false.
	 */
	getXUseInterval() {};
	/**
	 * @returns The align operation to perform along the Y axis.
	 */
	getYAlign() {};
	/**
	 * @returns Number The number of units along the Y axis, in the specified size.
	 * @param {UnitSize} size - The size of units to get.
	 */
	getYUnits(size = UnitsCM) {};
	/**
	 * @returns Boolean true if using an interval along the Y axis is enabled, otherwise false.
	 */
	getYUseInterval() {};
	/**
	 * @returns The align operation to perform along the Z axis.
	 */
	getZAlign() {};
	/**
	 * @returns Number The number of units along the Z axis, in the specified size.
	 * @param {UnitSize} size - The size of units to get.
	 */
	getZUnits(size = UnitsCM) {};
	/**
	 * @returns Boolean true if using an interval along the Z axis is enabled, otherwise false.
	 */
	getZUseInterval() {};
	/**
	 * @description Sets the align operation to perform along the X axis.
	 * @param {AlignX} align - The align operation to perform.
	 */
	setXAlign(align) {};
	/**
	 * @description Sets the interval to use along the X axis.
	 * @param {Number} units - The number of units to set.
	 * @param {UnitSize} size - The size of the unit to set.
	 */
	setXUnits(units, size = UnitsCM) {};
	/**
	 * @description Sets whether or not to use an interval along the X axis.
	 * @param {Boolean} onOff - If true, the interval is used.
	 * @attention Intervals can be used for Align (grid) and Stack (space) operations, but have no meaning for Distribute operations.
	 */
	setXUseInterval(onOff) {};
	/**
	 * @description Sets the align operation to perform along the Y axis.
	 * @param {AlignY} align - The align operation to perform.
	 */
	setYAlign(align) {};
	/**
	 * @description Sets the interval to use along the Y axis.
	 * @param {Number} units - The number of units to set.
	 * @param {UnitSize} size - The size of the unit to set.
	 */
	setYUnits(units, size = UnitsCM) {};
	/**
	 * @description Sets whether or not to use an interval along the Y axis.
	 * @param {Boolean} onOff - If true, the interval is used.
	 * @attention Intervals can be used for Align (grid) and Stack (space) operations, but have no meaning for Distribute operations.
	 */
	setYUseInterval(onOff) {};
	/**
	 * @description Sets the align operation to perform along the Z axis.
	 * @param {AlignZ} align - The align operation to perform.
	 */
	setZAlign(align) {};
	/**
	 * @description Sets the interval to use along the Z axis.
	 * @param {Number} units - The number of units to set.
	 * @param {UnitSize} size - The size of the unit to set.
	 */
	setZUnits(units, size = UnitsCM) {};
	/**
	 * @description Sets whether or not to use an interval along the Z axis.
	 * @param {Boolean} onOff - If true, the interval is used.
	 * @attention Intervals can be used for Align (grid) and Stack (space) operations, but have no meaning for Distribute operations.
	 */
	setZUseInterval(onOff) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the state of whether or not alignment is possible has changed.
	 * @signature `"canAlignChanged(bool)"`
	 * @event
	 */
	canAlignChanged(onOff) {};

}
/**
 * 
 */
class DzNodeProperty extends DzProperty {
	/**
	 * @description Constructor. Creates a non-animatable, non-user property.
	 */
	constructor() {};
	/**
	 * @param {String} name - The name of this property.
	 * @param {Boolean} canAnimate - If true, creates an animatable property.
	 * @param {Boolean} isUserProperty - If true, creates a user property; user properties are properties that can be added/deleted by users.
	 */
	constructor(name, canAnimate, isUserProperty) {};
	/**
	 * @description Excludes the given node from becoming the value of this property.
	 * @param {DzNode} node - The node to exclude.
	 */
	exclude(node) {};
	/**
	 * @returns DzNode The default value of the property (if any), otherwise NULL.
	 */
	getDefaultValue() {};
	/**
	 * @returns DzNode The value of the property at the given key (if any), otherwise NULL.
	 * @param {Number} index - The index of the key to get a value for.
	 */
	getKeyValue(i) {};
	/**
	 * @returns DzNode The value of the property at the given time (if any), otherwise NULL.
	 * @param {DzTime} tm - The scene time for which to get the value of the property.
	 */
	getValue(tm) {};
	/**
	 * @returns DzNode The value of the property (if any), otherwise NULL.
	 */
	getValue() {};
	/**
	 * @returns Boolean true if the given node is excluded from becoming the value of this property, otherwise false.
	 * @param {DzNode} node - The node to check for exclusion.
	 */
	isExcluded(node) {};
	/**
	 * @description Set the default value of the property.
	 * @param {DzNode} val - The default value for this property.
	 */
	setDefaultValue(val) {};
	/**
	 * @description Set the value of the property for the given key.
	 * @param {DzNode} which - The index of the key to set a value for.
	 * @param {DzNode} val - The node to associate with the given key.
	 */
	setKeyValue(which, val) {};
	/**
	 * @description Set the value of the property.
	 * @param {DzNode} val - The node to associate with this property.
	 */
	setValue(val) {};
	/**
	 * @description Set the value of the property at the given time.
	 * @param {DzNode} tm - The scene time for which to set the value.
	 * @param {DzNode} val - The node to associate with this property.
	 */
	setValue(tm, val) {};
	/**
	 * @description Removes the given node from the list of excluded nodes.
	 * @since 4.12.1.83
	 * @param {DzNode} node - The node to unexclude.
	 */
	unexclude(node) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted immediately before the value of the property changes.
	 * @signature `"aboutToChange()"`
	 * @event
	 */
	aboutToChange() {};

}
/**
 * Provides a DzComboBox like widget with a custom popup designed for choosing a DzNode.
 */
class DzNodeSelectionComboBox extends DzWidget {
	/**
	 * @description Creates a node selection combobox as a child of the given parent widget.
	 * @param {DzWidget} parent - The widget parent for the combobox.
	 * @param {String} nodeType - The name of the DzNode [sub]class that root nodes must inherit to be shown in the list
	 * @param allowNode - Whether or not to provide a "None" option in the list
	 */
	constructor(parent, nodeType = "DzNode", allowNone = false) {};
	/**
	 * @description Clears the selection of any node(s).
	 * @since 4.10.0.27
	 */
	clearNodeSelection() {};
	/**
	 * @returns Array The list of nodes to be shown in the popup.
	 */
	getNodes() {};
	/**
	 * @returns DzNode The node selected in the popup.
	 */
	getSelectedNode() {};
	/**
	 * @description Hide the popup.
	 */
	hidePopup() {};
	/**
	 * @description Sets the node from the scene to be shown in the popup.
	 * @param {DzNode} node - The DzNode to show.
	 */
	setNode(node) {};
	/**
	 * @description Sets the nodes from the scene to be shown in the popup.
	 * @param {Array} nodes - A list of the DzNode objects to show.
	 */
	setNodes(nodes) {};
	/**
	 * @description Sets the node from the scene to be selected.
	 * @param {DzNode} node - The DzNode to select.
	 */
	setSelectedNode(node) {};
	/**
	 * @description Display the popup.
	 */
	showPopup() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the selected DzNode changes.
	 * @signature `"nodeSelectionChanged()"`
	 * @event
	 */
	nodeSelectionChanged() {};

}
/**
 * An asset save filter for saving Figure or Prop Support Assets in the DSON format.
 * See Also:
 */
class DzNodeSupportAssetFilter extends DzAssetFileOutFilter {
	/**
	 * @description TODO:
	 * Add description.
	 */
	constructor() {};
	/**
	 * @returns DzNode The node set (if any) on this save filter.
	 * @attention If a node is not set on this save filter, the primary selection in the scene is used.
	 */
	getSetNode() {};
	/**
	 * @description Sets a node to save support assets for.
	 * @param {DzNode} node - The node to set.
	 * @attention If node is NULL or a node is not set on this save filter, the primary selection in the scene will be used.
	 */
	setNode(node) {};

}
/**
 * 
 */
class DzNotInstalledProductAsset extends DzAsset, DzRefCountedItem {
	/**
	 * @description Installs the product via the cloud.
	 * @since 4.11.0.193
	 */
	installFromCloud() {};
	/**
	 * @description Loads the icon for the asset.
	 */
	loadIcon() {};

}
/**
 * This is the base class for all controllers that can control the value of a DzNumericProperty-derived object. DzNumericProperty objects can have multiple controllers, these controllers are applied in the order they appear in the controller list.
 * The application of controllers in a DzNumeric-derived property begins with the keyed (raw) value of the property at the given time, this is the value that is passed to the apply() function of the first controller. The result returned by the apply() call to the first controller is then passed into the apply() function on the second controller, and so on. The result returned by the apply() function of the last controller on the property is then returned as the final value of the property for the given time.
 */
class DzNumericController extends DzController {
	/**
	 * @description This function is called to apply the controller to the numeric property that it controls.
	 * @returns Number The final value for the property
	 * @param {Number} val - The raw value of the property
	 * @param {DzTime} tm - The scene time at which the controller is being evaluated
	 */
	apply(val, tm, local) {};
	/**
	 * @description This function is called to 'unapply' the controller to the numeric property that it controls.
	 * @returns Number The raw value for the property
	 * @param {Number} val - The final value of the property
	 * @param {DzTime} tm - The scene time at which the controller is being evaluated
	 */
	applyInverse(val, tm, local) {};

}
/**
 * This property tracks both a numeric value and a node value - it is essentially a combination of a DzFloatProperty and a DzNodeProperty in a single property. The main benefit of this is to display the settings to the user as a single parameter, it also provides several conveniences for the programmer in linking the two values together. Currently, this property is used by DzNode to implement the 'Point At' parameter.
 */
class DzNumericNodeProperty extends DzFloatProperty {
	/**
	 * @description Default Constructor. Creates a non-animatable, non-user property.
	 */
	constructor() {};
	/**
	 * @param {String} name - The name of this property.
	 * @param {Boolean} canAnimate - If true, creates an animatable property.
	 * @param {Boolean} isUserProperty - If true, creates a user property; user properties are properties that can be added/deleted by users.
	 * @param {Number} initVal - The initial value of the property.
	 */
	constructor(name, canAnimate, isUserProperty, initVal = 0.0) {};
	/**
	 * @returns DzNode The node that is assigned to this property.
	 */
	getNode() {};
	/**
	 * @returns Boolean true if the value of this property is invalid unless a node is assigned, otherwise false.
	 */
	isInvalidWithoutNode() {};
	/**
	 * @description Sets whether or not this property value is valid when no node is assigned.
	 * @param {Boolean} onOff - If true, this property must have a node associated with it.
	 */
	setMustHaveNode(onOff) {};
	/**
	 * @description Set the node for this property.
	 * @param {DzNode} node - The node to associate with this property.
	 */
	setNode(node) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when this property's invalid without node state has changed.
	 * @signature `"invalidWithoutNodeChanged(bool)"`
	 * @event
	 */
	invalidWithoutNodeChanged(onOff) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the node associated with this property has changed.
	 * @signature `"nodeChanged(DzNode*)"`
	 * @event
	 */
	nodeChanged(node) {};

}
/**
 * TODO:
 * Add detailed description.
 */
class DzNumericProperty extends DzProperty {
	/**
	 * @description ENUM: Default - this property is not associated with an axis.
	 */
	NO_INTEREST;
	/**
	 * @description ENUM: Value is used by an X Axis control.
	 */
	X_INTEREST;
	/**
	 * @description ENUM: Value is used by an Y Axis control.
	 */
	Y_INTEREST;
	/**
	 * @description ENUM: Value is used by an Z Axis control.
	 */
	Z_INTEREST;
	/**
	 * @description ENUM: Value is used by the General Scale control.
	 */
	ALL_INTEREST;
	/**
	 * @description Clear the image map for this property.
	 */
	clearMap() {};
	/**
	 * @description Copies the map from another property to this one.
	 * @returns DzNumericProperty
	 * @since 4.9.2.61
	 * @param {DzNumericProperty} otherProp - The property to copy the map from.
	 */
	copyMapFrom(otherProp) {};
	/**
	 * @returns Boolean true if the clamp on this property changes its value, otherwise false.
	 * @since 4.9.0.24
	 */
	doesClampChangeValue() {};
	/**
	 * @description Searches node for a property that matches the name of this property.
	 * @returns DzProperty
	 * @param {DzNode} node - The node to search.
	 * @param {Boolean} useStrictMatching - If true (default), any found property will only be considered a match if it is the same type as this property. If false, any found property will be considered a match if it inherits from DzNumericProperty.
	 */
	findMatchingProperty(node, useStrictMatching = true) {};
	/**
	 * @returns Number The default map gamma.
	 * @since 4.5.2.23
	 */
	getDefaultMapGamma() {};
	/**
	 * @returns Number The default map texture type.
	 * @since 4.6.4.30
	 */
	getDefaultMapTextureType() {};
	/**
	 * @returns Number The default value of this property as a double precision value.
	 */
	getDoubleDefaultValue() {};
	/**
	 * @returns Number The value of this property, as a double precision number, at the given time.
	 * @param {DzTime} tm - The scene time to get the value for.
	 */
	getDoubleValue(tm) {};
	/**
	 * @returns Number The value of the property at the current time, as a double precision number.
	 */
	getDoubleValue() {};
	/**
	 * @returns DzNumericProperty The property that this property is connected to via auto-follow. If this property cannot auto-follow or is not connected to a property via auto-follow, then this method returns null.
	 */
	getFollowProperty() {};
	/**
	 * @returns Number The difference between the current value of the follow property and its default value at the current time. If no auto-follow property is set, or auto-follow is not enabled for this property, then this method returns 0.
	 */
	getFollowValue() {};
	/**
	 * @returns Number The difference between the current value of the follow property and this properties default value tm. If no auto-follow property is set, or auto-follow is not enabled for this property, then this method returns 0.
	 * @param {DzTime} tm - The scene time for which to get the value.
	 */
	getFollowValue(tm) {};
	/**
	 * @returns DzNumericProperty The property that this property is directly linked to (if any), otherwise NULL.
	 */
	getLinkProperty() {};
	/**
	 * @returns DzTexture The image map at the current time (if any), otherwise null.
	 */
	getMapValue() {};
	/**
	 * @returns DzTexture The image map for the given time (if any), otherwise null.
	 * @param {DzTime} time - The time at which to get the map value for this property.
	 */
	getMapValue(time) {};
	/**
	 * @returns Array A list of the values this property has.
	 * @since 4.6.4.98
	 */
	getNDoubleValue() {};
	/**
	 * @returns Array A list of the values this property has.
	 * @since 4.6.4.98
	 * @param {DzTime} tm - The scene time at which to get the value.
	 */
	getNDoubleValue(tm) {};
	/**
	 * @returns Number The number of values this property has.
	 * @since 4.6.4.98
	 */
	getNValueCount() {};
	/**
	 * @returns DzTextureModifier The texture modifier for this property (if any), otherwise NULL.
	 * @since 4.6.4.80
	 */
	getTextureModifier() {};
	/**
	 * @returns Number The texture modifier flags.
	 * @since 4.6.4.82
	 */
	getTextureModifierFlags() {};
	/**
	 * @returns DzFloatColor The value of this property as a DzFloatColor.
	 * @since 4.7.1.56
	 * @param {DzTime} tm - The scene time at which to get the value.
	 */
	getValueAsFloatColor(tm) {};
	/**
	 * @returns DzFloatColor The value of this property as a float color.
	 * @since 4.7.1.56
	 */
	getValueAsFloatColor() {};
	/**
	 * @returns DzInt2 The value of this property as a DzInt2.
	 * @since 4.7.1.56
	 */
	getValueAsInt2() {};
	/**
	 * @returns DzInt2 The value of this property as a DzInt2.
	 * @since 4.7.1.56
	 * @param {DzTime} tm - The scene time at which to get the value.
	 */
	getValueAsInt2(tm) {};
	/**
	 * @returns DzVec2 The value of this property as a DzVec2.
	 * @since 4.7.1.56
	 */
	getValueAsVec2() {};
	/**
	 * @returns DzVec2 The value of this property as a DzVec2.
	 * @since 4.7.1.56
	 * @param {DzTime} tm - The scene time at which to get the value.
	 */
	getValueAsVec2(tm) {};
	/**
	 * @returns DzVec3 The value of this property as a DzVec3.
	 * @since 4.7.1.56
	 */
	getValueAsVec3() {};
	/**
	 * @returns DzVec3 The value of this property as a DzVec3.
	 * @since 4.7.1.56
	 * @param {DzTime} tm - The scene time at which to get the value.
	 */
	getValueAsVec3(tm) {};
	/**
	 * @returns XYZInterest The XYZ interest for this property (if any).
	 */
	getXYZInterest() {};
	/**
	 * @description Adds a controller to this property.
	 * @param {DzNumericController} controller - The controller to insert.
	 * @param {Number} idx - The index where the controller should be inserted.
	 */
	insertController(controller, idx = -1) {};
	/**
	 * @returns Boolean true if this property's value is clamped (for display purposes), otherwise false.
	 */
	isClamped() {};
	/**
	 * @returns Boolean true if the value of this property is invalid without a map assigned, otherwise false.
	 */
	isInvalidWithoutMap() {};
	/**
	 * @returns Boolean true if this property has a direct link to another property, otherwise false.
	 */
	isLinked() {};
	/**
	 * @returns Boolean true if this property is mappable (i.e., can have an associated image map), otherwise false.
	 */
	isMappable() {};
	/**
	 * @returns Boolean true if this property is currently mapped, otherwise false.
	 */
	isMapped() {};
	/**
	 * @returns Boolean true if this property is the master in a direct link between two properties.
	 */
	isMaster() {};
	/**
	 * @returns Boolean true if this property is modulo over min and max (i.e., the amount in which the value exceeds the min or max is applied as the value in the same direction from the opposite limit), otherwise false.
	 */
	isModulo() {};
	/**
	 * @description Establishes a direct link between this property and the given property.
	 * @returns DzNumericProperty
	 * @param {DzNumericProperty} master - The property to be linked with this property.
	 * @attention This is the DAZ Studio equivalent of a LinkParm in Poser.
	 */
	linkTo(master) {};
	/**
	 * @description Sets the default map gamma.
	 * @since 4.5.2.23
	 * @param {Number} gamma - The gamma value to set.
	 */
	setDefaultMapGamma(gamma) {};
	/**
	 * @description Sets the default map texture type.
	 * @since 4.6.4.30
	 * @param {Number} type - The map texture type to set.
	 */
	setDefaultMapTextureType(type) {};
	/**
	 * @description Sets the default value for this property.
	 * @param {Number} val - The value to set as the default for this property.
	 */
	setDoubleDefaultValue(val) {};
	/**
	 * @description Sets the value for this property at the current time, or the default value if this property is not animatable, as a double precision number.
	 * @param {Number} val - The value to set the property to.
	 */
	setDoubleValue(val) {};
	/**
	 * @description Sets the value for this property at the given time; or the default value if this property is not animatable.
	 * @param {Number} tm - The scene time to set the value for.
	 * @param {Number} val - The value to set for this property.
	 */
	setDoubleValue(tm, val) {};
	/**
	 * @description Sets whether or not the value is clamped to its min and max.
	 * @param {Boolean} val - If true, this property is clamped.
	 */
	setIsClamped(val) {};
	/**
	 * @description Sets whether or not this property is mappable.
	 * @param {Boolean} val - If true, this property is mappable.
	 */
	setIsMappable(val) {};
	/**
	 * @description Sets whether or not the value is modulo over min and max; i.e., the amount in which the value exceeds the min or max is applied as the value in the same direction from the opposite limit.
	 * @param {Boolean} val - If true, this value is modulo over min and max.
	 */
	setIsModulo(val) {};
	/**
	 * @description Set the image map for this property.
	 * @param {String} imgFile - The name of the file to use as an image map.
	 */
	setMap(imgFile) {};
	/**
	 * @description Set the image map for this property.
	 * @param {DzTexture} img - The image map for this property.
	 */
	setMap(img) {};
	/**
	 * @description Sets whether or not this property value is valid when no map is assigned.
	 * @param {Boolean} val - If true, this property must have a map assigned.
	 */
	setMustHaveMap(val) {};
	/**
	 * @description Sets the texture modifier.
	 * @since 4.6.4.80
	 * @param {DzTextureModifier} txtMod - The texture modifier to set.
	 */
	setTextureModifier(txtMod) {};
	/**
	 * @description Sets texture modifier flags for this property.
	 * @since 4.6.4.82
	 * @param {Number} flags - The texture modifier flags to set.
	 */
	setTextureModifierFlags(flags) {};
	/**
	 * @description Set the XYZ interest for this property.
	 * @param {XYZInterest} interest - The new XYZ interest for this property.
	 */
	setXYZInterest(interest) {};
	/**
	 * @description Unlinks this property.
	 */
	unlink() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the clamped state for this property has changed.
	 * @signature `"clampedChanged(bool)"`
	 * @event
	 */
	clampedChanged(onOff) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the default map gamma for this property has changed.
	 * @signature `"defaultMapGammaChanged()"`
	 * @event
	 */
	defaultMapGammaChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the default map texture type for this property has changed.
	 * @signature `"defaultMapTextureTypeChanged()"`
	 * @event
	 */
	defaultMapTextureTypeChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the state of whether or not this property is mappable has changed.
	 * @signature `"isMappableChanged()"`
	 * @event
	 */
	isMappableChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the property is linked to another property.
	 * @signature `"linked()"`
	 * @event
	 */
	linked() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the image map for this property has changed.
	 * @signature `"mapChanged()"`
	 * @event
	 */
	mapChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the min and/or max values for this property have changed.
	 * @signature `"minMaxChanged()"`
	 * @event
	 */
	minMaxChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the texture modifier for this property has changed.
	 * @signature `"textureModifierChanged()"`
	 * @event
	 */
	textureModifierChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the flags on the texture modifier for this property have changed.
	 * @signature `"textureModifierFlagsChanged()"`
	 * @event
	 */
	textureModifierFlagsChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the property is unlinked from another property.
	 * @signature `"unlinked()"`
	 * @event
	 */
	unlinked() {};

}
/**
 * 
 */
class DzObject extends DzElement {
	/**
	 * @description Default Constructor.
	 */
	constructor() {};
	/**
	 * @description Adds a modifier to the modifier stack.
	 * @returns DzError DZ_NO_ERROR on success, otherwise an appropriate error code.
	 * @param {DzModifier} modifier - The modifier to add to this object's modifier stack.
	 * @param {Number} index - The position in the list to insert the modifer. If this is less than 0 (default), the modifier is appended to the end of the list.
	 */
	addModifier(modifier, index = -1) {};
	/**
	 * @description Add a shape to this object.
	 * @returns DzError
	 * @param {shape_dz} shape - The shape that will be added to this object's list of possible shapes.
	 * @param {Number} index - The position in the list to insert the shape. If this is less than 0 (default), the shape is appended to the end of the list.
	 */
	addShape(shape, index = -1) {};
	/**
	 * @returns DzModifier The modifier in the stack with the given name (if any), otherwise NULL.
	 * @param {String} name - The name of the modifier to get.
	 */
	findModifier(name) {};
	/**
	 * @returns Number The index of the modifier in the modifier stack (if any), otherwise -1.
	 * @param {DzModifier} mod - The modifier to find the index for.
	 */
	findModifierIndex(mod) {};
	/**
	 * @returns Number The index of the modifier in the modifier stack (if any), otherwise -1.
	 * @param {DzModifier} mod - The modifier to find the index for.
	 */
	findModifierIndexFromEnd(mod) {};
	/**
	 * @description TODO:
	 * Add description.
	 */
	forceCacheUpdate(node, isRender = false) {};
	/**
	 * @returns DzBox3 A world space bounding box for this object.
	 */
	getBoundingBox() {};
	/**
	 * @returns DzVertexmesh The final world-space transformed mesh for the current shape.
	 * @attention Re-evaluates the pipeline if necessary.
	 */
	getCachedGeom() {};
	/**
	 * @description Get the current shape.
	 * @returns DzShape The current shape this object is caching/drawing.
	 */
	getCurrentShape() {};
	/**
	 * @returns DzEnumProperty The property that controls the current shape of this object.
	 */
	getGeometryControl() {};
	/**
	 * @returns DzBox3 A local space bounding box for this object; cached by the last call to evaluate().
	 */
	getLocalBoundingBox() {};
	/**
	 * @returns DzOrientedBox3 A local space oriented bounding box for this object; cached by the last call to evaluate().
	 */
	getLocalOrientedBox() {};
	/**
	 * @returns DzModifier The modifier at the given position in the modifier stack (if any), otherwise NULL.
	 * @param {Number} which - The index of the modifier in the stack to get.
	 */
	getModifier(which) {};
	/**
	 * @returns Number The number of modifiers in the local modifier stack for this object.
	 */
	getNumModifiers() {};
	/**
	 * @returns Number The number of possible shapes that this object can display.
	 */
	getNumShapes() {};
	/**
	 * @returns DzShape The shape at the given index (if any), otherwise NULL.
	 * @param {Number} which - Index of the shape to get.
	 */
	getShape(which) {};
	/**
	 * @description Flags this object to reevaluate its geometry pipeline the next time the cached shape is requested.
	 */
	invalidateCache() {};
	/**
	 * @description Moves the modifier from its source obj to this modifier stack. DZ_ILLEGAL_ARGUMENT_ERROR is returned if there is not a modifier, the modifier's element parent is not an object, or the modifier is already an element child of this object. This move is not undo-able.
	 * @returns DzError DZ_NO_ERROR on success, otherwise an appropriate error code.
	 * @param {DzModifier} modifier - The modifier to add to this object's modifier stack.
	 * @param {Number} index - The position in the list to insert the modifer. If this is less than 0 (default), the modifier is appended to the end of the list.
	 */
	moveModifier(modifier, index = -1) {};
	/**
	 * @description Moves the given shape from its source object to this object. Operation fails if the shape's element parent is not a different dzobject with this shape in its shape list.
	 * @returns DzError DZ_NO_ERROR on success, otherwise an appropriate error code.
	 * @param {shape_dz} shape - The shape that will be added to this object's list of possible shapes.
	 * @param {Number} index - The position in the list to insert the shape. If this is less than 0 (default), the shape is appended to the end of the list.
	 */
	moveShape(shape, index = -1) {};
	/**
	 * @description Removes all the modifiers from the modifier stack.
	 * @returns DzError DZ_NO_ERROR on success, otherwise an appropriate error code.
	 */
	removeAllModifiers() {};
	/**
	 * @description Remove all shapes from this object.
	 * @returns DzError DZ_NO_ERROR on success, otherwise an appropriate error code.
	 */
	removeAllShapes() {};
	/**
	 * @description Removes a modifier from the modifier stack.
	 * @returns DzError DZ_NO_ERROR on success, otherwise an appropriate error code.
	 * @param {DzModifier} modifier - The modifier to remove from this object's modifier stack.
	 */
	removeModifier(modifier) {};
	/**
	 * @description Remove a shape from this object.
	 * @returns DzError DZ_NO_ERROR on success, otherwise an appropriate error code.
	 * @param {Number} index - The index of the shape to remove from this object's list of possible shapes.
	 */
	removeShape(index) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when a modifier is about to be added to this object.
	 * @signature `"aboutToAddModifier(DzModifier*)"`
	 * @event
	 */
	aboutToAddModifier(mod) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when this object is about to be deleted.
	 * @signature `"aboutToDelete()"`
	 * @event
	 */
	aboutToDelete() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the vertex mesh for this object is about to be finalized.
	 * @signature `"aboutToFinalize(const DzVertexMesh*)"`
	 * @event
	 */
	aboutToFinalize(mesh) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the cached geometry for this object has been finalized.
	 * @signature `"cachedGeomFinalized()"`
	 * @event
	 */
	cachedGeomFinalized() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the cached geometry for this object has been invalidated.
	 * @signature `"cachedGeomInvalidated()"`
	 * @event
	 */
	cachedGeomInvalidated() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the cached geometry for this object has been updated.
	 * @signature `"cachedGeomUpdated()"`
	 * @event
	 */
	cachedGeomUpdated() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the cached topology for this object has changed.
	 * @signature `"cachedTopologyChanged()"`
	 * @event
	 */
	cachedTopologyChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the current shape is swapped out.
	 * @signature `"currentShapeSwitched()"`
	 * @event
	 */
	currentShapeSwitched() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when this object needs to be redrawn.
	 * @signature `"drawnDataChanged()"`
	 * @event
	 */
	drawnDataChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the material list for the current shape changes.
	 * @signature `"materialListChanged()"`
	 * @event
	 */
	materialListChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the material selection state for the current shape changes.
	 * @signature `"materialSelectionChanged()"`
	 * @event
	 */
	materialSelectionChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the material selection state for the current shape changes.
	 * @signature `"materialSelectionSetsChanged()"`
	 * @event
	 */
	materialSelectionSetsChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when a modifier is added to this object.
	 * @signature `"modifierAdded(DzModifier*)"`
	 * @event
	 */
	modifierAdded(mod) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when a modifier is removed from this object.
	 * @signature `"modifierRemoved(DzModifier*)"`
	 * @event
	 */
	modifierRemoved(mod) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when a modifier is added to or removed from this object.
	 * @signature `"modifierStackChanged()"`
	 * @event
	 */
	modifierStackChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when a shape is added to this object.
	 * @signature `"shapeAdded(DzShape*)"`
	 * @event
	 */
	shapeAdded(shape) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when a shape is removed from this object.
	 * @signature `"shapeRemoved(DzShape*)"`
	 * @event
	 */
	shapeRemoved(shape) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the topology of the current shape for this object has changed.
	 * @signature `"shapeTopologyChanged()"`
	 * @event
	 */
	shapeTopologyChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the current uv set for the object has changed.
	 * @signature `"uvsChanged()"`
	 * @event
	 */
	uvsChanged() {};

}
/**
 * This page exists in order to indicate the script accessible portions of QObject. QObject is the base type of all objects in the Daz Studio API.
 * See Also:
 */
class QObject {
	/**
	 * @description Holds the name of the object.
	 * @type {String}
	 */
	objectName;
	/**
	 * @description Holds the name of the object.
	 * @type {String}
	 */
	name;
	/**
	 * @description Schedules this object for deletion.
	 */
	deleteLater() {};
	/**
	 * @returns String The string representation of the object.
	 */
	toString() {};
	/**
	 * @returns String A string representation of the object classname.
	 */
	className() {};
	/**
	 * @returns Boolean true if the object inherits classname, otherwise false.
	 * @param {String} classname - The name of the class to test for inheritance.
	 */
	inherits(classname) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted immediately before the object is destroyed.
	 * @signature `"destroyed(QObject*)"`
	 * @event
	 */
	destroyed(obj = null) {};

}
/**
 * See Also:
 */
class DzObjExporter extends DzExporter {
	/**
	 * @description Default Constructor.
	 */
	constructor() {};

}
/**
 * See Also:
 */
class DzObjImporter extends DzGeometryImporter {
	/**
	 * @description Default Constructor.
	 */
	constructor() {};

}
/**
 * Deprecated
 * Exists only to keep code written prior to 4.6.2.23 working. Do not use in new code. Use DzTextureComponent instead.
 */
class DzOffsetManip {
	/**
	 * @description Holds the vertical offset.
	 */
	constructor(x = 0, y = 0) {};
	/**
	 * @description TODO:
	 * Add description.
	 * @type {Number}
	 */
	xOffset;
	/**
	 * @description Holds the horizontal offset.
	 * @type {Number}
	 */
	yOffset;
	/**
	 * @description Sets the offset for the image.
	 * @param {Number} x - The offset for the image in x.
	 * @param {Number} y - The offset for the image in y.
	 */
	setOffset(x, y) {};

}
/**
 * Deprecated
 * Exists only to keep code written prior to 4.6.2.23 working. Do not use in new code. Use DzTextureComponent instead.
 */
class DzOpacityManip {
	/**
	 * @description Holds the opacity value.
	 */
	constructor(opacity = 1.0) {};
	/**
	 * @description TODO:
	 * Add description.
	 * @type {Number}
	 */
	opacity;
	/**
	 * @returns Number The opacity value for the image.
	 */
	getOpacity() {};
	/**
	 * @description Sets the opacity for the image.
	 * @param {Number} opacity - The new opacity value for the image. This should be in the range 0.0 - 1.0.
	 */
	setOpacity(opacity) {};

}
/**
 * You can access the global instance of DzOpenGL via the Global.OpenGL variable.
 */
class DzOpenGL extends QObject {
	/**
	 * @returns true if the OpenGL, and the DAZ-supported OpenGL extensions have been initialized. The other OpenGL support funtions will not return the correct result until initialization has occurred.
	 */
	constructor() {};
	/**
	 * @description ENUM: Lowest quality / Best performance. Texture sizes are clamped to a small size or the maximum size supported by the hardware, whichever is less.
	 */
	OGLLow;
	/**
	 * @description ENUM: Medium quality / Better performance. Texture sizes are clamped to a medium size or the maximum size supported by the hardware, whichever is less.
	 */
	OGLMed;
	/**
	 * @description ENUM: High quality / Good performance. Texture sizes are clamped to a large size or the maximum size supported by the hardware, whichever is less.
	 */
	OGLHigh;
	/**
	 * @description ENUM: Best quality / Low performance. Texture sizes are clamped to the maximum size supported by the hardware.
	 */
	OGLBest;
	/**
	 * @returns Number the opacity value of the bounding box for active ( highlighted ) nodes.
	 */
	getBoundingBoxActiveOpacity() {};
	/**
	 * @returns Number the length of the edges of the bounding boxes.
	 */
	getBoundingBoxEdgeLength() {};
	/**
	 * @returns Number the opacity value of the bounding box for inactive nodes that are selected.
	 */
	getBoundingBoxInactiveOpacity() {};
	/**
	 * @returns Number The number of bit depth of the client depth buffer.
	 */
	getDepthBufferBits() {};
	/**
	 * @returns Boolean true if nodes should be drawn with a highlight
	 */
	getDrawNodeHighlight() {};
	/**
	 * @returns Number The major version number of OpenGL supported on the current hardware.
	 */
	getMajorVersion() {};
	/**
	 * @returns Number The maximim texture size supported by the client.
	 */
	getMaxTextureSize() {};
	/**
	 * @returns Number The maximim number of textures supported by the client.
	 */
	getMaxTextureUnits() {};
	/**
	 * @returns Number The minor version number of OpenGL supported on the current hardware.
	 */
	getMinorVersion() {};
	/**
	 * @returns Number The number auxiliary buffers supported by the client.
	 */
	getNumAuxBuffers() {};
	/**
	 * @returns Number The maximim number of lights supported by the client.
	 */
	getNumLights() {};
	/**
	 * @returns Number The number of supported OpenGL extensions
	 */
	getNumOGLExtensions() {};
	/**
	 * @returns Number The OpenGL major and minor version numbers supported on the current hardware.
	 */
	getOpenGLVersion() {};
	/**
	 * @returns DzPbuffer A pointer to the application-wide global PBuffer object
	 */
	getPBuffer() {};
	/**
	 * @returns Number The release number of OpenGL supported on the current hardware.
	 */
	getReleaseNumber() {};
	/**
	 * @returns Number the opacity value of the wireframe for the generated edges of a subdivided mesh.
	 */
	getSubDivisionWireOpacity() {};
	/**
	 * @returns OGLTexQuality The current quality setting for loading OpenGL textures
	 */
	getTextureQuality() {};
	/**
	 * @returns Number The maximum dimension for a texture map based on the current OpenGL texture quality setting.
	 */
	getTextureQualityMaxSize() {};
	/**
	 * @returns Number the opacity value of the wireframe for drawn triangulation of quads.
	 * @since 4.9.3.142
	 */
	getTriDivisionWireOpacity() {};
	/**
	 * @returns Number the opacity value of the wireframe for the edges of a mesh.
	 */
	getWireframeOpacity() {};
	/**
	 * @returns Boolean true if the user has enabled display optimization and if its supported.
	 */
	isDisplayOptimizationEnabled() {};
	/**
	 * @returns Boolean true if the user has enabled hardware antialiasing.
	 */
	isMultisampleEnabled() {};
	/**
	 * @returns Boolean true if the client supports hardware antialiasing.
	 */
	isMultisampleSupported() {};
	/**
	 * @returns Boolean true if the given OpenGL extension is supported
	 * @param {String} extension - The extension to check
	 */
	isOGLExtensionSupported(extension) {};
	/**
	 * @description Checks for support of the four following extensions: GL_ARB_shader_objects, GL_ARB_fragment_shader, GL_ARB_vertex_shader, GL_ARB_shading_language_100. All four extensions must exist for this function to return true.
	 * @returns Boolean true if OpenGL Shader Language is supported
	 */
	isOGLShaderLanguageSupported() {};
	/**
	 * @returns Boolean true if the client supports hardware shadow mapping.
	 */
	isShadowingSupported() {};
	/**
	 * @returns Boolean true if the client supports Vertex Buffer Objects.
	 */
	isVBOSupported() {};
	/**
	 * @description Sets the opacity of the bounding box for active ( highlighted ) nodes.
	 * @param {Number} opacity - The opacity value to be used
	 */
	setBoundingBoxActiveOpacity(opacity) {};
	/**
	 * @description Sets the length of the edges of the bounding boxes.
	 * @param {Number} length - The edge length to be used
	 */
	setBoundingBoxEdgeLength(length) {};
	/**
	 * @description Sets the opacity of the bounding box for inactive nodes that are selected.
	 * @param {Number} opacity - The opacity value to be used
	 */
	setBoundingBoxInactiveOpacity(opacity) {};
	/**
	 * @description Sets whether or not display optimization is enabled in the OpenGL viewports
	 * @param {Boolean} onOff - If true, display optimizations will be enabled
	 */
	setDisplayOptimizationEnabled(onOff) {};
	/**
	 * @param {Boolean} onOff - If true, nodes will be drawn with a highlight
	 */
	setDrawNodeHighlight(onOff) {};
	/**
	 * @description Sets whether or not multisampling is enabled in the OpenGL viewports
	 * @param {Boolean} onOff - if true, multisampling is enabled
	 */
	setMultisampleEnabled(onOff) {};
	/**
	 * @description Sets the opacity of the wireframe for the generated edges of a subdivided mesh.
	 * @param {Number} opacity - The opacity value
	 */
	setSubDivisionWireOpacity(opacity) {};
	/**
	 * @description Sets the quality setting for loading OpenGL textures
	 * @param {OGLTexQuality} quality - The quality of the texture
	 */
	setTextureQuality(quality) {};
	/**
	 * @description Sets the opacity of the wireframe for the generated edges of a subdivided mesh.
	 * @since 4.9.3.142
	 * @param {Number} opacity - The opacity value
	 */
	setTriDivisionWireOpacity(opacity) {};
	/**
	 * @description Sets the opacity of the wireframe for the edges of a mesh.
	 * @param {Number} opacity - The opacity value
	 */
	setWireframeOpacity(opacity) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description TODO: Add Description
	 * @signature `TODO: Add Description`
	 * @event
	 */
	boundingBoxActiveOpacityChanged(value) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description TODO: Add Description
	 * @signature `TODO: Add Description`
	 * @event
	 */
	boundingBoxEdgeLengthChanged(value) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description TODO: Add Description
	 * @signature `TODO: Add Description`
	 * @event
	 */
	boundingBoxInactiveOpacityChanged(value) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when display optimization is disabled or enabled.
	 * @signature `"displayOptimizationEnabled(bool)"`
	 * @event
	 */
	displayOptimizationEnabled(onOff) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when multisample is disabled or enabled.
	 * @signature `"multisampleEnabled(bool)"`
	 * @event
	 */
	multisampleEnabled(onOff) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description TODO: Add Description
	 * @signature `TODO: Add Description`
	 * @event
	 */
	subDivisionWireOpacityChanged(value) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description TODO: Add Description
	 * @signature `TODO: Add Description`
	 * @event
	 */
	subWireframeOpacityChanged(value) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the texture quality setting has changed.
	 * @signature `"textureQualityChanged(DzOpenGL.OGLTexQuality)"`
	 * @event
	 */
	textureQualityChanged(quality) {};

}
/**
 * 
 */
class DzOrientedBox3 extends Object {
	/**
	 * @description Constructor. Creates an uninitialized box with an identity transform - the first point included in an uninitialized box will become the min and max for the box.
	 */
	constructor() {};
	/**
	 * @description Creates an oriented box by parsing a string.
	 * @param {String} box - A string representation of the box in the form "[[ minX, minY, minZ ], [ maxX, maxY, maxZ ], [ m11, m21, m31, m12, m22, m32, m13, m23, m33, m14, m24, m34 ]]"
	 */
	constructor(box) {};
	/**
	 * @description Copy constructor.
	 * @param {DzOrientedBox3} box - The box to copy from.
	 */
	constructor(box) {};
	/**
	 * @description Creates an uninitialized box with the given transform - the first point included in an uninitialized box will become the min and max for the box.
	 * @param {DzMatrix3} transform - The transformation to apply to this box
	 */
	constructor(transform) {};
	/**
	 * @description Creates an oriented box that is the given box with the given transform.
	 * @param {DzBox3} box - The box to copy from.
	 * @param {DzMatrix3} transform - The transformation to apply to this box.
	 */
	constructor(box, transform) {};
	/**
	 * @description This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. Creates an oriented box that is the given box with the given transform.
	 * @param {DzBox3} box - The box to copy from.
	 * @param {DzVec3} translation - The translation to apply to this box.
	 * @param {DzQuat} rotation - The rotation to apply to this box.
	 * @param {DzVec3} scale - The scale to apply to this box.
	 */
	constructor(box, translation, rotation, scale) {};
	/**
	 * @description Creates an uninitialized box with the given transform - the first point included in an uninitialized box will become the min and max for the box.
	 * @param {DzVec3} translation - The translation to apply to this box.
	 * @param {DzQuat} rotation - The rotation to apply to this box.
	 * @param {DzVec3} scale - The scale to apply to this box.
	 */
	constructor(translation, rotation, scale) {};
	/**
	 * @description The box in 'local space' (without transforms applied)
	 * @type {DzBox3}
	 */
	localBox;
	/**
	 * @description The transform matrix of the box in 3D space
	 * @type {DzMatrix3}
	 */
	transform;
	/**
	 * @returns String A string representation of this oriented box in the form "[[ minX, minY, minZ ], [ maxX, maxY, maxZ ], [ m11, m21, m31, m12, m22, m32, m13, m23, m33, m14, m24, m34 ]]".
	 */
	toString() {};

}
/**
 * This is the DAZScript counterpart to the QPalette type used in the DAZ Studio SDK.
 * Attention:@attention Attention:
 */
class Palette extends QObject {
	/**
	 * @description Default Constructor.
	 * @param {Palette} active - The Palette for the active state.
	 * @param {Palette} disabled - The Palette for the disabled state.
	 * @param {Palette} inactive - The Palette for the inactive state.
	 */
	constructor(active, disabled, inactive) {};
	/**
	 * @description The Palette for active windows (the window that has focus).
	 * @type {active}
	 */
	active;
	/**
	 * @description Used as the alternate background color in views with alternating row colors.
	 * @type {Color}
	 */
	alternateBase;
	/**
	 * @description Obsolete. Use window instead.
	 * @type {Color}
	 */
	background;
	/**
	 * @description Used as background color for text entry widgets, for example; usually white or another light color.
	 * @type {Color}
	 */
	base;
	/**
	 * @description A text color that is very different from windowText, and contrasts well with e.g. dark. Typically used for text that needs to be drawn where text or windowText would give poor contrast, such as on a pressed DzPushButton. Note that text colors can be used for things other than just words; text colors are usually used for text, but it's quite common to use the text color roles for lines, icons, etc.
	 * @type {Color}
	 */
	brightText;
	/**
	 * @description General button background color.
	 * @type {Color}
	 */
	button;
	/**
	 * @description A foreground color used with the button color.
	 * @type {Color}
	 */
	buttonText;
	/**
	 * @description Used for 3D bevel and shadow effects. Darker than button.
	 * @type {Color}
	 */
	dark;
	/**
	 * @description The Palette for disabled widgets.
	 * @type {disabled}
	 */
	disabled;
	/**
	 * @description Obsolete. Use windowText instead.
	 * @type {Color}
	 */
	foreground;
	/**
	 * @description A color to indicate a selected item or the current item.
	 * @type {Color}
	 */
	highlight;
	/**
	 * @description A text color that contrasts with highlight.
	 * @type {Color}
	 */
	highlightedText;
	/**
	 * @description The Palette for inactive windows (the other windows).
	 * @type {inactive}
	 */
	inactive;
	/**
	 * @description Used for 3D bevel and shadow effects. Lighter than button color.
	 * @type {Color}
	 */
	light;
	/**
	 * @description A text color used for unvisited hyperlinks. By default, the link color is blue.
	 * @type {Color}
	 */
	link;
	/**
	 * @description A text color used for already visited hyperlinks. By default, the link visited color is magenta.
	 * @type {Color}
	 */
	linkVisited;
	/**
	 * @description Used for 3D bevel and shadow effects. Between button and dark.
	 * @type {Color}
	 */
	mid;
	/**
	 * @description Used for 3D bevel and shadow effects. Between button and light.
	 * @type {Color}
	 */
	midlight;
	/**
	 * @description Used for 3D bevel and shadow effects. A very dark color.
	 * @type {Color}
	 */
	shadow;
	/**
	 * @description The foreground color used with base.
	 * @type {Color}
	 */
	text;
	/**
	 * @description Used as the background color for ToolTip and WhatsThis. Tool tips use the inactive Palette, because tool tips are not active windows.
	 * @type {Color}
	 */
	toolTipBase;
	/**
	 * @description Used as the foreground color for ToolTip and WhatsThis. Tool tips use the inactive Palette, because tool tips are not active windows.
	 * @type {Color}
	 */
	toolTipText;
	/**
	 * @description General background color.
	 * @type {Color}
	 */
	window;
	/**
	 * @description General foreground color.
	 * @type {Color}
	 */
	windowText;

}
/**
 * A "Pane" is the application's implementation of a persistent non-modal set of closely related widgets that can be stacked, ordered, docked, undocked, minimized, restored, shown, hidden, positioned and/or resized by the end-user.
 * Each pane has a label that is attached to the outer perimeter of the pane; whether the label appears as a tab/button/etc. to the user depends on the "style" that they currently has applied. A pane's label should briefly describe the concept (product, service, etc.) presented to the user within the pane.
 * Actions performed by the user that are closely related to the concept of a given pane, but do not warrant a persitent widget within the pane itself, or are more advanced in nature, should be considered for placement with the pane's option menu.
 * A pane is only ever displayed to the user within a DzPaneGroup; this is what gives the pane its ability to be stacked, ordered, docked, undocked, minimized, restored, shown, hidden, positioned and/or resized. A pane can only ever exist within one DzPaneGroup at a time.
 * Panes are singletons; there is only one instance of a given DzPane subclass. Panes are registered with DzPaneMgr and are available to access and modifiy via script. Use DzPaneMgr.findPane() to obtain a pointer to the single instance of the subclass, using its classname.
 */
class DzPane extends QWidget {
	/**
	 * @description Sub classes must reimplement this function to generate a default options menu if they have one. This function is called when the pane is loaded for the first time or the interface is reset. Otherwise, the option menus are loaded from the user's interface settings file.
	 * @param {DzActionMenu} menu - The menu to add to.
	 */
	buildOptionsMenu(menu) {};
	/**
	 * @returns String The label of this pane.
	 */
	getLabel() {};
	/**
	 * @returns DzActionMenu The DzActionMenu for the pane.
	 * @attention This function should not be used for adding a DzAction to a pane's option menu. Doing so defeats the user's ability to customize their interface settings. Instead, adding an action should be accomplished by reimplementing DzAction.getDefaultMenuPath().
	 */
	getOptionsMenu() {};
	/**
	 * @description Sub classes must reimplement this function to provide the interface manager with the ability to update the user's settings file when the pane's default menu has changed. This function should return a value of 1 or greater if the pane provides a menu. Each time the default menu changes, this number should be incremented.
	 * @returns Number
	 */
	getOptionsMenuVersion() {};
	/**
	 * @returns DzPaneGroup The DzPaneGroup parent that this pane belongs to.
	 */
	getPaneGroup() {};
	/**
	 * @description Hides this pane in the interface.
	 */
	hidePane() {};
	/**
	 * @description Moves the DzPaneGroup that this pane is in, out of an undockable dialog.
	 * @since 4.10.0.46
	 */
	makeGroupDockable() {};
	/**
	 * @description Moves the DzPaneGroup that this pane resides in to a dialog.
	 */
	makeGroupUndockable() {};
	/**
	 * @description Creates a DzPaneGroup in a dialog, and moves this pane into it.
	 * @param {Size} minSize - The minimum size for the dialog (if any). This will be expanded to at least the minimum size of the pane.
	 */
	makeUndockable(minSize = Size) {};
	/**
	 * @description Moves this pane from its current pane group into the given pane group.
	 * @param {DzPaneGroup} group - The group to move this pane to.
	 */
	moveToGroup(group) {};
	/**
	 * @description Called to refresh internal pane data when scene contents, etc have changed.
	 */
	refresh() {};
	/**
	 * @description Sub classes must reimplement this function to restore their saved settings.
	 * @param {DzPaneSettings} settings - The settings to restore.
	 */
	restoreSettings(settings) {};
	/**
	 * @description Sub classes must reimplement this function to save their current settings.
	 * @param {DzPaneSettings} settings - The settings that will be saved.
	 */
	saveSettings(settings) {};
	/**
	 * @description Sets the label for this pane.
	 * @param {String} label - The new label for this pane.
	 */
	setLabel(label) {};
	/**
	 * @description Shows this pane in the interface.
	 */
	showPane() {};
	/**
	 * @description Creates an undocked DzPaneGroup and moves this pane into it.
	 * @since 4.10.0.47
	 * @param {Point} pos - The position for the undocked pane group (if any).
	 * @param {Size} size - The size for the undocked pane group (if any). This will be expanded to at least the minimum size of the pane.
	 */
	undock(pos = Point, size = Size) {};
	/**
	 * @description Undocks the DzPaneGroup that this pane resides in.
	 * @since 4.10.0.47
	 * @param {Point} pos - The position for the undocked pane group (if any).
	 * @param {Size} size - The size for the undocked pane group (if any). This will be expanded to at least the minimum size of the pane.
	 */
	undockGroup(pos = Point, size = Size) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the pane's label has changed.
	 * @signature `"labelChanged(const QString&)"`
	 * @event
	 */
	labelChanged(newLabel) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the options menu for the pane has changed.
	 * @signature `"menuChanged()"`
	 * @event
	 */
	menuChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the the group the pane is in has changed.
	 * @signature `"paneGroupChanged(DzPaneGroup*,DzPaneGroup*)"`
	 * @event
	 */
	paneGroupChanged(oldGroup, newGroup) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the visibility of the pane's tab bar is changed. When the tab bar is hidden, it's options menu is not visible. If desired, pane instances can listen to this signal to know when the menu is hidden in order to provide an alternate method of accessing the menu options.
	 * @signature `"tabBarHiddenChanged(bool)"`
	 * @event
	 */
	tabBarHiddenChanged(hidden) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the pane is shown or hidden.
	 * @signature `"visibilityChanged(bool)"`
	 * @event
	 */
	visibilityChanged(onOff) {};

}
/**
 * The dockable tabbed pane that is used to organize panes in the DAZ Studio interface.
 */
class DzPaneGroup extends DzDockWindow {
	/**
	 * @returns DzPane The currently showing pane.
	 */
	getCurrentPane() {};
	/**
	 * @returns Point The offset, in pixels, from the point where a drag started to the top left corner (including extra for frame, titlebar, etc.)
	 */
	getDragOffset() {};
	/**
	 * @returns Number The number of panes in this group.
	 */
	getNumPanes() {};
	/**
	 * @returns Number The number of panes shown in this group.
	 */
	getNumShownPanes() {};
	/**
	 * @returns DzPane The pane in this group at the given index (if any), otherwise NULL.
	 * @param {Number} i - The index of the pane to get.
	 */
	getPane(i) {};
	/**
	 * @description Hides all panes without changing their group ownership.
	 */
	hideAllPanes() {};
	/**
	 * @description Hides the given pane without changing its group ownership.
	 * @param {DzPane} pane - The pane to be hidden.
	 */
	hidePane(pane) {};
	/**
	 * @description Sets whether this pane group's tab bar is hidden or not. Emits DzPane.tabBarHiddenChanged(). When the tab bar is hidden, the options menu for the current pane is not visible. If desired, DzPane instances should connect to it's DzPane.tabBarHiddenChanged() signal to be able to provide an alternate options menu when the tab bar is hidden.
	 * @param {Boolean} hide - If true, hides the tab bar.
	 */
	hideTabBar(hide) {};
	/**
	 * @returns Boolean true if the group is undockable (is a child of a panegroupdlg_dz), otherwise false.
	 * @since 4.10.0.46
	 */
	isUndockable() {};
	/**
	 * @description Enable or disabled the given pane in the interface, if it is a member of this group.
	 * @param {Boolean} pane - The pane to be enabled or disabled.
	 * @param {Boolean} enabled - If true, the pane will be enabled, otherwise the pane will be disabled.
	 */
	setPaneEnabled(pane, enabled) {};
	/**
	 * @description Makes sure the given pane is showing (if it is a member of this group).
	 * @param {DzPane} pane - The pane to be shown.
	 */
	showPane(pane) {};
	/**
	 * @returns Boolean true if this pane group's tab bar is hidden, otherwise false.
	 */
	tabBarHidden() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description TODO: Add Description
	 * @signature `TODO: Add Description`
	 * @event
	 */
	emptyGroup() {};

}
/**
 * This class manages layouts, activity layouts, pane groups, panes, and toolbars.
 * There is only one instance of this manager in an application. This instance is created and owned by DzMainWindow. Request the instance via DzMainWindow.getPaneMgr().
 * See Also:
 */
class DzPaneMgr extends QWidget {
	/**
	 * @description ENUM: Not docked.
	 */
	NO_DOCKING;
	/**
	 * @description ENUM: Docked on the left side.
	 */
	DOCK_LEFT;
	/**
	 * @description ENUM: Docked on the top.
	 */
	DOCK_TOP;
	/**
	 * @description ENUM: Docked on the right side.
	 */
	DOCK_RIGHT;
	/**
	 * @description ENUM: Docked on the bottom.
	 */
	DOCK_BOTTOM;
	/**
	 * @description Adds the activity layout to the list of layouts.
	 * @param {DzActivityLayout} layout - The layout to be added.
	 */
	addActivityLayout(layout) {};
	/**
	 * @description Adds the given pane group dialog to the list of dialogs.
	 * @returns DzPanegroupdlg
	 * @param {panegroupdlg_dz} dlg - The pane group dialog to add.
	 */
	addPaneGroupDlg(dlg) {};
	/**
	 * @description Removes all panes from all groups.
	 */
	clearAllGroups() {};
	/**
	 * @description Closes all pane group dialogs.
	 */
	closeAllPaneGroupDlgs() {};
	/**
	 * @description Creates a new activity layout and adds it to the list.
	 * @returns DzActivityLayout The created activity layout.
	 * @param {String} name - The name of the activity layout.
	 * @param {String} description - The description of the activity layout.
	 */
	createActivityLayout(name, description) {};
	/**
	 * @returns DzPaneGroup A new pane group without any panes.
	 */
	createEmptyPaneGroup() {};
	/**
	 * @returns DzToolBar The tool bar with the given name (if any), otherwise creates a tool bar with the given name.
	 * @param {String} name - The name of the toolbar to create.
	 */
	createToolBar(name) {};
	/**
	 * @description Sets whether or not the activity bar is visible in the interface.
	 * @param {Boolean} onOff - If true, enables the activity bar.
	 */
	enableActivityBar(onOff) {};
	/**
	 * @returns DzActivityLayout The activity layout with the given name (if any), otherwise NULL.
	 * @param {String} name - The name of the layout to find.
	 */
	findActivityLayout(name) {};
	/**
	 * @returns DzDockBar The dock bar with the given name, otherwise NULL.
	 * @param {String} className - The class name of the dock bar to find.
	 */
	findDockBar(className) {};
	/**
	 * @returns DzDockBar The dock bar with the given name (if any), otherwise NULL.
	 * @param {String} name - The name of the dock bar to find.
	 */
	findDockBarByName(name) {};
	/**
	 * @returns DzPane The pane with the classname specified (if any), otherwise NULL.
	 * @param {String} identifier - The classname of the pane to find.
	 */
	findPane(identifier) {};
	/**
	 * @returns DzToolBar The tool bar with the given name (if any), otherwise NULL.
	 * @param {String} name - The name of the tool bar to find.
	 */
	findToolBar(name) {};
	/**
	 * @returns DzActivityLayout The active activity layout.
	 */
	getActiveActivityLayout() {};
	/**
	 * @returns Number The index of the active activity layout.
	 */
	getActiveActivityLayoutIndex() {};
	/**
	 * @returns String The name of the current activity bar image.
	 */
	getActivityBarImage() {};
	/**
	 * @returns Array A list of possible activity bar images.
	 */
	getActivityBarImageList() {};
	/**
	 * @returns DzActivityLayout The activity layout at the given index (if valid), otherwise NULL.
	 * @param {Number} i - The index of the desired activity layout.
	 */
	getActivityLayout(i) {};
	/**
	 * @returns Array A list of all DzActivityLayout objects.
	 * @since 4.11.0.220
	 */
	getActivityLayoutList() {};
	/**
	 * @returns String The path to the file that is the advanced layout for the application.
	 */
	getAdvancedLayout() {};
	/**
	 * @returns String The path to the file that is the basic layout for the application.
	 */
	getBasicLayout() {};
	/**
	 * @returns String The path to the file that is the default layout for the application.
	 */
	getDefaultLayout() {};
	/**
	 * @returns Array A list of default layout names included with the application.
	 */
	getDefaultLayoutNames() {};
	/**
	 * @returns DzDockBar The i'th dock bar in the application (if valid), otherwise NULL.
	 * @param {Number} i - The index of the dock bar to return.
	 */
	getDockBar(i) {};
	/**
	 * @returns Array A list of all DzDockBar objects.
	 * @since 4.11.0.220
	 */
	getDockBarList() {};
	/**
	 * @returns Number The number of activity layouts currently available.
	 */
	getNumActivityLayouts() {};
	/**
	 * @returns Number The number of dock bars in the application.
	 */
	getNumDockBars() {};
	/**
	 * @returns Number The number of pane group dialogs.
	 */
	getNumPaneGroupDlgs() {};
	/**
	 * @returns Number The number of pane groups currently available in the interface; includes pane groups that are not currently showing.
	 */
	getNumPaneGroups() {};
	/**
	 * @returns Number The number of panes currently available in the interface; this includes panes that are not currently showing.
	 */
	getNumPanes() {};
	/**
	 * @returns Number The number of tool bars in the application.
	 */
	getNumToolBars() {};
	/**
	 * @returns Boolean true if the tabs for selecting a pane are oriented along the top of pane groups, otherwise false.
	 */
	getOrientTabsAlongTop() {};
	/**
	 * @returns DzPane The pane at the specified index (if valid), otherwise NULL.
	 * @since 4.11.0.220
	 * @param {Number} i - The index of the pane to get.
	 */
	getPane(i) {};
	/**
	 * @returns DzPaneGroup The pane group at the given index (if valid), otherwise NULL.
	 * @param {Number} i - The index of the desired pane group.
	 */
	getPaneGroup(i) {};
	/**
	 * @returns DzPanegroupdlg The pane group dialog at the given index (if valid), otherwise NULL.
	 * @param {Number} i - The index of the desired pane group dialog.
	 */
	getPaneGroupDlg(i) {};
	/**
	 * @returns Array A list of all DzPaneGroup objects.
	 */
	getPaneGroupList() {};
	/**
	 * @returns Array A list of all DzPane objects.
	 */
	getPaneList() {};
	/**
	 * @returns String The path to the file that is the pro layout for the application.
	 * @since 4.7.0.3
	 */
	getProLayout() {};
	/**
	 * @returns String The path to the file that is the layout for this session of the application.
	 */
	getSessionLayout() {};
	/**
	 * @returns Boolean true if the Lesson Strip is showing, otherwise false.
	 */
	getShowLessonStrip() {};
	/**
	 * @returns String The path to the file that is the simple layout for the application.
	 */
	getSimpleLayout() {};
	/**
	 * @returns String The path to the file that is the standard layout for the application.
	 */
	getStandardLayout() {};
	/**
	 * @returns DzToolBar The i'th tool bar in the application (if valid), otherwise NULL.
	 * @param {Number} i - The index of the tool bar to return.
	 */
	getToolBar(i) {};
	/**
	 * @returns Array A list of all DzToolBar objects.
	 * @since 4.11.0.220
	 */
	getToolBarList() {};
	/**
	 * @returns Boolean true if workflow assistance is enabled, otherwise false.
	 */
	getUseWorkflowAssistance() {};
	/**
	 * @description Hide all panes from view in the interface.
	 */
	hideAllPanes() {};
	/**
	 * @description Hides all the tool bars in the application.
	 */
	hideAllToolBars() {};
	/**
	 * @description Hide the given pane from view in the interface.
	 * @returns DzError
	 */
	hidePane(pane) {};
	/**
	 * @description Hide the given pane from view in the interface.
	 * @returns DzError
	 * @param {String} identifier - The classname of the pane to hide.
	 */
	hidePane(identifier) {};
	/**
	 * @description Hide a pane group in the interface.
	 * @returns DzError DZ_NO_ERROR if no error is encountered, otherwise an error code indicating the status of hiding the pane group.
	 * @param {Number} i - The index of the pane group to hide.
	 */
	hidePaneGroup(i) {};
	/**
	 * @description Hide a pane group in the interface.
	 * @returns DzError DZ_NO_ERROR if no error is encountered, otherwise an error code indicating the status of hiding the pane group.
	 * @param {DzPaneGroup} group - The pane group to hide.
	 */
	hidePaneGroup(group) {};
	/**
	 * @returns Boolean true if the activity bar appears in the interface, otherwise false.
	 */
	isActivityBarEnabled() {};
	/**
	 * @description Loads the next image from the directory and sets it for the activity bar.
	 */
	loadNextActivityBarImage() {};
	/**
	 * @description Moves a group to a new dock location.
	 * @returns DzError DZ_NO_ERROR if no error is encountered, otherwise an error code indicating the status of moving the pane group.
	 * @param {DzPaneGroup} group - The group to move.
	 * @param {DockSide} dock - The dock location to move the group to.
	 */
	movePaneGroup(group, dock = NO_DOCKING) {};
	/**
	 * @description Moves a group to a new dock location.
	 * @returns DzError
	 */
	movePaneGroup(group, dock, index, newLine = false) {};
	/**
	 * @description Removes the given layout.
	 * @returns Boolean true if the layout existed and was removed, otherwise false.
	 * @param {Number} i - The index of the layout to remove.
	 */
	removeActivityLayout(i) {};
	/**
	 * @description Removes the given layout.
	 * @returns Boolean true if the layout existed and was removed, otherwise false.
	 * @param {String} name - The name of the activity layout to be removed.
	 */
	removeActivityLayout(name) {};
	/**
	 * @description Removes all the current layouts.
	 */
	removeAllActivityLayouts() {};
	/**
	 * @description Removes all tool bars from the application.
	 */
	removeAllToolBars() {};
	/**
	 * @description Removes the given pane group.
	 * @param {DzPaneGroup} group - The group to be removed.
	 */
	removePaneGroup(group) {};
	/**
	 * @description Removes the given pane group dialog from the list of dialogs.
	 * @returns DzPanegroupdlg
	 * @param {panegroupdlg_dz} dlg - The pane group dialog to remove.
	 */
	removePaneGroupDlg(dlg) {};
	/**
	 * @description Removes a tool bar from the application.
	 * @param {String} name - The name of the tool bar to remove.
	 */
	removeToolBar(name) {};
	/**
	 * @description Restores the activity layout from the given file.
	 * @returns DzError
	 * @param {String} filename - The name of the file to be read.
	 * @param {Boolean} executeScript - Whether or not the companion layout script should be executed.
	 */
	restoreLayout(filename, executeScript) {};
	/**
	 * @description Saves the current activity layout to the given file.
	 * @returns DzError
	 * @param {String} filename - The name of the file to be saved.
	 * @param {String} description - The description for this layout.
	 */
	saveLayout(filename, description = "") {};
	/**
	 * @description Selects the lesson at the given path.
	 * @returns Boolean true if the lesson is found and selected, otherwise false.
	 */
	selectLesson(path) {};
	/**
	 * @description Sets the active activity layout.
	 * @param {Number} i - The index of the activity to make active.
	 */
	setActiveActivityLayout(i) {};
	/**
	 * @description Sets the active layout.
	 * @param {DzActivityLayout} layout - The layout to make active.
	 */
	setActiveActivityLayout(layout) {};
	/**
	 * @description Sets the image for the activity bar.
	 * @param {String} img - The name of the image to use in the activity bar; this should be one of the strings returned by getActivityImageList().
	 */
	setActivityBarImage(img) {};
	/**
	 * @description Sets whether or not the position of tabs for selecting a pane are oriented along the top of the pane groups.
	 * @param {Boolean} onOff - If true, the tabs will be displayed along the top of pane groups. If false, the tabs will be displayed along the sides of pane groups.
	 */
	setOrientTabsAlongTop(onOff) {};
	/**
	 * @description Enables or disables a given pane in the interface.
	 * @returns DzError DZ_NO_ERROR if no error is encountered, otherwise an error code indicating the status of enabling or disabling the pane.
	 * @param {String} identifier - The classname of the pane to enable or disable.
	 * @param {Boolean} enabled - If true, the pane will be enabled.
	 */
	setPaneEnabled(identifier, enabled) {};
	/**
	 * @description Enables or disables a given pane in the interface.
	 * @returns DzError DZ_NO_ERROR if no error is encountered, otherwise an error code indicating the status of enabling or disabling the pane.
	 * @param {Boolean} pane - The pane to be enabled or disabled.
	 * @param {Boolean} enabled - If true, the pane will be enabled.
	 */
	setPaneEnabled(pane, enabled) {};
	/**
	 * @description Sets the file that will be loaded and saved as the user's layout for the session.
	 * @returns DzError
	 * @param {String} filename - The name of the file to be saved.
	 */
	setSessionLayout(filename) {};
	/**
	 * @description Sets the visibility of the Lesson Strip.
	 * @param {Boolean} onOff - If true, the lesson strip is shown.
	 */
	setShowLessonStrip(onOff) {};
	/**
	 * @description Sets whether or not workflow assistance will be enabled.
	 * @param {Boolean} onOff - If true, workflow assistance will be enabled.
	 */
	setUseWorkflowAssistance(onOff) {};
	/**
	 * @description Make all panes visible in the interface.
	 */
	showAllPanes() {};
	/**
	 * @description Make the given pane visible in the interface.
	 * @returns DzError
	 * @param {String} identifier - The classname of the pane to show.
	 */
	showPane(identifier) {};
	/**
	 * @description Make the given pane visible in the interface.
	 * @returns DzError
	 * @param {DzPane} pane - The pane to be shown.
	 */
	showPane(pane) {};
	/**
	 * @description Show a pane group in the interface.
	 * @returns DzError DZ_NO_ERROR if no error is encountered, otherwise an error code indicating the status of showing the pane group.
	 * @param {DzPaneGroup} group - The pane group to show.
	 */
	showPaneGroup(group) {};
	/**
	 * @description Show a pane group in the interface.
	 * @returns DzError DZ_NO_ERROR if no error is encountered, otherwise an error code indicating the status of showing the pane group.
	 * @param {Number} i - The index of the pane group to show.
	 */
	showPaneGroup(i) {};
	/**
	 * @description Put the pane in its own pane group, if it's not already, and moves the pane group out of any dock area.
	 * @returns DzError DZ_NO_ERROR if no error is encountered, otherwise an error code indicating the status of tearing off the pane.
	 * @param {Number} index - The index of the pane to tear off.
	 * @param {Number} x - The x position to move to.
	 * @param {Number} y - The y position to move to.
	 */
	tearOffPane(index, x = 0, y = 0) {};
	/**
	 * @description Put the pane in its own pane group, if it's not already, and moves the pane group out of any dock area.
	 * @returns DzError DZ_NO_ERROR if no error is encountered, otherwise an error code indicating the status of tearing off the pane.
	 * @param {DzPane} pane - The pane to tear off.
	 * @param {Number} x - The x position to move to.
	 * @param {Number} y - The y position to move to.
	 */
	tearOffPane(pane, x = 0, y = 0) {};
	/**
	 * @description Put the pane in its own pane group, if it's not already, and moves the pane group out of any dock area.
	 * @returns DzError DZ_NO_ERROR if no error is encountered, otherwise an error code indicating the status of tearing off the pane.
	 * @param {String} identifier - The classname of the pane to tear off.
	 * @param {Number} x - The x position to move to.
	 * @param {Number} y - The y position to move to.
	 */
	tearOffPane(identifier, x = 0, y = 0) {};
	/**
	 * @description Toggle the given pane's visibility in the interface.
	 * @returns DzError
	 * @param {DzPane} pane - The pane whose visibility needs to be toggled.
	 */
	togglePane(pane) {};
	/**
	 * @description Toggle the given pane's visibility in the interface.
	 * @returns DzError
	 * @param {String} identifier - The classname of the pane to toggle.
	 */
	togglePane(identifier) {};
	/**
	 * @description Toggle the given pane's visibility in the interface.
	 * @returns DzError
	 * @param {Number} index - The index of the pane to be toggled.
	 */
	togglePane(index) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the active layout is about to change.
	 * @signature `"activeLayoutAboutToChange(int)"`
	 * @event
	 */
	activeLayoutAboutToChange(newLayoutIdx) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the active layout has changed.
	 * @signature `"activeLayoutChanged(int)"`
	 * @event
	 */
	activeLayoutChanged(i) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the activity bar is enabled/disabled.
	 * @signature `"activityBarEnabled(bool)"`
	 * @event
	 */
	activityBarEnabled(onOff) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the list of available layouts has changed.
	 * @signature `"layoutListChanged()"`
	 * @event
	 */
	layoutListChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the layout is restored from a file.
	 * @signature `"layoutRestored(const QString&)"`
	 * @event
	 */
	layoutRestored(filename) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the option controlling whether or not tabs are oriented along the top of a pane group has changed.
	 * @signature `"orientTabsAlongTopChanged(bool)"`
	 * @event
	 */
	orientTabsAlongTopChanged(onOff) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the list of available toolbars has changed.
	 * @signature `"toolbarListChanged()"`
	 * @event
	 */
	toolbarListChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the state of whether or not the workflow assistant is enabled has changed.
	 * @signature `"workflowAssistanceEnableStateChanged(bool)"`
	 * @event
	 */
	workflowAssistanceEnableStateChanged(onOff) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the mode of the workflow assistant has changed.
	 * @signature `"workflowAssistanceModeChanged()"`
	 * @event
	 */
	workflowAssistanceModeChanged() {};

}
/**
 * TODO:
 * Add detailed description.
 */
class DzPaneSettings extends DzSettings {
	/**
	 * @description Default Constructor
	 */
	constructor() {};

}
/**
 * 
 */
class DzParentProductContainer extends DzRefCountedItem, DzAbstractAssetContainer {
	/**
	 * @description Attempts to update the child containers of this container.
	 * @returns Boolean true if the update was successful, otherwise false.
	 */
	updateChildren() {};

}
/**
 * A DzPathComboBox provides a DzComboBox like widget with a popup that is designed for choosing a path.
 */
class DzPathComboBox extends DzWidget {
	/**
	 * @description Instantiates DzPathComboBox
	 * @param {DzWidget} parent - The widget parent for the path combobox.
	 * @param {Boolean} useMarkableView - Whether or not to use a view with check boxes.
	 */
	constructor(parent, useMarkableView = false) {};
	/**
	 * @description Clear selection
	 */
	clearSelection() {};
	/**
	 * @returns DzTypeAssetContainer current type
	 */
	currentType() {};
	/**
	 * @returns String current type
	 */
	currentType() {};
	/**
	 * @description TODO:
	 * Add description.
	 * @returns DzTypeAssetContainer
	 */
	getRoot() {};
	/**
	 * @returns Array returns selected paths.
	 */
	getSelectionPath() {};
	/**
	 * @description Sets empty text
	 */
	setEmptyText(text) {};
	/**
	 * @description sets the current selection
	 */
	setSelection(idPath) {};
	/**
	 * @returns current type
	 */
	setTopLevelType(idPath) {};
	/**
	 * @description Sets paths for the combobox.
	 */
	setTypes(list) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description TODO: Add Description
	 * @signature `TODO: Add Description`
	 * @event
	 */
	pathSelectionChanged(path) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description TODO: Add Description
	 * @signature `TODO: Add Description`
	 * @event
	 */
	viewAboutToShow() {};

}
/**
 * Persistant menus are registered with the DzActionMgr singleton and are available to access and modifiy via script.
 */
class DzPersistentMenu extends QObject {
	/**
	 * @description Clear the active widget for this persistent menu.
	 */
	clearActiveWgt() {};
	/**
	 * @returns DzActionMenu The DzActionMenu that belongs to this persistent menu. If one does not exist, it is created.
	 * @since 4.6.0.76
	 */
	getActionMenu() {};
	/**
	 * @returns QWidget The widget that launched this persistent menu (if any), otherwise null.
	 */
	getActiveWgt() {};
	/**
	 * @description Sets the active widget for this persistent menu.
	 * @param {QWidget} wgt - The widget that launches the persistent menu.
	 */
	setActiveWgt(wgt) {};

}
/**
 * This is the DAZScript counterpart to the QPixmap type used in the DAZ Studio SDK.
 * Attention:@attention Attention:
 */
class Pixmap extends QObject {
	/**
	 * @description Default Constructor.
	 */
	constructor() {};
	/**
	 * @description Copy Constructor.
	 * @param {Pixmap} pixmap - The Pixmap to copy.
	 */
	constructor(pixmap) {};
	/**
	 * @param {String} filename - The name of the file to load the pixmap's data from.
	 */
	constructor(filename) {};
	/**
	 * @description The color depth of the pixmap (Read-Only)
	 * @type {Number}
	 */
	depth;
	/**
	 * @description The height of the pixmap in pixels (Read-Only)
	 * @type {Number}
	 */
	height;
	/**
	 * @description The enclosing rectangle of the pixmap in pixels (Read-Only)
	 * @type {Rect}
	 */
	rect;
	/**
	 * @description The size of the pixmap (Read-Only)
	 * @type {Size}
	 */
	size;
	/**
	 * @description The width of the pixmap in pixels (Read-Only)
	 * @type {Number}
	 */
	width;
	/**
	 * @description Fills the pixmap with color.
	 * @param {Color} color - The color to set all the pixels in the pixmap.
	 */
	fill(color) {};
	/**
	 * @since 4.9.3.105
	 * @param {Image} image - The image to convert.
	 */
	fromImage(image) {};
	/**
	 * @description Gets whether or not the pixmap is Null.
	 * @returns Boolean true if this is a Null (empty) pixmap, false if the pixmap has data.
	 */
	isNull() {};
	/**
	 * @description Loads data into the pixmap from a file.
	 * @returns Boolean true if the data was loaded, otherwise false. (since 4.11.0.155)
	 * @param {String} filename - The name of the file to load into the pixmap.
	 * @param {String} format - The file format of the bytes in file pointed to by filename; i.e. "PNG". (since 4.11.0.155)
	 */
	load(filename, format = "") {};
	/**
	 * @description Loads data into the pixmap from a byte array using the specified format.
	 * @returns Boolean true if the data was loaded, otherwise false. (since 4.10.0.88)
	 * @param {ByteArray} data - The binary data to load into the pixmap.
	 * @param {String} format - The file format of the bytes in data; i.e. "PNG".
	 */
	loadFromData(data, format = "") {};
	/**
	 * @description Resizes the pixmap.
	 * @param {Number} width - The new width for the pixmap.
	 * @param {Number} height - The new height for the pixmap.
	 */
	resize(width, height) {};
	/**
	 * @description Resizes the pixmap.
	 * @param {Size} size - The new size for the pixmap.
	 */
	resize(size) {};
	/**
	 * @description Saves the pixmap to a file.
	 * @param {String} filename - The name of the file to save the pixmap to.
	 */
	save(filename) {};
	/**
	 * @returns Image The pixmap converted to an image, or null if the conversion fails.
	 * @since 4.9.3.105
	 */
	toImage() {};

}
/**
 * This class provides startup and shutdown functionality for DAZ Studio plug-ins and maintains the list of class types exported by the plug-in.
 */
class DzPlugin extends QObject {
	/**
	 * @description ENUM: TODO: Add description.
	 */
	Loaded;
	/**
	 * @description ENUM: TODO: Add description.
	 */
	RequiresRestart;
	/**
	 * @description ENUM: TODO: Add description.
	 */
	ManuallyDisabled;
	/**
	 * @description ENUM: TODO: Add description.
	 */
	EvaluationInvalid;
	/**
	 * @description ENUM: TODO: Add description.
	 */
	Failed;
	/**
	 * @returns String The author of the plug-in.
	 */
	getAuthor() {};
	/**
	 * @returns String The author's description of the plug-in.
	 */
	getDescription() {};
	/**
	 * @returns String The evaluation information of the plug-in in string form.
	 */
	getEvaluationInformation() {};
	/**
	 * @returns String The absolute file path to the plug-in; set by DzApp when the plug-in is loaded.
	 */
	getFilename() {};
	/**
	 * @returns Boolean true if the plug-in should load on application start, otherwise false.
	 */
	getLoadOnStart() {};
	/**
	 * @returns String The name of the plug-in.
	 */
	getName() {};
	/**
	 * @returns Array A list of prefixes that can be used to serialize this plugin (if any), otherwise an empty list.
	 * @since 4.11.0.35
	 */
	getPrefixes() {};
	/**
	 * @returns The load state of the plug-in.
	 */
	getStatus() {};
	/**
	 * @returns String Additional information about the plug-in load state.
	 */
	getStatusInformation() {};
	/**
	 * @returns String The string representation of the plug-in load state.
	 */
	getStatusString() {};
	/**
	 * @returns DzVersion The version number of the plug-in.
	 */
	getVersion() {};
	/**
	 * @returns String The version number of the plug-in in string form.
	 */
	getVersionString() {};
	/**
	 * @returns Boolean true if the plug-in is activated, otherwise false. A plug-in is considered activated if it has either been registered or it is within an evaluation period.
	 */
	isActivated() {};
	/**
	 * @returns Boolean true if the plug-in has been registered, otherwise false. A plug-in is considered registered if a valid serial number for the plug-in has been applied, or if the plug-in does not use serial number registration. A plug-in that is within an evaluation period is not considered registered.
	 */
	isRegistered() {};
	/**
	 * @returns Boolean true if the serial number is valid for the plug-in, otherwise false.
	 * @param {String} serialNumber - The serial number to validate.
	 * @param {Boolean} saveIfValid - If true, the serial number will be saved if it is found to be valid.
	 */
	validateSerialNumber(serialNumber, saveIfValid) {};

}
/**
 * Responsible for the management of dynamically loaded libraries (aka "plugins") that extend the features/functionality of the core application.
 * There is only one instance of this manager in an application. This instance is created and owned by DzApp. Request the instance via DzApp.getPluginMgr().
 * See Also:
 */
class DzPluginMgr extends QObject {
	/**
	 * @description Shows the "About Installed Plugins" dialog.
	 */
	doAboutPluginsDlg() {};
	/**
	 * @returns DzPlugin The plug-in of the given type (if any), otherwise NULL.
	 * @param {String} pluginName - The name of the desired plugin.
	 */
	findPlugin(pluginName) {};
	/**
	 * @returns Number The number of plug-ins currently loaded by DAZ Studio.
	 */
	getNumPlugins() {};
	/**
	 * @returns DzPlugin The plug-in at the given index in the list (if valid), otherwise NULL.
	 * @param {Number} which - The index of the plug-in to get.
	 */
	getPlugin(which) {};
	/**
	 * @returns Boolean true if the configuration file was saved, otherwise false.
	 * @since 4.11.0.35
	 */
	saveConfiguration() {};
	/**
	 * @description Sets whether or not the plug-in should load when the application starts.
	 * @since 4.11.0.35
	 * @param {DzPlugin} plugin - The plugin to set whether or not to load on startup.
	 * @param {Boolean} onOff - If true, the plugin should load on startup. If false, the plugin should not load on startup.
	 */
	setPluginLoadOnStartup(plugin, onOff) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description TODO: Add Description
	 * @signature `TODO: Add Description`
	 * @event
	 */
	pluginAdded(plugin) {};

}
/**
 * This is the DAZScript counterpart to the QPoint type used in the DAZ Studio SDK. A Point object is a two dimensional representation of a `x` (horizontal) and `y` (vertical) position.
 * Attention:@attention Attention:
 */
class Point extends QObject {
	/**
	 * @description Default constructor.
	 */
	constructor() {};
	/**
	 * @param {Point} pnt - The point to copy.
	 */
	constructor(pnt) {};
	/**
	 * @param {Number} x - The x coordinate for the point.
	 * @param {Number} y - The y coordinate for the point.
	 */
	constructor(x, y) {};
	/**
	 * @description Holds the point's x position.
	 * @type {Number}
	 */
	x;
	/**
	 * @description Holds the point's y position.
	 * @type {Number}
	 */
	y;
	/**
	 * @returns Point The position of the cursor in global screen coordinates.
	 * @since 4.11.0.35
	 */
	static cursorPos() {};

}
/**
 * TODO:
 * Add detailed description.
 */
class DzPointLight extends DzDistantLight {
	/**
	 * @description Default Constructor. Creates a new point light.
	 */
	constructor() {};
	/**
	 * @returns Number The amount of decay.
	 * @since 4.9.3.145
	 */
	getDecay() {};
	/**
	 * @returns DzFloatProperty The property that controls the decay.
	 */
	getDecayControl() {};
	/**
	 * @returns Boolean true if the sphere will be displayed when the node is not selected, otherwise false.
	 * @since 4.9.3.145
	 */
	getDisplayPersistence() {};
	/**
	 * @returns DzBoolProperty The property that controls the display persistence.
	 * @since 4.9.3.145
	 */
	getDisplayPersistenceControl() {};
	/**
	 * @returns Number The distance at which the illumination from this light falls off.
	 * @since 4.8.0.9
	 */
	getFalloffDistance(lightPercent) {};
	/**
	 * @returns String The path to the IES Light Profile (if any), or an empty string.
	 * @since 4.8.0.18
	 */
	getLightProfile() {};
	/**
	 * @returns DzFileProperty The property that controls the IES profile of the light.
	 * @since 4.8.0.18
	 */
	getLightProfileControl() {};
	/**
	 * @returns Boolean true if the light contributes to the scene, otherwise false.
	 */
	getLightVisibility() {};
	/**
	 * @returns Number The opacity of the display sphere.
	 * @since 4.9.3.145
	 */
	getSphereOpacity() {};
	/**
	 * @returns DzFloatProperty The property that controls the opacity of the sphere.
	 * @since 4.9.3.145
	 */
	getSphereOpacityControl() {};
	/**
	 * @description Sets the amount of decay.
	 * @since 4.9.3.145
	 * @param {Number} decay - The amount of decay to set.
	 */
	setDecay(decay) {};
	/**
	 * @description Sets the persistance of the display sphere.
	 * @since 4.9.3.145
	 * @param {Boolean} persistence - If true, the sphere will be displayed when the node is not selected. If false, the sphere will not be displayed when the node is not selected.
	 */
	setDisplayPersistence(persistence) {};
	/**
	 * @description Sets the path of the IES light profile.
	 * @since 4.9.3.145
	 * @param {String} profilePath - The path of the IES profile to set.
	 */
	setLightProfile(profilePath) {};
	/**
	 * @description Sets the opacity of the display sphere.
	 * @since 4.9.3.145
	 * @param {Number} opacity - The opacity to set.
	 */
	setSphereOpacity(opacity) {};

}
/**
 * Provides a menu widget for use in context menus and other popup menus.
 * A menu consists of a list of items. There are three kinds of items: separators, items that show a submenu, and items that perform an action.
 * Submenu items and action items have an identifier (id) and a position (index). Separators have a position (index) and a common identifier (-1).
 * Separators are inserted with insertSeparator(). Submenus are inserted with insertSubmenuItem(), insertTextSubmenuItem(), or insertPixmapSubmenuItem(). All other items are considered action items, and are inserted with insertItem(), insertTextItem() or insertPixmapItem().
 * Submenu items and action items can have text, a pixmap, or both.
 * Clearing an entire menu is accomplished with clear() and removing individual items is accomplished with removeItem() or removeItemAt().
 * To make a menu visible on the screen, use exec() or popup() - do not use show().
 */
class DzPopupMenu extends DzWidget {
	/**
	 * @description Creates a popup menu as a child of the given parent widget.
	 * @param {DzWidget} parent - The widget parent for the popup menu.
	 */
	constructor(parent) {};
	/**
	 * @description Holds whether or not the display of check marks on menu items is enabled. When true, the display of check marks on menu items is enabled. Checking is always enabled when in Windows-style.
	 * @type {Boolean}
	 */
	checkable;
	/**
	 * @description Holds whether or not the menu supports being torn off. When true, the menu contains a special tear-off item (often shown as a dashed line at the top of the menu) that creates a copy of the menu when it is triggered.
	 * @type {Boolean}
	 */
	tearOff;
	/**
	 * @description Removes all menu items.
	 */
	clear() {};
	/**
	 * @description Connects the menu item with the specified identifier to a function.
	 * @returns Boolean true if the connection is successfully established, otherwise false.
	 * @param {Number} id - The identifier of the menu item to connect to.
	 * @param {Object} receiver - The object that will receive the signal. Prior to 4.15.0.24, this must be a QObject (or derived).
	 * @param {Object} function - The name of the function on receiver to execute when the menu item is activated. Prior to 4.15.0.24, the signature of this function must have no parameters, or a single parameter of the 'int' type.
	 */
	connectItem(id, receiver, member) {};
	/**
	 * @description Connects the menu item with the specified identifier to a function.
	 * @returns Boolean true if the connection is successfully established, otherwise false.
	 * @since 4.15.0.24
	 * @param {Number} id - The identifier of the menu item to connect to.
	 * @param {Function} thisObject - The object to bind to 'this' in the scope of functionRef if functionRef is a script-defined Function. If functionRef is a function on a QObject, this argument is not used.
	 * @param {Function} functionRef - The function to execute when the menu item is activated.
	 */
	connectItem(id, thisObject, functionRef) {};
	/**
	 * @description Disconnects the menu item with the specified identifier from a function.
	 * @returns Boolean true if the connection is successfully removed, otherwise false.
	 * @param {Number} id - The identifier of the menu item to disconnect from.
	 * @param {Object} receiver - The object that is receiving the signal. Prior to 4.15.0.24, this must be a QObject (or derived).
	 * @param {Object} function - The name of the function on receiver to disconnect from.
	 * @attention All connections are automatically removed when this menu is destroyed.
	 */
	disconnectItem(id, receiver, member) {};
	/**
	 * @description Disconnects the menu item with the specified identifier from a function.
	 * @returns Boolean true if the connection is successfully removed, otherwise false.
	 * @since 4.15.0.24
	 * @param {Number} id - The identifier of the menu item to disconnect from.
	 * @param {Function} thisObject - The object bound to 'this' in the scope of functionRef if functionRef is a script-defined Function. If functionRef is a function on a QObject, this argument is not used.
	 * @param {Function} functionRef - The function to disconnect from.
	 * @attention All connections are automatically removed when this menu is destroyed.
	 */
	disconnectItem(id, thisObject, functionRef) {};
	/**
	 * @description Executes this menu synchronously. In most situations you will want to specify the position yourself, for example at the current mouse position.
	 * @returns Number The identifier of the menu item clicked, or -1 if a menu item was not clicked.
	 */
	exec() {};
	/**
	 * @description Executes this menu synchronously. Opens the popup menu so that the item number indexAtPoint will be at the specified global position pos.
	 * @returns Number The identifier of the menu item clicked, or -1 if a menu item was not clicked.
	 * @param {Point} pos - The global position to popup the menu.
	 * @param {Number} indexAtPoint - The index of the menu item to position at pos.
	 */
	exec(pos, indexAtPoint) {};
	/**
	 * @returns Number The identifier for the menu item at the specified index position (if valid), otherwise -1.
	 * @param {Number} index - The index position to get the identifier for.
	 */
	idAt(index) {};
	/**
	 * @returns Number The identifier of the menu item at the specified index position (if any), otherwise -1.
	 * @param {Point} pos - The position to to check.
	 */
	idAt(pos) {};
	/**
	 * @description Inserts a menu item, with a pixamp, and text into this menu.
	 * @returns Number The identifier assigned to the inserted menu item.
	 * @since 4.15.0.16
	 * @param {Pixmap} pixmap - The pixmap to assign to this menu item.
	 * @param {String} text - The text to assign to the menu item.
	 * @param {Number} id - The identifier to assign to the menu item.
	 * @param {Number} index - The index position within the menu to insert the item. The item becomes the last menu item if this is a negative value (default).
	 */
	insertItem(pixmap, text, id = -1, index = -1) {};
	/**
	 * @description Inserts a menu item, with a pixmap, into this menu.
	 * @returns Number The identifier assigned to the inserted menu item.
	 * @since 4.15.0.16
	 * @param {Pixmap} pixmap - The pixmap to assign to the menu item.
	 * @param {Number} id - The identifier to assign to the menu item.
	 * @param {Number} index - The index position within the menu to insert the item. The item becomes the last menu item if this is a negative value (default).
	 */
	insertPixmapItem(pixmap, id = -1, index = -1) {};
	/**
	 * @description Inserts a submenu item, with a pixmap, into this menu.
	 * @returns Number The identifier assigned to the inserted menu item.
	 * @since 4.15.0.16
	 * @param {Pixmap} pixmap - The pixmap to assign to the menu item.
	 * @param {DzPopupMenu} popup - The menu to popup when this menu item is hovered over.
	 * @param {Number} id - The identifier to assign to the menu item.
	 * @param {Number} index - The index position within the menu to insert the item. The item becomes the last menu item if this is a negative value (default).
	 */
	insertPixmapSubmenuItem(pixmap, popup, id = -1, index = -1) {};
	/**
	 * @description Inserts a separator at the specified index position.
	 * @returns Number The identifier assigned to the inserted menu item - i.e., -1.
	 * @param {Number} index - The index position within the menu to insert the separator. The separator becomes the last menu item if this is a negative value (default).
	 */
	insertSeparator(index = -1) {};
	/**
	 * @description Inserts a submenu item, with a pixmap and text, into this menu.
	 * @returns Number The identifier assigned to the inserted menu item.
	 * @since 4.15.0.16
	 * @param {Pixmap} pixmap - The pixmap to assign to the menu item.
	 * @param {String} text - The text to assign to the menu item.
	 * @param {DzPopupMenu} popup - The menu to popup when this menu item is hovered over.
	 * @param {Number} id - The identifier to assign to the menu item.
	 * @param {Number} index - The index position within the menu to insert the item. The item becomes the last menu item if this is a negative value (default).
	 */
	insertSubmenuItem(pixmap, text, popup, id = -1, index = -1) {};
	/**
	 * @description Inserts a menu item, with text, into this menu.
	 * @returns Number The identifier assigned to the inserted menu item.
	 * @since 4.15.0.16
	 * @param {String} text - The text to assign to the menu item.
	 * @param {Number} id - The identifier to assign to the menu item.
	 * @param {Number} index - The index position within the menu to insert the item. The item becomes the last menu item if this is a negative value (default).
	 */
	insertTextItem(text, id = -1, index = -1) {};
	/**
	 * @description Inserts a submenu item, with text, into this menu.
	 * @returns Number The identifier assigned to the inserted menu item.
	 * @since 4.15.0.16
	 * @param {String} text - The text to assign to the menu item.
	 * @param {DzPopupMenu} popup - The menu to popup when this menu item is hovered over.
	 * @param {Number} id - The identifier to assign to the menu item.
	 * @param {Number} index - The index position within the menu to insert the item. The item becomes the last menu item if this is a negative value (default).
	 */
	insertTextSubmenuItem(text, popup, id = -1, index = -1) {};
	/**
	 * @returns Boolean true if the menu item with the specified identifier is checkable, otherwise false.
	 * @since 4.12.1.93
	 * @param {Number} id - The identifier of the menu item to get the checkable state of.
	 */
	isItemCheckable(id) {};
	/**
	 * @returns Boolean true if the menu item with the specified identifier is checked, otherwise false.
	 * @param {Number} id - The identifier of the menu item to get the checked state of.
	 */
	isItemChecked(id) {};
	/**
	 * @returns Boolean true if the menu item with the specified identifier is enabled, otherwise false.
	 * @param {Number} id - The identifier of the menu item to get the enabled state of.
	 */
	isItemEnabled(id) {};
	/**
	 * @returns Boolean true if the menu item with the specified identifier is visible, otherwise false.
	 * @param {Number} id - The identifier of the menu item to get the visible state of.
	 */
	isItemVisible(id) {};
	/**
	 * @returns Number The parameter of the activation signal for the menu item specified (if any), otherwise id.
	 * @param {Number} id - The identifier of the menu item to get the parameter of.
	 */
	itemParameter(id) {};
	/**
	 * @returns Number The number of menu items in this menu.
	 * @since 4.15.0.16
	 */
	numItems() {};
	/**
	 * @returns Pixmap The pixmap of the menu item with the specified identifier (if any), otherwise null.
	 * @param {Number} id - The identifier of the menu item to get the pixmap of.
	 */
	pixmap(id) {};
	/**
	 * @description Displays this menu synchronously.
	 * @param {Point} pos - The global position to popup the menu.
	 * @param {Number} indexAtPoint - The index of the menu item to position at pos.
	 */
	popup(pos, indexAtPoint) {};
	/**
	 * @description Removes the menu item with the specified identifier from the menu.
	 * @param {Number} id - The identifier of the menu item to remove.
	 */
	removeItem(id) {};
	/**
	 * @description Removes the menu item at the specified index position.
	 * @param {Number} index - The index position of the menu item to remove.
	 */
	removeItemAt(index) {};
	/**
	 * @description Sets the currently active item to id and repaints as necessary.
	 */
	setActiveItem(id) {};
	/**
	 * @description Sets the checkable state of the menu item with the specified identifier.
	 * @since 4.12.1.93
	 * @param {Number} id - The identifier of the menu item to set.
	 * @param {Boolean} yesNo - If true, the item is made checkable.
	 */
	setItemCheckable(id, yesNo) {};
	/**
	 * @description Sets the checked state of the menu item with the specified identifier.
	 * @param {Number} id - The identifier of the menu item to set.
	 * @param {Boolean} yesNo - If true, the item is checked.
	 */
	setItemChecked(id, yesNo) {};
	/**
	 * @description Sets the enabled state of the menu item with the specified identifier.
	 * @param {Number} id - The identifier of the menu item to set.
	 * @param {Boolean} yesNo - If true, the item is enabled.
	 */
	setItemEnabled(id, yesNo) {};
	/**
	 * @description Sets the parameter of the activation signal for the menu item with the specified identifier.
	 * @returns Boolean
	 * @param {Number} id - The identifier of the menu item to set.
	 * @param {Number} param - The value to set.
	 */
	setItemParameter(id, param) {};
	/**
	 * @description Sets the visible state of the menu item with the specified identifier.
	 * @param {Number} id - The identifier of the menu item to set.
	 * @param {Boolean} yesNo - If true, the item is made visible.
	 */
	setItemVisible(id, yesNo) {};
	/**
	 * @description Sets the pixmap of the menu item with the specified identifier.
	 * @since 4.15.0.16
	 * @param {Number} id - The identifier of the menu item to change.
	 * @param {Pixmap} pixmap - The pixmap to set.
	 * @attention If the item has text assigned, the text remains unchanged.
	 */
	setPixmap(id, pixmap) {};
	/**
	 * @description Sets the text of the menu item with the specified identifier.
	 * @since 4.15.0.16
	 * @param {Number} id - The identifier of the menu item to change.
	 * @param {String} text - The text to set.
	 * @attention If the item has a pixmap assigned, the pixmap remains unchanged.
	 */
	setText(id, text) {};
	/**
	 * @description Sets the "What's This" help text for the menu item with the specified identifier.
	 * @param {String} id - The identifier of the menu item to set the "What's This" help text for.
	 * @param {String} text - The text to set.
	 */
	setWhatsThis(id, text) {};
	/**
	 * @returns String The text of the menu item with the specified identifier (if any), otherwise an empty string.
	 * @param {Number} id - The identifier of the menu item to get the text of.
	 */
	text(id) {};
	/**
	 * @returns String The "What's This" help text for the item with the specified identifier (if any), otherwise an empty string.
	 * @param {Number} id - The identifier of the menu item to get the "What's This" help text for.
	 */
	whatsThis(id) {};
	/**
	 * @description Deprecated
	 * @returns Number
	 */
	insertTearOffHandle() {};
	/**
	 * @description Deprecated
	 * @returns Number
	 */
	insertItem(text, id = -1, index = -1) {};
	/**
	 * @description Deprecated
	 * @returns Number
	 */
	insertItem(pixmap, id = -1, index = -1) {};
	/**
	 * @description Deprecated
	 * @returns Number
	 */
	insertItem(text, popup, id = -1, index = -1) {};
	/**
	 * @description Deprecated
	 * @returns Number
	 */
	insertItem(pixmap, popup, id = -1, index = -1) {};
	/**
	 * @description Deprecated
	 */
	changeItem(id, text) {};
	/**
	 * @description Deprecated
	 */
	changeItem(id, pixmap) {};
	/**
	 * @description Deprecated
	 */
	updateItem(id) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description This signal is emitted just before the popup menu is hidden after it has been displayed.
	 * @signature `"aboutToHide()"`
	 * @event
	 */
	aboutToHide() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description This signal is emitted just before the popup menu is displayed. You can connect it to any slot that sets up the menu contents (e.g. to ensure that the right items are enabled).
	 * @signature `"aboutToShow()"`
	 * @event
	 */
	aboutToShow() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description This signal is emitted when a menu item is selected.
	 * @signature `"activated(int)"`
	 * @event
	 */
	activated(id) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when a menu item is highlighted.
	 * @signature `"highlighted(int)"`
	 * @event
	 */
	highlighted(id) {};

}
/**
 * An asset save filter for saving a Pose Preset in the DSON format.
 * See Also:
 */
class DzPoseAssetFilter extends DzAssetFileOutFilter {
	/**
	 * @description TODO:
	 * Add description.
	 */
	constructor() {};

}
/**
 * See Also:
 */
class DzPresentation extends DzBase {
	/**
	 * @description Default Constructor.
	 */
	constructor() {};
	/**
	 * @description The auto fit base that this asset is.
	 * @type {String}
	 */
	autoFitBase;
	/**
	 * @description A color hint to be used in conjunction with colorB to define a 2 color linear gradient used by UI elements displayed to the user.
	 * @type {Color}
	 */
	colorA;
	/**
	 * @description A color hint to be used in conjunction with colorA to define a 2 color linear gradient used by UI elements displayed to the user.
	 * @type {Color}
	 */
	colorB;
	/**
	 * @description A human readable, end-user facing, description of the item that the presentation is attached to.
	 * @type {String}
	 */
	description;
	/**
	 * @description The other bases this item may be treated like.
	 * @type {Array}
	 */
	extendedBases;
	/**
	 * @description The relative path (uri) corresponding to a large image. For a DzFloatProperty that applies a morph_dz, this image is used for display as a "Card" (vertical slider). If iconSmall is not defined, the path defined here is also used (scaled) for the horizontal slider.
	 * @type {String}
	 */
	iconLarge;
	/**
	 * @description The relative path (uri) corresponding to a small image. For a DzFloatProperty that applies a morph_dz, this image is used for display in a horizontal slider. If this is not defined and a value is defined for iconLarge, its value will be used and the image will be scaled down.
	 * @type {String}
	 */
	iconSmall;
	/**
	 * @description A human readable label for the presentation.
	 * @type {String}
	 */
	label;
	/**
	 * @description The preferred base this item tries to follow. If this is does not match the autoFitBase of the conform target, auto-fit will try to convert the content.
	 * @type {String}
	 */
	preferredBase;
	/**
	 * @description A hint to the intended purpose of what the presentation is attached to. For a DzFloatProperty that applies a morph_dz intended to adjust the shape of the underlying structure of an object (e.g. "Nose Height" or "Eye Width"), this would be "Modifier/Shape". For a DzFloatProperty intended to be used for posing a DzBone of a figure, or to adjust a morph_dz that makes non-structural this would be "Modifier/Pose".
	 * @type {String}
	 */
	type;

}
/**
 * See Also:
 */
class DzProcess extends QObject {
	/**
	 * @description Default Constructor.
	 * @attention This does NOT start the process.
	 */
	constructor() {};
	/**
	 * @description Creates a DzProcess object specifying the program and any arguments.
	 * @param {Array} args - The first element is the program to execute, the rest are the command line arguments.
	 * @attention This does NOT start the process.
	 */
	constructor(args) {};
	/**
	 * @description Creates a DzProcess object specifying only the program, without any arguments.
	 * @param {String} arg0 - The command to be executed.
	 * @attention This does NOT start the process.
	 */
	constructor(arg0) {};
	/**
	 * @description Holds an Array of strings. The first being the program to execute, the rest being the command line arguments.
	 * @type {Array}
	 */
	arguments;
	/**
	 * @description Holds the communication for the process.
	 * @type {Communication}
	 */
	communication;
	/**
	 * @description Holds the exit status of the program when it has finished. 0 if the process is still running. (Read Only)
	 * @type {Number}
	 */
	exitStatus;
	/**
	 * @description Holds whether or not the process has exited normally. (Read Only)
	 * @type {Boolean}
	 */
	normalExit;
	/**
	 * @description Holds whether or not the process is currently running. (Read Only)
	 * @type {Boolean}
	 */
	running;
	/**
	 * @description Holds the working directory for the process.
	 * @type {String}
	 */
	workingDirectory;
	/**
	 * @description ENUM: Data can be written to the process' standard input.
	 */
	Stdin;
	/**
	 * @description ENUM: Data can be read from the process' standard output.
	 */
	Stdout;
	/**
	 * @description ENUM: Data can be read from the process' standard error.
	 */
	Stderr;
	/**
	 * @description ENUM: Both, the process' standard error and its standard output are written to its standard output (which means nothing is sent to its standard error).
	 */
	DupStderr;
	/**
	 * @returns Boolean true if it is possible to read an entire line of text from standard error, otherwise false.
	 */
	canReadLineStderr() {};
	/**
	 * @returns Boolean true if it is possible to read an entire line of text from standard output, otherwise false.
	 */
	canReadLineStdout() {};
	/**
	 * @description Closes the process' standard input and deletes any pending data that has not been written to standard input.
	 */
	closeStdin() {};
	/**
	 * @description Terminates the process.
	 * @attention This is not a safe way to end a process, as the process will not be able to perform any cleanup. tryTerminate() is safer, but process' can ignore it.
	 */
	kill() {};
	/**
	 * @description Attempts to run the process, writing buffer to the process' standard input. Standard input is closed if all of the data in buffer is written to it.
	 * @returns Boolean true if the process was able to start, otherwise false.
	 * @param {String} buffer - The buffer to write to standard input with writeToStdin() using the local 8-bit representation of the string.
	 * @param {Array} env - The environment settings (if any), to set. If non-empty, values are expected to be in the form "NAME=VALUE", and the process is started with these environment settings. If empty (default), the process is started with the same environment settings as the starting process.
	 */
	launch(buffer, env = []) {};
	/**
	 * @returns String A line of text from standard error, minus any trailing newline or carriage return characters if canReadLineStderr() is true, otherwise an empty string.
	 */
	readLineStderr() {};
	/**
	 * @returns String A line of text from standard output, minus any trailing newline or carriage return characters if canReadLineStdout() is true, otherwise an empty string.
	 */
	readLineStdout() {};
	/**
	 * @description Reads the data that the process has written to standard error. When new data is written, the readyReadStderr() signal is emitted.
	 * @returns String The data written to standard error, or an empty string if there is no such data.
	 * @attention This method does not wait for there to be something to read.
	 */
	readStderr() {};
	/**
	 * @description Reads the data that the process has written to standard output. When new data is written, the readyReadStdout() signal is emitted.
	 * @returns String The data written to standard output, or an empty string if there is no such data.
	 * @attention This method does not wait for there to be something to read.
	 */
	readStdout() {};
	/**
	 * @description Attempts to run the process for the program and arguments specified with the arguments property or as specified in the constructor.
	 * @returns Boolean true if the process was able to start, otherwise false.
	 * @param {Array} env - The environment settings (if any), to set. If non-empty, values are expected to be in the form "NAME=VALUE", and the process is started with these environment settings. If empty (default), the process is started with the same environment settings as the starting process.
	 */
	start(env = []) {};
	/**
	 * @description Attempts to terminate the process.
	 * @attention Process' can ignore this, if they choose to. If you want to be certain that the process is terminated, use kill() instead.
	 */
	tryTerminate() {};
	/**
	 * @description Writes buffer to standard input. The process may, or may not, read the data. The wroteToStdin() signal is emitted once all data in buffer has been written to the process.
	 * @param {String} buffer - The buffer to write to.
	 */
	writeToStdin(buffer) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the process is started with launch(). If starting the process is successful, this signal is emitted after the data passed in has been written to standard input. If starting the process fails, this signal is emitted immediately.
	 * @signature `"launchFinished()"`
	 * @event
	 */
	launchFinished() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the process has exited.
	 * @signature `"processExited()"`
	 * @event
	 */
	processExited() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the process has written data to standard error.
	 * @signature `"readyReadStderr()"`
	 * @event
	 */
	readyReadStderr() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the process has written data to standard output.
	 * @signature `"readyReadStdout()"`
	 * @event
	 */
	readyReadStdout() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted if the data sent to standard input (via writeToStdin()) was actually written to the process.
	 * @signature `"wroteToStdin()"`
	 * @event
	 */
	wroteToStdin() {};

}
/**
 * The "Product" container type represents a collection of assets (and supporting files/metadata) that are presented as a single entity to the end-user. Each product is assigned a Globally Unique Identifier (GUID) that is used to identify that entity within the content ecosystem. Once a GUID has been assigned to a product (at creation), it does not (and should not) change.
 * While nearly all of the information that defines a product can be replicated into another, for logistical reasons a GUID can only be associated with one "Store" (source) at any single moment in its lifetime. This means that if more than one content package containing metadata that defines a given GUID is installed by an end-user, the last package installed will define the product in the database.
 * By default, all newly created assets are assigned to a "LOCAL USER" product. This product is represented by a GUID consisting entirely of zeros; i.e., "00000000-0000-0000-0000-000000000000"
 * The "LOCAL USER" product is associated with the "LOCAL USER" `store` (source); this cannot be modified.
 * See Also:
 */
class DzProductAssetContainer extends DzRefCountedItem, DzAbstractAssetContainer {
	/**
	 * @description Holds the list of artist names associated with this product.
	 * @type {Array}
	 */
	artistNames;
	/**
	 * @description Holds the date this product was installed. Can be set (since 4.11.0.193) if isLocalUserStore is true (except where isLocalUser is true).
	 * @type {Date}
	 */
	dateInstalled;
	/**
	 * @description Holds the date this product was last updated. Can be set (since 4.11.0.193) if isLocalUserStore is true (except where isLocalUser is true).
	 * @type {Date}
	 */
	dateLastUpdated;
	/**
	 * @description Holds the date this product was purchased. Can be set (since 4.11.0.193) if isLocalUserStore is true (except where isLocalUser is true).
	 * @type {Date}
	 */
	datePurchased;
	/**
	 * @description Holds the date this product was released. Can be set (since 4.11.0.193) if isLocalUserStore is true (except where isLocalUser is true).
	 * @type {Date}
	 */
	dateReleased;
	/**
	 * @description Holds the vendor description of this product.
	 * @type {String}
	 */
	description;
	/**
	 * @description Holds the group identifier for the product. 0 = default, < 0 = app defined, > 0 = user defined.
	 * @type {Number}
	 */
	groupId;
	/**
	 * @description Holds the Globally Unique Identifier (GUID) associated with this product. (Read Only)
	 * @type {String}
	 */
	guid;
	/**
	 * @description Holds whether this product has metadata provided by the cloud. (Read Only)
	 * @type {Boolean}
	 */
	hasCloudMetadata;
	/**
	 * @description Holds whether this product should be hidden in product views.
	 * @type {Boolean}
	 */
	hidden;
	/**
	 * @description Holds the path of the icon for this product. (Read Only)
	 * @type {String}
	 */
	iconPath;
	/**
	 * @description Holds whether this product can be installed from the cloud. (Read Only)
	 * @type {Boolean}
	 */
	isCloudInstallable;
	/**
	 * @description Holds whether this product is installed from the cloud. (Read Only)
	 * @type {Boolean}
	 */
	isCloudInstalled;
	/**
	 * @description Holds whether a cloud operation is currently occurring for this product. (Read Only)
	 * @type {Boolean}
	 */
	isCloudOperationInProgress;
	/**
	 * @description Holds whether this product is managed by the cloud. (Read Only)
	 * @type {Boolean}
	 */
	isCloudOwned;
	/**
	 * @description Holds whether this product is currently downloading from the cloud. (Read Only)
	 * @type {Boolean}
	 */
	isDownloadingFromCloud;
	/**
	 * @description Holds whether this product is installed. (Read Only)
	 * @type {Boolean}
	 */
	isInstalled;
	/**
	 * @description Holds whether this product is the special product that holds locally created assets. (Read Only)
	 * @type {Boolean}
	 */
	isLocalUser;
	/**
	 * @description Holds whether this product's store is the special store for locally created products. (Read Only)
	 * @type {Boolean}
	 */
	isLocalUserStore;
	/**
	 * @description Holds whether the metadata for this product is valid. (Read Only)
	 * @type {Boolean}
	 */
	isMetadataValid;
	/**
	 * @description Holds whether this product is owned by a vendor or by the user. (Read Only)
	 * @type {Boolean}
	 */
	isVendor;
	/**
	 * @description Holds whether this product needs to be installed from the cloud. (Read Only)
	 * @type {Boolean}
	 */
	needsCloudInstall;
	/**
	 * @description Holds whether this product needs to be updated from the cloud. (Read Only)
	 * @type {Boolean}
	 */
	needsCloudUpdate;
	/**
	 * @description Holds the name of the store for this product. (Read Only)
	 * @type {String}
	 */
	store;
	/**
	 * @description Holds the title/name of this product.
	 * @type {String}
	 */
	title;
	/**
	 * @description Holds the token (i.e. SKU) for this product. (Read Only)
	 * @type {String}
	 */
	token;
	/**
	 * @description ENUM: Metadata that is created, owned and maintained by the user.
	 */
	User;
	/**
	 * @description ENUM: Metadata that is created, owned and maintained by the vendor (originating source).
	 */
	Vendor;
	/**
	 * @description ENUM: Metadata that is created, owned and maintained by the vendor (originating source) and/or the user.
	 */
	UserAndVendor;
	/**
	 * @returns Size The default store icon size.
	 * @since 4.9.3.110
	 */
	static getDefaultStoreIconSize() {};
	/**
	 * @description Cancels any pending cloud operation on the product, if any.
	 * @since 4.9.0.21
	 */
	cancelFromCloud() {};
	/**
	 * @description Sets the product as belonging to the default group identifier; 0.
	 * @since 4.9.0.11
	 */
	clearGroup() {};
	/**
	 * @returns Array A list of the category paths associated with this product.
	 * @since 4.9.0.54
	 * @param {ProductMetadataType} metaType - The type of categories to get.
	 * @param {Boolean} installedAssets - If true, only the categories of installed assets are included in the list, otherwise the categories of all assets regardless of installed state are included.
	 */
	getCategories(metaType = UserAndVendor, installedAssets = true) {};
	/**
	 * @returns Size The current icon size.
	 */
	getIconSize() {};
	/**
	 * @returns Image The image that is used to draw the icon for this product.
	 * @since 4.11.0.193
	 */
	getImage() {};
	/**
	 * @returns String The metadata for this product, in an XML string.
	 * @since 4.9.0.11
	 * @param {ProductMetadataType} metaType - The type of metadata to get.
	 */
	getMetadataXML(metaType = UserAndVendor) {};
	/**
	 * @returns String The relative file path of the XML metadata file for this product.
	 * @since 4.9.0.2
	 * @param {Boolean} userData - If true, the basename of the file will reflect the user rather than the store.
	 */
	getMetadataXMLPath(userData = false) {};
	/**
	 * @returns String The relative path that this product installs too.
	 * @since 4.12.1.100
	 */
	getRelativeInstallPath() {};
	/**
	 * @returns Array The list of files in this product that are not user facing.
	 * @since 4.9.0.2
	 * @param {Boolean} forceRefresh - If true, ignores any previously cached list of support files and causes the database to be queried explicitly.
	 */
	getSupportFiles(forceRefresh = false) {};
	/**
	 * @returns String The URL associated with this product.
	 */
	getURL() {};
	/**
	 * @description Installs a product from the cloud if it is not currently installed. The user will be prompted to authenticate if necessary.
	 * @since 4.9.0.2
	 */
	installFromCloud() {};
	/**
	 * @returns Boolean true if the product is belongs to group, otherwise false.
	 * @since 4.9.0.11
	 * @attention 0 = default, < 0 = app defined, > 0 = user defined
	 */
	isGroup(group) {};
	/**
	 * @description Loads the default icon for this product.
	 * @returns Boolean true if the icon was loaded, otherwise false.
	 */
	loadDefaultIcon() {};
	/**
	 * @description Causes the product image to be loaded.
	 * @returns Boolean true if the product image is loaded, otherwise false.
	 */
	loadProductImage() {};
	/**
	 * @description Pushes the metadata information into the database.
	 * @returns Boolean true if the metadata was successfully pushed to the database, otherwise false.
	 * @since 4.9.0.2
	 * @attention This method retrieves data from the database immediately prior to updating the title, artist names, and description using locally set values and pushing the data back into the database.
	 */
	pushMetadata() {};
	/**
	 * @description Sets the icon size for this product container.
	 * @param {Size} size - The new icon size.
	 */
	setIconSize(size) {};
	/**
	 * @description Sets the image that will be used to draw the icon for this product.
	 * @since 4.11.0.193
	 * @param {Image} img - The new image for this product.
	 */
	setImage(img) {};
	/**
	 * @description Sets the URL for this product.
	 * @param {String} url - The URL to use for this product.
	 */
	setURL(url) {};
	/**
	 * @description Uninstalls the product if it is currently installed.
	 * @since 4.9.0.2
	 */
	uninstall() {};
	/**
	 * @description Uninstalls the product if it is currently installed.
	 * @since 4.9.0.2
	 */
	uninstallFromCloud() {};
	/**
	 * @description Updates the product if no other operations are currently being performed on it. The user will be prompted to authenticate if necessary.
	 * @since 4.9.0.2
	 */
	updateFromCloud() {};
	/**
	 * @description Updates the metadata for this product. The user will be prompted to authenticate if necessary.
	 * @since 4.9.0.32
	 * @param {Boolean} force - If true, any cached data will be discarded and force a connection to be made.
	 */
	updateMetaDataFromCloud(force = false) {};

}
/**
 * This container type does not directly support assets. The primary purpose of this container type is to collect results returned by a database query for products.
 * See Also:
 */
class DzProductHolderContainer extends DzTopLevelAssetContainer, DzRefCountedItem {
	/**
	 * @description Attempts to insert the given container as a child to this container.
	 * @returns Boolean true if the child was successfully added, otherwise false.
	 * @param {DzProductAssetContainer} container - The container to insert as a child.
	 */
	insertChildProductContainer(container) {};

}
/**
 * An asset save filter for saving a Properties Preset in the DSON format.
 * See Also:
 */
class DzPropertiesAssetFilter extends DzAssetFileOutFilter {
	/**
	 * @description TODO:
	 * Add description.
	 */
	constructor() {};

}
/**
 * This is the base class for all properties that are owned or controlled by Elements. Properties can be keyable or not.
 * See Also:
 */
class DzProperty extends DzBase {
	/**
	 * @description Holds the author of the file for this property. (Read Only)
	 * @type {DzAuthor}
	 */
	assetAuthor;
	/**
	 * @description Holds the revision version of the asset file for this property. (Read Only)
	 * @type {DzVersion}
	 */
	assetFileRevision;
	/**
	 * @description Holds the asset id for this property.
	 * @type {String}
	 */
	assetId;
	/**
	 * @description Holds the modified date of the asset file for this property. (Read Only)
	 * @type {Date}
	 */
	assetModifiedDate;
	/**
	 * @description Holds whether or not the asset for this property needs to be saved. (Read Only)
	 * @type {Boolean}
	 */
	assetNeedSave;
	/**
	 * @description Holds the URI of the asset source for this property; only valid when the asset is in an embedded state - i.e. modified. (Read Only)
	 * @type {DzUri}
	 */
	assetSource;
	/**
	 * @description Holds the asset URI for this property. (Read Only)
	 * @type {DzUri}
	 */
	assetUri;
	/**
	 * @description Holds whether or not the current value changed emits on scene clear.
	 * @type {Boolean}
	 */
	emitValueChangedOnSceneClear;
	/**
	 * @description ENUM: Linear interpolation between key values.
	 */
	InterpLinear;
	/**
	 * @description ENUM: Constant interpolation between key values.
	 */
	InterpConstant;
	/**
	 * @description ENUM: TCB (Kochanek-Bartels) Spline interpolation between key values.
	 */
	InterpTCB;
	/**
	 * @description ENUM: Hermite Spline interpolation between key values.
	 */
	InterpHermite;
	/**
	 * @description ENUM: Best for saving/loading; includes raw value; sets without adjusting.
	 */
	Standard;
	/**
	 * @description ENUM: Include the default value.
	 */
	IncludeDefault;
	/**
	 * @description ENUM: Includes the value instead of the raw value.
	 */
	CurrentValue;
	/**
	 * @description ENUM: Best for setting.
	 */
	AdjustValue;
	/**
	 * @description ENUM: Excludes images.
	 */
	SkipImages;
	/**
	 * @description Adds a value to a settings.
	 * @since 4.7.1.72
	 * @param {DzTime} tm - The scene time to add the value for.
	 * @param {DzSettings} settings - The settings to add the data to.
	 * @param {PropertyValueSettingsFlags} flags - A bitwise OR of the flags for controlling the operation.
	 */
	addValueToSettings(tm, settings, flags = Standard) {};
	/**
	 * @description Adds a value to a settings.
	 * @since 4.7.1.72
	 * @param {DzSettings} settings - The settings to add the data to.
	 * @param {PropertyValueSettingsFlags} flags - A bitwise OR of the flags for controlling the operation.
	 */
	addValueToSettings(settings, flags = Standard) {};
	/**
	 * @description Creates an undo item for the property.
	 */
	beginEdit() {};
	/**
	 * @returns DzUri A name path URI repersenting this property, relative to the root node.
	 * @since 4.9.2.20
	 * @param {DzNode} rootNode - The node the path should be relative too. If null (default) the skeleton will be used when parented to a skeleton, otherwise the property's own node will be used if it is not part of a skeleton hierarchy.
	 */
	buildNameUriToRoot(rootNode = null) {};
	/**
	 * @returns Boolean true if it is legal to animate this property, otherwise false.
	 */
	canAnimate() {};
	/**
	 * @returns Boolean true if the property can automatically follow a property on a following figure, otherwise false.
	 */
	canAutoFollow() {};
	/**
	 * @description Finish the edit operation but cancel any changes.
	 */
	cancelEdit() {};
	/**
	 * @description Clears the region associated with this property.
	 * @param {Boolean} preservePath - If true (default), this property's path will not be affected, otherwise the region's path will be removed from this property's path.
	 */
	clearRegion(preservePath = true) {};
	/**
	 * @description Copies the value(s) of the given property into this property.
	 */
	copyFrom(prop) {};
	/**
	 * @description Copies the value(s) of the property to a 'clipboard' so that they may be saved and applied (pasted) to another property; or to the same property.
	 * @returns DzPropertyclipboard The 'clipboard' which holds a copy of the current property's value(s). These values are a snapshot of the current state of the property, and will remain unchanged even if the property is changed or deleted.
	 * @attention The caller is responsible for deleting this object.
	 */
	copyToClipboard() {};
	/**
	 * @description Creates a new property that forwards all edits of its values to the property it is an alias of.
	 * @returns The created property alias.
	 */
	createAlias() {};
	/**
	 * @returns Boolean true if the current value of the property is the same as the default value, otherwise false.
	 */
	currentValueIsDefaultValue() {};
	/**
	 * @returns Boolean true if the current value of the property is the same as the value in the file definition, otherwise false.
	 */
	currentValueIsDefinitionValue() {};
	/**
	 * @description Deletes all keys on this property.
	 */
	deleteAllKeys() {};
	/**
	 * @description Clears key values within the given range, including the endpoints.
	 * @returns Number The number of keys actually deleted.
	 */
	deleteKeys(interval) {};
	/**
	 * @description Deletes all keys within a specified range.
	 * @returns Number The number of keys deleted.
	 * @param {Number} start - The key index to start from.
	 * @param {Number} end - The key index to end at.
	 * @attention You are responsible to ensure the key indices are within the valid range.
	 */
	deleteKeys(start, end) {};
	/**
	 * @description Deletes all selected keys.
	 * @returns Number The number of keys actually removed.
	 */
	deleteSelectedKeys() {};
	/**
	 * @returns Number The index of the key if there is a key at the given time, otherwise -1.
	 * @since 4.11.0.225
	 */
	findKeyIndex(t) {};
	/**
	 * @description Searches node for a property that matches the name of this property.
	 * @param {DzNode} node - The node to search.
	 */
	findMatchingProperty(node) {};
	/**
	 * @description Finalizes the undo item and pushes it on to the undo stack.
	 */
	finishEdit() {};
	/**
	 * @returns The alias to this property at index (if valid), otherwise NULL.
	 * @param {Number} index - The index of the alias to this property to get.
	 */
	getAlias(index) {};
	/**
	 * @returns The property that this property is an alias of, or NULL if none (default).
	 */
	getAliasTarget() {};
	/**
	 * @description Populates the given settings object with the attributes of this property.
	 */
	getAttributes(settings) {};
	/**
	 * @returns DzUri The auto-follow target URI for this property.
	 * @since 4.9.2.19
	 */
	getAutoFollowTargetUri() {};
	/**
	 * @returns DzController The i'th controller on this property.
	 * @param {Number} idx - The index of the controller on this property to get.
	 */
	getController(idx) {};
	/**
	 * @returns Array A list of the controllers on this property.
	 */
	getControllerList() {};
	/**
	 * @returns DzPropertyGroup The property group that this property belongs to (if any), otherwise NULL.
	 */
	getGroup() {};
	/**
	 * @returns Number The index of controllers that are slaved to this property (if any), otherwise -1.
	 */
	getIndexOfSlaveControllers(cntrl) {};
	/**
	 * @returns InterpolationType The type of interpolation performed for the i'th key in the property.
	 * @since 4.11.0.210
	 * @param {Number} i - The index of the key to get the interpolation values for.
	 */
	getKeyInterpolationType(i) {};
	/**
	 * @returns Array A list of 4 values for the interpolation type performed for the i'th key in the property.
	 * @since 4.11.0.210
	 * @param {Number} i - The index of the key to get the interpolation values for.
	 * @attention If getKeyInterpolationType() == InterpTCB, the return values will be InterpTCB, the T value, the C value, and the B value. If getKeyInterpolationType() == InterpHermite, the return values will be InterpHermite, the starting slope value, the ending slope value, and 0.0.
	 */
	getKeyInterpolationTypeValues(i) {};
	/**
	 * @returns DzTimeRange The total range of keys on this property.
	 */
	getKeyRange() {};
	/**
	 * @returns DzTime The time of the i'th key within the current key range.
	 * @param {Number} i - The index of the key time within the current key range.
	 */
	getKeyTime(i) {};
	/**
	 * @returns String The user-defined label for this property.
	 */
	getLabel() {};
	/**
	 * @returns Number The number of aliases to this property that exist.
	 */
	getNumAliases() {};
	/**
	 * @returns Number The number of controllers for this property
	 */
	getNumControllers() {};
	/**
	 * @returns Number The total number of keys on this property.
	 */
	getNumKeys() {};
	/**
	 * @returns Number The number of keys that exist within the given range, including endpoints.
	 * @param {DzTimeRange} range - The range to get the number of keys in.
	 */
	getNumKeys(range) {};
	/**
	 * @returns Number The number of currently selected keys on this property.
	 */
	getNumSelectedKeys() {};
	/**
	 * @returns Number The number of controllers that are slaved to this property.
	 */
	getNumSlaveControllers() {};
	/**
	 * @returns DzElement The current owner of this property.
	 */
	getOwner() {};
	/**
	 * @returns String The slash ('/') delimited hierarchical path of the group this property is assigned to.
	 */
	getPath() {};
	/**
	 * @returns DzPresentation The presentation for this property (if any), otherwise NULL.
	 */
	getPresentation() {};
	/**
	 * @returns DzGeometryregion The geometry region for this property (if any), otherwise NULL.
	 */
	getRegion() {};
	/**
	 * @returns DzTimeRange A range that encompasses all currently selected keys on this property.
	 */
	getSelectedKeyRange() {};
	/**
	 * @returns DzController The i'th controller that is slaved to this property.
	 */
	getSlaveController(idx) {};
	/**
	 * @returns Array A list of the controllers that are slaved to this property.
	 */
	getSlaveControllerList() {};
	/**
	 * @returns String The classname of the widget to use for displaying this property to the user.
	 * @param {Boolean} styled - If true, the returned classname should be the styled version (i.e., DS 4 vs DS 3). If false, the returned classname should be the base version.
	 */
	getWidgetClass(styled = true) {};
	/**
	 * @returns String The name of the styled widget class, otherwise the name of the standard widget class; this will be an empty string if the corresponding value has not been set.
	 * @since 4.6.4.88
	 * @param {Boolean} styled - If true, the return value will be the name of the styled widget class.
	 */
	getWidgetClassOverride(styled = true) {};
	/**
	 * @returns Boolean true if this property has controllers, otherwise false.
	 */
	hasControllers() {};
	/**
	 * @returns Boolean true if this property has key data, otherwise false.
	 */
	hasKeys() {};
	/**
	 * @returns Boolean true if this property has controllers that are slaved to it, otherwise false.
	 */
	hasSlaveControllers() {};
	/**
	 * @returns Boolean true if an override for the widget class has been specified, otherwise false.
	 * @since 4.6.4.88
	 * @param {Boolean} styled - If true, the return value will be based on whether or not an override for the styled widget class has been specified.
	 */
	hasWidgetClassOverride(styled = true) {};
	/**
	 * @returns Boolean true if this property is an alias to another property, otherwise false (default).
	 */
	isAlias() {};
	/**
	 * @returns Boolean true if this property and prop can be combined in the UI, otherwise false.
	 * @param {DzProperty} prop - The property in question.
	 */
	isCombinable(prop) {};
	/**
	 * @returns Boolean true if this property should [temporarily] auto-follow, otherwise false.
	 * @since 4.8.0.23
	 */
	isDynamicallyAutoFollow() {};
	/**
	 * @returns Boolean true if this property should [temporarily] not be shown in the interface, otherwise false.
	 */
	isDynamicallyHidden() {};
	/**
	 * @returns Boolean true if the property is being edited, otherwise false.
	 */
	isEditing() {};
	/**
	 * @returns Boolean true if the property is a favorite, otherwise false.
	 */
	isFavorite() {};
	/**
	 * @returns Boolean true if the property is a global favorite, otherwise false.
	 */
	isGlobalFavorite() {};
	/**
	 * @returns Boolean true if this property should not be shown in the interface, otherwise false.
	 */
	isHidden() {};
	/**
	 * @returns Boolean true if the key at the given index is selected, otherwise false.
	 * @param {Number} i - The index of the key in question.
	 */
	isKeySelected(i) {};
	/**
	 * @returns Boolean true if this property is locked, otherwise false.
	 */
	isLocked() {};
	/**
	 * @returns Boolean true if the property will cause manipulation updates of the object in the viewport (default), otherwise false.
	 */
	isManipulator() {};
	/**
	 * @returns Boolean true if the property is new, otherwise false.
	 */
	isNew() {};
	/**
	 * @returns Boolean true if this property can be retrieved/set as a scalar numeric value, otherwise false.
	 */
	isNumeric() {};
	/**
	 * @returns Boolean true if the property is currently overriding its controllers, otherwise false.
	 */
	isOverridingControllers() {};
	/**
	 * @returns Boolean true if this property is private, otherwise false.
	 */
	isPrivateProperty() {};
	/**
	 * @returns Boolean true if this property is for rigging, otherwise false.
	 */
	isRigProperty() {};
	/**
	 * @returns Boolean true if the property is selected, otherwise false.
	 */
	isSelected() {};
	/**
	 * @returns Boolean true if this property can be deleted by the user, otherwise false.
	 */
	isUserProperty() {};
	/**
	 * @description Locks/Unlocks this property. When locked, a property will not accept new key values or changes to current key values.
	 * @param {Boolean} onOff - If true, the property will be locked. If false, the property will be unlocked.
	 */
	lock(onOff) {};
	/**
	 * @description Marks the asset as being modified.
	 * @returns Boolean true if the asset was successfully marked as being modified, otherwise false.
	 * @param newUri - The URI for the asset.
	 */
	modifyAsset() {};
	/**
	 * @description Marks the asset as being modified.
	 * @returns Boolean true if the asset was successfully marked as being modified, otherwise false.
	 * @param {DzUri} newUri - The URI for the asset.
	 */
	modifyAsset(newUri) {};
	/**
	 * @description Moves the controller at curIdx to newIdx
	 * @returns Boolean true if the move was successful, otherwise false.
	 * @param {Number} curIdx - The index of the controller to move. If < 0 or >= DzProperty.getNumControllers() this method will return false.
	 * @param {Number} newIdx - The index to move the controller to. If < 0 the controller will be moved to the beginning of the list. If >= DzProperty.getNumControllers(), the controller will be moved to the end of the list.
	 */
	moveControllerToIndex(curIdx, newIdx) {};
	/**
	 * @description Moves the controller ctrl to location newIdx
	 * @returns Boolean true if the move was successful, otherwise false.
	 * @param {DzController} ctrl - The controller to remove.
	 * @param {Number} newIdx - The index to move the controller to. If < 0 the controller will be moved to the beginning of the list. If >= DzProperty.getNumControllers(), the controller will be moved to the end of the list.
	 */
	moveControllerToIndex(ctrl, newIdx) {};
	/**
	 * @description Creates a copy of this property. The property will not have controllers, an owner, be in a region, or be linked.
	 * @returns A duplicate of this property (if successful), otherwise null.
	 */
	propertyDuplicate() {};
	/**
	 * @returns Boolean true if the raw value of the property is the same as the value in the file definition, otherwise false.
	 * @since 4.9.2.1
	 */
	rawValueIsDefinitionValue() {};
	/**
	 * @description Removes all controllers from this property.
	 */
	removeAllControllers() {};
	/**
	 * @description Removes the given controller from this property.
	 * @param {DzController} ctrl - The controller to remove.
	 */
	removeController(ctrl) {};
	/**
	 * @description Removes the controller at the given index from this property.
	 * @param {Number} idx - The index of the controller to remove.
	 */
	removeController(idx) {};
	/**
	 * @description Removes the controller that references the given property.
	 * @param {DzProperty} prop - The property to remove the controller for.
	 */
	removeController(prop) {};
	/**
	 * @description Select or deselect all keys.
	 * @returns Number The number of keys whose state was changed.
	 * @param {Boolean} onOff - If true, the keys will be selected. If false, the keys will be deselected.
	 */
	selectAllKeys(onOff = true) {};
	/**
	 * @description Selects/deselects the i'th key.
	 * @param {Number} i - The index of the key to select/deselect.
	 * @param {Boolean} onOff - If true, the key will be selected. If false, the key will be deselected.
	 */
	selectKey(i, onOff = true) {};
	/**
	 * @description Sets the selection state of any keys in the given range.
	 * @returns Number The number of keys whose selection state changed.
	 * @param {DzTimeRange} range - The range of keys to select/deselect.
	 * @param {Boolean} onOff - If true, the keys will be selected. If false, the keys will be deselected.
	 */
	selectKeys(range, onOff) {};
	/**
	 * @description Sets attributes for this property. "UserProperty" and "RigProperty" attributes are not copied from the settings unless a bool setting of "ForceSetUser" and/or "ForceSetRig" is set on the property settings object respectively.
	 * @param {DzPropertySettings} settings - The settings to use to set attributes.
	 */
	setAttributes(settings) {};
	/**
	 * @description Sets a path to locate the property on the follow target to follow.
	 * @since 4.9.2.19
	 * @param {DzUri} path - The URI for the property to automatically follow. The node path is assumed to be relative to the target skeleton.
	 */
	setAutoFollowTargetUri(path) {};
	/**
	 * @description Sets whether this property is animatable.
	 * @param {Boolean} yesNo - If true, the property is set to be animatable.
	 * @attention This method should only called to set initial values on a property that has been created using the default constructor.
	 */
	setCanAnimate(yesNo) {};
	/**
	 * @description Sets whether or not the property can automatically follow properties on a following figure.
	 * @returns DzMorph
	 * @param {Boolean} onOff - If true, the property will be considered during auto-follow.
	 * @attention When associated with a figure that is a follow target, this value determines whether or not this property will be projected onto the follower (if this property is the control for an auto-follow modifier, e.g., morph_dz). When associated with a figure that is a follower, this value determines whether or not the name of this property (or the name of a modifier that owns this property) will be used to find a match in the follow target and if found add the found property's value (minus its default value) to this property's value (as possible depending on any constrains/controllers).
	 */
	setCanAutoFollow(onOff) {};
	/**
	 * @description Sets whether or not this property should [temporarily] auto-follow.
	 * @since 4.8.0.23
	 * @param {Boolean} yesNo - If true, the property dynamically auto-follows.
	 * @attention The dynamically auto-follow state is not saved.
	 */
	setDynamicallyAutoFollow(yesNo) {};
	/**
	 * @description Sets whether or not this property should be [temporarily] hidden in the interfacee.
	 * @since 4.8.0.23
	 * @param {Boolean} yesNo - If true, the property is dynamically hidden.
	 * @attention The dynamically hidden state is not saved.
	 */
	setDynamicallyHidden(yesNo) {};
	/**
	 * @description Sets whether or not this property is hidden in the interface.
	 * @param {Boolean} yesNo - If true, the property is hidden.
	 */
	setHidden(yesNo) {};
	/**
	 * @description Sets whether or not the property is a favorite.
	 * @param {Boolean} onOff - If true, the property will be set as a favorite.
	 */
	setIsFavorite(onOff) {};
	/**
	 * @description Sets whether or not the property is a global favorite.
	 * @param {Boolean} onOff - If true, the property will be set as a global favorite.
	 */
	setIsGlobalFavorite(onOff) {};
	/**
	 * @description Sets whether or not the property is one that will cause manipulation updates of the object in the viewport.
	 * @param {Boolean} onOff - If true, the property will be set as a manipulator.
	 */
	setIsManipulator(onOff) {};
	/**
	 * @description Sets whether this property is a rigging property.
	 * @param {Boolean} yesNo - If true, the property is set to be a rigging-property.
	 * @attention This method should only be called to set initial values on a property that has been created using the default constructor.
	 */
	setIsRigProperty(yesNo) {};
	/**
	 * @description Sets whether this property is a user property (i.e., can be deleted by the user).
	 * @param {Boolean} yesNo - If true, the property is set to be a user-property.
	 * @attention This method should only be called to set initial values on a property that has been created using the default constructor.
	 */
	setIsUserProperty(yesNo) {};
	/**
	 * @description Sets the interpolation method for the i'th key.
	 * @since 4.11.0.210
	 * @param {Number} i - The index of the key to change.
	 * @param {InterpolationType} interp - The type of interpolation to perform between this keyframe and the next.
	 * @param {Number} param0 - The 1st parameter for key interpolation; i.e., the T value for TCB interpolation, or the starting slope value for Hermite interpolation.
	 * @param {Number} param1 - The 2nd parameter for key interpolation; i.e., the C value for TCB interpolation, or the ending slope value for Hermite interpolation.
	 * @param {Number} param2 - The 3rd parameter for key interpolation; i.e., the B value for TCB interpolation, 0.0 for Hermite interpolation.
	 */
	setKeyInterpolationType(i, interp, param0, param1, param2) {};
	/**
	 * @description Sets the interpolation method for the i'th key.
	 * @since 4.11.0.210
	 * @param {Number} i - The index of the key to change.
	 * @param {InterpolationType} interp - The type of interpolation to perform between this keyframe and the next.
	 */
	setKeyInterpolationType(i, interp) {};
	/**
	 * @description Sets the label that the user sees in the interface for this property.
	 * @param {String} path - The label to set; should be unique among all the other properties of this property's owner.
	 */
	setLabel(label) {};
	/**
	 * @description Sets whether or not the property is marked new.
	 * @param {Boolean} onOff - If true, this property will be marked new.
	 */
	setNew(onOff) {};
	/**
	 * @description Sets whether or not this property will override its controllers.
	 * @param {Boolean} onOff - If true, this property will override its controllers.
	 */
	setOverrideControllers(onOff) {};
	/**
	 * @description Sets the group that this property belongs to.
	 * @param {String} path - The slash ('/') delimited hierarchical path of the group to assign this property to.
	 */
	setPath(path) {};
	/**
	 * @param {DzPresentation} pres - The presentation to set on this property.
	 */
	setPresentation(pres) {};
	/**
	 * @returns DzGeometryregion
	 * @param {geometryregion_dz} reg - The geometry region to set.
	 */
	setRegion(reg) {};
	/**
	 * @description Sets whether or not the property is selected.
	 * @param {Boolean} onOff - If true, the property will be set as selected.
	 */
	setSelected(onOff) {};
	/**
	 * @description Sets the value using settings.
	 * @since 4.7.1.72
	 * @param {DzSettings} settings - The settings with the data to set.
	 * @param {PropertyValueSettingsFlags} flags - A bitwise OR of the flags for controlling the operation.
	 */
	setValueFromSettings(settings, flags = Standard) {};
	/**
	 * @description Sets the value using settings.
	 * @since 4.7.1.72
	 * @param {DzTime} tm - The scene time to set the value at.
	 * @param {DzSettings} settings - The settings with the data to set.
	 * @param {PropertyValueSettingsFlags} flags - A bitwise OR of the flags for controlling the operation.
	 */
	setValueFromSettings(tm, settings, flags = Standard) {};
	/**
	 * @description Sets the name of the widget class to override the default widget class for this property.
	 * @returns DzError DZ_NO_ERROR if no error occurs, otherwise an appropriate error code.
	 * @since 4.6.4.88
	 * @param {String} styledWgtClassName - The name of the styled widget class.
	 * @param {String} wgtClassName - The name of the standard widget class.
	 */
	setWidgetClassOverride(styledWgtClassName, wgtClassName) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the alias list for this property has changed.
	 * @signature `"aliasListChanged()"`
	 * @event
	 */
	aliasListChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when this property has been modified.
	 * @signature `"assetModified()"`
	 * @event
	 */
	assetModified() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted after this property has been saved.
	 * @signature `"assetWasSaved()"`
	 * @event
	 */
	assetWasSaved() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the URI for the auto-follow target of this property has changed.
	 * @signature `"autoFollowTargetUriChanged(const DzUri&)"`
	 * @event
	 */
	autoFollowTargetUriChanged(path) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when animation for this property is enabled or disabled.
	 * @signature `"canAnimateChanged(bool)"`
	 * @event
	 */
	canAnimateChanged(enabled) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the state for whether this property can auto-follow changed.
	 * @signature `"canAutoFollowChanged(bool)"`
	 * @event
	 */
	canAutoFollowChanged(canAutoFollow) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the controller list for this property has changed.
	 * @signature `"controllerListChanged()"`
	 * @event
	 */
	controllerListChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the value of this property at the current time has changed. If the current time changes and this property has animation data, this signal is emitted as appropriate. Subclasses of DzProperty should call emitCurrentValueChanged() when the value has changed.
	 * @signature `"currentValueChanged()"`
	 * @event
	 */
	currentValueChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the dynamically auto-follow hidden state of this property is changed.
	 * @signature `"dynamicallyAutoFollowChanged(bool)"`
	 * @event
	 */
	dynamicallyAutoFollowChanged(onOff) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the dynamically hidden state of this property is changed.
	 * @signature `"dynamicallyHiddenChanged(bool)"`
	 * @event
	 */
	dynamicallyHiddenChanged(hidden) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when editing of this property has finished.
	 * @signature `"editFinished()"`
	 * @event
	 */
	editFinished() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the group this property is in changed.
	 * @signature `"groupChanged(DzPropertyGroup*)"`
	 * @event
	 */
	groupChanged(group) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the hidden state of this property is changed.
	 * @signature `"hiddenChanged(bool)"`
	 * @event
	 */
	hiddenChanged(hidden) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when this property is set or unset as a favorite.
	 * @signature `"isFavoriteChanged(bool)"`
	 * @event
	 */
	isFavoriteChanged(onOff) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when this property is set or unset as a global favorite.
	 * @signature `"isGlobalFavoriteChanged(bool)"`
	 * @event
	 */
	isGlobalFavoriteChanged(onOff) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when this property is set or unset as a manipulator.
	 * @signature `"isManipulatorChanged(bool)"`
	 * @event
	 */
	isManipulatorChanged(isManip) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when this property is set or unset as a user property.
	 * @signature `"isUserPropertyChanged(bool)"`
	 * @event
	 */
	isUserPropertyChanged(isUserProp) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the selection state of this property's keys has changed.
	 * @signature `"keySelectionChanged(const DzTimeRange&)"`
	 * @event
	 */
	keySelectionChanged(range) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the label of this property is changed.
	 * @signature `"labelChanged(const QString&)"`
	 * @event
	 */
	labelChanged(newLabel) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the lock state of this property has changed.
	 * @signature `"lockStateChanged()"`
	 * @event
	 */
	lockStateChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the new state of this property has changed.
	 * @signature `"newStateChanged()"`
	 * @event
	 */
	newStateChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the state for whether this property overrides its controllers changed.
	 * @signature `"overridingControllersChanged(bool)"`
	 * @event
	 */
	overridingControllersChanged(overriding) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the presentation icon for this property has changed.
	 * @signature `"presentationIconChanged()"`
	 * @event
	 */
	presentationIconChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when this property is destroyed.
	 * @signature `"propertyDeleted(DzProperty*)"`
	 * @event
	 */
	propertyDeleted(prop) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the region for this property has changed.
	 * @signature `"regionChanged()"`
	 * @event
	 */
	regionChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when this property is removed.
	 * @signature `"removed()"`
	 * @event
	 */
	removed() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when this property is selected or deselected.
	 * @signature `"selectionStateChanged()"`
	 * @event
	 */
	selectionStateChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the slave controller list for this property has changed.
	 * @signature `"slaveControllerListChanged()"`
	 * @event
	 */
	slaveControllerListChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the value of this property is changed.
	 * @signature `"valueChanged(const DzTimeRange&)"`
	 * @event
	 */
	valueChanged(range) {};

}
/**
 * DzPropertyGroup objects are all owned and managed by DzElement objects. Do not create property groups yourself - they are automatically created as needed when you assign individual properties to a group. To iterate through the property groups for an element, use DzElement.getPropertyGroups() to get the property group tree that the element's properties are grouped in.
 * See Also:
 */
class DzPropertyGroup extends DzBase {
	/**
	 * @returns String The name of the default group.
	 * @since 4.7.1.66
	 */
	static getDefaultGroupName() {};
	/**
	 * @returns The child with the given name (if any), otherwise NULL.
	 * @param {String} name - The name of the property group to look for.
	 */
	findChild(name) {};
	/**
	 * @returns DzProperty The property in this group with the given name (if any), otherwise null.
	 * @since 4.7.1.34
	 * @param {String} propName - The name of the property to find.
	 * @param {Boolean} traverse - If true, the siblings of this group will be checked.
	 * @param {Boolean} recurse - If true, the children of this group will be checked.
	 */
	findProperty(propName, traverse = false, recurse = false) {};
	/**
	 * @returns DzProperty The property in this group with the given label (if any), otherwise null.
	 * @since 4.9.3.11
	 * @param {String} propLabel - The label of the property to find.
	 * @param {Boolean} traverse - If true, the siblings of this group will be checked.
	 * @param {Boolean} recurse - If true, the children of this group will be checked.
	 */
	findPropertyByLabel(propLabel, traverse = false, recurse = false) {};
	/**
	 * @returns The sibling with the given name (if any), otherwise NULL.
	 * @param {String} name - The name of the sibling to look for.
	 */
	findSibling(name) {};
	/**
	 * @description Provided for convenience and DAZ Script access.
	 * @returns Array A list of all property group paths begining with this group.
	 */
	getAllPaths() {};
	/**
	 * @returns Array A list of all properties in this group.
	 * @since 4.9.4.101
	 */
	getAllProperties() {};
	/**
	 * @returns Boolean true if the group is collapsed, otherwise false.
	 */
	getCollapsed() {};
	/**
	 * @returns The first child group, if any.
	 */
	getFirstChild() {};
	/**
	 * @returns The next sibling to this group (if any), otherwise NULL.
	 */
	getNextSibling() {};
	/**
	 * @returns Number The number of properties in this group.
	 */
	getNumProperties() {};
	/**
	 * @returns The current parent of this group.
	 */
	getParent() {};
	/**
	 * @returns String The path of this group.
	 */
	getPath() {};
	/**
	 * @returns The previous sibling (if any), otherwise NULL.
	 * @since 4.7.1.66
	 */
	getPreviousSibling() {};
	/**
	 * @returns DzProperty The i'th property in this group.
	 * @param {Number} i - The index of the property to return.
	 */
	getProperty(i) {};
	/**
	 * @returns DzGeometryregion The region associated with this property group (if any), otherwise NULL.
	 */
	getRegion() {};
	/**
	 * @returns DzPropertyGroupTree The property group tree that this group belongs to.
	 */
	getTree() {};
	/**
	 * @returns Number The index of prop in the group, or -1 if prop is not in the group.
	 */
	indexOfProperty(prop) {};
	/**
	 * @returns Boolean true if this group is associated with a geometryregion_dz, otherwise false.
	 */
	isRegion() {};
	/**
	 * @description Moves the specified property to a new position within the group.
	 * @returns Boolean true if the move was successful, otherwise false.
	 * @param {DzProperty} prop - The property to move. This property must be in this group to be successful.
	 * @param {Number} newIndex - The location to move prop to; if not a valid index, prop is moved to the end of the list.
	 */
	movePropertyToIndex(prop, newIndex) {};
	/**
	 * @description Sets whether or not the group is displayed as collapsed in the interface.
	 * @param {Boolean} onOff - If true, the group is collapsed. If false, the group is expanded.
	 */
	setCollapsed(onOff) {};
	/**
	 * @description Sets the label of prop to a unique version of itself.
	 * @param {DzProperty} prop - The property to set the label on.
	 */
	setUniquePropertyLabel(prop) {};
	/**
	 * @description Alpha-numerically sorts the property groups, and the properties in them.
	 */
	sort() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when a child has been added to the group.
	 * @signature `"addedChild(DzPropertyGroup*)"`
	 * @event
	 */
	addedChild(newChild) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the child list of the group has changed.
	 * @signature `"childListChanged()"`
	 * @event
	 */
	childListChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the parent of the group has changed.
	 * @signature `"parentChanged(DzPropertyGroup*)"`
	 * @event
	 */
	parentChanged(newParent) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the visibility of a property in the group has changed.
	 * @signature `"propertyVisiblityChanged(DzPropertyGroup*,DzProperty*)"`
	 * @event
	 */
	propertyVisiblityChanged(grp, prop) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when a child has been removed from the group.
	 * @signature `"removedChild(DzPropertyGroup*)"`
	 * @event
	 */
	removedChild(child) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the tree has changed.
	 * @signature `"treeChanged()"`
	 * @event
	 */
	treeChanged() {};

}
/**
 * See Also:
 */
class DzPropertyGroupTree extends DzBase {
	/**
	 * @returns DzPropertyGroup The child with the given path (if any), otherwise NULL.
	 * @param {String} name - The name of the property group to look for.
	 */
	findChild(name) {};
	/**
	 * @description Attempts to find a property with a given name.
	 * @returns DzProperty The found property (if any), otherwise NULL.
	 * @since 4.7.1.43
	 * @param {String} name - The name of the property to find.
	 */
	findProperty(name) {};
	/**
	 * @description Attempts to find a property with a given label.
	 * @returns DzProperty The found property (if any), otherwise NULL.
	 * @since 4.11.0.166
	 * @param {String} label - The label of the property to find.
	 */
	findPropertyByLabel(label) {};
	/**
	 * @returns Array A list of all property group paths in this tree.
	 */
	getAllPaths() {};
	/**
	 * @returns Array A list of all properties in this tree.
	 * @since 4.9.4.101
	 */
	getAllProperties() {};
	/**
	 * @returns DzPropertyGroup The default property group for the tree; i.e., "General"
	 */
	getDefaultGroup() {};
	/**
	 * @returns DzPropertyGroup The first child group (if any), otherwise NULL.
	 */
	getFirstChild() {};
	/**
	 * @returns DzElement The element that this property group tree belongs to.
	 */
	getOwner() {};
	/**
	 * @returns true if this property group tree is private, otherwise false.
	 */
	isPrivate() {};
	/**
	 * @description Sets whether or not this property group tree is private.
	 * @param onOff - If true, the property group tree is set private.
	 */
	setIsPrivate(onoff) {};
	/**
	 * @description Alpha-numerically sorts the property groups, keeping "General" at the top.
	 */
	sortGroups() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the child list of the group has changed.
	 * @signature `"childListChanged()"`
	 * @event
	 */
	childListChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the visibility of a property in the tree has changed.
	 * @signature `"propertyVisiblityChanged(DzPropertyGroup*,DzProperty*)"`
	 * @event
	 */
	propertyVisiblityChanged(grp, prop) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the tree has changed.
	 * @signature `"treeChanged()"`
	 * @event
	 */
	treeChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the tree is sorted.
	 * @signature `"treeSorted()"`
	 * @event
	 */
	treeSorted() {};

}
/**
 * Provides a DzComboBox like widget with a custom popup designed for choosing a DzProperty.
 */
class DzPropertySelectionComboBox extends DzWidget {
	/**
	 * @description Creates a property selection combobox as a child of the given parent widget.
	 * @param {DzWidget} parent - The widget parent for the combobox.
	 */
	constructor(parent) {};
	/**
	 * @description Clears the selection of any properties.
	 * @since 4.10.0.27
	 */
	clearPropertySelection() {};
	/**
	 * @returns Array A list of the properties to be excluded in the popup.
	 */
	getExcludeList() {};
	/**
	 * @returns Array A list of the nodes to be shown in the popup.
	 */
	getNodes() {};
	/**
	 * @returns DzProperty The selected property.
	 */
	getSelectedProperty() {};
	/**
	 * @description Hide the popup.
	 */
	hidePopup() {};
	/**
	 * @description Sets whether or not the popup should display rigging properties, regardless of their existence in the exclude list.
	 */
	setEditMode(onOff) {};
	/**
	 * @description Sets the properties to be excluded in the popup.
	 * @param {Array} properties - The list of properties to exclude.
	 */
	setExcludeList(properties) {};
	/**
	 * @description Sets whether or not the popup should filter non-morph properties from the list.
	 */
	setMorphOnly(onOff) {};
	/**
	 * @description Sets the node from the scene to be shown in the popup.
	 * @param {DzNode} node - The DzNode to show properties for.
	 */
	setNode(node) {};
	/**
	 * @description Sets the nodes from the scene to be shown in the popup.
	 * @param {Array} nodes - A list of the DzNode objects to show properties for.
	 */
	setNodes(nodes) {};
	/**
	 * @description Sets whether or not the popup should filter non-numeric properties from the list.
	 */
	setNumericOnly(onOff) {};
	/**
	 * @description Sets the height of the popup to height.
	 */
	setPopUpHeight(height) {};
	/**
	 * @description Sets the minimum width of the popup to width.
	 */
	setPopUpMinWidth(width) {};
	/**
	 * @description Sets whether or not the popup should filter non-private properties from the list.
	 * @since 4.10.0.23
	 */
	setPrivateOnly(onOff) {};
	/**
	 * @description Sets whether or not the popup should filter non-public properties from the list.
	 * @since 4.10.0.23
	 */
	setPublicOnly(onOff) {};
	/**
	 * @description Sets the property to be selected.
	 * @param {DzProperty} prop - The property to select.
	 */
	setSelectedProperty(prop) {};
	/**
	 * @description Sets whether or not the popup should display hidden properties.
	 */
	setShowHidden(onOff) {};
	/**
	 * @description Sets whether or not the popup should filter non-transform properties from the list.
	 * @since 4.10.0.23
	 */
	setTransformOnly(onOff) {};
	/**
	 * @description Display the popup.
	 */
	showPopup() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the selected DzProperty changes.
	 * @signature `"propertySelectionChanged()"`
	 * @event
	 */
	propertySelectionChanged() {};

}
/**
 * 
 */
class DzPropertySettings extends DzSettings {
	/**
	 * @description Default Constructor - creates an empty set of options.
	 */
	constructor() {};
	/**
	 * @description Copy constructor.
	 * @param {DzSettings} settings - The settings object to copy data from.
	 */
	constructor(settings) {};

}
/**
 * An asset save filter for saving a Puppeteer Preset in the DSON format.
 * See Also:
 */
class DzPuppeteerAssetFilter extends DzAssetFileOutFilter {
	/**
	 * @description TODO:
	 * Add description.
	 */
	constructor() {};

}
/**
 * 
 */
class DzPushButton extends DzButton {
	/**
	 * @description Creates a push button as a child of the given parent widget
	 */
	constructor(parent) {};
	/**
	 * @description Holds whether or not the button has the auto-default feature and responds to the [Enter] key when it has the focus; true by default for buttons that have a DzDialog parent, otherwise false.
	 * @type {Boolean}
	 */
	autoDefault;
	/**
	 * @description Holds the style that the button is drawn in.
	 * @type {ButtonStyle}
	 */
	buttonStyle;
	/**
	 * @description Holds the format that the button text is drawn in; DzWidget.AlignmentFlags and DzWidget.TextFlags OR'd together for the button label.
	 * @type {Number}
	 */
	buttonTextFormat;
	/**
	 * @description Holds whether or not the button will collapse empty space reserved for various parts of the button.
	 * @type {Boolean}
	 */
	collapseEmptySpace;
	/**
	 * @description Holds whether or not the button is the default button; false by default.
	 * @type {Boolean}
	 */
	default;
	/**
	 * @description Holds whether or not to display the arrow for this button.
	 * @type {Boolean}
	 */
	displayDownArrow;
	/**
	 * @description Holds the name of the pixel metric used to define the size of the arrow on this button (if any).
	 * @type {String}
	 */
	downArrowMetric;
	/**
	 * @description Holds the name of the primitive element used to draw the arrow on this button (if any).
	 * @type {String}
	 */
	downArrowPrimitive;
	/**
	 * @description Holds the elide mode to be used for the text on this button.
	 * @type {DzWidget}
	 */
	elideMode;
	/**
	 * @description Holds whether or not the border is disabled; false by default.
	 * @type {Boolean}
	 */
	flat;
	/**
	 * @description Holds the name of the pixel metric used to define the size of the icon on this button (if any).
	 * @type {String}
	 */
	iconMetric;
	/**
	 * @description Holds text used for size hint; if empty current text is used.
	 * @type {String}
	 */
	minimumWidthText;
	/**
	 * @description Holds the name of the primitive element used to draw this button.
	 * @type {String}
	 */
	primitive;
	/**
	 * @description Holds whether or not the button will be sized based on the size of its icon (if any). If true, this overrides iconMetric.
	 * @type {Boolean}
	 */
	sizedFromIcon;
	/**
	 * @description Holds the name of the text style used to draw the label on this button.
	 * @type {String}
	 */
	textStyle;
	/**
	 * @description ENUM: Deprecated See DzCheckBox.tristate and DzCheckBox.checked
	 */
	Off;
	/**
	 * @description ENUM: Deprecated See DzCheckBox.tristate and DzCheckBox.checked
	 */
	NoChange;
	/**
	 * @description ENUM: Deprecated See DzCheckBox.tristate and DzCheckBox.checked
	 */
	On;
	/**
	 * @description ENUM: Deprecated See DzCheckBox.tristate
	 */
	SingleShot;
	/**
	 * @description ENUM: Deprecated See DzCheckBox.tristate
	 */
	Toggle;
	/**
	 * @description ENUM: Deprecated See DzCheckBox.tristate
	 */
	Tristate;
	/**
	 * @description ENUM: The button is drawn as a typical Push Button.
	 */
	BCommand;
	/**
	 * @description ENUM: The button is drawn as a typical Tool Button.
	 */
	BTool;
	/**
	 * @description ENUM: The button is drawn as a Default Push Button.
	 */
	BDefault;
	/**
	 * @description ENUM: The button is drawn with the style's Button Bevel.
	 */
	BBasic;
	/**
	 * @description ENUM: The button is drawn without a frame.
	 */
	BNoFrame;
	/**
	 * @description ENUM: The button is drawn with a custom style.
	 */
	BCustom;
	/**
	 * @description Sets whether or not the button is a toggle button.
	 */
	setCheckable(yesNo) {};
	/**
	 * @description Deprecated
	 */
	setToggleButton(yesNo) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when buttonStyle on this button has changed.
	 * @signature `"buttonStyleChanged(ButtonStyle)"`
	 * @event
	 */
	buttonStyleChanged(style) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when buttonTextFormat on this button has changed.
	 * @signature `"buttonTextFormatChanged(int)"`
	 * @event
	 */
	buttonTextFormatChanged(format) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when collapseEmptySpace on this button has changed.
	 * @signature `"collapseEmptySpaceChanged(bool)"`
	 * @event
	 */
	collapseEmptySpaceChanged(onOff) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when displayDownArrow on this button has changed.
	 * @signature `"displayDownArrowChanged(bool)"`
	 * @event
	 */
	displayDownArrowChanged(displayArrow) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when downArrowMetric on this button has changed.
	 * @signature `"downArrowMetricChanged(const QString&)"`
	 * @event
	 */
	downArrowMetricChanged(name) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when downArrowPrimitive on this button has changed.
	 * @signature `"downArrowPrimitiveChanged(const QString&)"`
	 * @event
	 */
	downArrowPrimitiveChanged(name) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when elideMode on this button has changed.
	 * @signature `"textStyleChanged(int)"`
	 * @event
	 */
	elideModeChanged(mode) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when iconMetric on this button has changed.
	 * @signature `"iconMetricChanged(const QString&)"`
	 * @event
	 */
	iconMetricChanged(name) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when primitive on this button has changed.
	 * @signature `"primitiveChanged(const QString&)"`
	 * @event
	 */
	primitiveChanged(name) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when sizedFromIcon on this button has changed.
	 * @signature `"sizedFromIconChanged(bool)"`
	 * @event
	 */
	sizedFromIconChanged(onOff) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when textStyle on this button has changed.
	 * @signature `"textStyleChanged(const QString&)"`
	 * @event
	 */
	textStyleChanged(name) {};

}
/**
 * Class for importing files in Poser formats; .pz3, *.pz2, *.cr2, *.lt2, *.cm2, *.pp2, *.fc2, *.hd2, *.hr2, *.mc6, .pzz, *.p2z, *.crz, *.ltz, *.cmz, *.ppz, *.fcz, *.hdz, *.hrz, *.mcz
 * See Also:
 */
class DzPZ3Importer extends DzImporter {
	/**
	 * @description Default Constructor.
	 */
	constructor() {};

}
/**
 * TODO:
 * Add detailed description.
 */
class DzQuat extends Object {
	/**
	 * @description Default Constructor. Creates an identity quaternion.
	 */
	constructor() {};
	/**
	 * @description Creates a quaternion by parsing a string.
	 * @param {String} quat - A string representation of the quaternion in the form "[ x, y, z, w ]"
	 */
	constructor(quat) {};
	/**
	 * @description Copy Constructor.
	 */
	constructor(quat) {};
	/**
	 * @description Initialize with a rotation matrix.
	 */
	constructor(mtx) {};
	/**
	 * @description Initialize with a rotation matrix.
	 */
	constructor(mtx) {};
	/**
	 * @description Initialize with an Euler angle rotation.
	 */
	constructor(order, angles) {};
	/**
	 * @description Initialize with a rotation around an axis of the given angle (in radians).
	 */
	constructor(axis, radians) {};
	/**
	 * @description Initialize with 4-component quaternion.
	 */
	constructor(x, y, z, w, normalize = true) {};
	/**
	 * @description Holds the w component of this quaternion.
	 * @type {Number}
	 */
	w;
	/**
	 * @description Holds the x component of this quaternion.
	 * @type {Number}
	 */
	x;
	/**
	 * @description Holds the y component of this quaternion.
	 * @type {Number}
	 */
	y;
	/**
	 * @description Holds the z component of this quaternion.
	 * @type {Number}
	 */
	z;
	/**
	 * @returns Boolean true if this quaternion is considered equal to quat, otherwise false.
	 * @since 4.9.3.121
	 * @param {DzQuat} quat - The quaternion to be compared.
	 * @param {Number} tolerance - The maximum allowable deviation.
	 */
	equals(quat, tolerance = 1e-05) {};
	/**
	 * @returns Number The angle of rotation for this quaternion (in radians).
	 * @since 4.10.0.110
	 */
	getAngleOfRotation() {};
	/**
	 * @returns DzVec3 The axis of rotation for this quaternion.
	 * @since 4.10.0.110
	 */
	getAxisOfRotation() {};
	/**
	 * @returns DzVec3 The Euler angles representing this rotation given the rotation order.
	 * @param {Number} axis1 - The first axis in the rotation order.
	 * @param {Number} axis2 - The second axis in the rotation order.
	 * @param {Number} axis3 - The third axis in the rotation order.
	 */
	getValue(axis1, axis2, axis3) {};
	/**
	 * @returns DzVec3 The X axis that corresponds to the local coordinate frame of this rotation (the rotated coordinate axes).
	 */
	getXAxis() {};
	/**
	 * @returns DzVec3 The Y axis that corresponds to the local coordinate frame of this rotation (the rotated coordinate axes).
	 */
	getYAxis() {};
	/**
	 * @returns DzVec3 The Z axis that corresponds to the local coordinate frame of this rotation (the rotated coordinate axes).
	 */
	getZAxis() {};
	/**
	 * @returns DzQuat A null (identity) quaternion with components set to (0.0, 0.0, 0.0, 1.0).
	 * @since 4.14.1.27
	 */
	identity() {};
	/**
	 * @returns DzQuat The inverse of the rotation.
	 */
	inverse() {};
	/**
	 * @description Changes a rotation to be its inverse.
	 */
	invert() {};
	/**
	 * @returns Boolean true if the quaternion is an identity rotation.
	 */
	isIdentity() {};
	/**
	 * @description Makes sure that this rotation lies on the same side of the hypersphere as the one given. If not, it is altered to do so.
	 * @returns DzQuat
	 */
	makeClosest(quat) {};
	/**
	 * @description Sets the quaternion to the identity quaternion. Zero this rotation.
	 */
	makeIdentity() {};
	/**
	 * @returns DzQuat The result of post-multiplying this quaternion by quat.
	 * @param {DzQuat} quat - The quaternion to multiply by.
	 */
	multiply(quat) {};
	/**
	 * @description Multiplies the given vector by the matrix of this rotation. Vector is forced to unit length.
	 * @returns DzVec3 The result of multiplying the given vector through the rotation, as a unit vector.
	 * @param {DzVec3} vec - The vector to multiply.
	 */
	multVec(vec) {};
	/**
	 * @description Normalizes a rotation quaternion to unit 4D length
	 */
	normalize() {};
	/**
	 * @description Keep the axis the same. Multiply the angle of rotation by the amount 'scaleFactor'
	 */
	scaleAngle(val) {};
	/**
	 * @description Sets the value to a rotation of radians around one of the primary axes (axis == 0:x, 1:y, 2:z)
	 */
	setValue(axis, radians) {};
	/**
	 * @description Sets the quaternion to an Euler rotation of angles around each axis given the rotation order.
	 * @param {Number} axis1 - The first axis in the rotation order.
	 * @param {Number} axis2 - The second axis in the rotation order.
	 * @param {Number} axis3 - The third axis in the rotation order.
	 * @param {DzVec3} angles - The angles of each axis, where axis == 1:x, 2:y, 3:z.
	 */
	setValue(axis1, axis2, axis3, angles) {};
	/**
	 * @description Sets the value based on the angle and axis of rotation.
	 */
	setValue(axis, radians) {};
	/**
	 * @description Sets the values of this quaternion.
	 * @param {Number} x - The x component.
	 * @param {Number} y - The y component.
	 * @param {Number} z - The z component.
	 * @param {Number} w - The w component.
	 * @param {Boolean} doNormalize - If true, normalizes the set values.(since 4.9.3.121)
	 */
	setValue(x, y, z, w, normalize = true) {};
	/**
	 * @description Preforms spherical linear interpolation between two quaternions.
	 * @returns DzQuat As t goes from 0 to 1, the value goes from rot0 to rot1.
	 * @since 4.9.3.121
	 * @param {Number} rot0 - The from rotation.
	 * @param {Number} rot1 - The to rotation.
	 * @param {Number} t - The value to interpolate.
	 */
	slerp(rot0, rot1, t) {};
	/**
	 * @returns String A string representation of this quaternion in the form "[ x, y, z, w ]".
	 */
	toString() {};

}
/**
 * DzRadioButton and DzCheckBox are both option buttons (e.g. they can be `checked` or unchecked). They differ in how the available choices are restricted. A DzCheckBox is used to define several choices that can all co-exist at the same time (e.g. "many of many"). While a DzRadioButton is used to provide several choices, where only one can be ultimately chosen (e.g. "one of many").
 * The easiest way to implement a "one of many" type choice is to create radio buttons as children of a DzButtonGroup.Boolean : `checked`
 * 
 * ### Example:
 * ```
 * // Create a new dialog
 * var wDlg = new DzDialog;
 * wDlg.caption = "DzRadioButton Example";
 * 
 * // Create a layout for the dialog
 * var wLyt = new DzVBoxLayout( wDlg );
 * wLyt.autoAdd = true;
 * 
 * // Create a button group for the options
 * var wOptBG = new DzVButtonGroup( wDlg );
 * wOptBG.columns = 1;
 * 
 * // Create the options
 * var wOpt1Btn = new DzRadioButton( wOptBG );
 * wOpt1Btn.text = "Option 1";
 * wOpt1Btn.checked = true;
 * var wOpt2Btn = new DzRadioButton( wOptBG );
 * wOpt2Btn.text = "Option 2";
 * var wOpt3Btn = new DzRadioButton( wOptBG );
 * wOpt3Btn.text = "Option 3";
 * 
 * // Launch the dialog
 * wDlg.exec();
 * ```
 */
class DzRadioButton extends DzButton {
	/**
	 * @description Creates a radio button as a child of the given parent widget
	 */
	constructor(parent) {};
	/**
	 * @description Whether the button is checked
	 * @type {Boolean}
	 */
	checked;

}
/**
 * This is the DAZScript counterpart to the QRect type used in the DAZ Studio SDK. A Rect object is a two dimensional representation of a rectangle.
 * Attention:@attention Attention:
 */
class Rect extends QObject {
	/**
	 * @description Default Constructor.
	 */
	constructor() {};
	/**
	 * @param {Rect} rect - The rectangle to copy.
	 */
	constructor(rect) {};
	/**
	 * @param {Number} xVal - The x coordinate of the rectangle.
	 * @param {Number} yVal - The y coordinate of the rectangle.
	 * @param {Number} wVal - The width of the rectangle.
	 * @param {Number} hVal - The height of the rectangle.
	 */
	constructor(xVal, yVal, wVal, hVal) {};
	/**
	 * @description Holds the rectangle's bottom.
	 * @type {Number}
	 */
	bottom;
	/**
	 * @description Holds the rectangle's center.
	 * @type {Point}
	 */
	center;
	/**
	 * @description Holds the rectangle's height.
	 * @type {Number}
	 */
	height;
	/**
	 * @description Holds the rectangle's left.
	 * @type {Number}
	 */
	left;
	/**
	 * @description Holds the rectangle's right.
	 * @type {Number}
	 */
	right;
	/**
	 * @description Holds the rectangle's top.
	 * @type {Number}
	 */
	top;
	/**
	 * @description Holds the rectangle's width.
	 * @type {Number}
	 */
	width;
	/**
	 * @description Holds the rectangle's x position.
	 * @type {Number}
	 */
	x;
	/**
	 * @description Holds the rectangle's y position.
	 * @type {Number}
	 */
	y;
	/**
	 * @returns Boolean true if this rectangle contains the given rectangle, otherwise false.
	 * @param {Rect} rect - The rectangle to test against this rectangle.
	 */
	contains(rect) {};
	/**
	 * @returns Rect The intersection of this rectangle with the given rectangle, or an empty rectangle if the two do not intersect.
	 * @param {Rect} rect - The rectangle to intersect with this rectangle.
	 */
	intersection(rect) {};
	/**
	 * @returns Boolean true if this rectangle intersects with the given rectangle, otherwise false.
	 * @param {Rect} rect - The rectangle to test against this rectangle.
	 */
	intersects(rect) {};
	/**
	 * @returns Boolean true if the rectangle is empty, i.e the width and height of the rectangle are negative, otherwise false.
	 */
	isEmpty() {};
	/**
	 * @returns Boolean true if the width and height of the rectangle are 0, otherwise false.
	 */
	isNull() {};
	/**
	 * @description Moves the rectangle so its bottom property is equal to pos.
	 * @param {Number} pos - The new bottom boundary of the triangle.
	 */
	moveBottom(pos) {};
	/**
	 * @description Translates the rectangle by dx and dy, the width and height remain unchanged.
	 * @param {Number} dx - The distance in x to move the rectangle.
	 * @param {Number} dy - The distance in y to move the rectangle.
	 */
	moveBy(dx, dy) {};
	/**
	 * @description Moves the rectangle so its left property is equal to pos.
	 * @param {Number} pos - The new left boundary of the triangle.
	 */
	moveLeft(pos) {};
	/**
	 * @description Moves the rectangle so its right property is equal to pos.
	 * @param {Number} pos - The new right boundary of the triangle.
	 */
	moveRight(pos) {};
	/**
	 * @description Moves the rectangle so its top property is equal to pos.
	 * @param {Number} pos - The new top boundary of the triangle.
	 */
	moveTop(pos) {};
	/**
	 * @description Normalizes the rectangle - changes the prefix of width/height if they are negative. The rectangle will no longer be empty after it is normalized.
	 */
	normalize() {};
	/**
	 * @description Normalizes the rectangle - changes the prefix of width/height if they are negative. The rectangle will no longer be empty after it is normalized.
	 */
	normalize() {};
	/**
	 * @returns Rect The union of this rectangle with the given rectangle, i.e. a rectangle that contains both rectangles.
	 * @param {Rect} rect - The rectangle to add to this rectangle.
	 */
	union(rect) {};

}
/**
 * Instances of DzRefCountedItem are objects that are intended to be shared between multiple owners. Each owner references the object when taking ownership, and dereference the object when it no longer needs the object. The object keeps an internal reference count, and when no other objects are referencing the object (i.e. the reference count reaches zero) the object will delete itself.
 * Attention:@attention Attention:
 */
class DzRefCountedItem {

}
/**
 * 
 */
class DzRenderer extends DzBase {
	/**
	 * @description Compiles the shader at the given path, if necessary, and returns the path to the compiled shader.
	 * @returns String The path to the compiled shader.
	 * @param {String} shaderPath - The path to the shader source to compile
	 */
	compileShader(shaderPath) {};
	/**
	 * @description Renders a custom set of items.
	 * @returns Boolean true if rendering was successful. false if rendering was canceled by user or there were errors during the render.
	 * @param {DzRenderHandler} handler - The settings and handler for the render.
	 * @param {DzCamera} camera - The camera to render from.
	 * @param {Array} lights - The list of lights for the render.
	 * @param {Array} nodes - The list of items to be rendered.
	 * @param {DzRenderOptions} opt - The options for this render.
	 */
	customRender(handler, camera, lights, nodes, opt) {};
	/**
	 * @returns DzNode The node that is currently being rendered.
	 */
	getCurrentNode() {};
	/**
	 * @returns DzIprrenderhandler The handler used for Interactive Progressive Rendering (IPR) on this renderer (if any). NULL if this renderer does not support IPR.
	 */
	getIPRRenderHandler() {};
	/**
	 * @returns String The name of this renderer.
	 */
	getName() {};
	/**
	 * @returns DzCamera The camera being used for the render.
	 * @since 4.11.0.119
	 */
	getRenderCamera() {};
	/**
	 * @returns DzRendererMode The renderer mode (feature set) for this renderer.
	 */
	getRendererMode() {};
	/**
	 * @returns String The path to the utility that compiles shaders for the renderer.
	 */
	getShaderCompilerPath() {};
	/**
	 * @returns String The file extension that this renderer uses for compiled shaders.
	 */
	getShaderExtension() {};
	/**
	 * @returns String The filename for the shader; the name of the shader with the shader extension for the renderer (e.g. "metal.sdl").
	 * @param {String} shaderName - The shader name to get the filename for (e.g. "metal").
	 */
	getShaderFileName(shaderName) {};
	/**
	 * @description Gets the parameter information for the given shader.
	 * @returns DzShaderDescription
	 * @param {String} shaderPath - The path to the compiled shader.
	 */
	getShaderInfo(shaderPath) {};
	/**
	 * @description Given a shader name (e.g. "metal"), looks in all the shader directories attempting to find the file for it.
	 * @returns String The full path of the shader with the specified name (if found), otherwise an empty string.
	 * @param {String} shaderName - The shader name to get the path for.
	 * @param {Boolean} withExtension - If true, the extension for the renderer is included in the return value.
	 */
	getShaderPath(shaderName, withExtension = true) {};
	/**
	 * @returns Array A list of paths which are used to search for shaders while rendering.
	 */
	getShaderSearchPaths() {};
	/**
	 * @returns String The path to the utility that converts textures for the renderer.
	 */
	getTextureUtilityPath() {};
	/**
	 * @returns Boolean true if the application is currently rendering, otherwise false.
	 */
	isRendering() {};
	/**
	 * @description Stops the render.
	 */
	killRender() {};
	/**
	 * @description Called by the framework to prepare/convert an image into a format that this renderer can understand/use when rendering. In derived classes, the function should result in a new image file being generated along with a path that the renderer can use to refer to the file. If the image could not be converted or is not usable by this renderer, the returned string should be empty.
	 * @param {DzTexture} img - The DzTexture object for which the image is being prepared.
	 * @param {String} filename - The path to the original image file that needs to be processed.
	 */
	prepareImage(img, filename) {};
	/**
	 * @description Processes the given shader name into a form the renderer can use (i.e. appending file extensions, finding absolute paths, etc.).
	 * @returns String
	 * @param {String} shaderName - The shader name to process.
	 */
	processShaderName(shaderName) {};
	/**
	 * @description Render the current scene.
	 * @returns Boolean true if rendering was successful. false if rendering was canceled by user or there were errors during the render.
	 * @param {DzRenderHandler} handler - Settings and handler for the render.
	 * @param {DzCamera} camera - Camera to render the scene from.
	 * @param {DzRenderOptions} opt - Options for this render.
	 */
	render(handler, camera, opt) {};
	/**
	 * @description Converts a .bake file into an image file.
	 * @returns DzTexturebakermgr
	 * @param {DzBakerOptions} opt - Shader baker options.
	 * @param {Boolean} wait - If true, this method is exited only when the conversion has ended. If false the method returns immediately after starting conversion; the baker's saveFileFinished() slot will be invoked after the conversion finishes.
	 */
	saveBakeImage(opt, wait) {};
	/**
	 * @description Sets the handler used for Interactive Progressive Rendering (IPR) on this renderer.
	 * @returns DzIprrenderhandler
	 * @param {iprrenderhandler_dz} handler - The render handler to set.
	 */
	setIPRRenderHandler(handler) {};
	/**
	 * @description Sets the camera being used for the render.
	 * @since 4.11.0.119
	 * @param {DzCamera} camera - The camera to set.
	 */
	setRenderCamera(camera) {};
	/**
	 * @description Stops an active baking operation, if possible.
	 */
	stopBaking() {};
	/**
	 * @description Performs texture conversion.
	 * @returns Boolean true if the conversion succeeds, false if the conversion is cancelled or in case of error.
	 * @param {DzRenderHandler} handler - The render handler to use for the conversion.
	 * @param {DzCamera} camera - The camera to use for the conversion.
	 * @param {textureconvertoroptions_dz} opt - The options to use in the conversion.
	 */
	textureConvert(handler, camera, opt) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted just before the renderer begins rendering.
	 * @signature `"aboutToRender(DzRenderer*)"`
	 * @event
	 */
	aboutToRender(renderer) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the image preparation for img is finished.
	 * @signature `"imagePrepared(const DzTexture*,const QString&)"`
	 * @event
	 */
	imagePrepared(img, filename) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the handler used for Interactive Progressive Rendering (IPR) on this renderer has changed.
	 * @signature `"IPRRenderHandlerChanged(DzRenderer*,DzIPRRenderHandler*)"`
	 * @event
	 */
	IPRRenderHandlerChanged(renderer, handler) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the mode of this renderer has changed.
	 * @signature `"rendererModeChanged(DzRenderer*)"`
	 * @event
	 */
	rendererModeChanged(renderer) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted just after the renderer finishes rendering.
	 * @signature `"renderFinished(DzRenderer*)"`
	 * @event
	 */
	renderFinished(renderer) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the renderer begins rendering a shape.
	 * @signature `"shapeRenderBeginning(DzShape*)"`
	 * @event
	 */
	shapeRenderBeginning(shape) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted after the renderer finishes rendering a shape.
	 * @signature `"shapeRenderFinished(DzShape*)"`
	 * @event
	 */
	shapeRenderFinished(shape) {};

}
/**
 * 
 */
class DzRendererMode extends QObject {
	/**
	 * @returns String The name of the DzMaterial subclass that implements the default material for the renderer in the current mode.
	 * @since 4.11.0.254
	 */
	defaultMaterialClassName() {};
	/**
	 * @returns Boolean true if any features of the renderer are enabled for the current mode, otherwise false.
	 */
	hasFeatures() {};
	/**
	 * @returns Boolean true if the renderer is biased in the current mode, otherwise false.
	 */
	isBiased() {};
	/**
	 * @returns Boolean true if the renderer is physically based in the current mode, otherwise false.
	 */
	isPhysicallyBased() {};
	/**
	 * @returns Boolean true if the renderer is RenderMan compliant in the current mode, otherwise false.
	 */
	isRenderManCompliant() {};
	/**
	 * @returns Array A list of the languages supported by the renderer in the current mode.
	 * @since 4.11.0.254
	 */
	supportedLanguages() {};
	/**
	 * @returns Boolean true if the renderer supports advanced camera options in the current mode, otherwise false.
	 * @since 4.9.3.121
	 */
	supportsAdvancedCamera() {};
	/**
	 * @returns Boolean true if the renderer supports camera aperture blades in the current mode, otherwise false.
	 * @since 4.9.3.121
	 */
	supportsCameraBlades() {};
	/**
	 * @returns Boolean true if the renderer supports the Catmark subdivision limit surface in the current mode, otherwise false.
	 */
	usesCatmarkLimitSurface() {};

}
/**
 * Render handler classes are responsible for the settings of a render, as well as collecting the final image data passed back from the renderer.
 * See Also:
 */
class DzRenderHandler extends QObject {
	/**
	 * @returns Color The background color
	 */
	getBackColor() {};
	/**
	 * @returns Rect The area of the view to render, if the whole view is not to be rendered
	 */
	getCropWindow() {};
	/**
	 * @returns Number The number of frames to be rendered
	 */
	getNumFrames() {};
	/**
	 * @returns Size The width & height of the rendered image
	 */
	getSize() {};
	/**
	 * @returns DzTime The scene time at which rendering will begin
	 */
	getStartingTime() {};
	/**
	 * @returns Boolean true if only a portion of the view will be rendered
	 */
	getUseCropWindow() {};
	/**
	 * @description Set background color for the render
	 */
	setBackColor(color) {};
	/**
	 * @description Set the portion of the view to be rendered, if the whole view is not to be rendered
	 */
	setCropWindow(window) {};
	/**
	 * @description Set the render to be limited to a portion of the view, or the whole view
	 */
	setUseCropWindow(onOff) {};

}
/**
 * Responsible for the management of renderers, and more generally the process of performing a render.
 * There is only one instance of this manager in an application. This instance is created and owned by DzApp. Request the instance via DzApp.getRenderMgr().
 * See Also:
 */
class DzRenderMgr extends DzBase {
	/**
	 * @description ENUM: The lowest priority.
	 */
	RENDER_PRIORITY_LOWEST;
	/**
	 * @description ENUM: A low priority.
	 */
	RENDER_PRIORITY_LOW;
	/**
	 * @description ENUM: A below normal priority.
	 */
	RENDER_PRIORITY_BELOW_NORMAL;
	/**
	 * @description ENUM: The normal priority.
	 */
	RENDER_PRIORITY_NORMAL;
	/**
	 * @description ENUM: An above normal priority.
	 */
	RENDER_PRIORITY_ABOVE_NORMAL;
	/**
	 * @description ENUM: A high priority.
	 */
	RENDER_PRIORITY_HIGH;
	/**
	 * @description ENUM: The highest priority.
	 */
	RENDER_PRIORITY_HIGHEST;
	/**
	 * @returns String The suffix used for files generated as icons for renders to help improve performance and responsiveness.
	 */
	static getIconSuffix() {};
	/**
	 * @returns String The name of the XML file that holds metadata for imageName.
	 * @param {String} imageName - The path of the rendered file to get the metadata file for.
	 * @param shortname - If true, only the shortname of the file is returned, otherwise the full path of the file is returned.
	 */
	static getMetaXmlFileName(imageName, basenameOnly) {};
	/**
	 * @returns String The base filename of the file for imageName.
	 * @param {String} imageName - The path of the rendered file to get a base filename for.
	 * @param basename - If true, only the basename of the file is returned, otherwise the basename is preceded by the path.
	 */
	static getRenderBaseFileName(imageName, basenameOnly) {};
	/**
	 * @returns String The name of the icon file for imageName.
	 * @param {String} imageName - The path of the rendered file to get the icon file for.
	 * @param shortname - If true, only the shortname of the file is returned, otherwise the full path of the file is returned.
	 */
	static getRenderIconFileName(imageName, basenameOnly) {};
	/**
	 * @description Adds a directory to the list of known render directories.
	 * @param {String} directory - The path of the directory to add.
	 * @param {Boolean} saveSetting - If true, saves the setting immediately. If false, waits until the application exits to save the setting.
	 */
	addRenderDirectory(directory, saveSetting = true) {};
	/**
	 * @description Interactively and progressively renders the scene with the given render settings, using the given handler from the given camera.
	 * @returns Boolean true if the render was performed successfully, otherwise false.
	 * @param {DzRenderOptions} opt - The render settings to use for the render. If NULL, the current user render settings are used.
	 * @param {DzRenderHandler} renderHandler - The render handler to use for the render.
	 * @param {DzCamera} camera - The camera to use for the render.
	 */
	doIPRRender(camera, renderHandler, opt = null) {};
	/**
	 * @description Renders the scene with the given render settings. If no render settings are specified, then the current application render settings are used.
	 * @returns Boolean
	 * @param {DzRenderOptions} opt - The render settings to use for the render. If NULL, the current user render settings are used.
	 */
	doRender(opt = null) {};
	/**
	 * @returns DzRenderer The renderer with the given class name (if any), otherwise null.
	 */
	findRenderer(className) {};
	/**
	 * @returns DzRenderer The active renderer for the application. This will be NULL if no renderers are available.
	 */
	getActiveRenderer() {};
	/**
	 * @returns Array A list where the first item is the base path and any additional items represent the relative portion of the path.
	 * @param {String} absPath - The absolute path to split into its base and relative parts.
	 */
	getBaseAndRelativePath(absPath) {};
	/**
	 * @returns String The path to the last successfully saved render, otherwise an empty string.
	 */
	getLastSavedRenderPath() {};
	/**
	 * @returns Number The number of render directories.
	 */
	getNumRenderDirectories() {};
	/**
	 * @returns Number The number of renderers available in the application.
	 */
	getNumRenderers() {};
	/**
	 * @description TODO:
	 * Add description.
	 * @returns DzElement
	 */
	getOptionHelper() {};
	/**
	 * @returns String The given render directory.
	 * @param {Number} which - The index of the render directory to be returned.
	 */
	getRenderDirectoryPath(which) {};
	/**
	 * @description TODO:
	 * Add description.
	 * @returns Array
	 */
	getRenderElementObjects() {};
	/**
	 * @returns DzRenderer If which is within the range [0, getNumRenderers() - 1], the renderer at the given index, otherwise null.
	 */
	getRenderer(which) {};
	/**
	 * @returns Array A list of renderers available in the application.
	 */
	getRendererList() {};
	/**
	 * @returns DzRenderOptions The default render options object. This object stores the user's currently selected rendering options.
	 */
	getRenderOptions() {};
	/**
	 * @returns Boolean true if there is a render that can be saved, otherwise false.
	 */
	hasRender() {};
	/**
	 * @returns Boolean true if the application is currently rendering, otherwise false.
	 */
	isRendering() {};
	/**
	 * @description TODO:
	 * Add description.
	 */
	rebuildRenderElements() {};
	/**
	 * @description Removes all render directories.
	 */
	removeAllRenderDirectories() {};
	/**
	 * @description Removes a directory from the list of known render directories.
	 * @returns Boolean true if the directory was found in the list, otherwise false.
	 * @param {String} directory - The name of the render directory to remove.
	 */
	removeRenderDirectory(directory) {};
	/**
	 * @description TODO:
	 * Add description.
	 */
	restoreDefaultRenderOptions() {};
	/**
	 * @description Displays a dialog for saving the last render, and saves the image(s)/movie if the user does not cancel.
	 * @returns String The path to the file selected and successfully saved, otherwise an empty string.
	 */
	saveLastRender() {};
	/**
	 * @description Sets the active renderer for the application.
	 * @param {DzRenderer} renderer - The renderer to make active.
	 */
	setActiveRenderer(renderer) {};
	/**
	 * @description Displays the render options dialog to the user. This only works if the application is being run with the interface on, if the interface is off, this function does nothing.
	 */
	showRenderDialog() {};
	/**
	 * @description TODO:
	 * Add description.
	 */
	stopIPRRender() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the active render engine has changed.
	 * @signature `"activeRendererChanged(DzRenderer*)"`
	 * @event
	 */
	activeRendererChanged(renderer) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description TODO: Add Description
	 * @signature `TODO: Add Description`
	 * @event
	 */
	activeRendererIPRRenderHandlerChanged(renderer, handler) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description TODO: Add Description
	 * @signature `TODO: Add Description`
	 * @event
	 */
	doIPRRenderStop() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the value returned by DzRenderMgr.hasRender() has changed, signaling a new render operation. This signifies whether or not a call to saveLastRender() will be valid.
	 * @signature `"hasRenderChanged(bool)"`
	 * @event
	 */
	hasRenderChanged(state) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description TODO: Add Description
	 * @signature `TODO: Add Description`
	 * @event
	 */
	IPRRenderStarted() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description TODO: Add Description
	 * @signature `TODO: Add Description`
	 * @event
	 */
	IPRRenderStopped() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description TODO: Add Description
	 * @signature `TODO: Add Description`
	 * @event
	 */
	renderDirectoryListChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description TODO: Add Description
	 * @signature `TODO: Add Description`
	 * @event
	 */
	renderElementsListChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when a new render engine is added to the manager. This only occurs at startup as plug-ins are being loaded.
	 * @signature `"rendererAdded(DzRenderer*)"`
	 * @event
	 */
	rendererAdded(renderer) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description TODO: Add Description
	 * @signature `TODO: Add Description`
	 * @event
	 */
	rendererIPRRenderHandlerChanged(renderer, handler) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description TODO: Add Description
	 * @signature `TODO: Add Description`
	 * @event
	 */
	rendererModeChanged(renderer) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted just after a rendering operation is finished. This is only emitted when a render operation is performed by calling DzRenderMgr.doRender() - this includes all rendering operations that are started by the user from the interface. This may not include rendering operations performed by plug-ins, scripts, etc which do not call doRender().
	 * @signature `"renderFinished(bool)"`
	 * @event
	 */
	renderFinished(succeeded) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description TODO: Add Description
	 * @signature `TODO: Add Description`
	 * @event
	 */
	renderFolderChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description TODO: Add Description
	 * @signature `TODO: Add Description`
	 * @event
	 */
	renderOptionDefaultsRestored() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted just before a rendering operation begins. This is only emitted when a render operation is performed by calling DzRenderMgr.doRender() - this includes all rendering operations that are started by the user from the interface. This may not include rendering operations performed by plug-ins, scripts, etc which do not call doRender().
	 * @signature `"renderStarting()"`
	 * @event
	 */
	renderStarting() {};

}
/**
 * 
 */
class DzRenderOptions extends QObject {
	/**
	 * @description Default Constructor. Initializes render options.
	 * @since 4.9.3.57
	 */
	constructor() {};
	/**
	 * @description Holds the currently set aspect ratio (w / h). (Read Only)
	 * @type {Number}
	 */
	aspect;
	/**
	 * @description Holds the currently set aspect ratio height. (Read Only)
	 * @type {Number}
	 */
	aspectHeight;
	/**
	 * @description Holds the currently set aspect ratio width. (Read Only)
	 * @type {Number}
	 */
	aspectWidth;
	/**
	 * @description Holds whether or not to render polygons as double sided.
	 * @type {Boolean}
	 */
	doubleSided;
	/**
	 * @description Holds the scene time of the last frame to render.
	 * @type {DzTime}
	 */
	endTime;
	/**
	 * @description Holds the gain value.
	 * @type {Number}
	 */
	gain;
	/**
	 * @description Holds the gamma value.
	 * @type {Number}
	 */
	gamma;
	/**
	 * @description Holds whether or not gamma correction is enabled.
	 * @type {GammaCorrection}
	 */
	gammaCorrection;
	/**
	 * @description Holds the size of the image to render.
	 * @type {Size}
	 */
	imageSize;
	/**
	 * @description Holds whether or not to constrain the pixel dimensions of the render to the aspect ratio.
	 * @type {Boolean}
	 */
	isAspectConstrained;
	/**
	 * @description Holds whether or not to render only the current frame.
	 * @type {Boolean}
	 */
	isCurrentFrameRender;
	/**
	 * @description Holds the filename of the last image rendered. (Read Only)
	 * @type {String}
	 */
	lastRenderImgFilename;
	/**
	 * @description Holds the filename of the last movie rendered. (Read Only)
	 * @type {String}
	 */
	lastRenderMovFilename;
	/**
	 * @description Holds the base filename of the image series rendered. (Read Only)
	 * @type {String}
	 */
	lastRenderSerFilename;
	/**
	 * @description Holds the time offset for blurring.
	 * @type {Number}
	 */
	motionBlurOffset;
	/**
	 * @description Holds the amount of time between frames to blur across (0.0 - 1.0).
	 * @type {Number}
	 */
	motionBlurPct;
	/**
	 * @description Holds the number of samples for motion blur.
	 * @type {Number}
	 */
	motionBlurSamples;
	/**
	 * @description Holds the number of passes for rendering in OpenGL.
	 * @type {Number}
	 */
	openGLPasses;
	/**
	 * @description Holds the pixel filter to use.
	 * @type {PixelFilter}
	 */
	pixelFilter;
	/**
	 * @description Holds the raytrace depth.
	 * @type {Number}
	 */
	rayTraceDepth;
	/**
	 * @description Holds the filename to save individual images to.
	 * @type {String}
	 */
	renderImgFilename;
	/**
	 * @description Holds the target for rendering individual images.
	 * @type {RenderImgTarget}
	 */
	renderImgToId;
	/**
	 * @description Holds the filename to save movies to.
	 * @type {String}
	 */
	renderMovFilename;
	/**
	 * @description Holds the target for rendering animations.
	 * @type {RenderMovTarget}
	 */
	renderMovToId;
	/**
	 * @description Holds the base filename to use when saving image series.
	 * @type {String}
	 */
	renderSerFilename;
	/**
	 * @description Holds the style of the render.
	 * @type {RenderStyle}
	 */
	renderStyle;
	/**
	 * @description Holds the type of the render.
	 * @type {RenderType}
	 */
	renderType;
	/**
	 * @description Holds whether or not to use the aspect and size of the current viewport for the render.
	 * @type {Boolean}
	 */
	renderViewport;
	/**
	 * @description Holds the shading rate.
	 * @type {Number}
	 */
	shadingRate;
	/**
	 * @description Holds the number of samples when rendering shadows.
	 * @type {Number}
	 */
	shadowSamples;
	/**
	 * @description Holds whether or not to show a preview.
	 * @type {Boolean}
	 */
	showPreview;
	/**
	 * @description Holds the scene time of the first frame to render.
	 * @type {DzTime}
	 */
	startTime;
	/**
	 * @description Holds whether or not to use shaders when rendering in OpenGL.
	 * @type {Boolean}
	 */
	useGLSL;
	/**
	 * @description Holds whether or not to use motion blur.
	 * @type {Boolean}
	 */
	useMotionBlur;
	/**
	 * @description Holds the width of the pixel filter in x.
	 * @type {Number}
	 */
	xFilterWidth;
	/**
	 * @description Holds the number of samples per pixel in x.
	 * @type {Number}
	 */
	xPixelSamples;
	/**
	 * @description Holds the width of the pixel filter in y.
	 * @type {Number}
	 */
	yFilterWidth;
	/**
	 * @description Holds the number of samples per pixel in y.
	 * @type {Number}
	 */
	yPixelSamples;
	/**
	 * @description ENUM: Gamma correction off.
	 */
	GCOff;
	/**
	 * @description ENUM: Gamma correction on.
	 */
	GCOn;
	/**
	 * @description ENUM: The Box filter.
	 */
	Box;
	/**
	 * @description ENUM: The triangle filter.
	 */
	Triangle;
	/**
	 * @description ENUM: The Catmull-Rom filter.
	 */
	CatmullRom;
	/**
	 * @description ENUM: The Gaussian filter.
	 */
	Gaussian;
	/**
	 * @description ENUM: The Sinc filter.
	 */
	Sinc;
	/**
	 * @description ENUM: Renders the image in the active viewport.
	 */
	ActiveView;
	/**
	 * @description ENUM: Renders the image in a new window.
	 */
	NewWindow;
	/**
	 * @description ENUM: Renders the image directly to a file.
	 */
	DirectToFile;
	/**
	 * @description ENUM: A video file created/compressed by system specific video API's.
	 */
	MovieFile;
	/**
	 * @description ENUM: A series of image files, one for each frame in the movie.
	 */
	ImageSeries;
	/**
	 * @description ENUM: The shaders/materials for the objects will be used to render.
	 */
	Normal;
	/**
	 * @description ENUM: The entire scene will be rendered with a cartoon style shader.
	 */
	Cartoon;
	/**
	 * @description ENUM: Performs a 'viewport' render, grabbing a frame from the interactive viewport. See Also: DzDrawStyle
	 */
	ScreenShot;
	/**
	 * @description ENUM: Performs a 'multi-pass' OpenGL render to produce a higher quality image.
	 */
	HardwareAssisted;
	/**
	 * @description ENUM: Performs an 'offline' render with the active software renderer. See Also: DzRenderer
	 */
	Software;
	/**
	 * @description Writes render options via the settings manager.
	 */
	applyChanges() {};
	/**
	 * @description Copies the settings from another render options object.
	 * @returns DzRenderOptions
	 * @since 4.9.3.57
	 */
	copyFrom(opt) {};
	/**
	 * @returns DzFloatColor If gamma correction is enabled, a linearized version of color. If gamma correction is off, color is returned unchanged.
	 * @param {DzFloatColor} color - The color to gamma correct.
	 */
	gammaCorrectColor(color) {};
	/**
	 * @description Sets values for render options found in the stored settings.
	 */
	resetOptions() {};
	/**
	 * @description Restores the applications default settings and replaces the stored values.
	 */
	restoreDefaultSettings() {};
	/**
	 * @description Set current aspect width for this render. Represented as widthRatio : heightRatio.
	 */
	setAspectRatio(widthRatio, heightRatio) {};
	/**
	 * @description Sets all options to the default values, but does not affect values of stored/remembered settings. Also, no "changed" signals are emitted when calling this method.
	 */
	setToDefaults() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the aspect for the render has changed, or the viewport render status has changed.
	 * @signature `"aspectChanged(double)"`
	 * @event
	 */
	aspectChanged(val) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the aspect for the render has changed, or the viewport render status has changed.
	 * @signature `"aspectChanged(float,float)"`
	 * @event
	 */
	aspectChanged(w, h) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the constrain aspect ratio setting has changed.
	 * @signature `"aspectConstrainChanged(bool)"`
	 * @event
	 */
	aspectConstrainChanged(onOff) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the default options have been restored.
	 * @signature `"defaultsRestored()"`
	 * @event
	 */
	defaultsRestored() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the double sided setting has changed.
	 * @signature `"doubleSidedChanged(bool)"`
	 * @event
	 */
	doubleSidedChanged(onOff) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the end time has changed.
	 * @signature `"endTimeChanged(DzTime)"`
	 * @event
	 */
	endTimeChanged(time) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the gain value has changed.
	 * @signature `"gainChanged(double)"`
	 * @event
	 */
	gainChanged(gain) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the gamma value has changed.
	 * @signature `"gammaChanged(double)"`
	 * @event
	 */
	gammaChanged(gamma) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when gamma correction state has changed.
	 * @signature `"gammaCorrectionChanged(DzRenderOptions.GammaCorrection)"`
	 * @event
	 */
	gammaCorrectionChanged(gc) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the image size has changed.
	 * @signature `"imageSizeChanged(const QSize&)"`
	 * @event
	 */
	imageSizeChanged(size) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the motion blur offset has changed.
	 * @signature `"motionBlurOffsetChanged(double)"`
	 * @event
	 */
	motionBlurOffsetChanged(offset) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the motion blur percentage has changed.
	 * @signature `"motionBlurPctChanged(int)"`
	 * @event
	 */
	motionBlurPctChanged(pct) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the motion blur samples has changed.
	 * @signature `"motionBlurSamplesChanged(int)"`
	 * @event
	 */
	motionBlurSamplesChanged(samples) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the number of OpenGL passes has changed.
	 * @signature `"openGLPassesChanged(int)"`
	 * @event
	 */
	openGLPassesChanged(passes) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the pixel filter has changed.
	 * @signature `"pixelFilterChanged(DzRenderOptions.PixelFilter)"`
	 * @event
	 */
	pixelFilterChanged(filter) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the ray trace depth has changed.
	 * @signature `"rayTraceDepthChanged(int)"`
	 * @event
	 */
	rayTraceDepthChanged(depth) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the render current frame setting has changed.
	 * @signature `"renderCurrentFrameChanged(bool)"`
	 * @event
	 */
	renderCurrentFrameChanged(onOff) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the image filename for the render has changed.
	 * @signature `"renderImgFilenameChanged(const QString&)"`
	 * @event
	 */
	renderImgFilenameChanged(filename) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the image target type for the render has changed.
	 * @signature `"renderImgTargetChanged(DzRenderOptions.RenderImgTarget)"`
	 * @event
	 */
	renderImgTargetChanged(id) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the movie filename for the render has changed.
	 * @signature `"renderMovFilenameChanged(const QString&)"`
	 * @event
	 */
	renderMovFilenameChanged(filename) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the movie target type for the render has changed.
	 * @signature `"renderMovTargetChanged(DzRenderOptions.RenderMovTarget)"`
	 * @event
	 */
	renderMovTargetChanged(id) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the image series filename for the render has changed.
	 * @signature `"renderSerFilenameChanged(const QString&)"`
	 * @event
	 */
	renderSerFilenameChanged(filename) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the render type has changed.
	 * @signature `"renderStyleChanged(DzRenderOptions.RenderStyle)"`
	 * @event
	 */
	renderStyleChanged(style) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the render type has changed.
	 * @signature `"renderTypeChanged(DzRenderOptions.RenderType)"`
	 * @event
	 */
	renderTypeChanged(type) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the render to viewport setting has changed.
	 * @signature `"renderViewportChanged(bool)"`
	 * @event
	 */
	renderViewportChanged(onOff) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when any of the settings has changed.
	 * @signature `"settingsChanged()"`
	 * @event
	 */
	settingsChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the shading rate has changed.
	 * @signature `"shadingRateChanged(double)"`
	 * @event
	 */
	shadingRateChanged(rate) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the number of shadow samples has changed.
	 * @signature `"shadowSamplesChanged(int)"`
	 * @event
	 */
	shadowSamplesChanged(samples) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the show preview setting has changed.
	 * @signature `"showPreviewChanged(bool)"`
	 * @event
	 */
	showPreviewChanged(onoff) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the start time has changed.
	 * @signature `"startTimeChanged(DzTime)"`
	 * @event
	 */
	startTimeChanged(time) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the use GLSL setting has changed.
	 * @signature `"useGLSLChanged(bool)"`
	 * @event
	 */
	useGLSLChanged(onOff) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the motion blur setting has changed.
	 * @signature `"useMotionBlurChanged(bool)"`
	 * @event
	 */
	useMotionBlurChanged(onOff) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the X-axis filter width has changed.
	 * @signature `"xFilterWidthChanged(double)"`
	 * @event
	 */
	xFilterWidthChanged(width) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the number of X-axis pixel samples has changed.
	 * @signature `"xPixelSamplesChanged(int)"`
	 * @event
	 */
	xPixelSamplesChanged(samples) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the Y-axis filter width has changed.
	 * @signature `"yFilterWidthChanged(double)"`
	 * @event
	 */
	yFilterWidthChanged(width) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the number of Y-axis pixel samples has changed.
	 * @signature `"yPixelSamplesChanged(int)"`
	 * @event
	 */
	yPixelSamplesChanged(samples) {};

}
/**
 * An asset save filter for saving a Render Settings Preset in the DSON format.
 * See Also:
 */
class DzRenderSettingsAssetFilter extends DzAssetFileOutFilter {
	/**
	 * @description TODO:
	 * Add description.
	 */
	constructor() {};

}
/**
 * Deprecated
 * Exists only to keep code written prior to 4.6.2.23 working. Do not use in new code. Use DzTextureComponent instead.
 */
class DzRotateManip {
	/**
	 * @description Holds the amount of rotation, in degrees.
	 */
	constructor(rot = RotNone) {};
	/**
	 * @description TODO:
	 * Add description.
	 * @type {Number}
	 */
	degrees;
	/**
	 * @description ENUM: No rotation is performed.
	 */
	RotNone;
	/**
	 * @description ENUM: A 90 degree (clockwise) rotation is performed.
	 */
	Rot90;
	/**
	 * @description ENUM: A 180 degree rotation is performed.
	 */
	Rot180;
	/**
	 * @description ENUM: A 270 degree (clockwise) rotation is performed.
	 */
	Rot270;
	/**
	 * @returns Number The number of degrees the image will be rotated. Currently, the only possible values are 0, 90, 180, 270.
	 */
	getDegrees() {};
	/**
	 * @returns Rotation The type of rotation for the image.
	 */
	getRotation() {};
	/**
	 * @description Sets the amount of rotation for the image.
	 * @param {Number} degrees - The number of degrees to rotate the image. Currently, the only supported values are 0, 90, 180, 270. All other values are ignored.
	 */
	setDegrees(deg) {};
	/**
	 * @description Sets the type of rotation for the image.
	 * @param {Rotation} rot - The rotation to apply to the image.
	 */
	setRotation(rot) {};

}
/**
 * TODO:
 * Add detailed description.
 */
class DzRotationOrder extends Object {
	/**
	 * @description Default Constructor. Creates a new rotation order and sets it to XYZ by default.
	 */
	constructor() {};
	/**
	 * @description Creates a rotation order by parsing a string.
	 * @param {String} order - A string representation of the rotation order in the form "Axis1Axis2Axis3"
	 */
	constructor(order) {};
	/**
	 * @description Copy Constructor.
	 */
	constructor(order) {};
	/**
	 * @description Creates a new rotation order with the given axis order
	 */
	constructor(firstAxis, secondAxis, thirdAxis) {};
	/**
	 * @description Creates a new rotation order with the given enumerated representation.
	 * @since 4.6.4.98
	 */
	constructor(order) {};
	/**
	 * @description The index of the first axis of rotation. ( x = 0, y = 1, z = 2 )
	 * @type {Number}
	 */
	firstAxis;
	/**
	 * @description The enumerated representation of the order of rotation; XYZ = 0, XZY, YXZ, YZX, ZXY, ZYX.
	 * @type {Number}
	 */
	order;
	/**
	 * @description The index of the second axis of rotation. ( x = 0, y = 1, z = 2 )
	 * @type {Number}
	 */
	secondAxis;
	/**
	 * @description The index of the third axis of rotation. ( x = 0, y = 1, z = 2 )
	 * @type {Number}
	 */
	thirdAxis;
	/**
	 * @description Sets the order of rotation by the given axes.
	 * @since 4.14.1.32
	 * @param {Number} firstAxis - The first axis in the rotation order: x = 0, y = 1, z = 2
	 * @param {Number} secondAxis - The second axis in the rotation order: x = 0, y = 1, z = 2
	 * @param {Number} thirdAxis - Not used - value is implied.
	 */
	setOrder(firstAxis, secondAxis, thirdAxis) {};
	/**
	 * @returns String A string representation of this rotation order - all uppercase letters.
	 */
	toString() {};

}
/**
 * This class provides the ability to define RSL shaders for the elements that can use them (DzShaderMaterial, DzShaderLight, DzShaderCamera).
 * Optimizations:
 * Two methods in this class that should not be overlooked are setActiveInShadowPass() and setOnlyInShadowPass(), as they can have a significant impact on render times.
 * In the context of Surface shaders, the data members set by these methods are used to identify whether the shader participates during the shadow [map] pass - the pass for each contributing light in the scene that indicates the use of Deep Shadow Maps for shadows. This affords developers a couple of key benifits:
 * In the context of Light shaders, the data members set by these methods are used to identify whether this shader participates when the DzLight.ShadowType indicates shadowing is used. This affords developers the benifit of being able to use Light shaders that are optimized for either condition.
 * Property Naming:
 * Standard Shader and Materials Presets make an effort to copy as much as possible from one element to the next via DzElement.copyFrom(). In order for this to occur, the properties must match in both name and type. Provided below are the names and types used by DzDefaultMaterial, DzLight, DzDistantLight, DzSpotLight and DzPointLight in the event that you would like use properties that will work with the copyFrom() method.
 * Default Material:
 * Default Lights:
 * Default Camera:
 * Name
 * Type
 * Name
 * Type
 * Diffuse Color
 * DzColorProperty
 * Negative Bump
 * DzFloatProperty
 * Diffuse Strength
 * DzFloatProperty
 * Positive Bump
 * DzFloatProperty
 * Glossiness
 * DzFloatProperty
 * Displacement Strength
 * DzFloatProperty
 * Specular Color
 * DzColorProperty
 * Minimum Displacement
 * DzFloatProperty
 * Specular Strength
 * DzFloatProperty
 * Maximum Displacement
 * DzFloatProperty
 * Multiply Specular
 * 
 * Through Opacity
 * DzBoolProperty
 * Reflection Color
 * DzColorProperty
 * Ambient Color
 * DzColorProperty
 * Reflection Strength
 * DzFloatProperty
 * Ambient Strength
 * DzFloatProperty
 * Refraction Color
 * DzColorProperty
 * Opacity Strength
 * DzFloatProperty
 * Refraction Strength
 * DzFloatProperty
 * Bump Strength
 * DzFloatProperty
 * Index of Refraction
 * DzFloatProperty
 * Name
 * Type
 * Color
 * DzColorProperty
 * Intensity
 * DzFloatProperty
 * Shadow Type
 * DzEnumProperty
 * Shadow Bias
 * DzFloatProperty
 * Shadow Softness
 * DzFloatProperty
 * Illumination
 * DzEnumProperty
 * Spread Angle
 * DzFloatProperty
 * Name
 * Type
 * Focal Length
 * DzFloatProperty
 * DOF
 * DzBoolProperty
 * Depth of Field
 * DzFloatProperty
 * Aperature
 * DzFloatProperty
 * Samples:
 * See Also:
 * Recommended Reading:
 */
class DzRSLShader extends DzBase, DzRefCountedItem {
	/**
	 * @description Default Constructor.
	 * @attention Caution should be taken when instantiating this class. Until addShader(…) is called by DzShaderMaterial, DzShaderLight or DzShaderCamera, the object has no owner - which if you are not careful can lead to a memory leak. It is strongly suggested that the statement in the script immediately following that which instantiates this class add the object to the intended owner.
	 */
	constructor() {};
	/**
	 * @description ENUM: Null
	 */
	None;
	/**
	 * @description ENUM: Uses the RiSurfaceV API call when passed to the renderer.
	 */
	Surface;
	/**
	 * @description ENUM: Uses the RiLightSourceV API call when passed to the renderer.
	 */
	Light;
	/**
	 * @description ENUM: Uses the RiAreaLightSourceV API call when passed to the renderer.
	 */
	LightArea;
	/**
	 * @description ENUM: Uses the RiAtmosphereV API call when passed to the renderer.
	 */
	VolumeAtmosphere;
	/**
	 * @description ENUM: Uses the RiInteriorV API call when passed to the renderer.
	 */
	VolumeInterior;
	/**
	 * @description ENUM: Uses the RiExteriorV API call when passed to the renderer.
	 */
	VolumeExterior;
	/**
	 * @description ENUM: Uses the RiDisplacementV API call when passed to the renderer.
	 */
	Displacement;
	/**
	 * @description ENUM: Uses the RiImagerV API call when passed to the renderer.
	 */
	Imager;
	/**
	 * @description Adds a mappable numeric property to this shader object. DzColorProperty instances are passed as color type variables to the shader - all other DzNumericProperty derived instances are passed as float type variables. If the property is mapped, the absolute path of the image file is passed as a string type variable to the shader.
	 * @returns Boolean true if prop was successfully added to the list of properties used by this shader (e.g. did not already exist), otherwise false.
	 * @param {DzNumericProperty} prop - The property of which the value is passed to the shader for the param argument.
	 * @param {String} token - The name of the argument to the shader that the value of prop is passed to.
	 * @param {String} mapToken - The name of the argument to the shader that the path of prop 's map is passed to, if prop is mapped.
	 */
	addMappableProperty(prop, token, mapToken) {};
	/**
	 * @description Adds a mappable numeric property to this shader object (intended for situations where the property itself is passed as an attribute via the render-time script, or simply for display purposes, but the associated map should be passed as an arg to the shader). If the property is mapped, the absolute path of the image file is passed as a string type variable to the shader.
	 * @returns Boolean true if prop was successfully added to the list of properties used by this shader (e.g. did not already exist), otherwise false.
	 * @param {DzNumericProperty} prop - The property of which the map path is passed to the shader for the mapParam argument.
	 * @param {String} mapToken - The name of the argument to the shader that the path of prop 's map is passed to, if prop is mapped.
	 */
	addMapProperty(prop, mapToken) {};
	/**
	 * @description Adds a standard property to the list of properties used by this shader object, and adds the property to this shader object's owner if it does not already exist. DzColorProperty instances are passed as color type variables to the shader - all other DzNumericProperty derived instances are passed as float type variables. DzImageProperty instances are passed as string type variables (the value of which is the absolute path of the image file).
	 * @returns Boolean true if prop was successfully added to the list of properties used by this shader (e.g. did not already exist), otherwise false.
	 * @param {DzProperty} prop - The property of which the value is passed to the shader for the param argument.
	 * @param {String} token - The name of the argument to the shader that the value of prop is passed to.
	 */
	addShaderProperty(prop, token) {};
	/**
	 * @returns String The name of the argument to the shader that the map value of prop is passed to, if prop is mappable. Returns an empty string if prop is not found, or not mappable.
	 */
	findMapTokenByProperty(prop) {};
	/**
	 * @returns DzProperty The property named name if name is found, otherwise NULL.
	 */
	findProperty(name) {};
	/**
	 * @returns DzProperty The property that passes a value to the shader via token, if token is found. Undefined by default.
	 */
	findPropertyByToken(token) {};
	/**
	 * @returns String The name of the argument to the shader that the value of prop is passed to. Returns an empty string if prop is not found.
	 */
	findTokenByProperty(prop) {};
	/**
	 * @returns String The path to the definition script for this shader object.
	 */
	getDefinitionFile() {};
	/**
	 * @returns Number The number of properties currently used by this shader object.
	 */
	getNumProperties() {};
	/**
	 * @returns DzElement The owner (DzShaderMaterial, DzShaderLight, DzShaderCamera) of this object.
	 */
	getOwner() {};
	/**
	 * @description Get a property from this shader's property list.
	 * @returns DzProperty If which is within range, the property at the given index, otherwise NULL.
	 * @since 4.9.0.46
	 * @param {Number} which - Index of the property to return.
	 */
	getProperty(which) {};
	/**
	 * @returns Array A list of all the properties on this shader.
	 * @since 4.9.0.46
	 */
	getPropertyList() {};
	/**
	 * @returns String The relative path [from DzApp.getScriptsPath()] to the DAZ Script that is executed at render-time.
	 */
	getRenderTimeFile() {};
	/**
	 * @returns String The path to the RSL shader (sans-extension) for this shader object.
	 */
	getShaderFile() {};
	/**
	 * @returns ShaderType The RSL shader type for this object.
	 */
	getShaderType() {};
	/**
	 * @returns Boolean true if this shader participates in the bake pass, otherwise false.
	 */
	isActiveInBakePass() {};
	/**
	 * @returns Boolean true if this shader participates in the beauty pass, otherwise false.
	 */
	isActiveInBeautyPass() {};
	/**
	 * @returns Boolean true if this shader participates in the shadow pass, otherwise false.
	 */
	isActiveInShadowPass() {};
	/**
	 * @returns Boolean true if this shader ONLY participates in the shadow pass, otherwise false. Same as isActiveInShadowPass() && !isActiveInBeautyPass().
	 */
	isOnlyInShadowPass() {};
	/**
	 * @description Removes the given property, if it can be found.
	 * @returns Boolean true on success, otherwise false.
	 * @param {DzProperty} prop - The property to remove from the shader.
	 */
	removeProperty(prop) {};
	/**
	 * @description Removes the property named name, if it can be found.
	 * @returns Boolean true on success, otherwise false.
	 * @param {String} name - The name of the property to remove from the shader.
	 */
	removeProperty(name) {};
	/**
	 * @description Sets whether this shader object participates in the baking pass; false by default. If this is set to true, the shader must have a string input variable named "BakeFileName" and another string input variable named "BakeType".
	 */
	setActiveInBakePass(yesNo) {};
	/**
	 * @description Sets whether this shader object participates in the beauty/final pass; true by default.
	 */
	setActiveInBeautyPass(yesNo) {};
	/**
	 * @description Sets whether this shader object participates in the shadow pass; false by default.
	 */
	setActiveInShadowPass(yesNo) {};
	/**
	 * @description Sets the relative path of the (DAZ Script) file that builds this shader object's property list.
	 * @returns Boolean true if definitionFile is valid, otherwise false.
	 * @param {String} definitionFile - The relative path (from DzApp.getScriptsPath()) to the DAZ Script that creates this shader object's property list.
	 * @param {Boolean} doOverride - Whether or not to override the setting of the definition file if it has already been set.
	 * @param {Boolean} runScript - Whether or not to run the definition script upon setting it.
	 * @attention definitionFile is executed the moment the call to this method is made. A global variable named Shader - referring to the current DzRSLShader being rendered, exists for the duration of definitionFile. Referencing this variable from outside definitionFile will result in an error.
	 */
	setDefinitionFile(definitionFile, doOverride = false, runScript = true) {};
	/**
	 * @description Sets whether this shader object ONLY participates in the shadow pass; false by default. This is the same as calling setActiveInBeautyPass( false ) and setActiveInShadowPass( true ).
	 */
	setOnlyInShadowPass(yesNo) {};
	/**
	 * @description Sets the relative path of the (DAZ Script) file that will be executed at render-time. This script can set attributes as well as shader parameters for the element, and implement custom logic for special effects.
	 * @returns Boolean true if renderTimeFile is valid, otherwise false.
	 * @param {String} renderTimeFile - The relative path (from DzApp.getScriptsPath()) to the DAZ Script that sets any attributes or shader parameters at render time.
	 * @attention When renderTimeFile is executed, a global variable named Shader - referring to the current DzRSLShader being rendered - exists for the duration of renderTimeFile. Referencing this variable from outside renderTimeFile will result in an error. See the Render Time Functions for a list of special functions only available to this script.
	 */
	setRenderTimeFile(renderTimeFile) {};
	/**
	 * @description Sets the shader file that this shader object calls when rendered.
	 * @returns Boolean true if shaderFile plus the shader extension for the active renderer exists, otherwise false.
	 * @param {String} shaderFile - The relative path, from DzApp.getShadersPath(), to the shader that this shader object calls when rendered. The filename is expected to be sans-extension; e.g., "dzplastic", not "dzplastic.sl" or "dzplastic.sdl".
	 * @attention Shaders built for use with DAZ Studio do not require any arguments in the main function. Surfaces, for instance, make use of the Standard Shading Attributes "Color" and "Opacity" and are set via the "Diffuse Color" and "Opacity Strength" properties, respectively. These properties are created by the DzShaderMaterial constructor. The values of these attributes are accessible in the shader via the Predefined Surface Shader Variables "Cs" and "Os", respectively.For Volume shaders the render option "standardatmosphere" is set to 0. See 3Delight documentations for more information on this option and its effect on volume shaders.
	 */
	setShaderFile(shaderFile) {};
	/**
	 * @description Sets the type for this shader object.
	 * @returns Boolean
	 * @param {ShaderType} shaderType - The type of shader to set.
	 */
	setShaderType(shaderType) {};
	/**
	 * @returns DzVec3 The color as a DzVec3 gamma corrected if gamma correction is on and in the range of 0-1 for r, g, b. Alpha is ignored.
	 * @param {Color} color - The color to gamma correct.
	 */
	gammaCorrectColor(color) {};
	/**
	 * @description Adds a RiAttribute call with a float value.
	 * @param {String} attrib - The name of the attribute to set.
	 * @param {String} token - The name of the token to set.
	 * @param {Number} val - The float value to set.
	 */
	setFloatAttrib(attrib, token, val) {};
	/**
	 * @description Adds a RiAttribute call with an integer value.
	 * @param {String} attrib - The name of the attribute to set.
	 * @param {String} token - The name of the token to set.
	 * @param {Number} val - The integer value to set.
	 */
	setIntegerAttrib(attrib, token, val) {};
	/**
	 * @description Adds a RiAttribute call with a color value.
	 * @param {Number} attrib - The name of the attribute to set.
	 * @param {String} token - The name of the token to set.
	 * @param {Number} r - The value for the red color component.
	 * @param {Number} g - The value for the green color component.
	 * @param {Number} b - The value for the blue color component.
	 * @param {Boolean} isFloat - A flag for indicating whether or not the values passed to r, g and b are floating point numbers (in the 0-1 range).
	 * @attention If isFloat is false (the default), the values of r, g and b are assumed to be in the [0,255] range and will be converted to the [0,1] range prior to being passed on to the renderer. This allows for the values of the individual components to be driven beyond their normal range in cases where such an ability is needed, as with some subsurface scattering techniques.
	 */
	setColorAttrib(attrib, token, r, g, b, isFloat = false) {};
	/**
	 * @description Adds a RiAttribute call with a string value.
	 * @param {String} attrib - The name of the attribute to set.
	 * @param {String} token - The name of the token to set.
	 * @param {String} val - The string value to set.
	 */
	setStringAttrib(attrib, token, val) {};
	/**
	 * @description Adds a RiAttribute call with a point value.
	 * @param {String} attrib - The name of the attribute to set.
	 * @param {String} token - The name of the token to set.
	 * @param {DzVec3} vec - The point value (x, y, z) to set.
	 */
	setPointAttrib(attrib, token, vec) {};
	/**
	 * @description Adds a RiAttribute call with a vector value.
	 * @param {String} attrib - The name of the attribute to set.
	 * @param {String} token - The name of the token to set.
	 * @param {DzVec3} vec - The vector value (x, y, z) to set.
	 */
	setVectorAttrib(attrib, token, vec) {};
	/**
	 * @description Adds a RiAttribute call with a normal value.
	 * @param {String} attrib - The name of the attribute to set.
	 * @param {String} token - The name of the token to set.
	 * @param {DzVec3} vec - The normal value (x, y, z) to set.
	 */
	setNormalAttrib(attrib, token, vec) {};
	/**
	 * @description Adds a RiAttribute call with a matrix value.
	 * @param {String} attrib - The name of the attribute to set.
	 * @param {String} token - The name of the token to set.
	 * @param {DzMatrix4} mtx - The matrix value to set.
	 */
	setMatrixAttrib(attrib, token, mtx) {};
	/**
	 * @description Sets the value of a float token in the list of tokens passed to the shader.
	 * @param {String} token - The name of the token to set.
	 * @param {Number} val - The float value to set.
	 */
	setFloatToken(token, val) {};
	/**
	 * @description Sets the value of an integer token in the list of tokens passed to the shader.
	 * @param {String} token - The name of the token to set.
	 * @param {Number} val - The integer value to set.
	 */
	setIntegerToken(token, val) {};
	/**
	 * @description Sets the value of a color token in the list of tokens passed to the shader.
	 * @param {String} token - The name of the token to set.
	 * @param {Color} val - The color value to set.
	 */
	setColorToken(token, val) {};
	/**
	 * @description Sets the value of a string token in the list of tokens passed to the shader.
	 * @param {String} token - The name of the token to set.
	 * @param {String} val - The string value to set.
	 */
	setStringToken(token, val) {};
	/**
	 * @description Sets the value of a point token in the list of tokens passed to the shader.
	 * @param {String} token - The name of the token to set.
	 * @param {DzVec3} vec - The point value (x, y, z) to set.
	 */
	setPointToken(token, vec) {};
	/**
	 * @description Sets the value of a vector token in the list of tokens passed to the shader.
	 * @param {String} token - The name of the token to set.
	 * @param {DzVec3} vec - The vector value (x, y, z) to set.
	 */
	setVectorToken(token, vec) {};
	/**
	 * @description Sets the value of a normal token in the list of tokens passed to the shader.
	 * @param {String} token - The name of the token to set.
	 * @param {DzVec3} vec - The normal value (x, y, z) to set.
	 */
	setNormalToken(token, vec) {};
	/**
	 * @description Sets the value of a matrix token in the list of tokens passed to the shader.
	 * @param {String} token - The name of the token to set.
	 * @param {DzMatrix4} mtx - The matrix value to set.
	 */
	setMatrixToken(token, mtx) {};
	/**
	 * @description Convert six images representing six viewing directions into an environment map in the format required by the renderer.
	 * @param {String} px - The path of the image as viewed from the positive x direction.
	 * @param {String} nx - The path of the image as viewed from the negative x direction.
	 * @param {String} py - The path of the image as viewed from the positive y direction.
	 * @param {String} ny - The path of the image as viewed from the negative y direction.
	 * @param {String} pz - The path of the image as viewed from the positive z direction.
	 * @param {String} nz - The path of the image as viewed from the negative x direction.
	 * @param {String} tex - The path of the resultant image.
	 * @param {Number} fov - The full horizontal field of view used to generate the input images.
	 * @param {DzRenderOptions.PixelFilter} filter - The pre-defined filter to use.
	 * @param {Number} swidth - The filter width multiplier for the s direction.
	 * @param {Number} twidth - The filter width multiplier for the t direction.
	 * @param {Array} tokens - A list of additional String] tokens to set.
	 * @param {Array} params - A list of the corresponding basic type to set for each token.
	 * @attention In most cases, in DAZ Script 2, enumerated values are accessed like properties on the global object constructor (i.e. DzRenderOptions.Gaussian), but in this particular case the enumerations on DzRenderOptions for the filter argument are accessed like properties on an instance of the global object.
	 */
	makeCubeFaceEnvironment(px, nx, py, ny, pz, nz, tex, fov, filter, swidth, twidth, tokens, params) {};
	/**
	 * @description Convert an image representing a latitude-longitude map into an environment map in the format required by the renderer.
	 * @param {String} pic - The path of the source image.
	 * @param {String} tex - The path of the resultant image.
	 * @param {DzRenderOptions.PixelFilter} filter - The pre-defined filter to use.
	 * @param {Number} swidth - The filter width multiplier for the s direction.
	 * @param {Number} twidth - The filter width multiplier for the t direction.
	 * @param {Array} tokens - A list of additional String] tokens to set.
	 * @param {Array} params - A list of the corresponding basic type to set for each token.
	 * @attention In most cases, in DAZ Script 2, enumerated values are accessed like properties on the global object constructor (i.e. DzRenderOptions.Gaussian), but in this particular case the enumerations on DzRenderOptions for the filter argument are accessed like properties on an instance of the global object.
	 */
	makeLatLongEnvironment(pic, tex, filter, swidth, twidth, tokens, params) {};
	/**
	 * @description Convert a depth image into a shadow map in the format required by the renderer.
	 * @param {String} pic - The path of the source image.
	 * @param {String} tex - The path of the resultant image.
	 * @param {Array} tokens - A list of additional String] tokens to set.
	 * @param {Array} params - A list of the corresponding basic type to set for each token.
	 */
	makeShadow(pic, tex, tokens, params) {};
	/**
	 * @description Convert an image map into a map in the format required by the renderer.
	 * @param {String} pic - The path of the source image.
	 * @param {String} tex - The path of the resultant image.
	 * @param {String} swrap - The wrapping behavior of s coordinate.
	 * @param {String} twrap - The wrapping behavior of t coordinate.
	 * @param {DzRenderOptions.PixelFilter} filter - The pre-defined filter to use.
	 * @param {Number} swidth - The filter width multiplier for the s direction.
	 * @param {Number} twidth - The filter width multiplier for the t direction.
	 * @param {Array} tokens - A list of additional String] tokens to set.
	 * @param {Array} params - A list of the corresponding basic type to set for each token.
	 * @attention In most cases, in DAZ Script 2, enumerated values are accessed like properties on the global object constructor (i.e. DzRenderOptions.Gaussian), but in this particular case the enumerations on DzRenderOptions for the filter argument are accessed like properties on an instance of the global object.
	 */
	makeTexture(pic, tex, swrap, twrap, filter, swidth, twidth, tokens, params) {};
	/**
	 * @description Convert a bump map into a map in the format required by the renderer.
	 * @param {String} pic - The path of the source image.
	 * @param {String} tex - The path of the resultant image.
	 * @param {String} swrap - The wrapping behavior of s coordinate.
	 * @param {String} twrap - The wrapping behavior of t coordinate.
	 * @param {DzRenderOptions.PixelFilter} filter - The pre-defined filter to use.
	 * @param {Number} swidth - The filter width multiplier for the s direction.
	 * @param {Number} twidth - The filter width multiplier for the t direction.
	 * @param {Array} tokens - A list of additional String] tokens to set.
	 * @param {Array} params - A list of the corresponding basic type to set for each token.
	 * @attention In most cases, in DAZ Script 2, enumerated values are accessed like properties on the global object constructor (i.e. DzRenderOptions.Gaussian), but in this particular case the enumerations on DzRenderOptions for the filter argument are accessed like properties on an instance of the global object.
	 */
	makeBump(pic, tex, swrap, twrap, filter, swidth, twidth, tokens, params) {};
	/**
	 * @description Adds a RiSpec RiTransformBegin() call.
	 * @since 4.10.0.108
	 * @attention Each call to this method must be matched with a call to addTransformEnd() or addScheduledTransformEnd().
	 */
	addTransformBegin() {};
	/**
	 * @description Adds a RiSpec RiTransformEnd() call.
	 * @since 4.10.0.108
	 * @attention Each call to this method must be matched with an earlier call to addTransformBegin().
	 */
	addTransformEnd() {};
	/**
	 * @description Adds a RiSpec RiTransformEnd() call after the owner.
	 * @since 4.10.0.108
	 * @attention Each call to this method must be matched with an earlier call to addTransformBegin().
	 */
	addScheduledTransformEnd() {};
	/**
	 * @description Adds a RiSpec RiConcatTransform() call.
	 * @since 4.10.0.108
	 * @param {DzMatrix4} transform - The transform to concatenate.
	 */
	addConcatTransform(transform) {};
	/**
	 * @description Adds a RiSpec RiCoordinateSystem() call.
	 * @since 4.10.0.108
	 * @param {String} space - The name for the coordinate system.
	 */
	addCoordinateSystem(space) {};
	/**
	 * @description Adds a RiSpec RiCoordSysTransform() call.
	 * @since 4.10.0.108
	 * @param {String} space - The name for the coordinate system.
	 */
	addCoordSysTransform(space) {};
	/**
	 * @description Adds a RiSpec RiIdentity() call.
	 * @since 4.10.0.108
	 */
	addIdentity() {};
	/**
	 * @description Adds a RiSpec RiRotate() call.
	 * @since 4.10.0.108
	 * @param {Number} angle -
	 * @param {Number} dx -
	 * @param {Number} dy -
	 * @param {Number} dz -
	 */
	addRotate(angle, dx, dy, dz) {};
	/**
	 * @description Adds a RiSpec RiScale() call.
	 * @since 4.10.0.108
	 * @param {Number} dx -
	 * @param {Number} dy -
	 * @param {Number} dz -
	 */
	addScale(dx, dy, dz) {};
	/**
	 * @description Adds a RiSpec DDiScopedCoordinateSystem() call.
	 * @since 4.10.0.108
	 * @param {String} space - The name for the coordinate system.
	 */
	addScopedCoordinateSystem(space) {};
	/**
	 * @description Adds a RiSpec RiSkew() call.
	 * @since 4.10.0.108
	 * @param {Number} angle -
	 * @param {Number} dx1 -
	 * @param {Number} dy1 -
	 * @param {Number} dz1 -
	 * @param {Number} dx2 -
	 * @param {Number} dy2 -
	 * @param {Number} dz2 -
	 */
	addSkew(angle, dx1, dy1, dz1, dx2, dy2, dz2) {};
	/**
	 * @description Adds a RiSpec RiTransform() call.
	 * @since 4.10.0.108
	 * @param {DzMatrix4} transform - The transform to set.
	 */
	addTransform(transform) {};
	/**
	 * @description Adds a RiSpec RiTranslate() call.
	 * @since 4.10.0.108
	 * @param {Number} dx -
	 * @param {Number} dy -
	 * @param {Number} dz -
	 */
	addTranslate(dx, dy, dz) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Transmitted when a property is added to this element.
	 * @signature `"propertyAdded(DzProperty*)"`
	 * @event
	 */
	propertyAdded(prop) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Transmitted when a property is added to or removed from this element.
	 * @signature `"propertyListChanged()"`
	 * @event
	 */
	propertyListChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Transmitted when a property is removed from this element.
	 * @signature `"propertyRemoved(DzProperty*)"`
	 * @event
	 */
	propertyRemoved(prop) {};

}
/**
 * Deprecated
 * Save filters save out a subset of scene settings such as poses, light sets, camera sets, etc. in DAZ Script format. Script based presets are deprecated in favor of those in the DAZ Scene Object Notation (DSON) format.
 * See Also:
 */
class DzSaveFilter extends DzFileIO {
	/**
	 * @description ENUM: If the file name extension is .dsb, the file is saved as DAZScriptFile, otherwise as TextScriptFile
	 */
	UseExtension;
	/**
	 * @description ENUM: Plain text file - no Unicode support
	 */
	TextScriptFile;
	/**
	 * @description ENUM: Binary DAZ file format - supports Unicode characters
	 */
	DAZScriptFile;
	/**
	 * @description ENUM: Encrypted Binary DAZ file format - supports Unicode characters
	 */
	EncDAZScriptFile;
	/**
	 * @returns String The name of the filter.
	 */
	getDescription() {};
	/**
	 * @description TODO:
	 * Add description.
	 * @returns String
	 */
	getLoadSavePath() {};
	/**
	 * @description TODO:
	 * Add description.
	 */
	setLoadSavePath(path) {};
	/**
	 * @description Saves to a file.
	 * @returns DzError DZ_NO_ERROR on success, otherwise an error code.
	 * @param {String} filename - Name of the file to export to.
	 * @param {ScriptFileMode} mode - The type of file to save.
	 */
	writeFile(filename, mode) {};
	/**
	 * @description Saves to a file.
	 * @returns DzError DZ_NO_ERROR on success, otherwise an error code.
	 * @param {String} filename - Name of the file to export to.
	 * @param {ScriptFileMode} mode - The type of file to save.
	 * @param {DzFileIOSettings} options - The options for the save filter.
	 */
	writeFile(filename, mode, options) {};

}
/**
 * Deprecated
 * This class is responsible for the management of save filters that produce script-based presets - DzSaveFilter (deprecated). Script based presets are deprecated in favor of those in the DAZ Scene Object Notation (DSON) format.
 * There is only one instance of this manager in an application. This instance is created and owned by DzApp. Request the instance via DzApp.getSaveFilterMgr().
 * See Also:
 */
class DzSaveFilterMgr extends QObject {
	/**
	 * @description ENUM: If the file name extension is .dsb, the file is saved as DAZScriptFile, otherwise as TextScriptFile
	 */
	UseExtension;
	/**
	 * @description ENUM: Plain text file - no Unicode support
	 */
	TextScriptFile;
	/**
	 * @description ENUM: Binary DAZ file format - supports Unicode characters
	 */
	DAZScriptFile;
	/**
	 * @description ENUM: Encrypted Binary DAZ file format - supports Unicode characters
	 */
	EncDAZScriptFile;
	/**
	 * @returns Number The index of the save filter with the given class name.
	 * @param {String} className - The class name of the save filter to find.
	 */
	static findFilter(className) {};
	/**
	 * @returns DzSaveFilter A new instance of the i'th exporter in the list.
	 * @param {Number} i - The index of the save filter to get.
	 */
	static getFilter(i) {};
	/**
	 * @returns String The name of the i'th filter.
	 * @param {Number} i - The index of the save filter to get the name of.
	 */
	static getFilterName(i) {};
	/**
	 * @returns Number The number of save filters currently supported.
	 */
	static getNumFilters() {};
	/**
	 * @description Save the scene contents to a file with the given save filter. Prompts the user for a file to save to.
	 * @returns DzError DZ_NO_ERROR if the file export was successful.
	 * @param {Number} filterIndex - The index of the save filter class to use.
	 * @param {String} dir - The directory to start the file dialog in, if empty, the current load/save directory is used.
	 */
	doSave(filterIndex, dir = "") {};
	/**
	 * @returns String Last directory that files were saved to.
	 */
	getSavePath() {};
	/**
	 * @description Save the scene contents to a file with the given save filter.
	 * @returns DzError DZ_NO_ERROR if the file export was successfull.
	 * @param {ScriptFileMode} mode - The file mode for saving the script
	 * @param {String} fileName - The name of the file to export to.
	 * @param {String} filterName - Optional argument. Class name of the filter to use, or no argument to show a choose filter dialog.
	 */
	writeFile(mode, fileName, filterName = "") {};

}
/**
 * Deprecated
 * Exists only to keep code written prior to 4.6.2.23 working. Do not use in new code. Use DzTextureComponent instead.
 */
class DzScaleManip {
	/**
	 * @description Holds the scaling of the image across its height.
	 * @param {Number} w - The scaling of the image across its width. 1.0 is equivalent to 100%.
	 * @param {Number} h - The scaling of the image across its height. 1.0 is equivalent to 100%.
	 */
	constructor(w = 1.0, h = 1.0) {};
	/**
	 * @description Holds the scaling of the image across its width.
	 * @type {Number}
	 */
	heightScale;
	/**
	 * @description TODO:
	 * Add description.
	 * @type {Number}
	 */
	widthScale;
	/**
	 * @description Sets the scale for the image.
	 * @param {Number} w - The scaling of the image across its width. 1.0 is equivalent to 100%.
	 * @param {Number} h - The scaling of the image across its height. 1.0 is equivalent to 100%.
	 */
	setScale(w, h) {};

}
/**
 * There is only one of these objects in the application. It is the communication hub between the core code and the interface, so it tracks all nodes, skeletons, lights, cameras, etc. that become part of the scene. This object is directly available using the Global.Scene variable.
 */
class DzScene extends DzBase {
	/**
	 * @description Holds the asset id for the current scene.
	 * @type {String}
	 */
	assetId;
	/**
	 * @description Holds whether or not the asset for this modifier needs to be saved. (Read Only)
	 * @type {Boolean}
	 */
	assetNeedSave;
	/**
	 * @description Holds the asset URI for the current scene. (Read Only)
	 * @type {DzUri}
	 */
	assetUri;
	/**
	 * @description ENUM: DefaultMethod - If no nodes (or only the default camera) exist, this behaves as OpenNew. Otherwise, this behaves as MergeFile.
	 */
	DefaultMethod;
	/**
	 * @description ENUM: OpenNew - Resets the scene to its initial, clean state. All scene data is deleted and the undo stack is cleared.
	 */
	OpenNew;
	/**
	 * @description ENUM: MergeFile - Merges the file with any pre-existing elements in the scene.
	 */
	MergeFile;
	/**
	 * @description ENUM: Only visible items with geometry that cast shadows will be included.
	 */
	DzObjectsOnly;
	/**
	 * @description ENUM: Include lights in the bounding box.
	 */
	DzIncludeLightsFlag;
	/**
	 * @description ENUM: Include cameras in the bounding box.
	 */
	DzIncludeCamerasFlag;
	/**
	 * @description ENUM: Include items that do not cast shadows in the bounding box.
	 */
	DzIncludeNonShadowersFlag;
	/**
	 * @description ENUM: Include items that are not visible in the bounding box.
	 */
	DzIncludeNonVisibleFlag;
	/**
	 * @description ENUM: Include all nodes in the bounding box.
	 */
	DzIncludeAllFlag;
	/**
	 * @description Executes the node post-create script; a script that considers the active renderer and makes adjustments to the specified node - e.g., replaces instances of the "default" material for the application with the default material for the active renderer.
	 * @returns Boolean true if the node is valid, the node post-create script exists and can be loaded/executed without error, otherwise false.
	 * @since 4.11.0.255
	 * @param {DzNode} node - The node to execute the post-create script on; the node must have associated geometry.
	 * @param {String} settingsBase - The slash ("/") delimited base path of a DzAppSettings to look for a string value named after the classname of the active renderer - which is expected to hold the path to a file (can be relative to a mapped content directory, or absolute) to load if it exists.
	 * @param {DzNode} materialIDs - An optional list of element IDs for the materials to limit the scope of the script to; if this list is empty (default), all materials on the current shape of the node are considered.
	 */
	static executeNodePostCreateScript(node, settingsBase) {};
	/**
	 * @returns String The number suffix (if any), otherwise an empty string.
	 * @since 4.12.0.62
	 * @param {String} label - The string to get the number suffix from.
	 */
	static getLabelNumber(label) {};
	/**
	 * @returns String The number suffix (if any) in the name, otherwise an empty string.
	 * @since 4.12.0.62
	 * @param {String} name - The string to get the number suffix from.
	 */
	static getNameNumber(name) {};
	/**
	 * @returns String label with the number suffix(es) removed (if any), otherwise label.
	 * @param {String} label - The string to remove the number suffix(es) from.
	 */
	static stripLabelNumber(label) {};
	/**
	 * @returns String name with the " #" suffix removed (if any), otherwise name.
	 * @since 4.12.0.62
	 * @param {String} name - The string to remove the " #" suffix from.
	 */
	static stripNameNumber(name) {};
	/**
	 * @description Adds a scene data item to the scene.
	 * @returns DzError DZ_NO_ERROR on success, or an error code if it failed.
	 * @param {DzSceneData} item - The data item to add to the scene. The scene takes ownership of this object and deletes it when it is no longer used.
	 */
	addDataItem(item) {};
	/**
	 * @description Adds a node to the scene if it is not already in the scene.
	 * @returns Boolean true if the node was added to the scene, otherwise false.
	 * @param {DzNode} newNode - The node to add to the scene. The scene takes ownership of this object and deletes it when it is no longer used.
	 */
	addNode(node) {};
	/**
	 * @description Adds a world-space modifier to the scene's modifier stack.
	 * @returns DzError DZ_NO_ERROR on success, otherwise an error code.
	 * @param {wsmodifier_dz} modifier - The world-space modifier to add to the scene. The scene takes ownership of this object and deletes it when it is no longer used.
	 * @param {Number} index - The location in the list that where the modifier will be inserted. If index is less than 0, the modifier is appended to the end of the stack.
	 */
	addWSModifier(modifier, index = -1) {};
	/**
	 * @description Starts a time-editing operation. All changes to scene time, play range, and animation range that occur between this call and a call to finishTimeEdit() will be wrapped into a single undo item.
	 */
	beginTimeEdit() {};
	/**
	 * @description Resets the scene to its initial, clean state. All data is deleted and the undo stack is cleared.
	 */
	clear() {};
	/**
	 * @description Attempts to find a camera with the given name in the scene.
	 * @returns DzCamera The first camera in the scene with the given name (if any), otherwise NULL.
	 * @param {String} name - The name of the camera to find.
	 */
	findCamera(name) {};
	/**
	 * @description Attempts to find a camera with the given label in the scene.
	 * @returns DzCamera The first camera in the scene with the given label (if any), otherwise NULL.
	 * @param {String} label - The label of the camera to find.
	 */
	findCameraByLabel(label) {};
	/**
	 * @returns DzSceneData The scene data item with the given name (if any), otherwise NULL.
	 */
	findDataItem(name) {};
	/**
	 * @description Attempts to find a light with the given name in the scene.
	 * @returns DzLight The first light in the scene with the given name (if any), otherwise NULL.
	 * @param {String} name - The name of the light to find.
	 */
	findLight(name) {};
	/**
	 * @description Attempts to find a light with the given label in the scene.
	 * @returns DzLight The first light in the scene with the given label (if any), otherwise NULL.
	 * @param {String} label - The label of the light to find.
	 */
	findLightByLabel(label) {};
	/**
	 * @returns DzMaterial The material with the matching element id (if any), otherwise NULL.
	 * @param {Number} id - The number used to uniquely identify the material in the scene.
	 */
	findMaterialByElementID(id) {};
	/**
	 * @returns DzModifier The modifier with the matching element id (if any), otherwise NULL.
	 * @param {Number} id - The number used to uniquely identify the modifier in the scene.
	 */
	findModifierByElementID(id) {};
	/**
	 * @description Attempts to find a node with the given name in the scene.
	 * @returns DzNode The first node in the scene with the given name (if any), otherwise NULL.
	 * @param {String} name - The name of the node to find.
	 */
	findNode(name) {};
	/**
	 * @returns DzNode The node with the matching element id (if any), otherwise NULL.
	 * @param {Number} id - The number used to uniquely identify the node in the scene.
	 */
	findNodeByElementID(id) {};
	/**
	 * @description Attempts to find a node with the given label in the scene.
	 * @returns DzNode The first node in the scene with the given label (if any), otherwise NULL.
	 * @param {String} label - The label of the node to find.
	 */
	findNodeByLabel(label) {};
	/**
	 * @returns Number The index of the node in the list, or -1 if not found.
	 * @param {DzNode} node - The node to search for in the nodes list.
	 */
	findNodeIndex(node) {};
	/**
	 * @returns DzObject The object with the matching element id (if any), otherwise NULL.
	 * @param {Number} id - The number used to uniquely identify the object in the scene.
	 */
	findObjectByElementID(id) {};
	/**
	 * @returns DzShape The shape with the matching element id (if any), otherwise NULL.
	 * @param {Number} id - The number used to uniquely identify the shape in the scene.
	 */
	findShapeByElementID(id) {};
	/**
	 * @description Attempts to find a singleton node with the given identifier in the scene.
	 * @returns DzNode The singleton node in the scene with the given identifier (if any), otherwise NULL.
	 * @since 4.12.2.20
	 * @param {String} guidStr - The GUID of the singleton node to find.
	 */
	findSingletonNode(guidStr) {};
	/**
	 * @description Attempts to find a skeleton with the given name in the scene.
	 * @returns DzSkeleton The first skeleton in the scene with the given name (if any), otherwise NULL.
	 * @param {String} name - The name of the skeleton to find.
	 */
	findSkeleton(name) {};
	/**
	 * @description Attempts to find a skeleton with the given label in the scene.
	 * @returns DzSkeleton The first skeleton in the scene with the given label, otherwise NULL.
	 * @param {String} label - The label of the skeleton to find.
	 */
	findSkeletonByLabel(label) {};
	/**
	 * @returns Number The index of the skeleton in the list, or -1 if not found.
	 * @param {DzSkeleton} skeleton - The skeleton to search for in the nodes list.
	 */
	findSkeletonIndex(skeleton) {};
	/**
	 * @description Ends a time editing operation started with a call to beginTimeEdit().
	 */
	finishTimeEdit() {};
	/**
	 * @returns DzTimeRange The current animation range.
	 */
	getAnimRange() {};
	/**
	 * @returns String The current asset load path of this scene.
	 */
	getAssetLoadPath() {};
	/**
	 * @returns DzAudioClip An editable copy of the current audio clip for the scene. This will be NULL if there is no audio for the scene.
	 */
	getAudio() {};
	/**
	 * @returns Number The frame number on which the audio should start playing.
	 */
	getAudioStartFrame() {};
	/**
	 * @returns DzAuthor The author of the current scene (if any), otherwise NULL.
	 * @since 4.8.1.19
	 */
	getAuthor() {};
	/**
	 * @returns DzBackdrop The current backdrop object for the scene.
	 */
	getBackdrop() {};
	/**
	 * @description Calculate the bounding box for the current scene.
	 * @returns DzBox3 A world-space bounding box that encompasses all items in the scene (that match the criteria of the given flags).
	 * @param {Number} flags - A set of flags that specify which types of nodes should be included.
	 */
	getBoundingBox(flags = DzIncludeAllFlag) {};
	/**
	 * @returns DzCamera The camera at the given index (if valid), otherwise NULL.
	 * @param {Number} index - The index of the camera to return.
	 */
	getCamera(index) {};
	/**
	 * @returns Array A list containing all cameras in the scene.
	 */
	getCameraList() {};
	/**
	 * @returns DzSceneData The data item for the scene at the given index (if valid), otherwise NULL.
	 * @param {Number} index - The index of the data item to return.
	 */
	getDataItem(index) {};
	/**
	 * @returns Array A list of the data items attached to the scene.
	 */
	getDataItemList() {};
	/**
	 * @returns String The filename that this scene was last saved to or read from (if any), otherwise an empty string.
	 */
	getFilename() {};
	/**
	 * @returns Number The current time as a frame number based on the current time step.
	 */
	getFrame() {};
	/**
	 * @returns DzNode The currently highlighted node in the scene.
	 */
	getHighlightNode() {};
	/**
	 * @returns DzLight The light at the given index (if valid), otherwise NULL.
	 * @param {Number} index - The index of the light to return.
	 */
	getLight(index) {};
	/**
	 * @returns Array A list containing all lights in the scene.
	 */
	getLightList() {};
	/**
	 * @returns DzNode The node at the given index (if valid), otherwise NULL.
	 * @param {Number} index - The index of the node to return.
	 */
	getNode(index) {};
	/**
	 * @returns Array A list of all nodes in the scene.
	 */
	getNodeList() {};
	/**
	 * @returns Number The number of cameras in the scene.
	 */
	getNumCameras() {};
	/**
	 * @returns Number The number of data items attached to the scene
	 */
	getNumDataItems() {};
	/**
	 * @returns Number The number of lights in the scene.
	 */
	getNumLights() {};
	/**
	 * @returns Number The number of nodes in the scene.
	 */
	getNumNodes() {};
	/**
	 * @returns Number The number of currently selected cameras.
	 */
	getNumSelectedCameras() {};
	/**
	 * @returns Number The number of currently selected lights.
	 */
	getNumSelectedLights() {};
	/**
	 * @returns Number The number of currently selected nodes.
	 */
	getNumSelectedNodes() {};
	/**
	 * @returns Number The number of currently selected skeletons.
	 */
	getNumSelectedSkeletons() {};
	/**
	 * @returns Number The number of selected time ranges.
	 */
	getNumSelectedTimeRanges() {};
	/**
	 * @returns Number The number of skeletons in the scene.
	 */
	getNumSkeletons() {};
	/**
	 * @returns Number The number of storable_dz items in the scene.
	 */
	getNumStorablesInScene() {};
	/**
	 * @returns Number The number of world-space modifiers in the scene.
	 */
	getNumWSModifiers() {};
	/**
	 * @returns DzTimeRange The current play range.
	 */
	getPlayRange() {};
	/**
	 * @returns Boolean true if light preview is enabled, otherwise false.
	 */
	getPreviewLights() {};
	/**
	 * @returns DzNode The primary selected node in the scene, or NULL if there is no currently selected node. The primary selected node is the last node that was selected, or can be set via function calls.
	 */
	getPrimarySelection() {};
	/**
	 * @returns DzCamera The camera at index in the list of selected cameras (if valid), otherwise NULL.
	 * @param {Number} index - The index of the selected camera to return.
	 */
	getSelectedCamera(index) {};
	/**
	 * @returns Array A list containing all selected cameras in the scene.
	 */
	getSelectedCameraList() {};
	/**
	 * @returns DzLight The light at index in the list of selected lights (if valid), otherwise NULL.
	 * @param {Number} index - The index of the selected light to return.
	 */
	getSelectedLight(index) {};
	/**
	 * @returns Array A list containing all selected lights in the scene.
	 */
	getSelectedLightList() {};
	/**
	 * @returns DzNode The node at index in the list of selected nodes (if valid), otherwise NULL.
	 * @param {Number} index - The index of the selected node to return.
	 */
	getSelectedNode(index) {};
	/**
	 * @returns Array A list containing all selected nodes in the scene.
	 */
	getSelectedNodeList() {};
	/**
	 * @returns DzSkeleton The skeleton at index in the list of selected skeletons (if valid), otherwise NULL.
	 * @param {Number} index - The index of the selected skeleton to return.
	 */
	getSelectedSkeleton(index) {};
	/**
	 * @returns Array A list containing all selected skeletons in the scene.
	 */
	getSelectedSkeletonList() {};
	/**
	 * @returns DzSkeleton The skeleton at the given index (if valid), otherwise NULL.
	 * @param {Number} index - The index of the skeleton to return.
	 */
	getSkeleton(index) {};
	/**
	 * @returns Array A list containing all skeletons in the scene.
	 */
	getSkeletonList() {};
	/**
	 * @returns Array A list containing all lights in the scene sorted by render priority.
	 */
	getSortedLightList() {};
	/**
	 * @returns DzTime The current scene time as a DzTime.
	 */
	getTime() {};
	/**
	 * @returns DzTime The time step the animation is incremented by at each frame.
	 */
	getTimeStep() {};
	/**
	 * @returns String label if the value provided is already unique, otherwise label with a suffix that causes it to be unique.
	 * @param {DzNode} label - The node label to make unique; stripLabelNumber() is called on this value.
	 * @param {DzNode} node - The top-level node that the label is intended for; may be null; this node will be ignored when validating uniqueness.
	 * @attention Bones and hidden nodes that are parented to nodes within a skeleton's hierarchy are not taken into account when ensuring uniqueness.
	 */
	getUniqueTopLevelLabel(label, node = null) {};
	/**
	 * @returns String name if the value provided is already unique, otherwise name with a suffix that causes it to be unique.
	 * @since 4.12.0.61
	 * @param {DzNode} name - The node name to make unique; stripNameNumber() is called on this value.
	 * @param {DzNode} node - The top-level node that the name is intended for; may be null; this node will be ignored when validating uniqueness.
	 * @attention Bones and hidden nodes that are parented to nodes within a skeleton's hierarchy are not taken into account when ensuring uniqueness.
	 */
	getUniqueTopLevelName(name, node = null) {};
	/**
	 * @returns DzWsmodifier The world-space modifier at the given index (if valid), otherwise NULL.
	 * @param {Number} index - The index of the world-space modifier to return.
	 */
	getWSModifier(index) {};
	/**
	 * @returns Array A list containing all world-space modifiers in the scene.
	 */
	getWSModifierList() {};
	/**
	 * @description Invalidates the scene, flagging it as needing to be redrawn.
	 */
	invalidate() {};
	/**
	 * @description TODO:
	 * Add description.
	 */
	invalidateLightSorting() {};
	/**
	 * @returns Boolean true if the scene is currently in a clearing operation, otherwise false.
	 */
	isClearing() {};
	/**
	 * @returns Boolean true if the scene is currently in a loading from a .daz native scene.
	 */
	isDAZLoading() {};
	/**
	 * @returns Boolean true if the scene is currently in a loading operation, otherwise false.
	 */
	isLoading() {};
	/**
	 * @returns Boolean true if the looping of playback is enabled, otherwise false.
	 */
	isLoopingEnabled() {};
	/**
	 * @returns Boolean true if the animation is currently playing, otherwise false.
	 */
	isPlaying() {};
	/**
	 * @description Deprecated
	 * @returns DzError DZ_NO_ERROR on success, otherwise an error code.
	 * @param {String} filename - The name of the native format file to load.
	 * @param {DzOpenMethod} method - The method for combining the contents of the file with the current scene contents.
	 * @attention Prior to 4.12.2.39, only the deprecated .daz format was supported by this function.
	 */
	loadScene(filename, method) {};
	/**
	 * @description Sets looping of playback on/off.
	 * @param {Boolean} onOff - If true, playback of animation will continue until the user stops it, looping back to the first frame each time the end of the animation is reached. If false, playback of the animation will stop when the end of the animation is reached.
	 */
	loopPlayback(onOff) {};
	/**
	 * @description Indicate that the scene has changed since the last save.
	 */
	markChanged() {};
	/**
	 * @returns Boolean true if the scene needs to be saved, otherwise false.
	 */
	needsSave() {};
	/**
	 * @description Pauses playback of the current animation.
	 */
	pause() {};
	/**
	 * @description Start playback of the current play range.
	 * @param {Boolean} realtime - If true, frames will be dropped or paused as needed to keep the animation playing in realtime. Otherwise, the animation is played frame by frame as it can be drawn.
	 */
	play(realtime = true) {};
	/**
	 * @description Removes all cameras from the scene.
	 */
	removeAllCameras() {};
	/**
	 * @description Removes all lights from the scene.
	 */
	removeAllLights() {};
	/**
	 * @description Removes the scene data item from the scene.
	 * @returns DzError DZ_NO_ERROR if the item was successfully removed, otherwise an error code.
	 * @param {DzSceneData} item - The data item to remove from the scene.
	 */
	removeDataItem(item) {};
	/**
	 * @description Removes the given node from the scene.
	 * @returns Boolean true if the node was in the scene and was successfully removed, otherwise false.
	 * @param {DzNode} node - The node to remove from the scene.
	 */
	removeNode(node) {};
	/**
	 * @description Removes all nodes that have items in their hierarchy that are currently selected.
	 */
	removeSelected() {};
	/**
	 * @description Removes the modifier from the scene's modifier stack if it exists.
	 * @returns DzError DZ_NO_ERROR on success, otherwise an error code.
	 * @param {wsmodifier_dz} modifier - The world-space modifier to remove from the scene.
	 */
	removeWSModifier(modifier) {};
	/**
	 * @description Deprecated
	 * @returns DzError DZ_NO_ERROR on success, otherwise an error code.
	 * @param {String} filename - The file to save the scene to. If empty, the scene will be saved to the filename that it was last saved to, if any. If no prior file name exists, DZ_ILLEGAL_ARGUMENT_ERROR is returned. If a filename is passed, it becomes the save filename that will be used for future saves. If the file cannot be opened or saved, DZ_OPERATION_FAILED_ERROR is returned.
	 */
	saveScene(filename = "") {};
	/**
	 * @description Saves a thumbnail-size OpenGL render of the current viewport to the given file name.
	 * @param {String} filename - The filename to save the thumbnail to. This should have an extension that is supported by the image manager.
	 */
	saveThumbnail(filename) {};
	/**
	 * @description Sets the selection state for all nodes in the scene.
	 * @param {Boolean} onOff - If true all nodes in the scene will be selected. If false, all nodes will be deselected.
	 */
	selectAllNodes(onOff) {};
	/**
	 * @description Sets the selection state for all skeletons in the scene.
	 * @param {Boolean} onOff - If true all skeletons in the scene will be selected. If false, all skeletons will be deselected.
	 */
	selectAllSkeletons(onOff) {};
	/**
	 * @description Selects/Deselects all time range.
	 * @param {Boolean} onOff - If true, all ranges are selected. If false, all ranges are deselected.
	 */
	selectAllTime(onOff) {};
	/**
	 * @description Sets the animation range for the scene.
	 * @param {DzTimeRange} range - The time range to set for the entire animation.
	 */
	setAnimRange(range) {};
	/**
	 * @description Sets the asset load path of this scene.
	 * @param {String} absolutePath - The absolute path to set.
	 */
	setAssetLoadPath(absolutePath) {};
	/**
	 * @description Sets the current audio object and the frame on which it should start playing.
	 * @param {DzAudioClip} audio - The new audio clip for the scene. Pass in NULL to clear the current audio clip.
	 * @param {Number} startFrame - The frame at which the audio should begin playing.
	 */
	setAudio(audio, startFrame = 0) {};
	/**
	 * @description Sets the backdrop object.
	 * @param {DzBackdrop} backdrop - The new backdrop for the scene. The scene takes ownership of this object and deletes it when it is no longer needed.
	 */
	setBackdrop(backdrop) {};
	/**
	 * @description Set the scene time to the given frame based on current time step.
	 * @param {Number} frame - The frame to set as the current scene time.
	 */
	setFrame(frame) {};
	/**
	 * @description Sets the currently highlighted node. This is typically called from DzViewTool-derived classes.
	 * @param {DzNode} node - The node that will become the currently highlighted node.
	 */
	setHighlightNode(node) {};
	/**
	 * @description Sets the play range for the scene.
	 * @param {DzTimeRange} range - The time range to set for animation playback.
	 */
	setPlayRange(range) {};
	/**
	 * @description Sets whether or not light preview is enabled or disabled.
	 * @param onOff - If true, the light preview is enabled.
	 */
	setPreviewLights(onoff) {};
	/**
	 * @description Sets the node to use as the primary selection.
	 * @returns Boolean true if the node was made the new primary selection, otherwise false.
	 * @param {DzNode} node - The selected node that should be flagged as the primary selection. The node must already be selected.
	 */
	setPrimarySelection(node) {};
	/**
	 * @description Set the scene time to the given time.
	 * @param {DzTime} time - The time to set as the current scene time.
	 */
	setTime(time) {};
	/**
	 * @description Sets the Frame rate for the scene.
	 * @param {DzTime} tm - The number of time ticks per frame.
	 */
	setTimeStep(time) {};
	/**
	 * @description Step time forward/back by number of frames.
	 * @param {Number} nFrames - The number of frames to step from the current position.
	 * @param {Boolean} forward - If true, current frame count is increased nFrames. If false, current frame count is decreased.
	 */
	stepTime(nFrames = 1, forward = true) {};
	/**
	 * @description Recursively updates all nodes in the scene.
	 */
	update() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Transmitted immediately before a node is removed from the scene.
	 * @signature `"aboutToRemoveNode(DzNode*)"`
	 * @event
	 */
	aboutToRemoveNode(node) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted just before the scene is rendered.
	 * @signature `"aboutToRender(DzRenderer*)"`
	 * @event
	 */
	aboutToRender(r) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Transmitted after the scene play range is changed.
	 * @signature `"animRangeChanged(const DzTimeRange&)"`
	 * @event
	 */
	animRangeChanged(range) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Transmitted just after the scene has been modified.
	 * @signature `"assetModified()"`
	 * @event
	 */
	assetModified() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Transmitted just after the scene has been saved.
	 * @signature `"assetWasSaved()"`
	 * @event
	 */
	assetWasSaved() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Transmitted just after the backdrop has changed.
	 * @signature `"backdropChanged()"`
	 * @event
	 */
	backdropChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Transmitted when cameras are added to the scene.
	 * @signature `"cameraAdded(DzCamera*)"`
	 * @event
	 */
	cameraAdded(node) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Transmitted when cameras are added to or removed from the scene.
	 * @signature `"cameraListChanged()"`
	 * @event
	 */
	cameraListChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Transmitted when cameras are removed from the scene.
	 * @signature `"cameraRemoved(DzCamera*)"`
	 * @event
	 */
	cameraRemoved(node) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Transmitted after the camera selection list changes.
	 * @signature `"cameraSelectionListChanged()"`
	 * @event
	 */
	cameraSelectionListChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Transmitted after the scene time is changed.
	 * @signature `"currentTimeChanged( DzTime, DzTime )"`
	 * @event
	 */
	currentTimeChanged(oldTime, newTime) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Transmitted if the scene has changed and needs to be redrawn.
	 * @signature `"drawnDataChanged()"`
	 * @event
	 */
	drawnDataChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Transmitted when the highlight node changes.
	 * @signature `"highlightNodeChanged(DzNode*)"`
	 * @event
	 */
	highlightNodeChanged(node) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Transmitted when lights are added to the scene.
	 * @signature `"lightAdded(DzLight*)"`
	 * @event
	 */
	lightAdded(node) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Transmitted when lights are added to or removed from the scene.
	 * @signature `"lightListChanged()"`
	 * @event
	 */
	lightListChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Transmitted when lights are removed from the scene.
	 * @signature `"lightRemoved(DzLight*)"`
	 * @event
	 */
	lightRemoved(node) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Transmitted after the light selection list changes.
	 * @signature `"lightSelectionListChanged()"`
	 * @event
	 */
	lightSelectionListChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Transmitted when the enabled state of playback looping changes.
	 * @signature `"loopPlaybackChanged(bool)"`
	 * @event
	 */
	loopPlaybackChanged(onOff) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the material list of a node in the scene has changed.
	 * @signature `"materialListChanged()"`
	 * @event
	 */
	materialListChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the material selection in the scene has changed.
	 * @signature `"materialSelectionChanged()"`
	 * @event
	 */
	materialSelectionChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Transmitted when nodes are added to the scene.
	 * @signature `"nodeAdded(DzNode*)"`
	 * @event
	 */
	nodeAdded(node) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Transmitted when nodes are added to or removed from the scene.
	 * @signature `"nodeListChanged()"`
	 * @event
	 */
	nodeListChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Transmitted when nodes are removed from the scene.
	 * @signature `"nodeRemoved(DzNode*)"`
	 * @event
	 */
	nodeRemoved(node) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Transmitted after the node selection list changes.
	 * @signature `"nodeSelectionListChanged()"`
	 * @event
	 */
	nodeSelectionListChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Transmitted when playback of the scene stops.
	 * @signature `"playbackFinished()"`
	 * @event
	 */
	playbackFinished() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Transmitted when playback of the scene begins.
	 * @signature `"playbackStarted()"`
	 * @event
	 */
	playbackStarted() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Transmitted after the scene play range is changed.
	 * @signature `"playRangeChanged(const DzTimeRange&)"`
	 * @event
	 */
	playRangeChanged(range) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Transmitted when the primary node selection changes.
	 * @signature `"primarySelectionChanged(DzNode*)"`
	 * @event
	 */
	primarySelectionChanged(node) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted just after the scene is rendered.
	 * @signature `"renderFinished(DzRenderer*)"`
	 * @event
	 */
	renderFinished(r) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Transmitted after the scene gets cleared.
	 * @signature `"sceneCleared()"`
	 * @event
	 */
	sceneCleared() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted just before the scene is cleared.
	 * @signature `"sceneClearStarting()"`
	 * @event
	 */
	sceneClearStarting() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Transmitted when the name of the current scene file has changed.
	 * @signature `"sceneFilenameChanged(const QString&)"`
	 * @event
	 */
	sceneFilenameChanged(newName) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Transmitted after loading a scene file. This may not always be emitted after every sceneLoadStarting() signal if there were errors during file loading.
	 * @signature `"sceneLoaded()"`
	 * @event
	 */
	sceneLoaded() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Transmitted just before loading a scene.
	 * @signature `"sceneLoadStarting()"`
	 * @event
	 */
	sceneLoadStarting() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Transmitted after saving a scene file. This may not always be emitted after every sceneSaveStarting() signal if there were errors during file saving.
	 * @signature `"sceneSaved( String )"`
	 * @event
	 */
	sceneSaved(filename) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Transmitted just before saving a scene.
	 * @signature `"sceneSaveStarting( String )"`
	 * @event
	 */
	sceneSaveStarting(filename) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Transmitted just after the scene topology has changed.
	 * @signature `"sceneTopologyChanged()"`
	 * @event
	 */
	sceneTopologyChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted as single node is being added to the scene.
	 * @signature `"singletonNodeAdded(DzNode*)"`
	 * @event
	 */
	singletonNodeAdded(node) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Transmitted when skeletons are added to the scene.
	 * @signature `"skeletonAdded(DzSkeleton*)"`
	 * @event
	 */
	skeletonAdded(node) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Transmitted when skeletons are added to or removed from the scene.
	 * @signature `"skeletonListChanged()"`
	 * @event
	 */
	skeletonListChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Transmitted when skeletons are removed from the scene.
	 * @signature `"skeletonRemoved(DzSkeleton*)"`
	 * @event
	 */
	skeletonRemoved(node) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Transmitted after the skeleton selection list changes.
	 * @signature `"skeletonSelectionListChanged()"`
	 * @event
	 */
	skeletonSelectionListChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Transmitted after the scene time is changed.
	 * @signature `"timeChanged(DzTime)"`
	 * @event
	 */
	timeChanged(time) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Transmitted when time is about to change.
	 * @signature `"timeChanging(DzTime)"`
	 * @event
	 */
	timeChanging(newTime) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Transmitted after the scene time selection is changed.
	 * @signature `"timeSelectionChanged()"`
	 * @event
	 */
	timeSelectionChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Transmitted after the scene time step is changed.
	 * @signature `"timeStepChanged(DzTime)"`
	 * @event
	 */
	timeStepChanged(time) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Transmitted when world-space modifiers are added to the scene.
	 * @signature `"wsModifierAdded(DzWSModifier*)"`
	 * @event
	 */
	wsModifierAdded(modifier) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Transmitted when world-space modifiers are removed from the scene.
	 * @signature `"wsModifierRemoved(DzWSModifier*)"`
	 * @event
	 */
	wsModifierRemoved(modifier) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Transmitted when world-space modifiers are added to or removed from the scene.
	 * @signature `"wsModifierStackChanged()"`
	 * @event
	 */
	wsModifierStackChanged() {};

}
/**
 * An asset save filter for saving a Scene in the DSON format.
 * See Also:
 */
class DzSceneAssetFilter extends DzAssetFileOutFilter {
	/**
	 * @description TODO:
	 * Add description.
	 */
	constructor() {};

}
/**
 * See Also:
 */
class DzSceneData extends DzCustomData {

}
/**
 * TODO:
 * Add detailed description.
 */
class DzSceneHelper extends QObject {
	/**
	 * @description Default Constructor
	 */
	constructor() {};
	/**
	 * @returns Array An list of the collected unique nodes.
	 * @param {Boolean} selectedOnly - Whether or not to limit the nodes to only those that are selected.
	 * @param {Boolean} boneTopSelected - Whether or not to climb the lineage of any DzBone encountered, and instead collect the top-most selected.
	 * @param {Boolean} boneSkeleton - Whether or not to collect the DzSkeleton when a DzBone is encountered; overrides boneTopSelected.
	 */
	collectNodes(selectedOnly, boneTopSelected, boneSkeleton) {};
	/**
	 * @returns DzERCLink The ERC link created, or NULL.
	 * @param node - The DzNode with the DzNumericProperty to be controlled.
	 * @param {String} propertyName - The name of the DzNumericProperty to be controlled.
	 * @param controlNode - The DzNode with the DzNumericProperty used to control.
	 * @param {String} controllerName - The name of the DzNumericProperty used to control.
	 * @param {Number} type - The type of calculation this link performs.
	 * @param {Number} scalar - The value of the multiplier for the link.
	 * @param {Number} addend - The value of the additive offset for the link.
	 */
	createLink(bone, propertyName, controlBone, controllerName, type, scalar, addend) {};
	/**
	 * @returns DzMorph The morph created, or NULL if the morph could not be created.
	 * @param node - The DzNode with the DzObject to create the morph_dz on.
	 * @param {String} name - The name of the morph_dz to create.
	 * @param {Array} deltas - A two dimensional Array, an array of 4 element arrays, where the first element of each array is the index of the vertex to set delta values for, the second element is the X-axis value for the delta, the third element is the Y-axis value for the delta, and the fourth element is the Z-axis value for the delta.
	 * @param {Boolean} overwrite - Whether or not to replace a morph_dz named name.
	 */
	createMorph(bone, name, deltas, overwrite) {};
	/**
	 * @returns DzProperty The first control property of the property with the given internal name, or NULL.
	 * @param {String} propertyName - The name of the property to find the control property for.
	 * @param {DzNode} node - The node to find propertyName on.
	 * @param {Boolean} recurse - If node is a DzSkeleton and propertyName cannot be found using findPropertyInGroup(), determines whether to attempt locating propertyName on one of the DzBone owned by the skeleton.
	 * @param {Boolean} nameLabelMatch - Whether the name and label of the property must match propertyName.
	 */
	findControlProperty(propertyName, node, recurse, nameLabelMatch = false) {};
	/**
	 * @returns DzProperty The first property with the given internal name, otherwise NULL.
	 * @since 4.11.0.232
	 * @param {String} propName - The name of the property to find.
	 * @param {DzElement} elem - The element to search.
	 */
	findProperty(propName, elem) {};
	/**
	 * @returns DzProperty The first property with the given internal name, otherwise NULL.
	 * @since 4.11.0.232
	 * @param {String} internalName - The internal name of the property to find.
	 * @param {DzElement} elem - The element to search.
	 */
	findPropertyByInternalName(internalName, elem) {};
	/**
	 * @returns DzProperty The first property with the given label, otherwise NULL.
	 * @since 4.11.0.232
	 * @param {String} label - The label of the property to find.
	 * @param {DzElement} elem - The element to search.
	 */
	findPropertyByLabel(label, elem) {};
	/**
	 * @returns DzProperty The first property with the given internal name, or NULL.
	 * @param {String} propertyName - The name of the property to find.
	 * @param {DzPropertyGroup} group - The DzPropertyGroup to find propertyName in.
	 * @param {Boolean} traverse - If propertyName cannot be found in group, determines whether to attempt locating propertyName in the DzPropertyGroup siblings of group.
	 * @param {Boolean} recurse - If propertyName cannot be found in group, determines whether to attempt locating propertyName in the DzPropertyGroup children of group.
	 * @param {Boolean} nameLabelMatch - Whether the name and label of the property must match propertyName.
	 */
	findPropertyInGroup(propertyName, group, traverse, recurse, nameLabelMatch = false) {};
	/**
	 * @returns DzProperty The first property with the given internal name, or NULL.
	 * @since 4.11.0.233
	 * @param {String} propName - The name of the property to find.
	 * @param {DzMaterial} material - The material to search.
	 */
	findPropertyOnMaterial(propName, material) {};
	/**
	 * @returns DzProperty The first property with the given internal name, or NULL.
	 * @since 4.11.0.233
	 * @param {String} internalName - The internal name of the property to find.
	 * @param {DzMaterial} material - The material to search.
	 */
	findPropertyOnMaterialByInternalName(internalName, material) {};
	/**
	 * @returns DzProperty The first property with the given label, or NULL.
	 * @since 4.11.0.233
	 * @param {String} label - The label of the property to find.
	 * @param {DzMaterial} material - The material to search.
	 */
	findPropertyOnMaterialByLabel(label, material) {};
	/**
	 * @returns DzProperty The first property with the given internal name, or NULL.
	 * @param {String} propName - The name of the property to find.
	 * @param {DzNode} node - The node to search.
	 */
	findPropertyOnNode(propName, node) {};
	/**
	 * @returns DzProperty The first property with the given internal name, or NULL.
	 * @param {String} internalName - The internal name of the property to find.
	 * @param {DzNode} node - The node to search.
	 */
	findPropertyOnNodeByInternalName(internalName, node) {};
	/**
	 * @returns DzProperty The first property with the given label, or NULL.
	 * @param {String} label - The label of the property to find.
	 * @param {DzNode} node - The node to search.
	 */
	findPropertyOnNodeByLabel(label, node) {};
	/**
	 * @returns DzMaterial The DzMaterial associated with the display of prop.
	 * @since 4.11.0.233
	 * @param {DzProperty} prop - The property in question.
	 */
	getDisplayMaterial(prop) {};
	/**
	 * @returns DzNode The DzNode associated with the display of prop.
	 * @since 4.6.3.45
	 * @param {DzProperty} prop - The property in question.
	 */
	getDisplayNode(prop) {};
	/**
	 * @returns DzERCLink The ERC controller for controlledProp that has the same property as controllingProp. If either parameter is null, or controlledProp does not have a controller that has the same property as controllingProp, NULL.
	 * @param {DzProperty} controlledProp - The property whose controller will be returned.
	 * @param {DzProperty} controllingProp - The property to determine which controller is returned.
	 */
	getErcController(controlledProp, controllingProp) {};
	/**
	 * @returns String The internal name of prop (or its alias target), or "Unknown".
	 * @param {DzProperty} prop - The property in question.
	 */
	getInternalName(prop) {};
	/**
	 * @returns String The label of prop, or an empty string.
	 * @param {DzProperty} prop - The property in question.
	 */
	getLabel(prop) {};
	/**
	 * @returns DzMaterial The DzMaterial associated with prop.
	 * @since 4.11.0.233
	 * @param {DzProperty} prop - The property in question.
	 */
	getMaterial(prop) {};
	/**
	 * @returns String The name of the DzMaterial associated with prop, or "Unknown" if it has no associated DzMaterial.
	 * @since 4.11.0.233
	 * @param {DzProperty} prop - The property in question.
	 */
	getMaterialName(prop) {};
	/**
	 * @returns String A string representation of the property type of prop; "General", "Simulation Settings" or "Unknown".
	 * @since 4.11.0.233
	 * @param {DzProperty} prop - The property in question.
	 */
	getMaterialType(prop) {};
	/**
	 * @description Gets the maximum value for prop.
	 * @returns Number If prop is non-null and inherits either DzFloatProperty or DzIntProperty, the max value of prop.
	 * @param {DzProperty} prop - The property to get the max value for.
	 */
	getMax(prop) {};
	/**
	 * @description Gets the minimum value for prop.
	 * @returns Number If prop is non-null and inherits either DzFloatProperty or DzIntProperty, the min value of prop.
	 * @param {DzProperty} prop - The property to get the min value for.
	 */
	getMin(prop) {};
	/**
	 * @returns DzNode The DzNode associated with prop.
	 * @param {DzProperty} prop - The property in question.
	 */
	getNode(prop) {};
	/**
	 * @returns String The name of the DzNode associated with prop, or "Unknown" if it has no associated DzNode.
	 * @param {DzProperty} prop - The property in question.
	 */
	getNodeName(prop) {};
	/**
	 * @returns String A string representation of the property type of prop; "Transform", "General", "Morph", "DFormer", "Poser Joint" or "Unknown".
	 * @param {DzProperty} prop - The property in question.
	 */
	getNodeType(prop) {};
	/**
	 * @returns Array All private properties associated with the DzNode that prop is associated with.
	 * @since 4.6.3.45
	 * @param {DzProperty} prop - The property to get the DzNode from.
	 */
	getPrivatePropertiesOnNode(prop) {};
	/**
	 * @returns Array All private properties associated with node.
	 * @since 4.6.3.45
	 * @param {DzNode} node - The node to get the properties from.
	 */
	getPrivatePropertiesOnNode(node) {};
	/**
	 * @returns Array The properties that are on elem.
	 * @since 4.6.3.45
	 * @param {DzElement} elem - The DzElement to get the list of properties from.
	 */
	getPropertiesOnElement(elem) {};
	/**
	 * @returns Array All properties associated with the material that prop is associated with.
	 * @since 4.11.0.223
	 * @param {DzProperty} prop - The property to get the material from.
	 * @param {Boolean} includeProviders - Whether or not to include the properties of settings providers.
	 */
	getPropertiesOnMaterial(prop, includeProviders = true) {};
	/**
	 * @returns Array All properties associated with the material.
	 * @since 4.11.0.223
	 * @param {DzMaterial} material - The material to get the properties from.
	 * @param {Boolean} includeProviders - Whether or not to include the properties of settings providers.
	 */
	getPropertiesOnMaterial(material, includeProviders = true) {};
	/**
	 * @returns Array All properties associated with the DzNode that prop is associated with.
	 * @since 4.6.3.45
	 * @param {DzProperty} prop - The property to get the DzNode from.
	 * @param {Boolean} includeModifiers - Whether or not to include the properties of DzModifiers.
	 */
	getPropertiesOnNode(prop, includeModifiers = true) {};
	/**
	 * @returns Array All properties associated with the node.
	 * @since 4.6.3.45
	 * @param {DzNode} node - The node to get the properties from.
	 * @param {Boolean} includeModifiers - Whether or not to include the properties of DzModifiers.
	 */
	getPropertiesOnNode(node, includeModifiers = true) {};
	/**
	 * @returns Array All region properties associated with node.
	 * @since 4.6.3.45
	 * @param {DzNode} node - The node to get the properties from.
	 */
	getRegionPropertiesOnNode(node) {};
	/**
	 * @returns Array All region properties associated with region.
	 * @since 4.6.3.45
	 * @param {geometryregion_dz} node - The geometryregion_dz to get the properties from.
	 */
	getRegionPropertiesRecurse(region) {};
	/**
	 * @returns String The unique name for the morph.
	 * @param {DzNode} node - The DzNode with the DzObject that has the morph_dz.
	 * @param {String} name - The name to make unique.
	 */
	getUniqueMorphName(node, name) {};
	/**
	 * @returns Boolean true if the the helper can remove prop, otherwise false.
	 * @since 4.6.3.45
	 * @param {DzProperty} prop - The property to check whether the helper can remove.
	 */
	helperCanRemove(prop) {};
	/**
	 * @returns Boolean true if the helper successfully removed the property, otherwise false.
	 * @since 4.6.3.45
	 * @param {DzProperty} prop - The property to remove.
	 */
	helperRemoveProperty(prop) {};
	/**
	 * @returns Boolean true if prop inherits DzNumericProperty and its raw and default values are the same, otherwise false.
	 * @param {DzProperty} prop - The property in question.
	 */
	isAtDefaultValue(prop) {};
	/**
	 * @returns Boolean true if prop is controlled by a transform property, otherwise false.
	 * @since 4.9.4.86
	 * @param {DzProperty} prop - The property in question.
	 * @param {Boolean} recurse - If true (default), the controller hierarchy is recursed.
	 */
	isControlledByTransform(prop, recurse = true) {};
	/**
	 * @returns DzProperty The given property (or its alias target) if it's owner is a dformmodifier_dz, otherwise NULL.
	 * @param {DzProperty} prop - The property in question.
	 */
	isDFormModProperty(prop) {};
	/**
	 * @returns DzProperty The given property (or its alias target) if it's owner is a legacyjoint_dz, otherwise NULL.
	 * @param {DzProperty} prop - The property in question.
	 */
	isLegacyJointProperty(prop) {};
	/**
	 * @returns Boolean true if the given property (or its alias target) is a legacy property (internal name begins with PBMCC or PBMDC), otherwise false.
	 * @param {DzProperty} prop - The property in question.
	 */
	isLegacyProperty(prop) {};
	/**
	 * @returns DzProperty The given property (or its alias target) if it's owner is a DzMaterial, otherwise NULL.
	 * @since 4.11.0.233
	 * @param {DzProperty} prop - The property in question.
	 */
	isMaterialProperty(prop) {};
	/**
	 * @returns DzProperty The given property (or its alias target) if it's owner is a DzModifier, otherwise NULL.
	 * @param {DzProperty} prop - The property in question.
	 */
	isModifierProperty(prop) {};
	/**
	 * @returns DzProperty The given property (or its alias target) if it's owner is a morph_dz, otherwise NULL.
	 * @param {DzProperty} prop - The property in question.
	 */
	isMorphProperty(prop) {};
	/**
	 * @returns DzProperty The given property (or its alias target) if it's owner is a DzNode, otherwise NULL.
	 * @param {DzProperty} prop - The property in question.
	 */
	isNodeProperty(prop) {};
	/**
	 * @returns DzProperty The given property (or its alias target) if it's owner is a simulationsettingsprovider_dz, otherwise NULL.
	 * @since 4.11.0.233
	 * @param {DzProperty} prop - The property in question.
	 */
	isSimulationSettingsProviderProperty(prop) {};
	/**
	 * @returns Boolean true if the given property is a transform property, otherwise false.
	 * @since 4.9.4.86
	 * @param {DzProperty} prop - The property in question.
	 */
	isTransform(prop) {};
	/**
	 * @returns DzProperty The given property (or its alias target) if it is a transform property, otherwise NULL.
	 * @param {DzProperty} prop - The property in question.
	 */
	isTransformProperty(prop) {};
	/**
	 * @description Attempts to rename prop to name. If the property is a morph property or a DForm modifier property then the modifier is renamed to name. If any other property associated with the node that this property is associated with has the same internal name as name, this method returns false.
	 * @returns Boolean true if the rename was successful, otherwise false.
	 * @param {DzProperty} prop - The property to change.
	 * @param {String} name - The new internal name for the property.
	 */
	setInternalName(prop, name) {};
	/**
	 * @description Sets the maximum value for prop. This method only applies if prop is non-null and inherits either DzFloatProperty or DzIntProperty. Otherwise this method has no effect.
	 * @param {Number} prop - The property whose maximum value is to be set.
	 * @param {Number} max - The value to set. If prop inherits DzIntProperty, max is truncated (not rounded).
	 */
	setMax(prop, max) {};
	/**
	 * @description Sets the minimum value for prop. This method only applies if prop is non-null and inherits either DzFloatProperty or DzIntProperty. Otherwise this method has no effect.
	 * @param {Number} prop - The property whose minimum value is to be set.
	 * @param {Number} min - The value to set. If prop inherits DzIntProperty, min is truncated (not rounded).
	 */
	setMin(prop, min) {};
	/**
	 * @description Essentially behaves the same as calling both DzSceneHelper.setMin() and DzSceneHelper.setMax().
	 * @param {Number} prop - The property to set min and max values for.
	 * @param {Number} min - The new min value for the given property.
	 * @param {Number} max - The new max value for the given property.
	 */
	setMinMax(prop, min, max) {};
	/**
	 * @description Sets the DzPropertyGroup path (and appropriate geometryregion_dz) for the given property.
	 * @returns DzGeometryregion
	 * @param {DzProperty} prop - The property to change the path of.
	 * @param {String} inPath - The new path for the given property.
	 */
	setPropertyPath(prop, inPath) {};
	/**
	 * @description Sets the name of node to a unique version of name.
	 * @param {String} node - The node to set the unique name of.
	 * @param {String} name - The name to make unique.
	 */
	setUniqueName(node, name) {};

}
/**
 * An asset save filter for saving a Scene Subset in the DSON format.
 * See Also:
 */
class DzSceneSubsetAssetFilter extends DzAssetFileOutFilter {
	/**
	 * @description TODO:
	 * Add description.
	 */
	constructor() {};

}
/**
 * An asset save filter for saving Figure/Prop Assets, or Dynamic Cloth Assets, for each object in the scene, in the DSON format.
 * See Also:
 */
class DzSceneSupportAssetFilter extends DzSceneAssetFilter {
	/**
	 * @description TODO:
	 * Add description.
	 */
	constructor() {};

}
/**
 * TODO:
 * Add detailed description.
 */
class DzScript extends DzBase {
	/**
	 * @description Default constructor.
	 */
	constructor() {};
	/**
	 * @description Copy Constructor.
	 * @param {DzScript} script - The script to copy.
	 */
	constructor(script) {};
	/**
	 * @description ENUM: If the file extension is .dsb, the file is saved as DAZScriptFile, otherwise as TextScriptFile
	 */
	UseExtension;
	/**
	 * @description ENUM: Plain text file - no Unicode support
	 */
	TextScriptFile;
	/**
	 * @description ENUM: Binary DAZ file format - supports Unicode characters
	 */
	DAZScriptFile;
	/**
	 * @description ENUM: Encrypted Binary DAZ file format - supports Unicode characters
	 */
	EncDAZScriptFile;
	/**
	 * @description ENUM: Unknown language.
	 */
	Unknown;
	/**
	 * @description ENUM: DAZ Script 1 (QSA) language.
	 */
	DAZScript1;
	/**
	 * @description ENUM: DAZ Script 2 (QtScript) language.
	 */
	DAZScript2;
	/**
	 * @param {DzFileFilter} filter - The filter to add the binary extensions to.
	 */
	static addScriptBinaryExtensionsAsMultipleFilters(filter) {};
	/**
	 * @param {DzFileFilter} filter - The filter to add the binary extensions to.
	 */
	static addScriptBinaryExtensionsToFilter(filter) {};
	/**
	 * @param {DzFileFilter} filter - The filter to add the open extensions to.
	 */
	static addScriptOpenExtensionsAsMultipleFilters(filter) {};
	/**
	 * @param {DzFileFilter} filter - The filter to add the open extensions to.
	 */
	static addScriptOpenExtensionsToFilter(filter) {};
	/**
	 * @param {DzFileFilter} filter - The filter to add the save extensions to.
	 */
	static addScriptSaveExtensionsAsMultipleFilters(filter) {};
	/**
	 * @param {DzFileFilter} filter - The filter to add the save extensions to.
	 */
	static addScriptSaveExtensionsToFilter(filter) {};
	/**
	 * @param {DzFileFilter} filter - The filter to add the plain text extensions to.
	 * @param {Boolean} includeDeprecated - Whether or not to include the deprecated extension(s).
	 */
	static addScriptTextExtensionsAsMultipleFilters(filter, includeDeprecated = false) {};
	/**
	 * @param {DzFileFilter} filter - The filter to add the plain text extensions to.
	 * @param {Boolean} includeDeprecated - Whether or not to include the deprecated extension(s).
	 */
	static addScriptTextExtensionsToFilter(filter, includeDeprecated = false) {};
	/**
	 * @description This function is provided as a quick method of evaluating DAZ Script statements without needing to create a DAZ Script object.
	 * @returns Object The value returned from the script's execution.
	 * @param {String} code - The text string to evaluate as a script.
	 * @param {QObject} context - The QObject instance (if any) that will provide the script's context.
	 */
	static evaluate(code, context = null) {};
	/**
	 * @returns Array A list of the script file extensions supported by the application.
	 */
	static getScriptExtensions() {};
	/**
	 * @returns String The path of the file, with extension, of the script found. Otherwise, an empty String.
	 * @param {String} filenameWithoutExtension - The path to the file, minus the '.' and the extension.
	 */
	static getScriptFile(filenameWithoutExtension) {};
	/**
	 * @returns Boolean true if extension is a supported binary script extension, otherwise false.
	 * @param {String} extension - The file extension (minus the '.') to check.
	 */
	static isScriptBinaryExtension(extension) {};
	/**
	 * @returns Boolean true if filename ends with a supported binary script extension, otherwise false.
	 * @param {String} filename - The name of the file to check.
	 */
	static isScriptBinaryFile(filename) {};
	/**
	 * @returns Boolean true if extension is a supported script extension, otherwise false.
	 * @param {String} extension - The file extension (minus the '.') to check.
	 */
	static isScriptExtension(extension) {};
	/**
	 * @returns Boolean true if filename ends with a supported script extension, otherwise false.
	 * @param {String} filename - The name of the file to check.
	 */
	static isScriptFile(filename) {};
	/**
	 * @returns Boolean true if extension is a supported [ascii] plain text script extension, otherwise false.
	 * @param {String} extension - The file extension (minus the '.') to check.
	 */
	static isScriptTextExtension(extension) {};
	/**
	 * @returns Boolean true if filename ends with a supported [ascii] plain text script extension, otherwise false.
	 * @param {String} filename - The name of the file to check.
	 */
	static isScriptTextFile(filename) {};
	/**
	 * @returns String A converted version of a string (which may contain special characters) that would be legal as a variable name in script. If the string contains no special characters, the result will be identical to the input.
	 */
	static legalizeName(str) {};
	/**
	 * @description Appends the given code to the end of the current script.
	 * @param {String} code - The text to append to the current script.
	 */
	addCode(code) {};
	/**
	 * @description Appends the given string and a newline character to the script.
	 * @param {String} line - The text to add to the script.
	 * @param {Number} indentLevel - The number of tab characters to insert in front of the line.
	 */
	addLine(line, indentLevel = 0) {};
	/**
	 * @description Appends the given code to the end of the current script.
	 * @param {String} code - The text to append to the current script.
	 * @param {Number} indentLevel - The number of tab characters to insert in front of each line.
	 */
	addLines(code, indentLevel = 0) {};
	/**
	 * @description Calls a function in the script.
	 * @returns Boolean true if the function was called successfully, false if there was an error.
	 * @param {String} function - The name of the function to call.
	 * @param {Array} args - A list of arguments to pass to the function.
	 * @attention The entire script is evaluated before the function call is made.
	 */
	call(func, args) {};
	/**
	 * @description Checks the syntax of the script for errors using the current interpreter.
	 * @returns Boolean true if the syntax is valid, otherwise false.
	 */
	checkSyntax() {};
	/**
	 * @description Clears any code in the current script, and clears the encryption state if the script was read from an encrypted file.
	 */
	clear() {};
	/**
	 * @description Converts the script to DAZ Script 2 syntax.
	 * @returns Boolean
	 */
	convertToDAZScript2() {};
	/**
	 * @returns Number The line number that the last error occurred on.
	 */
	errorLine() {};
	/**
	 * @returns String The last error message gathered from a call to execute(). An empty string if no error has been encountered for this script.
	 */
	errorMessage() {};
	/**
	 * @description Execute the script.
	 * @returns Boolean true if the script was executed successfully, false if there was an error.
	 * @attention This can be called from a thread outside of the GUI thread, however the script will not be executed until the GUI thread processes events. It returns when execution is complete.
	 */
	execute() {};
	/**
	 * @description Execute the script with an argument list.
	 * @returns Boolean true if the script was executed successfully, false if there was an error.
	 * @param {Array} args - The list of arguments to pass to the script.
	 * @attention This can be called from a thread outside of the GUI thread, however the script will not be executed until the GUI thread processes events. It returns when execution is complete.
	 */
	execute(args) {};
	/**
	 * @returns DzAuthor The author of this script if it was loaded from a file that provides authorship information.
	 */
	getAuthor() {};
	/**
	 * @returns String The code of the current script.
	 */
	getCode() {};
	/**
	 * @returns String The name and path of the file associated with this script. An empty string is returned if this script is not associated with a file.
	 */
	getFilename() {};
	/**
	 * @returns Boolean true if the last execution was successful, otherwise false.
	 */
	getLastStatus() {};
	/**
	 * @returns ScriptLanguage An enumerated value indicating the scripting language of the script.
	 */
	getScriptLanguage() {};
	/**
	 * @returns String A string describing the kind of script that this script is
	 */
	getScriptType() {};
	/**
	 * @returns DzVersion The version of DAZ Studio that this script was saved from. The current version if the script was not loaded from a file.
	 */
	getScriptVersion() {};
	/**
	 * @returns Boolean true if the same context is used between uses of call(); otherwise false (default).
	 */
	getShouldReuseInterpreter() {};
	/**
	 * @returns Boolean true if the script is empty; otherwise false.
	 */
	isEmpty() {};
	/**
	 * @returns Boolean true if the contents of the script are encrypted (i.e. read from an encrypted file); otherwise false.
	 * @attention If the script is encrypted, getCode() returns '[Content Encrypted]', addLine(), addCode(), and setCode() have no effect, saveToFile() and saveFile() save nothing and will return DZ_OPERATION_FAILED_ERROR. Calling clear() will clear the encryption state and the code from the script.
	 */
	isEncrypted() {};
	/**
	 * @description Loads the script from a file.
	 * @returns Boolean true if the script was successfully loaded, otherwise false.
	 * @param {String} filename - The path of the script file to load.
	 * @param {Boolean} convert - If true (default), converts the file to DAZ Script 2.
	 */
	loadFromFile(filename, convert = true) {};
	/**
	 * @description Sets the script to be encrypted.
	 * @attention This process is not reversible!!! Once a script has been encrypted its original text cannot be extracted. Encrypted scripts can not be edited or modified.
	 */
	makeEncrypted() {};
	/**
	 * @returns Object The result of the last script execution.
	 */
	result() {};
	/**
	 * @description Save the script to a file.
	 * @returns DzError DZ_NO_ERROR on success, otherwise an appropriate error code.
	 * @since 4.11.0.129
	 * @param {String} filename - The filename of the file to save to.
	 * @param {ScriptFileMode} mode - The type of file to save.
	 * @param {String} filetype - The filetype that is saved as part of the file information.
	 * @param {DzVersion} version - The version of the file to be written.
	 * @attention It is the developer's responsibility to ensure that the data being written to file is compatible with the version specified.
	 */
	saveFile(filename, mode, filetype = "DAZ Script", version = DzApp.getVersion()) {};
	/**
	 * @description Save the script to a file.
	 * @returns DzError
	 * @since 4.11.0.129
	 * @param {String} filename - The filename of the file to save to.
	 */
	saveFile(filename) {};
	/**
	 * @description Replaces the existing code of the script with code.
	 * @param {String} code - The new text for the script.
	 */
	setCode(code) {};
	/**
	 * @description Sets whether the same context is used between uses of call().
	 * @param onOff - If true, the same context is used between calls. If false a new context is used for each call.
	 * @attention Use of this function clears the context, regardless of whether onOff is set to true or false.
	 */
	setReuseInterpreter(onoff) {};
	/**
	 * @returns Array The stack trace for the last time an error was reported during a call to execute(). An empty list if no error has been encountered.
	 */
	stackTrace() {};
	/**
	 * @description Access to whether or not the script was converted from the enumerated value specified.
	 * @returns Boolean true if the script was converted
	 */
	wasConverted(language = DAZScript1) {};
	/**
	 * @description Deprecated
	 * @returns DzError
	 */
	saveToFile(filename, mode = UseExtension, filetype = "DAZ Script") {};

}
/**
 * Since:
 */
class DzScriptAction extends DzAction {

}
/**
 * All DzScripts are executed in the context of a DzScriptContext instance - therefore, all the properties and methods on DzScriptContext are accessible to a script as global functions and variables. It will usually not be necessary for a script to create or use this class directly.
 */
class DzScriptContext extends DzBase {
	/**
	 * @description Accept and finish a hold on the undo stack started by calling beginUndo().
	 */
	acceptUndo(caption) {};
	/**
	 * @returns Boolean true if there is an active background progress operation in the application, otherwise false.
	 */
	backgroundProgressIsActive() {};
	/**
	 * @returns Boolean true if the user canceled the current background progress operation in the application, otherwise false.
	 */
	backgroundProgressIsCancelled() {};
	/**
	 * @description Captures a view of scene seletion.
	 * @since 4.9.4.109
	 */
	beginNodeSelectionHold() {};
	/**
	 * @description Starts a hold on the undo stack.
	 */
	beginUndo() {};
	/**
	 * @description Cancel a hold on the undo stack started by calling beginUndo().
	 */
	cancelUndo() {};
	/**
	 * @description Clears the application-standard busy cursor and returns the mouse cursor to the previous cursor. Match every call to setBusyCursor() with a call to this function.
	 */
	clearBusyCursor() {};
	/**
	 * @description Clears all selection holds without restoring the selection.
	 * @since 4.9.4.109
	 */
	clearNodeSelectionHolds() {};
	/**
	 * @description Clears the override cursor stack.
	 * @since 4.6.4.30
	 */
	clearOverrideCursor() {};
	/**
	 * @description Clears the undo stack.
	 */
	clearUndoStack() {};
	/**
	 * @description Removes a scene node selection hold on scene selection without restoring the selection.
	 * @since 4.9.4.109
	 */
	dropNodeSelectionHold() {};
	/**
	 * @description Drops a hold on the undo stack started by calling beginUndo().
	 */
	dropUndo() {};
	/**
	 * @description Ends the current background progress operation in the application from script.
	 */
	finishBackgroundProgress() {};
	/**
	 * @description Ends the current progress operation in the application from script.
	 */
	finishProgress() {};
	/**
	 * @returns Array The list of arguments for the current script execution.
	 */
	getArguments() {};
	/**
	 * @description This function converts an error code into a string message.
	 * @returns String A user-readable message that describes the error represented by the error code.
	 */
	getErrorMessage(errCode) {};
	/**
	 * @returns QObject The QObject parent of obj.
	 */
	getObjectParent(obj) {};
	/**
	 * @returns DzAuthor The author of the current script (if any), otheriwse and empty string.
	 */
	getScriptAuthor() {};
	/**
	 * @returns String The file name of the current script (if any), otherwise an empty string.
	 */
	getScriptFileName() {};
	/**
	 * @returns String The file type that this script was saved out as.
	 */
	getScriptType() {};
	/**
	 * @returns String The version of the current script (if any).
	 */
	getScriptVersionString() {};
	/**
	 * @description This function allows a script to test if two QObject-derived variables point to the same instance.
	 * @returns Boolean true if the pointers point to the same object, otherwise false.
	 */
	pointersAreEqual(ptr1, ptr2) {};
	/**
	 * @description Pauses execution of the script and allows the GUI thread time to process events.
	 */
	processEvents() {};
	/**
	 * @returns Boolean true if there is an active progress operation in the application, otherwise false.
	 */
	progressIsActive() {};
	/**
	 * @returns Boolean true if the user cancelled the current progress operation in the application, otherwise false.
	 */
	progressIsCancelled() {};
	/**
	 * @description Restores the scene selection to the view at last call to beginNodeSelectionHold().
	 * @since 4.9.4.109
	 */
	restoreNodeSelectionHold() {};
	/**
	 * @description Sets the application-standard busy cursor. Match every call to this function with a call to clearBusyCursor() to restore the previous cursor.
	 */
	setBusyCursor() {};
	/**
	 * @description Pauses the script for the specified number of milliseconds without blocking the application event loop.
	 * @since 4.8.0.45
	 */
	sleep(milliseconds) {};
	/**
	 * @description Starts a background progress operation in the application from script.
	 */
	startBackgroundProgress(info, totalSteps = 0, isCancellable = false) {};
	/**
	 * @description Starts a progress operation in the application from script.
	 */
	startProgress(info, totalSteps = 0, isCancellable = false, showTimeElapsed = false) {};
	/**
	 * @description Steps the current background progress operation in the application from script.
	 */
	stepBackgroundProgress(numSteps = 1) {};
	/**
	 * @description Steps the current progress operation in the application from script.
	 */
	stepProgress(numSteps = 1) {};
	/**
	 * @description Updates the background current progress operation in the application from script.
	 */
	updateBackgroundProgress(position) {};
	/**
	 * @description Updates the current progress operation in the application from script.
	 */
	updateProgress(position) {};
	/**
	 * @description Deprecated
	 * @returns Boolean
	 */
	shiftPressed() {};
	/**
	 * @description Deprecated
	 * @returns Boolean
	 */
	ctrlPressed() {};
	/**
	 * @description Deprecated
	 * @returns QDesktopWidget (deprecated)
	 */
	getDesktop() {};

}
/**
 * Implements a script-able RenderMan interface for the scene to render itself through the 3Delight renderer.
 * See Also:
 * Attention:@attention Attention:
 */
class DzScriptedRenderer extends DzRenderer {
	/**
	 * @description Default Constructor.
	 */
	constructor() {};
	/**
	 * @description Builds an environment space transform that can be used by shaders to account for differences between the application and the 3Delight render engine.
	 * @since 4.10.0.55
	 */
	buildEnvironmentSpaceTransform() {};
	/**
	 * @description Sets up the camera for the pass.
	 * @param {DzCamera} camera - The camera to use.
	 * @param {Number} width - The width of the render.
	 * @param {Number} height - The height of the render.
	 */
	cameraProject(camera, width, height) {};
	/**
	 * @returns Boolean true if the renderer should use the call to RiSurface, RiDisplace, RiLight, or RiAreaLight, otherwise false.
	 */
	continueAfterPreProcess() {};
	/**
	 * @description Creates a light in the stream.
	 * @param {DzLight} light - The light to create.
	 * @param {String} shadowMap - The shadow map for the light.
	 */
	createLight(light, shadowMap) {};
	/**
	 * @description Deletes a list of files.
	 * @param {Array} files - A list of the file paths to delete.
	 */
	deleteFiles(files) {};
	/**
	 * @description Causes the renderer to call the same display as the standard 3Delight renderer.
	 */
	doDefaultDisplay() {};
	/**
	 * @returns String The name of the generated shadow map.
	 * @param {DzRenderOptions} options - The render options for the shadow maps.
	 * @param {DzCamera} camera - The camera to use for the shadow pass.
	 * @param {DzLight} light - The light to generate shadow map for.
	 * @param {String} dir - The directory to generate the shadow map in.
	 * @param {Boolean} reuse - If true and a shadow map already exists, it is reused.
	 */
	doDefaultShadowPass(options, camera, light, dir, reuse) {};
	/**
	 * @returns Array The list of names for the generated shadow maps.
	 * @param {DzRenderOptions} options - The render options for the shadow maps.
	 * @param {DzCamera} camera - The camera to generate the shadow map for.
	 * @param {String} dir - The directory to generate the shadow maps in.
	 * @param {Boolean} reuse - If true and a shadow map exists by the the same label of a light exists, the shadow map is reused instead of being generated.
	 */
	doDefaultShadowPass(options, camera, dir, reuse) {};
	/**
	 * @description Cleans up after doDefaultShadowPassPrep().
	 * @param {DzRenderOptions} options - The render options for the pass.
	 * @param {DzCamera} camera - The camera for the shadow pass.
	 * @param {DzLight} light - The light the shadow map was generated for.
	 * @attention This call must be proceeded by a call to doDefaultShadowPassPrep().
	 */
	doDefaultShadowPassEnd(options, camera, light) {};
	/**
	 * @returns String The name of the shadow map for the light.
	 * @param {DzRenderOptions} options - The render options for the pass.
	 * @param {DzCamera} camera - The camera for the shadow pass.
	 * @param {DzLight} light - The light to generate shadow map for.
	 * @param {String} dir - The directory to put the shadow map in.
	 * @param {Boolean} reuse - If true and the map already exists, it is reused.
	 * @attention This call must be followed by a call to doDefaultShadowPassEnd().
	 */
	doDefaultShadowPassPrep(options, camera, light, dir, reuse) {};
	/**
	 * @description Script implementation of the RiSpec RiShutter() function.
	 * @param {DzRenderOptions} opts - The render options for the shutter; whether or not motion blur is enabled and the amount of blur if enabled.
	 */
	doShutter(opts) {};
	/**
	 * @description Sets up the camera for the pass, ensuring all render-able objects are in view.
	 * @param {DzCamera} camera - The camera to use.
	 * @param {Number} width - The width of the render.
	 * @param {Number} height - The height of the render.
	 */
	fullSceneCameraProject(camera, width, height) {};
	/**
	 * @returns String The default search path for shaders and DSO shadeops, as a string in the format expected by 3Delight (which is mostly a list of paths separated by semicolons). The getShaderSearchPaths() method is called to get the list of paths to use.
	 */
	getDefaultShaderSearchPath() {};
	/**
	 * @returns String The path to the script that is run in order to define the renderer.
	 */
	getDefinitionFile() {};
	/**
	 * @returns String The path to the script that is run in the Displacement pre-process step.
	 */
	getDisplacementPreProcessScript() {};
	/**
	 * @returns DzRenderHandler The current render handler (if any), otherwise NULL.
	 * @attention This call is only valid during a render.
	 */
	getHandler() {};
	/**
	 * @returns DzLight The light in the render list at index (if valid), otherwise NULL.
	 * @param {Number} index - The index of the light to get.
	 */
	getLight(index) {};
	/**
	 * @returns Number The number of lights to render.
	 */
	getLightCount() {};
	/**
	 * @returns String The path to the script that is run in the Light pre-process step.
	 */
	getLightPreProcessScript() {};
	/**
	 * @returns Array The list of lights to render.
	 */
	getLightsToRender() {};
	/**
	 * @returns DzNode The node in the render list at index (if valid), otherwise NULL.
	 * @param {Number} index - The index of the node to get.
	 */
	getNode(index) {};
	/**
	 * @returns Number The number of nodes to render.
	 */
	getNodeCount() {};
	/**
	 * @returns Array The list of nodes to render.
	 */
	getNodesToRender() {};
	/**
	 * @returns Number The number of light handles.
	 * @attention These handles are used in the riIlluminate() call to turn lights on/off.
	 */
	getNumIlluminateHandels() {};
	/**
	 * @returns DzElement The element that holds the properties for this scripted render pass.
	 * @attention When applying a new pass to the renderer, the properties on this element should be cleared and the properties to use during the render pass should be added.
	 */
	getPropertyHolder() {};
	/**
	 * @returns String The path of the script that controls the rendering process.
	 */
	getRenderScript() {};
	/**
	 * @returns String The path to the script that is run in the Surface pre-process step.
	 */
	getSurfacePreProcessScript() {};
	/**
	 * @description Prepares motion samples for all nodes to render.
	 */
	prepareMotionSamples() {};
	/**
	 * @description Prepares motion samples for a list of nodes.
	 * @param {Array} nodes - The list of nodes to prepare motion samples for.
	 */
	prepareMotionSamples(nodes) {};
	/**
	 * @description Prepares motion samples for node.
	 * @param {DzNode} node - The node to prepare motion samples for.
	 */
	prepareNodeMotionSamples(node) {};
	/**
	 * @description Removes a light from the render list.
	 * @param {Number} index - The index of the light to remove.
	 */
	removeLight(index) {};
	/**
	 * @description Removes a node from the render list.
	 * @param {Number} index - The index of the node to remove.
	 */
	removeNode(index) {};
	/**
	 * @description Renders the backdrop for the scene.
	 * @param {DzBackdrop} backdrop - The backdrop for the scene.
	 * @param {Number} width - The width of the render.
	 * @param {Number} height - The height of the render.
	 */
	renderBackDrop(backdrop, width, height) {};
	/**
	 * @description Adds a node to the list of nodes to be rendered.
	 * @param {DzNode} node - The node to render.
	 */
	renderNode(node) {};
	/**
	 * @description Adds a node to the list of nodes to be rendered.
	 * @param {Array} nodes - The list of nodes to render.
	 */
	renderNodes(nodes) {};
	/**
	 * @description Script implementation of the RiSpec RiAreaLightSource() function.
	 * @returns Number The light handle index for this light source
	 * @param {String} name - The name of the light shader.
	 * @param {Array} tokens - A list of token names passed to the shader.
	 * @param {Array} params - A list of corresponding values for tokens.
	 */
	riAreaLightSource(name, tokens, params) {};
	/**
	 * @description Script implementation of the RiSpec RiAtmosphere() function.
	 * @param {String} name - The name of the volume shader.
	 * @param {Array} tokens - A list of token names passed to the shader.
	 * @param {Array} params - A list of corresponding values for tokens.
	 */
	riAtmosphere(name, tokens, params) {};
	/**
	 * @description Script implementation of the RiSpec RiAttribute() function.
	 * @param {String} name - The name of the attribute to set.
	 * @param {Array} tokens - A list of parameter names for the attribute.
	 * @param {Array} params - A list of corresponding values for tokens.
	 */
	riAttribute(name, tokens, params) {};
	/**
	 * @description Script implementation of the RiSpec RiAttributeBegin() function.
	 */
	riAttributeBegin() {};
	/**
	 * @description Script implementation of the RiSpec RiAttributeEnd() function.
	 */
	riAttributeEnd() {};
	/**
	 * @description Script implementation of the RiSpec RiBegin() function.
	 * @param {String} ribPath -
	 */
	riBegin(ribPath) {};
	/**
	 * @description Script implementation of the RiSpec RiCamera() function.
	 * @param {String} camera - The name of the camera.
	 * @param {Array} tokens - A list of token names passed to the camera.
	 * @param {Array} params - A list of corresponding values for tokens.
	 */
	riCamera(camera, tokens, params) {};
	/**
	 * @description Script implementation of the RiSpec RiClipping() function.
	 * @param {Number} hither -
	 * @param {Number} yon -
	 */
	riClipping(hither, yon) {};
	/**
	 * @description Script implementation of the RiSpec RiClipping() function.
	 * @param {Number} x -
	 * @param {Number} y -
	 * @param {Number} z -
	 * @param {Number} nx -
	 * @param {Number} ny -
	 * @param {Number} nz -
	 */
	riClippingPlane(x, y, z, nx, ny, nz) {};
	/**
	 * @description Script implementation of the RiSpec RiColor() function.
	 * @param {Color} Cs - The color to set.
	 */
	riColor(Cs) {};
	/**
	 * @description Script implementation of the RiSpec RiConcatTransform() function.
	 * @param {DzMatrix4} transform - The transform to concatenate.
	 */
	riConcatTransform(transform) {};
	/**
	 * @description Script implementation of the RiSpec RiCoordinateSystem() function.
	 * @param {String} space - The name for the coordinate system.
	 */
	riCoordinateSystem(space) {};
	/**
	 * @description Script implementation of the RiSpec RiCoordSysTransform() function.
	 * @param {String} space - The name for the coordinate system.
	 */
	riCoordSysTransform(space) {};
	/**
	 * @description Script implementation of the RiSpec RiCropWindow() function.
	 * @param {Number} xmin -
	 * @param {Number} xmax -
	 * @param {Number} ymin -
	 * @param {Number} ymax -
	 */
	riCropWindow(xmin, xmax, ymin, ymax) {};
	/**
	 * @description Script implementation of the RiSpec RiDeclare() function.
	 * @param {String} name -
	 * @param {String} declaration -
	 */
	riDeclare(name, declaration) {};
	/**
	 * @description Script implementation of the RiSpec RiDepthOfField() function.
	 * @param {Number} fstop -
	 * @param {Number} focallength -
	 * @param {Number} focaldistance -
	 */
	riDepthOfField(fstop, focallength, focaldistance) {};
	/**
	 * @description Script implementation of the RiSpec RiDetailRange() function.
	 * @param {Number} minvis -
	 * @param {Number} lowtran -
	 * @param {Number} uptran -
	 * @param {Number} maxvis -
	 */
	riDetailRange(minvis, lowtran, uptran, maxvis) {};
	/**
	 * @description Script implementation of the RiSpec RiDisplacement() function.
	 * @param {String} name - The name of the displacement shader.
	 * @param {Array} tokens - A list of token names passed to the shader.
	 * @param {Array} params - A list of corresponding values for tokens.
	 */
	riDisplacement(name, tokens, params) {};
	/**
	 * @description Script implementation of the RiSpec RiDisplay() function.
	 * @param {String} name - The name of the display.
	 * @param {String} type - The type of the display.
	 * @param {String} mode - The mode of the display.
	 * @param {Array} tokens - A list of token names passed to the display.
	 * @param {Array} params - A list of corresponding values for tokens.
	 */
	riDisplay(name, type, mode, tokens, params) {};
	/**
	 * @description Script implementation of the RiSpec RiDisplayChannel() function.
	 * @param {String} name - The name of the channel.
	 * @param {Array} tokens - A list of token names passed to the channel.
	 * @param {Array} params - A list of corresponding values for tokens.
	 */
	riDisplayChannel(channel, tokens, params) {};
	/**
	 * @description Script implementation of the RiSpec RiElse() function.
	 */
	riElse() {};
	/**
	 * @description Script implementation of the RiSpec RiElseIf() function.
	 * @param {String} expression - The expression for the condition.
	 * @param {Array} tokens - A list of token names.
	 * @param {Array} params - A list of corresponding values for tokens.
	 */
	riElseIf(expression, tokens, params) {};
	/**
	 * @description Attempts to finish the render.
	 * @param {String} message - The message to display in the progress dialog.
	 */
	riEndWorld(message) {};
	/**
	 * @description Script implementation of the RiSpec RiExposure() function.
	 * @param {Number} gain - The gain value to set.
	 * @param {Number} gamma - The gamma value to set.
	 */
	riExposure(gain, gamma) {};
	/**
	 * @description Script implementation of the RiSpec RiExterior() function.
	 * @param {String} name - The name of the volume shader.
	 * @param {Array} tokens - A list of token names passed to the shader.
	 * @param {Array} params - A list of corresponding values for tokens.
	 */
	riExterior(name, tokens, params) {};
	/**
	 * @description Script implementation of the RiSpec RiFormat() function.
	 * @param {Number} xres - The horizontal resolution of the image.
	 * @param {Number} yres - The vertical resolution of the image.
	 * @param {Number} aspect - The ratio of the width to the height of a single pixel.
	 */
	riFormat(xres, yres, aspect) {};
	/**
	 * @description Script implementation of the RiSpec RiFrameAspectRatio() function.
	 * @param {Number} aspect - The ratio of the width to the height of the desired image.
	 */
	riFrameAspectRatio(aspect) {};
	/**
	 * @description Script implementation of the RiSpec RiGeometricApproximation() function.
	 * @param {String} type -
	 * @param {Number} value -
	 */
	riGeometricApproximation(type, value) {};
	/**
	 * @description Script implementation of the RiSpec RiHider() function.
	 * @param {String} type - The type of the hider.
	 * @param {Array} tokens - A list of token names passed to the hider.
	 * @param {Array} params - A list of corresponding values for tokens.
	 */
	riHider(type, tokens, params) {};
	/**
	 * @description Script implementation of the RiSpec RiIdentity() function.
	 */
	riIdentity() {};
	/**
	 * @description Script implementation of the RiSpec RiIfBegin() function.
	 * @param {String} expression - The expression for the condition.
	 * @param {Array} tokens - A list of token names passed to the shader.
	 * @param {Array} params - A list of corresponding values for tokens.
	 */
	riIfBegin(expression, tokens, params) {};
	/**
	 * @description Script implementation of the RiSpec RiIfEnd() function.
	 */
	riIfEnd() {};
	/**
	 * @description Script implementation of the RiSpec RiIlluminate() function.
	 * @param {Number} light - The index of the light in the list.
	 * @param {Boolean} onOff - If true, adds the light to the list. If false, removes the light from the list.
	 */
	riIlluminate(light, onOff) {};
	/**
	 * @description Script implementation of the RiSpec RiImager() function.
	 * @param {String} name - The name of the imager shader.
	 * @param {Array} tokens - A list of token names passed to the shader.
	 * @param {Array} params - A list of corresponding values for tokens.
	 */
	riImager(name, tokens, params) {};
	/**
	 * @description Script implementation of the RiSpec RiInterior() function.
	 * @param {String} name - The name of the volume shader.
	 * @param {Array} tokens - A list of token names passed to the shader.
	 * @param {Array} params - A list of corresponding values for tokens.
	 */
	riInterior(name, tokens, params) {};
	/**
	 * @description Script implementation of the RiSpec RiLightSource() function.
	 * @returns Number The light handle index for this light source
	 * @param {String} name - The name of the light shader.
	 * @param {Array} tokens - A list of token names passed to the shader.
	 * @param {Array} params - A list of corresponding values for tokens.
	 */
	riLightSource(name, tokens, params) {};
	/**
	 * @description Script implementation of the RiSpec RiMakeBump() function.
	 * @param {String} pic -
	 * @param {String} tex -
	 * @param {String} swrap -
	 * @param {String} twrap -
	 * @param {Number} filterType -
	 * @param {Number} swidth -
	 * @param {Number} twidth -
	 * @param {Array} tokens - A list of token names passed to the shader.
	 * @param {Array} params - A list of corresponding values for tokens.
	 */
	riMakeBump(pic, tex, swrap, twrap, filterType, swidth, twidth, tokens, params) {};
	/**
	 * @description Script implementation of the RiSpec RiMakeCubeFaceEnvironment() function.
	 * @param {String} px -
	 * @param {String} nx -
	 * @param {String} py -
	 * @param {String} ny -
	 * @param {String} pz -
	 * @param {String} nz -
	 * @param {String} tex -
	 * @param {Number} fov -
	 * @param {Number} filterType -
	 * @param {Number} swidth -
	 * @param {Number} twidth -
	 * @param {Array} tokens - A list of token names passed to the shader.
	 * @param {Array} params - A list of corresponding values for tokens.
	 */
	riMakeCubeFaceEnvironment(px, nx, py, ny, pz, nz, tex, fov, filterType, swidth, twidth, tokens, params) {};
	/**
	 * @description Script implementation of the RiSpec RiMakeLatLongEnvironment() function.
	 * @param {String} pic -
	 * @param {String} tex -
	 * @param {Number} filterType -
	 * @param {Number} swidth -
	 * @param {Number} twidth -
	 * @param {Array} tokens - A list of token names passed to the shader.
	 * @param {Array} params - A list of corresponding values for tokens.
	 */
	riMakeLatLongEnvironment(pic, tex, filterType, swidth, twidth, tokens, params) {};
	/**
	 * @description Script implementation of the RiSpec RiMakeShadow() function.
	 * @param {String} pic -
	 * @param {String} tex -
	 * @param {Array} tokens - A list of token names passed to the shader.
	 * @param {Array} params - A list of corresponding values for tokens.
	 */
	riMakeShadow(pic, tex, tokens, params) {};
	/**
	 * @description Script implementation of the RiSpec RiMakeTexture() function.
	 * @param {String} pic -
	 * @param {String} tex -
	 * @param {String} swrap -
	 * @param {String} twrap -
	 * @param {Number} filterType -
	 * @param {Number} swidth -
	 * @param {Number} twidth -
	 * @param {Array} tokens - A list of token names passed to the shader.
	 * @param {Array} params - A list of corresponding values for tokens.
	 */
	riMakeTexture(pic, tex, swrap, twrap, filterType, swidth, twidth, tokens, params) {};
	/**
	 * @description Script implementation of the RiSpec RiMatte() function.
	 * @param onOff -
	 */
	riMatte(onoff) {};
	/**
	 * @description Script implementation of the RiSpec RiMultiplyShadingRate() function.
	 * @param {Number} ratemultiplier -
	 */
	riMultiplyShadingRate(ratemultiplier) {};
	/**
	 * @description Script implementation of the RiSpec RiOpacity() function.
	 * @param {Color} Os - The color to set.
	 */
	riOpacity(Os) {};
	/**
	 * @description Script implementation of the RiSpec RiOption() function.
	 * @param {String} type - The name of the option.
	 * @param {Array} tokens - A list of token names passed to the option.
	 * @param {Array} params - A list of corresponding values for tokens.
	 */
	riOption(name, tokens, params) {};
	/**
	 * @description Script implementation of the RiSpec RiOrientation() function.
	 * @param {String} orientation -
	 */
	riOrientation(orientation) {};
	/**
	 * @description Script implementation of the RiSpec RiPerspective() function.
	 * @param {Number} fov - The full horizontal field of view angle.
	 */
	riPerspective(fov) {};
	/**
	 * @description Script implementation of the RiSpec RiPixelFilter() function.
	 * @param {Number} filterType -
	 * @param {Number} xwidth -
	 * @param {Number} ywidth -
	 */
	riPixelFilter(filterType, xwidth, ywidth) {};
	/**
	 * @description Script implementation of the RiSpec RiPixelSamples() function.
	 * @param {Number} xsamples -
	 * @param {Number} ysamples -
	 */
	riPixelSamples(xsamples, ysamples) {};
	/**
	 * @description Script implementation of the RiSpec RiPixelVariance() function.
	 * @param {Number} variation -
	 */
	riPixelVariance(variation) {};
	/**
	 * @description Script implementation of the RiSpec RiProjection() function.
	 * @param {String} name - The name of the projection.
	 * @param {Array} tokens - A list of token names passed to the projection.
	 * @param {Array} params - A list of corresponding values for tokens.
	 */
	riProjection(name, tokens, params) {};
	/**
	 * @description Script implementation of the RiSpec RiWQuantize() function.
	 * @param {String} type -
	 * @param {Number} one -
	 * @param {Number} qmin -
	 * @param {Number} qmax -
	 * @param {Number} ampl -
	 */
	riQuantize(type, one, qmin, qmax, ampl) {};
	/**
	 * @description Script implementation of the RiSpec RiRelativeDetail() function.
	 * @param {Number} relativedetail -
	 */
	riRelativeDetail(relativedetail) {};
	/**
	 * @description Script implementation of the RiSpec RiReverseOrientation() function.
	 */
	riReverseOrientation() {};
	/**
	 * @description Script implementation of the RiSpec RiRotate() function.
	 * @param {Number} angle -
	 * @param {Number} dx -
	 * @param {Number} dy -
	 * @param {Number} dz -
	 */
	riRotate(angle, dx, dy, dz) {};
	/**
	 * @description Script implementation of the RiSpec RiScale() function.
	 * @param {Number} dx -
	 * @param {Number} dy -
	 * @param {Number} dz -
	 */
	riScale(dx, dy, dz) {};
	/**
	 * @description Script implementation of the RiSpec DDiScopedCoordinateSystem() function.
	 * @param {String} space - The name for the coordinate system.
	 */
	riScopedCoordinateSystem(space) {};
	/**
	 * @description Script implementation of the RiSpec RiScreenWindow() function.
	 * @param {Number} left -
	 * @param {Number} right -
	 * @param {Number} bot -
	 * @param {Number} top -
	 */
	riScreenWindow(left, right, bot, top) {};
	/**
	 * @description Script implementation of the RiSpec RiShader() function.
	 * @param {String} name - The name of the shader.
	 * @param {String} handle -
	 * @param {Array} tokens - A list of token names passed to the shader.
	 * @param {Array} params - A list of corresponding values for tokens.
	 */
	riShader(name, handle, tokens, params) {};
	/**
	 * @description Script implementation of the RiSpec RiShadingInterpolation() function.
	 * @param {String} type -
	 */
	riShadingInterpolation(type) {};
	/**
	 * @description Script implementation of the RiSpec RiShadingRate() function.
	 * @param {Number} size -
	 */
	riShadingRate(size) {};
	/**
	 * @description Script implementation of the RiSpec RiShutter() function.
	 * @param {Number} smin -
	 * @param {Number} smax -
	 */
	riShutter(smin, smax) {};
	/**
	 * @description Script implementation of the RiSpec RiSides() function.
	 * @param {Number} nsides -
	 */
	riSides(nsides) {};
	/**
	 * @description Script implementation of the RiSpec RiSkew() function.
	 * @param {Number} angle -
	 * @param {Number} dx1 -
	 * @param {Number} dy1 -
	 * @param {Number} dz1 -
	 * @param {Number} dx2 -
	 * @param {Number} dy2 -
	 * @param {Number} dz2 -
	 */
	riSkew(angle, dx1, dy1, dz1, dx2, dy2, dz2) {};
	/**
	 * @description Script implementation of the RiSpec RiSurface() function.
	 * @param {String} name - The name of the surface shader.
	 * @param {Array} tokens - A list of token names passed to the shader.
	 * @param {Array} params - A list of corresponding values for tokens.
	 */
	riSurface(name, tokens, params) {};
	/**
	 * @description Script implementation of the RiSpec RiTransform() function.
	 * @param {DzMatrix4} transform - The transform to set.
	 */
	riTransform(transform) {};
	/**
	 * @description Script implementation of the RiSpec RiTransformBegin() function.
	 */
	riTransformBegin() {};
	/**
	 * @description Script implementation of the RiSpec RiTransformEnd() function.
	 */
	riTransformEnd() {};
	/**
	 * @description Script implementation of the RiSpec RiTranslate() function.
	 * @param {Number} dx -
	 * @param {Number} dy -
	 * @param {Number} dz -
	 */
	riTranslate(dx, dy, dz) {};
	/**
	 * @description Script implementation of the RiSpec RiWorldBegin() function.
	 */
	riWorldBegin() {};
	/**
	 * @description Sets the background color.
	 * @param {Color} color - The color to set.
	 */
	setBackgroundColor(color) {};
	/**
	 * @description Sets the path of the script to be run when the script definition is called.
	 * @param {String} filename - The path of the script.
	 * @attention Global transient variables named Renderer that refers to the current DzRenderer, SurfaceName that refers to the name of the current surface, and Material that refers to the current DzMaterial, exist for the duration of filename. Referencing these variables from outside filename will result in an error.
	 */
	setCleanUpScript(filename) {};
	/**
	 * @description Sets whether or not the Ri call that launches a pre-process script should execute.
	 * @param {Boolean} shouldContinue - If true, the ri* call will be executed. If false, the ri* call will not be executed.
	 */
	setContinueAfterPreProcess(shouldContinue) {};
	/**
	 * @description Sets the crop window from the handler for the render.
	 * @param {DzRenderHandler} handler - The render handler to set.
	 */
	setCropWindow(handler) {};
	/**
	 * @description Sets the path of the script to run in order to define the renderer. Causes the renderer to be cleared, the cleanup script (if any) to be run and then the render script, clean up script, surface pre-process script, light pre-process script and displacement pre-process script to be cleared.
	 * @param {String} definitionFile - The path of the script to run.
	 * @attention filename is executed the moment the call to this method is made. A global transient variable named Renderer that referrs to the current DzRenderer, exists for the duration of filename. Referencing this variable from outside filename will result in an error.
	 */
	setDefinitionFile(definitionFile) {};
	/**
	 * @description Sets the path of the script to be run before a material displacement is processed.
	 * @param {String} filename - The path of the script.
	 * @attention Global transient variables named Renderer that refers to the current DzRenderer, DisplacementName that refers to the name of the current displacement, and Material that refers to the current DzMaterial, exist for the duration of filename. Referencing these variables from outside filename will result in an error.
	 */
	setDisplacementPreProcessScript(filename) {};
	/**
	 * @description Set whether or not this is a shadow pass.
	 * @param {Boolean} onOff - If true, this pass will be marked as a shadow pass.
	 */
	setIsShadowPass(onOff) {};
	/**
	 * @description Sets the path of the script to be run before riLightSource() and riAreaLightSource() are processed.
	 * @param {String} filename - The path of the script.
	 * @attention Global transient variables named Renderer that refers to the current DzRenderer, and LightName that refers to the name of the current DzLight, exist for the duration of filename. Referencing these variables from outside filename will result in an error.
	 */
	setLightPreProcessScript(filename) {};
	/**
	 * @description Sets whether or not the renderer is biased in the current mode.
	 * @returns Boolean
	 * @since 4.11.0.257
	 */
	setModeBiased(yesNo) {};
	/**
	 * @description TODO:
	 * Add description.
	 * @returns Boolean
	 */
	setModeDefaultMaterialClassname(classname) {};
	/**
	 * @description Sets whether or not the renderer is physically based in the current mode.
	 * @returns Boolean
	 * @since 4.11.0.257
	 */
	setModePhysicallyBased(yesNo) {};
	/**
	 * @description Sets whether or not the renderer supports advance camera properties in the current mode.
	 * @returns Boolean
	 * @since 4.11.0.257
	 */
	setModeSupportsAdvancedCamera(yesNo) {};
	/**
	 * @description Sets whether or not the renderer supports blades on the camera in the current mode.
	 * @returns Boolean
	 * @since 4.11.0.257
	 */
	setModeSupportsCameraBlades(yesNo) {};
	/**
	 * @description Sets the path of the script that controls the rendering process.
	 * @param {String} filename - The path of the script.
	 * @attention filename is executed the moment the call to this method is made. Global transient variables named Renderer that refers to the current DzRenderer, Camera that refers to the current DzCamera, BackDrop that refers to the current DzBackDrop, and RenderOptions that refers to the current DzRenderOptions, exist for the duration of filename. Referencing these variables from outside filename will result in an error.
	 */
	setRenderScript(filename) {};
	/**
	 * @description Sets the path of the script to be run before riSurface is processed.
	 * @param {String} filename - The path of the script.
	 * @attention Global transient variables named Renderer that refers to the current DzRenderer, SurfaceName that refers to the name of the current surface, and Material that refers to the current DzMaterial, exist for the duration of filename. Referencing these variables from outside filename will result in an error.
	 */
	setSurfacePreProcessScript(filename) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the definition file has changed.
	 * @signature `"defintionFileChanged()"`
	 * @event
	 */
	defintionFileChanged() {};

}
/**
 * A reference counted `object` (DzRefCountedItem) is an `object` that is intended to be shared between multiple owners - each owner registers an interest in the `object` when taking ownership, and dereferences the `object` when it is no longer needed. This mechanism serves to ensure that the referenced `object` is not deleted while in use and automatically deleted when no longer in use. There are cases, however, where it is desirable to keep one of these `objects` from being deleted even though it is not referenced by another `object` in the scene. These cases are where DzScriptHandle becomes useful - its purpose is to provide a mechanism by which a reference counted `object` is ensured to exist for at least the lifetime of the DzScriptHandle that references it.
 * The lifetime of a DzScriptHandle depends on the scope of the script variable that contains it (e.g., function scope, global scope), but is ultimately limited to the lifetime of the script.
 * Since:
 */
class DzScriptHandle extends QObject {
	/**
	 * @description Default constructor.
	 */
	constructor() {};
	/**
	 * @description Copy constructor.
	 */
	constructor(handle) {};
	/**
	 * @description Holds the object whose lifetime is being controlled.
	 * @type {Object}
	 */
	handle;
	/**
	 * @description Used to accesses the value of handle as a QObject. (Read Only)
	 * @type {Object}
	 */
	object;
	/**
	 * @description Holds whether or not handle can be used to retrieve a valid QObject. (Read Only)
	 * @type {Boolean}
	 */
	valid;

}
/**
 * 
 */
class DzScrollArea extends DzWidget {
	/**
	 * @description Creates a scroll area as a child of the given parent widget.
	 * @param {DzWidget} parent - The widget parent for the scroll area.
	 */
	constructor(parent) {};
	/**
	 * @description Holds the alignment of the widget.
	 * @type {DzWidget}
	 */
	alignment;
	/**
	 * @description Holds the size of the viewport as if the scroll bars had no valid scrolling range. (Read Only)
	 * @type {Size}
	 */
	maximumViewportSize;
	/**
	 * @description Holds whether or not the scroll area should resize the view widget.
	 * @type {Boolean}
	 */
	widgetResizable;
	/**
	 * @description Scrolls the contents of the scroll area so that childWidget is visible inside the viewport with margins specified in pixels by xmargin and ymargin. If the specified point cannot be reached, the contents are scrolled to the nearest valid position.
	 * @param {Number} x - The x coordinate.
	 * @param {Number} y - The y coordinate.
	 * @param {Number} xmargin - The margin in the horizontal direction.
	 * @param {Number} ymargin - The margin in the vertical direction.
	 */
	ensureVisible(x, y, xmargin = 50, ymargin = 50) {};
	/**
	 * @description Scrolls the contents of the scroll area so that childWidget is visible inside the viewport with margins specified in pixels by xmargin and ymargin. If the specified point cannot be reached, the contents are scrolled to the nearest valid position.
	 * @param {DzWidget} childWidget - The child to scroll to.
	 * @param {Number} xmargin - The margin in the horizontal direction.
	 * @param {Number} ymargin - The margin in the vertical direction.
	 */
	ensureWidgetVisible(childWidget, xmargin = 50, ymargin = 50) {};
	/**
	 * @description Hides the frame around the scroll area.
	 */
	hideFrame() {};
	/**
	 * @description Sets whether or not to display the horizontal scrollbar.
	 * @param {Boolean} onOff - If true, the horizontal scrollbar is always displayed. If false, the horizontal scrollbar is never displayed.
	 */
	setHorizontalScrollbarDisplay(onOff) {};
	/**
	 * @description Sets whether or not to display the vertical scrollbar.
	 * @param {Boolean} onOff - If true, the vertical scrollbar is always displayed. If false, the vertical scrollbar is never displayed.
	 */
	setVerticalScrollbarDisplay(onOff) {};
	/**
	 * @description Sets the contents of the scroll area to a widget.
	 * @param {DzWidget} widget - The widget to set as a child of the scroll area; this widget will be destroyed when the scroll area is deleted or when a new widget is set.
	 */
	setWidget(widget) {};

}
/**
 * Provides a scrolling area with on-demand scroll bars.
 * Deprecated
 * Exists only to keep old code working. Do not use in new code. Use DzScrollArea where possible instead.
 */
class DzScrollView extends DzWidget {
	/**
	 * @description Creates a scroll view as a child of the given parent widget.
	 * @param {DzWidget} parent - The widget parent for the scroll view.
	 */
	constructor(parent) {};

}
/**
 * The primary purpose of this container type is to collect results returned by a database query for assets.
 * See Also:
 */
class DzSearchContainer extends DzTopLevelAssetContainer, DzRefCountedItem {
	/**
	 * @returns Boolean true if this container has more search results, otherwise false.
	 */
	hasMoreSearchResults() {};

}
/**
 * This class provides a mapping between the names of the facegroup_dz objects associated with a facetmesh_dz and the DzNode objects that are likewise associated with that mesh. This mapping plays a part in the mechanism that allows a user to click on different areas of the mesh in the viewport and have that translate to the selection of a node.
 */
class DzSelectionMap extends DzBase {
	/**
	 * @description Default Constructor.
	 */
	constructor() {};
	/**
	 * @description Adds a new face group/node mapping to the selection map.
	 * @returns DzError DZ_NO_ERROR on success, otherwise an error code.
	 * @param {DzNode} faceGroupName - The name of the face group that will map to the given node.
	 * @param {DzNode} node - The node that will be selected when the face group is clicked on in the viewport.
	 * @param {Boolean} replaceIfExists - If true, checks to see if the face group is already mapped, and replaces the mapped node with the given node. If false, the operation will fail if the face group is already mapped.
	 */
	addPair(faceGroupName, node, replaceIfExists = false) {};
	/**
	 * @description Clears all pairs in the map.
	 */
	clearAll() {};
	/**
	 * @description Clears the missing groups based on the face groups on mesh.
	 * @returns DzFacetmesh
	 * @param {facetmesh_dz} mesh - The reference mesh.
	 */
	clearMissingGroups(mesh) {};
	/**
	 * @description Searches for the first group for a node.
	 * @returns String The name of the group for node.
	 * @param {DzNode} node - The node to find the group for.
	 */
	findGroupForNode(node) {};
	/**
	 * @description Searches for the first node for a group.
	 * @returns DzNode null if it fails, else the found node for group.
	 * @param {String} groupName - The name of the group to find.
	 */
	findNodeForGroup(groupName) {};
	/**
	 * @description Searches for the first pair.
	 * @returns Number The index of the mapping for the node, or -1 if no mapping for the node exists.
	 * @param {DzNode} node - The node to find the mapping for.
	 */
	findPair(node) {};
	/**
	 * @description Searches for the first pair.
	 * @returns Number The index of the mapping for the face group, or -1 if no mapping for the face group exists.
	 * @param {String} groupName - The name of the face group to find the mapping for.
	 */
	findPair(groupName) {};
	/**
	 * @returns Number The number of face group/node mappings in the selection map.
	 */
	getNumPairs() {};
	/**
	 * @returns String The name of the face group for the mapping.
	 * @param {Number} index - The index of the face group/node mapping to look up.
	 */
	getPairGroup(index) {};
	/**
	 * @returns DzNode The node for the mapping.
	 * @param {Number} index - The index of the face group/node mapping to look up.
	 */
	getPairNode(index) {};
	/**
	 * @description Removes a face group/node mapping from the selection map.
	 * @returns DzError DZ_NO_ERROR on success, otherwise an error code.
	 * @param {Number} index - The index of the mapping to remove.
	 */
	removePair(index) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the map changes.
	 * @signature `"mapModified()"`
	 * @event
	 */
	mapModified() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the visibility of the node in a given pair changes.
	 * @signature `"visibilityChanged()"`
	 * @event
	 */
	visibilityChanged() {};

}
/**
 * TODO:
 * Add detailed description.
 */
class DzSettings extends QObject {
	/**
	 * @description Default constructor.
	 */
	constructor() {};
	/**
	 * @description Copy constructor.
	 * @param {DzSettings} settings - The settings object to copy data from.
	 */
	constructor(settings) {};
	/**
	 * @description ENUM: A string value.
	 */
	StringValue;
	/**
	 * @description ENUM: An integer (whole number) value.
	 */
	IntValue;
	/**
	 * @description ENUM: A boolean (true/false) value.
	 */
	BoolValue;
	/**
	 * @description ENUM: A floating-point (decimal) value.
	 */
	FloatValue;
	/**
	 * @description ENUM: A nested settings value.
	 */
	SettingsValue;
	/**
	 * @description Clears all values from this settings object.
	 */
	clear() {};
	/**
	 * @description Copies the setting with the given index to the specified settings object.
	 * @returns DzSettings
	 * @param {Number} which - The index of the setting to copy.
	 * @param {DzSettings} copyTo - The settings object to copy the setting to.
	 */
	copySetting(which, copyTo) {};
	/**
	 * @description Copies the setting with the given index to the specified settings object.
	 * @returns DzSettings
	 * @param {String} key - The key of the setting to copy.
	 * @param {DzSettings} copyTo - The settings object to copy the setting to.
	 */
	copySetting(key, copyTo) {};
	/**
	 * @description Populates this settings object with the data encoded in a string.
	 * @returns Boolean true if the data was read successfully, otherwise false.
	 * @param {String} settings - The encoded string to load the data from.
	 */
	fromString(settings) {};
	/**
	 * @description Gets a boolean value from the settings.
	 * @returns Boolean The value of the setting.
	 * @param {String} key - The key for the value to get.
	 * @param {Boolean} defaultVal - The value to return if the key does not exist.
	 */
	getBoolValue(key, def = false) {};
	/**
	 * @returns Number The value of the setting.
	 * @param {String} key - The key for the value to get.
	 * @param {Number} defaultVal - The value to return if the key does not exist.
	 */
	getFloatValue(key, def = 0.0) {};
	/**
	 * @description Gets an integer value from the settings.
	 * @returns Number The value of the setting.
	 * @param {String} key - The key for the value to get.
	 * @param {Number} defaultVal - The value to return if the key does not exist.
	 */
	getIntValue(key, def = 0) {};
	/**
	 * @returns String The key for the setting at the given index (if valid), otherwise an empty string.
	 * @param {Number} which - The index of the value to get the key for.
	 */
	getKey(which) {};
	/**
	 * @returns Number The number of values stored in the settings.
	 */
	getNumValues() {};
	/**
	 * @returns Number The index of the setting with the given key (if any), otherwise NULL.
	 * @param {String} key - The key of the value to find.
	 * @attention The returned index is only valid while this object remains unchanged. Once a value is added or removed, this index may become invalid.
	 */
	getSettingIndex(key) {};
	/**
	 * @returns DzSettings The setting if key is found and is a SettingsValue, otherwise NULL.
	 * @param {String} key - The key for the value to get.
	 */
	getSettingsValue(key) {};
	/**
	 * @description Gets a string value from the settings.
	 * @returns String The value of the setting.
	 * @param {String} key - The key for the value to get.
	 * @param {String} defaultVal - The value to return if the key does not exist.
	 */
	getStringValue(key, def = "") {};
	/**
	 * @returns String The value of the setting at the given index in string form (if valid), otherwise an empty string.
	 * @param {Number} which - The index of the value to get.
	 */
	getValue(which) {};
	/**
	 * @returns Type The type of the setting at the given index (if valid), otherwise StringValue.
	 * @param {Number} which - The index of the value to get the type of.
	 */
	getValueType(which) {};
	/**
	 * @returns Number The index of the key (if any), otherwise -1.
	 * @param {String} key - The name of the key to find.
	 */
	hasKey(key) {};
	/**
	 * @description Removes a value.
	 * @param {String} key - The key for the value to remove.
	 */
	removeValue(key) {};
	/**
	 * @description Replaces the settings of this object with the settings of the specified object.
	 * @returns DzSettings
	 * @param {DzSettings} settings - The object with the settings to replace this one with.
	 */
	replaceWithSettings(settings) {};
	/**
	 * @description Adds a boolean value.
	 * @param {Boolean} key - The key for the value to set.
	 * @param {Boolean} value - The boolean value for the setting.
	 */
	setBoolValue(key, value) {};
	/**
	 * @description Adds a float value.
	 * @param {Number} key - The key for the value to set.
	 * @param {Number} value - The floating point value for the setting.
	 */
	setFloatValue(key, value) {};
	/**
	 * @description Adds an integer value.
	 * @param {Number} key - The key for the value to set.
	 * @param {Number} value - The integer value for the setting.
	 */
	setIntValue(key, value) {};
	/**
	 * @description Adds a nested settings value.
	 * @returns DzSettings The created settings object (if any), otherwise NULL.
	 * @param {String} key - The key for the value to set.
	 * @param {DzSettings} settings - The sub-setting value to add; a local copy is made.
	 */
	setSettingsValue(key, settings) {};
	/**
	 * @description Adds a nested (empty) settings value.
	 * @returns DzSettings An empty settings object with the given key.
	 * @param {String} key - The key for the value to set.
	 */
	setSettingsValue(key) {};
	/**
	 * @description Adds a string value.
	 * @param {String} key - The key for the value to set.
	 * @param {String} value - The string value for the setting.
	 */
	setStringValue(key, value) {};
	/**
	 * @returns Object A JSON object representation of the data.
	 * @since 4.8.1.23
	 */
	toJson() {};
	/**
	 * @returns String A JSON encoded string representation of the data.
	 * @since 4.8.1.23
	 */
	toJsonString() {};
	/**
	 * @description Appends lines of code to a script object that will reconstruct this DzSettings object.
	 * @param {DzScript} varName - The identifier for the variable in the script that holds the settings object.
	 * @param {DzScript} script - The script object to generate the settings lines in.
	 * @param {Number} indent - The indention level for the generated lines.
	 * @param {Boolean} define - If true, prepends a variable definition statement to the lines generated in script. If false, it is the caller's responsibility to ensure that varName is already defined in script and holds a valid DzSettings object.
	 */
	toScript(varName, script, indent, define = false) {};
	/**
	 * @returns String An XML encoded string representation of the data.
	 */
	toString() {};

}
/**
 * 
 */
class DzSettingsHelper extends QObject {
	/**
	 * @description Default Constructor
	 */
	constructor() {};
	/**
	 * @description Retrieves a value from the subkey at the given key.
	 * @returns Object The object that represents the value at the specified path/name
	 * @param {Object} path - The path of the key to retrieve the named value from; similar to a folder in the file system
	 * @param {Object} name - The name of the value to retrieve; the "key" in a key/value pair
	 * @param {Object} value - The default value to return if the name is not found; the "value" in a key/value pair
	 */
	get(path, name, value) {};
	/**
	 * @description Retrieves whether a value exists at the given key.
	 * @returns Boolean true if path/key exists, otherwise false.
	 * @param {String} path - The path of the key to check for its existence; similar to a folder in the file system
	 * @param {String} name - The name of the value to check for its existence; the "key" in a key/value pair
	 */
	hasValue(path, name) {};
	/**
	 * @description Removes a named value at the given path.
	 * @returns Boolean true if path/key exists, otherwise false.
	 * @since 4.9.0.38
	 * @param {String} path - The path of the key to remove; similar to a folder in the file system
	 * @param {String} name - The name of the value to remove; the "key" in a key/value pair
	 */
	removeValue(path, name) {};
	/**
	 * @description Records a named value to the path specified.
	 * @param {Object} path - The path of the key to place the named value at; similar to a folder in the file system
	 * @param {Object} name - The name of the value to record; the "key" in a key/value pair
	 * @param {Object} value - The value to record; i.e. a Number, String, Boolean or Color; the "value" in a key/value pair
	 */
	set(path, name, value) {};

}
/**
 * An asset save filter for saving a Shader Preset in the DSON format.
 * See Also:
 */
class DzShaderAssetFilter extends DzAssetFileOutFilter {

}
/**
 * This class provides a DzBasicCamera derived object with creator-defined properties that will be passed to the RSL Shader at render-time. Properties intended to be used to pass values as arguments to a shader attached to the camera must be added using DzRSLShader. Properties for the camera that will be used by the render-time scripts to set attributes must be added via DzElement.addProperty().
 */
class DzShaderCamera extends DzBasicCamera {
	/**
	 * @description Default Constructor.
	 */
	constructor() {};
	/**
	 * @description This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.
	 * @param {String} definitionFile - The relative [to DzApp.getScriptsPath()] path to the script file that creates this camera's property list.
	 * @param {String} renderTimeFile - The relative path [from DzApp.getScriptsPath()] to the DAZ Script that executes at render time.
	 */
	constructor(definitionFile, renderTimeFile) {};
	/**
	 * @description This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.
	 * @param {String} definitionFile - The relative [to DzApp.getScriptsPath()] path to the script file that creates this camera's property list.
	 */
	constructor(definitionFile) {};
	/**
	 * @description Adds shader to this camera's internal list of shaders and sets shader 's owner to this camera.
	 * @returns Boolean true if shader is successfully added to the list (e.g. does not already exist), otherwise false.
	 */
	addShader(shader) {};
	/**
	 * @returns String The internal name of the camera. This is not the same as the QObject.name property.
	 */
	getCameraName() {};
	/**
	 * @returns String The relative path [from DzApp.getScriptsPath()] to the DAZ Script that creates this camera's property list.
	 */
	getDefinitionFile() {};
	/**
	 * @returns Number The number of DzRSLShaders on this camera.
	 */
	getNumShaders() {};
	/**
	 * @returns String The relative path [from DzApp.getScriptsPath()] to the DAZ Script that is executed at render-time.
	 */
	getRenderTimeFile() {};
	/**
	 * @returns DzRSLShader The DzRSLShader at index or NULL if no shader exists at that index.
	 */
	getShader(index) {};
	/**
	 * @description Removes shader from this camera's internal list of shaders.
	 * @returns Boolean true if shader is successfully removed from the list, otherwise false.
	 */
	removeShader(shader) {};
	/**
	 * @description Sets the internal name of the camera; this is not the same as the QObject.name property. By default, this is "Custom".
	 */
	setCameraName(name) {};
	/**
	 * @description Sets the relative path of the [DAZ Script] file that builds this camera's property list.
	 * @param {String} definitionFile - The relative path [from DzApp.getScriptsPath()] to the DAZ Script that creates this camera's property list
	 * @attention definitionFile is executed the moment the call to this method is made. A global transient variable named Camera - referring to the current DzShaderCamera, exists for the duration of definitionFile. Referencing this variable from outside definitionFile will result in an error.
	 */
	setDefinitionFile(definitionFile, doOverride = false, runScript = true) {};
	/**
	 * @description Sets the relative path of the [DAZ Script] file that will be executed at render-time. This script can declare variables, set displays, hiders, and/or options as well as shader parameters for the element, and implement custom logic for special effects.
	 * @returns Boolean true if renderTimeFile is valid, otherwise false.
	 * @param {String} renderTimeFile - The relative path [from DzApp.getScriptsPath()] to the DAZ Script that executes at render time.
	 * @attention When renderTimeFile is executed, a global variable named Camera - referring to the current DzShaderCamera - exists for the duration of renderTimeFile. Referencing this variable from outside filename will result in an error. See the Render Time Functions for a list of special functions only available to this script.
	 */
	setRenderTimeFile(renderTimeFile) {};
	/**
	 * @description Sets the global graphic state by adding a series of RiDeclare calls before RiWorldBegin.
	 * @param {Array} tokens - An Array of the String] token names to set
	 * @param {Array} types - An Array of the corresponding String] type to set for each token
	 */
	declare(tokens, types) {};
	/**
	 * @description Sets the global graphic state by adding a RiDisplayV call before RiWorldBegin.
	 * @param {String} name - The name of the file or framebuffer to set, depending on type
	 * @param {String} type - The type of display to set; i.e. file, tiff, etc
	 * @param {String} mode - The mode to set; i.e. rgb, rgba, etc
	 * @param {Array} tokens - An Array of the String] tokens to set
	 * @param {Array} params - An Array of the corresponding basic type to set for each token
	 */
	setDisplay(name, type, mode, tokens, params) {};
	/**
	 * @description Sets the global graphic state by adding a RiHiderV call before RiWorldBegin.
	 * @param {String} type - The type of hider to set; i.e. hidden, raytrace, photonmap, etc
	 * @param {Array} tokens - An Array of the String] tokens to set
	 * @param {Array} params - An Array of the corresponding basic type to set for each token
	 */
	setHider(type, tokens, params) {};
	/**
	 * @description Sets the global graphic state by adding a RiOptionV call before RiWorldBegin.
	 * @param {String} option - The name of the option to set
	 * @param {Array} tokens - An Array of the String] tokens to set
	 * @param {Array} params - An Array of the corresponding basic type to set for each token
	 */
	setOption(option, tokens, params) {};

}
/**
 * DzShaderDescription contains information about a RenderMan shader - this includes the `type` of the shader, and a list of its parameters.
 */
class DzShaderDescription extends QObject {
	/**
	 * @description The type of the shader
	 * @type {DzShaderType}
	 */
	type;
	/**
	 * @description ENUM: Surface shader.
	 */
	SurfaceShader;
	/**
	 * @description ENUM: Light Shader.
	 */
	LightShader;
	/**
	 * @description ENUM: Displacement Shader.
	 */
	DisplacementShader;
	/**
	 * @description ENUM: Volume Shader.
	 */
	VolumeShader;
	/**
	 * @description ENUM: Image Shader.
	 */
	ImageShader;
	/**
	 * @returns Number The number of parameters in the shader.
	 */
	getNumParameters() {};
	/**
	 * @returns DzShaderParameter The i'th parameter in the shader.
	 */
	getParameter(i) {};

}
/**
 * This class provides a DzLight derived object with creator-defined properties that will be passed to the RSL Shader at render-time. By default, the light only has two properties - Color and Intensity. The values of these properties are not sent to the shader by default, nor are any attributes set representing the value of these properties. Unless put to use via DzRSLShader, these properties are purely for OpenGL purposes. These properties are not mappable by default, but can be made so by using DzRSLShader.addMapProperty() or DzRSLShader.addMappableProperty(). All other properties for the light must be added using DzRSLShader in order to be used to pass values as arguments to the shader. Properties for the light that will be used by the render-time scripts to set attributes must be added via DzElement.addProperty().
 */
class DzShaderLight extends DzLight {
	/**
	 * @description Default Constructor.
	 */
	constructor() {};
	/**
	 * @param {String} definitionFile - The relative [from DzApp.getScriptsPath()] path to the script file that creates this light's property list.
	 * @param {LightType} lightType - The enumerated type for the light. This controls certain aspects of the light, for instance whether or not the user can view through the light, the icon displayed in the Scene pane, the avatar representing the light in the viewport.
	 */
	constructor(definitionFile, type) {};
	/**
	 * @description ENUM: Null - Only in the scene to provide access to properties.
	 */
	NullLight;
	/**
	 * @description ENUM: Emits global light.
	 */
	AmbientLight;
	/**
	 * @description ENUM: Emits light in all directions.
	 */
	PointLight;
	/**
	 * @description ENUM: Emits parallel light.
	 */
	DistantLight;
	/**
	 * @description ENUM: Emits light in a pattern.
	 */
	SpotLight;
	/**
	 * @description Adds shader to this light's internal list of shaders and sets shader 's owner to this light.
	 * @returns Boolean true if shader is successfully added to the list (e.g. does not already exist), otherwise false.
	 */
	addShader(shader) {};
	/**
	 * @returns DzColorProperty The property that controls the color of this light.
	 */
	getColorControl() {};
	/**
	 * @returns String The relative path [from DzApp.getScriptsPath()] to the DAZ Script that creates this light's property list.
	 */
	getDefinitionFile() {};
	/**
	 * @returns Number The value of the property that controls the intensity of this light.
	 */
	getIntensity() {};
	/**
	 * @returns DzFloatProperty The property that controls the intensity of this light.
	 */
	getIntensityControl() {};
	/**
	 * @returns String The internal name of the light. This is not the same as the QObject.name property.
	 */
	getLightName() {};
	/**
	 * @returns LightType The type of the light.
	 */
	getLightType() {};
	/**
	 * @returns Number The number of DzRSLShaders on this light.
	 */
	getNumShaders() {};
	/**
	 * @returns DzRSLShader The DzRSLShader at index or NULL if no shader exists at that index.
	 */
	getShader(index) {};
	/**
	 * @returns String The path to the generated shadow map for this light.
	 */
	getShadowMapPath() {};
	/**
	 * @description Removes shader from this light's internal list of shaders.
	 * @returns Boolean true if shader is successfully removed from the list, otherwise false.
	 */
	removeShader(shader) {};
	/**
	 * @description Sets the relative path of the [DAZ Script] file that builds this light's property list.
	 * @param {String} definitionFile - The relative path [from DzApp.getScriptsPath()] to the DAZ Script that creates this light's property list
	 * @attention definitionFile is executed the moment the call to this method is made. A global transient variable named Light - referring to the current DzShaderLight being rendered, exists for the duration of definitionFile. Referencing this variable from outside definitionFile will result in an error.
	 */
	setDefinitionFile(definitionFile, doOverride = false, runScript = true) {};
	/**
	 * @description Sets the internal name of the light; this is not the same as the QObject.name property. By default, this is "Custom".
	 */
	setLightName(name) {};
	/**
	 * @description Sets the type of a light. A light's type determines the OpenGL representation.
	 */
	setLightType(type) {};
	/**
	 * @description Sets a flag so that transforms are applied to the coordinate space that the light is in, greatly simplifying shader math.
	 */
	setUseLocalShaderSpace(onOff) {};
	/**
	 * @returns Boolean Whether transforms are applied to the coordinate space that the light is in. false by default
	 */
	usesLocalShaderSpace() {};

}
/**
 * This class provides a DzMaterial derived object with creator-defined properties that will be passed to the RSL Shader at render-time. By default, the material only has two properties - Diffuse Color (Cs) and Opacity Strength (Os) - which are not passed as tokens to the shader, rather they are attributes sent directly to the renderer, via RiColor() and RiOpacity() respectively. These properties are not mappable by default, but can be made so by using DzRSLShader.addMapProperty(). All other properties for the material must be added using DzRSLShader.addShaderProperty() and DzRSLShader.addMappableProperty() in order to be used to pass values as arguments to the shader. Properties for the material that will be used by the render-time scripts to set attributes must be added via DzElement.addProperty().
 * Samples:
 * See Also:
 */
class DzShaderMaterial extends DzRefCountedItem, DzMaterial {
	/**
	 * @description Default Constructor.
	 */
	constructor() {};
	/**
	 * @description This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.
	 * @param {DzShaderMaterial} mat - The DzShaderMaterial to copy
	 * @param {Boolean} duplicateMissingProps - Whether or not to duplicate missing properties
	 */
	constructor(mat, duplicateMissingProps = true) {};
	/**
	 * @description This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.
	 * @param {String} definitionFile - The relative path [from DzApp.getScriptsPath()] to the DAZ Script that creates this material's property list.
	 */
	constructor(definitionFile) {};
	/**
	 * @description Adds shader to this material's internal list of shaders and sets shader 's owner to this material.
	 * @returns Boolean true if shader is successfully added to the list (e.g. does not already exist), otherwise false.
	 */
	addShader(shader) {};
	/**
	 * @returns String The relative path [from DzApp.getScriptsPath()] to the DAZ Script that creates this material's property list.
	 */
	getDefinitionFile() {};
	/**
	 * @returns DzColorProperty The Diffuse Color property of this material
	 */
	getDiffuseProperty() {};
	/**
	 * @returns Number The number of DzRSLShaders on this material
	 */
	getNumShaders() {};
	/**
	 * @returns DzFloatProperty The Opacity property of this material
	 */
	getOpacityProperty() {};
	/**
	 * @returns DzRSLShader The DzRSLShader at index or NULL if no shader exists at that index.
	 */
	getShader(index) {};
	/**
	 * @description Removes shader from this material's internal list of shaders.
	 * @returns Boolean true if shader is successfully removed from the list, otherwise false.
	 */
	removeShader(shader) {};
	/**
	 * @description Sets the relative path of the [DAZ Script] file that defines this material.
	 * @param {String} definitionFile - The relative path [from DzApp.getScriptsPath()] to the DAZ Script that defines this material
	 * @param {Boolean} doOverride - Whether or not to override the setting of the definition file if it has already been set
	 * @param {Boolean} runScript - Whether or not to run the definition script upon setting it
	 * @attention definitionFile is executed the moment the call to this method is made. A global transient variable named Material - refering to the current DzShaderMaterial being rendered, exists for the duration of definitionFile. Referencing this variable from outside definitionFile will result in an error.
	 */
	setDefinitionFile(definitionFile, doOverride = false, runScript = true) {};
	/**
	 * @description Sets the name of the material type that will be returned by getMaterialName(). By default, this is "Custom"
	 * @param {String} name - The name to assign to this material
	 */
	setMaterialName(name) {};
	/**
	 * @description Sets whether this material needs the Tangent Space Params: varying vector dPds and varying float dPdsM. dPds is the tangent vector along the surface. dPdsM is the handedness of the bitangent vector on the surface. The bitangent can be reconstructed using:
	 * @param {Boolean} onoff - Whether or not this material needs the Tangent Space Params
	 */
	setNeedsTangentSpaceParams(onoff) {};

}
/**
 * TODO:
 * Add detailed description.
 */
class DzShaderParameter extends QObject {
	/**
	 * @description The type of the parameter
	 * @type {DzShaderParamType}
	 */
	type;
	/**
	 * @description ENUM: Unknown Parameter type.
	 */
	UnknownType;
	/**
	 * @description ENUM: Point type parameter.
	 */
	PointType;
	/**
	 * @description ENUM: Normal type parameter.
	 */
	NormalType;
	/**
	 * @description ENUM: Vector type parameter.
	 */
	VectorType;
	/**
	 * @description ENUM: Color type parameter.
	 */
	ColorType;
	/**
	 * @description ENUM: Scalar type parameter.
	 */
	ScalarType;
	/**
	 * @description ENUM: String type parameter.
	 */
	StringType;
	/**
	 * @description ENUM: Matrix type parameter.
	 */
	MatrixType;

}
/**
 * An asset save filter for saving a Shader Definition Support Asset in the DSON format.
 * See Also:
 */
class DzShaderSupportAssetFilter extends DzAssetFileOutFilter {
	/**
	 * @description TODO:
	 * Add description.
	 */
	constructor() {};

}
/**
 * See Also:
 * Attention:
 * Since:@attention Attention:
 */
class DzShapeRiggingAdjuster extends QObject {
	/**
	 * @description Default Constructor. Creates a shape rigging adjuster that can be used to adjust bone positions and orientations of the selected figure, based on the current shape.
	 */
	constructor() {};
	/**
	 * @description Performs the rigging adjustment based on the current shape.
	 * @returns Boolean true if the adjustment was successful, false if the adjustment could not be completed.
	 */
	doAdjustments() {};
	/**
	 * @description Sets whether or not center points of bones being ajusted are allowed to be modified.
	 * @param {Boolean} yesNo - If true (default), the center points of bones are permitted to be modified.
	 */
	setAdjustCenterPoints(yesNo) {};
	/**
	 * @description Sets whether or not end points of bones being ajusted are allowed to be modified.
	 * @param {Boolean} yesNo - If true (default), the end points of bones are permitted to be modified.
	 */
	setAdjustEndPoints(yesNo) {};
	/**
	 * @description Sets whether or not the orientations of bones being ajusted are allowed to be modified.
	 * @param {Boolean} yesNo - If true, the orientations of bones are permitted to be modified.
	 */
	setAdjustOrientation(yesNo) {};
	/**
	 * @description Sets the list of bones to exclude when adjusting.
	 * @param {Array} boneNames - The list of bone names to exclude.
	 */
	setExcludedBones(boneNames) {};
	/**
	 * @description Sets the list of facet groups to exclude when calculating adjustments to make.
	 * @param {Array} groupNames - The list of facet group names to exclude.
	 */
	setExcludedFacetGroups(groupNames) {};
	/**
	 * @description Sets the target asset to be the geometry contained by the given node.
	 * @param {DzFigure} figure - The figure to adjust the rigging on.
	 */
	setFigure(figure) {};

}
/**
 * An asset save filter for saving a Shaping Preset in the DSON format.
 * See Also:
 */
class DzShapingAssetFilter extends DzAssetFileOutFilter {
	/**
	 * @description TODO:
	 * Add description.
	 */
	constructor() {};

}
/**
 * TODO:
 * Add detailed description.
 */
class DzSimpleElementData extends DzElementData {
	/**
	 * @description Default constructor.
	 * @param {String} name - The name for the data item. This must be unique for all data items on a given element - i.e. an element can not have two data items with the same name.
	 * @param {Boolean} persistent - If true, the data item will be saved with the element to the native file format.
	 */
	constructor(name, persistent = false) {};
	/**
	 * @returns DzSettings The settings owned by this element data item.
	 */
	getSettings() {};

}
/**
 * Implements a custom data item that causes a specified script to be executed after the element that owns the data item has been loaded into the scene.
 * A global transient variable named DataItem, which refers to the DzSimpleElementScriptData that invoked the execution of the script, is provided to the script in the global context at runtime. Attempts to use this global variable outside of the associated script will result in a ReferenceError.
 * A global transient variable named FileIOSettings, which refers to the DzFileIOSettings that was used when the element that owns the data item was loaded, is provided to the script in the global context at runtime. Attempts to use this global variable outside of the associated script will result in a ReferenceError. (since 4.9.4.109)
 * If the DzSettings for this data item contains a boolean setting named RunOnce set to true, the specified script will be run once and then the data item will be deleted from the element.
 * Attention:@attention Attention:
 */
class DzSimpleElementScriptData extends DzSimpleElementData {
	/**
	 * @description Default constructor.
	 * @param {String} name - The name for the data item. This must be unique for all data items on a given element - i.e. an element can not have two data items with the same name.
	 * @param {Boolean} persistent - If true, the data item will be saved with the element to the native file format.
	 */
	constructor(name, persistent = true) {};
	/**
	 * @returns String The file path of the script for this data item (if any), otherwise an empty string.
	 */
	getScriptFilePath() {};
	/**
	 * @description Sets the file path of the script for this data item.
	 * @param {String} script - The file path of the script.
	 */
	setScriptFilePath(script) {};

}
/**
 * TODO:
 * Add detailed description.
 */
class DzSimpleSceneData extends DzSceneData {
	/**
	 * @description Default constructor.
	 * @param {String} name - The name for the data item. This must be unique for all data items on a given element - i.e. an element can not have two data items with the same name.
	 * @param {Boolean} persistent - If true, the data item will be saved with the element to the native file format.
	 */
	constructor(name, persistent = false) {};
	/**
	 * @returns DzSettings The settings owned by this scene data item.
	 */
	getSettings() {};

}
/**
 * Implements a custom data item that causes a specified script to be executed after the scene has been loaded.
 * A global transient variable named DataItem, which refers to the DzSimpleSceneScriptData that invoked the execution of the script, is provided to the script in the global context at runtime. Attempts to use this global variable outside of the associated script will result in a ReferenceError.
 * A global transient variable named FileIOSettings, which refers to the DzFileIOSettings that was used when the scene was loaded, is provided to the script in the global context at runtime. Attempts to use this global variable outside of the associated script will result in a ReferenceError. (since 4.9.4.109)
 * If the DzSettings for this data item contains a boolean setting named RunOnce set to true, the specified script will be run once and then the data item will be deleted from the scene.
 */
class DzSimpleSceneScriptData extends DzSimpleSceneData {
	/**
	 * @description Default constructor.
	 * @param {String} name - The name for the data item. This must be unique for all data items on the scene - i.e. a scene can not have two data items with the same name.
	 * @param {Boolean} persistent - If true, the data item will be saved with the scene to the native file format.
	 */
	constructor(name, persistent = true) {};
	/**
	 * @returns String The file path of the script for this data item (if any), otherwise an empty string.
	 */
	getScriptFilePath() {};
	/**
	 * @description Sets the file path of the script for this data item.
	 * @param {String} script - The file path of the script.
	 */
	setScriptFilePath(script) {};

}
/**
 * Implements a simulation engine.
 * Since:
 */
class DzSimulationEngine extends DzBase {
	/**
	 * @description Clears all simulation data in the scene for this engine.
	 * @returns DzError
	 */
	clearSimulation() {};
	/**
	 * @description Starts a custom simulation on the list of nodes specified, using this engine.
	 * @returns DzError
	 * @param {Array} nodes - The list of nodes to perform the simulation on.
	 */
	customSimulate(nodes) {};
	/**
	 * @returns Array A list of elements that hold the properties for controlling this engine.
	 */
	getSimulationElements(list) {};
	/**
	 * @description Starts a simulation using this engine.
	 * @returns DzError
	 */
	simulate() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted just before the engine begins simulating.
	 * @signature `"aboutToSimulate(DzSimulationEngine*)"`
	 * @event
	 */
	aboutToSimulate(engine) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted just after the engine finishes simulating.
	 * @signature `"simulateFinished(DzSimulationEngine*)"`
	 * @event
	 */
	simulateFinished(engine) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when an error occurs while the engine is simulating.
	 * @signature `"simulationError(const QString&)"`
	 * @event
	 */
	simulationError(errorMsg) {};

}
/**
 * Responsible for the management of simulation engines, and more generally the process of performing a simulation.
 * There is only one instance of this manager in an application. This instance is created and owned by DzApp. Request the instance via DzApp.getSimulationMgr().
 * See Also:
 * Since:
 */
class DzSimulationMgr extends DzBase {
	/**
	 * @description Clears all simulation data in the scene for the active simulation engine.
	 * @returns DzError DZ_NO_ERROR if the operation is successful, otherwise an appropriate error code.
	 */
	clearSimulation() {};
	/**
	 * @returns DzSimulationEngine The simulation engine with the given class name (if any), otherwise null.
	 */
	findSimulationEngine(className) {};
	/**
	 * @returns DzSimulationEngine The active simulation engine for the application. This will be NULL if no simulation engines are available.
	 */
	getActiveSimulationEngine() {};
	/**
	 * @returns Number The number of simulation engines available to the application.
	 */
	getNumSimulationEngines() {};
	/**
	 * @returns DzSimulationEngine If which is within the range [0, getNumSimulationEngines() - 1], the simulation engine at the given index, otherwise null.
	 */
	getSimulationEngine(which) {};
	/**
	 * @returns Array A list of simulation engines available in the application.
	 */
	getSimulationEngineList() {};
	/**
	 * @returns Boolean true if the application is currently simulating, otherwise false.
	 */
	isSimulating() {};
	/**
	 * @description Sets the active simulation engine for the application.
	 * @param {DzSimulationEngine} engine - The simulation engine to make active.
	 */
	setActiveSimulationEngine(engine) {};
	/**
	 * @description Performs a simulation on the scene with the given simulation settings. If no simulation settings are specified, then the current application simulation settings are used.
	 * @returns DzError DZ_NO_ERROR if the operation is successful, otherwise an appropriate error code.
	 */
	simulate() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the active simulation engine has changed.
	 * @signature `"activeSimulationEngineChanged(DzSimulationEngine*)"`
	 * @event
	 */
	activeSimulationEngineChanged(engine) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when a new simulation engine is added to the manager. This only occurs at startup as plug-ins are being loaded.
	 * @signature `"simulationEngineAdded(DzSimulationEngine*)"`
	 * @event
	 */
	simulationEngineAdded(engine) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when an error occurs while the active simulation engine is simulating.
	 * @signature `"simulationError(const QString&)"`
	 * @event
	 */
	simulationError(errorMsg) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted just after a simulation operation is finished. This is only emitted when a simulation operation is performed by calling simulate() - this includes all simulation operations that are started by the user from the interface. This may not include simulation operations performed by plug-ins, scripts, etc which do not call simulate().
	 * @signature `"simulationFinished(bool)"`
	 * @event
	 */
	simulationFinished(succeeded) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the default options for the active simulation engine have been restored.
	 * @signature `"simulationOptionDefaultsRestored()"`
	 * @event
	 */
	simulationOptionDefaultsRestored() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted just before a simulation operation begins. This is only emitted when a simulation operation is performed by calling simulate() - this includes all simulation operations that are started by the user from the interface. This may not include simulation operations performed by plug-ins, scripts, etc which do not call simulate().
	 * @signature `"simulationStarting()"`
	 * @event
	 */
	simulationStarting() {};

}
/**
 * An asset save filter for saving a Simulation Settings Preset in the DSON format.
 * See Also:
 */
class DzSimulationSettingsAssetFilter extends DzAssetFileOutFilter {
	/**
	 * @description TODO:
	 * Add description.
	 */
	constructor() {};

}
/**
 * This is the DAZScript counterpart to the QSize type used in the DAZ Studio SDK. A Size object is a two dimensional representation of a `width` and `height.`
 * Attention:@attention Attention:
 */
class Size extends QObject {
	/**
	 * @description Default constructor.
	 */
	constructor() {};
	/**
	 * @description Copy Constructor.
	 * @param {Size} size - The Size to copy.
	 */
	constructor(size) {};
	/**
	 * @param {Number} width - The width for the size.
	 * @param {Number} height - The height for the size.
	 */
	constructor(width, height) {};
	/**
	 * @description Holds the height of the size.
	 * @type {Number}
	 */
	height;
	/**
	 * @description Holds the width of the size.
	 * @type {Number}
	 */
	width;
	/**
	 * @description Swaps the width and height of the size.
	 */
	translate() {};

}
/**
 * See Also:
 */
class DzSkeleton extends DzNode {
	/**
	 * @description Default Constructor.
	 */
	constructor() {};
	/**
	 * @description ENUM: Temporarily redirects ERC links established between properties associated with this skeleton to the same named properties in the follow target (if any), while this skeleton is following said target.
	 * 
	 *  See Also:
	 * 
	 *  DzProperty.getNumControllers()
	 * 
	 *  DzProperty.getController()
	 * 
	 *  DzERCLink
	 */
	fmRedirect;
	/**
	 * @description ENUM: Matches the names of properties associated with this skeleton (that are configured to allow auto-follow) to the same named properties in the follow target (if any), in order to replicate their respective values, while this skeleton is following said target.
	 * 
	 *  See Also:
	 * 
	 *  DzProperty.canAutoFollow()
	 */
	fmAutoFollow;
	/**
	 * @description Converts an articulate figure to a static prop.
	 * @returns DzNode
	 * @param {DzSkeleton} srcSkeleton - The skeleton to convert.
	 * @param {String} nodeName - The name to assign to the new prop.
	 */
	static convertFigureToProp(skeleton, nodeName) {};
	/**
	 * @description Clears the generated morphs.
	 */
	clearGeneratedMorphs() {};
	/**
	 * @returns DzBone The bone in this skeleton's hierarchy with a matching name (if any), otherwise NULL.
	 * @param {String} name - The name of the bone to look for.
	 */
	findBone(name) {};
	/**
	 * @returns DzBone The bone in this skeleton's hierarchy with a matching label (if any), otherwise NULL.
	 * @param {String} label - The label of the bone to look for.
	 */
	findBoneByLabel(label) {};
	/**
	 * @returns Array A list containing all bones that are part of this skeleton.
	 */
	getAllBones() {};
	/**
	 * @returns Boolean true if OpenGL bones will draw in the viewport, otherwise false.
	 */
	getDrawGLBones() {};
	/**
	 * @returns DzBoolProperty The boolean property that controls bone drawing in the viewport.
	 */
	getDrawGLBonesControl() {};
	/**
	 * @returns DzFloatProperty The float property that controls the figure identifier.
	 * @since 4.6.2.42
	 */
	getFigureIDControl() {};
	/**
	 * @returns DzSkeletonProperty The property that controls which skeleton this skeleton will follow.
	 */
	getFollowControl() {};
	/**
	 * @returns DzFollowingProjectionOptions The following projection options for this skeleton.
	 */
	getFollowingProjectionOptions() {};
	/**
	 * @returns FollowMode The current follow mode of this skeleton.
	 * @since 4.8.0.23
	 */
	getFollowMode() {};
	/**
	 * @returns DzEnumProperty The enum property that controls the follow mode of this skeleton.
	 * @since 4.8.0.23
	 */
	getFollowModeControl() {};
	/**
	 * @returns DzSkeleton The i'th skeleton following this one.
	 */
	getFollowSkeleton(which) {};
	/**
	 * @returns DzSkeleton The skeleton that this skeleton is currently following (if any), otherwise NULL.
	 */
	getFollowTarget() {};
	/**
	 * @returns DzColorProperty The color property that controls bone color in the viewport.
	 */
	getGLBonesColorControl() {};
	/**
	 * @returns DzFloatProperty The float property that controls bone edge opacity in the viewport.
	 */
	getGLBonesEdgeOpacityControl() {};
	/**
	 * @returns DzEnumProperty The enum property that controls bone edge style in the viewport.
	 */
	getGLBonesEdgeStyleControl() {};
	/**
	 * @returns DzFloatProperty The float property that controls bone fill opacity in the viewport.
	 */
	getGLBonesFillOpacityControl() {};
	/**
	 * @returns Number The number of skeletons following this one.
	 */
	getNumFollowSkeletons() {};
	/**
	 * @returns String label if the value provided is already unique, otherwise label with a suffix that causes it to be unique.
	 * @since 4.12.0.66
	 * @param {DzBone} label - The bone label to make unique; any trailing space/digits will automatically be stripped.
	 * @param {DzBone} bone - The bone that the label is intended for; may be null; this bone will be ignored when validating uniqueness.
	 */
	getUniqueBoneLabel(label, bone = null) {};
	/**
	 * @returns String name if the value provided is already unique, otherwise name with a suffix that causes it to be unique.
	 * @since 4.12.0.66
	 * @param {DzBone} name - The bone name to make unique; any trailing space/digits will automatically be stripped.
	 * @param {DzBone} bone - The bone that the name is intended for; may be null; this bone will be ignored when validating uniqueness.
	 */
	getUniqueBoneName(name, bone = null) {};
	/**
	 * @description Invalidates the bounding boxes for this node, causing them to be recalculated.
	 * @param {Boolean} checkSkeleton - Whether or not to invalidate the bounding box for this node's skeleton, if it has one.
	 */
	invalidateBoundingBoxes(checkSkeleton = true) {};
	/**
	 * @description Sets whether or not OpenGL bones will draw in the viewport.
	 * @param {Boolean} onOff - If true, bones will be drawn in the viewport.
	 */
	setDrawGLBones(onOff) {};
	/**
	 * @description Sets the figure that we are currently following.
	 * @returns DzSkeleton
	 * @param {DzSkeleton} skeleton - The new follow target for this skeleton. If NULL, clears the figure that this skeleton is following.
	 */
	setFollowTarget(skeleton) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the follow target for this skeleton has changed.
	 * @signature `"followTargetChanged(DzSkeleton*)"`
	 * @event
	 */
	followTargetChanged(skeleton) {};

}
/**
 * A specialized subclass of DzNodeProperty which will only allow the user to select nodes that are skeletons from the scene. This is currently used by skeletons for the 'Fit To' property.
 */
class DzSkeletonProperty extends DzNodeProperty {
	/**
	 * @description Default Constructor. Creates a non-animatable, non-user property.
	 */
	constructor() {};
	/**
	 * @param {String} name - The name of this property.
	 * @param {Boolean} canAnimate - If true, create an animatable property. If false, a non-animatable property is created.
	 * @param {Boolean} isUserProperty - If true, creates a user property; user properties are properties that can be added/deleted by users.
	 */
	constructor(name, canAnimate, isUserProperty) {};
	/**
	 * @returns DzSkeleton The value of the property, NULL if no skeleton is selected.
	 */
	getSkeletonValue() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted immediately before the value of the property changes.
	 * @signature `"aboutToChange()"`
	 * @event
	 */
	aboutToChange() {};

}
/**
 * This class is mainly used by the framework to store source paths for imported Poser content. The class can be used as follows to retrieve the path of the CR2 file from which a figure was loaded:
 * Todo
 */
class DzSourceFileData extends DzElementData {
	/**
	 * @description Creates a new Source File Data object that stores the given file path.
	 */
	constructor(filePath = "") {};
	/**
	 * @description The path to the source file.
	 * @type {String}
	 */
	sourceFilePath;
	/**
	 * @returns Boolean true if the source geometry has changed, otherwise false.
	 */
	getGeometryChanged() {};
	/**
	 * @description Tries to convert the source path into a "Poser" style Runtime-relative path (i.e. ":Runtime:Libraries:Character:FileName.cr2"). Returns the converted path if successful, and an empty string if unsuccessful.
	 * @returns String The source path.
	 */
	getPoserRuntimeRelativePath() {};
	/**
	 * @description Sets whether or not the source geometry has changed.
	 */
	setGeometryChanged(onoff) {};

}
/**
 * A DzSplitter provides the user with the ability to control the size of child widgets by dragging the boundary between the children.
 */
class DzSplitter extends DzWidget {
	/**
	 * @description Creates a splitter widget as a child of the given parent widget.
	 * @param {DzWidget} parent - The widget parent for the splitter.
	 */
	constructor(parent) {};
	/**
	 * @description Holds whether or not the children widgets of the splitter are collapsible.
	 * @type {Boolean}
	 */
	childrenCollapsible;
	/**
	 * @description Holds the width of the splitter handle.
	 * @type {Number}
	 */
	handleWidth;
	/**
	 * @description Holds whether or not resizing is opaque.
	 * @type {Boolean}
	 */
	opaqueResize;
	/**
	 * @description Holds the orientation of the splitter.
	 * @type {DzWidget}
	 */
	orientation;
	/**
	 * @description TODO:
	 * Add description.
	 */
	addWidget(widget) {};
	/**
	 * @description TODO:
	 * Add description.
	 * @returns Number
	 */
	count() {};
	/**
	 * @description TODO:
	 * Add description.
	 * @returns Number
	 */
	indexOf(widget) {};
	/**
	 * @description TODO:
	 * Add description.
	 */
	insertWidget(index, widget) {};
	/**
	 * @description TODO:
	 * Add description.
	 * @returns Boolean
	 */
	isCollapsible(index) {};
	/**
	 * @description TODO:
	 * Add description.
	 * @returns Boolean
	 */
	restoreState(state) {};
	/**
	 * @description TODO:
	 * Add description.
	 * @returns ByteArray
	 */
	saveState() {};
	/**
	 * @description TODO:
	 * Add description.
	 */
	setCollapsible(index, collapse) {};
	/**
	 * @description TODO:
	 * Add description.
	 */
	setStretchFactor(index, stretch) {};
	/**
	 * @description TODO:
	 * Add description.
	 * @returns DzWidget
	 */
	widget(index) {};

}
/**
 * TODO:
 * Add detailed description.
 */
class DzSpotLight extends DzDistantLight {
	/**
	 * @description Default Constructor. Creates a new spotlight.
	 */
	constructor() {};
	/**
	 * @returns Number The (scaled) base opacity.
	 * @since 4.9.3.145
	 */
	getBaseOpacity() {};
	/**
	 * @returns DzFloatProperty The property that controls the base opacity.
	 * @since 4.9.3.145
	 */
	getBaseOpacityControl() {};
	/**
	 * @returns Number The beam distribution.
	 * @since 4.9.3.145
	 */
	getBeamDistribution() {};
	/**
	 * @returns DzFloatProperty The property that controls beam distribution.
	 */
	getBeamDistributionControl() {};
	/**
	 * @returns Number The decay of the light.
	 * @since 4.9.3.145
	 */
	getDecay() {};
	/**
	 * @returns DzFloatProperty The property used to control decay.
	 */
	getDecayControl() {};
	/**
	 * @returns Boolean true if the cone will be displayed when the node is not selected, otherwise false.
	 * @since 4.9.3.145
	 */
	getDisplayPersistence() {};
	/**
	 * @returns DzBoolProperty The property that controls the display persistence.
	 * @since 4.9.3.145
	 */
	getDisplayPersistenceControl() {};
	/**
	 * @returns Number The (scaled) edge opacity.
	 * @since 4.9.3.145
	 */
	getEdgeOpacity() {};
	/**
	 * @returns DzFloatProperty The property that controls the edge opacity.
	 * @since 4.9.3.145
	 */
	getEdgeOpacityControl() {};
	/**
	 * @description TODO:
	 * Add description.
	 * @returns Number
	 */
	getFalloffDistance(lightPercent) {};
	/**
	 * @returns Number The exponent (rate of decay from center to edge) of the light.
	 * @since 4.8.0.18
	 */
	getLightExponent() {};
	/**
	 * @returns DzFloatProperty The property that controls the beam exponent of the light.
	 * @since 4.8.0.18
	 */
	getLightExponentControl() {};
	/**
	 * @description TODO:
	 * Add description.
	 * @returns Boolean
	 */
	getLightVisibility() {};
	/**
	 * @description TODO:
	 * Add description.
	 * @returns Number
	 */
	getLineOpacity() {};
	/**
	 * @returns Number The opacity scale.
	 * @since 4.9.3.145
	 */
	getOpacityScale() {};
	/**
	 * @returns DzFloatProperty The property that controls the opacity scale.
	 * @since 4.9.3.145
	 */
	getOpacityScaleControl() {};
	/**
	 * @returns Number The ray length.
	 * @since 4.9.3.145
	 */
	getRayLength() {};
	/**
	 * @returns DzFloatProperty The property that controls the ray length.
	 * @since 4.9.3.145
	 */
	getRayLengthControl() {};
	/**
	 * @returns Number The (scaled) ray opacity.
	 * @since 4.9.3.145
	 */
	getRayOpacity() {};
	/**
	 * @returns DzFloatProperty The property that controls the ray opacity.
	 * @since 4.9.3.145
	 */
	getRayOpacityControl() {};
	/**
	 * @returns Boolean true if the base should be shown, otherwise false.
	 * @since 4.9.3.145
	 */
	getShowBase() {};
	/**
	 * @returns DzBoolProperty The property that controls whether or not to show the base control.
	 * @since 4.9.3.145
	 */
	getShowBaseControl() {};
	/**
	 * @returns Boolean true if the edge should be shown, otherwise false.
	 * @since 4.9.3.145
	 */
	getShowEdge() {};
	/**
	 * @returns DzBoolProperty The property that controls whether or not to show the edge control.
	 * @since 4.9.3.145
	 */
	getShowEdgeControl() {};
	/**
	 * @returns Number The spread angle of the light.
	 * @since 4.9.3.145
	 */
	getSpreadAngle() {};
	/**
	 * @returns DzFloatProperty The property that controls the outer spread angle of the light.
	 */
	getSpreadAngleControl() {};
	/**
	 * @description Sets the base opacity.
	 * @since 4.9.3.145
	 * @param {Number} opacity - The opacity to set.
	 */
	setBaseOpacity(opacity) {};
	/**
	 * @description Sets beam distribution.
	 * @since 4.9.3.145
	 * @param {Number} distribution - The beam distribution to set.
	 */
	setBeamDistribution(distribution) {};
	/**
	 * @description Sets the amount of decay.
	 * @since 4.9.3.145
	 * @param {Number} decay - The decay to set.
	 */
	setDecay(decay) {};
	/**
	 * @description Sets the persistance of the display cone.
	 * @since 4.9.3.145
	 * @param {Boolean} persistence - If true, the cone will be displayed when the node is not selected. If false, the cone will not be displayed when the node is not selected.
	 */
	setDisplayPersistence(persistence) {};
	/**
	 * @description Sets the edge opacity.
	 * @since 4.9.3.145
	 * @param {Number} opacity - The opacity to set.
	 */
	setEdgeOpacity(opacity) {};
	/**
	 * @description Sets the exponent (rate of decay from center to edge) of the light.
	 * @since 4.9.3.145
	 * @param {Number} exponent - The exponent to set.
	 */
	setLightExponent(exponent) {};
	/**
	 * @description Sets the opacity scale.
	 * @since 4.9.3.145
	 * @param {Number} scale - The scale to set.
	 */
	setOpacityScale(scale) {};
	/**
	 * @description Sets the ray length.
	 * @since 4.9.3.145
	 * @param {Number} length - The length to set.
	 */
	setRayLength(length) {};
	/**
	 * @description Sets the ray opacity.
	 * @since 4.9.3.145
	 * @param {Number} opacity - The opacity to set.
	 */
	setRayOpacity(opacity) {};
	/**
	 * @description Sets whether or not to show the base.
	 * @since 4.9.3.145
	 * @param {Boolean} yesNo - If true, the base will be shown.
	 */
	setShowBase(yesNo) {};
	/**
	 * @description Sets whether or not to show the edge.
	 * @since 4.9.3.145
	 * @param {Boolean} yesNo - If true, the edge will be shown.
	 */
	setShowEdge(yesNo) {};
	/**
	 * @description Sets the spread angle.
	 * @since 4.9.3.145
	 * @param {Number} spreadAngle - The angle to set.
	 */
	setSpreadAngle(spreadAngle) {};

}
/**
 * TODO:
 * Add detailed description.
 */
class DzStringHelper extends QObject {
	/**
	 * @description Default Constructor
	 */
	constructor() {};
	/**
	 * @returns String A copy of the input string, with each occurence of a special character replaced by chars
	 * @param {String} text - The string to inspect for special characters; using the regular expression "[/\\\\:*?\"<>|!. ]"
	 * @param {String} chars - The character(s) to replace each occurence of a special character with
	 */
	changeSpecialChars(text, chars) {};
	/**
	 * @returns Array An array of strings, where each element is a match
	 * @param {String} text - The string to check for matches
	 * @param {String} expression - The regular expression to use
	 */
	getMatches(text, expression) {};
	/**
	 * @returns Array An array of strings, where each element is a word from the input string
	 * @param {String} text - The string to split at each space
	 * @param {Boolean} removeEmpties - Whether or not to remove empty entries that result from multiple adjacent spaces
	 */
	getWords(text, removeEmpties) {};
	/**
	 * @returns String A copy of the input string indented the specified number of times
	 * @param {String} text - The string to indent
	 * @param {Number} level - The number of tabs (\t) to prepend to the input string
	 */
	indentString(text, level) {};
	/**
	 * @returns String A copy of the input string, with chars prepended if it began with a numeric character
	 * @param {String} text - The string to inspect for numeric characters; using the regular expression "^[0-9]"
	 * @param {String} chars - The character(s) to prepend to the input string if it begines with a numeric character
	 */
	prependCharsIfNumeric(text, chars) {};
	/**
	 * @returns String A copy of the input string with all occurrences of findText replaced by replaceText
	 * @param {String} source - The string to replace the specified character(s) in
	 * @param {String} findText - The character(s) to replace
	 * @param {String} replaceText - The character(s) to replace with
	 */
	replaceAll(source, findText, replaceText) {};
	/**
	 * @returns String A copy of the input string with all carriage return and linefeed characters removed
	 * @param {String} text - The string to strip all carriage return (\r) and linefeed (\n) characters from
	 */
	stripCRLF(text) {};
	/**
	 * @returns String A copy of the input string with all spaces removed
	 * @param {String} text - The string to strip spaces from
	 */
	stripSpaces(text) {};

}
/**
 * TODO:
 * Add detailed description.
 */
class DzStringProperty extends DzProperty {
	/**
	 * @description Default Constructor. Creates a non-user property.
	 */
	constructor() {};
	/**
	 * @param {String} name - The name of this property.
	 * @param {Boolean} isUserProperty - If true, creates a user property; user properties are properties that can be added/deleted by users.
	 */
	constructor(name, isUserProperty) {};
	/**
	 * @returns String The string value of this property.
	 */
	getValue() {};
	/**
	 * @description Sets the string value.
	 * @returns Boolean
	 * @param {String} str - The string value to set.
	 */
	setValue(val) {};

}
/**
 * Interface Colors
 * Interface Numbers
 * Text Styles
 * Pixel Metrics
 * Style Hints
 * Standard Pixmaps
 * Primitive Elements
 * Action IconsReset the current style colors to their default values.
 * 
 * ### Example:
 * ```
 * var oStyle = App.getStyle();
 * for( var i = 0, n = oStyle.getNumInterfaceColors(); i < n; i += 1 ){
 * oStyle.setInterfaceColor( i, oStyle.getInterfaceColorDefault( i ) );
 * }
 * ```
 */
class DzStyle extends QObject {
	/**
	 * @description ENUM: The mode when the user is not interacting with the pixmap, but the item represented by the pixmap is available.
	 */
	Normal;
	/**
	 * @description ENUM: The mode when the item represented by the pixmap is not available.
	 */
	Disabled;
	/**
	 * @description ENUM: The mode when the item represented by the pixmap is available and the user is interacting with it.
	 */
	Active;
	/**
	 * @description ENUM: The mode when the item represented by the pixmap is selected.
	 */
	Selected;
	/**
	 * @description ENUM: The pixmap when the widget is in the On state.
	 */
	On;
	/**
	 * @description ENUM: The pixmap when the widget is in the Off state.
	 */
	Off;
	/**
	 * @description Compiles a text-based style definition and its images into a single binary style definition file.
	 * @returns DzError true on success, otherwise false.
	 * @param {String} infile - The name of the XML-based text style description.
	 * @param {String} outfile - The name of the DAZ Studio style definition file to create.
	 */
	static compileStyleDefinition(infile, outfile) {};
	/**
	 * @returns Number The index of the pixel metric with the given name (if any), otherwise -1.
	 * @param {String} name - The name of the pixel metric to find the index of.
	 */
	static findPixelMetric(name) {};
	/**
	 * @returns Number The index of the primitive element with the given name (if any), otherwise -1.
	 * @param {String} name - The name of the primitive element to find the index of.
	 */
	static findPrimitiveElement(name) {};
	/**
	 * @returns Number The index of the standard pixmap with the given name (if any), otherwise -1.
	 * @param {String} name - The name of the standard pixmap to find the index of.
	 */
	static findStandardPixmap(name) {};
	/**
	 * @returns Number The index of the style hint with the given name (if any), otherwise -1.
	 * @param {String} name - The name of the style hint to find the index of.
	 */
	static findStyleHint(name) {};
	/**
	 * @returns Number The index of the text style with the given name (if any), otherwise -1.
	 * @param {String} name - The name of the text style to find the index of.
	 */
	static findTextStyle(name) {};
	/**
	 * @returns Number The number of pixel metrics.
	 */
	static getNumPixelMetrics() {};
	/**
	 * @returns Number The number of primitive elements.
	 */
	static getNumPrimitiveElements() {};
	/**
	 * @returns Number The number of standard pixmaps.
	 */
	static getNumStandardPixmaps() {};
	/**
	 * @returns Number The number of style hints.
	 */
	static getNumStyleHints() {};
	/**
	 * @returns Number The number of text styles.
	 */
	static getNumTextStyles() {};
	/**
	 * @returns String The name of the pixel metric at the given index (if any), otherwise an empty string.
	 * @param {Number} which - The index of the pixel metric to get the name of.
	 */
	static getPixelMetricName(which) {};
	/**
	 * @returns String The name of the primitive element at the given index (if any), otherwise an empty string.
	 * @param {Number} which - The index of the primitive element to get the name of.
	 */
	static getPrimitiveElementName(which) {};
	/**
	 * @returns String The name of the standard pixmap at the given index (if any), otherwise an empty string.
	 * @param {Number} which - The index of the standard pixmap to get the name of.
	 */
	static getStandardPixmapName(which) {};
	/**
	 * @returns String The name of the style hint at the given index (if any), otherwise an empty string.
	 * @param {Number} which - The index of the style hint to get the name of.
	 */
	static getStyleHintName(which) {};
	/**
	 * @returns String The name of the text style at the given index (if any), otherwise an empty string.
	 * @param {Number} which - The index of the text style to get the name of.
	 */
	static getTextStyleName(which) {};
	/**
	 * @returns Pixmap A pixmap from the DzAction with the class name.
	 */
	actionPixmap(className, mode, state) {};
	/**
	 * @returns Number The index of the given interface color, or -1 if the color cannot be found.
	 */
	findInterfaceColor(name) {};
	/**
	 * @returns Number The index of the given interface number, or -1 if the number cannot be found.
	 * @since 4.9.0.43
	 */
	findInterfaceNumber(name) {};
	/**
	 * @returns Color The current value of the given interface color.
	 */
	getInterfaceColor(name) {};
	/**
	 * @returns Color The current value of the given interface color.
	 */
	getInterfaceColor(which) {};
	/**
	 * @returns Color The default value of the given interface color.
	 */
	getInterfaceColorDefault(which) {};
	/**
	 * @returns String A user-readable description for the given interface color.
	 */
	getInterfaceColorDescription(which) {};
	/**
	 * @since 4.9.0.43
	 */
	getInterfaceColorDisplaySettings(which, settings) {};
	/**
	 * @returns String The name for the given interface color.
	 */
	getInterfaceColorName(which) {};
	/**
	 * @returns Number The current value of the given interface number.
	 * @since 4.9.0.43
	 */
	getInterfaceNumber(name, defaultValue = 0.0) {};
	/**
	 * @returns Number The current value of the given interface number.
	 * @since 4.9.0.43
	 */
	getInterfaceNumber(which) {};
	/**
	 * @returns Number The default value of the given interface number.
	 * @since 4.9.0.43
	 */
	getInterfaceNumberDefault(which) {};
	/**
	 * @returns String A user-readable description for the given interface number.
	 * @since 4.9.0.43
	 */
	getInterfaceNumberDescription(which) {};
	/**
	 * @since 4.9.0.43
	 */
	getInterfaceNumberDisplaySettings(which, settings) {};
	/**
	 * @returns String The name for the given interface number.
	 * @since 4.9.0.43
	 */
	getInterfaceNumberName(which) {};
	/**
	 * @returns Number The number of user-customizable interface colors for the current style
	 */
	getNumInterfaceColors() {};
	/**
	 * @returns Number The number of user-customizable interface numbers for the current style.
	 * @since 4.9.0.43
	 */
	getNumInterfaceNumbers() {};
	/**
	 * @returns String The name of the currently active style definition.
	 */
	getStyleDefinition() {};
	/**
	 * @returns Number The value of the pixel metric with the given name.
	 * @param {String} metricName - The name of the pixel metric to get; the name must match one of the pixel metric names from the style definition.
	 */
	pixelMetric(metricName) {};
	/**
	 * @description Sets the given interface color to the new value. The interface will not automatically update - the current style must be reloaded before the changes will take affect.
	 */
	setInterfaceColor(which, color) {};
	/**
	 * @description Sets the given interface number to the new value. The interface will not automatically update - the current style must be reloaded before the changes will take affect.
	 * @since 4.9.0.43
	 */
	setInterfaceNumber(which, value) {};
	/**
	 * @returns Boolean true if the button icon was set, otherwise false.
	 * @param {QAbstractButton} button - The button to set the icon on.
	 * @param {String} pixmapName - The name of the pixmap to convert into an icon; the name must match one of the standard pixmap names from the style definition.
	 */
	setStyledIcon(button, pixmapName) {};
	/**
	 * @returns Pixmap A pixmap with the given name (if any), otherwise NULL.
	 * @param {String} pixmapName - The name of the pixmap to get; the name must match one of the standard pixmap names from the style definition.
	 */
	standardPixmap(pixmapName) {};
	/**
	 * @returns Font The font of the text style with the given name.
	 * @param {String} styleName - The name of the text style to get the font of; the name must match one of the text style names from the style definition.
	 */
	textStyle(styleName) {};
	/**
	 * @returns Color The color of the text style with the given name.
	 * @param {String} styleName - The name of the text style to get the color of; the name must match one of the text style names from the style definition.
	 */
	textStyleColor(styleName) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description TODO: Add Description
	 * @signature `interfaceColorsChanged()`
	 * @event
	 */
	interfaceColorsChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description TODO: Add Description
	 * @signature `interfaceNumbersChanged()`
	 * @event
	 */
	interfaceNumbersChanged() {};

}
/**
 * Deprecated
 * Exists only to keep code written prior to 4.6.2.23 working. Do not use in new code. Use DzTextureLayer.BlendSubtract instead.
 */
class DzSubtractBlend {
	/**
	 * @description Default Constructor
	 */
	constructor() {};

}
/**
 * This object provides functions to access and manipulate environment variables. It is accessible via the Global.System variable.
 */
class DzSystem extends QObject {
	/**
	 * @returns String The String stored in environmentVariable.
	 * @param {String} environmentVariable - The name of the environment variable to retrieve. The 'environment' only exists within the context of the script process, for the duration of said process.
	 */
	getenv(environmentVariable) {};
	/**
	 * @description Deprecated
	 */
	print(expression) {};
	/**
	 * @description Deprecated
	 */
	println(expression) {};
	/**
	 * @description Sets the value of an environment variable. If the environment variable does not exist, it is created. The environment is only changed within the context of the script process, for the duration of said process.
	 * @param {String} environmentVariable - The environment variable to set the value of.
	 * @param {String} value - The new value of the environment variable.
	 */
	setenv(environmentVariable, value) {};

}
/**
 * A DzTabWidget provides a stack of tabbed widgets.
 */
class DzTabWidget extends DzWidget {
	/**
	 * @description Creates a tab widget as a child of the given parent widget.
	 * @param {DzWidget} parent - The widget parent for the tab widget.
	 */
	constructor(parent) {};
	/**
	 * @description The number of tabs in the tab stack. (Read-Only)
	 * @type {Number}
	 */
	count;
	/**
	 * @description The index position of the current tab page.
	 * @type {Number}
	 */
	currentIndex;
	/**
	 * @description Whether or not the widget is rendered in a mode suitable for document pages, without a frame.
	 * @type {Boolean}
	 */
	documentMode;
	/**
	 * @description Whether or not the tabs can be reordered.
	 * @type {Boolean}
	 */
	movable;
	/**
	 * @description Holds which side of the widget the tab row is drawn on.
	 * @type {TabPosition}
	 */
	tabPosition;
	/**
	 * @description Whether or not close buttons are automatically added to each tab.
	 * @type {Boolean}
	 */
	tabsClosable;
	/**
	 * @description Whether or not a tab bar should use buttons to scroll tabs when it has many tabs.
	 * @type {Boolean}
	 */
	usesScrollButtons;
	/**
	 * @description ENUM: The top of the widget.
	 */
	North;
	/**
	 * @description ENUM: The bottom of the widget.
	 */
	South;
	/**
	 * @description ENUM: The left of the widget.
	 */
	West;
	/**
	 * @description ENUM: The right of the widget.
	 */
	East;
	/**
	 * @description Adds page as a new tab with the given label.
	 * @returns Number The index of the added tab
	 */
	addTab(page, label) {};
	/**
	 * @description Removes all the pages, but does not delete them.
	 */
	clear() {};
	/**
	 * @returns DzWidget The widget shown in the corner of the tab widget or null.
	 */
	cornerWidget() {};
	/**
	 * @returns DzWidget The widget for the page currently being displayed.
	 */
	currentWidget() {};
	/**
	 * @returns Number The index position of the page occupied by widget, or -1 if widget cannot be found.
	 */
	indexOf(page) {};
	/**
	 * @description Inserts page as a new tab with the label label at position index.
	 * @returns Number The index of the inserted tab.
	 */
	insertTab(index, page, label) {};
	/**
	 * @returns true if the page at position index is enabled, otherwise false.
	 */
	isTabEnabled(index) {};
	/**
	 * @description Removes the page at index from the tab widget.
	 * @attention The widget itself is not deleted.
	 */
	removeTab(index) {};
	/**
	 * @description Sets widget to be shown in the corner of the tab widget.
	 */
	setCornerWidget(widget) {};
	/**
	 * @description Makes widget the current page.
	 */
	setCurrentWidget(page) {};
	/**
	 * @description Sets the enabled state of the page at position index.
	 */
	setTabEnabled(index, enable) {};
	/**
	 * @description Sets the label of the page at position index.
	 */
	setTabText(index, label) {};
	/**
	 * @description Sets the tool tip text for the page at position index.
	 */
	setTabToolTip(index, tip) {};
	/**
	 * @description Sets the what's this text for the page at position index.
	 */
	setTabWhatsThis(index, text) {};
	/**
	 * @returns String The label of the page at position index.
	 */
	tabText(index) {};
	/**
	 * @returns String The tool tip for the page at position index.
	 */
	tabToolTip(index) {};
	/**
	 * @returns String The whats this text for the page at position index.
	 */
	tabWhatsThis(index) {};
	/**
	 * @returns DzWidget The widget for the page at position index.
	 */
	widget(index) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted whenever the current page index changes.
	 * @signature `"currentChanged(int)"`
	 * @event
	 */
	currentChanged(index) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the close button on a tab is clicked.
	 * @signature `"tabCloseRequested(int)"`
	 * @event
	 */
	tabCloseRequested(index) {};

}
/**
 * Extends DzTextEdit (in read-only mode), adding functionality that allows users to navigate hyper-linked documents.
 */
class DzTextBrowser extends DzTextEdit {
	/**
	 * @description Creates a text browser widget as a child of the given parent widget.
	 * @param {DzWidget} parent - The widget parent for the text browser.
	 */
	constructor(parent) {};
	/**
	 * @description Holds the number of locations backward in the history. (Read Only)
	 * @type {Number}
	 */
	backwardCount;
	/**
	 * @description Holds the number of locations forward in the history. (Read Only)
	 * @type {Number}
	 */
	forwardCount;
	/**
	 * @description Holds whether or not the browser can go backward in the document history. (Read Only)
	 * @type {Boolean}
	 */
	isBackwardAvailable;
	/**
	 * @description Holds whether or not the browser can go forward in the document history. (Read Only)
	 * @type {Boolean}
	 */
	isForwardAvailable;
	/**
	 * @description Holds whether or not the browser should open links to external sources using App.showUrl() instead of emitting the anchorClicked signal. Links are considered external if their scheme is not 'file://'. (since 4.9.3.93)
	 * @type {Boolean}
	 */
	openExternalLinks;
	/**
	 * @description Holds whether or not the browser should automatically open links the user tries to activate by mouse or keyboard.
	 * @type {Boolean}
	 */
	openLinks;
	/**
	 * @description Holds the search paths used by the browser to find supporting content.
	 * @type {Array}
	 */
	searchPaths;
	/**
	 * @description Holds the name of the displayed document. This will be empty if the URL is invalid, if no document is displayed, or if the source is unknown.
	 * @type {String}
	 */
	source;
	/**
	 * @description Changes the document displayed to the previous document in the list built by navigating links. Does nothing if there is no previous document.
	 */
	backward() {};
	/**
	 * @description Clears the history of visited documents and disables the forward and backward navigation.
	 * @since 4.9.3.93
	 */
	clearHistory() {};
	/**
	 * @description Changes the document displayed to the next document in the list built by navigating links. Does nothing if there is no next document.
	 */
	forward() {};
	/**
	 * @returns String The DzTextEdit.documentTitle of the history item.
	 * @since 4.9.3.93
	 * @param {Number} index - The zero-based index of the history item.    * index < 0 : backward() history
	 * 
	 *  index == 0 : current
	 * 
	 *  index > 0 : forward() history
	 */
	historyTitle(index) {};
	/**
	 * @returns String The URL of the history item.
	 * @since 4.9.3.93
	 * @param {Number} index - The zero-based index of the history item.    * index < 0 : backward() history
	 * 
	 *  index == 0 : current, see source
	 * 
	 *  index > 0 : forward() history
	 */
	historyUrl(index) {};
	/**
	 * @description Changes the current document displayed to be the first document displayed.
	 */
	home() {};
	/**
	 * @description Reloads the current document.
	 */
	reload() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the user clicks an anchor.
	 * @signature `"anchorClicked(const QString&,const QString&)"`
	 * @event
	 */
	anchorClicked(name, link) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the availability of backward() changes.
	 * @signature `"backwardAvailable(bool)"`
	 * @event
	 */
	backwardAvailable(available) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the availability of forward() changes.
	 * @signature `"forwardAvailable(bool)"`
	 * @event
	 */
	forwardAvailable(available) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the user selects a link but does not activate it.
	 * @signature `"highlighted(const QString&)"`
	 * @event
	 */
	highlighted(link) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the history changes.
	 * @signature `"historyChanged()"`
	 * @event
	 */
	historyChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the user clicks a link.
	 * @signature `"linkClicked(const QString&)"`
	 * @event
	 */
	linkClicked(link) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the mime source of the browser changes.
	 * @signature `"sourceChanged(const QString&)"`
	 * @event
	 */
	sourceChanged(src) {};

}
/**
 * A DzTextEdit provides a powerful single-page rich `text` editor widget.
 */
class DzTextEdit extends DzWidget {
	/**
	 * @description Creates a text edit widget as a child of the given parent widget.
	 * @param {DzWidget} parent - The widget parent for the text edit.
	 */
	constructor(parent) {};
	/**
	 * @description Holds whether or not the text edit accepts rich text insertions by the user.
	 * @type {Boolean}
	 */
	acceptRichText;
	/**
	 * @description Holds the enabled set of auto formatting features.
	 * @type {AutoFormattingFlag}
	 */
	autoFormatting;
	/**
	 * @description Holds the number of text blocks (e.g., paragraphs) in the document. (Read-Only)
	 * @type {Number}
	 */
	blockCount;
	/**
	 * @description Holds whether or not the font of the current format is bold.
	 * @type {Boolean}
	 */
	bold;
	/**
	 * @description Holds the number of characters in the text. (Read-Only)
	 * @type {Number}
	 */
	characterCount;
	/**
	 * @description Holds the width of the cursor in pixels.
	 * @type {Number}
	 */
	cursorWidth;
	/**
	 * @description Holds the title of the document.
	 * @type {String}
	 */
	documentTitle;
	/**
	 * @description Holds the font family of the current format.
	 * @type {String}
	 */
	family;
	/**
	 * @description Holds the font of the current format.
	 * @type {Font}
	 */
	font;
	/**
	 * @description Holds the editor's contents as HTML.
	 * @type {String}
	 */
	html;
	/**
	 * @description Holds whether or not the font of the current format is italic.
	 * @type {Boolean}
	 */
	italic;
	/**
	 * @description Holds the number of lines in the text. (Read-Only)
	 * @type {Number}
	 */
	lineCount;
	/**
	 * @description Holds the position (in pixels or columns depending on the lineWrapMode) where text will be wrapped.
	 * @type {Number}
	 */
	lineWrapColumnOrWidth;
	/**
	 * @description Holds the mode the editor will use when wrapping text within words.
	 * @type {LineWrapMode}
	 */
	lineWrapMode;
	/**
	 * @description Holds whether or not the text in the editor has been modified.
	 * @type {Boolean}
	 */
	modified;
	/**
	 * @description Holds whether or not text entered by the user will overwrite existing text.
	 * @type {Boolean}
	 */
	overwriteMode;
	/**
	 * @description Holds the editor's contents as plain text.
	 * @type {String}
	 */
	plainText;
	/**
	 * @description Holds the point size of the font of the current format.
	 * @type {Number}
	 */
	pointSize;
	/**
	 * @description Holds whether or not the text in the editor can be edited by the user.
	 * @type {Boolean}
	 */
	readOnly;
	/**
	 * @description Holds whether or not a redo operation is available. (Read Only)
	 * @type {Boolean}
	 */
	redoAvailable;
	/**
	 * @description Holds the selected text (if any) of the editor.
	 * @type {String}
	 */
	selectedText;
	/**
	 * @description Holds whether or not pressing the Tab key changes focus or is accepted as input.
	 * @type {Boolean}
	 */
	tabChangesFocus;
	/**
	 * @description Holds the tab stop width in pixels; default is 80.
	 * @type {Number}
	 */
	tabStopWidth;
	/**
	 * @description Holds the text of the editor.
	 * @type {String}
	 */
	text;
	/**
	 * @description Holds the text background color of the current format.
	 * @type {Color}
	 */
	textBackgroundColor;
	/**
	 * @description Holds the text color of the current format.
	 * @type {Color}
	 */
	textColor;
	/**
	 * @description Holds the value that is used to determine how the label reacts to user input.
	 * @type {DzWidget}
	 */
	textInteractionFlags;
	/**
	 * @description Holds whether or not the font of the current format is underlined.
	 * @type {Boolean}
	 */
	underline;
	/**
	 * @description Holds whether or not an undo operation is available. (Read Only)
	 * @type {Boolean}
	 */
	undoAvailable;
	/**
	 * @description Holds whether or not undo and redo are enabled.
	 * @type {Boolean}
	 */
	undoRedoEnabled;
	/**
	 * @description Holds the font weight of the current format. 25 = Light, 50 = Normal, 63 = DemiBold, 75 = Bold, 87 = Black.
	 * @type {Number}
	 */
	weight;
	/**
	 * @description Holds the mode the editor will use when wrapping text by words.
	 * @type {WrapMode}
	 */
	wordWrapMode;
	/**
	 * @description ENUM: Do not perform any automatic formatting.
	 */
	AutoNone;
	/**
	 * @description ENUM: Only automatically format bullet lists.
	 */
	AutoBulletList;
	/**
	 * @description ENUM: Apply all available auto-formatting.
	 */
	AutoAll;
	/**
	 * @description ENUM: Do not wrap the text.
	 */
	NoLineWrap;
	/**
	 * @description ENUM: Wrap the text at the current width of the widget.
	 */
	WidgetWidth;
	/**
	 * @description ENUM: Wrap the text at a fixed number of pixels from the widget's left side.
	 */
	FixedPixelWidth;
	/**
	 * @description ENUM: Wrap the text at a fixed number of character columns from the widget's left side.
	 */
	FixedColumnWidth;
	/**
	 * @description ENUM: Do not wrap the text at all.
	 */
	NoWrap;
	/**
	 * @description ENUM: Wrap the text at word boundaries.
	 */
	WordWrap;
	/**
	 * @description ENUM: Same as NoWrap.
	 */
	ManualWrap;
	/**
	 * @description ENUM: Wrap the text at any point on a line, even if it occurs in the middle of a word.
	 */
	WrapAnywhere;
	/**
	 * @description ENUM: If possible, WordWrap, otherwise WrapAnywhere.
	 */
	WrapAtWordBoundaryOrAnywhere;
	/**
	 * @returns String The name of the anchor at position pos, or an empty string if no anchor exists at that point.
	 * @since 4.9.3.93
	 * @param {Point} pos - The position to get the anchor at.
	 */
	anchorAt(pos) {};
	/**
	 * @description Adds text as a new paragraph to the end of the editor.
	 * @since 4.9.3.93
	 * @param {String} text - The text to add.
	 */
	append(text) {};
	/**
	 * @description If text is currently selected, it will be deleted and the cursor moved to the beginning of the selection. If no text is selected, the cursor will be moved one character to the left and the character will be deleted.
	 * @since 4.9.3.93
	 */
	backspace() {};
	/**
	 * @description If a word is currently selected, it will be deleted and the cursor moved to the beginning of the selection. If no word is selected, the cursor will be moved one word to the left and the word will be deleted.
	 * @since 4.9.3.93
	 */
	backspaceWord() {};
	/**
	 * @description Removes all text from the editor.
	 * @since 4.9.3.93
	 */
	clear() {};
	/**
	 * @description Copies the selected text into the clipboard.
	 * @since 4.9.3.93
	 */
	copy() {};
	/**
	 * @description Moves the cursor backward the given number of characters.
	 * @since 4.9.3.93
	 * @param {Boolean} mark - If true, each character that is stepped over will be added to the current selection.
	 * @param {Number} steps - The number of characters to move the cursor.
	 */
	cursorBackward(mark = false, steps = 1) {};
	/**
	 * @description Moves the cursor forward the given number of characters.
	 * @since 4.9.3.93
	 * @param {Boolean} mark - If true, each character that is stepped over will be added to the current selection.
	 * @param {Number} steps - The number of characters to move the cursor.
	 */
	cursorForward(mark = false, steps = 1) {};
	/**
	 * @description Moves the cursor backward one word.
	 * @since 4.9.3.93
	 * @param {Boolean} mark - If true, the word will be added to the current selection.
	 * @param {Number} steps - The number of words to move the cursor.
	 */
	cursorWordBackward(mark = false, steps = 1) {};
	/**
	 * @description Moves the cursor forward one word.
	 * @since 4.9.3.93
	 * @param {Boolean} mark - If true, the word will be added to the current selection.
	 * @param {Number} steps - The number of words to move the cursor.
	 */
	cursorWordForward(mark = false, steps = 1) {};
	/**
	 * @description Copies the selected text into the clipboard, and removes it from the editor.
	 * @since 4.9.3.93
	 */
	cut() {};
	/**
	 * @description If text is currently selected, it will be deleted and the cursor moved to the beginning of the selection. If no text is selected, the character to the right of the cursor will be deleted.
	 * @since 4.9.3.93
	 */
	del() {};
	/**
	 * @description If a word is currently selected, it will be deleted and the cursor moved to the beginning of the selection. If no word is selected, the word to the right of the cursor will be deleted.
	 * @since 4.9.3.93
	 */
	deleteWord() {};
	/**
	 * @description Moves the cursor to the line below the current line.
	 * @since 4.9.3.93
	 * @param {Boolean} mark - If true, the text from the position of the cursor in the line below the current line to the cursor's previous position will be added to the current selection.
	 * @param {Number} steps - The number of lines to move the cursor.
	 */
	down(mark = false, steps = 1) {};
	/**
	 * @description Moves the cursor to the end of the document.
	 * @since 4.9.3.93
	 * @param {Boolean} mark - If true, the text from the cursor's previous position to the end of the document will be added to the current selection.
	 */
	end(mark = false) {};
	/**
	 * @description Ensures that the cursor is visible by scrolling the editor if necessary.
	 * @since 4.9.3.93
	 */
	ensureCursorVisible() {};
	/**
	 * @description Finds the next occurrence of expression using the given options and changes the cursor to select the match.
	 * @returns Boolean true if expression was found, otherwise false.
	 * @since 4.9.3.93
	 * @param {String} expression - The expression to find.
	 * @param {Boolean} caseSensitive - If true, the search is case sensitive.
	 * @param {Boolean} wholeWord - If true, the search looks for whole words.
	 * @param {Boolean} backward - If true, the search is performed in the reverse direction.
	 */
	find(expression, caseSensitive = false, wholeWord = false, backward = false) {};
	/**
	 * @returns Boolean true if text is selected, otherwise false.
	 */
	hasSelectedText() {};
	/**
	 * @description Moves the cursor to the beginning of the document.
	 * @since 4.9.3.93
	 * @param {Boolean} mark - If true, the text from the beginning of the document to the cursor's previous position will be added to the current selection.
	 */
	home(mark = false) {};
	/**
	 * @description Splits the block (paragraph) at the cursor position.
	 * @since 4.9.3.93
	 */
	insertBlock() {};
	/**
	 * @description Inserts text, which is assumed to be HTML formatted, at the current cursor position.
	 * @since 4.9.3.93
	 * @param {String} text - The HTML formatted text to insert.
	 */
	insertHtml(text) {};
	/**
	 * @description Inserts text at the current cursor position.
	 * @since 4.9.3.93
	 * @param {String} text - The text to insert.
	 */
	insertPlainText(text) {};
	/**
	 * @description Moves the cursor to the end of the line.
	 * @since 4.9.3.93
	 * @param {Boolean} mark - If true, the text from the cursor's previous position to the end of the line will be added to the current selection.
	 */
	lineEnd(mark = false) {};
	/**
	 * @description Moves the cursor to the beginning of the line.
	 * @since 4.9.3.93
	 * @param {Boolean} mark - If true, the text from the beginning of the line to the cursor's previous position will be added to the current selection.
	 */
	lineStart(mark = false) {};
	/**
	 * @description Moves the cursor a page down in the document.
	 * @since 4.9.3.93
	 * @param {Boolean} mark - If true, the text from the cursor's previous position to a page down in the document will be added to the current selection.
	 */
	pageDown(mark = false) {};
	/**
	 * @description Moves the cursor a page up in the document.
	 * @since 4.9.3.93
	 * @param {Boolean} mark - If true, the text from a page up in the document to the cursor's previous position will be added to the current selection.
	 */
	pageUp(mark = false) {};
	/**
	 * @description Inserts any text on the clipboard into the line at the cursor's current position.
	 * @since 4.9.3.93
	 */
	paste() {};
	/**
	 * @description If redoAvailable is true, redoes the next operation in the editor.
	 * @since 4.9.3.93
	 */
	redo() {};
	/**
	 * @description Scrolls the editor to make the text at the anchor name visible, if it can be found in the document. If the anchor isn't found no scrolling will occur. An anchor is defined using the HTML anchor tag, e.g., <a name="target">.
	 * @since 4.9.3.93
	 * @param {String} name - The name of the anchor to scroll to.
	 */
	scrollToAnchor(name) {};
	/**
	 * @description Selects all the text in the editor.
	 * @since 4.9.3.93
	 */
	selectAll() {};
	/**
	 * @returns String The selected text (if any), or an empty string.
	 */
	selectedText() {};
	/**
	 * @returns Number The character position at which the current selection ends.
	 */
	selectionEnd() {};
	/**
	 * @returns Number The character position at which the current selection begins.
	 */
	selectionStart() {};
	/**
	 * @returns String If blockIdx is in range, the text of the block at blockIdx, otherwise an empty string.
	 * @param {Number} blockIdx - The index of the block to get the text of.
	 */
	text(blockIdx) {};
	/**
	 * @description If undoAvailable is true, undoes the last operation in the editor.
	 * @since 4.9.3.93
	 */
	undo() {};
	/**
	 * @description Moves the cursor to the line above the current line.
	 * @since 4.9.3.93
	 * @param {Boolean} mark - If true, the text from the position of the cursor in the line above the current line to the cursor's previous position will be added to the current selection.
	 * @param {Number} steps - The number of lines to move the cursor.
	 */
	up(mark = false, steps = 1) {};
	/**
	 * @description Zooms in on the text by making the base font size range points larger and recalculating all font sizes to be the new size.
	 * @since 4.9.3.93
	 * @param {Number} range - The number of points to increase the fonts sizes by.
	 */
	zoomIn(range = 1) {};
	/**
	 * @description Zooms out on the text by making the base font size range points smaller and recalculating all font sizes to be the new size.
	 * @since 4.9.3.93
	 * @param {Number} range - The number of points to decrease the fonts sizes by.
	 */
	zoomOut(range = 1) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when text is selected or de-selected in the editor.
	 * @signature `"copyAvailable(bool)"`
	 * @event
	 */
	copyAvailable(yesNo) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the position of the cursor has changed.
	 * @signature `"cursorPositionChanged()"`
	 * @event
	 */
	cursorPositionChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the availability of redo changes. If yesNo is true, redo() will work until redoAvailable(false) is next emitted.
	 * @signature `"redoAvailable(bool)"`
	 * @event
	 */
	redoAvailable(yesNo) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the selection changes.
	 * @signature `"selectionChanged()"`
	 * @event
	 */
	selectionChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the text in the editor changes.
	 * @signature `"textChanged()"`
	 * @event
	 */
	textChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the availability of undo changes. If yesNo is true, undo() will work until undoAvailable(false) is next emitted.
	 * @signature `"undoAvailable(bool)"`
	 * @event
	 */
	undoAvailable(yesNo) {};

}
/**
 * This is a sharable object that stores information for a texture (image map) that is used in OpenGL. Do not create a texture, rather, request one from DzImageMgr - this insures that there is only one instance of a given image in memory at a time, and also ensures that necessary conversions for rendering the image via OpenGL and offline renderers occurs correctly.
 */
class DzTexture extends DzRefCountedItem, QObject {
	/**
	 * @description ENUM: TODO: Add description.
	 */
	Standard;
	/**
	 * @description ENUM: TODO: Add description.
	 */
	LatLong;
	/**
	 * @description ENUM: TODO: Add description.
	 */
	LightProbe;
	/**
	 * @description ENUM: TODO: Add description.
	 */
	CustomTexture;
	/**
	 * @returns String The source file name for this image.
	 */
	getFilename() {};
	/**
	 * @returns Number The gamma of the source file for this image.
	 * @attention This is used for gamma correction; gamma ⇐ 0 - do best guess of the image gamma; gamma == 1 - no gamma correction needed; gamma > 0 != 1 - the image is at the specified gamma.
	 */
	getGamma() {};
	/**
	 * @returns Size The actual size of the OpenGL texture alpha image.
	 */
	getGLAlphaTextureSize() {};
	/**
	 * @returns Size The actual size of the OpenGL texture image.
	 */
	getGLTextureSize() {};
	/**
	 * @returns Size The size of the original image that was the source of this texture.
	 */
	getOriginalImageSize() {};
	/**
	 * @returns Pixmap A preview pixmap of this texture with the specified size.
	 * @param {Size} size - The size for the pixmap.
	 */
	getPreviewPixmap(size) {};
	/**
	 * @returns Pixmap A preview pixmap of this texture with the specified dimensions.
	 * @param {Number} width - The width for the pixmap.
	 * @param {Number} height - The height for the pixmap.
	 */
	getPreviewPixmap(width, height) {};
	/**
	 * @returns Number The revision of this texture.
	 * @since 4.12.0.75
	 */
	getRevision() {};
	/**
	 * @returns String The temporary file name for this image.
	 */
	getTempFilename() {};
	/**
	 * @returns Number The texture type of this texture.
	 */
	getTextureType() {};
	/**
	 * @since 4.12.0.75
	 * @param emitDataChanged - wether or not to emit drawnDataChanged signal
	 */
	incrementRevision(boolean) {};
	/**
	 * @description Loads the image data from the specified image into this texture.
	 * @returns Boolean true if the image data was loaded, false if there was an error or the image could not be loaded.
	 * @since 4.6.2.23
	 * @param {Image} image - The image to load the data from.
	 */
	loadImageData(image) {};
	/**
	 * @description Reloads the image if its source file has changed.
	 */
	refresh() {};
	/**
	 * @param {Number} gamma - The gamma to set; gamma ⇐ 0 - do best guess of the image gamma; gamma == 1 - no gamma correction needed; gamma > 0 != 1 - the image is at the specified gamma.
	 */
	setGamma(gamma) {};
	/**
	 * @description Sets the texture type for this texture.
	 * @param {Number} val - The texture type to set.
	 */
	setTextureType(val) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the data of the texture has changed - e.g. after a call to refresh()
	 * @signature `"drawnDataChanged()"`
	 * @event
	 */
	drawnDataChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the temporary filename for the image has changed.
	 * @signature `"tempFilenameChanged(const QString&)"`
	 * @event
	 */
	tempFilenameChanged(filename) {};

}
/**
 * See Also:
 */
class DzTextureComponent extends QObject {
	/**
	 * @description Holds the color of the component.
	 * @type {Color}
	 */
	color;
	/**
	 * @description Holds whether or not the component is enabled.
	 * @type {Boolean}
	 */
	enabled;
	/**
	 * @description Holds whether or not the component is flipped horizontally.
	 * @type {Boolean}
	 */
	flippedHorizontal;
	/**
	 * @description Holds whether or not the component is flipped vertically.
	 * @type {Boolean}
	 */
	flippedVertical;
	/**
	 * @description Holds the path of the image file for the component.
	 * @type {String}
	 */
	imageFile;
	/**
	 * @description Holds whether or not the color channels of the component are inverted.
	 * @type {Boolean}
	 */
	invert;
	/**
	 * @description Holds the label of the component.
	 * @type {String}
	 */
	label;
	/**
	 * @description Holds the offset of the component.
	 * @type {Point}
	 */
	offset;
	/**
	 * @description Holds the opacity of the component. This should be in the range 0.0 - 1.0.
	 * @type {Number}
	 */
	opacity;
	/**
	 * @description Holds the rotation of the component.
	 * @type {Rotation}
	 */
	rotation;
	/**
	 * @description Holds the horizontal offset of the component.
	 * @type {Number}
	 */
	xOffset;
	/**
	 * @description Holds the scale of the component across its width.
	 * @type {Number}
	 */
	xScale;
	/**
	 * @description Holds the vertical offset of the component.
	 * @type {Number}
	 */
	yOffset;
	/**
	 * @description Holds the scale of the component across its height.
	 * @type {Number}
	 */
	yScale;
	/**
	 * @description ENUM: No rotation is performed.
	 */
	RotNone;
	/**
	 * @description ENUM: A 90 degree (clockwise) rotation is performed.
	 */
	Rot90;
	/**
	 * @description ENUM: A 180 degree rotation is performed.
	 */
	Rot180;
	/**
	 * @description ENUM: A 270 degree (clockwise) rotation is performed.
	 */
	Rot270;
	/**
	 * @description Copies another texture component into this one.
	 * @returns DzTextureComponent
	 * @param {DzTextureComponent} comp - The texture component to copy from.
	 */
	copyFrom(comp) {};
	/**
	 * @description Flips the image horizontally and/or vertically.
	 * @param {Boolean} horizontal - If true, the image is flipped horizontally.
	 * @param {Boolean} vertical - If true, the image is flipped vertically.
	 */
	flip(horizontal, vertical) {};
	/**
	 * @description Loads image data from the specified image.
	 * @returns Boolean true if image data is loaded, otherwise false.
	 * @param {Image} image - The image to load data from.
	 */
	loadImageData(image) {};
	/**
	 * @returns Boolean true if this texture component has been modified on disk since it was last loaded/updated, otherwise false.
	 */
	needsImageRefresh() {};
	/**
	 * @description Sets the scale of the component.
	 * @since 4.11.0.225
	 * @param {Number} xScale - The scale of the component across its width. 1.0 is equivalent to 100%.
	 * @param {Number} yScale - The scale of the component across its height. 1.0 is equivalent to 100%.
	 */
	setScale(xScale, yScale) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the color of the texture component has changed.
	 * @signature `"colorChanged(const QColor&)"`
	 * @event
	 */
	colorChanged(color) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the data of the texture component has changed.
	 * @signature `"dataChanged()"`
	 * @event
	 */
	dataChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the enabled state of the texture component has changed.
	 * @signature `"enabledChanged(bool)"`
	 * @event
	 */
	enabledChanged(onOff) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the state of whether or not the texture component has been flipped horizontally has changed.
	 * @signature `"flippedHorizontalChanged(bool)"`
	 * @event
	 */
	flippedHorizontalChanged(onOff) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the state of whether or not the texture component has been flipped vertically has changed.
	 * @signature `"flippedVerticalChanged(bool)"`
	 * @event
	 */
	flippedVerticalChanged(onOff) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the filename of the image for the texture component has changed.
	 * @signature `"imageChanged(const QString&)"`
	 * @event
	 */
	imageChanged(filename) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the state of whether or not the texture component has been inverted has changed.
	 * @signature `"invertedChanged(bool)"`
	 * @event
	 */
	invertedChanged(onOff) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the label of the texture component has changed.
	 * @signature `"labelChanged(const QString&)"`
	 * @event
	 */
	labelChanged(label) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the offset position of the texture component has changed.
	 * @signature `"offsetChanged(const QPoint&)"`
	 * @event
	 */
	offsetChanged(offset) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the opacity of the texture component has changed.
	 * @signature `"opacityChanged(float)"`
	 * @event
	 */
	opacityChanged(opacity) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the rotation of the texture component has changed.
	 * @signature `"rotationChanged(DzTextureComponent.Rotation)"`
	 * @event
	 */
	rotationChanged(rotation) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the scale of the texture component has changed.
	 * @signature `"scaleChanged(float,float)"`
	 * @event
	 */
	scaleChanged(x, y) {};

}
/**
 * Layers are used in image editing to manipulate the final values of pixels in an image, in a non-destructive way. Layers exist in a stack. Layers that are higher in the stack impact layers that are lower in the stack. Transparent and/or translucent pixels in one layer allow the pixels in the next lower layer to be revealed.
 * Layers can also be used to blend the values of pixels together in various ways.
 * See Also:
 */
class DzTextureLayer extends DzTextureComponent {
	/**
	 * @description Holds the blend mode of the texture layer.
	 * @type {BlendMode}
	 */
	blendMode;
	/**
	 * @description ENUM: A blending operation that uses the alpha channel of the layer to blend it into the values of the lower layers.
	 */
	BlendAlpha;
	/**
	 * @description ENUM: An additive image blending operation; the values of the layer are added to the values of the lower layers.
	 */
	BlendAdd;
	/**
	 * @description ENUM: A subtractive image blending operation; the values of the layer are subtracted from the values of the lower layers.
	 */
	BlendSubtract;
	/**
	 * @description ENUM: A multiplicative image blending operation; the values of the layer are multiplied with the values of the lower layers.
	 */
	BlendMultiply;
	/**
	 * @description Removes any mask that may be on this layer.
	 */
	clearMask() {};
	/**
	 * @description Creates a mask for this texture layer.
	 * @returns DzTextureMask The mask on this layer, otherwise null. If a mask already exists on this layer, the mask's label is changed to the label specified. If a mask does not exist on this layer, a new mask is created and assigned the label specified.
	 * @param {String} maskLabel - The label of the mask.
	 */
	createMask(maskLabel) {};
	/**
	 * @returns DzTextureMask The mask on this layer (if any), otherwise null.
	 */
	getMask() {};
	/**
	 * @returns Boolean true if this texture layer has a mask that needs to be refreshed or this layer has been modified on disk since it was last loaded/updated, otherwise false.
	 */
	needsRefresh() {};
	/**
	 * @description Sets a mask on this texture layer.
	 * @param {DzTextureMask} mask - The mask to set.
	 */
	setMask(mask) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted just before the mask for the texture layer is changed.
	 * @signature `"aboutToChangeMask(DzTextureMask*,DzTextureMask*)"`
	 * @event
	 */
	aboutToChangeMask(oldMask, newMask) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the blend mode the texture layer has changed.
	 * @signature `"blendModeChanged(DzTextureLayer.BlendMode)"`
	 * @event
	 */
	blendModeChanged(mode) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the mask for the texture layer has changed.
	 * @signature `"maskChanged(DzTextureMask*,DzTextureMask*)"`
	 * @event
	 */
	maskChanged(oldMask, newMask) {};

}
/**
 * A texture mask is used in a non-destructive process to hide some portions of a texture layer and reveal others. White values in the mask allow the full value of the underlying texture layer to be shown, and black values in the mask completely block the underlying texture layer from being shown. The range of values between white and black gradually transition between completely shown and completely blocked. When color values are used in the mask, the value of each RGB channel in the color has the same effect on whether or not that channel is shown or blocked.
 * See Also:
 */
class DzTextureMask extends DzTextureComponent {

}
/**
 * See Also:
 */
class DzTextureModifier extends DzBase, DzRefCountedItem {
	/**
	 * @description Default constructor.
	 */
	constructor() {};
	/**
	 * @description Holds the grayscale mode of this texture modifier.
	 * @type {GrayscaleMode}
	 */
	grayscaleMode;
	/**
	 * @description Holds the number of horizontal tiles for this texture modifier.
	 * @type {Number}
	 */
	horizontalTiles;
	/**
	 * @description Holds the horizontal tiling offset of this texture modifier.
	 * @type {Number}
	 */
	horizontalTilingOffset;
	/**
	 * @description Holds whether or not this texture modifier inverts colors.
	 * @type {Boolean}
	 */
	invert;
	/**
	 * @description Holds the offset of this texture modifier.
	 * @type {Number}
	 */
	offset;
	/**
	 * @description Holds the scale of this texture modifier.
	 * @type {Number}
	 */
	scale;
	/**
	 * @description Holds the number of vertical tiles for this texture modifier.
	 * @type {Number}
	 */
	verticalTiles;
	/**
	 * @description Holds the vertical tiling offset of this texture modifier.
	 * @type {Number}
	 */
	verticalTilingOffset;
	/**
	 * @description ENUM: Uses the alpha channel from the texture as the grayscale value.
	 */
	Alpha;
	/**
	 * @description ENUM: Uses the average of the R, G and B values for a given pixel in the texture as the grayscale value.
	 */
	Average;
	/**
	 * @description ENUM: Use the luminance as calculated from the R, G and B values for a given pixel in the texture as the grayscale value.
	 */
	Luminance;
	/**
	 * @description ENUM: Uses the maximum as calculated from the R, G and B values for a given pixel in the texture as the grayscale value.
	 */
	Maximum;
	/**
	 * @description ENUM: Uses the R value for a given pixel in the texture as the grayscale value. Since: 4.14.0.2
	 */
	RedChannel;
	/**
	 * @description ENUM: Uses the G value for a given pixel in the texture as the grayscale value. Since: 4.14.0.2
	 */
	GreenChannel;
	/**
	 * @description ENUM: Uses the B value for a given pixel in the texture as the grayscale value. Since: 4.14.0.2
	 */
	BlueChannel;
	/**
	 * @description ENUM: The same as Average.
	 */
	GrayscaleDefault;
	/**
	 * @description ENUM: Does not modify the texture.
	 */
	NoModification;
	/**
	 * @description ENUM: Modifies the scale of the texture.
	 */
	Scale;
	/**
	 * @description ENUM: Modifies the position of the texture.
	 */
	Offset;
	/**
	 * @description ENUM: Inverts the colors of the texture.
	 */
	Invert;
	/**
	 * @description ENUM: Modifies the grayscale mode of the texture.
	 */
	Grayscale;
	/**
	 * @description ENUM: Modifies the local tiling of the texture.
	 */
	LocalTiling;
	/**
	 * @description ENUM: The modification is invalid.
	 */
	InvalidModification;
	/**
	 * @returns Number The calculated offset based on the specified modification flags.
	 * @param {Modifications} modificationFlags - A bitwise OR of the modification flags to calaculate the offset from.
	 */
	calcOffset(modificationFlags) {};
	/**
	 * @returns Number The calculated offset based on the specified modification flags.
	 * @since 4.14.1.8
	 * @param {Modifications} modificationFlags - A bitwise OR of the modification flags to calaculate the offset from.
	 * @param {Boolean} flipPolarity - Whether values in the image should be flipped or not (ie black = 1, white = 0)
	 */
	calcOffset(modificationFlags, flipPolarity) {};
	/**
	 * @returns Number The calculated scale based on the specified modification flags.
	 * @param {Modifications} modificationFlags - A bitwise OR of the modification flags to calaculate the scale from.
	 */
	calcScale(modificationFlags) {};
	/**
	 * @returns Number The calculated scale based on the specified modification flags.
	 * @since 4.14.1.8
	 * @param {Modifications} modificationFlags - A bitwise OR of the modification flags to calaculate the scale from.
	 * @param {Boolean} flipPolarity - Whether values in the image should be flipped (black = 1, white = 0) or not
	 */
	calcScale(modificationFlags, flipPolarity) {};
	/**
	 * @returns DzTextureModifier A deep copy of this texture modifier.
	 */
	duplicate() {};
	/**
	 * @description Populates the given settings object with the attributes of this texture modifier.
	 * @param {DzSettings} settings - The settings object to populate.
	 * @param {Modifications} modFlags - A bitwise OR of the modifier flags to set.
	 */
	getAttributes(settings, modFlags) {};
	/**
	 * @returns Number The grayscale mode based on the specified modification flags.
	 * @param {Modifications} modificationFlags - A bitwise OR of the modification flags to get the grayscale mode from.
	 */
	getGrayscaleMode(modificationFlags) {};
	/**
	 * @returns Number The number of horizontal tiles for the specified modification flags.
	 * @param {Modifications} modificationFlags - A bitwise OR of the modification flags to get the number of horizontal tiles from.
	 */
	getHorizontalTiles(modificationFlags) {};
	/**
	 * @returns Number The horizontal tiling offset based on the specified modification flags.
	 * @param {Modifications} modificationFlags - A bitwise OR of the modification flags to get the horizontal tiling offset from.
	 */
	getHorizontalTilingOffset(modificationFlags) {};
	/**
	 * @returns Number The offset based on the specified modification flags.
	 * @param {Modifications} modificationFlags - A bitwise OR of the modification flags to get the offset from.
	 */
	getOffset(modificationFlags) {};
	/**
	 * @returns Number The scale based on the specified modification flags.
	 * @param {Modifications} modificationFlags - A bitwise OR of the modification flags to get the scale from.
	 */
	getScale(modificationFlags) {};
	/**
	 * @returns Number The number of vertical tiles for the specified modification flags.
	 * @param {Modifications} modificationFlags - A bitwise OR of the modification flags to get the number of vertical tiles from.
	 */
	getVerticalTiles(modificationFlags) {};
	/**
	 * @returns Number The vertical tiling offset based on the specified modification flags.
	 * @param {Modifications} modificationFlags - A bitwise OR of the modification flags to get the vertical tiling offset from.
	 */
	getVerticalTilingOffset(modificationFlags) {};
	/**
	 * @returns Boolean true if this texture modifier is in its default state, otherwise false.
	 * @param {Modifications} modificationFlags - A bitwise OR of the modification flags that define 'default.'
	 */
	isDefault(modificationFlags) {};
	/**
	 * @returns Boolean The inverted state based on the specified modification flags.
	 * @since 4.14.1.8
	 * @param {Modifications} modificationFlags - A bitwise OR of the modification flags to get the inverted state from.
	 * @param flipPolarity - Whether values in the image should be flipped or not (ie black = 1, white = 0)
	 */
	isInverted(modificationFlag, flipPolaritys) {};
	/**
	 * @returns Boolean The inverted state based on the specified modification flags.
	 * @param {Modifications} modificationFlags - A bitwise OR of the modification flags to get the inverted state from.
	 */
	isInverted(modificationFlags) {};
	/**
	 * @description Resets this texture modifier.
	 */
	reset() {};
	/**
	 * @description Sets the attributes of this texture modifier using settings.
	 * @returns DzTextureModifier
	 * @param {DzSettings} settings - The settings with the data to set.
	 * @param {Modifications} modFlags - A bitwise OR of the modifier flags to set.
	 * @param {DzTextureModifier} oldMod - The texture modifier (if any) to use for default values if a named value cannot be found in settings.
	 */
	setAttributes(settings, modFlags, oldMod = null) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the grayscale mode of the texture modifier has changed.
	 * @signature `"grayscaleModeChanged()"`
	 * @event
	 */
	grayscaleModeChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the number of horizontal tiles for the texture modifier has changed.
	 * @signature `"horizontalTilesChanged()"`
	 * @event
	 */
	horizontalTilesChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the horizontal tiling offset of the texture modifier has changed.
	 * @signature `"horizontalTilingOffsetChanged()"`
	 * @event
	 */
	horizontalTilingOffsetChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the inversion of the texture modifier has changed.
	 * @signature `"invertedChanged()"`
	 * @event
	 */
	invertedChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the offset of the texture modifier has changed.
	 * @signature `"offsetChanged()"`
	 * @event
	 */
	offsetChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the scale of the texture modifier has changed.
	 * @signature `"scaleChanged()"`
	 * @event
	 */
	scaleChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the settings of the texture modifier have changed.
	 * @signature `"settingsChanged()"`
	 * @event
	 */
	settingsChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the number of vertical tiles for the texture modifier has changed.
	 * @signature `"verticalTilesChanged()"`
	 * @event
	 */
	verticalTilesChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the vertical tiling offset of the texture modifier has changed.
	 * @signature `"verticalTilingOffsetChanged()"`
	 * @event
	 */
	verticalTilingOffsetChanged() {};

}
/**
 * DzTime is used for storing and passing time values. Time references in DAZ Studio are stored in 'ticks' - there are 4800 ticks per second. This number was chosen because of its divisibility by typical frame rates. For example, at 60 fps (frames per second) there are 80 ticks between each frame; at 30 fps, 160 ticks; at 20 fps, 180 ticks; etc.
 * Attention:@attention Attention:Number : valueOf()
 * 
 * ### Example:
 * ```
 * var oTimeStep = Scene.getTimeStep();
 * print( typeof oTimeStep );
 * 
 * var nTimeStep = oTimeStep.valueOf();
 * print( nTimeStep );
 * 
 * var oTime = Scene.getTime();
 * print( typeof oTime );
 * 
 * var nTime = oTime.valueOf();
 * print( nTime );
 * 
 * Scene.setTime( nTimeStep * 2 );
 * 
 * oTime = Scene.getTime();
 * print( typeof oTime );
 * 
 * nTime = oTime.valueOf();
 * print( nTime );
 * ```
 */
class DzTime {
	/**
	 * @returns Number The value of the DzTime as a Number.
	 */
	valueOf() {};

}
/**
 * A DzTimeEdit provides a time editor.
 */
class DzTimeEdit extends DzDateTimeEdit {
	/**
	 * @description Creates a time edit widget as a child of the given parent widget.
	 * @param {DzWidget} parent - The widget parent for the time edit.
	 */
	constructor(parent) {};
	/**
	 * @description Holds the maximum value for the widget.
	 * @type {Date}
	 */
	max;
	/**
	 * @description Holds the minimum value for the widget.
	 * @type {Date}
	 */
	min;
	/**
	 * @description Holds the separator used by the widget.
	 * @type {String}
	 */
	separator;
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the time in the widget has changed, passes the new time.
	 * @signature `"valueChanged(const QTime&)"`
	 * @event
	 */
	valueChanged(dztime) {};

}
/**
 * 
 */
class DzTimer extends QObject {
	/**
	 * @description Construct a timer with the given parent.
	 */
	constructor(parent = undefined) {};
	/**
	 * @description Holds whether the timer is running. (Read Only)
	 * @type {Boolean}
	 */
	active;
	/**
	 * @description Holds the timeout interval in milliseconds; default is 0 - will time out as soon as all events in the window system's event queue have been processed.
	 * @type {Number}
	 */
	interval;
	/**
	 * @description Holds whether the timer is the type that runs only once; if false, timer runs every interval milliseconds.
	 * @type {Number}
	 */
	singleShot;
	/**
	 * @description Starts, or restarts, the timer with a timeout interval of msec milliseconds. If the timer is already running, it will be stopped and restarted. If singleShot is true, the timer will be started only once.
	 * @param {Number} msec - The duration, in milliseconds, for the timer to run.
	 */
	start(msec) {};
	/**
	 * @description Starts, or restarts, the timer with a timeout interval of interval milliseconds. If the timer is already running, it will be stopped and restarted. If singleShot is true, the timer will be started only once.
	 */
	start() {};
	/**
	 * @description Stops the timer.
	 */
	stop() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the timer times out.
	 * @signature `"timeout()"`
	 * @event
	 */
	timeout() {};

}
/**
 * TODO:
 * Add detailed description.
 */
class DzTimeRange extends Object {
	/**
	 * @description Default Constructor. Creates the time range [DZ_MIN_TIME,DZ_MAX_TIME]
	 */
	constructor() {};
	/**
	 * @description Creates a time range by parsing a string.
	 * @param {String} range - A string representation of the time range in the form "[ start, end ]"
	 */
	constructor(range) {};
	/**
	 * @description This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.
	 */
	constructor(range) {};
	/**
	 * @description This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.
	 */
	constructor(start, end) {};
	/**
	 * @description The end of this time range.
	 * @type {DzTime}
	 */
	end;
	/**
	 * @description The start of this time range.
	 * @type {DzTime}
	 */
	start;
	/**
	 * @description Adds the given amount of time to both ends of this range.
	 * @param {DzTime} time - The amount of time to add.
	 */
	add(time) {};
	/**
	 * @description Extends the ends of this time range by the given amount of time, effectively expanding it by 2 * the specified time.
	 * @param {DzTime} time - The amount of time to extend by - must be non-negative.
	 */
	extendEndsBy(time) {};
	/**
	 * @returns DzTime The length of this time range (end - start).
	 */
	getDuration() {};
	/**
	 * @description Expands this time range to include the given time.
	 * @param {DzTime} time - The time to include.
	 */
	include(time) {};
	/**
	 * @description Expands this time range to include the given time range.
	 * @returns DzTimeRange
	 * @param {DzTimeRange} range - The time range to include.
	 */
	include(range) {};
	/**
	 * @description Sets this time range to the intersection with the given time range.
	 * @returns DzTimeRange
	 * @param {DzTimeRange} range - The time range to intersect.
	 */
	intersect(range) {};
	/**
	 * @returns Boolean true if this time range is length 0, otherwise false.
	 */
	isEmpty() {};
	/**
	 * @returns Boolean true if the given time falls inside this range, otherwise false.
	 */
	isIncluded(time) {};
	/**
	 * @returns Boolean true if the given range falls inside this range, otherwise false.
	 */
	isIncluded(range) {};
	/**
	 * @description Sets this time range to be empty.
	 */
	makeEmpty() {};
	/**
	 * @returns Boolean true if the given range overlaps this range, otherwise false.
	 */
	overlaps(range) {};
	/**
	 * @description Subtracts the given amount of time from both ends of this range.
	 * @param {DzTime} time - The amount of time to subtract.
	 */
	subtract(time) {};
	/**
	 * @returns String A string representation of this time range in the form "[ start, end ]".
	 */
	toString() {};

}
/**
 * This class provides access to a toolbar within the interface. This class is not intended to be constructed directly, rather an instance of the class is created using DzPaneMgr.createToolBar().
 * See Also:
 */
class DzToolBar extends QWidget {
	/**
	 * @description Holds whether or not the bar is docked. (Read Only)
	 * @type {Boolean}
	 */
	floating;
	/**
	 * @description ENUM: The dock area at the top of a DzActivityLayout.
	 */
	ToolBarTop;
	/**
	 * @description ENUM: The dock area at the bottom of a DzActivityLayout.
	 */
	ToolBarBottom;
	/**
	 * @description ENUM: The dock area on the left side of a DzActivityLayout.
	 */
	ToolBarLeft;
	/**
	 * @description ENUM: The dock area on the right side of a DzActivityLayout.
	 */
	ToolBarRight;
	/**
	 * @description ENUM: No dock area. The toolbar cannot be docked.
	 */
	NoToolBarArea;
	/**
	 * @description Removes all items from the bar.
	 */
	clear() {};
	/**
	 * @description Docks the toolbar in the specified area on the DzActivityLayout, and shows the toolbar if it is hidden.
	 * @returns DzToolBar
	 * @param {DzToolBar.DockArea} area - The DockArea to dock the toolbar to.
	 * @param {String} beforeBar - The name of the bar in the area to dock before.
	 */
	dock(area, beforeBar = "") {};
	/**
	 * @returns DockArea The dock area that the toolbar is docked in.
	 */
	dockedArea() {};
	/**
	 * @returns DzToolBarItem The toolbar item at the given index (if valid), otherwise null.
	 * @param {Number} which - The index of the item in the toolbar.
	 */
	getItem(which) {};
	/**
	 * @description This function is provided for DAZ Script access. Plugin developers are encouraged to use the much more efficient itemListIterator() method.
	 * @returns Array A list of all the items in this toolbar.
	 */
	getItemList() {};
	/**
	 * @returns Number The number of items in the toolbar.
	 */
	getNumItems() {};
	/**
	 * @returns Boolean true if there are items in this toolbar, false if the toolbar is empty.
	 */
	hasItems() {};
	/**
	 * @description Adds the given action to the toolbar.
	 * @param {DzAction} action - The DzAction that will be added to the toolbar.
	 * @param {DzAction} before - The DzAction to insert action before.
	 */
	insertAction(action, before) {};
	/**
	 * @description Adds the given action to the toolbar.
	 * @param {String} action - The class name of the DzAction that will be added to the toolbar.
	 * @param {Number} index - The index at which to insert the item, if the index is invalid (the default) the item is appended to the end of the menu.
	 */
	insertAction(action, index = -1) {};
	/**
	 * @description Adds the given custom action to the toolbar.
	 * @param {String} action - The name (GUID) of the custom action that will be added to the toolbar.
	 * @param {Number} index - The index at which to insert the item, if the index is invalid (the default) the item is appended to the end of the menu.
	 */
	insertCustomAction(action, index = -1) {};
	/**
	 * @description Adds a custom widget to the toolbar.
	 * @param {String} uiScript - A path to the DAZ Script that loads the QtDesigner .ui file for the custom widget. A global function named getWidget() is provided to uiScript that returns a DzWidget which should be used as the parent argument in a DzUiLoader.load() call.
	 * @param {Number} index - The index at which to insert the item, if the index is invalid (the default) the item is appended to the end of the menu.
	 */
	insertCustomWidget(uiScript, index = -1) {};
	/**
	 * @description Inserts the given item into the toolbar at the given location.
	 * @param {DzToolBarItem} item - The item to insert into the toolbar.
	 * @param {Number} index - The index at which to insert the item, if the index is invalid (the default) the item is appended to the end of the toolbar.
	 */
	insertItem(item, index = -1) {};
	/**
	 * @description Adds a separator to the toolbar.
	 * @param {Number} index - The index at which to insert the item, if the index is invalid (the default) the item is appended to the end of the menu.
	 */
	insertSeparator(index = -1) {};
	/**
	 * @description Adds a spacer to the toolbar which adjusts itself so that items added after it are aligned over the application viewport.
	 * @param {Number} alignment - The alignment to use for toolbar items. Currently supports Qt.AlignLeft and Qt.AlignCenter
	 * @param {Number} index - The index at which to insert the spacer. If the index is invalid (the default) the item is appended to the end of the menu.
	 */
	insertViewportAlignmentSpacer(alignment, index = -1) {};
	/**
	 * @description Adds a spacer to the toolbar which adjusts itself so that any items after it are centered over the application viewport.
	 * @param {Number} index - The index at which to insert the spacer. If the index is invalid (the default) the item is appended to the end of the menu.
	 */
	insertViewportCenterAlignSpacer(index = -1) {};
	/**
	 * @description Adds a spacer to the toolbar which adjusts itself so that any items after it are left aligned over the application viewport.
	 * @param {Number} index - The index at which to insert the spacer. If the index is invalid (the default) the item is appended to the end of the menu.
	 */
	insertViewportLeftAlignSpacer(index = -1) {};
	/**
	 * @returns Boolean true if the toolbar is closed (not displayed), false if the toolbar is open (displayed).
	 */
	isClosed() {};
	/**
	 * @param {Number} index - The index of the item to remove.
	 */
	removeItem(index) {};
	/**
	 * @param {DzToolBarItem} item - The item to remove.
	 */
	removeItem(item) {};
	/**
	 * @description Sets whether the toolbar is closed (not displayed), or open (displayed).
	 */
	setClosed(onOff) {};
	/**
	 * @description Undocks the toolbar, moves it to the given global coordinates, and shows the toolbar if it is hidden.
	 */
	undock(pos) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when items are added to or removed from this toolbar
	 * @signature `"itemListChanged()"`
	 * @event
	 */
	itemListChanged() {};

}
/**
 * This class provides access to toolbar items within the interface. This class is not intended to be constructed directly, rather an instance of the class is created using one of the following:
 */
class DzToolBarItem extends QObject {
	/**
	 * @description If the item type is Action, holds the QObject.className() of the DzAction which is activated by this item. If the item type is CustomAction, holds the name (GUID) of the Custom Action that is activated by this item.
	 * @type {String}
	 */
	action;
	/**
	 * @description The type of the toolbar item. (Read Only)
	 * @type {Type}
	 */
	type;
	/**
	 * @description If the item type is CustomWidget, holds the path to the script to execute in order to create the UI of the widget for this item. The path can be absolute, relative to the application resources path, or relative to the resources folder in the application data path.
	 * @type {String}
	 */
	uiScript;
	/**
	 * @description ENUM: A toolbar separator (i.e. divider)
	 */
	Separator;
	/**
	 * @description ENUM: An action item - a toolbar item that activates a DzAction
	 */
	Action;
	/**
	 * @description ENUM: A toolbar item that activates a Custom Action. See DzActionMgr for more information about custom actions.
	 */
	CustomAction;
	/**
	 * @description ENUM: A toolbar item that provides a non-standard widget.
	 */
	CustomWidget;
	/**
	 * @description ENUM: A toolbar item that adjusts itself so that any items after it are left aligned over the application viewport.
	 */
	ViewportLeftAlignSpacer;
	/**
	 * @description ENUM: A toolbar item that adjusts itself so that any items after it are centered over the application viewport.
	 */
	ViewportCenterAlignSpacer;

}
/**
 * 
 */
class DzTopLevelAssetContainer extends DzRefCountedItem, DzAbstractAssetContainer {
	/**
	 * @description ENUM: The container is idle.
	 */
	csNone;
	/**
	 * @description ENUM: The container is busy with an update.
	 */
	csBusy;
	/**
	 * @description ENUM: The update operation completed without errors.
	 */
	csFinished;
	/**
	 * @description ENUM: The update operation was canceled.
	 */
	csCanceled;
	/**
	 * @description ENUM: An error occured during the update operation.
	 */
	csError;
	/**
	 * @returns ContainerState The current state of the containter.
	 * @since 4.9.1.17
	 */
	getState() {};
	/**
	 * @description Sets the state of this container.
	 * @since 4.9.1.17
	 * @param {ContainerState} state - The state to set.
	 * @attention Generally this should not be called from script.
	 */
	setState(state) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the state of this container has changed.
	 * @signature `"stateChanged(int)"`
	 * @event
	 */
	stateChanged(state) {};

}
/**
 * Attention:
 * Since:@attention Attention:
 */
class DzTransferUtility extends QObject {
	/**
	 * @description Default Constructor. Creates a Transfer Utility that can be used to transfer weights, morph, maps, etc using projection.
	 */
	constructor() {};
	/**
	 * @description ENUM: The type of the asset is not defined.
	 */
	NoAsset;
	/**
	 * @description ENUM: The type of the asset is a shape_dz.
	 */
	GeometryAsset;
	/**
	 * @description ENUM: The type of the asset is a DzNode.
	 */
	NodeAsset;
	/**
	 * @description ENUM: The unmodified base geometry.
	 */
	BaseGeom;
	/**
	 * @description ENUM: The base geometry as modified by a morph target.
	 */
	BaseMorph;
	/**
	 * @description ENUM: The current world-space cached geometry.
	 */
	BaseCurrent;
	/**
	 * @description ENUM: No morphs.
	 */
	NoMorphs;
	/**
	 * @description ENUM: A specific list of named morphs.
	 */
	NameList;
	/**
	 * @description ENUM: The morphs in which their respective value control properties are marked as a favorite.
	 */
	Favorites;
	/**
	 * @description ENUM: Same as Favorites, plus the properties that are controlled by them via DzERCLink.
	 */
	FavoritesAndSubComponets;
	/**
	 * @description ENUM: The morphs that have their respective control property in the "Modifier/Shape" or "Modifier/Pose" property groups.
	 */
	ShapingAndPoseType;
	/**
	 * @description ENUM: All morphs.
	 */
	AllMorphs;
	/**
	 * @description Performs the projection transfer based on the current settings.
	 * @returns Boolean true if the transfer was successful, otherwise false.
	 */
	doTransfer() {};
	/**
	 * @returns Number The adaptive tolerance factor for calculating the projection.
	 * @since 4.8.1.78
	 */
	getAdaptiveTolerance() {};
	/**
	 * @returns Boolean true if a smoothing modifier will be added to the target figure, otherwise false.
	 */
	getAddSmoothModifier() {};
	/**
	 * @returns Boolean true if the target geometry will be adjusted to the source base geometry, otherwise false.
	 * @attention Provides access to the "Reverse Source Shape From Target" option in the Transfer Utility dialog.
	 */
	getAdjustTargetBase() {};
	/**
	 * @returns Boolean true if polylines are projected as rigid topology, otherwise false.
	 * @since 4.11.0.66
	 */
	getConsiderLinesAsRigid() {};
	/**
	 * @returns String The content type to be set on the presentation of the figure.
	 */
	getContentType() {};
	/**
	 * @returns The distance squared tolerance for calculating the projection.
	 * @since 4.10.0.50
	 */
	getDistanceSquaredTolerance() {};
	/**
	 * @returns Boolean true if the target figure will be fit to the source figure once the projection has been performed, otherwise false.
	 */
	getFitToFigure() {};
	/**
	 * @returns Boolean true if the view will be locked during the transfer, otherwise false.
	 */
	getLockViewOnTransfer() {};
	/**
	 * @returns Boolean true if node hierarchies will be merged on the target figure, otherwise false.
	 */
	getMergeHierarchies() {};
	/**
	 * @returns Array A list of morph names that will be transfered (if any).
	 */
	getMorphTransferList() {};
	/**
	 * @returns Number The nearness factor for calculating the projection.
	 */
	getNearness() {};
	/**
	 * @returns Boolean true if existing morphs on the target figure will be replaced, otherwise false.
	 */
	getOverrideExistingMorphs() {};
	/**
	 * @returns Boolean true if the target figure will be parented to the source figure once the projection has been performed, otherwise false.
	 * @since 4.10.0.50
	 */
	getParentToFigure() {};
	/**
	 * @returns String The path to a template figure to use for projection.
	 * @since 4.9.3.48
	 */
	getProjectionTemplatePath() {};
	/**
	 * @returns Boolean true if unused bones should be removed from the target after skin binding is transfered, otherwise false.
	 */
	getRemoveUnusedTargetBones() {};
	/**
	 * @returns Boolean true if the transfer of weightmaps will respect hidden facets on the target figure, otherwise false.
	 */
	getRespectHiddenFacets() {};
	/**
	 * @returns Boolean true if smart left/right handling will be used during projection calculation, otherwise false.
	 */
	getSmartLeftRightHandling() {};
	/**
	 * @returns BaseType The type of projection base that will be used for the source asset.
	 */
	getSourceBase() {};
	/**
	 * @returns DzMorph The morph that will be used for the source projection base, or NULL if a different base type will be used.
	 */
	getSourceBaseMorph() {};
	/**
	 * @returns DzShape The shape containing the source asset if the source asset type is GeometryAsset, otherwise null.
	 */
	getSourceGeom() {};
	/**
	 * @returns DzNode The node containing the source asset if the source asset type is NodeAsset, otherwise null.
	 */
	getSourceNode() {};
	/**
	 * @returns AssetType The type of asset currently set for the projection source.
	 */
	getSourceType() {};
	/**
	 * @returns BaseType The type of projection base that will be used for the target asset.
	 */
	getTargetBase() {};
	/**
	 * @returns DzMorph The morph that will be used for the target projection base, or NULL if a different base type will be used.
	 */
	getTargetBaseMorph() {};
	/**
	 * @returns DzShape The shape containing the target asset if the target asset type is GeometryAsset, otherwise null.
	 */
	getTargetGeom() {};
	/**
	 * @returns DzNode The node containing the target asset if the target asset type is NodeAsset, otherwise null.
	 */
	getTargetNode() {};
	/**
	 * @returns DzFigure The target output figure.
	 */
	getTargetOutputFigure() {};
	/**
	 * @returns Boolean true if the target will replace the source in the scene, otherwise false.
	 * @attention Provides access to the "Replace Source With Target" option in the Transfer Utility dialog.
	 */
	getTargetReplacesSource() {};
	/**
	 * @returns AssetType The type of asset currently set for the projection target.
	 */
	getTargetType() {};
	/**
	 * @returns Boolean true if skin binding will be projected, otherwise false.
	 * @attention Provides access to the "Weight Maps" option in the Transfer Utility dialog.
	 */
	getTransferBinding() {};
	/**
	 * @returns Boolean true if face grouping will be projected, otherwise false.
	 */
	getTransferFaceGroups() {};
	/**
	 * @returns Boolean true if material grouping will be projected, otherwise false.
	 * @attention Provides access to the "Surface Groups" option in the Transfer Utility dialog.
	 */
	getTransferMaterialGroups() {};
	/**
	 * @returns Boolean true if morphs will be projected, otherwise false.
	 */
	getTransferMorphs() {};
	/**
	 * @returns Boolean true if region grouping will be projected, otherwise false.
	 */
	getTransferRegionGroups() {};
	/**
	 * @returns Boolean true if the selection map will be projected, otherwise false.
	 */
	getTransferSelectionMap() {};
	/**
	 * @returns SourceMorphTransferType Which morphs are projected from the source figure.
	 */
	getTransferSourceMorphs() {};
	/**
	 * @returns Boolean true if morphs should be projected from the template figure, otherwise false.
	 * @since 4.9.3.48
	 */
	getTransferTemplateMorphs() {};
	/**
	 * @returns Boolean true if UV maps will be projected, otherwise false.
	 */
	getTransferUVs() {};
	/**
	 * @returns Boolean true if near vertices will be used for calculation of the projection, otherwise false.
	 */
	getUseNearness() {};
	/**
	 * @returns Boolean true if the specified content type should be used to set the target content type, otherwise false.
	 */
	getUseSpecifiedContentType() {};
	/**
	 * @returns Boolean true if UV space will be used during projection calculation, otherwise false.
	 * @since 4.9.3.1
	 */
	getUVSpaceProjection() {};
	/**
	 * @returns Boolean true if vertices are looked at first on the source for projection, false if facets are looked at first.
	 * @since 4.9.3.38
	 */
	getVertexFirstProjection() {};
	/**
	 * @returns Boolean true if the morph that will be used for the source projection base is "Modifier/Clone", otherwise false.
	 * @since 4.9.4.84
	 */
	isSourceBaseMorphClone() {};
	/**
	 * @description Removes unused bones from the given figure; unused bones are those whose bone binding weight maps are all filled with zero.
	 * @param {DzFigure} figure - The figure to remove the unused bones from.
	 */
	removeUnusedBones(figure) {};
	/**
	 * @description Sets the adaptive tolerance factor if near vertices will be used to calculate the projection.
	 * @since 4.8.1.78
	 * @param {Number} val - The adaptive tolerance factor to set.
	 */
	setAdaptiveTolerance(val) {};
	/**
	 * @description Sets whether or not to add a smoothing modifier to the target figure.
	 */
	setAddSmoothModifier(yesNo) {};
	/**
	 * @description Sets whether or not the target will be adjusted to the unmodified base geometry of the source.
	 * @param {Boolean} onOff - If true, the target geometry will be adjusted. If false, the target geometry will not be changed.
	 * @attention Provides access to the "Reverse Source Shape From Target" option in the Transfer Utility dialog.
	 */
	setAdjustTargetBase(onOff) {};
	/**
	 * @description Sets whether or not polylines are projected as rigid topology; whether or not all vertices of a given polyline transform based on the relative position of its first vertex, or individually based on their own respective positions.
	 * @since 4.11.0.66
	 * @param {Boolean} onOff - If true, polylines are projected as rigid topology. If false, polylines are projected as non-rigid topology.
	 */
	setConsiderLinesAsRigid(onOff) {};
	/**
	 * @description Sets the content type to be set on the presentation of the figure.
	 * @param {String} conType - The content type to set.
	 */
	setContentType(conType) {};
	/**
	 * @description Sets the distance squared tolerance to use for calculating the projection.
	 * @since 4.10.0.50
	 * @param {Number} val - The distance squared tolerance value to set.
	 */
	setDistanceSquaredTolerance(val) {};
	/**
	 * @description Sets whether or not the target figure will be fit to the source figure once the projection has been performed.
	 * @param {Boolean} yesNo - If true, the target figure will be fit to the source figure.
	 */
	setFitToFigure(yesNo) {};
	/**
	 * @description Sets whether or not the view will be locked during the transfer.
	 * @param {Boolean} onOff - If true, the view will be locked during the transfer.
	 */
	setLockViewOnTransfer(onOff) {};
	/**
	 * @description Sets whether or not node hierarchies will be merged on the target figure.
	 * @param {Boolean} onOff - If true, node hierarchies will be merged.
	 */
	setMergeHierarchies(onOff) {};
	/**
	 * @description Sets the list of morph names to transfer.
	 * @param {Array} list - The list of morph names to set.
	 */
	setMorphTransferList(list) {};
	/**
	 * @description Sets the nearness factor if near vertices will be used to calculate the projection.
	 * @param {Number} val - The nearness factor to set.
	 */
	setNearness(val) {};
	/**
	 * @description Sets whether or not to override morphs that already exist onthe target figure.
	 * @param {Boolean} onOff - If true (default), existing morphs on the target figure will be replaced.
	 */
	setOverrideExistingMorphs(onOff) {};
	/**
	 * @description Sets whether or not the target figure will be parented to the source figure once the projection has been performed.
	 * @since 4.10.0.50
	 * @param {Boolean} yesNo - If true, the target figure will be parented to the source figure.
	 */
	setParentToFigure(yesNo) {};
	/**
	 * @description Sets the path to a template figure to use for projection.
	 * @since 4.9.3.48
	 * @param {String} path - The path of the projection template to set.
	 */
	setProjectionTemplatePath(path) {};
	/**
	 * @description Sets whether or not unused bones should be removed from the target after skin binding is transfered.
	 * @param {Boolean} onOff - If true, unused bones will be removed from the target after skin binding is transfered. If false, unused bones will not be removed from the target.
	 */
	setRemoveUnusedTargetBones(onOff) {};
	/**
	 * @description Sets whether or not the transfer of weightmaps will respect hidden facets on the target figure.
	 * @param {Boolean} onOff - If true, the transfer of weightmaps will respect hidden facets on the target figure.
	 */
	setRespectHiddenFacets(onOff) {};
	/**
	 * @description Sets whether importers that may need to be invoked should run silently, or with user input. Currently this only affects transfers using DzTransferPoserFigureAssets. This needs to be called before setSource() or setTarget() are called.
	 */
	setSilentImporters(onOff) {};
	/**
	 * @description Sets whether or not smart left/right handling will be used during projection calculation.
	 * @param {Boolean} onOff - If true, smart left/right handling will be used. If false, smart left/right handling will not be used.
	 */
	setSmartLeftRightHandling(onOff) {};
	/**
	 * @description Sets the source asset to be the geometry contained by the given node.
	 * @returns Boolean
	 * @param {DzNode} node - The node to use as a projection source.
	 */
	setSource(node) {};
	/**
	 * @description Sets the source asset to be the geometry contained by the given shape.
	 * @returns Boolean
	 * @param {shape_dz} shape - The shape containing the geometry to use as a projection source.
	 */
	setSource(geom) {};
	/**
	 * @description Sets the Transfer Utility to use the current world-space cached geometry of the source asset for the projection base instead of a morph or the unmodified base geometry. Only valid if the source asset is a node.
	 * @returns Boolean false if the source asset is not a node, otherwise true.
	 */
	setSourceBaseCurrent() {};
	/**
	 * @description Sets the morph that will be applied to the source geometry before the projection is calculated. Only valid if the source asset is a node.
	 * @returns Boolean true if the morph will be used, false if the morph is invalid or the source asset is not a node.
	 * @param {morph_dz} morph - The morph that will act as the projection base.
	 */
	setSourceBaseMorph(morph) {};
	/**
	 * @description Sets the target asset to be the geometry contained by the given node.
	 * @returns Boolean
	 * @param {DzNode} node - The node to use as a projection target.
	 */
	setTarget(node) {};
	/**
	 * @description Sets the target asset to be the geometry contained by the given shape.
	 * @returns Boolean
	 * @param {shape_dz} shape - The shape containing the geometry to use as a projection target.
	 */
	setTarget(geom) {};
	/**
	 * @description Sets the Transfer Utility to use the current world-space cached geometry of the target asset for the projection base instead of a morph or the unmodified base geometry. Only valid if the target asset is a node.
	 * @returns Boolean false if the target asset is not a node, otherwise true.
	 */
	setTargetBaseCurrent() {};
	/**
	 * @returns Boolean The morph that will be used for the target projection base, or NULL if a different base type will be used.
	 */
	setTargetBaseMorph(morph) {};
	/**
	 * @description ets whether or not the target will replace the source in the scene.
	 * @param {Boolean} onOff - If true, the source will be replaced by the target. If false, the source will not be replaced by the target.
	 * @attention Provides access to the "Replace Source With Target" option in the Transfer Utility dialog.
	 */
	setTargetReplacesSource(onOff) {};
	/**
	 * @description Sets whether or not skin binding will be projected to the target.
	 * @param {Boolean} onOff - If true, the skin binding weights will be projected. If false, the skin binding weights will not be projected.
	 * @attention Provides access to the "Weight Maps" option in the Transfer Utility dialog.
	 */
	setTransferBinding(onOff) {};
	/**
	 * @description Sets whether or not face grouping will be projected to the target.
	 * @param {Boolean} onOff - If true, the face groups will be projected. If false, the face groups will not be projected.
	 */
	setTransferFaceGroups(onOff) {};
	/**
	 * @description Sets whether or not material grouping will be projected to the target.
	 * @param {Boolean} onOff - If true, the material groups will be projected. If false, the material groups will not be projected.
	 * @attention Provides access to the "Surface Groups" option in the Transfer Utility dialog.
	 */
	setTransferMaterialGroups(onOff) {};
	/**
	 * @description Sets whether or not morphs will be projected to the target.
	 * @param {Boolean} onOff - If true, the morphs will be projected. If false, no morphs will be projected.
	 */
	setTransferMorphs(onOff) {};
	/**
	 * @description Sets whether or not region grouping will be projected to the target.
	 * @param {Boolean} onOff - If true, the face groups will be projected. If false, the face groups will not be projected.
	 */
	setTransferRegionGroups(onOff) {};
	/**
	 * @description Sets whether or not the selection map will be created on the target.
	 * @param {Boolean} onOff - If true, the selection map will be projected. If false, the selection map will not be projected.
	 */
	setTransferSelectionMap(onOff) {};
	/**
	 * @description Sets which type of morphs to project from the source figure.
	 * @param {SourceMorphTransferType} type - The type of morphs on the source figure to project.
	 */
	setTransferSourceMorphs(type) {};
	/**
	 * @description Sets whether or not morphs should be projected from the template figure.
	 * @since 4.9.3.48
	 * @param {Boolean} onOff - If true, morphs will be projected from the template figure.
	 */
	setTransferTemplateMorphs(onOff) {};
	/**
	 * @description Sets whether or not UV maps will be projected to the target.
	 * @param {Boolean} onOff - If true, the UV maps will be projected. If false, the UV maps will not be projected.
	 */
	setTransferUVs(onOff) {};
	/**
	 * @description Sets whether or not face near vertices will be used to calculate the projection.
	 * @param {Boolean} onOff - If true, near vertices will be used, otherwise only the closest mesh location will be used.
	 */
	setUseNearness(onOff) {};
	/**
	 * @description Sets whether or not the specified content type should be used to set the target content type.
	 * @param {Boolean} yesNo - If true, the specified content type will be used to set the target content type. If false, the specified content type will not be used to set the target content type.
	 */
	setUseSpecifiedContentType(yesNo) {};
	/**
	 * @description Sets whether or not UV space will be used during projection calculation.
	 * @since 4.9.3.1
	 * @param {Boolean} onOff - If true, UV space will be used during projection calculation. If false, UV space will not be used during projection calculation.
	 */
	setUVSpaceProjection(onOff) {};
	/**
	 * @description Sets whether vertices or facets on the source are looked at first for projection.
	 * @since 4.9.3.38
	 * @param {Boolean} onOff - If true, vertices are looked at first. If false, facets are looked at first.
	 */
	setVertexFirstProjection(onOff) {};

}
/**
 * 
 */
class DzTypeAssetContainer extends DzRefCountedItem, DzAbstractAssetContainer {
	/**
	 * @description Holds the data associated with this container; type depends on the type of the data assigned.
	 * @type {Object}
	 */
	data;
	/**
	 * @description Adds a new container with the given name, if one doesn't already exist.
	 * @returns Number The index of the newly inserted container. If a container of the same type already exists, the index of that container will be returned.
	 * @param {String} typePath - The slash ('/') delimited path of a container to add.
	 */
	addChildContainer(typePath) {};
	/**
	 * @description Adds the given container if one of the same type name doesn't exist.
	 * @returns Number The index of the newly added container or, if a container already exists with the same name, the index of that container.
	 * @param {DzTypeAssetContainer} container - The child container to be inserted.
	 */
	addChildContainer(container) {};
	/**
	 * @description Clears all the child containers and assets associated with this container. Emits endAssetRemove() and endChildContainerRemove().
	 */
	clear() {};
	/**
	 * @returns DzTypeAssetContainer The container with the given type name, if it exists, otherwise null.
	 * @param {String} typePath - The path of the container to find.
	 */
	findChildContainer(typePath) {};
	/**
	 * @returns String The displayed text path of this container.
	 * @param {Boolean} ignoreRoot - If true, the root item will not be included in the path.
	 */
	getTextPath(ignoreRoot = true) {};
	/**
	 * @returns String The type name for this container.
	 */
	getTypeName() {};
	/**
	 * @description Attempts to insert the asset to a specific type.
	 * @returns Boolean true if successful, otherwise false.
	 * @param {DzAsset} asset - The asset to be inserted.
	 * @param {String} typePath - The slash ('/') delimited path of the type for the asset.
	 */
	insertToSpecificType(asset, typePath) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when this container is about to be cleared.
	 * @signature `"aboutToClear()"`
	 * @event
	 */
	aboutToClear() {};

}
/**
 * See Also:
 */
class DzU3DExporter extends DzExporter {
	/**
	 * @description Default Constructor.
	 */
	constructor() {};

}
/**
 * Provides functionality that allows QtDesigner to be used in the creation of graphical user interfaces used by scripts.
 * See Also:
 */
class DzUiLoader extends QObject {
	/**
	 * @description Default Constructor.
	 */
	constructor() {};
	/**
	 * @description Adds a path to the list of paths the .ui loader searches when locating QtDesigner plug-ins.
	 * @param {String} path - The path to add.
	 */
	addPluginPath(path) {};
	/**
	 * @returns Array A list of the names of layouts that can be built using createLayout().
	 */
	availableLayouts() {};
	/**
	 * @returns Array A list of the names of widgets that can be built using createWidget().
	 */
	availableWidgets() {};
	/**
	 * @description Clears the list of paths the .ui loader searches when locating QtDesigner plug-ins.
	 */
	clearPluginPaths() {};
	/**
	 * @description Creates a new layout.
	 * @returns DzLayout The created layout (if any), otherwise null.
	 * @param {String} className - The name of the class to create an instance of.
	 * @param {QObject} parent - The object to parent the layout to.
	 * @param {String} name - The name to assign to the layout.
	 */
	createLayout(className, parent = 0, name = "") {};
	/**
	 * @description Creates a new widget.
	 * @returns DzWidget The created widget (if any), otherwise null.
	 * @param {String} className - The name of the class to create an instance of.
	 * @param {DzWidget} parent - The widget to parent the widget to.
	 * @param {String} name - The name to assign to the widget.
	 */
	createWidget(className, parent, name = "") {};
	/**
	 * @description Loads a QtDesigner form (*.ui) and creates a new widget.
	 * @returns DzWidget A widget parented to parent that holds the contents of the loaded form (if any), otherwise null.
	 * @param filename - The path of the .ui file to load.
	 * @param {DzWidget} parent - The widget to parent the contents of the file to.
	 */
	load(filePath, parent = 0) {};
	/**
	 * @returns Array A list of the paths the .ui loader searches when locating custom QtDesigner widget plug-ins.
	 */
	pluginPaths() {};
	/**
	 * @description Sets the base directory of the .ui loader. The .ui loader looks for other resources, such as icons and resource files, in paths relative to this directory.
	 * @param {String} dir - The path to use as the base directory for other resources.
	 */
	setWorkingDirectory(dir) {};
	/**
	 * @returns String The working directory of the .ui loader.
	 */
	workingDirectory() {};

}
/**
 * TODO:
 * Add detailed description.
 */
class DzUIPopUpWgt extends QWidget {
	/**
	 * @description Default Constructor. Creates a new ui popup widget.
	 * @param {QWidget} parent - The parent widget for the popup
	 */
	constructor(parent) {};
	/**
	 * @returns String The filename that was used to load the ui file.
	 */
	getFileName() {};
	/**
	 * @returns QWidget The current main QWidget.
	 */
	getUIWidget() {};
	/**
	 * @returns String The current working directory for the ui file.
	 */
	getWorkingDirectory() {};
	/**
	 * @description Sets the main widget for this popup from the ui file.
	 * @param {String} filename - The path to the ui file to show in the widget.
	 */
	loadUI(filename) {};
	/**
	 * @description Moves the popup to the point defined.
	 * @param {Point} newPos - The position to move the popup widget to
	 */
	movePopUp(newPos) {};
	/**
	 * @description Sets the widget for the ui popup widget.
	 * @param {QWidget} widget - The widget for the popup
	 */
	setWidget(widget) {};
	/**
	 * @param {String} str - The working directory for the ui loader.
	 */
	setWorkingDirectory(str) {};

}
/**
 * Encapsulates a widget loaded from a QtDesigner (*.ui) file. Do not create an instance of this class, request an instance via DzUiLoader.
 * See Also:
 */
class DzUiWidget extends DzWidget {

}
/**
 * There is only one undo stack in the application, which is created and owned by DzApp. This object is directly available using the Global.UndoStack variable.
 */
class DzUndoStack extends QObject {
	/**
	 * @description It is recommended that you use Global.acceptUndo() instead of calling this function directly to avoid leaving the undo stack open.
	 * @param {String} caption - A descriptive string to display for the undo list.
	 */
	accept(caption) {};
	/**
	 * @description It is recommended that you use Global.beginUndo() instead of calling this function directly to avoid leaving the undo stack open.
	 */
	beginHold() {};
	/**
	 * @description It is recommended that you use Global.cancelUndo() instead of calling this function directly to avoid leaving the undo stack open.
	 */
	cancel() {};
	/**
	 * @returns Boolean true if undo items can be pushed onto the stack, otherwise false.
	 */
	canPushItems() {};
	/**
	 * @returns Boolean true if redo() can be called, otherwise false.
	 */
	canRedo() {};
	/**
	 * @returns Boolean true if undo() can be called, otherwise false.
	 */
	canUndo() {};
	/**
	 * @description Clears the undo stack. This must be called at least whenever the list changes.
	 */
	clearAll() {};
	/**
	 * @description It is recommended that you use Global.dropUndo() instead of calling this function directly to avoid leaving the undo stack open.
	 */
	drop() {};
	/**
	 * @returns String If getCurrentIndex() + offset is within the [0, getNumItems() - 1] range, the caption assigned to the item at the index, otherwise an empty string.
	 * @since 4.9.3.61
	 * @param {Number} offset - The number of positions from the current position.
	 */
	getCaption(offset = 0) {};
	/**
	 * @returns Number The index of the current position in the stack.
	 * @since 4.9.3.61
	 * @attention Each time an item is added or removed from the stack, each time undo() or redo() is called, each time accept() or clearAll() is called, the current index is changed.
	 */
	getCurrentIndex() {};
	/**
	 * @returns Number The total number of items in the undo stack.
	 */
	getNumItems() {};
	/**
	 * @returns Number The total number of list items on the redo stack.
	 */
	getNumRedoItems() {};
	/**
	 * @returns Number The total number of list items on the undo stack.
	 */
	getNumUndoItems() {};
	/**
	 * @returns String The caption assigned to the redo item at the top of the stack.
	 */
	getRedoCaption() {};
	/**
	 * @returns String The caption assigned to the undo item at the top of the stack.
	 */
	getUndoCaption() {};
	/**
	 * @returns Boolean true if there are items on the undo stack, otherwise false.
	 */
	hasItems() {};
	/**
	 * @returns Boolean true if the undo stack is currently engaged in an undo/redo operation. This is useful for items that need to perform certain operations if the undo stack is not the one effecting data changes.
	 */
	isInUndoRedo() {};
	/**
	 * @description Disables items from being pushed onto the stack. This will be toggled by items to prevent undo operations from creating new undo items during an undo. Every call to lock() must be matched by a call to unlock().
	 */
	lock() {};
	/**
	 * @description Calls redo on the item at the top of the stack, then moves the pointer to the next item in the stack.
	 * @returns Boolean true on success, false on error or if the stack is empty.
	 */
	redo() {};
	/**
	 * @description Calls undo on the item at the top of the stack, then moves the pointer to the previous item in the stack.
	 * @returns Boolean true if successful, false on error or if the stack is empty.
	 */
	undo() {};
	/**
	 * @description Enables items to be pushed onto the stack after a lock() call.
	 */
	unlock() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the availability of the redo stack changes.
	 * @signature `"redoAvailable(bool)"`
	 * @event
	 */
	redoAvailable(yesNo) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the caption of the redo stack changes.
	 * @signature `"redoCaptionChanged(const QString&)"`
	 * @event
	 */
	redoCaptionChanged(caption) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the availability of the undo stack changes.
	 * @signature `"undoAvailable(bool)"`
	 * @event
	 */
	undoAvailable(yesNo) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the caption of the undo stack changes.
	 * @signature `"undoCaptionChanged(const QString&)"`
	 * @event
	 */
	undoCaptionChanged(caption) {};

}
/**
 * Represents a URI as it is used for the DSON file format. DzUri provides functionality in addition to standard URI/URL representations that is specific to the DSON file format.
 * DzUri provides for a traditional URI with path and fragment portions. In addition, it further divides the fragment into 1 to 3 parts for ease of use in the DSON file format. The following is an example of a URI as represented by the DzURI class:
 * /Converted/Victoria4/Victoria4.dsf.rCollar?rotation/x
 * The file path portion of this URI is: "/Converted/Victoria4/Victoria4.dsf"
 * The fragment portion of this URI is: "rCollar?rotation/x"
 * The fragment is further divided into an `identifier` and a property path. In this case the `identifier` is "rCollar" and the property path is "rotation/x".
 * All the sections of the fragment are optional, however, to be valid, each section in the fragment requires the preceding section to also be valid. So, the following URIs are valid:
 * And the following URIs are not valid:
 * Since:
 */
class DzUri extends Object {
	/**
	 * @description Default constructor. Creates an empty URI.
	 */
	constructor() {};
	/**
	 * @description Copy constructor. Creates a URI as a copy of another URI.
	 */
	constructor(uri) {};
	/**
	 * @description Constructor. Creates a URI from its string representation.
	 */
	constructor(uri) {};
	/**
	 * @description Holds the file path portion of the URI, if any.
	 * @type {String}
	 */
	filePath;
	/**
	 * @description Holds the file version of this URI, as a 64 bit unsigned integer. If not read from a file, this will be invalid.
	 * @type {DzVersion}
	 */
	fileVersion;
	/**
	 * @description Holds the identifier portion of this URI's fragment, if any.
	 * @type {String}
	 */
	id;
	/**
	 * @description Holds whether or not this URI was points to a cloud asset.
	 * @type {Boolean}
	 */
	isCloudFileUri;
	/**
	 * @description Holds the modifier path portion of the URI, if any.
	 * @type {Array}
	 */
	modifierPath;
	/**
	 * @description Holds the node path portion of this URI, if any.
	 * @type {Array}
	 */
	nodePath;
	/**
	 * @description Holds the property portion of the URI, if any.
	 * @type {Array}
	 */
	propertyPath;
	/**
	 * @description Holds the scheme type for this URI. Default is SchemeType.ID.
	 * @type {schemeType}
	 */
	schemeType;
	/**
	 * @description ENUM: TODO: Add description.
	 */
	NoPart;
	/**
	 * @description ENUM: TODO: Add description.
	 */
	Scheme;
	/**
	 * @description ENUM: TODO: Add description.
	 */
	NodePath;
	/**
	 * @description ENUM: TODO: Add description.
	 */
	ModifierPath;
	/**
	 * @description ENUM: TODO: Add description.
	 */
	PropertyPath;
	/**
	 * @description ENUM: TODO: Add description.
	 */
	IDPart;
	/**
	 * @description ENUM: TODO: Add description.
	 */
	FilePath;
	/**
	 * @description ENUM: TODO: Add description.
	 */
	AllParts;
	/**
	 * @description ENUM: TODO: Add description.
	 */
	NoScheme;
	/**
	 * @description ENUM: TODO: Add description.
	 */
	ID;
	/**
	 * @description ENUM: TODO: Add description.
	 */
	Name;
	/**
	 * @description Escapes any reserved characters in the in the given string.
	 * @returns String URI escape sequences.
	 * @param {String} str - The string to replace reserved characters in.
	 * @param {ByteArray} exclude - The list of characters to not be escaped from the resultant string
	 * @param {String} include - The list of characters to be escaped from the resultant string
	 */
	static escape(str, exclude, closer) {};
	/**
	 * @description Converts the string list into an escaped path string.
	 * @returns String URI path escape sequences.
	 * @param {Array} list - The string list to replace reserved characters in.
	 * @param {ByteArray} exclude - The list of characters to not be escaped from the resultant string
	 * @param {ByteArray} include - The list of characters to be escaped from the resultant string
	 */
	static escapedPath(list, exclude, include) {};
	/**
	 * @description Creates a new URI using the path of a local file.
	 * @returns DzUri
	 * @param {String} filePath - A local file path.
	 */
	static fromLocalFilename(filePath) {};
	/**
	 * @description Converts any escape sequences in the given string back to the corresponding character.
	 * @returns String The given string with any escape sequences replaced with the appropriate character.
	 * @param {String} str - The string to convert escape sequences in.
	 */
	static unescape(str) {};
	/**
	 * @description Converts the string into a string list of unescaped path pieces.
	 * @returns Array
	 * @param {String} path - The path to convert escape sequences in.
	 */
	static unescapePath(path) {};
	/**
	 * @description Clears the current values of this URI.
	 */
	clear() {};
	/**
	 * @description Clears internal cache of the last place toLocalFilename/toLocalFilenameByPreferredPath returned.
	 */
	clearFoundLocalFilename() {};
	/**
	 * @description Detaches this URI from any shared data. Makes the underlying data in this URI unique from all other URIs.
	 */
	detach() {};
	/**
	 * @returns Boolean true if this URI is empty, otherwise false.
	 */
	isEmpty() {};
	/**
	 * @returns Boolean true if this URI is null, otherwise false. A DzUri may be empty without being Null, but a Null uri is always empty.
	 * @since 4.9.2.12
	 */
	isNull() {};
	/**
	 * @description Sets the value of this URI from a string representation of the full URI.
	 * @param {String} uri - The string containing the full URI.
	 */
	setUri(uri) {};
	/**
	 * @description Attempts to convert the URI to the path of a local file.
	 * @returns String A string representation of the URI converted to a local file path.
	 * @param {String} preferredPath - The path to attempt resolving against before other local drive paths are checked.
	 */
	toLocalFilename(preferredPath) {};
	/**
	 * @description Attempts to convert the URI to the path of a local file.
	 * @returns String A string representation of the path of the URI converted to a local file path.
	 */
	toLocalFilename() {};
	/**
	 * @description Attempts to convert the URI to the path of a local file.
	 * @returns String A string representation of the URI converted to a file path. If the file represented by the URI exists, the string will be an absolute file path. If the file represented by the URI does not exist, the string will be a relative path.
	 * @since 4.9.1.26
	 * @param {String} preferredPath - The path to attempt resolving against before other local drive paths are checked.
	 */
	toPath(preferredPath = "") {};
	/**
	 * @returns String A string representation of the full URI.
	 */
	toString() {};
	/**
	 * @returns String A string representation of the URI containing the parts specified by flags.
	 */
	toString(flags) {};

}
/**
 * 
 */
class DzUserDrawStyle extends DzDrawStyle, DzRefCountedItem {
	/**
	 * @description Whether or not the user style is available for use (Read Only).
	 * @type {Boolean}
	 */
	isEnabled;
	/**
	 * @returns String A description/label for the DrawStyle; used for display in the viewport menu.
	 */
	getDescription() {};
	/**
	 * @returns Pixmap A representative icon for the DrawStyle; used for display in the viewport menu.
	 */
	getPixmap() {};

}
/**
 * TODO:
 * Add detailed description.
 */
class DzUVSet extends DzRefCountedItem, DzVertexMap {
	/**
	 * @description Default Constructor
	 */
	constructor() {};
	/**
	 * @description Holds the author of the file for this vertex map. (Read Only)
	 * @type {DzAuthor}
	 */
	assetAuthor;
	/**
	 * @description Holds the revision version of the asset file for this vertex map. (Read Only)
	 * @type {DzVersion}
	 */
	assetFileRevision;
	/**
	 * @description Holds the asset id for this vertex map.
	 * @type {String}
	 */
	assetId;
	/**
	 * @description Holds the modified date of the asset file for this vertex map. (Read Only)
	 * @type {Date}
	 */
	assetModifiedDate;
	/**
	 * @description Holds whether or not the asset for this UV set needs to be saved. (Read Only)
	 * @type {Boolean}
	 */
	assetNeedSave;
	/**
	 * @description Holds the URI of the asset source for this vertex map; only valid when the asset is in an embedded state - i.e. modified. (Read Only)
	 * @type {DzUri}
	 */
	assetSource;
	/**
	 * @description Holds the asset URI for this vertex map. (Read Only)
	 * @type {DzUri}
	 */
	assetUri;
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the UV set has been modified.
	 * @signature `"assetModified()"`
	 * @event
	 */
	assetModified() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted after the UV set has been saved.
	 * @signature `"assetWasSaved()"`
	 * @event
	 */
	assetWasSaved() {};

}
/**
 * An asset save filter for saving a UV Set Definition Support Asset in the DSON format.
 * See Also:
 */
class DzUVSupportAssetFilter extends DzAssetFileOutFilter {
	/**
	 * @description TODO:
	 * Add description.
	 */
	constructor() {};

}
/**
 * Provided as a convenience for creating a DzBoxLayout where the direction is automatically initially set to DzBoxLayout.TopToBottom.
 */
class DzVBoxLayout extends DzBoxLayout {
	/**
	 * @description Creates a vertical box layout that manages the children widgets of the given parent widget
	 */
	constructor(parent) {};
	/**
	 * @description Creates a vertical box layout as a sub-layout of the given layout
	 */
	constructor(parent) {};

}
/**
 * Provides a DzButtonGroup with a vertical layout.
 * Deprecated
 * Exists only to keep old code working. Do not use in new code. Use DzButtonGroup for state management and DzGroupBox in conjunction with DzVBoxLayout for visual representation instead.
 */
class DzVButtonGroup extends DzButtonGroup {
	/**
	 * @description Creates a button group as a child of the given parent widget
	 */
	constructor(parent) {};

}
/**
 * See Also:
 * Since:
 */
class DzVec2 extends Object {
	/**
	 * @description Default Constructor. Creates an uninitialized vector.
	 */
	constructor() {};
	/**
	 * @description Creates a vector by parsing a string.
	 * @param {String} vec - A string representation of the vector in the form "[ x, y ]"
	 */
	constructor(vec) {};
	/**
	 * @description Copy Constructor.
	 */
	constructor(vec) {};
	/**
	 * @description Copy Constructor.
	 */
	constructor(vec) {};
	/**
	 * @description Creates and initializes this vector with an array of 2 float values.
	 */
	constructor(vals) {};
	/**
	 * @description Creates and initializes this vector with 2 float values.
	 */
	constructor(x, y) {};
	/**
	 * @description Holds the x component of this vector.
	 * @type {Number}
	 */
	x;
	/**
	 * @description Holds the y component of this vector.
	 * @type {Number}
	 */
	y;
	/**
	 * @description Sets the value of each component to its respective absolute value.
	 */
	abs() {};
	/**
	 * @returns DzVec2 A vector that is the result of adding vec to this vector.
	 * @param {DzVec2} vec - The vector to add to this vector.
	 */
	add(vec) {};
	/**
	 * @returns Number The average of each component of this vector.
	 * @since 4.9.3.118
	 */
	average() {};
	/**
	 * @description Clamps each component of this vector.
	 * @since 4.9.3.118
	 * @param {Number} min - The minimum value.
	 * @param {Number} max - The maximum value.
	 */
	clamp(min, max) {};
	/**
	 * @returns DzVec2 A copy of this vector where each component has been clamped to min and max.
	 * @since 4.9.3.118
	 * @param {Number} min - The minimum value.
	 * @param {Number} max - The maximum value.
	 */
	clamped(min, max) {};
	/**
	 * @returns DzVec2 A copy of this vector where each component has been clamped to max.
	 * @since 4.9.3.118
	 * @param {Number} max - The maximum value.
	 */
	clampedMax(max) {};
	/**
	 * @returns DzVec2 A copy of this vector where each component has been clamped to min.
	 * @since 4.9.3.118
	 * @param {Number} min - The minimum value.
	 */
	clampedMin(min) {};
	/**
	 * @description Clamps the maximum value for each component of this vector.
	 * @since 4.9.3.118
	 * @param {Number} max - The maximum value.
	 */
	clampMax(max) {};
	/**
	 * @description Clamps the minimum value for each component of this vector.
	 * @since 4.9.3.118
	 * @param {Number} min - The minimum value.
	 */
	clampMin(min) {};
	/**
	 * @returns DzVec2 The cross product of this vector and another vector.
	 * @param {DzVec2} vec - The target vector.
	 */
	cross(vec) {};
	/**
	 * @returns DzVec2 A vector that is the result of dividing vec by this vector.
	 * @param {DzVec2} vec - The vector to divide by this vector.
	 */
	divide(vec) {};
	/**
	 * @returns Number The dot product of this vector and another vector.
	 * @param {DzVec2} vec - The target vector.
	 */
	dot(vec) {};
	/**
	 * @description Tests if this vector and another vector are considered equal, within a tolerance.
	 * @returns Boolean true if all components are within tolerance of the components of the given vector.
	 * @since 4.9.3.118
	 * @param {DzVec2} vec - The vector to compare this vector against.
	 * @param {Number} tolerance - The amount of deviation allowed.
	 */
	equals(vec, tolerance = 1e-6) {};
	/**
	 * @returns Number The angle between this vector and a target vector. The sign of the angle is such that, when applied, it will swing this vector to the target vector.
	 * @param {DzVec2} vec - The target vector.
	 */
	getAngleTo(vec) {};
	/**
	 * @returns DzVec2 A vector with components set to (1.0, 1.0).
	 * @since 4.14.1.27
	 */
	identity() {};
	/**
	 * @returns Number The length of this vector.
	 */
	length() {};
	/**
	 * @returns Number The length of this vector, squared.
	 */
	lengthSquared() {};
	/**
	 * @description Performs a linear interpolation between v1 and v2 based on the value of t.
	 * @returns DzVec2 v1 if t = 0.0. v2 if t = 1.0. Values outside the 0.0 ⇐ t ⇐ 1.0 range may also be used to return an extrapolated vector.
	 * @since 4.9.3.118
	 * @param {Number} t - The value to evaluate.
	 * @param {Number} vec1 - The first vector.
	 * @param {Number} vec2 - The second vector.
	 */
	linearInterp(t, v1, v2) {};
	/**
	 * @description Sets the components of this vector to (1.0, 1.0).
	 */
	makeIdentity() {};
	/**
	 * @description Sets the components of this vector to (0.0, 0.0).
	 */
	makeZero() {};
	/**
	 * @returns DzVec2 A copy of this vector where each component has been modulated by min and max.
	 * @since 4.9.3.118
	 * @param {Number} min - The minimum value.
	 * @param {Number} max - The maximum value.
	 */
	modulate(min, max) {};
	/**
	 * @description Modulates each component of this vector.
	 * @since 4.9.3.118
	 * @param {Number} min - The minimum value.
	 * @param {Number} max - The maximum value.
	 */
	modulo(min, max) {};
	/**
	 * @returns DzVec2 A vector that is the result of multiplying vec by this vector.
	 * @param {DzVec2} vec - The vector to multiply by this vector.
	 */
	multiply(vec) {};
	/**
	 * @description Negates each component of this vector.
	 */
	negate() {};
	/**
	 * @description Modifies this vector to be its unit length.
	 */
	normalize() {};
	/**
	 * @returns DzVec2 A copy of this vector that has been normalized.
	 */
	normalized() {};
	/**
	 * @description Sets this vector to have a specific length in the current direction.
	 * @param {Number} newLength - The length to set.
	 */
	setLength(length) {};
	/**
	 * @description Sets the value of each component to its respective squared value.
	 */
	square() {};
	/**
	 * @returns DzVec2 A vector that is the result of subtracting vec from this vector.
	 * @param {DzVec2} vec - The vector to subtract from this vector.
	 */
	subtract(vec) {};
	/**
	 * @returns String A string representation of this vector in the form "[ x, y ]".
	 */
	toString() {};
	/**
	 * @returns DzVec2 A vector with components set to (0.0, 0.0).
	 * @since 4.14.1.27
	 */
	zero() {};

}
/**
 * See Also:
 */
class DzVec3 extends Object {
	/**
	 * @description Default Constructor. Creates an uninitialized vector.
	 */
	constructor() {};
	/**
	 * @description Creates a vector by parsing a string.
	 * @param {String} vec - A string representation of the vector in the form "[ x, y, z ]"
	 */
	constructor(vec) {};
	/**
	 * @description Copy Constructor.
	 */
	constructor(vec) {};
	/**
	 * @description Creates and initializes this vector with an array of 3 float values.
	 * @since 4.6.4.88
	 */
	constructor(vals) {};
	/**
	 * @description Creates and initializes this vector with 3 float values.
	 */
	constructor(x, y, z) {};
	/**
	 * @description Holds the x component of this vector.
	 * @type {Number}
	 */
	x;
	/**
	 * @description Holds the y component of this vector.
	 * @type {Number}
	 */
	y;
	/**
	 * @description Holds the z component of this vector.
	 * @type {Number}
	 */
	z;
	/**
	 * @description Sets the value of each component to its respective absolute value.
	 */
	abs() {};
	/**
	 * @returns DzVec3 A vector that is the result of adding vec to this vector.
	 * @param {DzVec3} vec - The vector to add to this vector.
	 */
	add(vec) {};
	/**
	 * @returns Number The average of each component of this vector.
	 * @since 4.9.3.118
	 */
	average() {};
	/**
	 * @description Clamps each component of this vector.
	 * @since 4.9.3.118
	 * @param {Number} min - The minimum value.
	 * @param {Number} max - The maximum value.
	 */
	clamp(min, max) {};
	/**
	 * @returns DzVec3 A copy of this vector where each component has been clamped to min and max.
	 * @since 4.9.3.118
	 * @param {Number} min - The minimum value.
	 * @param {Number} max - The maximum value.
	 */
	clamped(min, max) {};
	/**
	 * @returns DzVec3 A copy of this vector where each component has been clamped to max.
	 * @since 4.9.3.118
	 * @param {Number} max - The maximum value.
	 */
	clampedMax(max) {};
	/**
	 * @returns DzVec3 A copy of this vector where each component has been clamped to min.
	 * @since 4.9.3.118
	 * @param {Number} min - The minimum value.
	 */
	clampedMin(min) {};
	/**
	 * @description Clamps the maximum value for each component of this vector.
	 * @since 4.9.3.118
	 * @param {Number} max - The maximum value.
	 */
	clampMax(max) {};
	/**
	 * @description Clamps the minimum value for each component of this vector.
	 * @since 4.9.3.118
	 * @param {Number} min - The minimum value.
	 */
	clampMin(min) {};
	/**
	 * @returns DzVec3 The cross product of this vector and another vector.
	 * @param {DzVec3} vec - The target vector.
	 */
	cross(vec) {};
	/**
	 * @returns DzVec3 A vector that is the result of dividing vec by this vector.
	 * @param {DzVec3} vec - The vector to divide by this vector.
	 */
	divide(vec) {};
	/**
	 * @returns Number The dot product of this vector and another vector.
	 * @param {DzVec3} vec - The target vector.
	 */
	dot(vec) {};
	/**
	 * @description Tests if this vector and another vector are considered equal, within a tolerance.
	 * @returns Boolean true if all components are within tolerance of the components of the given vector.
	 * @since 4.9.3.118
	 * @param {DzVec3} vec - The vector to compare this vector against.
	 * @param {Number} tolerance - The amount of deviation allowed.
	 */
	equals(vec, tolerance = 1e-6) {};
	/**
	 * @returns Number The angle between this vector and a target vector. The sign of the angle is such that, when applied, it will swing this vector to the target vector.
	 * @param {DzVec3} vec - The target vector.
	 */
	getAngleTo(vec) {};
	/**
	 * @returns DzQuat The rotation that will swing this vector to the target vector.
	 * @param {DzVec3} vec - The target vector.
	 */
	getRotationTo(vec) {};
	/**
	 * @returns DzVec3 A vector with components set to (1.0, 1.0, 1.0).
	 * @since 4.14.1.27
	 */
	identity() {};
	/**
	 * @returns Number The length of this vector.
	 */
	length() {};
	/**
	 * @returns Number The length of this vector, squared.
	 */
	lengthSquared() {};
	/**
	 * @description Performs a linear interpolation between v1 and v2 based on the value of t.
	 * @returns DzVec3 v1 if t = 0.0. v2 if t = 1.0. Values outside the 0.0 ⇐ t ⇐ 1.0 range may also be used to return an extrapolated vector.
	 * @since 4.9.3.118
	 * @param {Number} t - The value to evaluate.
	 * @param {Number} vec1 - The first vector.
	 * @param {Number} vec2 - The second vector.
	 */
	linearInterp(t, v1, v2) {};
	/**
	 * @description Sets the components of this vector to (1.0, 1.0, 1.0).
	 */
	makeIdentity() {};
	/**
	 * @description Sets the components of this vector to (0.0, 0.0, 0.0).
	 */
	makeZero() {};
	/**
	 * @returns DzVec3 A copy of this vector where each component has been modulated by min and max.
	 * @since 4.9.3.118
	 * @param {Number} min - The minimum value.
	 * @param {Number} max - The maximum value.
	 */
	modulate(min, max) {};
	/**
	 * @description Modulates each component of this vector.
	 * @since 4.9.3.118
	 * @param {Number} min - The minimum value.
	 * @param {Number} max - The maximum value.
	 */
	modulo(min, max) {};
	/**
	 * @returns DzVec3 A vector that is the result of multiplying vec by this vector.
	 * @param {DzVec3} vec - The vector to multiply by this vector.
	 */
	multiply(vec) {};
	/**
	 * @description Negates each component of this vector.
	 */
	negate() {};
	/**
	 * @description Modifies this vector to be its unit length.
	 */
	normalize() {};
	/**
	 * @returns DzVec3 A copy of this vector that has been normalized.
	 */
	normalized() {};
	/**
	 * @description Sets this vector to have a specific length in the current direction.
	 * @param {Number} newLength - The length to set.
	 */
	setLength(length) {};
	/**
	 * @description Sets the value of each component to its respective squared value.
	 */
	square() {};
	/**
	 * @returns DzVec3 A vector that is the result of subtracting vec from this vector.
	 * @param {DzVec3} vec - The vector to subtract from this vector.
	 */
	subtract(vec) {};
	/**
	 * @returns String A string representation of this vector in the form "[ x, y, z ]".
	 */
	toString() {};
	/**
	 * @returns DzVec3 A vector with components set to (0.0, 0.0, 0.0).
	 * @since 4.14.1.27
	 */
	zero() {};

}
/**
 * This class was added to DAZ Studio 4.x to make it easier to work with 64-bit version numbers and to facilitate compatibility with the old 32-bit version numbers.
 * Version numbers are typically displayed to the user as short version strings, e.g. 4.0, or long version strings, e.g. 4.0.0.0.
 * The version number consists of 4 components: The Major version number, the Minor version number, the Revision number, and the Build number. This is displayed in the following order: Major.Minor.Revision.Build.
 * In DAZ Studio, version numbers are typically stored as 64-bit unsigned integers with 16 bits for each number. This means that each number has a valid range of 0-65535. The most significant 16 bits are the Major version number, the next most significant 16 bits are the Minor version number, the next most significant 16 bits are the Revision number and the least significant 16 bits are the Build number. So, a packed version number in hexadecimal notation might look like: 0x1111222233334444 where 1111 is the Major version number, 2222 is the Minor version number 3333 is the Revision number and 4444 is the build number.
 * It is recommended that this class be used when possible to reduce confusion when dealing with version numbers in code.
 * This class provides methods for all of the numerical comparison operators (<, >, ⇐, >=, ==, !=) to make it easy to compare version numbers without directly using the packed value, or the individual components.
 * Since:
 */
class DzVersion extends Object {
	/**
	 * @description Default constructor. Creates an empty version number - i.e. 0.0.0.0
	 */
	constructor() {};
	/**
	 * @description Creates a version number by parsing a version string.
	 * @param {String} version - A string representation of the version number in the form "major.minor.revision.build"
	 */
	constructor(version) {};
	/**
	 * @description Creates a version number from the 4 16-bit components.
	 * @param {Number} major - The major version number.
	 * @param {Number} minor - The minor version number.
	 * @param {Number} revision - The revision number.
	 * @param {Number} build - The build number.
	 */
	constructor(major, minor, revision, build) {};
	/**
	 * @description Compatibility constructor. Creates a 64-bit version number from an old 32-bit version number.
	 * @param {Number} version - The 32-bit version number to convert.
	 */
	constructor(version) {};
	/**
	 * @description Copy constructor. Creates a version that is a copy of the given number.
	 * @param {DzVersion} version - The version number to create a copy of.
	 */
	constructor(version) {};
	/**
	 * @description Parses a version string into a version number.
	 * @returns DzVersion The version number that was created from the string.
	 * @param {String} versionStr - A string representation of the version number in the form "major.minor.revision.build"
	 */
	static fromString(versionStr) {};
	/**
	 * @returns Boolean true if the version numbers are the same, otherwise false.
	 * @param {DzVersion} version - The version to compare.
	 */
	equal(version) {};
	/**
	 * @returns Number The Build number.
	 */
	getBuildNumber() {};
	/**
	 * @returns String A string containing all four version numbers separated with a dot, e.g. "4.0.0.0"
	 */
	getLongVersionString() {};
	/**
	 * @returns Number The Major version number.
	 */
	getMajorVersion() {};
	/**
	 * @returns Number The Minor version number.
	 */
	getMinorVersion() {};
	/**
	 * @returns Number The Revision number.
	 */
	getRevisionNumber() {};
	/**
	 * @returns Number The 64-bit packed representation of the version number.
	 */
	getVersionNumber() {};
	/**
	 * @returns Number A 32-bit packed representation of the version number.
	 * @attention For backwards compatibility with old 32-bit version numbers - this function should only be used if absolutely necessary. It is highly recommended that all functionality be ported to the new 64-bit version number system. Using this function will result in inaccurate version numbering if one of the version numbers is greater than 255.
	 */
	getVersionNumber32() {};
	/**
	 * @returns String A string containing the Major and Minor version numbers separated with a dot, e.g. "4.0"
	 */
	getVersionString() {};
	/**
	 * @returns Boolean true if the version number is greater than (newer than) this version number, otherwise false.
	 * @param {DzVersion} version - The version to compare.
	 */
	greaterThan(version) {};
	/**
	 * @returns Boolean true if the version number is greater than or equal (newer than or the same as) this version number, otherwise false.
	 * @param {DzVersion} version - The version to compare.
	 */
	greaterThanOrEqual(version) {};
	/**
	 * @returns Boolean true if the version number has been initialized, otherwise false.
	 */
	isValid() {};
	/**
	 * @returns Boolean true if the version number is less than (older than) this version number, otherwise false.
	 * @param {DzVersion} version - The version to compare.
	 */
	lessThan(version) {};
	/**
	 * @returns Boolean true if the version number is less than or equal (older than or the same as) this version number, otherwise false.
	 * @param {DzVersion} version - The version to compare.
	 */
	lessThanOrEqual(version) {};
	/**
	 * @returns Boolean true if the version numbers are different, otherwise false.
	 * @param {DzVersion} version - The version to compare.
	 */
	notEqual(version) {};
	/**
	 * @description Sets the 64-bit version number from an old 32-bit version number.
	 * @param {Number} version - The old 32-bit version number.
	 */
	setVersionNumber(version) {};
	/**
	 * @description Sets the version number from the 4 16-bit components.
	 * @param {Number} major - The major version number.
	 * @param {Number} minor - The minor version number.
	 * @param {Number} revision - The revision number.
	 * @param {Number} build - The build number.
	 */
	setVersionNumber(major, minor, revision, build) {};
	/**
	 * @returns String A string representation of this version in the form "major.minor.revision.build".
	 */
	toString() {};

}
/**
 * 
 */
class DzVertexMap extends DzRefCountedItem, DzMap {
	/**
	 * @description Creates a new vertex map of the given type.
	 * @param {MapType} mapType - The type of data that will be stored in this map.
	 */
	constructor(mapType = FLOAT_MAP) {};
	/**
	 * @description Adds a discontinuous data item to the map.
	 * @param {Number} vertexIdx - The index of the vertex that this data is for.
	 * @param {Number} facetIdx - The index of the facet that this data is for.
	 * @param {Number} val - The data value to add to the map.
	 */
	addDctFloatValue(vertexIdx, facetIdx, val) {};
	/**
	 * @description Adds a discontinuous data item to the map.
	 * @param {Number} vertexIdx - The index of the vertex that this data is for.
	 * @param {Number} facetIdx - The index of the facet that this data is for.
	 * @param {Number} val - The data value to add to the map.
	 */
	addDctIntValue(vertexIdx, facetIdx, val) {};
	/**
	 * @description Adds a discontinuous data item to the map.
	 * @param {Number} vertexIdx - The index of the vertex that this data is for.
	 * @param {Number} facetIdx - The index of the facet that this data is for.
	 * @param {DzVec3} val - The data value to add to the map.
	 */
	addDctPnt2Vec(vertexIdx, facetIdx, val) {};
	/**
	 * @description Adds a discontinuous data item to the map.
	 * @param {Number} vertexIdx - The index of the vertex that this data is for.
	 * @param {Number} facetIdx - The index of the facet that this data is for.
	 * @param {DzVec3} val - The data value to add to the map.
	 */
	addDctPnt3Vec(vertexIdx, facetIdx, val) {};
	/**
	 * @description Adds a discontinuous data item to the map.
	 * @param {Number} vertexIdx - The index of the vertex that this data is for.
	 * @param {Number} facetIdx - The index of the facet that this data is for.
	 * @param {Number} val - The data value to add to the map.
	 */
	addDctShortValue(vertexIdx, facetIdx, val) {};
	/**
	 * @description Removes all the discontinuous values from the map
	 */
	clearDiscontinuousData() {};
	/**
	 * @returns Number The index of the data item in the map for the given facet vertex.
	 * @param {Number} vertexIdx - The index of the vertex to get data for
	 * @param {Number} facetIdx - The index of the facet to get data for
	 */
	getMapIndex(vertexIdx, facetIdx) {};
	/**
	 * @returns Number The number of discontinuous vertices in the map.
	 */
	getNumDiscontinuousVerts() {};
	/**
	 * @returns Number The number of vertices in the geometry that this vertex map is for.
	 * @since 4.9.3.137
	 */
	getTargetVertexCount() {};
	/**
	 * @description Pre-sizes the discontinuous data for better memory performance.
	 */
	preSizeDiscontinuous(disconCount) {};
	/**
	 * @description Sets the facet vertex to have discontinuous data which points to the given map index. This function will update existing data for the facet vertex, or will create new data if necessary.
	 * @param {Number} vertexIdx - The index of the vertex that this data is for.
	 * @param {Number} facetIdx - The index of the facet to set the discontinuous map index for.
	 * @param {Number} mapIdx - The index of the map item that this facet vertex will use.
	 */
	setDctIndex(vertexIdx, facetIdx, mapIdx) {};
	/**
	 * @description Sets the vertex count of this vertex map.
	 * @since 4.9.3.137
	 * @param {Number} vertCount - The number of vertices in the mesh that this map is for.
	 */
	setTargetVertexCount(vertCount) {};
	/**
	 * @description Reduces discontinuous data down to the minimum space required.
	 */
	squeezeDiscontinuous() {};
	/**
	 * @description Updates a discontinuous value for a given facet and oldIdx. This does not remove any values from the map, it may add a new discontinuous value if the newIdx and oldIdx have different map values.
	 */
	updateDctValue(oldIdx, newIdx, facetIdx) {};

}
/**
 * Provides a DzGroupBox with a vertical layout.
 */
class DzVGroupBox extends DzGroupBox {
	/**
	 * @description Creates a group box as a child of the given parent widget.
	 * @param {DzWidget} parent - The widget parent for the group box.
	 */
	constructor(parent) {};

}
/**
 * TODO:
 * Add detailed description.
 */
class DzVideoClip extends QObject {
	/**
	 * @description Default Constructor.
	 */
	constructor() {};
	/**
	 * @description This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.
	 */
	constructor(width, height, rate) {};
	/**
	 * @description Adds a frame to the end of the clip
	 * @param {Image} img - Image to add as a frame.
	 */
	appendFrame(img) {};
	/**
	 * @description Adds a frame to the end of the clip
	 * @param filename - Image file to add as a frame.
	 */
	appendFrameFile(imgFilename) {};
	/**
	 * @returns DzAudioClip The audio (if any) that is associated with the video.
	 */
	getAudio() {};
	/**
	 * @returns DzTime The time offset from the beginning of the video that the audio clip begins. This can be negative (the beginning of the video starts part way into the audio clip).
	 */
	getAudioStartTime() {};
	/**
	 * @returns Image The i'th frame in still image form
	 */
	getFrame(i) {};
	/**
	 * @returns Number The number of frames per second for the clip
	 */
	getFrameRate() {};
	/**
	 * @returns Number The height of the video clip.
	 */
	getHeight() {};
	/**
	 * @returns Number The number of frames in the video clip.
	 */
	getNumFrames() {};
	/**
	 * @returns Number The width of the video clip.
	 */
	getWidth() {};
	/**
	 * @description Set the audio that accompanies the video clip
	 * @param {DzAudioClip} audio - The audio clip for the video.
	 * @param {DzTime} audioStartTime - The time offset from the beginning of the video that the audio clip begins. This can be negative (the beginning of the video starts part way into the audio clip).
	 */
	setAudio(audio, audioStartTime) {};
	/**
	 * @description Set the frame rate of the clip
	 * @param {Number} rate - The number of frames per second for the clip
	 */
	setFrameRate(rate) {};

}
/**
 * TODO:
 * Add detailed description.
 */
class DzVideoExporter extends DzFileIO {
	/**
	 * @returns String A description of the exporter that can be placed in a file type selection combo box (e.g. "AVI Format")
	 */
	getDescription() {};
	/**
	 * @returns String The extension that this exporter will force filenames to (excluding the preceeding '.').
	 */
	getExtension() {};
	/**
	 * @returns Boolean true if this exporter writes to a 'real' file. Derived classes should override this to indicate whether or not they are writing out to a real file. Exporters can, if they want to, write to entities other than files (e.g. sockets, pipes, etc.)
	 */
	isFileExporter() {};
	/**
	 * @description Writes the file.
	 * @returns DzError DZ_NO_ERROR on success, otherwise an error code.
	 * @param {String} filename - The name of the file to save the video to.
	 * @param {DzVideoClip} clip - Video clip to save to file.
	 */
	saveClip(filename, clip) {};
	/**
	 * @description Writes the file.
	 * @returns DzError DZ_NO_ERROR on success, otherwise an error code.
	 * @param {String} filename - The name of the file to save the video to.
	 * @param {DzVideoClip} clip - Video clip to save to file.
	 */
	saveClip(filename, clip, options) {};

}
/**
 * A DzView is a widget that consists of a toolbar (for providing access to associated camera controls) and a veiw selection menu button (for selecting which camera to view through), that can be displayed to the user within a DzViewport.
 */
class DzView extends QWidget {
	/**
	 * @returns String A user-readable description of the view.
	 */
	getDescription() {};
	/**
	 * @returns Pixmap A pixmap icon to represent the view.
	 */
	getIcon() {};

}
/**
 * A DzViewport is a widget that consists of a Dz3DViewport, an optional alternate DzView, and an indicator of the viewport's active state (for cases where multiple instances are displayed to the user at the same time).
 */
class DzViewport extends QWidget {
	/**
	 * @returns Dz3DViewport The embedded 3D viewport that this viewport encapsulates.
	 */
	get3DViewport() {};
	/**
	 * @returns DzViewportMgr The manager of this viewport.
	 */
	getManager() {};
	/**
	 * @returns DzView The alternate view currently being displayed in the viewport; NULL if an alternate view is not displayed (i.e., the 3D viewport is active).
	 */
	getView() {};
	/**
	 * @returns Boolean true if this viewport is custom; otherwise false.
	 * @since 4.7.1.104
	 */
	isCustom() {};
	/**
	 * @description Sets the alternate view for the viewport; this replaces the 3D viewport while active. Pass in NULL to clear the alternate view and restore the 3D viewport.
	 * @param {DzView} view - The view to display in the viewport.
	 */
	setView(view) {};
	/**
	 * @description Sets the visible state of the alternate view for this viewport, if an alternate view has been set.
	 * @param {Boolean} onOff - If true, the alternate view (if any) is displayed.
	 */
	setViewVisible(onOff) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the dimensions of the viewport has changed.
	 * @signature `"dimensionsChanged()"`
	 * @event
	 */
	dimensionsChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the dimensions of the encapsulated 3D viewport has changed.
	 * @signature `"view3dCurrentDimensionsChanged()"`
	 * @event
	 */
	view3dCurrentDimensionsChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the view has changed (e.g., when switched between the 3D viewport and an alternate view).
	 * @signature `"viewChanged(DzView*)"`
	 * @event
	 */
	viewChanged(view) {};

}
/**
 * Responsible for the management of viewports, general options related to how viewports (or the items within them) are drawn or operated on, and the tools that operate within the context of a viewport.
 * There is only one instance of this manager in an application. This instance is created and owned by DzMainWindow. Request the instance via DzMainWindow.getViewportMgr().
 * See Also:
 */
class DzViewportMgr extends QWidget {
	/**
	 * @description ENUM: No visible viewports.
	 */
	NO_PANES;
	/**
	 * @description ENUM: A single visible viewport.
	 */
	SINGLE_PANE;
	/**
	 * @description ENUM: 2 visible viewports; split the view area into right and left.
	 */
	LEFT_RIGHT;
	/**
	 * @description ENUM: 2 visible viewports; split the view area into top and bottom.
	 */
	TOP_BOTTOM;
	/**
	 * @description ENUM: 3 visible viewports; 2 on the left side and 1 on the right.
	 */
	LEFT2_RIGHT;
	/**
	 * @description ENUM: 4 visible viewports; 3 on the left side and 1 on the right.
	 */
	LEFT3_RIGHT;
	/**
	 * @description ENUM: 3 visible viewports; 2 on the right side and 1 on the left.
	 */
	LEFT_RIGHT2;
	/**
	 * @description ENUM: 4 visible viewports; 3 on the right side and 1 on the left.
	 */
	LEFT_RIGHT3;
	/**
	 * @description ENUM: 3 visible viewports; 2 on the top side and 1 on the bottom.
	 */
	TOP2_BOTTOM;
	/**
	 * @description ENUM: 4 visible viewports; 3 on the top side and 1 on the bottom.
	 */
	TOP3_BOTTOM;
	/**
	 * @description ENUM: 3 visible viewports; 2 on the bottom side and 1 on the top.
	 */
	TOP_BOTTOM2;
	/**
	 * @description ENUM: 4 visible viewports; 3 on the bottom side and 1 on the top.
	 */
	TOP_BOTTOM3;
	/**
	 * @description ENUM: 4 visible viewports; one in each corner.
	 */
	FOUR_PANE;
	/**
	 * @description ENUM: Total number of layouts.
	 */
	NUM_LAYOUTS;
	/**
	 * @description ENUM: Clicking a node in the viewport causes that node to become selected (or deselected).
	 */
	Node;
	/**
	 * @description ENUM: Clicking any node of a figure in the viewport, which does not already have a node selected, causes the skeleton for that node to become selected. Each subsequent click on a node in the same figure causes the clicked node to become selected (or deselected). All other node types behave the same as described in Node.
	 */
	SkeletonThenNode;
	/**
	 * @description ENUM: Clicking any node of a figure in the viewport causes the skeleton for that node to become selected (or deselected). All other node types behave the same as described in Node.
	 */
	Skeleton;
	/**
	 * @description ENUM: Quick drawing is disabled; objects will be drawn using the current DrawStyle for the viewport.
	 */
	QDOff;
	/**
	 * @description ENUM: Objects will be drawn using a "Wire Bounding Box" representation.
	 */
	QDWire;
	/**
	 * @description ENUM: Objects will be drawn using a "Solid Bounding Box" representation.
	 */
	QDSmooth;
	/**
	 * @description ENUM: Clicking a region in the viewport causes interaction with that region in a hierarchical manner; each click provides access to sibling and immediate child regions of the region that was clicked; double-click ascends to the root region.
	 */
	Nested;
	/**
	 * @description ENUM: Clicking a region in the viewport causes interaction with that region directly; region hierarchy is ignored; double-click ascends to the root region.
	 */
	Flat;
	/**
	 * @description ENUM: No accelerator.
	 */
	NoAccel;
	/**
	 * @description ENUM: The left button on the mouse is pressed.
	 */
	LeftClick;
	/**
	 * @description ENUM: The right button on the mouse is pressed.
	 */
	RightClick;
	/**
	 * @description ENUM: The middle button on the mouse is pressed.
	 */
	MidClick;
	/**
	 * @description ENUM: The [Alt] key on the keyboard is pressed and the left button on the mouse is pressed.
	 */
	AltLeftClick;
	/**
	 * @description ENUM: The [Alt] key on the keyboard is pressed and the right button on the mouse is pressed.
	 */
	AltRightClick;
	/**
	 * @description ENUM: The [Alt] key on the keyboard is pressed and the middle button on the mouse is pressed.
	 */
	AltMidClick;
	/**
	 * @description ENUM: The [Ctrl] key on the keyboard is pressed and the left button on the mouse is pressed.
	 */
	CtrlLeftClick;
	/**
	 * @description ENUM: The [Ctrl] key on the keyboard is pressed and the right button on the mouse is pressed.
	 */
	CtrlRightClick;
	/**
	 * @description ENUM: The [Ctrl] key on the keyboard is pressed and the middle button on the mouse is pressed.
	 */
	CtrlMidClick;
	/**
	 * @description ENUM: The [Shift] key on the keyboard is pressed and the left button on the mouse is pressed.
	 */
	ShiftLeftClick;
	/**
	 * @description ENUM: The [Shift] key on the keyboard is pressed and the right button on the mouse is pressed.
	 */
	ShiftRightClick;
	/**
	 * @description ENUM: The [Shift] key on the keyboard is pressed and the middle button on the mouse is pressed.
	 */
	ShiftMidClick;
	/**
	 * @description ENUM: The [Ctrl] and [Alt] keys on the keyboard are pressed and the left button on the mouse is pressed.
	 */
	CtrlAltLeftClick;
	/**
	 * @description ENUM: The [Ctrl] and [Alt] keys on the keyboard are pressed and the right button on the mouse is pressed.
	 */
	CtrlAltRightClick;
	/**
	 * @description ENUM: The [Ctrl] and [Alt] keys on the keyboard are pressed and the middle button on the mouse is pressed.
	 */
	CtrlAltMidClick;
	/**
	 * @description ENUM: The [Ctrl] and [Shift] keys on the keyboard are pressed and the left button on the mouse is pressed.
	 */
	CtrlShiftLeftClick;
	/**
	 * @description ENUM: The [Ctrl] and [Shift] keys on the keyboard are pressed and the right button on the mouse is pressed.
	 */
	CtrlShiftRightClick;
	/**
	 * @description ENUM: The [Ctrl] and [Shift] keys on the keyboard are pressed and the middle button on the mouse is pressed.
	 */
	CtrlShiftMidClick;
	/**
	 * @description ENUM: The [Alt] and [Shift] keys on the keyboard are pressed and the left button on the mouse is pressed.
	 */
	AltShiftLeftClick;
	/**
	 * @description ENUM: The [Alt] and [Shift] keys on the keyboard are pressed and the right button on the mouse is pressed.
	 */
	AltShiftRightClick;
	/**
	 * @description ENUM: The [Alt] and [Shift] keys on the keyboard are pressed and the middle button on the mouse is pressed.
	 */
	AltShiftMidClick;
	/**
	 * @description ENUM: The [Ctrl], [Alt] and [Shift] keys on the keyboard are pressed and the left button on the mouse is pressed.
	 */
	CtrlAltShiftLeftClick;
	/**
	 * @description ENUM: The [Ctrl], [Alt] and [Shift] keys on the keyboard are pressed and the right button on the mouse is pressed.
	 */
	CtrlAltShiftRightClick;
	/**
	 * @description ENUM: The [Ctrl], [Alt] and [Shift] keys on the keyboard are pressed and the middle button on the mouse is pressed.
	 */
	CtrlAltShiftMidClick;
	/**
	 * @description ENUM: No modifier is pressed.
	 */
	NoModifier;
	/**
	 * @description ENUM: The [Alt] key on the keyboard is pressed.
	 */
	Alt;
	/**
	 * @description ENUM: The [Shift] key on the keyboard is pressed.
	 */
	Shift;
	/**
	 * @description ENUM: The [Ctrl] key on the keyboard is pressed.
	 */
	Ctrl;
	/**
	 * @description ENUM: The [Ctrl] and [Alt] keys on the keyboard are pressed.
	 */
	CtrlAlt;
	/**
	 * @description ENUM: The [Ctrl] and [Shift] keys on the keyboard are pressed.
	 */
	CtrlShift;
	/**
	 * @description ENUM: The [Ctrl], [Alt] and [Shift] keys on the keyboard are pressed.
	 */
	CtrlAltShift;
	/**
	 * @description ENUM: The [Shift] and [Alt] keys on the keyboard are pressed.
	 */
	ShiftAlt;
	/**
	 * @description ENUM: Do nothing.
	 */
	NoOperation;
	/**
	 * @description ENUM: Rotate the camera about its focal point.
	 */
	OrbitCamera;
	/**
	 * @description ENUM: Rotate the camera about its origin.
	 */
	RotateCamera;
	/**
	 * @description ENUM: Translate the camera on its relative XY plane; i.e., left-right, up-down.
	 */
	PanCamera;
	/**
	 * @description ENUM: Translate the camera on its relative XZ plane; i.e., left-right, toward-away.
	 */
	DollyCamera;
	/**
	 * @description ENUM: Rotate the camera about its relative Z axis; i.e., tilt.
	 */
	BankCamera;
	/**
	 * @description ENUM: Translate the camera on its relative XZ plane; i.e., left-right, toward-away.
	 */
	ZoomDCamera;
	/**
	 * @description ENUM: Adjust the focal distance and/or translate the camera on its relative X axis.
	 */
	ZoomFCamera;
	/**
	 * @returns Number The number of user selectable DrawStyles.
	 */
	static getNumUserDrawStyles() {};
	/**
	 * @returns Number The number of available views.
	 */
	static getNumViews() {};
	/**
	 * @returns DzUserDrawStyle A new instance of the DrawStyle at the given index (if valid), otherwise null.
	 * @param {Number} i - The index of the DrawStyle to get.
	 */
	static getUserDrawStyle(i) {};
	/**
	 * @returns DzView A new instance of the view at the given index (if valid), otherwise null.
	 * @param {Number} i - The index of the view to get.
	 */
	static getView(i) {};
	/**
	 * @returns String The description for the view at the given index (if valid), otherwise an empty string.
	 * @param {Number} i - The index of the view to get the description of.
	 */
	static getViewDescription(i) {};
	/**
	 * @description Sets the next tool in the list after the currently active tool to be the currently active tool.
	 */
	activateNextTool() {};
	/**
	 * @description Sets the tool in the list before the currently active tool to be the currently active tool.
	 */
	activatePrevTool() {};
	/**
	 * @description Causes the color of each viewport to be set to their respective values, if the color is defined in the current style.
	 */
	applyStyleColors() {};
	/**
	 * @description Clears any view tool that was temporarily overriding the active view tool.
	 * @since 4.8.0.10
	 */
	clearOverrideTool() {};
	/**
	 * @returns DzViewTool The tool with the given class name (if any), otherwise null.
	 * @param {String} className - The classname of the tool to find.
	 */
	findTool(className) {};
	/**
	 * @returns DzUserDrawStyle A new instance of the DrawStyle found (if any), otherwise null.
	 * @param {String} description - The description of the DrawStyle to find.
	 */
	findUserDrawStyle(description) {};
	/**
	 * @returns DzViewTool The active view tool.
	 */
	getActiveTool() {};
	/**
	 * @returns DzViewport The currently active viewport.
	 */
	getActiveViewport() {};
	/**
	 * @returns DzViewport The custom viewport at the given index (if valid), otherwise null.
	 * @since 4.7.1.104
	 */
	getCustomViewport(i) {};
	/**
	 * @returns DzViewport The default viewport at the given index (if valid), otherwise null.
	 * @since 4.7.1.104
	 */
	getDefaultViewport(i) {};
	/**
	 * @returns Array A list of elements with properites that control the DrawStyle for the active 3D viewport.
	 * @since 4.11.0.44
	 */
	getDrawSettingsElementList() {};
	/**
	 * @returns Boolean true if mouse wheel response in the viewports is currently inverted, otherwise false.
	 */
	getInvertMouseWheel() {};
	/**
	 * @returns Layout Current view layout.
	 */
	getLayout() {};
	/**
	 * @returns ViewMouseBtnAccelerator The mouse button accelerator for the given operation (if any), otherwise NoAccel.
	 * @param {ViewOperation} operation - The operation to get the mouse button accelerator for.
	 */
	getMouseBtnAccelerator(operation) {};
	/**
	 * @returns ViewMouseBtnAccelerator The mouse button accelerator for the given mouse button and keyboard modifier states (if any), otherwise NoAccel.
	 * @param {Qt.KeyboardModifiers} modifiers - The keyboard modifiers to include.
	 */
	getMouseBtnAccelerator(button, modifiers) {};
	/**
	 * @returns ViewMouseBtnAccelerator The mouse button accelerator for the given mouse button and keyboard modifier states (if any), otherwise NoAccel.
	 * @param {Number} mouseBtn - If 0, the left mouse button. If 1, the middle mouse button. If 2, the right mouse button.
	 * @param {Boolean} ctrl - If true, the Ctrl key will be included.
	 * @param {Boolean} alt - If true, the Alt key will be included.
	 * @param {Boolean} shift - If true, the Shift key will be included.
	 */
	getMouseBtnAccelerator(mouseBtn, ctrl, alt, shift) {};
	/**
	 * @returns ViewMouseBtnAccelerator The mouse button accelerator for the given string (if any), otherwise NoAccel.
	 * @param {String} str - The string to convert.
	 */
	getMouseBtnAccelerator(str) {};
	/**
	 * @returns String A string representation of the given mouse button accelerator (if any), otherwise an empty string.
	 * @param {ViewMouseBtnAccelerator} accel - The mouse button accelerator to get the string for.
	 */
	getMouseBtnAcceleratorString(accel) {};
	/**
	 * @returns String A string representation of the mouse button accelerator for the given operation (if any), otherwise an empty string.
	 * @param {ViewOperation} operation - The operation to get the string for.
	 */
	getMouseBtnAcceleratorString(operation) {};
	/**
	 * @returns Number The sensitivity of the mouse move response in the viewports.
	 * @since 4.11.0.159
	 */
	getMouseDragScalar() {};
	/**
	 * @returns ViewMouseModifier The mouse modifier for the given string (if any), otherwise NoModifier.
	 * @param {String} str - The string to convert.
	 */
	getMouseModifier(str) {};
	/**
	 * @returns ViewMouseModifier The mouse modifier for the given keyboard modifier states (if any), otherwise NoModifier.
	 * @param {Qt.KeyboardModifiers} modifiers - The keyboard modifiers to include.
	 */
	getMouseModifier(modifiers) {};
	/**
	 * @returns ViewMouseModifier The mouse modifier for the given keyboard modifier states (if any), otherwise NoModifier.
	 * @param {Boolean} ctrl - If true, the Ctrl key will be included.
	 * @param {Boolean} alt - If true, the Alt key will be included.
	 * @param {Boolean} shift - If true, the Shift key will be included.
	 */
	getMouseModifier(ctrl, alt, shift) {};
	/**
	 * @returns String A string representation of the given mouse modifier (if any), otherwise an empty string.
	 * @param {ViewMouseModifier} accel - The mouse modifier to get the string for.
	 */
	getMouseModifierString(accel) {};
	/**
	 * @returns Number The sensitivity of the mouse wheel response in the viewports.
	 * @since 4.11.0.159
	 */
	getMouseWheelScalar() {};
	/**
	 * @returns Number The node click mode for pick tools.
	 */
	getNodeClickMode() {};
	/**
	 * @returns Number The number of custom viewports.
	 * @since 4.7.1.104
	 */
	getNumCustomViewports() {};
	/**
	 * @returns Number The number of default (non-custom) viewports.
	 * @since 4.7.1.104
	 */
	getNumDefaultViewports() {};
	/**
	 * @returns Number The number of view tools.
	 */
	getNumTools() {};
	/**
	 * @returns Number The number of view cameras.
	 */
	getNumViewCameras() {};
	/**
	 * @returns Number The total number of viewports.
	 */
	getNumViewports() {};
	/**
	 * @returns Number The number of custom viewports currently showing.
	 * @since 4.7.1.104
	 */
	getNumVisibleCustomViewports() {};
	/**
	 * @returns Number The number of default viewports currently showing.
	 * @since 4.7.1.104
	 */
	getNumVisibleDefaultViewports() {};
	/**
	 * @returns Number The total number of viewports currently showing.
	 */
	getNumVisibleViewports() {};
	/**
	 * @returns ViewOperation The operation for the given accelerator (if any), otherwise NoOperation.
	 * @param {ViewMouseBtnAccelerator} accel - The accelerator to get the operation for.
	 */
	getOperation(accel) {};
	/**
	 * @returns DzViewTool The override tool (if any), otherwise NULL.
	 * @since 4.8.0.10
	 * @attention An override tool is a view tool that temporarily overrides the active view tool.
	 */
	getOverrideTool() {};
	/**
	 * @returns Boolean Whether or not to propagate a background color change to all viewports.
	 */
	getPropagateBackgroundColor() {};
	/**
	 * @returns QDMode The current quick draw mode.
	 * @since 4.11.0.159
	 */
	getQuickDrawMode() {};
	/**
	 * @returns Number The region click mode for pick tools.
	 */
	getRegionClickMode() {};
	/**
	 * @returns DzViewTool The view tool at the given index (if valid), otherwise null.
	 */
	getTool(i) {};
	/**
	 * @returns Boolean true if illumination calculations for each pixel in the viewport is enabled, otherwise false.
	 */
	getUsePerPixelLighting() {};
	/**
	 * @returns DzCamera The View (non-animatable) camera of the given type.
	 */
	getViewCamera(type) {};
	/**
	 * @returns DzCamera The View (non-animatable) camera at the given index.
	 */
	getViewCamera(i) {};
	/**
	 * @returns DzViewport The viewport at the given index.
	 * @attention An index outside the default range (i.e., getNumDefaultViewports() - 1) will overflow to getCustomViewport().
	 */
	getViewport(i) {};
	/**
	 * @returns Boolean true if manipulation binding will be used on TriAx weighted figures during manipulation, otherwise false.
	 * @since 4.11.0.159
	 */
	isManipulationBindingOn() {};
	/**
	 * @returns Boolean true if SubDivision Manipulation is enabled, otherwise false..
	 * @since 4.11.0.159
	 */
	isSubDManipulationOn() {};
	/**
	 * @description A convenience method that forces a repaint of the currently active 3D viewport.
	 */
	repaintActive3DViewport() {};
	/**
	 * @description Resets all the view cameras to their defaults.
	 */
	resetViewCameras() {};
	/**
	 * @description Sets the currently active 3D tool.
	 * @param {Number} i - The index of the tool to set as being the active tool.
	 */
	setActiveTool(i) {};
	/**
	 * @description Sets the currently active 3D tool.
	 * @param {DzViewTool} tool - The tool to set as being the active tool.
	 */
	setActiveTool(tool) {};
	/**
	 * @description Set the active DzViewport. The given DzViewport must already be attached as an interface to this Scene.
	 * @param {DzViewport} activeView - The viewport to set.
	 */
	setActiveViewport(activeView) {};
	/**
	 * @description Sets whether mouse wheel response in the viewports is inverted.
	 * @param {Boolean} onOff - If true, the mouse wheel will be inverted in the viewports. If false, mouse wheel response in the viewports will be standard.
	 */
	setInvertMouseWheel(onOff) {};
	/**
	 * @description Set the current layout. If we are in single pane mode, the new layout will take effect after single pane mode is switched off.
	 * @param {Layout} val - The layout to set.
	 */
	setLayout(val) {};
	/**
	 * @description Sets whether or not manipulation binding will be used on TriAx weighted figures during manipulation.
	 * @since 4.11.0.159
	 * @param {Boolean} onOff - If true, manipulation binding will be used on TriAx weighted figures during manipulation.
	 */
	setManipulationBindingOn(onOff) {};
	/**
	 * @description Sets the mouse button accelerator for the given view operation.
	 * @param {ViewMouseBtnAccelerator} operation - The view operation to set the accelerator for.
	 * @param {ViewMouseBtnAccelerator} accel - The accelerator to set for the view operation.
	 */
	setMouseBtnAccelerator(operation, accel) {};
	/**
	 * @description Sets the sensitivity of the mouse move response in the viewports.
	 * @since 4.11.0.159
	 * @param {Number} val - The scalar value to set.
	 */
	setMouseDragScalar(val) {};
	/**
	 * @description Sets the sensitivity of the mouse wheel response in the viewports.
	 * @since 4.11.0.159
	 * @param {Number} val - The scalar value to set.
	 */
	setMouseWheelScalar(val) {};
	/**
	 * @description Set the click mode for node selection tools.
	 * @param {Number} mode - The mode to set.
	 */
	setNodeClickMode(mode) {};
	/**
	 * @description Sets a temporary view tool that overrides the active view tool.
	 * @since 4.8.0.10
	 * @param {DzViewTool} viewTool - The view tool to override with.
	 */
	setOverrideTool(viewTool) {};
	/**
	 * @description Set whether or not a background color change of a single viewport should be propagated to the other viewports.
	 * @param {Boolean} onOff - If true, setting the background color of one veiwport sets the background color for all viewports.
	 */
	setPropagateBackgroundColor(onOff) {};
	/**
	 * @description Sets the current quick draw mode.
	 * @since 4.11.0.159
	 */
	setQuickDrawMode(mode) {};
	/**
	 * @description Set the click mode for region selection tools.
	 * @param {Number} mode - The mode to set.
	 */
	setRegionClickMode(mode) {};
	/**
	 * @description Sets whether or not SubD models are subdivided during manipulation.
	 * @since 4.11.0.159
	 * @param {Boolean} onOff - If true, SubD models are subdivided during manipulation.
	 */
	setSubDManipulationOn(onOff) {};
	/**
	 * @description Sets whether or not to enable illumination calculations for each pixel in the viewport.
	 * @param {Boolean} onOff - If true, per pixel lighting is enabled.
	 */
	setUsePerPixelLighting(onOff) {};
	/**
	 * @description Sets the ratios that are used to layout the viewports inside the view area. Each value is a percentage of the available area that will be allocated to the given viewport(s). The values passed in are clamped to valid ranges before applying them. The values should be specified in decimal notation - i.e. 0.0 is 0%, 0.5 is 50%, and 1.0 is 100%. The minimum percentage of the area allocated to any viewport on any axis is 20% (0.2). Therefore, any values that are below this value will be increased to this value, and any values that would result in a remainder less than this value will be decreased.
	 * @param {Number} hSingle - The percentage of the height taken by the top viewport(s) when the area has a single horizontal division.
	 * @param {Number} h1 - The percentage of the height taken by the top view port when the area has two horizontal divisions.
	 * @param {Number} h2 - The percentage of the height taken by the center view port when the area has two horizontal divisions.
	 * @param {Number} vSingle - The percentage of the width taken by the left viewport(s) when the area has a single vertical division.
	 * @param {Number} v1 - The percentage of the width taken by the left view port when the area has two vertical divisions.
	 * @param {Number} v2 - The percentage of the width taken by the center view port when the area has two vertical divisions.
	 */
	setViewRatios(hSingle, h1, h2, vSingle, v1, v2) {};
	/**
	 * @returns Boolean true if accel is not already assigned, otherwise false.
	 * @param {ViewMouseBtnAccelerator} accel - The accelerator to test.
	 */
	validateMouseBtnAccelerator(accel) {};
	/**
	 * @returns Boolean Always returns true; currently no wheel events on the viewport to conflict with.
	 * @param {ViewMouseModifier} accel - The accelerator to test.
	 */
	validateMouseWheelAccelerator(accel) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when an accelerator (keyboard shortcut) for navigating the scene changes.
	 * @signature `"accelChanged(ViewOperation,ViewMouseBtnAccelerator)"`
	 * @event
	 */
	accelChanged(operation, accel) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when an accelerator (keyboard shortcut) for navigating the scene changes.
	 * @signature `"acceleratorsChanged()"`
	 * @event
	 */
	acceleratorsChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the dimensions of the active 3D viewport changes.
	 * @signature `"acitve3DViewCurrentDimensionsChanged()"`
	 * @event
	 */
	acitve3DViewCurrentDimensionsChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the drawn data for the active tool changes.
	 * @signature `"activeToolDrawnDataChanged()"`
	 * @event
	 */
	activeToolDrawnDataChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the active tool changes.
	 * @signature `"activeToolSwitched()"`
	 * @event
	 */
	activeToolSwitched() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the active view changes size.
	 * @signature `"activeViewResized()"`
	 * @event
	 */
	activeViewResized() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the active view changes.
	 * @signature `"activeViewSwitched()"`
	 * @event
	 */
	activeViewSwitched() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the active viewport is about to display a context menu. Other objects can connect to this signal to add custom items to the menu that is displayed to the user.
	 * @signature `"contextMenuAboutToShow(DzMenu*,Dz3DViewport*,QPoint)"`
	 * @event
	 */
	contextMenuAboutToShow(menu, view, pos) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the list of elements that hold properties for controlling a DrawStyle changes; e.g., when the active DrawStyle changes.
	 * @signature `"drawElementsListChanged()"`
	 * @event
	 */
	drawElementsListChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the state of whehter or not Geo-Grafted objects are drawn as grafted changes.
	 * @signature `"graftDrawingChanged()"`
	 * @event
	 */
	graftDrawingChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the state of whether or not to invert the behavior of scrolling the mouse wheel changes.
	 * @signature `"invertMouseWheelChanged(bool)"`
	 * @event
	 */
	invertMouseWheelChanged(onOff) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when a quick draw operation is finished.
	 * @signature `"manipFinished()"`
	 * @event
	 */
	manipFinished() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when a quick draw operation is started.
	 * @signature `"manipStarted()"`
	 * @event
	 */
	manipStarted() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the manipulation binding state changes.
	 * @signature `"manipulationBindingChanged(bool)"`
	 * @event
	 */
	manipulationBindingChanged(onOff) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the scalar for mouse movement changes.
	 * @signature `"mouseDragScalarChanged(float)"`
	 * @event
	 */
	mouseDragScalarChanged(scalar) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the scalar for the mouse wheel changes.
	 * @signature `"mouseWheelScalarChanged(float)"`
	 * @event
	 */
	mouseWheelScalarChanged(scalar) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the mode for what happens when a node is clicked changes.
	 * @signature `"nodeClickModeChanged(int)"`
	 * @event
	 */
	nodeClickModeChanged(mode) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when whether or not to propagate background color changes has changed.
	 * @signature `"propagateBackgroundColorChanged(bool)"`
	 * @event
	 */
	propagateBackgroundColorChanged(onOff) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the quick draw mode changes.
	 * @signature `"quickDrawModeChanged(QDMode)"`
	 * @event
	 */
	quickDrawModeChanged(mode) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the redraw lock state changes.
	 * @signature `"redrawsLocked(bool)"`
	 * @event
	 */
	redrawsLocked(onOff) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the mode for what happens when a region is clicked changes.
	 * @signature `"regionClickModeChanged(int)"`
	 * @event
	 */
	regionClickModeChanged(mode) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the subD manipulation state changes.
	 * @signature `"subDManipulationChanged(bool)"`
	 * @event
	 */
	subDManipulationChanged(onOff) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the tool list changes.
	 * @signature `"toolListChanged()"`
	 * @event
	 */
	toolListChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the layout of the viewports changes.
	 * @signature `"viewLayoutChanged()"`
	 * @event
	 */
	viewLayoutChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the global list of available cameras changes.
	 * @signature `"viewportCameraListChanged()"`
	 * @event
	 */
	viewportCameraListChanged() {};

}
/**
 * TODO:
 * Add detailed description.
 */
class DzViewRenderHandler extends DzImageRenderHandler {
	/**
	 * @description Create a new view render handler for rendering a single frame.
	 * @param {Size} size - The width & height of the rendered image.
	 * @param {DzTime} time - The time to render the frame at.
	 * @param {String} filename - The filename to save the image to.
	 * @param {Boolean} isSoftware - If true, the window shows itself at the beginning of rendering so that the user can see the progress of the render. If false, the window stays hidden until the render is complete so that it does not interfere with the OpenGL viewport.
	 */
	constructor(size, time, filename, isSoftware) {};

}
/**
 * A DzViewTool is a tool that functions in concert with a 3D viewport. View tools are registered with the DzViewportMgr singleton and can be accessed/modified via script.
 */
class DzViewTool extends DzBase {
	/**
	 * @description Derived classes can return a popup menu that will be displayed when the user selects the options menu for the "Tool Settings" pane.
	 * @returns DzActionMenu The option menu for the tool.
	 */
	getOptionsMenu() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the view tool becomes the active tool in the viewport.
	 * @signature `"activated()"`
	 * @event
	 */
	activated() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the view tool stops being the active tool in the viewport.
	 * @signature `"deactivated()"`
	 * @event
	 */
	deactivated() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the view tool needs to be redrawn in the viewport.
	 * @signature `"drawnDataChanged()"`
	 * @event
	 */
	drawnDataChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the option menu for the "Tool Settings" pane should be rebuilt to reflect options for the active tool.
	 * @signature `"rebuildMenu()"`
	 * @event
	 */
	rebuildMenu() {};

}
/**
 * An asset save filter for saving a Wearable(s) Preset in the DSON format.
 * See Also:
 */
class DzWearablesAssetFilter extends DzAssetFileOutFilter {
	/**
	 * @description TODO:
	 * Add description.
	 */
	constructor() {};

}
/**
 * TODO:
 * Add detailed description.
 */
class DzWeightMap extends DzRefCountedItem, DzElement {
	/**
	 * @description Constrictor. Creates a new weight map.
	 */
	constructor() {};
	/**
	 * @description Clears the values of affected weights in this map.
	 */
	clearAffectedWeights() {};
	/**
	 * @description After making a shallow copy with the copy() method, this method can be used to "detach" the shallow copy, making it a deep copy that no longer shares its weight map values.
	 */
	detach() {};
	/**
	 * @description Empties this weight map and frees the data for the vertex weight array.
	 */
	empty() {};
	/**
	 * @returns Number The floating point equivalent (0.0 - 1.0) of the weight at the given index in the map.
	 * @param {Number} idx - The index of the vertex to get the weight for.
	 */
	getFloatWeight(idx) {};
	/**
	 * @returns Number The number of vertices in this weight map that are affected.
	 */
	getNumAffected() {};
	/**
	 * @returns Number The number of weights for this map.
	 */
	getNumWeights() {};
	/**
	 * @returns Boolean true if this weight map contains any non-zero weights, otherwise false.
	 */
	hasNonZeroWeight() {};
	/**
	 * @returns Boolean true if this weight map has no data, otherwise false.
	 */
	isEmpty() {};
	/**
	 * @returns Boolean true if the weight values in this map should be considered non-editable when normalization examines this map.
	 */
	isLocked() {};
	/**
	 * @returns Boolean true if the weight values need to be stored in the file, otherwise false.
	 */
	isPersistent() {};
	/**
	 * @description Merges the given weight map with this weight map.
	 * @returns DzWeightMap
	 * @param {DzWeightMap} map - The weight map to merge.
	 */
	merge(map) {};
	/**
	 * @since 4.15.0.4
	 * @param {Number} idx - The index of the vertex to set the weight for.
	 * @param {Number} weight - The floating point equivalent (0.0 - 1.0) of the weight at the given index in the map.
	 */
	setFloatWeight(idx, weight) {};
	/**
	 * @description Sets whether or not the weight values should be considered locked when normalization examines this map.
	 * @param {Boolean} onOff - If true, the weight values should be considered non-editable when normalization examines this map.
	 */
	setLocked(onOff) {};
	/**
	 * @description Sets the number of weights for the map, and resizes the data array.
	 * @param {Number} nWeights - The new number of weights (vertices) for the map.
	 * @param {Boolean} keepExisting - Whether or not to keep existing weights within the specified range.
	 */
	setNumWeights(nWeights, keepExisting = false) {};
	/**
	 * @description Sets whether or not the weight values need to be stored in the file.
	 * @param {Boolean} onOff - If true, the weight values need to be stored in the file.
	 */
	setPersistent(onOff) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the weights in this map have changed.
	 * @signature `"weightValuesChanged()"`
	 * @event
	 */
	weightValuesChanged() {};

}
/**
 * TODO:
 * Add detailed description.
 */
class DzWeld extends DzBase {
	/**
	 * @description Creates a new weld operation.
	 */
	constructor() {};
	/**
	 * @description Creates a new weld operation that welds the given bones.
	 */
	constructor(weldBone, targetBone) {};
	/**
	 * @returns DzBone The bone whose geometry is not modified by the weld operation.
	 */
	getTargetBone() {};
	/**
	 * @returns DzBone The bone whose geometry is modified by the weld operation.
	 */
	getWeldBone() {};
	/**
	 * @description Sets the bone that will be welded to - the welding operation will not modify this bone's geometry, only the normals on the border.
	 */
	setTargetBone(targetBone) {};
	/**
	 * @description Sets the bone that will be welded - the welding operation will move boundary points in this bone's geometry, and recalculate the affected normals.
	 */
	setWeldBone(weldBone) {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the target bone has changed.
	 * @signature `"targetBoneChanged()"`
	 * @event
	 */
	targetBoneChanged() {};
	/**
	 * **THIS IS A SIGNAL!**
	 * @description Emitted when the weld bone has changed.
	 * @signature `"weldBoneChanged()"`
	 * @event
	 */
	weldBoneChanged() {};

}
/**
 * 
 */
class DzWidget extends QObject {
	/**
	 * @description Creates a new widget as a child of the given parent widget.
	 * @param {DzWidget} parent - The widget parent for the widget.
	 */
	constructor(parent) {};
	/**
	 * @description Holds the number of different colors available for the widget. (Read Only)
	 * @type {Number}
	 */
	colorCount;
	/**
	 * @description Holds the bit depth (number of bit planes) of the widget. (Read Only)
	 * @type {Number}
	 */
	depth;
	/**
	 * @description Holds whether or not the widget is enabled.
	 * @type {Boolean}
	 */
	enabled;
	/**
	 * @description Holds the Font for the widget and all child widgets that do not have a custom font of their own.
	 * @type {Font}
	 */
	font;
	/**
	 * @description Holds the x position of the widget, relative to the desktop. (Read Only)
	 * @type {Number}
	 */
	globalX;
	/**
	 * @description Holds the y position of the widget, relative to the desktop. (Read Only)
	 * @type {Number}
	 */
	globalY;
	/**
	 * @description Holds the height of the widget.
	 * @type {Number}
	 */
	height;
	/**
	 * @description Holds the height of the widget in millimeters. (Read Only)
	 * @type {Number}
	 */
	heightMM;
	/**
	 * @description Holds the horizontal resolution of the widget in dots per inch. (Read Only)
	 * @type {Number}
	 */
	logicalDpiX;
	/**
	 * @description Holds the vertical resolution of the widget in dots per inch. (Read Only)
	 * @type {Number}
	 */
	logicalDpiY;
	/**
	 * @description Holds the maximum height of the widget.
	 * @type {Number}
	 */
	maxHeight;
	/**
	 * @description Holds the maximum width of the widget.
	 * @type {Number}
	 */
	maxWidth;
	/**
	 * @description Holds the minimum height of the widget.
	 * @type {Number}
	 */
	minHeight;
	/**
	 * @description Holds the minimum width of the widget.
	 * @type {Number}
	 */
	minWidth;
	/**
	 * @description Holds the Palette for the widget and all child widgets that do not have a custom palette of their own.
	 * @type {Palette}
	 */
	palette;
	/**
	 * @description Holds the background color of the widget.
	 * @type {Color}
	 */
	paletteBackgroundColor;
	/**
	 * @description Holds the background Pixmap of the widget.
	 * @type {Pixmap}
	 */
	paletteBackgroundPixmap;
	/**
	 * @description Holds the foreground color of the widget.
	 * @type {Color}
	 */
	paletteForegroundColor;
	/**
	 * @description Holds the horizontal resolution of the widget in dots per inch. (Read Only)
	 * @type {Number}
	 */
	physicalDpiX;
	/**
	 * @description Holds the vertical resolution of the widget in dots per inch. (Read Only)
	 * @type {Number}
	 */
	physicalDpiY;
	/**
	 * @description Holds the tool tip text for the widget and all child widgets that do not have a custom tool tip text of their own.
	 * @type {String}
	 */
	toolTip;
	/**
	 * @description Holds the "Whats This" text for the widget and all child widgets that do not have a custom "Whats This" text of their own.
	 * @type {String}
	 */
	whatsThis;
	/**
	 * @description Holds the width of the widget.
	 * @type {Number}
	 */
	width;
	/**
	 * @description Holds the width of the widget in millimeters. (Read Only)
	 * @type {Number}
	 */
	widthMM;
	/**
	 * @description Holds the x position of the widget, relative to its parent.
	 * @type {Number}
	 */
	x;
	/**
	 * @description Holds the y position of the widget, relative to its parent.
	 * @type {Number}
	 */
	y;
	/**
	 * @description ENUM: Aligns horizontally with the left edge.
	 */
	AlignLeft;
	/**
	 * @description ENUM: TODO: Add description.
	 */
	AlignLeading;
	/**
	 * @description ENUM: Aligns horizontally with the right edge.
	 */
	AlignRight;
	/**
	 * @description ENUM: TODO: Add description.
	 */
	AlignTrailing;
	/**
	 * @description ENUM: Aligns horizontally in the center.
	 */
	AlignHCenter;
	/**
	 * @description ENUM: Justifies the text in the available space.
	 */
	AlignJustify;
	/**
	 * @description ENUM: TODO: Add description.
	 */
	AlignAbsolute;
	/**
	 * @description ENUM: TODO: Add description.
	 */
	AlignHorizontal_Mask;
	/**
	 * @description ENUM: Aligns vertically with the top edge.
	 */
	AlignTop;
	/**
	 * @description ENUM: Aligns vertically with the bottom edge.
	 */
	AlignBottom;
	/**
	 * @description ENUM: Aligns vertically in the center.
	 */
	AlignVCenter;
	/**
	 * @description ENUM: TODO: Add description.
	 */
	AlignVertical_Mask;
	/**
	 * @description ENUM: Aligns in the center in both dimensions.
	 */
	AlignCenter;
	/**
	 * @description ENUM: Aligns horizontally according to the language (left for most).
	 */
	AlignAuto;
	/**
	 * @description ENUM: Horizontal orientation (Left to Right).
	 */
	Horizontal;
	/**
	 * @description ENUM: Vertical orientation (Top to Bottom).
	 */
	Vertical;
	/**
	 * @description ENUM: Sort in ascending order.
	 */
	AscendingOrder;
	/**
	 * @description ENUM: Sort in descending order.
	 */
	DescendingOrder;
	/**
	 * @description ENUM: Provided for backward compatibility.
	 */
	Ascending;
	/**
	 * @description ENUM: Provided for backward compatibility.
	 */
	Descending;
	/**
	 * @description ENUM: TODO: Add description.
	 */
	ElideLeft;
	/**
	 * @description ENUM: TODO: Add description.
	 */
	ElideRight;
	/**
	 * @description ENUM: TODO: Add description.
	 */
	ElideMiddle;
	/**
	 * @description ENUM: TODO: Add description.
	 */
	ElideNone;
	/**
	 * @description ENUM: Treat all whitespace as spaces and print one line.
	 */
	TextSingleLine;
	/**
	 * @description ENUM: If it is impossible to stay within the bounds, print outside.
	 */
	TextDontClip;
	/**
	 * @description ENUM: Makes the ASCII tab character move to the next tab stop.
	 */
	TextExpandTabs;
	/**
	 * @description ENUM: Displays the string "&P" as P. For an ampersand, use "&&".
	 */
	TextShowMnemonic;
	/**
	 * @description ENUM: Break lines at appropriate points, e.g., word boundaries.
	 */
	TextWordWrap;
	/**
	 * @description ENUM: Break lines anywhere, even within words.
	 */
	TextWrapAnywhere;
	/**
	 * @description ENUM: Treat this text as "hidden" and do not print it.
	 */
	TextDontPrint;
	/**
	 * @description ENUM: TODO: Add description.
	 */
	TextIncludeTrailingSpaces;
	/**
	 * @description ENUM: Same as TextShowMnemonic but does not draw the underlines.
	 */
	TextHideMnemonic;
	/**
	 * @description ENUM: Ensures that text lines are justified.
	 */
	TextJustificationForced;
	/**
	 * @description ENUM: TODO: Add description.
	 */
	TextForceLeftToRight;
	/**
	 * @description ENUM: TODO: Add description.
	 */
	TextForceRightToLeft;
	/**
	 * @description ENUM: TODO: Add description.
	 */
	TextLongestVariant;
	/**
	 * @description ENUM: TODO: Add description.
	 */
	TextBypassShaping;
	/**
	 * @description ENUM: TODO: Add description.
	 */
	NoTextInteraction;
	/**
	 * @description ENUM: No interaction with the text is possible.
	 */
	TextSelectableByMouse;
	/**
	 * @description ENUM: Text can be selected with the mouse and copied to the clipboard using a context menu or standard keyboard shortcuts.
	 */
	TextSelectableByKeyboard;
	/**
	 * @description ENUM: Text can be selected with the cursor keys on the keyboard. A text cursor is shown.
	 */
	LinksAccessibleByMouse;
	/**
	 * @description ENUM: Links can be highlighted and activated with the mouse.
	 */
	LinksAccessibleByKeyboard;
	/**
	 * @description ENUM: Links can be focused using tab and activated with enter.
	 */
	TextEditable;
	/**
	 * @description ENUM: The text is fully editable.
	 */
	TextEditorInteraction;
	/**
	 * @description ENUM: The default for a DzTextEdit.
	 */
	TextBrowserInteraction;
	/**
	 * @returns DzWidget The child widget named name, otherwise undefined.
	 */
	findChildOfWidget(name) {};
	/**
	 * @returns Array A list of this widget's children.
	 */
	getChildrenOfWidget(name = "") {};
	/**
	 * @returns DzLayout The layout managing this widget.
	 */
	getLayout() {};
	/**
	 * @returns QWidget The wrapped QWidget.
	 */
	getWidget() {};
	/**
	 * @description Paints the widget, restricted by the given rectangle, into a pixmap. If the widget has any children, they are also painted in the appropriate positions.
	 * @returns Pixmap If the rectangle doesn't overlap the widget's rectangle, or an error occurs, the pixmap will be null. If the rectangle is a superset of the widget, the areas outside the widget are covered with the widget's background.
	 * @since 4.9.3.105
	 * @param {Rect} rectangle - The rectangle, relative to the top left corner of the widget, to capture.
	 */
	grab(rectangle) {};
	/**
	 * @description Paints the widget, restricted by the given rectangle, into a pixmap. If the widget has any children, they are also painted in the appropriate positions.
	 * @returns Pixmap If the rectangle defined by x, y, w, and h doesn't overlap the widget's rectangle, or an error occurs, the pixmap will be null. If the rectangle is a superset of the widget, the areas outside the widget are covered with the widget's background.
	 * @since 4.9.3.105
	 * @param {Number} x - The relative x position of the rectangle to capture.
	 * @param {Number} y - The relative y position of the rectangle to capture.
	 * @param {Number} w - The width of the rectangle to capture.
	 * @param {Number} h - The height of the rectangle to capture.
	 */
	grab(x = 0, y = 0, width = -1, height = -1) {};
	/**
	 * @description Hide the widget; make it invisible.
	 */
	hide() {};
	/**
	 * @description Translates the widget coordinate pos from the coordinate system of parent to this widget's coordinate system. parent must not be undefined and must be a parent of the calling widget.
	 * @returns Point
	 * @since 4.9.0.9
	 * @param {DzWidget} parent - The widget in the parent chain to map from.
	 * @param {Point} pos - The position to map.
	 */
	mapFrom(parent, pos) {};
	/**
	 * @description Translates the global screen coordinate pos to widget coordinates.
	 * @returns Point
	 * @since 4.9.0.9
	 * @param {Point} pos - The position to map.
	 */
	mapFromGlobal(pos) {};
	/**
	 * @description Translates the widget coordinate pos from the coordinate system of the parent widget to this widget's coordinate system.
	 * @returns Point
	 * @since 4.9.0.9
	 * @param {Point} pos - The position to map.
	 */
	mapFromParent(pos) {};
	/**
	 * @description Translates the widget coordinate pos to the coordinate system of parent. parent must not be undefined and must be a parent of the calling widget.
	 * @returns Point
	 * @since 4.9.0.9
	 * @param {DzWidget} parent - The widget in the parent chain to map to.
	 * @param {Point} pos - The position to map.
	 */
	mapTo(parent, pos) {};
	/**
	 * @description Translates the widget coordinate pos to global screen coordinates. For example, mapToGlobal( Point(0, 0) ) would give the global coordinates of the top-left pixel of the widget.
	 * @returns Point
	 * @since 4.9.0.9
	 * @param {Point} pos - The position to map.
	 */
	mapToGlobal(pos) {};
	/**
	 * @description Translates the widget coordinate pos to a coordinate in the parent widget.
	 * @returns Point
	 * @since 4.9.0.9
	 * @param {Point} pos - The position to map.
	 */
	mapToParent(pos) {};
	/**
	 * @description Reparents the widget.
	 * @returns DzWidget
	 * @param {DzWidget} parent - The new parent widget for this widget.
	 * @param {Point} pnt - The location in the new parent widget to place this widget.
	 * @param {Boolean} showIt - If true, show() is called on the widget after it is reparented.
	 */
	reparent(parent, pnt, showIt = false) {};
	/**
	 * @description Sets a fixed height for the widget.
	 */
	setFixedHeight(height) {};
	/**
	 * @description Sets a fixed width and height for the widget.
	 */
	setFixedSize(width, height) {};
	/**
	 * @description Sets a fixed width for the widget.
	 */
	setFixedWidth(width) {};
	/**
	 * @description Sets the position and size for the widget (relative to its parent).
	 */
	setGeometry(x, y, w, h) {};
	/**
	 * @description Show the widget; make it visible if its parent is visible.
	 */
	show() {};

}
/**
 * This pages exists in order to indicate the DAZScript accessible properties and signals of the Qt native QWidget class.
 */
class QWidget extends QObject {
	/**
	 * @description See QWidget.acceptDrops.
	 * @type {Boolean}
	 */
	acceptDrops;
	/**
	 * @description See QWidget.accessibleDescription.
	 * @type {String}
	 */
	accessibleDescription;
	/**
	 * @description See QWidget.accessibleName.
	 * @type {String}
	 */
	accessibleName;
	/**
	 * @description See QWidget.autoFillBackground.
	 * @type {Boolean}
	 */
	autoFillBackground;
	/**
	 * @description See QWidget.baseSize.
	 * @type {Size}
	 */
	baseSize;
	/**
	 * @description See QWidget.childrenRect.
	 * @type {Rect}
	 */
	childrenRect;
	/**
	 * @description See QWidget.enabled.
	 * @type {Boolean}
	 */
	enabled;
	/**
	 * @description See QWidget.focus.
	 * @type {Boolean}
	 */
	focus;
	/**
	 * @description See QWidget.font.
	 * @type {Font}
	 */
	font;
	/**
	 * @description See QWidget.frameGeometry.
	 * @type {Rect}
	 */
	frameGeometry;
	/**
	 * @description See QWidget.frameSize.
	 * @type {Size}
	 */
	frameSize;
	/**
	 * @description See QWidget.fullScreen.
	 * @type {Boolean}
	 */
	fullScreen;
	/**
	 * @description See QWidget.geometry.
	 * @type {Rect}
	 */
	geometry;
	/**
	 * @description See QWidget.height.
	 * @type {Number}
	 */
	height;
	/**
	 * @description See QWidget.isActiveWindow.
	 * @type {Boolean}
	 */
	isActiveWindow;
	/**
	 * @description See QWidget.maximized.
	 * @type {Boolean}
	 */
	maximized;
	/**
	 * @description See QWidget.maximumHeight.
	 * @type {Number}
	 */
	maximumHeight;
	/**
	 * @description See QWidget.maximumSize.
	 * @type {Size}
	 */
	maximumSize;
	/**
	 * @description See QWidget.maximumWidth.
	 * @type {Number}
	 */
	maximumWidth;
	/**
	 * @description See QWidget.minimized.
	 * @type {Boolean}
	 */
	minimized;
	/**
	 * @description See QWidget.minimumHeight.
	 * @type {Number}
	 */
	minimumHeight;
	/**
	 * @description See QWidget.minimumSize.
	 * @type {Size}
	 */
	minimumSize;
	/**
	 * @description See QWidget.minimumSizeHint.
	 * @type {Size}
	 */
	minimumSizeHint;
	/**
	 * @description See QWidget.minimumWidth.
	 * @type {Number}
	 */
	minimumWidth;
	/**
	 * @description See QWidget.mouseTracking.
	 * @type {Boolean}
	 */
	mouseTracking;
	/**
	 * @description See QWidget.normalGeometry.
	 * @type {Rect}
	 */
	normalGeometry;
	/**
	 * @description See QWidget.palette.
	 * @type {Palette}
	 */
	palette;
	/**
	 * @description See QWidget.pos.
	 * @type {Point}
	 */
	pos;
	/**
	 * @description See QWidget.rect.
	 * @type {Rect}
	 */
	rect;
	/**
	 * @description See QWidget.size.
	 * @type {Size}
	 */
	size;
	/**
	 * @description See QWidget.sizeHint.
	 * @type {Size}
	 */
	sizeHint;
	/**
	 * @description See QWidget.sizeIncrement.
	 * @type {Size}
	 */
	sizeIncrement;
	/**
	 * @description See QWidget.statusTip.
	 * @type {String}
	 */
	statusTip;
	/**
	 * @description See QWidget.styleSheet.
	 * @type {String}
	 */
	styleSheet;
	/**
	 * @description See QWidget.toolTip.
	 * @type {String}
	 */
	toolTip;
	/**
	 * @description See QWidget.updatesEnabled.
	 * @type {Boolean}
	 */
	updatesEnabled;
	/**
	 * @description See QWidget.visible.
	 * @type {Boolean}
	 */
	visible;
	/**
	 * @description See QWidget.whatsThis.
	 * @type {String}
	 */
	whatsThis;
	/**
	 * @description See QWidget.width.
	 * @type {Number}
	 */
	width;
	/**
	 * @description See QWidget.windowFilePath.
	 * @type {String}
	 */
	windowFilePath;
	/**
	 * @description See QWidget.windowIconText.
	 * @type {String}
	 */
	windowIconText;
	/**
	 * @description See QWidget.windowModified.
	 * @type {Boolean}
	 */
	windowModified;
	/**
	 * @description See QWidget.windowOpacity.
	 * @type {Number}
	 */
	windowOpacity;
	/**
	 * @description See QWidget.windowTitle.
	 * @type {String}
	 */
	windowTitle;
	/**
	 * @description See QWidget.x.
	 * @type {Number}
	 */
	x;
	/**
	 * @description See QWidget.y.
	 * @type {Number}
	 */
	y;
	/**
	 * @description See QWidget.close().
	 * @returns Boolean
	 */
	close() {};
	/**
	 * @description See QWidget.hide().
	 */
	hide() {};
	/**
	 * @description See QWidget.lower().
	 */
	lower() {};
	/**
	 * @description See QWidget.raise().
	 */
	raise() {};
	/**
	 * @description See QWidget.repaint().
	 */
	repaint() {};
	/**
	 * @description See QWidget.setDisabled().
	 */
	setDisabled(disable) {};
	/**
	 * @description See QWidget.setEnabled().
	 */
	setEnabled(enabled) {};
	/**
	 * @description See QWidget.setFocus().
	 */
	setFocus() {};
	/**
	 * @description See QWidget.setHidden().
	 */
	setHidden(hidden) {};
	/**
	 * @description See QWidget.setStyleSheet().
	 */
	setStyleSheet(styleSheet) {};
	/**
	 * @description See QWidget.setVisible().
	 */
	setVisible(visible) {};
	/**
	 * @description See QWidget.setWindowModified().
	 */
	setWindowModified(modified) {};
	/**
	 * @description See QWidget.setWindowTitle.
	 */
	setWindowTitle(title) {};
	/**
	 * @description See QWidget.show().
	 */
	show() {};
	/**
	 * @description See QWidget.showFullScreen().
	 */
	showFullScreen() {};
	/**
	 * @description See QWidget.showMaximized().
	 */
	showMaximized() {};
	/**
	 * @description See QWidget.showMinimized().
	 */
	showMinimized() {};
	/**
	 * @description See QWidget.showNormal().
	 */
	showNormal() {};
	/**
	 * @description See QWidget.update().
	 */
	update() {};

}
/**
 * 
 */
class DzZipFile extends DzFileInfo {
	/**
	 * @description Creates a zip file with the given file name.
	 * @param {String} file - The path of the *.zip file.
	 */
	constructor(file) {};
	/**
	 * @description ENUM: Open the file for reading only.
	 */
	ReadOnly;
	/**
	 * @description ENUM: Open the file for writing only.
	 */
	WriteOnly;
	/**
	 * @description ENUM: The file is opened in append mode, so that all data is written to the end of the file.
	 */
	Append;
	/**
	 * @description Compresses all the files in the given directory.
	 * @returns Boolean
	 * @since 4.9.3.149
	 * @param {String} pathOnDisk - The path of the directory that contains the directory to compress.
	 * @param {String} pathInZip - The path of the directory to compress to within the zip.
	 */
	addDirToZip(pathOnDisk, pathInZip) {};
	/**
	 * @description Compresses the file into the zip.
	 * @returns Boolean
	 * @since 4.9.3.149
	 * @param {String} pathOnDisk - The path of the directory that contains the file to compress.
	 * @param {String} pathInZip - The path of the file to compress to within the zip.
	 */
	addFileToZip(pathOnDisk, pathInZip) {};
	/**
	 * @description Close the file.
	 */
	close() {};
	/**
	 * @description Compresses all the files in the given directory.
	 * @returns Boolean
	 * @param {String} path - The path to the directory to compress files from.
	 * @param {Boolean} recursive - If true, path represents the base path of the directory tree to compress (i.e., the contents of the directory, all subdirectories, and the contents of those directories, recursively). If false, only files in the given path are compressed.
	 */
	compressAll(path, recursive = true) {};
	/**
	 * @description Extracts all the files from the zip file. The relative path of the files are appended to the specified base path.
	 * @returns Boolean
	 * @param {String} basePath - The base path to extract the files to.
	 */
	extractAll(basePath) {};
	/**
	 * @description Extracts the current file from the zip file. The relative path of the current file is appended to the specified base path.
	 * @returns Boolean
	 * @since 4.9.3.149
	 * @param {String} basePath - The base path to extract to.
	 */
	extractCurrentFile(basePath) {};
	/**
	 * @returns Number The number of the entry in the current file (if any).
	 * @since 4.9.3.149
	 */
	getCurrentFileAtributes() {};
	/**
	 * @returns String The comment for the current file (if any).
	 */
	getCurrentFileComment() {};
	/**
	 * @returns Number The compressed size of the current file.
	 * @since 4.9.3.149
	 */
	getCurrentFileCompressedSize() {};
	/**
	 * @returns String The compression method of the current file.
	 * @since 4.9.3.149
	 */
	getCurrentFileCompressionMethod() {};
	/**
	 * @returns Number The ratio of compression on the current file.
	 * @since 4.9.3.149
	 */
	getCurrentFileCompressionRatio() {};
	/**
	 * @returns String The CRC value of the current file.
	 * @since 4.9.3.149
	 */
	getCurrentFileCRC() {};
	/**
	 * @returns Boolean true if the current entry is a folder, otherwise false.
	 * @since 4.9.3.149
	 */
	getCurrentFileIsFolder() {};
	/**
	 * @returns String The name of the current file.
	 */
	getCurrentFileName() {};
	/**
	 * @returns Number The compressed size of the current file.
	 * @since 4.9.3.149
	 */
	getCurrentFileUncompressedSize() {};
	/**
	 * @returns Array A list of the file names in the zip file.
	 */
	getFileNames() {};
	/**
	 * @returns String The global comment for the zip file.
	 */
	getGlobalComment() {};
	/**
	 * @returns Number The number of entries in the zip file.
	 */
	getNumEntries() {};
	/**
	 * @description Set the current file of the zip file to the first file.
	 * @returns Boolean
	 */
	goToFirstFile() {};
	/**
	 * @description Set the current file of the zip file to the next file.
	 * @returns Boolean
	 */
	goToNextFile() {};
	/**
	 * @description Attempts to locate an entry in the zip file.
	 * @returns Boolean true if the file was found, otherwise false.
	 * @param {String} pathInZip - The path of the entry to locate within the zip.
	 * @attention If the entry is found, it becomes the current.
	 */
	locateFile(pathInZip) {};
	/**
	 * @description Open the file with the given mode.
	 * @returns Boolean true if the file was opened successfully, otherwise false.
	 */
	open(mode) {};
	/**
	 * @description The global comment for the zip file.
	 * @returns Boolean true if the comment was set, otherwise false.
	 * @since 4.9.3.149
	 */
	setGlobalComment(comment) {};

}

